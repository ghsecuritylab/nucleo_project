
nucleos-f429zi-net14-2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000db44  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002a4c  0800dcf4  0800dcf4  0001dcf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08010740  08010740  00020740  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08010748  08010748  00020748  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801074c  0801074c  0002074c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000007c  20000000  08010750  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  0003007c  2**0
                  CONTENTS
  8 .bss          0000aef4  2000007c  2000007c  0003007c  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  2000af70  2000af70  0003007c  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0003007c  2**0
                  CONTENTS, READONLY
 11 .debug_info   000542e7  00000000  00000000  000300ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00009426  00000000  00000000  00084393  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0001fc12  00000000  00000000  0008d7b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002358  00000000  00000000  000ad3d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002858  00000000  00000000  000af728  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   000162e4  00000000  00000000  000b1f80  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    0000b074  00000000  00000000  000c8264  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  000d32d8  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00006548  00000000  00000000  000d3354  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800dcdc 	.word	0x0800dcdc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000080 	.word	0x20000080
 80001ec:	0800dcdc 	.word	0x0800dcdc

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <__aeabi_uldivmod>:
 8000200:	b953      	cbnz	r3, 8000218 <__aeabi_uldivmod+0x18>
 8000202:	b94a      	cbnz	r2, 8000218 <__aeabi_uldivmod+0x18>
 8000204:	2900      	cmp	r1, #0
 8000206:	bf08      	it	eq
 8000208:	2800      	cmpeq	r0, #0
 800020a:	bf1c      	itt	ne
 800020c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000210:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000214:	f000 b97a 	b.w	800050c <__aeabi_idiv0>
 8000218:	f1ad 0c08 	sub.w	ip, sp, #8
 800021c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000220:	f000 f806 	bl	8000230 <__udivmoddi4>
 8000224:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000228:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800022c:	b004      	add	sp, #16
 800022e:	4770      	bx	lr

08000230 <__udivmoddi4>:
 8000230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000234:	468c      	mov	ip, r1
 8000236:	460d      	mov	r5, r1
 8000238:	4604      	mov	r4, r0
 800023a:	9e08      	ldr	r6, [sp, #32]
 800023c:	2b00      	cmp	r3, #0
 800023e:	d151      	bne.n	80002e4 <__udivmoddi4+0xb4>
 8000240:	428a      	cmp	r2, r1
 8000242:	4617      	mov	r7, r2
 8000244:	d96d      	bls.n	8000322 <__udivmoddi4+0xf2>
 8000246:	fab2 fe82 	clz	lr, r2
 800024a:	f1be 0f00 	cmp.w	lr, #0
 800024e:	d00b      	beq.n	8000268 <__udivmoddi4+0x38>
 8000250:	f1ce 0c20 	rsb	ip, lr, #32
 8000254:	fa01 f50e 	lsl.w	r5, r1, lr
 8000258:	fa20 fc0c 	lsr.w	ip, r0, ip
 800025c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000260:	ea4c 0c05 	orr.w	ip, ip, r5
 8000264:	fa00 f40e 	lsl.w	r4, r0, lr
 8000268:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800026c:	0c25      	lsrs	r5, r4, #16
 800026e:	fbbc f8fa 	udiv	r8, ip, sl
 8000272:	fa1f f987 	uxth.w	r9, r7
 8000276:	fb0a cc18 	mls	ip, sl, r8, ip
 800027a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800027e:	fb08 f309 	mul.w	r3, r8, r9
 8000282:	42ab      	cmp	r3, r5
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x6c>
 8000286:	19ed      	adds	r5, r5, r7
 8000288:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 800028c:	f080 8123 	bcs.w	80004d6 <__udivmoddi4+0x2a6>
 8000290:	42ab      	cmp	r3, r5
 8000292:	f240 8120 	bls.w	80004d6 <__udivmoddi4+0x2a6>
 8000296:	f1a8 0802 	sub.w	r8, r8, #2
 800029a:	443d      	add	r5, r7
 800029c:	1aed      	subs	r5, r5, r3
 800029e:	b2a4      	uxth	r4, r4
 80002a0:	fbb5 f0fa 	udiv	r0, r5, sl
 80002a4:	fb0a 5510 	mls	r5, sl, r0, r5
 80002a8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002ac:	fb00 f909 	mul.w	r9, r0, r9
 80002b0:	45a1      	cmp	r9, r4
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x98>
 80002b4:	19e4      	adds	r4, r4, r7
 80002b6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002ba:	f080 810a 	bcs.w	80004d2 <__udivmoddi4+0x2a2>
 80002be:	45a1      	cmp	r9, r4
 80002c0:	f240 8107 	bls.w	80004d2 <__udivmoddi4+0x2a2>
 80002c4:	3802      	subs	r0, #2
 80002c6:	443c      	add	r4, r7
 80002c8:	eba4 0409 	sub.w	r4, r4, r9
 80002cc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002d0:	2100      	movs	r1, #0
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d061      	beq.n	800039a <__udivmoddi4+0x16a>
 80002d6:	fa24 f40e 	lsr.w	r4, r4, lr
 80002da:	2300      	movs	r3, #0
 80002dc:	6034      	str	r4, [r6, #0]
 80002de:	6073      	str	r3, [r6, #4]
 80002e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d907      	bls.n	80002f8 <__udivmoddi4+0xc8>
 80002e8:	2e00      	cmp	r6, #0
 80002ea:	d054      	beq.n	8000396 <__udivmoddi4+0x166>
 80002ec:	2100      	movs	r1, #0
 80002ee:	e886 0021 	stmia.w	r6, {r0, r5}
 80002f2:	4608      	mov	r0, r1
 80002f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f8:	fab3 f183 	clz	r1, r3
 80002fc:	2900      	cmp	r1, #0
 80002fe:	f040 808e 	bne.w	800041e <__udivmoddi4+0x1ee>
 8000302:	42ab      	cmp	r3, r5
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xdc>
 8000306:	4282      	cmp	r2, r0
 8000308:	f200 80fa 	bhi.w	8000500 <__udivmoddi4+0x2d0>
 800030c:	1a84      	subs	r4, r0, r2
 800030e:	eb65 0503 	sbc.w	r5, r5, r3
 8000312:	2001      	movs	r0, #1
 8000314:	46ac      	mov	ip, r5
 8000316:	2e00      	cmp	r6, #0
 8000318:	d03f      	beq.n	800039a <__udivmoddi4+0x16a>
 800031a:	e886 1010 	stmia.w	r6, {r4, ip}
 800031e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000322:	b912      	cbnz	r2, 800032a <__udivmoddi4+0xfa>
 8000324:	2701      	movs	r7, #1
 8000326:	fbb7 f7f2 	udiv	r7, r7, r2
 800032a:	fab7 fe87 	clz	lr, r7
 800032e:	f1be 0f00 	cmp.w	lr, #0
 8000332:	d134      	bne.n	800039e <__udivmoddi4+0x16e>
 8000334:	1beb      	subs	r3, r5, r7
 8000336:	0c3a      	lsrs	r2, r7, #16
 8000338:	fa1f fc87 	uxth.w	ip, r7
 800033c:	2101      	movs	r1, #1
 800033e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000342:	0c25      	lsrs	r5, r4, #16
 8000344:	fb02 3318 	mls	r3, r2, r8, r3
 8000348:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800034c:	fb0c f308 	mul.w	r3, ip, r8
 8000350:	42ab      	cmp	r3, r5
 8000352:	d907      	bls.n	8000364 <__udivmoddi4+0x134>
 8000354:	19ed      	adds	r5, r5, r7
 8000356:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x132>
 800035c:	42ab      	cmp	r3, r5
 800035e:	f200 80d1 	bhi.w	8000504 <__udivmoddi4+0x2d4>
 8000362:	4680      	mov	r8, r0
 8000364:	1aed      	subs	r5, r5, r3
 8000366:	b2a3      	uxth	r3, r4
 8000368:	fbb5 f0f2 	udiv	r0, r5, r2
 800036c:	fb02 5510 	mls	r5, r2, r0, r5
 8000370:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000374:	fb0c fc00 	mul.w	ip, ip, r0
 8000378:	45a4      	cmp	ip, r4
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x15c>
 800037c:	19e4      	adds	r4, r4, r7
 800037e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x15a>
 8000384:	45a4      	cmp	ip, r4
 8000386:	f200 80b8 	bhi.w	80004fa <__udivmoddi4+0x2ca>
 800038a:	4618      	mov	r0, r3
 800038c:	eba4 040c 	sub.w	r4, r4, ip
 8000390:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000394:	e79d      	b.n	80002d2 <__udivmoddi4+0xa2>
 8000396:	4631      	mov	r1, r6
 8000398:	4630      	mov	r0, r6
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	f1ce 0420 	rsb	r4, lr, #32
 80003a2:	fa05 f30e 	lsl.w	r3, r5, lr
 80003a6:	fa07 f70e 	lsl.w	r7, r7, lr
 80003aa:	fa20 f804 	lsr.w	r8, r0, r4
 80003ae:	0c3a      	lsrs	r2, r7, #16
 80003b0:	fa25 f404 	lsr.w	r4, r5, r4
 80003b4:	ea48 0803 	orr.w	r8, r8, r3
 80003b8:	fbb4 f1f2 	udiv	r1, r4, r2
 80003bc:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003c0:	fb02 4411 	mls	r4, r2, r1, r4
 80003c4:	fa1f fc87 	uxth.w	ip, r7
 80003c8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003cc:	fb01 f30c 	mul.w	r3, r1, ip
 80003d0:	42ab      	cmp	r3, r5
 80003d2:	fa00 f40e 	lsl.w	r4, r0, lr
 80003d6:	d909      	bls.n	80003ec <__udivmoddi4+0x1bc>
 80003d8:	19ed      	adds	r5, r5, r7
 80003da:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 80003de:	f080 808a 	bcs.w	80004f6 <__udivmoddi4+0x2c6>
 80003e2:	42ab      	cmp	r3, r5
 80003e4:	f240 8087 	bls.w	80004f6 <__udivmoddi4+0x2c6>
 80003e8:	3902      	subs	r1, #2
 80003ea:	443d      	add	r5, r7
 80003ec:	1aeb      	subs	r3, r5, r3
 80003ee:	fa1f f588 	uxth.w	r5, r8
 80003f2:	fbb3 f0f2 	udiv	r0, r3, r2
 80003f6:	fb02 3310 	mls	r3, r2, r0, r3
 80003fa:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003fe:	fb00 f30c 	mul.w	r3, r0, ip
 8000402:	42ab      	cmp	r3, r5
 8000404:	d907      	bls.n	8000416 <__udivmoddi4+0x1e6>
 8000406:	19ed      	adds	r5, r5, r7
 8000408:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800040c:	d26f      	bcs.n	80004ee <__udivmoddi4+0x2be>
 800040e:	42ab      	cmp	r3, r5
 8000410:	d96d      	bls.n	80004ee <__udivmoddi4+0x2be>
 8000412:	3802      	subs	r0, #2
 8000414:	443d      	add	r5, r7
 8000416:	1aeb      	subs	r3, r5, r3
 8000418:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041c:	e78f      	b.n	800033e <__udivmoddi4+0x10e>
 800041e:	f1c1 0720 	rsb	r7, r1, #32
 8000422:	fa22 f807 	lsr.w	r8, r2, r7
 8000426:	408b      	lsls	r3, r1
 8000428:	fa05 f401 	lsl.w	r4, r5, r1
 800042c:	ea48 0303 	orr.w	r3, r8, r3
 8000430:	fa20 fe07 	lsr.w	lr, r0, r7
 8000434:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000438:	40fd      	lsrs	r5, r7
 800043a:	ea4e 0e04 	orr.w	lr, lr, r4
 800043e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000442:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000446:	fb0c 5519 	mls	r5, ip, r9, r5
 800044a:	fa1f f883 	uxth.w	r8, r3
 800044e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000452:	fb09 f408 	mul.w	r4, r9, r8
 8000456:	42ac      	cmp	r4, r5
 8000458:	fa02 f201 	lsl.w	r2, r2, r1
 800045c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000460:	d908      	bls.n	8000474 <__udivmoddi4+0x244>
 8000462:	18ed      	adds	r5, r5, r3
 8000464:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000468:	d243      	bcs.n	80004f2 <__udivmoddi4+0x2c2>
 800046a:	42ac      	cmp	r4, r5
 800046c:	d941      	bls.n	80004f2 <__udivmoddi4+0x2c2>
 800046e:	f1a9 0902 	sub.w	r9, r9, #2
 8000472:	441d      	add	r5, r3
 8000474:	1b2d      	subs	r5, r5, r4
 8000476:	fa1f fe8e 	uxth.w	lr, lr
 800047a:	fbb5 f0fc 	udiv	r0, r5, ip
 800047e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000482:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000486:	fb00 f808 	mul.w	r8, r0, r8
 800048a:	45a0      	cmp	r8, r4
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x26e>
 800048e:	18e4      	adds	r4, r4, r3
 8000490:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000494:	d229      	bcs.n	80004ea <__udivmoddi4+0x2ba>
 8000496:	45a0      	cmp	r8, r4
 8000498:	d927      	bls.n	80004ea <__udivmoddi4+0x2ba>
 800049a:	3802      	subs	r0, #2
 800049c:	441c      	add	r4, r3
 800049e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004a2:	eba4 0408 	sub.w	r4, r4, r8
 80004a6:	fba0 8902 	umull	r8, r9, r0, r2
 80004aa:	454c      	cmp	r4, r9
 80004ac:	46c6      	mov	lr, r8
 80004ae:	464d      	mov	r5, r9
 80004b0:	d315      	bcc.n	80004de <__udivmoddi4+0x2ae>
 80004b2:	d012      	beq.n	80004da <__udivmoddi4+0x2aa>
 80004b4:	b156      	cbz	r6, 80004cc <__udivmoddi4+0x29c>
 80004b6:	ebba 030e 	subs.w	r3, sl, lr
 80004ba:	eb64 0405 	sbc.w	r4, r4, r5
 80004be:	fa04 f707 	lsl.w	r7, r4, r7
 80004c2:	40cb      	lsrs	r3, r1
 80004c4:	431f      	orrs	r7, r3
 80004c6:	40cc      	lsrs	r4, r1
 80004c8:	6037      	str	r7, [r6, #0]
 80004ca:	6074      	str	r4, [r6, #4]
 80004cc:	2100      	movs	r1, #0
 80004ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d2:	4618      	mov	r0, r3
 80004d4:	e6f8      	b.n	80002c8 <__udivmoddi4+0x98>
 80004d6:	4690      	mov	r8, r2
 80004d8:	e6e0      	b.n	800029c <__udivmoddi4+0x6c>
 80004da:	45c2      	cmp	sl, r8
 80004dc:	d2ea      	bcs.n	80004b4 <__udivmoddi4+0x284>
 80004de:	ebb8 0e02 	subs.w	lr, r8, r2
 80004e2:	eb69 0503 	sbc.w	r5, r9, r3
 80004e6:	3801      	subs	r0, #1
 80004e8:	e7e4      	b.n	80004b4 <__udivmoddi4+0x284>
 80004ea:	4628      	mov	r0, r5
 80004ec:	e7d7      	b.n	800049e <__udivmoddi4+0x26e>
 80004ee:	4640      	mov	r0, r8
 80004f0:	e791      	b.n	8000416 <__udivmoddi4+0x1e6>
 80004f2:	4681      	mov	r9, r0
 80004f4:	e7be      	b.n	8000474 <__udivmoddi4+0x244>
 80004f6:	4601      	mov	r1, r0
 80004f8:	e778      	b.n	80003ec <__udivmoddi4+0x1bc>
 80004fa:	3802      	subs	r0, #2
 80004fc:	443c      	add	r4, r7
 80004fe:	e745      	b.n	800038c <__udivmoddi4+0x15c>
 8000500:	4608      	mov	r0, r1
 8000502:	e708      	b.n	8000316 <__udivmoddi4+0xe6>
 8000504:	f1a8 0802 	sub.w	r8, r8, #2
 8000508:	443d      	add	r5, r7
 800050a:	e72b      	b.n	8000364 <__udivmoddi4+0x134>

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000510:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000512:	4b0b      	ldr	r3, [pc, #44]	; (8000540 <HAL_Init+0x30>)
 8000514:	681a      	ldr	r2, [r3, #0]
 8000516:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800051a:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800051c:	681a      	ldr	r2, [r3, #0]
 800051e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000522:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000524:	681a      	ldr	r2, [r3, #0]
 8000526:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800052a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800052c:	2003      	movs	r0, #3
 800052e:	f000 f82f 	bl	8000590 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000532:	2000      	movs	r0, #0
 8000534:	f00c feee 	bl	800d314 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000538:	f00c feca 	bl	800d2d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 800053c:	2000      	movs	r0, #0
 800053e:	bd08      	pop	{r3, pc}
 8000540:	40023c00 	.word	0x40023c00

08000544 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000544:	4a03      	ldr	r2, [pc, #12]	; (8000554 <HAL_IncTick+0x10>)
 8000546:	6811      	ldr	r1, [r2, #0]
 8000548:	4b03      	ldr	r3, [pc, #12]	; (8000558 <HAL_IncTick+0x14>)
 800054a:	781b      	ldrb	r3, [r3, #0]
 800054c:	440b      	add	r3, r1
 800054e:	6013      	str	r3, [r2, #0]
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop
 8000554:	20004228 	.word	0x20004228
 8000558:	20000000 	.word	0x20000000

0800055c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800055c:	4b01      	ldr	r3, [pc, #4]	; (8000564 <HAL_GetTick+0x8>)
 800055e:	6818      	ldr	r0, [r3, #0]
}
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop
 8000564:	20004228 	.word	0x20004228

08000568 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000568:	b538      	push	{r3, r4, r5, lr}
 800056a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800056c:	f7ff fff6 	bl	800055c <HAL_GetTick>
 8000570:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000572:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8000576:	d002      	beq.n	800057e <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8000578:	4b04      	ldr	r3, [pc, #16]	; (800058c <HAL_Delay+0x24>)
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800057e:	f7ff ffed 	bl	800055c <HAL_GetTick>
 8000582:	1b40      	subs	r0, r0, r5
 8000584:	4284      	cmp	r4, r0
 8000586:	d8fa      	bhi.n	800057e <HAL_Delay+0x16>
  {
  }
}
 8000588:	bd38      	pop	{r3, r4, r5, pc}
 800058a:	bf00      	nop
 800058c:	20000000 	.word	0x20000000

08000590 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000590:	4a07      	ldr	r2, [pc, #28]	; (80005b0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000592:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000594:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000598:	041b      	lsls	r3, r3, #16
 800059a:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800059c:	0200      	lsls	r0, r0, #8
 800059e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005a2:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 80005a4:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 80005a8:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80005ac:	60d0      	str	r0, [r2, #12]
 80005ae:	4770      	bx	lr
 80005b0:	e000ed00 	.word	0xe000ed00

080005b4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80005b4:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005b6:	4b16      	ldr	r3, [pc, #88]	; (8000610 <HAL_NVIC_SetPriority+0x5c>)
 80005b8:	68db      	ldr	r3, [r3, #12]
 80005ba:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005be:	f1c3 0407 	rsb	r4, r3, #7
 80005c2:	2c04      	cmp	r4, #4
 80005c4:	bf28      	it	cs
 80005c6:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005c8:	1d1d      	adds	r5, r3, #4
 80005ca:	2d06      	cmp	r5, #6
 80005cc:	d917      	bls.n	80005fe <HAL_NVIC_SetPriority+0x4a>
 80005ce:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005d0:	2501      	movs	r5, #1
 80005d2:	fa05 f404 	lsl.w	r4, r5, r4
 80005d6:	3c01      	subs	r4, #1
 80005d8:	4021      	ands	r1, r4
 80005da:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005dc:	fa05 f303 	lsl.w	r3, r5, r3
 80005e0:	3b01      	subs	r3, #1
 80005e2:	4013      	ands	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005e4:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80005e6:	2800      	cmp	r0, #0
 80005e8:	db0b      	blt.n	8000602 <HAL_NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005ea:	0109      	lsls	r1, r1, #4
 80005ec:	b2c9      	uxtb	r1, r1
 80005ee:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80005f2:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80005f6:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80005fa:	bc30      	pop	{r4, r5}
 80005fc:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005fe:	2300      	movs	r3, #0
 8000600:	e7e6      	b.n	80005d0 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000602:	f000 000f 	and.w	r0, r0, #15
 8000606:	0109      	lsls	r1, r1, #4
 8000608:	b2c9      	uxtb	r1, r1
 800060a:	4b02      	ldr	r3, [pc, #8]	; (8000614 <HAL_NVIC_SetPriority+0x60>)
 800060c:	5419      	strb	r1, [r3, r0]
 800060e:	e7f4      	b.n	80005fa <HAL_NVIC_SetPriority+0x46>
 8000610:	e000ed00 	.word	0xe000ed00
 8000614:	e000ed14 	.word	0xe000ed14

08000618 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000618:	2800      	cmp	r0, #0
 800061a:	db08      	blt.n	800062e <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800061c:	0942      	lsrs	r2, r0, #5
 800061e:	f000 001f 	and.w	r0, r0, #31
 8000622:	2301      	movs	r3, #1
 8000624:	fa03 f000 	lsl.w	r0, r3, r0
 8000628:	4b01      	ldr	r3, [pc, #4]	; (8000630 <HAL_NVIC_EnableIRQ+0x18>)
 800062a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800062e:	4770      	bx	lr
 8000630:	e000e100 	.word	0xe000e100

08000634 <ETH_MACAddressConfig>:

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8000634:	7950      	ldrb	r0, [r2, #5]
 8000636:	7913      	ldrb	r3, [r2, #4]
 8000638:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800063c:	4807      	ldr	r0, [pc, #28]	; (800065c <ETH_MACAddressConfig+0x28>)
 800063e:	500b      	str	r3, [r1, r0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8000640:	78d0      	ldrb	r0, [r2, #3]
 8000642:	7893      	ldrb	r3, [r2, #2]
 8000644:	041b      	lsls	r3, r3, #16
 8000646:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800064a:	7850      	ldrb	r0, [r2, #1]
 800064c:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8000650:	7812      	ldrb	r2, [r2, #0]
 8000652:	4313      	orrs	r3, r2
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8000654:	4a02      	ldr	r2, [pc, #8]	; (8000660 <ETH_MACAddressConfig+0x2c>)
 8000656:	508b      	str	r3, [r1, r2]
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop
 800065c:	40028040 	.word	0x40028040
 8000660:	40028044 	.word	0x40028044

08000664 <ETH_DMATransmissionEnable>:
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8000664:	6801      	ldr	r1, [r0, #0]
 8000666:	f241 0218 	movw	r2, #4120	; 0x1018
 800066a:	588b      	ldr	r3, [r1, r2]
 800066c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000670:	508b      	str	r3, [r1, r2]
 8000672:	4770      	bx	lr

08000674 <ETH_DMAReceptionEnable>:
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8000674:	6801      	ldr	r1, [r0, #0]
 8000676:	f241 0218 	movw	r2, #4120	; 0x1018
 800067a:	588b      	ldr	r3, [r1, r2]
 800067c:	f043 0302 	orr.w	r3, r3, #2
 8000680:	508b      	str	r3, [r1, r2]
 8000682:	4770      	bx	lr

08000684 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8000684:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000686:	4b08      	ldr	r3, [pc, #32]	; (80006a8 <ETH_Delay+0x24>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	4a08      	ldr	r2, [pc, #32]	; (80006ac <ETH_Delay+0x28>)
 800068c:	fba2 2303 	umull	r2, r3, r2, r3
 8000690:	0a5b      	lsrs	r3, r3, #9
 8000692:	fb00 f003 	mul.w	r0, r0, r3
 8000696:	9001      	str	r0, [sp, #4]
  do 
  {
    __NOP();
 8000698:	bf00      	nop
  } 
  while (Delay --);
 800069a:	9b01      	ldr	r3, [sp, #4]
 800069c:	1e5a      	subs	r2, r3, #1
 800069e:	9201      	str	r2, [sp, #4]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d1f9      	bne.n	8000698 <ETH_Delay+0x14>
}
 80006a4:	b002      	add	sp, #8
 80006a6:	4770      	bx	lr
 80006a8:	20000014 	.word	0x20000014
 80006ac:	10624dd3 	.word	0x10624dd3

080006b0 <ETH_MACTransmissionEnable>:
{ 
 80006b0:	b510      	push	{r4, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	4604      	mov	r4, r0
  __IO uint32_t tmpreg1 = 0U;
 80006b6:	2300      	movs	r3, #0
 80006b8:	9301      	str	r3, [sp, #4]
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80006ba:	6802      	ldr	r2, [r0, #0]
 80006bc:	6813      	ldr	r3, [r2, #0]
 80006be:	f043 0308 	orr.w	r3, r3, #8
 80006c2:	6013      	str	r3, [r2, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 80006c4:	6803      	ldr	r3, [r0, #0]
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	9301      	str	r3, [sp, #4]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80006ca:	2001      	movs	r0, #1
 80006cc:	f7ff ffda 	bl	8000684 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80006d0:	6823      	ldr	r3, [r4, #0]
 80006d2:	9a01      	ldr	r2, [sp, #4]
 80006d4:	601a      	str	r2, [r3, #0]
}
 80006d6:	b002      	add	sp, #8
 80006d8:	bd10      	pop	{r4, pc}

080006da <ETH_MACReceptionEnable>:
{ 
 80006da:	b510      	push	{r4, lr}
 80006dc:	b082      	sub	sp, #8
 80006de:	4604      	mov	r4, r0
  __IO uint32_t tmpreg1 = 0U;
 80006e0:	2300      	movs	r3, #0
 80006e2:	9301      	str	r3, [sp, #4]
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 80006e4:	6802      	ldr	r2, [r0, #0]
 80006e6:	6813      	ldr	r3, [r2, #0]
 80006e8:	f043 0304 	orr.w	r3, r3, #4
 80006ec:	6013      	str	r3, [r2, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 80006ee:	6803      	ldr	r3, [r0, #0]
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	9301      	str	r3, [sp, #4]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80006f4:	2001      	movs	r0, #1
 80006f6:	f7ff ffc5 	bl	8000684 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80006fa:	6823      	ldr	r3, [r4, #0]
 80006fc:	9a01      	ldr	r2, [sp, #4]
 80006fe:	601a      	str	r2, [r3, #0]
}
 8000700:	b002      	add	sp, #8
 8000702:	bd10      	pop	{r4, pc}

08000704 <ETH_FlushTransmitFIFO>:
{
 8000704:	b530      	push	{r4, r5, lr}
 8000706:	b083      	sub	sp, #12
 8000708:	4605      	mov	r5, r0
  __IO uint32_t tmpreg1 = 0U;
 800070a:	2300      	movs	r3, #0
 800070c:	9301      	str	r3, [sp, #4]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800070e:	6802      	ldr	r2, [r0, #0]
 8000710:	f241 0418 	movw	r4, #4120	; 0x1018
 8000714:	5913      	ldr	r3, [r2, r4]
 8000716:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800071a:	5113      	str	r3, [r2, r4]
  tmpreg1 = (heth->Instance)->DMAOMR;
 800071c:	6803      	ldr	r3, [r0, #0]
 800071e:	591b      	ldr	r3, [r3, r4]
 8000720:	9301      	str	r3, [sp, #4]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8000722:	2001      	movs	r0, #1
 8000724:	f7ff ffae 	bl	8000684 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8000728:	682b      	ldr	r3, [r5, #0]
 800072a:	9a01      	ldr	r2, [sp, #4]
 800072c:	511a      	str	r2, [r3, r4]
}
 800072e:	b003      	add	sp, #12
 8000730:	bd30      	pop	{r4, r5, pc}
	...

08000734 <ETH_MACDMAConfig>:
{
 8000734:	b570      	push	{r4, r5, r6, lr}
 8000736:	b09e      	sub	sp, #120	; 0x78
 8000738:	4604      	mov	r4, r0
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 800073a:	b129      	cbz	r1, 8000748 <ETH_MACDMAConfig+0x14>
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 800073c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000740:	60c3      	str	r3, [r0, #12]
    (heth->Init).Speed = ETH_SPEED_100M;
 8000742:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000746:	6083      	str	r3, [r0, #8]
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8000748:	69e3      	ldr	r3, [r4, #28]
 800074a:	2b00      	cmp	r3, #0
 800074c:	d16a      	bne.n	8000824 <ETH_MACDMAConfig+0xf0>
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 800074e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000752:	9307      	str	r3, [sp, #28]
  tmpreg1 = (heth->Instance)->MACCR;
 8000754:	6821      	ldr	r1, [r4, #0]
 8000756:	680b      	ldr	r3, [r1, #0]
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8000758:	4a39      	ldr	r2, [pc, #228]	; (8000840 <ETH_MACDMAConfig+0x10c>)
 800075a:	401a      	ands	r2, r3
                       (heth->Init).Speed | 
 800075c:	68a3      	ldr	r3, [r4, #8]
                       (heth->Init).DuplexMode | 
 800075e:	68e0      	ldr	r0, [r4, #12]
                       macinit.LoopbackMode |
 8000760:	4303      	orrs	r3, r0
                       macinit.ChecksumOffload |    
 8000762:	9807      	ldr	r0, [sp, #28]
                       (heth->Init).DuplexMode | 
 8000764:	4303      	orrs	r3, r0
                       macinit.ChecksumOffload |    
 8000766:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 800076a:	4313      	orrs	r3, r2
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800076c:	600b      	str	r3, [r1, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 800076e:	6823      	ldr	r3, [r4, #0]
 8000770:	681d      	ldr	r5, [r3, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8000772:	2001      	movs	r0, #1
 8000774:	f7ff fef8 	bl	8000568 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8000778:	6823      	ldr	r3, [r4, #0]
 800077a:	601d      	str	r5, [r3, #0]
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800077c:	6823      	ldr	r3, [r4, #0]
 800077e:	2240      	movs	r2, #64	; 0x40
 8000780:	605a      	str	r2, [r3, #4]
   tmpreg1 = (heth->Instance)->MACFFR;
 8000782:	6823      	ldr	r3, [r4, #0]
 8000784:	685d      	ldr	r5, [r3, #4]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8000786:	2001      	movs	r0, #1
 8000788:	f7ff feee 	bl	8000568 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 800078c:	6823      	ldr	r3, [r4, #0]
 800078e:	605d      	str	r5, [r3, #4]
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8000790:	6823      	ldr	r3, [r4, #0]
 8000792:	2500      	movs	r5, #0
 8000794:	609d      	str	r5, [r3, #8]
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8000796:	6823      	ldr	r3, [r4, #0]
 8000798:	60dd      	str	r5, [r3, #12]
   tmpreg1 = (heth->Instance)->MACFCR;
 800079a:	6822      	ldr	r2, [r4, #0]
 800079c:	6993      	ldr	r3, [r2, #24]
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800079e:	f023 03be 	bic.w	r3, r3, #190	; 0xbe
 80007a2:	041b      	lsls	r3, r3, #16
 80007a4:	0c1b      	lsrs	r3, r3, #16
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80007a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80007aa:	6193      	str	r3, [r2, #24]
   tmpreg1 = (heth->Instance)->MACFCR;
 80007ac:	6823      	ldr	r3, [r4, #0]
 80007ae:	699e      	ldr	r6, [r3, #24]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80007b0:	2001      	movs	r0, #1
 80007b2:	f7ff fed9 	bl	8000568 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 80007b6:	6823      	ldr	r3, [r4, #0]
 80007b8:	619e      	str	r6, [r3, #24]
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80007ba:	6823      	ldr	r3, [r4, #0]
 80007bc:	61dd      	str	r5, [r3, #28]
    tmpreg1 = (heth->Instance)->MACVLANTR;
 80007be:	6823      	ldr	r3, [r4, #0]
 80007c0:	69dd      	ldr	r5, [r3, #28]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80007c2:	2001      	movs	r0, #1
 80007c4:	f7ff fed0 	bl	8000568 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 80007c8:	6823      	ldr	r3, [r4, #0]
 80007ca:	61dd      	str	r5, [r3, #28]
    tmpreg1 = (heth->Instance)->DMAOMR;
 80007cc:	6822      	ldr	r2, [r4, #0]
 80007ce:	f241 0518 	movw	r5, #4120	; 0x1018
 80007d2:	5951      	ldr	r1, [r2, r5]
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80007d4:	4b1b      	ldr	r3, [pc, #108]	; (8000844 <ETH_MACDMAConfig+0x110>)
 80007d6:	400b      	ands	r3, r1
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80007d8:	f043 7308 	orr.w	r3, r3, #35651584	; 0x2200000
 80007dc:	f043 0304 	orr.w	r3, r3, #4
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80007e0:	5153      	str	r3, [r2, r5]
    tmpreg1 = (heth->Instance)->DMAOMR;
 80007e2:	6823      	ldr	r3, [r4, #0]
 80007e4:	595e      	ldr	r6, [r3, r5]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80007e6:	2001      	movs	r0, #1
 80007e8:	f7ff febe 	bl	8000568 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 80007ec:	6823      	ldr	r3, [r4, #0]
 80007ee:	515e      	str	r6, [r3, r5]
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80007f0:	6823      	ldr	r3, [r4, #0]
 80007f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007f6:	4a14      	ldr	r2, [pc, #80]	; (8000848 <ETH_MACDMAConfig+0x114>)
 80007f8:	601a      	str	r2, [r3, #0]
     tmpreg1 = (heth->Instance)->DMABMR;
 80007fa:	6823      	ldr	r3, [r4, #0]
 80007fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000800:	681d      	ldr	r5, [r3, #0]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8000802:	2001      	movs	r0, #1
 8000804:	f7ff feb0 	bl	8000568 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8000808:	6823      	ldr	r3, [r4, #0]
 800080a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800080e:	601d      	str	r5, [r3, #0]
     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8000810:	69a3      	ldr	r3, [r4, #24]
 8000812:	2b01      	cmp	r3, #1
 8000814:	d009      	beq.n	800082a <ETH_MACDMAConfig+0xf6>
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8000816:	6962      	ldr	r2, [r4, #20]
 8000818:	2100      	movs	r1, #0
 800081a:	4620      	mov	r0, r4
 800081c:	f7ff ff0a 	bl	8000634 <ETH_MACAddressConfig>
}
 8000820:	b01e      	add	sp, #120	; 0x78
 8000822:	bd70      	pop	{r4, r5, r6, pc}
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8000824:	2300      	movs	r3, #0
 8000826:	9307      	str	r3, [sp, #28]
 8000828:	e794      	b.n	8000754 <ETH_MACDMAConfig+0x20>
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 800082a:	6821      	ldr	r1, [r4, #0]
 800082c:	f241 021c 	movw	r2, #4124	; 0x101c
 8000830:	588b      	ldr	r3, [r1, r2]
 8000832:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000836:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800083a:	508b      	str	r3, [r1, r2]
 800083c:	e7eb      	b.n	8000816 <ETH_MACDMAConfig+0xe2>
 800083e:	bf00      	nop
 8000840:	ff20810f 	.word	0xff20810f
 8000844:	f8de3f23 	.word	0xf8de3f23
 8000848:	02c12080 	.word	0x02c12080

0800084c <HAL_ETH_DMATxDescListInit>:
{
 800084c:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(heth);
 800084e:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 8000852:	2c01      	cmp	r4, #1
 8000854:	d031      	beq.n	80008ba <HAL_ETH_DMATxDescListInit+0x6e>
 8000856:	2401      	movs	r4, #1
 8000858:	f880 4045 	strb.w	r4, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 800085c:	2402      	movs	r4, #2
 800085e:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
  heth->TxDesc = DMATxDescTab;
 8000862:	62c1      	str	r1, [r0, #44]	; 0x2c
  for(i=0U; i < TxBuffCount; i++)
 8000864:	2400      	movs	r4, #0
 8000866:	e001      	b.n	800086c <HAL_ETH_DMATxDescListInit+0x20>
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8000868:	60f9      	str	r1, [r7, #12]
  for(i=0U; i < TxBuffCount; i++)
 800086a:	3401      	adds	r4, #1
 800086c:	429c      	cmp	r4, r3
 800086e:	d217      	bcs.n	80008a0 <HAL_ETH_DMATxDescListInit+0x54>
    dmatxdesc = DMATxDescTab + i;
 8000870:	0165      	lsls	r5, r4, #5
 8000872:	194f      	adds	r7, r1, r5
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8000874:	f44f 1680 	mov.w	r6, #1048576	; 0x100000
 8000878:	514e      	str	r6, [r1, r5]
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 800087a:	f240 56f4 	movw	r6, #1524	; 0x5f4
 800087e:	fb06 2604 	mla	r6, r6, r4, r2
 8000882:	60be      	str	r6, [r7, #8]
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8000884:	69c6      	ldr	r6, [r0, #28]
 8000886:	b91e      	cbnz	r6, 8000890 <HAL_ETH_DMATxDescListInit+0x44>
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8000888:	594e      	ldr	r6, [r1, r5]
 800088a:	f446 0640 	orr.w	r6, r6, #12582912	; 0xc00000
 800088e:	514e      	str	r6, [r1, r5]
    if(i < (TxBuffCount-1U))
 8000890:	1e5d      	subs	r5, r3, #1
 8000892:	42ac      	cmp	r4, r5
 8000894:	d2e8      	bcs.n	8000868 <HAL_ETH_DMATxDescListInit+0x1c>
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8000896:	1c65      	adds	r5, r4, #1
 8000898:	eb01 1545 	add.w	r5, r1, r5, lsl #5
 800089c:	60fd      	str	r5, [r7, #12]
 800089e:	e7e4      	b.n	800086a <HAL_ETH_DMATxDescListInit+0x1e>
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 80008a0:	6802      	ldr	r2, [r0, #0]
 80008a2:	f241 0310 	movw	r3, #4112	; 0x1010
 80008a6:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 80008a8:	2301      	movs	r3, #1
 80008aa:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 80008ae:	2300      	movs	r3, #0
 80008b0:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 80008b4:	4618      	mov	r0, r3
}
 80008b6:	bcf0      	pop	{r4, r5, r6, r7}
 80008b8:	4770      	bx	lr
  __HAL_LOCK(heth);
 80008ba:	2002      	movs	r0, #2
 80008bc:	e7fb      	b.n	80008b6 <HAL_ETH_DMATxDescListInit+0x6a>

080008be <HAL_ETH_DMARxDescListInit>:
{
 80008be:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(heth);
 80008c0:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 80008c4:	2c01      	cmp	r4, #1
 80008c6:	d02e      	beq.n	8000926 <HAL_ETH_DMARxDescListInit+0x68>
 80008c8:	2401      	movs	r4, #1
 80008ca:	f880 4045 	strb.w	r4, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 80008ce:	2402      	movs	r4, #2
 80008d0:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
  heth->RxDesc = DMARxDescTab; 
 80008d4:	6281      	str	r1, [r0, #40]	; 0x28
  for(i=0U; i < RxBuffCount; i++)
 80008d6:	2400      	movs	r4, #0
 80008d8:	e001      	b.n	80008de <HAL_ETH_DMARxDescListInit+0x20>
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 80008da:	60e9      	str	r1, [r5, #12]
  for(i=0U; i < RxBuffCount; i++)
 80008dc:	3401      	adds	r4, #1
 80008de:	429c      	cmp	r4, r3
 80008e0:	d214      	bcs.n	800090c <HAL_ETH_DMARxDescListInit+0x4e>
    DMARxDesc = DMARxDescTab+i;
 80008e2:	0166      	lsls	r6, r4, #5
 80008e4:	198d      	adds	r5, r1, r6
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80008e6:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 80008ea:	518f      	str	r7, [r1, r6]
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 80008ec:	f244 56f4 	movw	r6, #17908	; 0x45f4
 80008f0:	606e      	str	r6, [r5, #4]
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80008f2:	f240 56f4 	movw	r6, #1524	; 0x5f4
 80008f6:	fb06 2604 	mla	r6, r6, r4, r2
 80008fa:	60ae      	str	r6, [r5, #8]
    if(i < (RxBuffCount-1U))
 80008fc:	1e5e      	subs	r6, r3, #1
 80008fe:	42b4      	cmp	r4, r6
 8000900:	d2eb      	bcs.n	80008da <HAL_ETH_DMARxDescListInit+0x1c>
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 8000902:	1c66      	adds	r6, r4, #1
 8000904:	eb01 1646 	add.w	r6, r1, r6, lsl #5
 8000908:	60ee      	str	r6, [r5, #12]
 800090a:	e7e7      	b.n	80008dc <HAL_ETH_DMARxDescListInit+0x1e>
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 800090c:	6802      	ldr	r2, [r0, #0]
 800090e:	f241 030c 	movw	r3, #4108	; 0x100c
 8000912:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 8000914:	2301      	movs	r3, #1
 8000916:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 800091a:	2300      	movs	r3, #0
 800091c:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 8000920:	4618      	mov	r0, r3
}
 8000922:	bcf0      	pop	{r4, r5, r6, r7}
 8000924:	4770      	bx	lr
  __HAL_LOCK(heth);
 8000926:	2002      	movs	r0, #2
 8000928:	e7fb      	b.n	8000922 <HAL_ETH_DMARxDescListInit+0x64>
	...

0800092c <HAL_ETH_TransmitFrame>:
  __HAL_LOCK(heth);
 800092c:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8000930:	2b01      	cmp	r3, #1
 8000932:	f000 8087 	beq.w	8000a44 <HAL_ETH_TransmitFrame+0x118>
 8000936:	2301      	movs	r3, #1
 8000938:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 800093c:	2302      	movs	r3, #2
 800093e:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  if (FrameLength == 0U) 
 8000942:	b199      	cbz	r1, 800096c <HAL_ETH_TransmitFrame+0x40>
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8000944:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000946:	681a      	ldr	r2, [r3, #0]
 8000948:	2a00      	cmp	r2, #0
 800094a:	db17      	blt.n	800097c <HAL_ETH_TransmitFrame+0x50>
{
 800094c:	b430      	push	{r4, r5}
  if (FrameLength > ETH_TX_BUF_SIZE)
 800094e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000952:	4291      	cmp	r1, r2
 8000954:	d91a      	bls.n	800098c <HAL_ETH_TransmitFrame+0x60>
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8000956:	4c3c      	ldr	r4, [pc, #240]	; (8000a48 <HAL_ETH_TransmitFrame+0x11c>)
 8000958:	fba4 2401 	umull	r2, r4, r4, r1
 800095c:	0aa4      	lsrs	r4, r4, #10
    if (FrameLength % ETH_TX_BUF_SIZE) 
 800095e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000962:	fb02 1214 	mls	r2, r2, r4, r1
 8000966:	b192      	cbz	r2, 800098e <HAL_ETH_TransmitFrame+0x62>
      bufcount++;
 8000968:	3401      	adds	r4, #1
 800096a:	e010      	b.n	800098e <HAL_ETH_TransmitFrame+0x62>
    heth->State = HAL_ETH_STATE_READY;
 800096c:	2301      	movs	r3, #1
 800096e:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8000972:	2200      	movs	r2, #0
 8000974:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
    return  HAL_ERROR;                                    
 8000978:	4618      	mov	r0, r3
 800097a:	4770      	bx	lr
    heth->State = HAL_ETH_STATE_BUSY_TX;
 800097c:	2312      	movs	r3, #18
 800097e:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8000982:	2300      	movs	r3, #0
 8000984:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
    return HAL_ERROR;
 8000988:	2001      	movs	r0, #1
 800098a:	4770      	bx	lr
    bufcount = 1U;
 800098c:	2401      	movs	r4, #1
  if (bufcount == 1U)
 800098e:	2c01      	cmp	r4, #1
 8000990:	d001      	beq.n	8000996 <HAL_ETH_TransmitFrame+0x6a>
 8000992:	2300      	movs	r3, #0
 8000994:	e037      	b.n	8000a06 <HAL_ETH_TransmitFrame+0xda>
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8000996:	681a      	ldr	r2, [r3, #0]
 8000998:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 800099c:	601a      	str	r2, [r3, #0]
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 800099e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80009a0:	f3c1 010c 	ubfx	r1, r1, #0, #13
 80009a4:	6059      	str	r1, [r3, #4]
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80009a6:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 80009a8:	6813      	ldr	r3, [r2, #0]
 80009aa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009ae:	6013      	str	r3, [r2, #0]
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80009b0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80009b2:	68db      	ldr	r3, [r3, #12]
 80009b4:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80009b6:	6803      	ldr	r3, [r0, #0]
 80009b8:	f241 0214 	movw	r2, #4116	; 0x1014
 80009bc:	589a      	ldr	r2, [r3, r2]
 80009be:	f012 0f04 	tst.w	r2, #4
 80009c2:	d008      	beq.n	80009d6 <HAL_ETH_TransmitFrame+0xaa>
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80009c4:	2104      	movs	r1, #4
 80009c6:	f241 0214 	movw	r2, #4116	; 0x1014
 80009ca:	5099      	str	r1, [r3, r2]
    (heth->Instance)->DMATPDR = 0U;
 80009cc:	6802      	ldr	r2, [r0, #0]
 80009ce:	2100      	movs	r1, #0
 80009d0:	f241 0304 	movw	r3, #4100	; 0x1004
 80009d4:	50d1      	str	r1, [r2, r3]
  heth->State = HAL_ETH_STATE_READY;
 80009d6:	2301      	movs	r3, #1
 80009d8:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 80009dc:	2300      	movs	r3, #0
 80009de:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 80009e2:	4618      	mov	r0, r3
}
 80009e4:	bc30      	pop	{r4, r5}
 80009e6:	4770      	bx	lr
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 80009e8:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 80009ea:	682a      	ldr	r2, [r5, #0]
 80009ec:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80009f0:	602a      	str	r2, [r5, #0]
 80009f2:	e011      	b.n	8000a18 <HAL_ETH_TransmitFrame+0xec>
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80009f4:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 80009f6:	682a      	ldr	r2, [r5, #0]
 80009f8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80009fc:	602a      	str	r2, [r5, #0]
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80009fe:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8000a00:	68d2      	ldr	r2, [r2, #12]
 8000a02:	62c2      	str	r2, [r0, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8000a04:	3301      	adds	r3, #1
 8000a06:	429c      	cmp	r4, r3
 8000a08:	d9d5      	bls.n	80009b6 <HAL_ETH_TransmitFrame+0x8a>
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8000a0a:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 8000a0c:	682a      	ldr	r2, [r5, #0]
 8000a0e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000a12:	602a      	str	r2, [r5, #0]
      if (i == 0U) 
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d0e7      	beq.n	80009e8 <HAL_ETH_TransmitFrame+0xbc>
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8000a18:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8000a1a:	f240 55f4 	movw	r5, #1524	; 0x5f4
 8000a1e:	6055      	str	r5, [r2, #4]
      if (i == (bufcount-1U))
 8000a20:	1e62      	subs	r2, r4, #1
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d1e6      	bne.n	80009f4 <HAL_ETH_TransmitFrame+0xc8>
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8000a26:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 8000a28:	682a      	ldr	r2, [r5, #0]
 8000a2a:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8000a2e:	602a      	str	r2, [r5, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 8000a30:	4a06      	ldr	r2, [pc, #24]	; (8000a4c <HAL_ETH_TransmitFrame+0x120>)
 8000a32:	fb02 1204 	mla	r2, r2, r4, r1
 8000a36:	f202 52f4 	addw	r2, r2, #1524	; 0x5f4
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8000a3a:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 8000a3c:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8000a40:	606a      	str	r2, [r5, #4]
 8000a42:	e7d7      	b.n	80009f4 <HAL_ETH_TransmitFrame+0xc8>
  __HAL_LOCK(heth);
 8000a44:	2002      	movs	r0, #2
 8000a46:	4770      	bx	lr
 8000a48:	ac02b00b 	.word	0xac02b00b
 8000a4c:	fffffa0c 	.word	0xfffffa0c

08000a50 <HAL_ETH_GetReceivedFrame_IT>:
  __HAL_LOCK(heth);
 8000a50:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8000a54:	2b01      	cmp	r3, #1
 8000a56:	d045      	beq.n	8000ae4 <HAL_ETH_GetReceivedFrame_IT+0x94>
 8000a58:	2301      	movs	r3, #1
 8000a5a:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 8000a5e:	2302      	movs	r3, #2
 8000a60:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  uint32_t descriptorscancounter = 0U;
 8000a64:	2100      	movs	r1, #0
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8000a66:	e00a      	b.n	8000a7e <HAL_ETH_GetReceivedFrame_IT+0x2e>
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8000a68:	6303      	str	r3, [r0, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;   
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	6382      	str	r2, [r0, #56]	; 0x38
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8000a6e:	68db      	ldr	r3, [r3, #12]
 8000a70:	6283      	str	r3, [r0, #40]	; 0x28
 8000a72:	e004      	b.n	8000a7e <HAL_ETH_GetReceivedFrame_IT+0x2e>
      (heth->RxFrameInfos.SegCount)++;
 8000a74:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8000a76:	3201      	adds	r2, #1
 8000a78:	6382      	str	r2, [r0, #56]	; 0x38
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8000a7a:	68db      	ldr	r3, [r3, #12]
 8000a7c:	6283      	str	r3, [r0, #40]	; 0x28
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8000a7e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000a80:	681a      	ldr	r2, [r3, #0]
 8000a82:	2a00      	cmp	r2, #0
 8000a84:	db26      	blt.n	8000ad4 <HAL_ETH_GetReceivedFrame_IT+0x84>
 8000a86:	2903      	cmp	r1, #3
 8000a88:	d824      	bhi.n	8000ad4 <HAL_ETH_GetReceivedFrame_IT+0x84>
    descriptorscancounter++;
 8000a8a:	3101      	adds	r1, #1
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8000a8c:	681a      	ldr	r2, [r3, #0]
 8000a8e:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8000a92:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8000a96:	d0e7      	beq.n	8000a68 <HAL_ETH_GetReceivedFrame_IT+0x18>
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8000a98:	681a      	ldr	r2, [r3, #0]
 8000a9a:	f412 7f40 	tst.w	r2, #768	; 0x300
 8000a9e:	d0e9      	beq.n	8000a74 <HAL_ETH_GetReceivedFrame_IT+0x24>
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8000aa0:	6343      	str	r3, [r0, #52]	; 0x34
      (heth->RxFrameInfos.SegCount)++;
 8000aa2:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8000aa4:	3201      	adds	r2, #1
 8000aa6:	6382      	str	r2, [r0, #56]	; 0x38
      if ((heth->RxFrameInfos.SegCount) == 1U)
 8000aa8:	2a01      	cmp	r2, #1
 8000aaa:	d011      	beq.n	8000ad0 <HAL_ETH_GetReceivedFrame_IT+0x80>
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8000aac:	681a      	ldr	r2, [r3, #0]
 8000aae:	f3c2 420d 	ubfx	r2, r2, #16, #14
 8000ab2:	3a04      	subs	r2, #4
 8000ab4:	63c2      	str	r2, [r0, #60]	; 0x3c
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8000ab6:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8000ab8:	6892      	ldr	r2, [r2, #8]
 8000aba:	6402      	str	r2, [r0, #64]	; 0x40
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8000abc:	68db      	ldr	r3, [r3, #12]
 8000abe:	6283      	str	r3, [r0, #40]	; 0x28
      heth->State = HAL_ETH_STATE_READY;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
      return HAL_OK;
 8000acc:	4618      	mov	r0, r3
 8000ace:	4770      	bx	lr
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8000ad0:	6303      	str	r3, [r0, #48]	; 0x30
 8000ad2:	e7eb      	b.n	8000aac <HAL_ETH_GetReceivedFrame_IT+0x5c>
  heth->State = HAL_ETH_STATE_READY;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8000ada:	2200      	movs	r2, #0
 8000adc:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
  return HAL_ERROR;
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	4770      	bx	lr
  __HAL_LOCK(heth);
 8000ae4:	2002      	movs	r0, #2
}
 8000ae6:	4770      	bx	lr

08000ae8 <HAL_ETH_TxCpltCallback>:
{
 8000ae8:	4770      	bx	lr

08000aea <HAL_ETH_ErrorCallback>:
{
 8000aea:	4770      	bx	lr

08000aec <HAL_ETH_IRQHandler>:
{
 8000aec:	b510      	push	{r4, lr}
 8000aee:	4604      	mov	r4, r0
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8000af0:	6803      	ldr	r3, [r0, #0]
 8000af2:	f241 0214 	movw	r2, #4116	; 0x1014
 8000af6:	589a      	ldr	r2, [r3, r2]
 8000af8:	f012 0f40 	tst.w	r2, #64	; 0x40
 8000afc:	d111      	bne.n	8000b22 <HAL_ETH_IRQHandler+0x36>
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8000afe:	f241 0214 	movw	r2, #4116	; 0x1014
 8000b02:	589b      	ldr	r3, [r3, r2]
 8000b04:	f013 0f01 	tst.w	r3, #1
 8000b08:	d119      	bne.n	8000b3e <HAL_ETH_IRQHandler+0x52>
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8000b0a:	6822      	ldr	r2, [r4, #0]
 8000b0c:	f241 0314 	movw	r3, #4116	; 0x1014
 8000b10:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8000b14:	50d1      	str	r1, [r2, r3]
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8000b16:	6822      	ldr	r2, [r4, #0]
 8000b18:	58d3      	ldr	r3, [r2, r3]
 8000b1a:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8000b1e:	d11b      	bne.n	8000b58 <HAL_ETH_IRQHandler+0x6c>
 8000b20:	bd10      	pop	{r4, pc}
    HAL_ETH_RxCpltCallback(heth);
 8000b22:	f00c f915 	bl	800cd50 <HAL_ETH_RxCpltCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8000b26:	6822      	ldr	r2, [r4, #0]
 8000b28:	2140      	movs	r1, #64	; 0x40
 8000b2a:	f241 0314 	movw	r3, #4116	; 0x1014
 8000b2e:	50d1      	str	r1, [r2, r3]
    heth->State = HAL_ETH_STATE_READY;
 8000b30:	2301      	movs	r3, #1
 8000b32:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8000b36:	2300      	movs	r3, #0
 8000b38:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8000b3c:	e7e5      	b.n	8000b0a <HAL_ETH_IRQHandler+0x1e>
    HAL_ETH_TxCpltCallback(heth);
 8000b3e:	f7ff ffd3 	bl	8000ae8 <HAL_ETH_TxCpltCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8000b42:	6821      	ldr	r1, [r4, #0]
 8000b44:	2301      	movs	r3, #1
 8000b46:	f241 0214 	movw	r2, #4116	; 0x1014
 8000b4a:	508b      	str	r3, [r1, r2]
    heth->State = HAL_ETH_STATE_READY;
 8000b4c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8000b50:	2300      	movs	r3, #0
 8000b52:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8000b56:	e7d8      	b.n	8000b0a <HAL_ETH_IRQHandler+0x1e>
    HAL_ETH_ErrorCallback(heth);
 8000b58:	4620      	mov	r0, r4
 8000b5a:	f7ff ffc6 	bl	8000aea <HAL_ETH_ErrorCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8000b5e:	6822      	ldr	r2, [r4, #0]
 8000b60:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b64:	f241 0314 	movw	r3, #4116	; 0x1014
 8000b68:	50d1      	str	r1, [r2, r3]
    heth->State = HAL_ETH_STATE_READY;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8000b70:	2300      	movs	r3, #0
 8000b72:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 8000b76:	e7d3      	b.n	8000b20 <HAL_ETH_IRQHandler+0x34>

08000b78 <HAL_ETH_ReadPHYRegister>:
{
 8000b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8000b7a:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8000b7e:	b2db      	uxtb	r3, r3
 8000b80:	2b82      	cmp	r3, #130	; 0x82
 8000b82:	d101      	bne.n	8000b88 <HAL_ETH_ReadPHYRegister+0x10>
    return HAL_BUSY;
 8000b84:	2002      	movs	r0, #2
}
 8000b86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000b88:	4616      	mov	r6, r2
 8000b8a:	4605      	mov	r5, r0
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8000b8c:	2382      	movs	r3, #130	; 0x82
 8000b8e:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg1 = heth->Instance->MACMIIAR;
 8000b92:	6802      	ldr	r2, [r0, #0]
 8000b94:	6914      	ldr	r4, [r2, #16]
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8000b96:	f004 041c 	and.w	r4, r4, #28
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8000b9a:	8a03      	ldrh	r3, [r0, #16]
 8000b9c:	02db      	lsls	r3, r3, #11
 8000b9e:	b29b      	uxth	r3, r3
 8000ba0:	431c      	orrs	r4, r3
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8000ba2:	0189      	lsls	r1, r1, #6
 8000ba4:	f401 61f8 	and.w	r1, r1, #1984	; 0x7c0
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8000ba8:	430c      	orrs	r4, r1
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8000baa:	f044 0401 	orr.w	r4, r4, #1
  heth->Instance->MACMIIAR = tmpreg1;
 8000bae:	6114      	str	r4, [r2, #16]
  tickstart = HAL_GetTick();
 8000bb0:	f7ff fcd4 	bl	800055c <HAL_GetTick>
 8000bb4:	4607      	mov	r7, r0
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8000bb6:	f014 0f01 	tst.w	r4, #1
 8000bba:	d010      	beq.n	8000bde <HAL_ETH_ReadPHYRegister+0x66>
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8000bbc:	f7ff fcce 	bl	800055c <HAL_GetTick>
 8000bc0:	1bc0      	subs	r0, r0, r7
 8000bc2:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8000bc6:	d202      	bcs.n	8000bce <HAL_ETH_ReadPHYRegister+0x56>
    tmpreg1 = heth->Instance->MACMIIAR;
 8000bc8:	682b      	ldr	r3, [r5, #0]
 8000bca:	691c      	ldr	r4, [r3, #16]
 8000bcc:	e7f3      	b.n	8000bb6 <HAL_ETH_ReadPHYRegister+0x3e>
      heth->State= HAL_ETH_STATE_READY;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
      return HAL_TIMEOUT;
 8000bda:	2003      	movs	r0, #3
 8000bdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8000bde:	682b      	ldr	r3, [r5, #0]
 8000be0:	695b      	ldr	r3, [r3, #20]
 8000be2:	b29b      	uxth	r3, r3
 8000be4:	6033      	str	r3, [r6, #0]
  heth->State = HAL_ETH_STATE_READY;
 8000be6:	2301      	movs	r3, #1
 8000be8:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
  return HAL_OK;
 8000bec:	2000      	movs	r0, #0
 8000bee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000bf0 <HAL_ETH_WritePHYRegister>:
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8000bf0:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8000bf4:	b2db      	uxtb	r3, r3
 8000bf6:	2b42      	cmp	r3, #66	; 0x42
 8000bf8:	d101      	bne.n	8000bfe <HAL_ETH_WritePHYRegister+0xe>
    return HAL_BUSY;
 8000bfa:	2002      	movs	r0, #2
 8000bfc:	4770      	bx	lr
{
 8000bfe:	b570      	push	{r4, r5, r6, lr}
 8000c00:	4605      	mov	r5, r0
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8000c02:	2342      	movs	r3, #66	; 0x42
 8000c04:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg1 = heth->Instance->MACMIIAR;
 8000c08:	6800      	ldr	r0, [r0, #0]
 8000c0a:	6904      	ldr	r4, [r0, #16]
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8000c0c:	f004 041c 	and.w	r4, r4, #28
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8000c10:	8a2b      	ldrh	r3, [r5, #16]
 8000c12:	02db      	lsls	r3, r3, #11
 8000c14:	b29b      	uxth	r3, r3
 8000c16:	431c      	orrs	r4, r3
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8000c18:	0189      	lsls	r1, r1, #6
 8000c1a:	f401 61f8 	and.w	r1, r1, #1984	; 0x7c0
 8000c1e:	430c      	orrs	r4, r1
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8000c20:	f044 0403 	orr.w	r4, r4, #3
 8000c24:	b292      	uxth	r2, r2
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8000c26:	6142      	str	r2, [r0, #20]
  heth->Instance->MACMIIAR = tmpreg1;
 8000c28:	682b      	ldr	r3, [r5, #0]
 8000c2a:	611c      	str	r4, [r3, #16]
  tickstart = HAL_GetTick();
 8000c2c:	f7ff fc96 	bl	800055c <HAL_GetTick>
 8000c30:	4606      	mov	r6, r0
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8000c32:	f014 0f01 	tst.w	r4, #1
 8000c36:	d010      	beq.n	8000c5a <HAL_ETH_WritePHYRegister+0x6a>
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8000c38:	f7ff fc90 	bl	800055c <HAL_GetTick>
 8000c3c:	1b80      	subs	r0, r0, r6
 8000c3e:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8000c42:	d202      	bcs.n	8000c4a <HAL_ETH_WritePHYRegister+0x5a>
    tmpreg1 = heth->Instance->MACMIIAR;
 8000c44:	682b      	ldr	r3, [r5, #0]
 8000c46:	691c      	ldr	r4, [r3, #16]
 8000c48:	e7f3      	b.n	8000c32 <HAL_ETH_WritePHYRegister+0x42>
      heth->State= HAL_ETH_STATE_READY;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8000c50:	2300      	movs	r3, #0
 8000c52:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
      return HAL_TIMEOUT;
 8000c56:	2003      	movs	r0, #3
 8000c58:	bd70      	pop	{r4, r5, r6, pc}
  heth->State = HAL_ETH_STATE_READY;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
  return HAL_OK; 
 8000c60:	2000      	movs	r0, #0
 8000c62:	bd70      	pop	{r4, r5, r6, pc}

08000c64 <HAL_ETH_Init>:
{
 8000c64:	b570      	push	{r4, r5, r6, lr}
 8000c66:	b082      	sub	sp, #8
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	9301      	str	r3, [sp, #4]
  if(heth == NULL)
 8000c6c:	2800      	cmp	r0, #0
 8000c6e:	f000 810e 	beq.w	8000e8e <HAL_ETH_Init+0x22a>
 8000c72:	4604      	mov	r4, r0
  if(heth->State == HAL_ETH_STATE_RESET)
 8000c74:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d034      	beq.n	8000ce6 <HAL_ETH_Init+0x82>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	9300      	str	r3, [sp, #0]
 8000c80:	4b84      	ldr	r3, [pc, #528]	; (8000e94 <HAL_ETH_Init+0x230>)
 8000c82:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000c84:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000c88:	645a      	str	r2, [r3, #68]	; 0x44
 8000c8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c90:	9300      	str	r3, [sp, #0]
 8000c92:	9b00      	ldr	r3, [sp, #0]
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8000c94:	4b80      	ldr	r3, [pc, #512]	; (8000e98 <HAL_ETH_Init+0x234>)
 8000c96:	685a      	ldr	r2, [r3, #4]
 8000c98:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8000c9c:	605a      	str	r2, [r3, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8000c9e:	685a      	ldr	r2, [r3, #4]
 8000ca0:	6a21      	ldr	r1, [r4, #32]
 8000ca2:	430a      	orrs	r2, r1
 8000ca4:	605a      	str	r2, [r3, #4]
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8000ca6:	6823      	ldr	r3, [r4, #0]
 8000ca8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000cac:	681a      	ldr	r2, [r3, #0]
 8000cae:	f042 0201 	orr.w	r2, r2, #1
 8000cb2:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8000cb4:	f7ff fc52 	bl	800055c <HAL_GetTick>
 8000cb8:	4605      	mov	r5, r0
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8000cba:	6823      	ldr	r3, [r4, #0]
 8000cbc:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8000cc0:	6812      	ldr	r2, [r2, #0]
 8000cc2:	f012 0f01 	tst.w	r2, #1
 8000cc6:	d013      	beq.n	8000cf0 <HAL_ETH_Init+0x8c>
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8000cc8:	f7ff fc48 	bl	800055c <HAL_GetTick>
 8000ccc:	1b40      	subs	r0, r0, r5
 8000cce:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8000cd2:	d9f2      	bls.n	8000cba <HAL_ETH_Init+0x56>
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8000cd4:	2503      	movs	r5, #3
 8000cd6:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8000cda:	2300      	movs	r3, #0
 8000cdc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 8000ce0:	4628      	mov	r0, r5
 8000ce2:	b002      	add	sp, #8
 8000ce4:	bd70      	pop	{r4, r5, r6, pc}
    heth->Lock = HAL_UNLOCKED;
 8000ce6:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
    HAL_ETH_MspInit(heth);
 8000cea:	f00b ffa3 	bl	800cc34 <HAL_ETH_MspInit>
 8000cee:	e7c5      	b.n	8000c7c <HAL_ETH_Init+0x18>
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8000cf0:	691d      	ldr	r5, [r3, #16]
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8000cf2:	f025 051c 	bic.w	r5, r5, #28
  hclk = HAL_RCC_GetHCLKFreq();
 8000cf6:	f000 fd6f 	bl	80017d8 <HAL_RCC_GetHCLKFreq>
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8000cfa:	4b68      	ldr	r3, [pc, #416]	; (8000e9c <HAL_ETH_Init+0x238>)
 8000cfc:	4403      	add	r3, r0
 8000cfe:	4a68      	ldr	r2, [pc, #416]	; (8000ea0 <HAL_ETH_Init+0x23c>)
 8000d00:	4293      	cmp	r3, r2
 8000d02:	d855      	bhi.n	8000db0 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8000d04:	f045 0508 	orr.w	r5, r5, #8
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8000d08:	6823      	ldr	r3, [r4, #0]
 8000d0a:	611d      	str	r5, [r3, #16]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8000d0c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000d10:	2100      	movs	r1, #0
 8000d12:	4620      	mov	r0, r4
 8000d14:	f7ff ff6c 	bl	8000bf0 <HAL_ETH_WritePHYRegister>
 8000d18:	4605      	mov	r5, r0
 8000d1a:	2800      	cmp	r0, #0
 8000d1c:	d160      	bne.n	8000de0 <HAL_ETH_Init+0x17c>
  HAL_Delay(PHY_RESET_DELAY);
 8000d1e:	20ff      	movs	r0, #255	; 0xff
 8000d20:	f7ff fc22 	bl	8000568 <HAL_Delay>
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8000d24:	6863      	ldr	r3, [r4, #4]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	f000 8091 	beq.w	8000e4e <HAL_ETH_Init+0x1ea>
    tickstart = HAL_GetTick();
 8000d2c:	f7ff fc16 	bl	800055c <HAL_GetTick>
 8000d30:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000d32:	aa01      	add	r2, sp, #4
 8000d34:	2101      	movs	r1, #1
 8000d36:	4620      	mov	r0, r4
 8000d38:	f7ff ff1e 	bl	8000b78 <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8000d3c:	f7ff fc0e 	bl	800055c <HAL_GetTick>
 8000d40:	1b80      	subs	r0, r0, r6
 8000d42:	f241 3388 	movw	r3, #5000	; 0x1388
 8000d46:	4298      	cmp	r0, r3
 8000d48:	d852      	bhi.n	8000df0 <HAL_ETH_Init+0x18c>
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8000d4a:	9b01      	ldr	r3, [sp, #4]
 8000d4c:	f013 0f04 	tst.w	r3, #4
 8000d50:	d0ef      	beq.n	8000d32 <HAL_ETH_Init+0xce>
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8000d52:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d56:	2100      	movs	r1, #0
 8000d58:	4620      	mov	r0, r4
 8000d5a:	f7ff ff49 	bl	8000bf0 <HAL_ETH_WritePHYRegister>
 8000d5e:	2800      	cmp	r0, #0
 8000d60:	d152      	bne.n	8000e08 <HAL_ETH_Init+0x1a4>
    tickstart = HAL_GetTick();
 8000d62:	f7ff fbfb 	bl	800055c <HAL_GetTick>
 8000d66:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000d68:	aa01      	add	r2, sp, #4
 8000d6a:	2101      	movs	r1, #1
 8000d6c:	4620      	mov	r0, r4
 8000d6e:	f7ff ff03 	bl	8000b78 <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8000d72:	f7ff fbf3 	bl	800055c <HAL_GetTick>
 8000d76:	1b80      	subs	r0, r0, r6
 8000d78:	f241 3388 	movw	r3, #5000	; 0x1388
 8000d7c:	4298      	cmp	r0, r3
 8000d7e:	d84b      	bhi.n	8000e18 <HAL_ETH_Init+0x1b4>
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8000d80:	9b01      	ldr	r3, [sp, #4]
 8000d82:	f013 0f20 	tst.w	r3, #32
 8000d86:	d0ef      	beq.n	8000d68 <HAL_ETH_Init+0x104>
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8000d88:	aa01      	add	r2, sp, #4
 8000d8a:	211f      	movs	r1, #31
 8000d8c:	4620      	mov	r0, r4
 8000d8e:	f7ff fef3 	bl	8000b78 <HAL_ETH_ReadPHYRegister>
 8000d92:	2800      	cmp	r0, #0
 8000d94:	d14c      	bne.n	8000e30 <HAL_ETH_Init+0x1cc>
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8000d96:	9b01      	ldr	r3, [sp, #4]
 8000d98:	f013 0f10 	tst.w	r3, #16
 8000d9c:	d050      	beq.n	8000e40 <HAL_ETH_Init+0x1dc>
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8000d9e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000da2:	60e2      	str	r2, [r4, #12]
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8000da4:	f013 0f04 	tst.w	r3, #4
 8000da8:	d04d      	beq.n	8000e46 <HAL_ETH_Init+0x1e2>
      (heth->Init).Speed = ETH_SPEED_10M; 
 8000daa:	2300      	movs	r3, #0
 8000dac:	60a3      	str	r3, [r4, #8]
 8000dae:	e05e      	b.n	8000e6e <HAL_ETH_Init+0x20a>
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8000db0:	4b3c      	ldr	r3, [pc, #240]	; (8000ea4 <HAL_ETH_Init+0x240>)
 8000db2:	4403      	add	r3, r0
 8000db4:	4a3c      	ldr	r2, [pc, #240]	; (8000ea8 <HAL_ETH_Init+0x244>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d802      	bhi.n	8000dc0 <HAL_ETH_Init+0x15c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8000dba:	f045 050c 	orr.w	r5, r5, #12
 8000dbe:	e7a3      	b.n	8000d08 <HAL_ETH_Init+0xa4>
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8000dc0:	4b3a      	ldr	r3, [pc, #232]	; (8000eac <HAL_ETH_Init+0x248>)
 8000dc2:	4403      	add	r3, r0
 8000dc4:	4a3a      	ldr	r2, [pc, #232]	; (8000eb0 <HAL_ETH_Init+0x24c>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d99e      	bls.n	8000d08 <HAL_ETH_Init+0xa4>
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8000dca:	4b3a      	ldr	r3, [pc, #232]	; (8000eb4 <HAL_ETH_Init+0x250>)
 8000dcc:	4403      	add	r3, r0
 8000dce:	4a3a      	ldr	r2, [pc, #232]	; (8000eb8 <HAL_ETH_Init+0x254>)
 8000dd0:	4293      	cmp	r3, r2
 8000dd2:	d802      	bhi.n	8000dda <HAL_ETH_Init+0x176>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8000dd4:	f045 0504 	orr.w	r5, r5, #4
 8000dd8:	e796      	b.n	8000d08 <HAL_ETH_Init+0xa4>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8000dda:	f045 0510 	orr.w	r5, r5, #16
 8000dde:	e793      	b.n	8000d08 <HAL_ETH_Init+0xa4>
    ETH_MACDMAConfig(heth, err);
 8000de0:	2101      	movs	r1, #1
 8000de2:	4620      	mov	r0, r4
 8000de4:	f7ff fca6 	bl	8000734 <ETH_MACDMAConfig>
    heth->State = HAL_ETH_STATE_READY;
 8000de8:	2501      	movs	r5, #1
 8000dea:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
    return HAL_ERROR;
 8000dee:	e777      	b.n	8000ce0 <HAL_ETH_Init+0x7c>
        ETH_MACDMAConfig(heth, err);
 8000df0:	2101      	movs	r1, #1
 8000df2:	4620      	mov	r0, r4
 8000df4:	f7ff fc9e 	bl	8000734 <ETH_MACDMAConfig>
        heth->State= HAL_ETH_STATE_READY;
 8000df8:	2301      	movs	r3, #1
 8000dfa:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(heth);
 8000dfe:	2300      	movs	r3, #0
 8000e00:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
        return HAL_TIMEOUT;
 8000e04:	2503      	movs	r5, #3
 8000e06:	e76b      	b.n	8000ce0 <HAL_ETH_Init+0x7c>
      ETH_MACDMAConfig(heth, err);
 8000e08:	2101      	movs	r1, #1
 8000e0a:	4620      	mov	r0, r4
 8000e0c:	f7ff fc92 	bl	8000734 <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 8000e10:	2501      	movs	r5, #1
 8000e12:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      return HAL_ERROR;   
 8000e16:	e763      	b.n	8000ce0 <HAL_ETH_Init+0x7c>
        ETH_MACDMAConfig(heth, err);
 8000e18:	2101      	movs	r1, #1
 8000e1a:	4620      	mov	r0, r4
 8000e1c:	f7ff fc8a 	bl	8000734 <ETH_MACDMAConfig>
        heth->State= HAL_ETH_STATE_READY;
 8000e20:	2301      	movs	r3, #1
 8000e22:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(heth);
 8000e26:	2300      	movs	r3, #0
 8000e28:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
        return HAL_TIMEOUT;
 8000e2c:	2503      	movs	r5, #3
 8000e2e:	e757      	b.n	8000ce0 <HAL_ETH_Init+0x7c>
      ETH_MACDMAConfig(heth, err);
 8000e30:	2101      	movs	r1, #1
 8000e32:	4620      	mov	r0, r4
 8000e34:	f7ff fc7e 	bl	8000734 <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 8000e38:	2501      	movs	r5, #1
 8000e3a:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      return HAL_ERROR;   
 8000e3e:	e74f      	b.n	8000ce0 <HAL_ETH_Init+0x7c>
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8000e40:	2200      	movs	r2, #0
 8000e42:	60e2      	str	r2, [r4, #12]
 8000e44:	e7ae      	b.n	8000da4 <HAL_ETH_Init+0x140>
      (heth->Init).Speed = ETH_SPEED_100M;
 8000e46:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000e4a:	60a3      	str	r3, [r4, #8]
 8000e4c:	e00f      	b.n	8000e6e <HAL_ETH_Init+0x20a>
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8000e4e:	68e3      	ldr	r3, [r4, #12]
 8000e50:	f3c3 02cf 	ubfx	r2, r3, #3, #16
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8000e54:	68a3      	ldr	r3, [r4, #8]
 8000e56:	f3c3 034f 	ubfx	r3, r3, #1, #16
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8000e5a:	431a      	orrs	r2, r3
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	4620      	mov	r0, r4
 8000e60:	f7ff fec6 	bl	8000bf0 <HAL_ETH_WritePHYRegister>
 8000e64:	b958      	cbnz	r0, 8000e7e <HAL_ETH_Init+0x21a>
    HAL_Delay(PHY_CONFIG_DELAY);
 8000e66:	f640 70ff 	movw	r0, #4095	; 0xfff
 8000e6a:	f7ff fb7d 	bl	8000568 <HAL_Delay>
  ETH_MACDMAConfig(heth, err);
 8000e6e:	2100      	movs	r1, #0
 8000e70:	4620      	mov	r0, r4
 8000e72:	f7ff fc5f 	bl	8000734 <ETH_MACDMAConfig>
  heth->State= HAL_ETH_STATE_READY;
 8000e76:	2301      	movs	r3, #1
 8000e78:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  return HAL_OK;
 8000e7c:	e730      	b.n	8000ce0 <HAL_ETH_Init+0x7c>
      ETH_MACDMAConfig(heth, err);
 8000e7e:	2101      	movs	r1, #1
 8000e80:	4620      	mov	r0, r4
 8000e82:	f7ff fc57 	bl	8000734 <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 8000e86:	2501      	movs	r5, #1
 8000e88:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      return HAL_ERROR;
 8000e8c:	e728      	b.n	8000ce0 <HAL_ETH_Init+0x7c>
    return HAL_ERROR;
 8000e8e:	2501      	movs	r5, #1
 8000e90:	e726      	b.n	8000ce0 <HAL_ETH_Init+0x7c>
 8000e92:	bf00      	nop
 8000e94:	40023800 	.word	0x40023800
 8000e98:	40013800 	.word	0x40013800
 8000e9c:	feced300 	.word	0xfeced300
 8000ea0:	00e4e1bf 	.word	0x00e4e1bf
 8000ea4:	fde9f140 	.word	0xfde9f140
 8000ea8:	017d783f 	.word	0x017d783f
 8000eac:	fc6c7900 	.word	0xfc6c7900
 8000eb0:	026259ff 	.word	0x026259ff
 8000eb4:	fa0a1f00 	.word	0xfa0a1f00
 8000eb8:	02faf07f 	.word	0x02faf07f

08000ebc <HAL_ETH_Start>:
{  
 8000ebc:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(heth);
 8000ebe:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8000ec2:	2b01      	cmp	r3, #1
 8000ec4:	d101      	bne.n	8000eca <HAL_ETH_Start+0xe>
 8000ec6:	2002      	movs	r0, #2
}
 8000ec8:	bd38      	pop	{r3, r4, r5, pc}
 8000eca:	4604      	mov	r4, r0
  __HAL_LOCK(heth);
 8000ecc:	2501      	movs	r5, #1
 8000ece:	f880 5045 	strb.w	r5, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 8000ed2:	2302      	movs	r3, #2
 8000ed4:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  ETH_MACTransmissionEnable(heth);
 8000ed8:	f7ff fbea 	bl	80006b0 <ETH_MACTransmissionEnable>
  ETH_MACReceptionEnable(heth);
 8000edc:	4620      	mov	r0, r4
 8000ede:	f7ff fbfc 	bl	80006da <ETH_MACReceptionEnable>
  ETH_FlushTransmitFIFO(heth);
 8000ee2:	4620      	mov	r0, r4
 8000ee4:	f7ff fc0e 	bl	8000704 <ETH_FlushTransmitFIFO>
  ETH_DMATransmissionEnable(heth);
 8000ee8:	4620      	mov	r0, r4
 8000eea:	f7ff fbbb 	bl	8000664 <ETH_DMATransmissionEnable>
  ETH_DMAReceptionEnable(heth);
 8000eee:	4620      	mov	r0, r4
 8000ef0:	f7ff fbc0 	bl	8000674 <ETH_DMAReceptionEnable>
  heth->State= HAL_ETH_STATE_READY;
 8000ef4:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8000ef8:	2000      	movs	r0, #0
 8000efa:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
  return HAL_OK;
 8000efe:	bd38      	pop	{r3, r4, r5, pc}

08000f00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f02:	b083      	sub	sp, #12
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f04:	2400      	movs	r4, #0
 8000f06:	e04b      	b.n	8000fa0 <HAL_GPIO_Init+0xa0>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f08:	ea4f 0ed4 	mov.w	lr, r4, lsr #3
 8000f0c:	f10e 0e08 	add.w	lr, lr, #8
 8000f10:	f850 202e 	ldr.w	r2, [r0, lr, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f14:	f004 0607 	and.w	r6, r4, #7
 8000f18:	00b6      	lsls	r6, r6, #2
 8000f1a:	270f      	movs	r7, #15
 8000f1c:	40b7      	lsls	r7, r6
 8000f1e:	ea22 0207 	bic.w	r2, r2, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f22:	690f      	ldr	r7, [r1, #16]
 8000f24:	fa07 f606 	lsl.w	r6, r7, r6
 8000f28:	4332      	orrs	r2, r6
        GPIOx->AFR[position >> 3U] = temp;
 8000f2a:	f840 202e 	str.w	r2, [r0, lr, lsl #2]
 8000f2e:	e046      	b.n	8000fbe <HAL_GPIO_Init+0xbe>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f30:	2609      	movs	r6, #9
 8000f32:	e000      	b.n	8000f36 <HAL_GPIO_Init+0x36>
 8000f34:	2600      	movs	r6, #0
 8000f36:	fa06 f60e 	lsl.w	r6, r6, lr
 8000f3a:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f3c:	3302      	adds	r3, #2
 8000f3e:	4e64      	ldr	r6, [pc, #400]	; (80010d0 <HAL_GPIO_Init+0x1d0>)
 8000f40:	f846 2023 	str.w	r2, [r6, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f44:	4b63      	ldr	r3, [pc, #396]	; (80010d4 <HAL_GPIO_Init+0x1d4>)
 8000f46:	681a      	ldr	r2, [r3, #0]
        temp &= ~((uint32_t)iocurrent);
 8000f48:	43eb      	mvns	r3, r5
 8000f4a:	ea02 0603 	and.w	r6, r2, r3
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f4e:	684f      	ldr	r7, [r1, #4]
 8000f50:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8000f54:	d001      	beq.n	8000f5a <HAL_GPIO_Init+0x5a>
        {
          temp |= iocurrent;
 8000f56:	ea45 0602 	orr.w	r6, r5, r2
        }
        EXTI->IMR = temp;
 8000f5a:	4a5e      	ldr	r2, [pc, #376]	; (80010d4 <HAL_GPIO_Init+0x1d4>)
 8000f5c:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 8000f5e:	6852      	ldr	r2, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8000f60:	ea03 0602 	and.w	r6, r3, r2
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f64:	684f      	ldr	r7, [r1, #4]
 8000f66:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8000f6a:	d001      	beq.n	8000f70 <HAL_GPIO_Init+0x70>
        {
          temp |= iocurrent;
 8000f6c:	ea45 0602 	orr.w	r6, r5, r2
        }
        EXTI->EMR = temp;
 8000f70:	4a58      	ldr	r2, [pc, #352]	; (80010d4 <HAL_GPIO_Init+0x1d4>)
 8000f72:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f74:	6892      	ldr	r2, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8000f76:	ea03 0602 	and.w	r6, r3, r2
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f7a:	684f      	ldr	r7, [r1, #4]
 8000f7c:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8000f80:	d001      	beq.n	8000f86 <HAL_GPIO_Init+0x86>
        {
          temp |= iocurrent;
 8000f82:	ea45 0602 	orr.w	r6, r5, r2
        }
        EXTI->RTSR = temp;
 8000f86:	4a53      	ldr	r2, [pc, #332]	; (80010d4 <HAL_GPIO_Init+0x1d4>)
 8000f88:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 8000f8a:	68d2      	ldr	r2, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 8000f8c:	4013      	ands	r3, r2
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f8e:	684e      	ldr	r6, [r1, #4]
 8000f90:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8000f94:	d001      	beq.n	8000f9a <HAL_GPIO_Init+0x9a>
        {
          temp |= iocurrent;
 8000f96:	ea45 0302 	orr.w	r3, r5, r2
        }
        EXTI->FTSR = temp;
 8000f9a:	4a4e      	ldr	r2, [pc, #312]	; (80010d4 <HAL_GPIO_Init+0x1d4>)
 8000f9c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f9e:	3401      	adds	r4, #1
 8000fa0:	2c0f      	cmp	r4, #15
 8000fa2:	f200 8092 	bhi.w	80010ca <HAL_GPIO_Init+0x1ca>
    ioposition = 0x01U << position;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	40a3      	lsls	r3, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000faa:	680a      	ldr	r2, [r1, #0]
 8000fac:	ea03 0502 	and.w	r5, r3, r2
    if(iocurrent == ioposition)
 8000fb0:	42ab      	cmp	r3, r5
 8000fb2:	d1f4      	bne.n	8000f9e <HAL_GPIO_Init+0x9e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fb4:	684a      	ldr	r2, [r1, #4]
 8000fb6:	2a02      	cmp	r2, #2
 8000fb8:	d0a6      	beq.n	8000f08 <HAL_GPIO_Init+0x8>
 8000fba:	2a12      	cmp	r2, #18
 8000fbc:	d0a4      	beq.n	8000f08 <HAL_GPIO_Init+0x8>
      temp = GPIOx->MODER;
 8000fbe:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fc0:	ea4f 0e44 	mov.w	lr, r4, lsl #1
 8000fc4:	2203      	movs	r2, #3
 8000fc6:	fa02 f20e 	lsl.w	r2, r2, lr
 8000fca:	43d2      	mvns	r2, r2
 8000fcc:	4016      	ands	r6, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fce:	684f      	ldr	r7, [r1, #4]
 8000fd0:	f007 0703 	and.w	r7, r7, #3
 8000fd4:	fa07 f70e 	lsl.w	r7, r7, lr
 8000fd8:	433e      	orrs	r6, r7
      GPIOx->MODER = temp;
 8000fda:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fdc:	684e      	ldr	r6, [r1, #4]
 8000fde:	1e77      	subs	r7, r6, #1
 8000fe0:	2f01      	cmp	r7, #1
 8000fe2:	d903      	bls.n	8000fec <HAL_GPIO_Init+0xec>
 8000fe4:	2e11      	cmp	r6, #17
 8000fe6:	d001      	beq.n	8000fec <HAL_GPIO_Init+0xec>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fe8:	2e12      	cmp	r6, #18
 8000fea:	d10f      	bne.n	800100c <HAL_GPIO_Init+0x10c>
        temp = GPIOx->OSPEEDR; 
 8000fec:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fee:	4016      	ands	r6, r2
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ff0:	68cf      	ldr	r7, [r1, #12]
 8000ff2:	fa07 f70e 	lsl.w	r7, r7, lr
 8000ff6:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 8000ff8:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8000ffa:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ffc:	ea26 0303 	bic.w	r3, r6, r3
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001000:	684e      	ldr	r6, [r1, #4]
 8001002:	f3c6 1600 	ubfx	r6, r6, #4, #1
 8001006:	40a6      	lsls	r6, r4
 8001008:	4333      	orrs	r3, r6
        GPIOx->OTYPER = temp;
 800100a:	6043      	str	r3, [r0, #4]
      temp = GPIOx->PUPDR;
 800100c:	68c3      	ldr	r3, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800100e:	401a      	ands	r2, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001010:	688b      	ldr	r3, [r1, #8]
 8001012:	fa03 f30e 	lsl.w	r3, r3, lr
 8001016:	431a      	orrs	r2, r3
      GPIOx->PUPDR = temp;
 8001018:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800101a:	684b      	ldr	r3, [r1, #4]
 800101c:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001020:	d0bd      	beq.n	8000f9e <HAL_GPIO_Init+0x9e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001022:	2300      	movs	r3, #0
 8001024:	9301      	str	r3, [sp, #4]
 8001026:	4b2c      	ldr	r3, [pc, #176]	; (80010d8 <HAL_GPIO_Init+0x1d8>)
 8001028:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800102a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800102e:	645a      	str	r2, [r3, #68]	; 0x44
 8001030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001032:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001036:	9301      	str	r3, [sp, #4]
 8001038:	9b01      	ldr	r3, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 800103a:	08a3      	lsrs	r3, r4, #2
 800103c:	1c9e      	adds	r6, r3, #2
 800103e:	4a24      	ldr	r2, [pc, #144]	; (80010d0 <HAL_GPIO_Init+0x1d0>)
 8001040:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001044:	f004 0603 	and.w	r6, r4, #3
 8001048:	ea4f 0e86 	mov.w	lr, r6, lsl #2
 800104c:	260f      	movs	r6, #15
 800104e:	fa06 f60e 	lsl.w	r6, r6, lr
 8001052:	ea22 0206 	bic.w	r2, r2, r6
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001056:	4f21      	ldr	r7, [pc, #132]	; (80010dc <HAL_GPIO_Init+0x1dc>)
 8001058:	42b8      	cmp	r0, r7
 800105a:	f43f af6b 	beq.w	8000f34 <HAL_GPIO_Init+0x34>
 800105e:	4e20      	ldr	r6, [pc, #128]	; (80010e0 <HAL_GPIO_Init+0x1e0>)
 8001060:	42b0      	cmp	r0, r6
 8001062:	d022      	beq.n	80010aa <HAL_GPIO_Init+0x1aa>
 8001064:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001068:	42b0      	cmp	r0, r6
 800106a:	d020      	beq.n	80010ae <HAL_GPIO_Init+0x1ae>
 800106c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001070:	42b0      	cmp	r0, r6
 8001072:	d01e      	beq.n	80010b2 <HAL_GPIO_Init+0x1b2>
 8001074:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001078:	42b0      	cmp	r0, r6
 800107a:	d01c      	beq.n	80010b6 <HAL_GPIO_Init+0x1b6>
 800107c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001080:	42b0      	cmp	r0, r6
 8001082:	d01a      	beq.n	80010ba <HAL_GPIO_Init+0x1ba>
 8001084:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001088:	42b0      	cmp	r0, r6
 800108a:	d018      	beq.n	80010be <HAL_GPIO_Init+0x1be>
 800108c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001090:	42b0      	cmp	r0, r6
 8001092:	d016      	beq.n	80010c2 <HAL_GPIO_Init+0x1c2>
 8001094:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001098:	42b0      	cmp	r0, r6
 800109a:	d014      	beq.n	80010c6 <HAL_GPIO_Init+0x1c6>
 800109c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80010a0:	42b0      	cmp	r0, r6
 80010a2:	f43f af45 	beq.w	8000f30 <HAL_GPIO_Init+0x30>
 80010a6:	260a      	movs	r6, #10
 80010a8:	e745      	b.n	8000f36 <HAL_GPIO_Init+0x36>
 80010aa:	2601      	movs	r6, #1
 80010ac:	e743      	b.n	8000f36 <HAL_GPIO_Init+0x36>
 80010ae:	2602      	movs	r6, #2
 80010b0:	e741      	b.n	8000f36 <HAL_GPIO_Init+0x36>
 80010b2:	2603      	movs	r6, #3
 80010b4:	e73f      	b.n	8000f36 <HAL_GPIO_Init+0x36>
 80010b6:	2604      	movs	r6, #4
 80010b8:	e73d      	b.n	8000f36 <HAL_GPIO_Init+0x36>
 80010ba:	2605      	movs	r6, #5
 80010bc:	e73b      	b.n	8000f36 <HAL_GPIO_Init+0x36>
 80010be:	2606      	movs	r6, #6
 80010c0:	e739      	b.n	8000f36 <HAL_GPIO_Init+0x36>
 80010c2:	2607      	movs	r6, #7
 80010c4:	e737      	b.n	8000f36 <HAL_GPIO_Init+0x36>
 80010c6:	2608      	movs	r6, #8
 80010c8:	e735      	b.n	8000f36 <HAL_GPIO_Init+0x36>
      }
    }
  }
}
 80010ca:	b003      	add	sp, #12
 80010cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010ce:	bf00      	nop
 80010d0:	40013800 	.word	0x40013800
 80010d4:	40013c00 	.word	0x40013c00
 80010d8:	40023800 	.word	0x40023800
 80010dc:	40020000 	.word	0x40020000
 80010e0:	40020400 	.word	0x40020400

080010e4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010e4:	b912      	cbnz	r2, 80010ec <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010e6:	0409      	lsls	r1, r1, #16
 80010e8:	6181      	str	r1, [r0, #24]
 80010ea:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 80010ec:	6181      	str	r1, [r0, #24]
 80010ee:	4770      	bx	lr

080010f0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80010f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010f2:	b08b      	sub	sp, #44	; 0x2c
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80010f4:	2800      	cmp	r0, #0
 80010f6:	f000 808a 	beq.w	800120e <HAL_PCD_Init+0x11e>
 80010fa:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80010fc:	6805      	ldr	r5, [r0, #0]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80010fe:	f890 33bd 	ldrb.w	r3, [r0, #957]	; 0x3bd
 8001102:	b323      	cbz	r3, 800114e <HAL_PCD_Init+0x5e>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001104:	2303      	movs	r3, #3
 8001106:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800110a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800110c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001110:	d101      	bne.n	8001116 <HAL_PCD_Init+0x26>
  {
    hpcd->Init.dma_enable = 0U;
 8001112:	2300      	movs	r3, #0
 8001114:	6123      	str	r3, [r4, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001116:	6820      	ldr	r0, [r4, #0]
 8001118:	f000 ff2d 	bl	8001f76 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800111c:	4625      	mov	r5, r4
 800111e:	f855 7b10 	ldr.w	r7, [r5], #16
 8001122:	466e      	mov	r6, sp
 8001124:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001126:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001128:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800112a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800112c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001130:	e886 0003 	stmia.w	r6, {r0, r1}
 8001134:	1d23      	adds	r3, r4, #4
 8001136:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001138:	4638      	mov	r0, r7
 800113a:	f000 fed7 	bl	8001eec <USB_CoreInit>
 800113e:	b158      	cbz	r0, 8001158 <HAL_PCD_Init+0x68>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001140:	2302      	movs	r3, #2
 8001142:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
    return HAL_ERROR;
 8001146:	2501      	movs	r5, #1
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 8001148:	4628      	mov	r0, r5
 800114a:	b00b      	add	sp, #44	; 0x2c
 800114c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hpcd->Lock = HAL_UNLOCKED;
 800114e:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
    HAL_PCD_MspInit(hpcd);
 8001152:	f00c fb1d 	bl	800d790 <HAL_PCD_MspInit>
 8001156:	e7d5      	b.n	8001104 <HAL_PCD_Init+0x14>
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001158:	2100      	movs	r1, #0
 800115a:	6820      	ldr	r0, [r4, #0]
 800115c:	f000 ff11 	bl	8001f82 <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001160:	2300      	movs	r3, #0
 8001162:	e015      	b.n	8001190 <HAL_PCD_Init+0xa0>
    hpcd->IN_ep[i].is_in = 1U;
 8001164:	00d9      	lsls	r1, r3, #3
 8001166:	1ac8      	subs	r0, r1, r3
 8001168:	0082      	lsls	r2, r0, #2
 800116a:	4422      	add	r2, r4
 800116c:	2001      	movs	r0, #1
 800116e:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
    hpcd->IN_ep[i].num = i;
 8001172:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001176:	f8a2 3042 	strh.w	r3, [r2, #66]	; 0x42
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800117a:	2000      	movs	r0, #0
 800117c:	f882 003f 	strb.w	r0, [r2, #63]	; 0x3f
    hpcd->IN_ep[i].maxpacket = 0U;
 8001180:	6450      	str	r0, [r2, #68]	; 0x44
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001182:	6490      	str	r0, [r2, #72]	; 0x48
    hpcd->IN_ep[i].xfer_len = 0U;
 8001184:	1aca      	subs	r2, r1, r3
 8001186:	0091      	lsls	r1, r2, #2
 8001188:	4421      	add	r1, r4
 800118a:	6508      	str	r0, [r1, #80]	; 0x50
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800118c:	3301      	adds	r3, #1
 800118e:	b2db      	uxtb	r3, r3
 8001190:	6865      	ldr	r5, [r4, #4]
 8001192:	42ab      	cmp	r3, r5
 8001194:	d3e6      	bcc.n	8001164 <HAL_PCD_Init+0x74>
 8001196:	2300      	movs	r3, #0
 8001198:	e015      	b.n	80011c6 <HAL_PCD_Init+0xd6>
    hpcd->OUT_ep[i].is_in = 0U;
 800119a:	00d8      	lsls	r0, r3, #3
 800119c:	1ac1      	subs	r1, r0, r3
 800119e:	008a      	lsls	r2, r1, #2
 80011a0:	4422      	add	r2, r4
 80011a2:	2100      	movs	r1, #0
 80011a4:	f882 11fd 	strb.w	r1, [r2, #509]	; 0x1fd
    hpcd->OUT_ep[i].num = i;
 80011a8:	f882 31fc 	strb.w	r3, [r2, #508]	; 0x1fc
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80011ac:	f882 11ff 	strb.w	r1, [r2, #511]	; 0x1ff
    hpcd->OUT_ep[i].maxpacket = 0U;
 80011b0:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80011b4:	f8c2 1208 	str.w	r1, [r2, #520]	; 0x208
    hpcd->OUT_ep[i].xfer_len = 0U;
 80011b8:	1ac2      	subs	r2, r0, r3
 80011ba:	0090      	lsls	r0, r2, #2
 80011bc:	4420      	add	r0, r4
 80011be:	f8c0 1210 	str.w	r1, [r0, #528]	; 0x210
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011c2:	3301      	adds	r3, #1
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	429d      	cmp	r5, r3
 80011c8:	d8e7      	bhi.n	800119a <HAL_PCD_Init+0xaa>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80011ca:	4625      	mov	r5, r4
 80011cc:	f855 7b10 	ldr.w	r7, [r5], #16
 80011d0:	466e      	mov	r6, sp
 80011d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011d4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80011d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011d8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80011da:	e895 0003 	ldmia.w	r5, {r0, r1}
 80011de:	e886 0003 	stmia.w	r6, {r0, r1}
 80011e2:	1d23      	adds	r3, r4, #4
 80011e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011e6:	4638      	mov	r0, r7
 80011e8:	f000 ff12 	bl	8002010 <USB_DevInit>
 80011ec:	4605      	mov	r5, r0
 80011ee:	b120      	cbz	r0, 80011fa <HAL_PCD_Init+0x10a>
    hpcd->State = HAL_PCD_STATE_ERROR;
 80011f0:	2302      	movs	r3, #2
 80011f2:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
    return HAL_ERROR;
 80011f6:	2501      	movs	r5, #1
 80011f8:	e7a6      	b.n	8001148 <HAL_PCD_Init+0x58>
  hpcd->USB_Address = 0U;
 80011fa:	2300      	movs	r3, #0
 80011fc:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001200:	2301      	movs	r3, #1
 8001202:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  (void)USB_DevDisconnect(hpcd->Instance);
 8001206:	6820      	ldr	r0, [r4, #0]
 8001208:	f000 ffd2 	bl	80021b0 <USB_DevDisconnect>
  return HAL_OK;
 800120c:	e79c      	b.n	8001148 <HAL_PCD_Init+0x58>
    return HAL_ERROR;
 800120e:	2501      	movs	r5, #1
 8001210:	e79a      	b.n	8001148 <HAL_PCD_Init+0x58>
	...

08001214 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001214:	2800      	cmp	r0, #0
 8001216:	f000 81bb 	beq.w	8001590 <HAL_RCC_OscConfig+0x37c>
{
 800121a:	b570      	push	{r4, r5, r6, lr}
 800121c:	b082      	sub	sp, #8
 800121e:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001220:	6803      	ldr	r3, [r0, #0]
 8001222:	f013 0f01 	tst.w	r3, #1
 8001226:	d03b      	beq.n	80012a0 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001228:	4ba7      	ldr	r3, [pc, #668]	; (80014c8 <HAL_RCC_OscConfig+0x2b4>)
 800122a:	689b      	ldr	r3, [r3, #8]
 800122c:	f003 030c 	and.w	r3, r3, #12
 8001230:	2b04      	cmp	r3, #4
 8001232:	d02c      	beq.n	800128e <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001234:	4ba4      	ldr	r3, [pc, #656]	; (80014c8 <HAL_RCC_OscConfig+0x2b4>)
 8001236:	689b      	ldr	r3, [r3, #8]
 8001238:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800123c:	2b08      	cmp	r3, #8
 800123e:	d021      	beq.n	8001284 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001240:	6863      	ldr	r3, [r4, #4]
 8001242:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001246:	d04f      	beq.n	80012e8 <HAL_RCC_OscConfig+0xd4>
 8001248:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800124c:	d052      	beq.n	80012f4 <HAL_RCC_OscConfig+0xe0>
 800124e:	4b9e      	ldr	r3, [pc, #632]	; (80014c8 <HAL_RCC_OscConfig+0x2b4>)
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800125e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001260:	6863      	ldr	r3, [r4, #4]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d050      	beq.n	8001308 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001266:	f7ff f979 	bl	800055c <HAL_GetTick>
 800126a:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800126c:	4b96      	ldr	r3, [pc, #600]	; (80014c8 <HAL_RCC_OscConfig+0x2b4>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001274:	d114      	bne.n	80012a0 <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001276:	f7ff f971 	bl	800055c <HAL_GetTick>
 800127a:	1b40      	subs	r0, r0, r5
 800127c:	2864      	cmp	r0, #100	; 0x64
 800127e:	d9f5      	bls.n	800126c <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8001280:	2003      	movs	r0, #3
 8001282:	e18a      	b.n	800159a <HAL_RCC_OscConfig+0x386>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001284:	4b90      	ldr	r3, [pc, #576]	; (80014c8 <HAL_RCC_OscConfig+0x2b4>)
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800128c:	d0d8      	beq.n	8001240 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800128e:	4b8e      	ldr	r3, [pc, #568]	; (80014c8 <HAL_RCC_OscConfig+0x2b4>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001296:	d003      	beq.n	80012a0 <HAL_RCC_OscConfig+0x8c>
 8001298:	6863      	ldr	r3, [r4, #4]
 800129a:	2b00      	cmp	r3, #0
 800129c:	f000 817a 	beq.w	8001594 <HAL_RCC_OscConfig+0x380>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012a0:	6823      	ldr	r3, [r4, #0]
 80012a2:	f013 0f02 	tst.w	r3, #2
 80012a6:	d055      	beq.n	8001354 <HAL_RCC_OscConfig+0x140>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012a8:	4b87      	ldr	r3, [pc, #540]	; (80014c8 <HAL_RCC_OscConfig+0x2b4>)
 80012aa:	689b      	ldr	r3, [r3, #8]
 80012ac:	f013 0f0c 	tst.w	r3, #12
 80012b0:	d03e      	beq.n	8001330 <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012b2:	4b85      	ldr	r3, [pc, #532]	; (80014c8 <HAL_RCC_OscConfig+0x2b4>)
 80012b4:	689b      	ldr	r3, [r3, #8]
 80012b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012ba:	2b08      	cmp	r3, #8
 80012bc:	d033      	beq.n	8001326 <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80012be:	68e3      	ldr	r3, [r4, #12]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d068      	beq.n	8001396 <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012c4:	2201      	movs	r2, #1
 80012c6:	4b81      	ldr	r3, [pc, #516]	; (80014cc <HAL_RCC_OscConfig+0x2b8>)
 80012c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012ca:	f7ff f947 	bl	800055c <HAL_GetTick>
 80012ce:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012d0:	4b7d      	ldr	r3, [pc, #500]	; (80014c8 <HAL_RCC_OscConfig+0x2b4>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f013 0f02 	tst.w	r3, #2
 80012d8:	d154      	bne.n	8001384 <HAL_RCC_OscConfig+0x170>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012da:	f7ff f93f 	bl	800055c <HAL_GetTick>
 80012de:	1b40      	subs	r0, r0, r5
 80012e0:	2802      	cmp	r0, #2
 80012e2:	d9f5      	bls.n	80012d0 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 80012e4:	2003      	movs	r0, #3
 80012e6:	e158      	b.n	800159a <HAL_RCC_OscConfig+0x386>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012e8:	4a77      	ldr	r2, [pc, #476]	; (80014c8 <HAL_RCC_OscConfig+0x2b4>)
 80012ea:	6813      	ldr	r3, [r2, #0]
 80012ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012f0:	6013      	str	r3, [r2, #0]
 80012f2:	e7b5      	b.n	8001260 <HAL_RCC_OscConfig+0x4c>
 80012f4:	4b74      	ldr	r3, [pc, #464]	; (80014c8 <HAL_RCC_OscConfig+0x2b4>)
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80012fc:	601a      	str	r2, [r3, #0]
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001304:	601a      	str	r2, [r3, #0]
 8001306:	e7ab      	b.n	8001260 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8001308:	f7ff f928 	bl	800055c <HAL_GetTick>
 800130c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800130e:	4b6e      	ldr	r3, [pc, #440]	; (80014c8 <HAL_RCC_OscConfig+0x2b4>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001316:	d0c3      	beq.n	80012a0 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001318:	f7ff f920 	bl	800055c <HAL_GetTick>
 800131c:	1b40      	subs	r0, r0, r5
 800131e:	2864      	cmp	r0, #100	; 0x64
 8001320:	d9f5      	bls.n	800130e <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 8001322:	2003      	movs	r0, #3
 8001324:	e139      	b.n	800159a <HAL_RCC_OscConfig+0x386>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001326:	4b68      	ldr	r3, [pc, #416]	; (80014c8 <HAL_RCC_OscConfig+0x2b4>)
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800132e:	d1c6      	bne.n	80012be <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001330:	4b65      	ldr	r3, [pc, #404]	; (80014c8 <HAL_RCC_OscConfig+0x2b4>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f013 0f02 	tst.w	r3, #2
 8001338:	d004      	beq.n	8001344 <HAL_RCC_OscConfig+0x130>
 800133a:	68e3      	ldr	r3, [r4, #12]
 800133c:	2b01      	cmp	r3, #1
 800133e:	d001      	beq.n	8001344 <HAL_RCC_OscConfig+0x130>
        return HAL_ERROR;
 8001340:	2001      	movs	r0, #1
 8001342:	e12a      	b.n	800159a <HAL_RCC_OscConfig+0x386>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001344:	4a60      	ldr	r2, [pc, #384]	; (80014c8 <HAL_RCC_OscConfig+0x2b4>)
 8001346:	6813      	ldr	r3, [r2, #0]
 8001348:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800134c:	6921      	ldr	r1, [r4, #16]
 800134e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001352:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001354:	6823      	ldr	r3, [r4, #0]
 8001356:	f013 0f08 	tst.w	r3, #8
 800135a:	d040      	beq.n	80013de <HAL_RCC_OscConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800135c:	6963      	ldr	r3, [r4, #20]
 800135e:	b363      	cbz	r3, 80013ba <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001360:	2201      	movs	r2, #1
 8001362:	4b5b      	ldr	r3, [pc, #364]	; (80014d0 <HAL_RCC_OscConfig+0x2bc>)
 8001364:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001366:	f7ff f8f9 	bl	800055c <HAL_GetTick>
 800136a:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800136c:	4b56      	ldr	r3, [pc, #344]	; (80014c8 <HAL_RCC_OscConfig+0x2b4>)
 800136e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001370:	f013 0f02 	tst.w	r3, #2
 8001374:	d133      	bne.n	80013de <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001376:	f7ff f8f1 	bl	800055c <HAL_GetTick>
 800137a:	1b40      	subs	r0, r0, r5
 800137c:	2802      	cmp	r0, #2
 800137e:	d9f5      	bls.n	800136c <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 8001380:	2003      	movs	r0, #3
 8001382:	e10a      	b.n	800159a <HAL_RCC_OscConfig+0x386>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001384:	4a50      	ldr	r2, [pc, #320]	; (80014c8 <HAL_RCC_OscConfig+0x2b4>)
 8001386:	6813      	ldr	r3, [r2, #0]
 8001388:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800138c:	6921      	ldr	r1, [r4, #16]
 800138e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001392:	6013      	str	r3, [r2, #0]
 8001394:	e7de      	b.n	8001354 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 8001396:	2200      	movs	r2, #0
 8001398:	4b4c      	ldr	r3, [pc, #304]	; (80014cc <HAL_RCC_OscConfig+0x2b8>)
 800139a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800139c:	f7ff f8de 	bl	800055c <HAL_GetTick>
 80013a0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013a2:	4b49      	ldr	r3, [pc, #292]	; (80014c8 <HAL_RCC_OscConfig+0x2b4>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f013 0f02 	tst.w	r3, #2
 80013aa:	d0d3      	beq.n	8001354 <HAL_RCC_OscConfig+0x140>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013ac:	f7ff f8d6 	bl	800055c <HAL_GetTick>
 80013b0:	1b40      	subs	r0, r0, r5
 80013b2:	2802      	cmp	r0, #2
 80013b4:	d9f5      	bls.n	80013a2 <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 80013b6:	2003      	movs	r0, #3
 80013b8:	e0ef      	b.n	800159a <HAL_RCC_OscConfig+0x386>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013ba:	2200      	movs	r2, #0
 80013bc:	4b44      	ldr	r3, [pc, #272]	; (80014d0 <HAL_RCC_OscConfig+0x2bc>)
 80013be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013c0:	f7ff f8cc 	bl	800055c <HAL_GetTick>
 80013c4:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013c6:	4b40      	ldr	r3, [pc, #256]	; (80014c8 <HAL_RCC_OscConfig+0x2b4>)
 80013c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013ca:	f013 0f02 	tst.w	r3, #2
 80013ce:	d006      	beq.n	80013de <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013d0:	f7ff f8c4 	bl	800055c <HAL_GetTick>
 80013d4:	1b40      	subs	r0, r0, r5
 80013d6:	2802      	cmp	r0, #2
 80013d8:	d9f5      	bls.n	80013c6 <HAL_RCC_OscConfig+0x1b2>
        {
          return HAL_TIMEOUT;
 80013da:	2003      	movs	r0, #3
 80013dc:	e0dd      	b.n	800159a <HAL_RCC_OscConfig+0x386>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013de:	6823      	ldr	r3, [r4, #0]
 80013e0:	f013 0f04 	tst.w	r3, #4
 80013e4:	d079      	beq.n	80014da <HAL_RCC_OscConfig+0x2c6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013e6:	4b38      	ldr	r3, [pc, #224]	; (80014c8 <HAL_RCC_OscConfig+0x2b4>)
 80013e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ea:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80013ee:	d133      	bne.n	8001458 <HAL_RCC_OscConfig+0x244>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013f0:	2300      	movs	r3, #0
 80013f2:	9301      	str	r3, [sp, #4]
 80013f4:	4b34      	ldr	r3, [pc, #208]	; (80014c8 <HAL_RCC_OscConfig+0x2b4>)
 80013f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013f8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80013fc:	641a      	str	r2, [r3, #64]	; 0x40
 80013fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001400:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001404:	9301      	str	r3, [sp, #4]
 8001406:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001408:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800140a:	4b32      	ldr	r3, [pc, #200]	; (80014d4 <HAL_RCC_OscConfig+0x2c0>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001412:	d023      	beq.n	800145c <HAL_RCC_OscConfig+0x248>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001414:	68a3      	ldr	r3, [r4, #8]
 8001416:	2b01      	cmp	r3, #1
 8001418:	d034      	beq.n	8001484 <HAL_RCC_OscConfig+0x270>
 800141a:	2b05      	cmp	r3, #5
 800141c:	d038      	beq.n	8001490 <HAL_RCC_OscConfig+0x27c>
 800141e:	4b2a      	ldr	r3, [pc, #168]	; (80014c8 <HAL_RCC_OscConfig+0x2b4>)
 8001420:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001422:	f022 0201 	bic.w	r2, r2, #1
 8001426:	671a      	str	r2, [r3, #112]	; 0x70
 8001428:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800142a:	f022 0204 	bic.w	r2, r2, #4
 800142e:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001430:	68a3      	ldr	r3, [r4, #8]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d036      	beq.n	80014a4 <HAL_RCC_OscConfig+0x290>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001436:	f7ff f891 	bl	800055c <HAL_GetTick>
 800143a:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800143c:	4b22      	ldr	r3, [pc, #136]	; (80014c8 <HAL_RCC_OscConfig+0x2b4>)
 800143e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001440:	f013 0f02 	tst.w	r3, #2
 8001444:	d148      	bne.n	80014d8 <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001446:	f7ff f889 	bl	800055c <HAL_GetTick>
 800144a:	1b80      	subs	r0, r0, r6
 800144c:	f241 3388 	movw	r3, #5000	; 0x1388
 8001450:	4298      	cmp	r0, r3
 8001452:	d9f3      	bls.n	800143c <HAL_RCC_OscConfig+0x228>
        {
          return HAL_TIMEOUT;
 8001454:	2003      	movs	r0, #3
 8001456:	e0a0      	b.n	800159a <HAL_RCC_OscConfig+0x386>
    FlagStatus       pwrclkchanged = RESET;
 8001458:	2500      	movs	r5, #0
 800145a:	e7d6      	b.n	800140a <HAL_RCC_OscConfig+0x1f6>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800145c:	4a1d      	ldr	r2, [pc, #116]	; (80014d4 <HAL_RCC_OscConfig+0x2c0>)
 800145e:	6813      	ldr	r3, [r2, #0]
 8001460:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001464:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001466:	f7ff f879 	bl	800055c <HAL_GetTick>
 800146a:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800146c:	4b19      	ldr	r3, [pc, #100]	; (80014d4 <HAL_RCC_OscConfig+0x2c0>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001474:	d1ce      	bne.n	8001414 <HAL_RCC_OscConfig+0x200>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001476:	f7ff f871 	bl	800055c <HAL_GetTick>
 800147a:	1b80      	subs	r0, r0, r6
 800147c:	2802      	cmp	r0, #2
 800147e:	d9f5      	bls.n	800146c <HAL_RCC_OscConfig+0x258>
          return HAL_TIMEOUT;
 8001480:	2003      	movs	r0, #3
 8001482:	e08a      	b.n	800159a <HAL_RCC_OscConfig+0x386>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001484:	4a10      	ldr	r2, [pc, #64]	; (80014c8 <HAL_RCC_OscConfig+0x2b4>)
 8001486:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8001488:	f043 0301 	orr.w	r3, r3, #1
 800148c:	6713      	str	r3, [r2, #112]	; 0x70
 800148e:	e7cf      	b.n	8001430 <HAL_RCC_OscConfig+0x21c>
 8001490:	4b0d      	ldr	r3, [pc, #52]	; (80014c8 <HAL_RCC_OscConfig+0x2b4>)
 8001492:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001494:	f042 0204 	orr.w	r2, r2, #4
 8001498:	671a      	str	r2, [r3, #112]	; 0x70
 800149a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800149c:	f042 0201 	orr.w	r2, r2, #1
 80014a0:	671a      	str	r2, [r3, #112]	; 0x70
 80014a2:	e7c5      	b.n	8001430 <HAL_RCC_OscConfig+0x21c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014a4:	f7ff f85a 	bl	800055c <HAL_GetTick>
 80014a8:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014aa:	4b07      	ldr	r3, [pc, #28]	; (80014c8 <HAL_RCC_OscConfig+0x2b4>)
 80014ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014ae:	f013 0f02 	tst.w	r3, #2
 80014b2:	d011      	beq.n	80014d8 <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014b4:	f7ff f852 	bl	800055c <HAL_GetTick>
 80014b8:	1b80      	subs	r0, r0, r6
 80014ba:	f241 3388 	movw	r3, #5000	; 0x1388
 80014be:	4298      	cmp	r0, r3
 80014c0:	d9f3      	bls.n	80014aa <HAL_RCC_OscConfig+0x296>
        {
          return HAL_TIMEOUT;
 80014c2:	2003      	movs	r0, #3
 80014c4:	e069      	b.n	800159a <HAL_RCC_OscConfig+0x386>
 80014c6:	bf00      	nop
 80014c8:	40023800 	.word	0x40023800
 80014cc:	42470000 	.word	0x42470000
 80014d0:	42470e80 	.word	0x42470e80
 80014d4:	40007000 	.word	0x40007000
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80014d8:	b9e5      	cbnz	r5, 8001514 <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014da:	69a3      	ldr	r3, [r4, #24]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d05b      	beq.n	8001598 <HAL_RCC_OscConfig+0x384>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80014e0:	4a30      	ldr	r2, [pc, #192]	; (80015a4 <HAL_RCC_OscConfig+0x390>)
 80014e2:	6892      	ldr	r2, [r2, #8]
 80014e4:	f002 020c 	and.w	r2, r2, #12
 80014e8:	2a08      	cmp	r2, #8
 80014ea:	d058      	beq.n	800159e <HAL_RCC_OscConfig+0x38a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014ec:	2b02      	cmp	r3, #2
 80014ee:	d017      	beq.n	8001520 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014f0:	2200      	movs	r2, #0
 80014f2:	4b2d      	ldr	r3, [pc, #180]	; (80015a8 <HAL_RCC_OscConfig+0x394>)
 80014f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014f6:	f7ff f831 	bl	800055c <HAL_GetTick>
 80014fa:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014fc:	4b29      	ldr	r3, [pc, #164]	; (80015a4 <HAL_RCC_OscConfig+0x390>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001504:	d042      	beq.n	800158c <HAL_RCC_OscConfig+0x378>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001506:	f7ff f829 	bl	800055c <HAL_GetTick>
 800150a:	1b00      	subs	r0, r0, r4
 800150c:	2802      	cmp	r0, #2
 800150e:	d9f5      	bls.n	80014fc <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001510:	2003      	movs	r0, #3
 8001512:	e042      	b.n	800159a <HAL_RCC_OscConfig+0x386>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001514:	4a23      	ldr	r2, [pc, #140]	; (80015a4 <HAL_RCC_OscConfig+0x390>)
 8001516:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001518:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800151c:	6413      	str	r3, [r2, #64]	; 0x40
 800151e:	e7dc      	b.n	80014da <HAL_RCC_OscConfig+0x2c6>
        __HAL_RCC_PLL_DISABLE();
 8001520:	2200      	movs	r2, #0
 8001522:	4b21      	ldr	r3, [pc, #132]	; (80015a8 <HAL_RCC_OscConfig+0x394>)
 8001524:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001526:	f7ff f819 	bl	800055c <HAL_GetTick>
 800152a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800152c:	4b1d      	ldr	r3, [pc, #116]	; (80015a4 <HAL_RCC_OscConfig+0x390>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001534:	d006      	beq.n	8001544 <HAL_RCC_OscConfig+0x330>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001536:	f7ff f811 	bl	800055c <HAL_GetTick>
 800153a:	1b40      	subs	r0, r0, r5
 800153c:	2802      	cmp	r0, #2
 800153e:	d9f5      	bls.n	800152c <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 8001540:	2003      	movs	r0, #3
 8001542:	e02a      	b.n	800159a <HAL_RCC_OscConfig+0x386>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001544:	69e3      	ldr	r3, [r4, #28]
 8001546:	6a22      	ldr	r2, [r4, #32]
 8001548:	4313      	orrs	r3, r2
 800154a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800154c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001550:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001552:	0852      	lsrs	r2, r2, #1
 8001554:	3a01      	subs	r2, #1
 8001556:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800155a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800155c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001560:	4a10      	ldr	r2, [pc, #64]	; (80015a4 <HAL_RCC_OscConfig+0x390>)
 8001562:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8001564:	2201      	movs	r2, #1
 8001566:	4b10      	ldr	r3, [pc, #64]	; (80015a8 <HAL_RCC_OscConfig+0x394>)
 8001568:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800156a:	f7fe fff7 	bl	800055c <HAL_GetTick>
 800156e:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001570:	4b0c      	ldr	r3, [pc, #48]	; (80015a4 <HAL_RCC_OscConfig+0x390>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001578:	d106      	bne.n	8001588 <HAL_RCC_OscConfig+0x374>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800157a:	f7fe ffef 	bl	800055c <HAL_GetTick>
 800157e:	1b00      	subs	r0, r0, r4
 8001580:	2802      	cmp	r0, #2
 8001582:	d9f5      	bls.n	8001570 <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 8001584:	2003      	movs	r0, #3
 8001586:	e008      	b.n	800159a <HAL_RCC_OscConfig+0x386>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8001588:	2000      	movs	r0, #0
 800158a:	e006      	b.n	800159a <HAL_RCC_OscConfig+0x386>
 800158c:	2000      	movs	r0, #0
 800158e:	e004      	b.n	800159a <HAL_RCC_OscConfig+0x386>
    return HAL_ERROR;
 8001590:	2001      	movs	r0, #1
 8001592:	4770      	bx	lr
        return HAL_ERROR;
 8001594:	2001      	movs	r0, #1
 8001596:	e000      	b.n	800159a <HAL_RCC_OscConfig+0x386>
  return HAL_OK;
 8001598:	2000      	movs	r0, #0
}
 800159a:	b002      	add	sp, #8
 800159c:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800159e:	2001      	movs	r0, #1
 80015a0:	e7fb      	b.n	800159a <HAL_RCC_OscConfig+0x386>
 80015a2:	bf00      	nop
 80015a4:	40023800 	.word	0x40023800
 80015a8:	42470060 	.word	0x42470060

080015ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80015ae:	4b31      	ldr	r3, [pc, #196]	; (8001674 <HAL_RCC_GetSysClockFreq+0xc8>)
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	f003 030c 	and.w	r3, r3, #12
 80015b6:	2b04      	cmp	r3, #4
 80015b8:	d059      	beq.n	800166e <HAL_RCC_GetSysClockFreq+0xc2>
 80015ba:	2b08      	cmp	r3, #8
 80015bc:	d001      	beq.n	80015c2 <HAL_RCC_GetSysClockFreq+0x16>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80015be:	482e      	ldr	r0, [pc, #184]	; (8001678 <HAL_RCC_GetSysClockFreq+0xcc>)
 80015c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015c2:	4b2c      	ldr	r3, [pc, #176]	; (8001674 <HAL_RCC_GetSysClockFreq+0xc8>)
 80015c4:	685a      	ldr	r2, [r3, #4]
 80015c6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80015d0:	d02a      	beq.n	8001628 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015d2:	4b28      	ldr	r3, [pc, #160]	; (8001674 <HAL_RCC_GetSysClockFreq+0xc8>)
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	f3c3 1388 	ubfx	r3, r3, #6, #9
 80015da:	461e      	mov	r6, r3
 80015dc:	2700      	movs	r7, #0
 80015de:	015c      	lsls	r4, r3, #5
 80015e0:	2500      	movs	r5, #0
 80015e2:	1ae4      	subs	r4, r4, r3
 80015e4:	eb65 0507 	sbc.w	r5, r5, r7
 80015e8:	01a9      	lsls	r1, r5, #6
 80015ea:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 80015ee:	01a0      	lsls	r0, r4, #6
 80015f0:	1b00      	subs	r0, r0, r4
 80015f2:	eb61 0105 	sbc.w	r1, r1, r5
 80015f6:	00cb      	lsls	r3, r1, #3
 80015f8:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80015fc:	00c4      	lsls	r4, r0, #3
 80015fe:	19a0      	adds	r0, r4, r6
 8001600:	eb43 0107 	adc.w	r1, r3, r7
 8001604:	024b      	lsls	r3, r1, #9
 8001606:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 800160a:	0244      	lsls	r4, r0, #9
 800160c:	4620      	mov	r0, r4
 800160e:	4619      	mov	r1, r3
 8001610:	2300      	movs	r3, #0
 8001612:	f7fe fdf5 	bl	8000200 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001616:	4b17      	ldr	r3, [pc, #92]	; (8001674 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800161e:	3301      	adds	r3, #1
 8001620:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8001622:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8001626:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001628:	4b12      	ldr	r3, [pc, #72]	; (8001674 <HAL_RCC_GetSysClockFreq+0xc8>)
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8001630:	461e      	mov	r6, r3
 8001632:	2700      	movs	r7, #0
 8001634:	015c      	lsls	r4, r3, #5
 8001636:	2500      	movs	r5, #0
 8001638:	1ae4      	subs	r4, r4, r3
 800163a:	eb65 0507 	sbc.w	r5, r5, r7
 800163e:	01a9      	lsls	r1, r5, #6
 8001640:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8001644:	01a0      	lsls	r0, r4, #6
 8001646:	1b00      	subs	r0, r0, r4
 8001648:	eb61 0105 	sbc.w	r1, r1, r5
 800164c:	00cb      	lsls	r3, r1, #3
 800164e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001652:	00c4      	lsls	r4, r0, #3
 8001654:	19a0      	adds	r0, r4, r6
 8001656:	eb43 0107 	adc.w	r1, r3, r7
 800165a:	028b      	lsls	r3, r1, #10
 800165c:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8001660:	0284      	lsls	r4, r0, #10
 8001662:	4620      	mov	r0, r4
 8001664:	4619      	mov	r1, r3
 8001666:	2300      	movs	r3, #0
 8001668:	f7fe fdca 	bl	8000200 <__aeabi_uldivmod>
 800166c:	e7d3      	b.n	8001616 <HAL_RCC_GetSysClockFreq+0x6a>
      sysclockfreq = HSE_VALUE;
 800166e:	4803      	ldr	r0, [pc, #12]	; (800167c <HAL_RCC_GetSysClockFreq+0xd0>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001670:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001672:	bf00      	nop
 8001674:	40023800 	.word	0x40023800
 8001678:	00f42400 	.word	0x00f42400
 800167c:	007a1200 	.word	0x007a1200

08001680 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8001680:	2800      	cmp	r0, #0
 8001682:	f000 809d 	beq.w	80017c0 <HAL_RCC_ClockConfig+0x140>
{
 8001686:	b570      	push	{r4, r5, r6, lr}
 8001688:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800168a:	4b4f      	ldr	r3, [pc, #316]	; (80017c8 <HAL_RCC_ClockConfig+0x148>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 030f 	and.w	r3, r3, #15
 8001692:	428b      	cmp	r3, r1
 8001694:	d209      	bcs.n	80016aa <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001696:	b2cb      	uxtb	r3, r1
 8001698:	4a4b      	ldr	r2, [pc, #300]	; (80017c8 <HAL_RCC_ClockConfig+0x148>)
 800169a:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800169c:	6813      	ldr	r3, [r2, #0]
 800169e:	f003 030f 	and.w	r3, r3, #15
 80016a2:	4299      	cmp	r1, r3
 80016a4:	d001      	beq.n	80016aa <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
 80016a6:	2001      	movs	r0, #1
 80016a8:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016aa:	6823      	ldr	r3, [r4, #0]
 80016ac:	f013 0f02 	tst.w	r3, #2
 80016b0:	d017      	beq.n	80016e2 <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016b2:	f013 0f04 	tst.w	r3, #4
 80016b6:	d004      	beq.n	80016c2 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016b8:	4a44      	ldr	r2, [pc, #272]	; (80017cc <HAL_RCC_ClockConfig+0x14c>)
 80016ba:	6893      	ldr	r3, [r2, #8]
 80016bc:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80016c0:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016c2:	6823      	ldr	r3, [r4, #0]
 80016c4:	f013 0f08 	tst.w	r3, #8
 80016c8:	d004      	beq.n	80016d4 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016ca:	4a40      	ldr	r2, [pc, #256]	; (80017cc <HAL_RCC_ClockConfig+0x14c>)
 80016cc:	6893      	ldr	r3, [r2, #8]
 80016ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80016d2:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016d4:	4a3d      	ldr	r2, [pc, #244]	; (80017cc <HAL_RCC_ClockConfig+0x14c>)
 80016d6:	6893      	ldr	r3, [r2, #8]
 80016d8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80016dc:	68a0      	ldr	r0, [r4, #8]
 80016de:	4303      	orrs	r3, r0
 80016e0:	6093      	str	r3, [r2, #8]
 80016e2:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016e4:	6823      	ldr	r3, [r4, #0]
 80016e6:	f013 0f01 	tst.w	r3, #1
 80016ea:	d032      	beq.n	8001752 <HAL_RCC_ClockConfig+0xd2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016ec:	6863      	ldr	r3, [r4, #4]
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	d021      	beq.n	8001736 <HAL_RCC_ClockConfig+0xb6>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016f2:	1e9a      	subs	r2, r3, #2
 80016f4:	2a01      	cmp	r2, #1
 80016f6:	d925      	bls.n	8001744 <HAL_RCC_ClockConfig+0xc4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016f8:	4a34      	ldr	r2, [pc, #208]	; (80017cc <HAL_RCC_ClockConfig+0x14c>)
 80016fa:	6812      	ldr	r2, [r2, #0]
 80016fc:	f012 0f02 	tst.w	r2, #2
 8001700:	d060      	beq.n	80017c4 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001702:	4932      	ldr	r1, [pc, #200]	; (80017cc <HAL_RCC_ClockConfig+0x14c>)
 8001704:	688a      	ldr	r2, [r1, #8]
 8001706:	f022 0203 	bic.w	r2, r2, #3
 800170a:	4313      	orrs	r3, r2
 800170c:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 800170e:	f7fe ff25 	bl	800055c <HAL_GetTick>
 8001712:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001714:	4b2d      	ldr	r3, [pc, #180]	; (80017cc <HAL_RCC_ClockConfig+0x14c>)
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	f003 030c 	and.w	r3, r3, #12
 800171c:	6862      	ldr	r2, [r4, #4]
 800171e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001722:	d016      	beq.n	8001752 <HAL_RCC_ClockConfig+0xd2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001724:	f7fe ff1a 	bl	800055c <HAL_GetTick>
 8001728:	1b80      	subs	r0, r0, r6
 800172a:	f241 3388 	movw	r3, #5000	; 0x1388
 800172e:	4298      	cmp	r0, r3
 8001730:	d9f0      	bls.n	8001714 <HAL_RCC_ClockConfig+0x94>
        return HAL_TIMEOUT;
 8001732:	2003      	movs	r0, #3
 8001734:	bd70      	pop	{r4, r5, r6, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001736:	4a25      	ldr	r2, [pc, #148]	; (80017cc <HAL_RCC_ClockConfig+0x14c>)
 8001738:	6812      	ldr	r2, [r2, #0]
 800173a:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800173e:	d1e0      	bne.n	8001702 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8001740:	2001      	movs	r0, #1
 8001742:	bd70      	pop	{r4, r5, r6, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001744:	4a21      	ldr	r2, [pc, #132]	; (80017cc <HAL_RCC_ClockConfig+0x14c>)
 8001746:	6812      	ldr	r2, [r2, #0]
 8001748:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800174c:	d1d9      	bne.n	8001702 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 800174e:	2001      	movs	r0, #1
 8001750:	bd70      	pop	{r4, r5, r6, pc}
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001752:	4b1d      	ldr	r3, [pc, #116]	; (80017c8 <HAL_RCC_ClockConfig+0x148>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 030f 	and.w	r3, r3, #15
 800175a:	429d      	cmp	r5, r3
 800175c:	d209      	bcs.n	8001772 <HAL_RCC_ClockConfig+0xf2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800175e:	b2ea      	uxtb	r2, r5
 8001760:	4b19      	ldr	r3, [pc, #100]	; (80017c8 <HAL_RCC_ClockConfig+0x148>)
 8001762:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f003 030f 	and.w	r3, r3, #15
 800176a:	429d      	cmp	r5, r3
 800176c:	d001      	beq.n	8001772 <HAL_RCC_ClockConfig+0xf2>
      return HAL_ERROR;
 800176e:	2001      	movs	r0, #1
}
 8001770:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001772:	6823      	ldr	r3, [r4, #0]
 8001774:	f013 0f04 	tst.w	r3, #4
 8001778:	d006      	beq.n	8001788 <HAL_RCC_ClockConfig+0x108>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800177a:	4a14      	ldr	r2, [pc, #80]	; (80017cc <HAL_RCC_ClockConfig+0x14c>)
 800177c:	6893      	ldr	r3, [r2, #8]
 800177e:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001782:	68e1      	ldr	r1, [r4, #12]
 8001784:	430b      	orrs	r3, r1
 8001786:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001788:	6823      	ldr	r3, [r4, #0]
 800178a:	f013 0f08 	tst.w	r3, #8
 800178e:	d007      	beq.n	80017a0 <HAL_RCC_ClockConfig+0x120>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001790:	4a0e      	ldr	r2, [pc, #56]	; (80017cc <HAL_RCC_ClockConfig+0x14c>)
 8001792:	6893      	ldr	r3, [r2, #8]
 8001794:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001798:	6921      	ldr	r1, [r4, #16]
 800179a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800179e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80017a0:	f7ff ff04 	bl	80015ac <HAL_RCC_GetSysClockFreq>
 80017a4:	4b09      	ldr	r3, [pc, #36]	; (80017cc <HAL_RCC_ClockConfig+0x14c>)
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80017ac:	4a08      	ldr	r2, [pc, #32]	; (80017d0 <HAL_RCC_ClockConfig+0x150>)
 80017ae:	5cd3      	ldrb	r3, [r2, r3]
 80017b0:	40d8      	lsrs	r0, r3
 80017b2:	4b08      	ldr	r3, [pc, #32]	; (80017d4 <HAL_RCC_ClockConfig+0x154>)
 80017b4:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80017b6:	2000      	movs	r0, #0
 80017b8:	f00b fdac 	bl	800d314 <HAL_InitTick>
  return HAL_OK;
 80017bc:	2000      	movs	r0, #0
 80017be:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80017c0:	2001      	movs	r0, #1
 80017c2:	4770      	bx	lr
        return HAL_ERROR;
 80017c4:	2001      	movs	r0, #1
 80017c6:	bd70      	pop	{r4, r5, r6, pc}
 80017c8:	40023c00 	.word	0x40023c00
 80017cc:	40023800 	.word	0x40023800
 80017d0:	08010090 	.word	0x08010090
 80017d4:	20000014 	.word	0x20000014

080017d8 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80017d8:	4b01      	ldr	r3, [pc, #4]	; (80017e0 <HAL_RCC_GetHCLKFreq+0x8>)
 80017da:	6818      	ldr	r0, [r3, #0]
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	20000014 	.word	0x20000014

080017e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80017e4:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80017e6:	f7ff fff7 	bl	80017d8 <HAL_RCC_GetHCLKFreq>
 80017ea:	4b04      	ldr	r3, [pc, #16]	; (80017fc <HAL_RCC_GetPCLK1Freq+0x18>)
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80017f2:	4a03      	ldr	r2, [pc, #12]	; (8001800 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80017f4:	5cd3      	ldrb	r3, [r2, r3]
}
 80017f6:	40d8      	lsrs	r0, r3
 80017f8:	bd08      	pop	{r3, pc}
 80017fa:	bf00      	nop
 80017fc:	40023800 	.word	0x40023800
 8001800:	080100a0 	.word	0x080100a0

08001804 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001804:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001806:	f7ff ffe7 	bl	80017d8 <HAL_RCC_GetHCLKFreq>
 800180a:	4b04      	ldr	r3, [pc, #16]	; (800181c <HAL_RCC_GetPCLK2Freq+0x18>)
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001812:	4a03      	ldr	r2, [pc, #12]	; (8001820 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001814:	5cd3      	ldrb	r3, [r2, r3]
}
 8001816:	40d8      	lsrs	r0, r3
 8001818:	bd08      	pop	{r3, pc}
 800181a:	bf00      	nop
 800181c:	40023800 	.word	0x40023800
 8001820:	080100a0 	.word	0x080100a0

08001824 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001824:	230f      	movs	r3, #15
 8001826:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001828:	4b0b      	ldr	r3, [pc, #44]	; (8001858 <HAL_RCC_GetClockConfig+0x34>)
 800182a:	689a      	ldr	r2, [r3, #8]
 800182c:	f002 0203 	and.w	r2, r2, #3
 8001830:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001832:	689a      	ldr	r2, [r3, #8]
 8001834:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8001838:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800183a:	689a      	ldr	r2, [r3, #8]
 800183c:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8001840:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	08db      	lsrs	r3, r3, #3
 8001846:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800184a:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800184c:	4b03      	ldr	r3, [pc, #12]	; (800185c <HAL_RCC_GetClockConfig+0x38>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f003 030f 	and.w	r3, r3, #15
 8001854:	600b      	str	r3, [r1, #0]
 8001856:	4770      	bx	lr
 8001858:	40023800 	.word	0x40023800
 800185c:	40023c00 	.word	0x40023c00

08001860 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001860:	4770      	bx	lr

08001862 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001862:	6802      	ldr	r2, [r0, #0]
 8001864:	68d3      	ldr	r3, [r2, #12]
 8001866:	f043 0301 	orr.w	r3, r3, #1
 800186a:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800186c:	6802      	ldr	r2, [r0, #0]
 800186e:	6893      	ldr	r3, [r2, #8]
 8001870:	f003 0307 	and.w	r3, r3, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001874:	2b06      	cmp	r3, #6
 8001876:	d003      	beq.n	8001880 <HAL_TIM_Base_Start_IT+0x1e>
  {
    __HAL_TIM_ENABLE(htim);
 8001878:	6813      	ldr	r3, [r2, #0]
 800187a:	f043 0301 	orr.w	r3, r3, #1
 800187e:	6013      	str	r3, [r2, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 8001880:	2000      	movs	r0, #0
 8001882:	4770      	bx	lr

08001884 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001884:	4770      	bx	lr

08001886 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001886:	4770      	bx	lr

08001888 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001888:	4770      	bx	lr

0800188a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800188a:	4770      	bx	lr

0800188c <HAL_TIM_IRQHandler>:
{
 800188c:	b510      	push	{r4, lr}
 800188e:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001890:	6803      	ldr	r3, [r0, #0]
 8001892:	691a      	ldr	r2, [r3, #16]
 8001894:	f012 0f02 	tst.w	r2, #2
 8001898:	d011      	beq.n	80018be <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800189a:	68da      	ldr	r2, [r3, #12]
 800189c:	f012 0f02 	tst.w	r2, #2
 80018a0:	d00d      	beq.n	80018be <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80018a2:	f06f 0202 	mvn.w	r2, #2
 80018a6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80018a8:	2301      	movs	r3, #1
 80018aa:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80018ac:	6803      	ldr	r3, [r0, #0]
 80018ae:	699b      	ldr	r3, [r3, #24]
 80018b0:	f013 0f03 	tst.w	r3, #3
 80018b4:	d070      	beq.n	8001998 <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 80018b6:	f7ff ffe6 	bl	8001886 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018ba:	2300      	movs	r3, #0
 80018bc:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80018be:	6823      	ldr	r3, [r4, #0]
 80018c0:	691a      	ldr	r2, [r3, #16]
 80018c2:	f012 0f04 	tst.w	r2, #4
 80018c6:	d012      	beq.n	80018ee <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80018c8:	68da      	ldr	r2, [r3, #12]
 80018ca:	f012 0f04 	tst.w	r2, #4
 80018ce:	d00e      	beq.n	80018ee <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80018d0:	f06f 0204 	mvn.w	r2, #4
 80018d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80018d6:	2302      	movs	r3, #2
 80018d8:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80018da:	6823      	ldr	r3, [r4, #0]
 80018dc:	699b      	ldr	r3, [r3, #24]
 80018de:	f413 7f40 	tst.w	r3, #768	; 0x300
 80018e2:	d05f      	beq.n	80019a4 <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 80018e4:	4620      	mov	r0, r4
 80018e6:	f7ff ffce 	bl	8001886 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018ea:	2300      	movs	r3, #0
 80018ec:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80018ee:	6823      	ldr	r3, [r4, #0]
 80018f0:	691a      	ldr	r2, [r3, #16]
 80018f2:	f012 0f08 	tst.w	r2, #8
 80018f6:	d012      	beq.n	800191e <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80018f8:	68da      	ldr	r2, [r3, #12]
 80018fa:	f012 0f08 	tst.w	r2, #8
 80018fe:	d00e      	beq.n	800191e <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001900:	f06f 0208 	mvn.w	r2, #8
 8001904:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001906:	2304      	movs	r3, #4
 8001908:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800190a:	6823      	ldr	r3, [r4, #0]
 800190c:	69db      	ldr	r3, [r3, #28]
 800190e:	f013 0f03 	tst.w	r3, #3
 8001912:	d04e      	beq.n	80019b2 <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 8001914:	4620      	mov	r0, r4
 8001916:	f7ff ffb6 	bl	8001886 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800191a:	2300      	movs	r3, #0
 800191c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800191e:	6823      	ldr	r3, [r4, #0]
 8001920:	691a      	ldr	r2, [r3, #16]
 8001922:	f012 0f10 	tst.w	r2, #16
 8001926:	d012      	beq.n	800194e <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001928:	68da      	ldr	r2, [r3, #12]
 800192a:	f012 0f10 	tst.w	r2, #16
 800192e:	d00e      	beq.n	800194e <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001930:	f06f 0210 	mvn.w	r2, #16
 8001934:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001936:	2308      	movs	r3, #8
 8001938:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800193a:	6823      	ldr	r3, [r4, #0]
 800193c:	69db      	ldr	r3, [r3, #28]
 800193e:	f413 7f40 	tst.w	r3, #768	; 0x300
 8001942:	d03d      	beq.n	80019c0 <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 8001944:	4620      	mov	r0, r4
 8001946:	f7ff ff9e 	bl	8001886 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800194a:	2300      	movs	r3, #0
 800194c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800194e:	6823      	ldr	r3, [r4, #0]
 8001950:	691a      	ldr	r2, [r3, #16]
 8001952:	f012 0f01 	tst.w	r2, #1
 8001956:	d003      	beq.n	8001960 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001958:	68da      	ldr	r2, [r3, #12]
 800195a:	f012 0f01 	tst.w	r2, #1
 800195e:	d136      	bne.n	80019ce <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001960:	6823      	ldr	r3, [r4, #0]
 8001962:	691a      	ldr	r2, [r3, #16]
 8001964:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001968:	d003      	beq.n	8001972 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800196a:	68da      	ldr	r2, [r3, #12]
 800196c:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001970:	d134      	bne.n	80019dc <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001972:	6823      	ldr	r3, [r4, #0]
 8001974:	691a      	ldr	r2, [r3, #16]
 8001976:	f012 0f40 	tst.w	r2, #64	; 0x40
 800197a:	d003      	beq.n	8001984 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800197c:	68da      	ldr	r2, [r3, #12]
 800197e:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001982:	d132      	bne.n	80019ea <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001984:	6823      	ldr	r3, [r4, #0]
 8001986:	691a      	ldr	r2, [r3, #16]
 8001988:	f012 0f20 	tst.w	r2, #32
 800198c:	d003      	beq.n	8001996 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800198e:	68da      	ldr	r2, [r3, #12]
 8001990:	f012 0f20 	tst.w	r2, #32
 8001994:	d130      	bne.n	80019f8 <HAL_TIM_IRQHandler+0x16c>
 8001996:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001998:	f7ff ff74 	bl	8001884 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800199c:	4620      	mov	r0, r4
 800199e:	f7ff ff73 	bl	8001888 <HAL_TIM_PWM_PulseFinishedCallback>
 80019a2:	e78a      	b.n	80018ba <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80019a4:	4620      	mov	r0, r4
 80019a6:	f7ff ff6d 	bl	8001884 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019aa:	4620      	mov	r0, r4
 80019ac:	f7ff ff6c 	bl	8001888 <HAL_TIM_PWM_PulseFinishedCallback>
 80019b0:	e79b      	b.n	80018ea <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80019b2:	4620      	mov	r0, r4
 80019b4:	f7ff ff66 	bl	8001884 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019b8:	4620      	mov	r0, r4
 80019ba:	f7ff ff65 	bl	8001888 <HAL_TIM_PWM_PulseFinishedCallback>
 80019be:	e7ac      	b.n	800191a <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80019c0:	4620      	mov	r0, r4
 80019c2:	f7ff ff5f 	bl	8001884 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019c6:	4620      	mov	r0, r4
 80019c8:	f7ff ff5e 	bl	8001888 <HAL_TIM_PWM_PulseFinishedCallback>
 80019cc:	e7bd      	b.n	800194a <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80019ce:	f06f 0201 	mvn.w	r2, #1
 80019d2:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80019d4:	4620      	mov	r0, r4
 80019d6:	f00b fbf5 	bl	800d1c4 <HAL_TIM_PeriodElapsedCallback>
 80019da:	e7c1      	b.n	8001960 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80019dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80019e0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80019e2:	4620      	mov	r0, r4
 80019e4:	f000 f890 	bl	8001b08 <HAL_TIMEx_BreakCallback>
 80019e8:	e7c3      	b.n	8001972 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80019ea:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80019ee:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80019f0:	4620      	mov	r0, r4
 80019f2:	f7ff ff4a 	bl	800188a <HAL_TIM_TriggerCallback>
 80019f6:	e7c5      	b.n	8001984 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80019f8:	f06f 0220 	mvn.w	r2, #32
 80019fc:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80019fe:	4620      	mov	r0, r4
 8001a00:	f000 f881 	bl	8001b06 <HAL_TIMEx_CommutCallback>
}
 8001a04:	e7c7      	b.n	8001996 <HAL_TIM_IRQHandler+0x10a>
	...

08001a08 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001a08:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001a0a:	4a31      	ldr	r2, [pc, #196]	; (8001ad0 <TIM_Base_SetConfig+0xc8>)
 8001a0c:	4290      	cmp	r0, r2
 8001a0e:	d012      	beq.n	8001a36 <TIM_Base_SetConfig+0x2e>
 8001a10:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001a14:	d00f      	beq.n	8001a36 <TIM_Base_SetConfig+0x2e>
 8001a16:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001a1a:	4290      	cmp	r0, r2
 8001a1c:	d00b      	beq.n	8001a36 <TIM_Base_SetConfig+0x2e>
 8001a1e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a22:	4290      	cmp	r0, r2
 8001a24:	d007      	beq.n	8001a36 <TIM_Base_SetConfig+0x2e>
 8001a26:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a2a:	4290      	cmp	r0, r2
 8001a2c:	d003      	beq.n	8001a36 <TIM_Base_SetConfig+0x2e>
 8001a2e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001a32:	4290      	cmp	r0, r2
 8001a34:	d103      	bne.n	8001a3e <TIM_Base_SetConfig+0x36>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001a36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001a3a:	684a      	ldr	r2, [r1, #4]
 8001a3c:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001a3e:	4a24      	ldr	r2, [pc, #144]	; (8001ad0 <TIM_Base_SetConfig+0xc8>)
 8001a40:	4290      	cmp	r0, r2
 8001a42:	d02a      	beq.n	8001a9a <TIM_Base_SetConfig+0x92>
 8001a44:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001a48:	d027      	beq.n	8001a9a <TIM_Base_SetConfig+0x92>
 8001a4a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001a4e:	4290      	cmp	r0, r2
 8001a50:	d023      	beq.n	8001a9a <TIM_Base_SetConfig+0x92>
 8001a52:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a56:	4290      	cmp	r0, r2
 8001a58:	d01f      	beq.n	8001a9a <TIM_Base_SetConfig+0x92>
 8001a5a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a5e:	4290      	cmp	r0, r2
 8001a60:	d01b      	beq.n	8001a9a <TIM_Base_SetConfig+0x92>
 8001a62:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001a66:	4290      	cmp	r0, r2
 8001a68:	d017      	beq.n	8001a9a <TIM_Base_SetConfig+0x92>
 8001a6a:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8001a6e:	4290      	cmp	r0, r2
 8001a70:	d013      	beq.n	8001a9a <TIM_Base_SetConfig+0x92>
 8001a72:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a76:	4290      	cmp	r0, r2
 8001a78:	d00f      	beq.n	8001a9a <TIM_Base_SetConfig+0x92>
 8001a7a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a7e:	4290      	cmp	r0, r2
 8001a80:	d00b      	beq.n	8001a9a <TIM_Base_SetConfig+0x92>
 8001a82:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8001a86:	4290      	cmp	r0, r2
 8001a88:	d007      	beq.n	8001a9a <TIM_Base_SetConfig+0x92>
 8001a8a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a8e:	4290      	cmp	r0, r2
 8001a90:	d003      	beq.n	8001a9a <TIM_Base_SetConfig+0x92>
 8001a92:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a96:	4290      	cmp	r0, r2
 8001a98:	d103      	bne.n	8001aa2 <TIM_Base_SetConfig+0x9a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001a9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001a9e:	68ca      	ldr	r2, [r1, #12]
 8001aa0:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001aa2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001aa6:	694a      	ldr	r2, [r1, #20]
 8001aa8:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8001aaa:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001aac:	688b      	ldr	r3, [r1, #8]
 8001aae:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001ab0:	680b      	ldr	r3, [r1, #0]
 8001ab2:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001ab4:	4b06      	ldr	r3, [pc, #24]	; (8001ad0 <TIM_Base_SetConfig+0xc8>)
 8001ab6:	4298      	cmp	r0, r3
 8001ab8:	d006      	beq.n	8001ac8 <TIM_Base_SetConfig+0xc0>
 8001aba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001abe:	4298      	cmp	r0, r3
 8001ac0:	d002      	beq.n	8001ac8 <TIM_Base_SetConfig+0xc0>
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	6143      	str	r3, [r0, #20]
 8001ac6:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8001ac8:	690b      	ldr	r3, [r1, #16]
 8001aca:	6303      	str	r3, [r0, #48]	; 0x30
 8001acc:	e7f9      	b.n	8001ac2 <TIM_Base_SetConfig+0xba>
 8001ace:	bf00      	nop
 8001ad0:	40010000 	.word	0x40010000

08001ad4 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8001ad4:	b1a8      	cbz	r0, 8001b02 <HAL_TIM_Base_Init+0x2e>
{
 8001ad6:	b510      	push	{r4, lr}
 8001ad8:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8001ada:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001ade:	b15b      	cbz	r3, 8001af8 <HAL_TIM_Base_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 8001ae0:	2302      	movs	r3, #2
 8001ae2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ae6:	1d21      	adds	r1, r4, #4
 8001ae8:	6820      	ldr	r0, [r4, #0]
 8001aea:	f7ff ff8d 	bl	8001a08 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8001aee:	2301      	movs	r3, #1
 8001af0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001af4:	2000      	movs	r0, #0
 8001af6:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8001af8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001afc:	f7ff feb0 	bl	8001860 <HAL_TIM_Base_MspInit>
 8001b00:	e7ee      	b.n	8001ae0 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8001b02:	2001      	movs	r0, #1
 8001b04:	4770      	bx	lr

08001b06 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001b06:	4770      	bx	lr

08001b08 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001b08:	4770      	bx	lr
	...

08001b0c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001b0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001b10:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001b12:	6802      	ldr	r2, [r0, #0]
 8001b14:	6913      	ldr	r3, [r2, #16]
 8001b16:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b1a:	68c1      	ldr	r1, [r0, #12]
 8001b1c:	430b      	orrs	r3, r1
 8001b1e:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001b20:	6883      	ldr	r3, [r0, #8]
 8001b22:	6902      	ldr	r2, [r0, #16]
 8001b24:	4313      	orrs	r3, r2
 8001b26:	6942      	ldr	r2, [r0, #20]
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	69c2      	ldr	r2, [r0, #28]
 8001b2c:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1,
 8001b2e:	6801      	ldr	r1, [r0, #0]
 8001b30:	68ca      	ldr	r2, [r1, #12]
 8001b32:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
 8001b36:	f022 020c 	bic.w	r2, r2, #12
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001b3e:	6802      	ldr	r2, [r0, #0]
 8001b40:	6953      	ldr	r3, [r2, #20]
 8001b42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b46:	6981      	ldr	r1, [r0, #24]
 8001b48:	430b      	orrs	r3, r1
 8001b4a:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001b4c:	69c3      	ldr	r3, [r0, #28]
 8001b4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b52:	d062      	beq.n	8001c1a <UART_SetConfig+0x10e>
  }
  else
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001b54:	f8d0 8000 	ldr.w	r8, [r0]
 8001b58:	4bbb      	ldr	r3, [pc, #748]	; (8001e48 <UART_SetConfig+0x33c>)
 8001b5a:	4598      	cmp	r8, r3
 8001b5c:	f000 811b 	beq.w	8001d96 <UART_SetConfig+0x28a>
 8001b60:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001b64:	4598      	cmp	r8, r3
 8001b66:	f000 8116 	beq.w	8001d96 <UART_SetConfig+0x28a>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001b6a:	f7ff fe3b 	bl	80017e4 <HAL_RCC_GetPCLK1Freq>
 8001b6e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001b72:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001b76:	6865      	ldr	r5, [r4, #4]
 8001b78:	00ad      	lsls	r5, r5, #2
 8001b7a:	fbb0 f5f5 	udiv	r5, r0, r5
 8001b7e:	4fb3      	ldr	r7, [pc, #716]	; (8001e4c <UART_SetConfig+0x340>)
 8001b80:	fba7 3505 	umull	r3, r5, r7, r5
 8001b84:	096d      	lsrs	r5, r5, #5
 8001b86:	012e      	lsls	r6, r5, #4
 8001b88:	f7ff fe2c 	bl	80017e4 <HAL_RCC_GetPCLK1Freq>
 8001b8c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001b90:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001b94:	6865      	ldr	r5, [r4, #4]
 8001b96:	00ad      	lsls	r5, r5, #2
 8001b98:	fbb0 faf5 	udiv	sl, r0, r5
 8001b9c:	f7ff fe22 	bl	80017e4 <HAL_RCC_GetPCLK1Freq>
 8001ba0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001ba4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001ba8:	6865      	ldr	r5, [r4, #4]
 8001baa:	00ad      	lsls	r5, r5, #2
 8001bac:	fbb0 f5f5 	udiv	r5, r0, r5
 8001bb0:	fba7 3505 	umull	r3, r5, r7, r5
 8001bb4:	096d      	lsrs	r5, r5, #5
 8001bb6:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001bba:	fb09 a515 	mls	r5, r9, r5, sl
 8001bbe:	012d      	lsls	r5, r5, #4
 8001bc0:	3532      	adds	r5, #50	; 0x32
 8001bc2:	fba7 3505 	umull	r3, r5, r7, r5
 8001bc6:	096d      	lsrs	r5, r5, #5
 8001bc8:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 8001bcc:	4435      	add	r5, r6
 8001bce:	f7ff fe09 	bl	80017e4 <HAL_RCC_GetPCLK1Freq>
 8001bd2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001bd6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001bda:	6866      	ldr	r6, [r4, #4]
 8001bdc:	00b6      	lsls	r6, r6, #2
 8001bde:	fbb0 f6f6 	udiv	r6, r0, r6
 8001be2:	f7ff fdff 	bl	80017e4 <HAL_RCC_GetPCLK1Freq>
 8001be6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001bea:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001bee:	6863      	ldr	r3, [r4, #4]
 8001bf0:	009b      	lsls	r3, r3, #2
 8001bf2:	fbb0 f0f3 	udiv	r0, r0, r3
 8001bf6:	fba7 3000 	umull	r3, r0, r7, r0
 8001bfa:	0940      	lsrs	r0, r0, #5
 8001bfc:	fb09 6910 	mls	r9, r9, r0, r6
 8001c00:	ea4f 1909 	mov.w	r9, r9, lsl #4
 8001c04:	f109 0932 	add.w	r9, r9, #50	; 0x32
 8001c08:	fba7 3709 	umull	r3, r7, r7, r9
 8001c0c:	f3c7 1743 	ubfx	r7, r7, #5, #4
 8001c10:	442f      	add	r7, r5
 8001c12:	f8c8 7008 	str.w	r7, [r8, #8]
 8001c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001c1a:	f8d0 8000 	ldr.w	r8, [r0]
 8001c1e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001c22:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
 8001c26:	4598      	cmp	r8, r3
 8001c28:	d05c      	beq.n	8001ce4 <UART_SetConfig+0x1d8>
 8001c2a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c2e:	4598      	cmp	r8, r3
 8001c30:	d058      	beq.n	8001ce4 <UART_SetConfig+0x1d8>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001c32:	f7ff fdd7 	bl	80017e4 <HAL_RCC_GetPCLK1Freq>
 8001c36:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001c3a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001c3e:	6865      	ldr	r5, [r4, #4]
 8001c40:	006d      	lsls	r5, r5, #1
 8001c42:	fbb0 f5f5 	udiv	r5, r0, r5
 8001c46:	4f81      	ldr	r7, [pc, #516]	; (8001e4c <UART_SetConfig+0x340>)
 8001c48:	fba7 3505 	umull	r3, r5, r7, r5
 8001c4c:	096d      	lsrs	r5, r5, #5
 8001c4e:	012e      	lsls	r6, r5, #4
 8001c50:	f7ff fdc8 	bl	80017e4 <HAL_RCC_GetPCLK1Freq>
 8001c54:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001c58:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001c5c:	6865      	ldr	r5, [r4, #4]
 8001c5e:	006d      	lsls	r5, r5, #1
 8001c60:	fbb0 faf5 	udiv	sl, r0, r5
 8001c64:	f7ff fdbe 	bl	80017e4 <HAL_RCC_GetPCLK1Freq>
 8001c68:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001c6c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001c70:	6865      	ldr	r5, [r4, #4]
 8001c72:	006d      	lsls	r5, r5, #1
 8001c74:	fbb0 f5f5 	udiv	r5, r0, r5
 8001c78:	fba7 3505 	umull	r3, r5, r7, r5
 8001c7c:	096d      	lsrs	r5, r5, #5
 8001c7e:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001c82:	fb09 a515 	mls	r5, r9, r5, sl
 8001c86:	00ed      	lsls	r5, r5, #3
 8001c88:	3532      	adds	r5, #50	; 0x32
 8001c8a:	fba7 3505 	umull	r3, r5, r7, r5
 8001c8e:	096d      	lsrs	r5, r5, #5
 8001c90:	006d      	lsls	r5, r5, #1
 8001c92:	f405 75f8 	and.w	r5, r5, #496	; 0x1f0
 8001c96:	4435      	add	r5, r6
 8001c98:	f7ff fda4 	bl	80017e4 <HAL_RCC_GetPCLK1Freq>
 8001c9c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001ca0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001ca4:	6866      	ldr	r6, [r4, #4]
 8001ca6:	0076      	lsls	r6, r6, #1
 8001ca8:	fbb0 f6f6 	udiv	r6, r0, r6
 8001cac:	f7ff fd9a 	bl	80017e4 <HAL_RCC_GetPCLK1Freq>
 8001cb0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001cb4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001cb8:	6863      	ldr	r3, [r4, #4]
 8001cba:	005b      	lsls	r3, r3, #1
 8001cbc:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cc0:	fba7 2303 	umull	r2, r3, r7, r3
 8001cc4:	095b      	lsrs	r3, r3, #5
 8001cc6:	fb09 6913 	mls	r9, r9, r3, r6
 8001cca:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 8001cce:	f109 0932 	add.w	r9, r9, #50	; 0x32
 8001cd2:	fba7 3709 	umull	r3, r7, r7, r9
 8001cd6:	f3c7 1742 	ubfx	r7, r7, #5, #3
 8001cda:	442f      	add	r7, r5
 8001cdc:	f8c8 7008 	str.w	r7, [r8, #8]
 8001ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001ce4:	f7ff fd8e 	bl	8001804 <HAL_RCC_GetPCLK2Freq>
 8001ce8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001cec:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001cf0:	6865      	ldr	r5, [r4, #4]
 8001cf2:	006d      	lsls	r5, r5, #1
 8001cf4:	fbb0 f5f5 	udiv	r5, r0, r5
 8001cf8:	4f54      	ldr	r7, [pc, #336]	; (8001e4c <UART_SetConfig+0x340>)
 8001cfa:	fba7 3505 	umull	r3, r5, r7, r5
 8001cfe:	096d      	lsrs	r5, r5, #5
 8001d00:	012e      	lsls	r6, r5, #4
 8001d02:	f7ff fd7f 	bl	8001804 <HAL_RCC_GetPCLK2Freq>
 8001d06:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001d0a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001d0e:	6865      	ldr	r5, [r4, #4]
 8001d10:	006d      	lsls	r5, r5, #1
 8001d12:	fbb0 faf5 	udiv	sl, r0, r5
 8001d16:	f7ff fd75 	bl	8001804 <HAL_RCC_GetPCLK2Freq>
 8001d1a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001d1e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001d22:	6865      	ldr	r5, [r4, #4]
 8001d24:	006d      	lsls	r5, r5, #1
 8001d26:	fbb0 f5f5 	udiv	r5, r0, r5
 8001d2a:	fba7 3505 	umull	r3, r5, r7, r5
 8001d2e:	096d      	lsrs	r5, r5, #5
 8001d30:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001d34:	fb09 a515 	mls	r5, r9, r5, sl
 8001d38:	00ed      	lsls	r5, r5, #3
 8001d3a:	3532      	adds	r5, #50	; 0x32
 8001d3c:	fba7 3505 	umull	r3, r5, r7, r5
 8001d40:	096d      	lsrs	r5, r5, #5
 8001d42:	006d      	lsls	r5, r5, #1
 8001d44:	f405 75f8 	and.w	r5, r5, #496	; 0x1f0
 8001d48:	4435      	add	r5, r6
 8001d4a:	f7ff fd5b 	bl	8001804 <HAL_RCC_GetPCLK2Freq>
 8001d4e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001d52:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001d56:	6866      	ldr	r6, [r4, #4]
 8001d58:	0076      	lsls	r6, r6, #1
 8001d5a:	fbb0 f6f6 	udiv	r6, r0, r6
 8001d5e:	f7ff fd51 	bl	8001804 <HAL_RCC_GetPCLK2Freq>
 8001d62:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001d66:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001d6a:	6863      	ldr	r3, [r4, #4]
 8001d6c:	005b      	lsls	r3, r3, #1
 8001d6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d72:	fba7 2303 	umull	r2, r3, r7, r3
 8001d76:	095b      	lsrs	r3, r3, #5
 8001d78:	fb09 6913 	mls	r9, r9, r3, r6
 8001d7c:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 8001d80:	f109 0932 	add.w	r9, r9, #50	; 0x32
 8001d84:	fba7 3709 	umull	r3, r7, r7, r9
 8001d88:	f3c7 1742 	ubfx	r7, r7, #5, #3
 8001d8c:	442f      	add	r7, r5
 8001d8e:	f8c8 7008 	str.w	r7, [r8, #8]
 8001d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001d96:	f7ff fd35 	bl	8001804 <HAL_RCC_GetPCLK2Freq>
 8001d9a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001d9e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001da2:	6865      	ldr	r5, [r4, #4]
 8001da4:	00ad      	lsls	r5, r5, #2
 8001da6:	fbb0 f5f5 	udiv	r5, r0, r5
 8001daa:	4f28      	ldr	r7, [pc, #160]	; (8001e4c <UART_SetConfig+0x340>)
 8001dac:	fba7 3505 	umull	r3, r5, r7, r5
 8001db0:	096d      	lsrs	r5, r5, #5
 8001db2:	012e      	lsls	r6, r5, #4
 8001db4:	f7ff fd26 	bl	8001804 <HAL_RCC_GetPCLK2Freq>
 8001db8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001dbc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001dc0:	6865      	ldr	r5, [r4, #4]
 8001dc2:	00ad      	lsls	r5, r5, #2
 8001dc4:	fbb0 faf5 	udiv	sl, r0, r5
 8001dc8:	f7ff fd1c 	bl	8001804 <HAL_RCC_GetPCLK2Freq>
 8001dcc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001dd0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001dd4:	6865      	ldr	r5, [r4, #4]
 8001dd6:	00ad      	lsls	r5, r5, #2
 8001dd8:	fbb0 f5f5 	udiv	r5, r0, r5
 8001ddc:	fba7 3505 	umull	r3, r5, r7, r5
 8001de0:	096d      	lsrs	r5, r5, #5
 8001de2:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001de6:	fb09 a515 	mls	r5, r9, r5, sl
 8001dea:	012d      	lsls	r5, r5, #4
 8001dec:	3532      	adds	r5, #50	; 0x32
 8001dee:	fba7 3505 	umull	r3, r5, r7, r5
 8001df2:	096d      	lsrs	r5, r5, #5
 8001df4:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 8001df8:	4435      	add	r5, r6
 8001dfa:	f7ff fd03 	bl	8001804 <HAL_RCC_GetPCLK2Freq>
 8001dfe:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001e02:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001e06:	6866      	ldr	r6, [r4, #4]
 8001e08:	00b6      	lsls	r6, r6, #2
 8001e0a:	fbb0 f6f6 	udiv	r6, r0, r6
 8001e0e:	f7ff fcf9 	bl	8001804 <HAL_RCC_GetPCLK2Freq>
 8001e12:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001e16:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001e1a:	6863      	ldr	r3, [r4, #4]
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e22:	fba7 2303 	umull	r2, r3, r7, r3
 8001e26:	095b      	lsrs	r3, r3, #5
 8001e28:	fb09 6913 	mls	r9, r9, r3, r6
 8001e2c:	ea4f 1909 	mov.w	r9, r9, lsl #4
 8001e30:	f109 0932 	add.w	r9, r9, #50	; 0x32
 8001e34:	fba7 3709 	umull	r3, r7, r7, r9
 8001e38:	f3c7 1743 	ubfx	r7, r7, #5, #4
 8001e3c:	442f      	add	r7, r5
 8001e3e:	f8c8 7008 	str.w	r7, [r8, #8]
 8001e42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001e46:	bf00      	nop
 8001e48:	40011000 	.word	0x40011000
 8001e4c:	51eb851f 	.word	0x51eb851f

08001e50 <HAL_UART_Init>:
  if (huart == NULL)
 8001e50:	b358      	cbz	r0, 8001eaa <HAL_UART_Init+0x5a>
{
 8001e52:	b510      	push	{r4, lr}
 8001e54:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8001e56:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001e5a:	b30b      	cbz	r3, 8001ea0 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8001e5c:	2324      	movs	r3, #36	; 0x24
 8001e5e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001e62:	6822      	ldr	r2, [r4, #0]
 8001e64:	68d3      	ldr	r3, [r2, #12]
 8001e66:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001e6a:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001e6c:	4620      	mov	r0, r4
 8001e6e:	f7ff fe4d 	bl	8001b0c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e72:	6822      	ldr	r2, [r4, #0]
 8001e74:	6913      	ldr	r3, [r2, #16]
 8001e76:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001e7a:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e7c:	6822      	ldr	r2, [r4, #0]
 8001e7e:	6953      	ldr	r3, [r2, #20]
 8001e80:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8001e84:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8001e86:	6822      	ldr	r2, [r4, #0]
 8001e88:	68d3      	ldr	r3, [r2, #12]
 8001e8a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001e8e:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e90:	2000      	movs	r0, #0
 8001e92:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001e94:	2320      	movs	r3, #32
 8001e96:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001e9a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8001e9e:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8001ea0:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001ea4:	f00b fc1e 	bl	800d6e4 <HAL_UART_MspInit>
 8001ea8:	e7d8      	b.n	8001e5c <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8001eaa:	2001      	movs	r0, #1
 8001eac:	4770      	bx	lr
	...

08001eb0 <USB_CoreReset>:
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t count = 0U;
 8001eb0:	2300      	movs	r3, #0

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	4a0c      	ldr	r2, [pc, #48]	; (8001ee8 <USB_CoreReset+0x38>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d811      	bhi.n	8001ede <USB_CoreReset+0x2e>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8001eba:	6902      	ldr	r2, [r0, #16]
 8001ebc:	2a00      	cmp	r2, #0
 8001ebe:	daf8      	bge.n	8001eb2 <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8001ec0:	6903      	ldr	r3, [r0, #16]
 8001ec2:	f043 0301 	orr.w	r3, r3, #1
 8001ec6:	6103      	str	r3, [r0, #16]
  count = 0U;
 8001ec8:	2300      	movs	r3, #0

  do
  {
    if (++count > 200000U)
 8001eca:	3301      	adds	r3, #1
 8001ecc:	4a06      	ldr	r2, [pc, #24]	; (8001ee8 <USB_CoreReset+0x38>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d807      	bhi.n	8001ee2 <USB_CoreReset+0x32>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8001ed2:	6902      	ldr	r2, [r0, #16]
 8001ed4:	f012 0f01 	tst.w	r2, #1
 8001ed8:	d1f7      	bne.n	8001eca <USB_CoreReset+0x1a>

  return HAL_OK;
 8001eda:	2000      	movs	r0, #0
 8001edc:	4770      	bx	lr
      return HAL_TIMEOUT;
 8001ede:	2003      	movs	r0, #3
 8001ee0:	4770      	bx	lr
      return HAL_TIMEOUT;
 8001ee2:	2003      	movs	r0, #3
}
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	00030d40 	.word	0x00030d40

08001eec <USB_CoreInit>:
{
 8001eec:	b084      	sub	sp, #16
 8001eee:	b510      	push	{r4, lr}
 8001ef0:	4604      	mov	r4, r0
 8001ef2:	a803      	add	r0, sp, #12
 8001ef4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8001ef8:	9b08      	ldr	r3, [sp, #32]
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d00d      	beq.n	8001f1a <USB_CoreInit+0x2e>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8001efe:	68e3      	ldr	r3, [r4, #12]
 8001f00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f04:	60e3      	str	r3, [r4, #12]
    ret = USB_CoreReset(USBx);
 8001f06:	4620      	mov	r0, r4
 8001f08:	f7ff ffd2 	bl	8001eb0 <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 8001f0c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001f0e:	bb23      	cbnz	r3, 8001f5a <USB_CoreInit+0x6e>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001f10:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001f12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f16:	63a3      	str	r3, [r4, #56]	; 0x38
 8001f18:	e013      	b.n	8001f42 <USB_CoreInit+0x56>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8001f1a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001f1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f20:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8001f22:	68e3      	ldr	r3, [r4, #12]
 8001f24:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8001f28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001f2c:	60e3      	str	r3, [r4, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8001f2e:	68e3      	ldr	r3, [r4, #12]
 8001f30:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8001f34:	60e3      	str	r3, [r4, #12]
    if (cfg.use_external_vbus == 1U)
 8001f36:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d009      	beq.n	8001f50 <USB_CoreInit+0x64>
    ret = USB_CoreReset(USBx);
 8001f3c:	4620      	mov	r0, r4
 8001f3e:	f7ff ffb7 	bl	8001eb0 <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 8001f42:	9b06      	ldr	r3, [sp, #24]
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d00d      	beq.n	8001f64 <USB_CoreInit+0x78>
}
 8001f48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001f4c:	b004      	add	sp, #16
 8001f4e:	4770      	bx	lr
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8001f50:	68e3      	ldr	r3, [r4, #12]
 8001f52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f56:	60e3      	str	r3, [r4, #12]
 8001f58:	e7f0      	b.n	8001f3c <USB_CoreInit+0x50>
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8001f5a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001f5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f60:	63a3      	str	r3, [r4, #56]	; 0x38
 8001f62:	e7ee      	b.n	8001f42 <USB_CoreInit+0x56>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8001f64:	68a3      	ldr	r3, [r4, #8]
 8001f66:	f043 0306 	orr.w	r3, r3, #6
 8001f6a:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8001f6c:	68a3      	ldr	r3, [r4, #8]
 8001f6e:	f043 0320 	orr.w	r3, r3, #32
 8001f72:	60a3      	str	r3, [r4, #8]
 8001f74:	e7e8      	b.n	8001f48 <USB_CoreInit+0x5c>

08001f76 <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8001f76:	6883      	ldr	r3, [r0, #8]
 8001f78:	f023 0301 	bic.w	r3, r3, #1
 8001f7c:	6083      	str	r3, [r0, #8]
}
 8001f7e:	2000      	movs	r0, #0
 8001f80:	4770      	bx	lr

08001f82 <USB_SetCurrentMode>:
{
 8001f82:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8001f84:	68c3      	ldr	r3, [r0, #12]
 8001f86:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8001f8a:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8001f8c:	2901      	cmp	r1, #1
 8001f8e:	d009      	beq.n	8001fa4 <USB_SetCurrentMode+0x22>
  else if (mode == USB_DEVICE_MODE)
 8001f90:	b969      	cbnz	r1, 8001fae <USB_SetCurrentMode+0x2c>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8001f92:	68c3      	ldr	r3, [r0, #12]
 8001f94:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001f98:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 8001f9a:	2032      	movs	r0, #50	; 0x32
 8001f9c:	f7fe fae4 	bl	8000568 <HAL_Delay>
  return HAL_OK;
 8001fa0:	2000      	movs	r0, #0
 8001fa2:	bd08      	pop	{r3, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8001fa4:	68c3      	ldr	r3, [r0, #12]
 8001fa6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001faa:	60c3      	str	r3, [r0, #12]
 8001fac:	e7f5      	b.n	8001f9a <USB_SetCurrentMode+0x18>
    return HAL_ERROR;
 8001fae:	2001      	movs	r0, #1
}
 8001fb0:	bd08      	pop	{r3, pc}
	...

08001fb4 <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8001fb4:	0189      	lsls	r1, r1, #6
 8001fb6:	f041 0120 	orr.w	r1, r1, #32
 8001fba:	6101      	str	r1, [r0, #16]
  uint32_t count = 0U;
 8001fbc:	2300      	movs	r3, #0
    if (++count > 200000U)
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	4a05      	ldr	r2, [pc, #20]	; (8001fd8 <USB_FlushTxFifo+0x24>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d805      	bhi.n	8001fd2 <USB_FlushTxFifo+0x1e>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8001fc6:	6902      	ldr	r2, [r0, #16]
 8001fc8:	f012 0f20 	tst.w	r2, #32
 8001fcc:	d1f7      	bne.n	8001fbe <USB_FlushTxFifo+0xa>
  return HAL_OK;
 8001fce:	2000      	movs	r0, #0
 8001fd0:	4770      	bx	lr
      return HAL_TIMEOUT;
 8001fd2:	2003      	movs	r0, #3
}
 8001fd4:	4770      	bx	lr
 8001fd6:	bf00      	nop
 8001fd8:	00030d40 	.word	0x00030d40

08001fdc <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8001fdc:	2310      	movs	r3, #16
 8001fde:	6103      	str	r3, [r0, #16]
  uint32_t count = 0;
 8001fe0:	2300      	movs	r3, #0
    if (++count > 200000U)
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	4a05      	ldr	r2, [pc, #20]	; (8001ffc <USB_FlushRxFifo+0x20>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d805      	bhi.n	8001ff6 <USB_FlushRxFifo+0x1a>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8001fea:	6902      	ldr	r2, [r0, #16]
 8001fec:	f012 0f10 	tst.w	r2, #16
 8001ff0:	d1f7      	bne.n	8001fe2 <USB_FlushRxFifo+0x6>
  return HAL_OK;
 8001ff2:	2000      	movs	r0, #0
 8001ff4:	4770      	bx	lr
      return HAL_TIMEOUT;
 8001ff6:	2003      	movs	r0, #3
}
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop
 8001ffc:	00030d40 	.word	0x00030d40

08002000 <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 8002000:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8002004:	4319      	orrs	r1, r3
 8002006:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 800200a:	2000      	movs	r0, #0
 800200c:	4770      	bx	lr
	...

08002010 <USB_DevInit>:
{
 8002010:	b084      	sub	sp, #16
 8002012:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002016:	4604      	mov	r4, r0
 8002018:	a807      	add	r0, sp, #28
 800201a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800201e:	4625      	mov	r5, r4
  for (i = 0U; i < 15U; i++)
 8002020:	2300      	movs	r3, #0
 8002022:	e006      	b.n	8002032 <USB_DevInit+0x22>
    USBx->DIEPTXF[i] = 0U;
 8002024:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8002028:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800202c:	2100      	movs	r1, #0
 800202e:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 8002030:	3301      	adds	r3, #1
 8002032:	2b0e      	cmp	r3, #14
 8002034:	d9f6      	bls.n	8002024 <USB_DevInit+0x14>
  if (cfg.vbus_sensing_enable == 0U)
 8002036:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002038:	bb73      	cbnz	r3, 8002098 <USB_DevInit+0x88>
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800203a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800203c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002040:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8002042:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002044:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8002048:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800204a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800204c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002050:	63a3      	str	r3, [r4, #56]	; 0x38
  USBx_PCGCCTL = 0U;
 8002052:	2300      	movs	r3, #0
 8002054:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002058:	f504 6600 	add.w	r6, r4, #2048	; 0x800
 800205c:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 8002060:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002064:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002066:	2b01      	cmp	r3, #1
 8002068:	d01f      	beq.n	80020aa <USB_DevInit+0x9a>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800206a:	2103      	movs	r1, #3
 800206c:	4620      	mov	r0, r4
 800206e:	f7ff ffc7 	bl	8002000 <USB_SetDevSpeed>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002072:	2110      	movs	r1, #16
 8002074:	4620      	mov	r0, r4
 8002076:	f7ff ff9d 	bl	8001fb4 <USB_FlushTxFifo>
 800207a:	4680      	mov	r8, r0
 800207c:	b108      	cbz	r0, 8002082 <USB_DevInit+0x72>
    ret = HAL_ERROR;
 800207e:	f04f 0801 	mov.w	r8, #1
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002082:	4620      	mov	r0, r4
 8002084:	f7ff ffaa 	bl	8001fdc <USB_FlushRxFifo>
 8002088:	b108      	cbz	r0, 800208e <USB_DevInit+0x7e>
    ret = HAL_ERROR;
 800208a:	f04f 0801 	mov.w	r8, #1
  USBx_DEVICE->DIEPMSK = 0U;
 800208e:	2300      	movs	r3, #0
 8002090:	6133      	str	r3, [r6, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002092:	6173      	str	r3, [r6, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8002094:	61f3      	str	r3, [r6, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002096:	e01f      	b.n	80020d8 <USB_DevInit+0xc8>
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8002098:	6823      	ldr	r3, [r4, #0]
 800209a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800209e:	6023      	str	r3, [r4, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80020a0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80020a2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80020a6:	63a3      	str	r3, [r4, #56]	; 0x38
 80020a8:	e7d3      	b.n	8002052 <USB_DevInit+0x42>
    if (cfg.speed == USBD_HS_SPEED)
 80020aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80020ac:	b923      	cbnz	r3, 80020b8 <USB_DevInit+0xa8>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80020ae:	2100      	movs	r1, #0
 80020b0:	4620      	mov	r0, r4
 80020b2:	f7ff ffa5 	bl	8002000 <USB_SetDevSpeed>
 80020b6:	e7dc      	b.n	8002072 <USB_DevInit+0x62>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80020b8:	2101      	movs	r1, #1
 80020ba:	4620      	mov	r0, r4
 80020bc:	f7ff ffa0 	bl	8002000 <USB_SetDevSpeed>
 80020c0:	e7d7      	b.n	8002072 <USB_DevInit+0x62>
      if (i == 0U)
 80020c2:	b9c3      	cbnz	r3, 80020f6 <USB_DevInit+0xe6>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80020c4:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 80020c8:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
    USBx_INEP(i)->DIEPTSIZ = 0U;
 80020cc:	2200      	movs	r2, #0
 80020ce:	610a      	str	r2, [r1, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80020d0:	f64f 327f 	movw	r2, #64383	; 0xfb7f
 80020d4:	608a      	str	r2, [r1, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80020d6:	3301      	adds	r3, #1
 80020d8:	9907      	ldr	r1, [sp, #28]
 80020da:	428b      	cmp	r3, r1
 80020dc:	d210      	bcs.n	8002100 <USB_DevInit+0xf0>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80020de:	eb05 1243 	add.w	r2, r5, r3, lsl #5
 80020e2:	f502 6110 	add.w	r1, r2, #2304	; 0x900
 80020e6:	f8d2 0900 	ldr.w	r0, [r2, #2304]	; 0x900
 80020ea:	2800      	cmp	r0, #0
 80020ec:	dbe9      	blt.n	80020c2 <USB_DevInit+0xb2>
      USBx_INEP(i)->DIEPCTL = 0U;
 80020ee:	2000      	movs	r0, #0
 80020f0:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
 80020f4:	e7ea      	b.n	80020cc <USB_DevInit+0xbc>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80020f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020fa:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
 80020fe:	e7e5      	b.n	80020cc <USB_DevInit+0xbc>
 8002100:	2300      	movs	r3, #0
 8002102:	e00a      	b.n	800211a <USB_DevInit+0x10a>
      if (i == 0U)
 8002104:	b1bb      	cbz	r3, 8002136 <USB_DevInit+0x126>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8002106:	f04f 4790 	mov.w	r7, #1207959552	; 0x48000000
 800210a:	f8c2 7b00 	str.w	r7, [r2, #2816]	; 0xb00
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800210e:	2200      	movs	r2, #0
 8002110:	6102      	str	r2, [r0, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8002112:	f64f 327f 	movw	r2, #64383	; 0xfb7f
 8002116:	6082      	str	r2, [r0, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002118:	3301      	adds	r3, #1
 800211a:	428b      	cmp	r3, r1
 800211c:	d210      	bcs.n	8002140 <USB_DevInit+0x130>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800211e:	eb05 1243 	add.w	r2, r5, r3, lsl #5
 8002122:	f502 6030 	add.w	r0, r2, #2816	; 0xb00
 8002126:	f8d2 7b00 	ldr.w	r7, [r2, #2816]	; 0xb00
 800212a:	2f00      	cmp	r7, #0
 800212c:	dbea      	blt.n	8002104 <USB_DevInit+0xf4>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800212e:	2700      	movs	r7, #0
 8002130:	f8c2 7b00 	str.w	r7, [r2, #2816]	; 0xb00
 8002134:	e7eb      	b.n	800210e <USB_DevInit+0xfe>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002136:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
 800213a:	f8c2 7b00 	str.w	r7, [r2, #2816]	; 0xb00
 800213e:	e7e6      	b.n	800210e <USB_DevInit+0xfe>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002140:	6933      	ldr	r3, [r6, #16]
 8002142:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002146:	6133      	str	r3, [r6, #16]
  if (cfg.dma_enable == 1U)
 8002148:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800214a:	2b01      	cmp	r3, #1
 800214c:	d01b      	beq.n	8002186 <USB_DevInit+0x176>
  USBx->GINTMSK = 0U;
 800214e:	2200      	movs	r2, #0
 8002150:	61a2      	str	r2, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 8002152:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8002156:	6162      	str	r2, [r4, #20]
  if (cfg.dma_enable == 0U)
 8002158:	b91b      	cbnz	r3, 8002162 <USB_DevInit+0x152>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800215a:	69a3      	ldr	r3, [r4, #24]
 800215c:	f043 0310 	orr.w	r3, r3, #16
 8002160:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8002162:	69a2      	ldr	r2, [r4, #24]
 8002164:	4b10      	ldr	r3, [pc, #64]	; (80021a8 <USB_DevInit+0x198>)
 8002166:	4313      	orrs	r3, r2
 8002168:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 800216a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800216c:	b11b      	cbz	r3, 8002176 <USB_DevInit+0x166>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800216e:	69a3      	ldr	r3, [r4, #24]
 8002170:	f043 0308 	orr.w	r3, r3, #8
 8002174:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 8002176:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002178:	2b01      	cmp	r3, #1
 800217a:	d00d      	beq.n	8002198 <USB_DevInit+0x188>
}
 800217c:	4640      	mov	r0, r8
 800217e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002182:	b004      	add	sp, #16
 8002184:	4770      	bx	lr
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 8002186:	4a09      	ldr	r2, [pc, #36]	; (80021ac <USB_DevInit+0x19c>)
 8002188:	6332      	str	r2, [r6, #48]	; 0x30
    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 800218a:	6b32      	ldr	r2, [r6, #48]	; 0x30
 800218c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002190:	f042 0203 	orr.w	r2, r2, #3
 8002194:	6332      	str	r2, [r6, #48]	; 0x30
 8002196:	e7da      	b.n	800214e <USB_DevInit+0x13e>
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8002198:	69a3      	ldr	r3, [r4, #24]
 800219a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800219e:	f043 0304 	orr.w	r3, r3, #4
 80021a2:	61a3      	str	r3, [r4, #24]
 80021a4:	e7ea      	b.n	800217c <USB_DevInit+0x16c>
 80021a6:	bf00      	nop
 80021a8:	803c3800 	.word	0x803c3800
 80021ac:	00800100 	.word	0x00800100

080021b0 <USB_DevDisconnect>:
{
 80021b0:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80021b2:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 80021b6:	f043 0302 	orr.w	r3, r3, #2
 80021ba:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 80021be:	2003      	movs	r0, #3
 80021c0:	f7fe f9d2 	bl	8000568 <HAL_Delay>
}
 80021c4:	2000      	movs	r0, #0
 80021c6:	bd08      	pop	{r3, pc}

080021c8 <makeFreeRtosPriority>:
/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
  
  if (priority != osPriorityError) {
 80021c8:	2884      	cmp	r0, #132	; 0x84
 80021ca:	d001      	beq.n	80021d0 <makeFreeRtosPriority+0x8>
    fpriority += (priority - osPriorityIdle);
 80021cc:	3003      	adds	r0, #3
 80021ce:	4770      	bx	lr
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80021d0:	2000      	movs	r0, #0
  }
  
  return fpriority;
}
 80021d2:	4770      	bx	lr

080021d4 <inHandlerMode>:
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80021d4:	f3ef 8005 	mrs	r0, IPSR

/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
  return __get_IPSR() != 0;
}
 80021d8:	3000      	adds	r0, #0
 80021da:	bf18      	it	ne
 80021dc:	2001      	movne	r0, #1
 80021de:	4770      	bx	lr

080021e0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80021e0:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 80021e2:	f001 fc23 	bl	8003a2c <vTaskStartScheduler>
  
  return osOK;
}
 80021e6:	2000      	movs	r0, #0
 80021e8:	bd08      	pop	{r3, pc}

080021ea <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 80021ea:	b508      	push	{r3, lr}
  if (inHandlerMode()) {
 80021ec:	f7ff fff2 	bl	80021d4 <inHandlerMode>
 80021f0:	b910      	cbnz	r0, 80021f8 <osKernelSysTick+0xe>
    return xTaskGetTickCountFromISR();
  }
  else {
    return xTaskGetTickCount();
 80021f2:	f001 fc5f 	bl	8003ab4 <xTaskGetTickCount>
  }
}
 80021f6:	bd08      	pop	{r3, pc}
    return xTaskGetTickCountFromISR();
 80021f8:	f001 fc62 	bl	8003ac0 <xTaskGetTickCountFromISR>
 80021fc:	bd08      	pop	{r3, pc}

080021fe <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80021fe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002202:	b087      	sub	sp, #28
 8002204:	4604      	mov	r4, r0
 8002206:	460f      	mov	r7, r1
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002208:	6945      	ldr	r5, [r0, #20]
 800220a:	b1bd      	cbz	r5, 800223c <osThreadCreate+0x3e>
 800220c:	6986      	ldr	r6, [r0, #24]
 800220e:	b1ae      	cbz	r6, 800223c <osThreadCreate+0x3e>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002210:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8002214:	f8d0 9000 	ldr.w	r9, [r0]
 8002218:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 800221c:	f7ff ffd4 	bl	80021c8 <makeFreeRtosPriority>
 8002220:	6922      	ldr	r2, [r4, #16]
 8002222:	9602      	str	r6, [sp, #8]
 8002224:	9501      	str	r5, [sp, #4]
 8002226:	9000      	str	r0, [sp, #0]
 8002228:	463b      	mov	r3, r7
 800222a:	4649      	mov	r1, r9
 800222c:	4640      	mov	r0, r8
 800222e:	f001 fb91 	bl	8003954 <xTaskCreateStatic>
 8002232:	9005      	str	r0, [sp, #20]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002234:	9805      	ldr	r0, [sp, #20]
}
 8002236:	b007      	add	sp, #28
 8002238:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800223c:	6865      	ldr	r5, [r4, #4]
 800223e:	6826      	ldr	r6, [r4, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002240:	f8d4 8010 	ldr.w	r8, [r4, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002244:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
 8002248:	f7ff ffbe 	bl	80021c8 <makeFreeRtosPriority>
 800224c:	ab05      	add	r3, sp, #20
 800224e:	9301      	str	r3, [sp, #4]
 8002250:	9000      	str	r0, [sp, #0]
 8002252:	463b      	mov	r3, r7
 8002254:	fa1f f288 	uxth.w	r2, r8
 8002258:	4631      	mov	r1, r6
 800225a:	4628      	mov	r0, r5
 800225c:	f001 fbb3 	bl	80039c6 <xTaskCreate>
 8002260:	2801      	cmp	r0, #1
 8002262:	d0e7      	beq.n	8002234 <osThreadCreate+0x36>
      return NULL;
 8002264:	2000      	movs	r0, #0
 8002266:	e7e6      	b.n	8002236 <osThreadCreate+0x38>

08002268 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002268:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800226a:	4603      	mov	r3, r0
 800226c:	b900      	cbnz	r0, 8002270 <osDelay+0x8>
 800226e:	2301      	movs	r3, #1
 8002270:	4618      	mov	r0, r3
 8002272:	f001 fd0f 	bl	8003c94 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002276:	2000      	movs	r0, #0
 8002278:	bd08      	pop	{r3, pc}

0800227a <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800227a:	b508      	push	{r3, lr}
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800227c:	6841      	ldr	r1, [r0, #4]
 800227e:	b119      	cbz	r1, 8002288 <osMutexCreate+0xe>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8002280:	2001      	movs	r0, #1
 8002282:	f000 ff04 	bl	800308e <xQueueCreateMutexStatic>
 8002286:	bd08      	pop	{r3, pc}
     }
  else {
    return xSemaphoreCreateMutex(); 
 8002288:	2001      	movs	r0, #1
 800228a:	f000 fef5 	bl	8003078 <xQueueCreateMutex>
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800228e:	bd08      	pop	{r3, pc}

08002290 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8002290:	b530      	push	{r4, r5, lr}
 8002292:	b083      	sub	sp, #12
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8002294:	2300      	movs	r3, #0
 8002296:	9301      	str	r3, [sp, #4]
  
  
  if (mutex_id == NULL) {
 8002298:	b350      	cbz	r0, 80022f0 <osMutexWait+0x60>
 800229a:	460c      	mov	r4, r1
 800229c:	4605      	mov	r5, r0
    return osErrorParameter;
  }
  
  ticks = 0;
  if (millisec == osWaitForever) {
 800229e:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 80022a2:	d00d      	beq.n	80022c0 <osMutexWait+0x30>
    ticks = portMAX_DELAY;
  }
  else if (millisec != 0) {
 80022a4:	b901      	cbnz	r1, 80022a8 <osMutexWait+0x18>
  ticks = 0;
 80022a6:	461c      	mov	r4, r3
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 80022a8:	f7ff ff94 	bl	80021d4 <inHandlerMode>
 80022ac:	b1b8      	cbz	r0, 80022de <osMutexWait+0x4e>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80022ae:	aa01      	add	r2, sp, #4
 80022b0:	2100      	movs	r1, #0
 80022b2:	4628      	mov	r0, r5
 80022b4:	f001 f936 	bl	8003524 <xQueueReceiveFromISR>
 80022b8:	2801      	cmp	r0, #1
 80022ba:	d004      	beq.n	80022c6 <osMutexWait+0x36>
      return osErrorOS;
 80022bc:	20ff      	movs	r0, #255	; 0xff
 80022be:	e015      	b.n	80022ec <osMutexWait+0x5c>
    ticks = portMAX_DELAY;
 80022c0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80022c4:	e7f0      	b.n	80022a8 <osMutexWait+0x18>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80022c6:	9b01      	ldr	r3, [sp, #4]
 80022c8:	b1a3      	cbz	r3, 80022f4 <osMutexWait+0x64>
 80022ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80022ce:	4b0b      	ldr	r3, [pc, #44]	; (80022fc <osMutexWait+0x6c>)
 80022d0:	601a      	str	r2, [r3, #0]
 80022d2:	f3bf 8f4f 	dsb	sy
 80022d6:	f3bf 8f6f 	isb	sy
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
 80022da:	2000      	movs	r0, #0
 80022dc:	e006      	b.n	80022ec <osMutexWait+0x5c>
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 80022de:	4621      	mov	r1, r4
 80022e0:	4628      	mov	r0, r5
 80022e2:	f001 f857 	bl	8003394 <xQueueSemaphoreTake>
 80022e6:	2801      	cmp	r0, #1
 80022e8:	d006      	beq.n	80022f8 <osMutexWait+0x68>
    return osErrorOS;
 80022ea:	20ff      	movs	r0, #255	; 0xff
}
 80022ec:	b003      	add	sp, #12
 80022ee:	bd30      	pop	{r4, r5, pc}
    return osErrorParameter;
 80022f0:	2080      	movs	r0, #128	; 0x80
 80022f2:	e7fb      	b.n	80022ec <osMutexWait+0x5c>
  return osOK;
 80022f4:	2000      	movs	r0, #0
 80022f6:	e7f9      	b.n	80022ec <osMutexWait+0x5c>
 80022f8:	2000      	movs	r0, #0
 80022fa:	e7f7      	b.n	80022ec <osMutexWait+0x5c>
 80022fc:	e000ed04 	.word	0xe000ed04

08002300 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8002300:	b510      	push	{r4, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	4604      	mov	r4, r0
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 8002306:	2300      	movs	r3, #0
 8002308:	9301      	str	r3, [sp, #4]
  
  if (inHandlerMode()) {
 800230a:	f7ff ff63 	bl	80021d4 <inHandlerMode>
 800230e:	b1a0      	cbz	r0, 800233a <osMutexRelease+0x3a>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8002310:	a901      	add	r1, sp, #4
 8002312:	4620      	mov	r0, r4
 8002314:	f000 ff39 	bl	800318a <xQueueGiveFromISR>
 8002318:	2801      	cmp	r0, #1
 800231a:	d002      	beq.n	8002322 <osMutexRelease+0x22>
      return osErrorOS;
 800231c:	20ff      	movs	r0, #255	; 0xff
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
  {
    result = osErrorOS;
  }
  return result;
}
 800231e:	b002      	add	sp, #8
 8002320:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 8002322:	9b01      	ldr	r3, [sp, #4]
 8002324:	b1ab      	cbz	r3, 8002352 <osMutexRelease+0x52>
 8002326:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800232a:	4b0b      	ldr	r3, [pc, #44]	; (8002358 <osMutexRelease+0x58>)
 800232c:	601a      	str	r2, [r3, #0]
 800232e:	f3bf 8f4f 	dsb	sy
 8002332:	f3bf 8f6f 	isb	sy
  osStatus result = osOK;
 8002336:	2000      	movs	r0, #0
 8002338:	e7f1      	b.n	800231e <osMutexRelease+0x1e>
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800233a:	2300      	movs	r3, #0
 800233c:	461a      	mov	r2, r3
 800233e:	4619      	mov	r1, r3
 8002340:	4620      	mov	r0, r4
 8002342:	f000 fddd 	bl	8002f00 <xQueueGenericSend>
 8002346:	2801      	cmp	r0, #1
 8002348:	d001      	beq.n	800234e <osMutexRelease+0x4e>
    result = osErrorOS;
 800234a:	20ff      	movs	r0, #255	; 0xff
 800234c:	e7e7      	b.n	800231e <osMutexRelease+0x1e>
  osStatus result = osOK;
 800234e:	2000      	movs	r0, #0
 8002350:	e7e5      	b.n	800231e <osMutexRelease+0x1e>
 8002352:	2000      	movs	r0, #0
 8002354:	e7e3      	b.n	800231e <osMutexRelease+0x1e>
 8002356:	bf00      	nop
 8002358:	e000ed04 	.word	0xe000ed04

0800235c <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800235c:	b510      	push	{r4, lr}
 800235e:	b082      	sub	sp, #8
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8002360:	6843      	ldr	r3, [r0, #4]
 8002362:	b163      	cbz	r3, 800237e <osSemaphoreCreate+0x22>
    if (count == 1) {
 8002364:	2901      	cmp	r1, #1
 8002366:	d11a      	bne.n	800239e <osSemaphoreCreate+0x42>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8002368:	2203      	movs	r2, #3
 800236a:	9200      	str	r2, [sp, #0]
 800236c:	2200      	movs	r2, #0
 800236e:	4611      	mov	r1, r2
 8002370:	2001      	movs	r0, #1
 8002372:	f000 fd4d 	bl	8002e10 <xQueueGenericCreateStatic>
 8002376:	4604      	mov	r4, r0
#else
    return NULL;
#endif
  }
#endif
}
 8002378:	4620      	mov	r0, r4
 800237a:	b002      	add	sp, #8
 800237c:	bd10      	pop	{r4, pc}
    if (count == 1) {
 800237e:	2901      	cmp	r1, #1
 8002380:	d10f      	bne.n	80023a2 <osSemaphoreCreate+0x46>
      vSemaphoreCreateBinary(sema);
 8002382:	2203      	movs	r2, #3
 8002384:	2100      	movs	r1, #0
 8002386:	2001      	movs	r0, #1
 8002388:	f000 fd92 	bl	8002eb0 <xQueueGenericCreate>
 800238c:	4604      	mov	r4, r0
 800238e:	2800      	cmp	r0, #0
 8002390:	d0f2      	beq.n	8002378 <osSemaphoreCreate+0x1c>
 8002392:	2300      	movs	r3, #0
 8002394:	461a      	mov	r2, r3
 8002396:	4619      	mov	r1, r3
 8002398:	f000 fdb2 	bl	8002f00 <xQueueGenericSend>
 800239c:	e7ec      	b.n	8002378 <osSemaphoreCreate+0x1c>
      return NULL;
 800239e:	2400      	movs	r4, #0
 80023a0:	e7ea      	b.n	8002378 <osSemaphoreCreate+0x1c>
      return NULL;
 80023a2:	2400      	movs	r4, #0
 80023a4:	e7e8      	b.n	8002378 <osSemaphoreCreate+0x1c>
	...

080023a8 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80023a8:	b530      	push	{r4, r5, lr}
 80023aa:	b083      	sub	sp, #12
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80023ac:	2300      	movs	r3, #0
 80023ae:	9301      	str	r3, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 80023b0:	b350      	cbz	r0, 8002408 <osSemaphoreWait+0x60>
 80023b2:	460c      	mov	r4, r1
 80023b4:	4605      	mov	r5, r0
    return osErrorParameter;
  }
  
  ticks = 0;
  if (millisec == osWaitForever) {
 80023b6:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 80023ba:	d00d      	beq.n	80023d8 <osSemaphoreWait+0x30>
    ticks = portMAX_DELAY;
  }
  else if (millisec != 0) {
 80023bc:	b901      	cbnz	r1, 80023c0 <osSemaphoreWait+0x18>
  ticks = 0;
 80023be:	461c      	mov	r4, r3
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 80023c0:	f7ff ff08 	bl	80021d4 <inHandlerMode>
 80023c4:	b1b8      	cbz	r0, 80023f6 <osSemaphoreWait+0x4e>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80023c6:	aa01      	add	r2, sp, #4
 80023c8:	2100      	movs	r1, #0
 80023ca:	4628      	mov	r0, r5
 80023cc:	f001 f8aa 	bl	8003524 <xQueueReceiveFromISR>
 80023d0:	2801      	cmp	r0, #1
 80023d2:	d004      	beq.n	80023de <osSemaphoreWait+0x36>
      return osErrorOS;
 80023d4:	20ff      	movs	r0, #255	; 0xff
 80023d6:	e015      	b.n	8002404 <osSemaphoreWait+0x5c>
    ticks = portMAX_DELAY;
 80023d8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80023dc:	e7f0      	b.n	80023c0 <osSemaphoreWait+0x18>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80023de:	9b01      	ldr	r3, [sp, #4]
 80023e0:	b1a3      	cbz	r3, 800240c <osSemaphoreWait+0x64>
 80023e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023e6:	4b0b      	ldr	r3, [pc, #44]	; (8002414 <osSemaphoreWait+0x6c>)
 80023e8:	601a      	str	r2, [r3, #0]
 80023ea:	f3bf 8f4f 	dsb	sy
 80023ee:	f3bf 8f6f 	isb	sy
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
 80023f2:	2000      	movs	r0, #0
 80023f4:	e006      	b.n	8002404 <osSemaphoreWait+0x5c>
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80023f6:	4621      	mov	r1, r4
 80023f8:	4628      	mov	r0, r5
 80023fa:	f000 ffcb 	bl	8003394 <xQueueSemaphoreTake>
 80023fe:	2801      	cmp	r0, #1
 8002400:	d006      	beq.n	8002410 <osSemaphoreWait+0x68>
    return osErrorOS;
 8002402:	20ff      	movs	r0, #255	; 0xff
}
 8002404:	b003      	add	sp, #12
 8002406:	bd30      	pop	{r4, r5, pc}
    return osErrorParameter;
 8002408:	2080      	movs	r0, #128	; 0x80
 800240a:	e7fb      	b.n	8002404 <osSemaphoreWait+0x5c>
  return osOK;
 800240c:	2000      	movs	r0, #0
 800240e:	e7f9      	b.n	8002404 <osSemaphoreWait+0x5c>
 8002410:	2000      	movs	r0, #0
 8002412:	e7f7      	b.n	8002404 <osSemaphoreWait+0x5c>
 8002414:	e000ed04 	.word	0xe000ed04

08002418 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8002418:	b510      	push	{r4, lr}
 800241a:	b082      	sub	sp, #8
 800241c:	4604      	mov	r4, r0
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 800241e:	2300      	movs	r3, #0
 8002420:	9301      	str	r3, [sp, #4]
  
  
  if (inHandlerMode()) {
 8002422:	f7ff fed7 	bl	80021d4 <inHandlerMode>
 8002426:	b1a0      	cbz	r0, 8002452 <osSemaphoreRelease+0x3a>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8002428:	a901      	add	r1, sp, #4
 800242a:	4620      	mov	r0, r4
 800242c:	f000 fead 	bl	800318a <xQueueGiveFromISR>
 8002430:	2801      	cmp	r0, #1
 8002432:	d002      	beq.n	800243a <osSemaphoreRelease+0x22>
      return osErrorOS;
 8002434:	20ff      	movs	r0, #255	; 0xff
      result = osErrorOS;
    }
  }
  
  return result;
}
 8002436:	b002      	add	sp, #8
 8002438:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 800243a:	9b01      	ldr	r3, [sp, #4]
 800243c:	b1ab      	cbz	r3, 800246a <osSemaphoreRelease+0x52>
 800243e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002442:	4b0b      	ldr	r3, [pc, #44]	; (8002470 <osSemaphoreRelease+0x58>)
 8002444:	601a      	str	r2, [r3, #0]
 8002446:	f3bf 8f4f 	dsb	sy
 800244a:	f3bf 8f6f 	isb	sy
  osStatus result = osOK;
 800244e:	2000      	movs	r0, #0
 8002450:	e7f1      	b.n	8002436 <osSemaphoreRelease+0x1e>
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8002452:	2300      	movs	r3, #0
 8002454:	461a      	mov	r2, r3
 8002456:	4619      	mov	r1, r3
 8002458:	4620      	mov	r0, r4
 800245a:	f000 fd51 	bl	8002f00 <xQueueGenericSend>
 800245e:	2801      	cmp	r0, #1
 8002460:	d001      	beq.n	8002466 <osSemaphoreRelease+0x4e>
      result = osErrorOS;
 8002462:	20ff      	movs	r0, #255	; 0xff
 8002464:	e7e7      	b.n	8002436 <osSemaphoreRelease+0x1e>
  osStatus result = osOK;
 8002466:	2000      	movs	r0, #0
 8002468:	e7e5      	b.n	8002436 <osSemaphoreRelease+0x1e>
 800246a:	2000      	movs	r0, #0
 800246c:	e7e3      	b.n	8002436 <osSemaphoreRelease+0x1e>
 800246e:	bf00      	nop
 8002470:	e000ed04 	.word	0xe000ed04

08002474 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8002474:	b510      	push	{r4, lr}
 8002476:	4604      	mov	r4, r0
  if (inHandlerMode()) {
 8002478:	f7ff feac 	bl	80021d4 <inHandlerMode>
 800247c:	b108      	cbz	r0, 8002482 <osSemaphoreDelete+0xe>
    return osErrorISR;
 800247e:	2082      	movs	r0, #130	; 0x82
  }

  vSemaphoreDelete(semaphore_id);

  return osOK; 
}
 8002480:	bd10      	pop	{r4, pc}
  vSemaphoreDelete(semaphore_id);
 8002482:	4620      	mov	r0, r4
 8002484:	f001 f8de 	bl	8003644 <vQueueDelete>
  return osOK; 
 8002488:	2000      	movs	r0, #0
 800248a:	bd10      	pop	{r4, pc}

0800248c <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800248c:	b510      	push	{r4, lr}
 800248e:	b082      	sub	sp, #8
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8002490:	6882      	ldr	r2, [r0, #8]
 8002492:	b14a      	cbz	r2, 80024a8 <osMessageCreate+0x1c>
 8002494:	68c3      	ldr	r3, [r0, #12]
 8002496:	b13b      	cbz	r3, 80024a8 <osMessageCreate+0x1c>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8002498:	6841      	ldr	r1, [r0, #4]
 800249a:	6800      	ldr	r0, [r0, #0]
 800249c:	2400      	movs	r4, #0
 800249e:	9400      	str	r4, [sp, #0]
 80024a0:	f000 fcb6 	bl	8002e10 <xQueueGenericCreateStatic>
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80024a4:	b002      	add	sp, #8
 80024a6:	bd10      	pop	{r4, pc}
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80024a8:	2200      	movs	r2, #0
 80024aa:	6841      	ldr	r1, [r0, #4]
 80024ac:	6800      	ldr	r0, [r0, #0]
 80024ae:	f000 fcff 	bl	8002eb0 <xQueueGenericCreate>
 80024b2:	e7f7      	b.n	80024a4 <osMessageCreate+0x18>

080024b4 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80024b4:	b530      	push	{r4, r5, lr}
 80024b6:	b085      	sub	sp, #20
 80024b8:	4604      	mov	r4, r0
 80024ba:	9101      	str	r1, [sp, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80024bc:	2300      	movs	r3, #0
 80024be:	9303      	str	r3, [sp, #12]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
  if (ticks == 0) {
 80024c0:	4615      	mov	r5, r2
 80024c2:	b902      	cbnz	r2, 80024c6 <osMessagePut+0x12>
    ticks = 1;
 80024c4:	2501      	movs	r5, #1
  }
  
  if (inHandlerMode()) {
 80024c6:	f7ff fe85 	bl	80021d4 <inHandlerMode>
 80024ca:	b1a8      	cbz	r0, 80024f8 <osMessagePut+0x44>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80024cc:	2300      	movs	r3, #0
 80024ce:	aa03      	add	r2, sp, #12
 80024d0:	a901      	add	r1, sp, #4
 80024d2:	4620      	mov	r0, r4
 80024d4:	f000 fdea 	bl	80030ac <xQueueGenericSendFromISR>
 80024d8:	2801      	cmp	r0, #1
 80024da:	d001      	beq.n	80024e0 <osMessagePut+0x2c>
      return osErrorOS;
 80024dc:	20ff      	movs	r0, #255	; 0xff
 80024de:	e014      	b.n	800250a <osMessagePut+0x56>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80024e0:	9b03      	ldr	r3, [sp, #12]
 80024e2:	b1a3      	cbz	r3, 800250e <osMessagePut+0x5a>
 80024e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024e8:	4b0b      	ldr	r3, [pc, #44]	; (8002518 <osMessagePut+0x64>)
 80024ea:	601a      	str	r2, [r3, #0]
 80024ec:	f3bf 8f4f 	dsb	sy
 80024f0:	f3bf 8f6f 	isb	sy
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
      return osErrorOS;
    }
  }
  
  return osOK;
 80024f4:	2000      	movs	r0, #0
 80024f6:	e008      	b.n	800250a <osMessagePut+0x56>
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80024f8:	2300      	movs	r3, #0
 80024fa:	462a      	mov	r2, r5
 80024fc:	a901      	add	r1, sp, #4
 80024fe:	4620      	mov	r0, r4
 8002500:	f000 fcfe 	bl	8002f00 <xQueueGenericSend>
 8002504:	2801      	cmp	r0, #1
 8002506:	d004      	beq.n	8002512 <osMessagePut+0x5e>
      return osErrorOS;
 8002508:	20ff      	movs	r0, #255	; 0xff
}
 800250a:	b005      	add	sp, #20
 800250c:	bd30      	pop	{r4, r5, pc}
  return osOK;
 800250e:	2000      	movs	r0, #0
 8002510:	e7fb      	b.n	800250a <osMessagePut+0x56>
 8002512:	2000      	movs	r0, #0
 8002514:	e7f9      	b.n	800250a <osMessagePut+0x56>
 8002516:	bf00      	nop
 8002518:	e000ed04 	.word	0xe000ed04

0800251c <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800251c:	b570      	push	{r4, r5, r6, lr}
 800251e:	b084      	sub	sp, #16
 8002520:	4604      	mov	r4, r0
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8002522:	9102      	str	r1, [sp, #8]
  event.value.v = 0;
 8002524:	2300      	movs	r3, #0
 8002526:	9301      	str	r3, [sp, #4]
  
  if (queue_id == NULL) {
 8002528:	b1f9      	cbz	r1, 800256a <osMessageGet+0x4e>
 800252a:	460d      	mov	r5, r1
 800252c:	4616      	mov	r6, r2
    event.status = osErrorParameter;
    return event;
  }
  
  taskWoken = pdFALSE;
 800252e:	2300      	movs	r3, #0
 8002530:	9303      	str	r3, [sp, #12]
  
  ticks = 0;
  if (millisec == osWaitForever) {
 8002532:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8002536:	d021      	beq.n	800257c <osMessageGet+0x60>
    ticks = portMAX_DELAY;
  }
  else if (millisec != 0) {
 8002538:	b902      	cbnz	r2, 800253c <osMessageGet+0x20>
  ticks = 0;
 800253a:	461e      	mov	r6, r3
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 800253c:	f7ff fe4a 	bl	80021d4 <inHandlerMode>
 8002540:	b310      	cbz	r0, 8002588 <osMessageGet+0x6c>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8002542:	aa03      	add	r2, sp, #12
 8002544:	a901      	add	r1, sp, #4
 8002546:	4628      	mov	r0, r5
 8002548:	f000 ffec 	bl	8003524 <xQueueReceiveFromISR>
 800254c:	2801      	cmp	r0, #1
 800254e:	d018      	beq.n	8002582 <osMessageGet+0x66>
      /* We have mail */
      event.status = osEventMessage;
    }
    else {
      event.status = osOK;
 8002550:	2300      	movs	r3, #0
 8002552:	9300      	str	r3, [sp, #0]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8002554:	9b03      	ldr	r3, [sp, #12]
 8002556:	b30b      	cbz	r3, 800259c <osMessageGet+0x80>
 8002558:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800255c:	4b15      	ldr	r3, [pc, #84]	; (80025b4 <osMessageGet+0x98>)
 800255e:	601a      	str	r2, [r3, #0]
 8002560:	f3bf 8f4f 	dsb	sy
 8002564:	f3bf 8f6f 	isb	sy
 8002568:	e018      	b.n	800259c <osMessageGet+0x80>
    event.status = osErrorParameter;
 800256a:	ab04      	add	r3, sp, #16
 800256c:	2280      	movs	r2, #128	; 0x80
 800256e:	f843 2d10 	str.w	r2, [r3, #-16]!
    return event;
 8002572:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002576:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800257a:	e013      	b.n	80025a4 <osMessageGet+0x88>
    ticks = portMAX_DELAY;
 800257c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8002580:	e7dc      	b.n	800253c <osMessageGet+0x20>
      event.status = osEventMessage;
 8002582:	2310      	movs	r3, #16
 8002584:	9300      	str	r3, [sp, #0]
 8002586:	e7e5      	b.n	8002554 <osMessageGet+0x38>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8002588:	4632      	mov	r2, r6
 800258a:	a901      	add	r1, sp, #4
 800258c:	4628      	mov	r0, r5
 800258e:	f000 fe5b 	bl	8003248 <xQueueReceive>
 8002592:	2801      	cmp	r0, #1
 8002594:	d009      	beq.n	80025aa <osMessageGet+0x8e>
      /* We have mail */
      event.status = osEventMessage;
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8002596:	b95e      	cbnz	r6, 80025b0 <osMessageGet+0x94>
 8002598:	2300      	movs	r3, #0
 800259a:	9300      	str	r3, [sp, #0]
    }
  }
  
  return event;
 800259c:	e89d 0007 	ldmia.w	sp, {r0, r1, r2}
 80025a0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80025a4:	4620      	mov	r0, r4
 80025a6:	b004      	add	sp, #16
 80025a8:	bd70      	pop	{r4, r5, r6, pc}
      event.status = osEventMessage;
 80025aa:	2310      	movs	r3, #16
 80025ac:	9300      	str	r3, [sp, #0]
 80025ae:	e7f5      	b.n	800259c <osMessageGet+0x80>
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80025b0:	2340      	movs	r3, #64	; 0x40
 80025b2:	e7f2      	b.n	800259a <osMessageGet+0x7e>
 80025b4:	e000ed04 	.word	0xe000ed04

080025b8 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 80025b8:	b510      	push	{r4, lr}
 80025ba:	4604      	mov	r4, r0
  if (inHandlerMode()) {
 80025bc:	f7ff fe0a 	bl	80021d4 <inHandlerMode>
 80025c0:	b918      	cbnz	r0, 80025ca <osMessageWaiting+0x12>
    return uxQueueMessagesWaitingFromISR(queue_id);
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 80025c2:	4620      	mov	r0, r4
 80025c4:	f001 f809 	bl	80035da <uxQueueMessagesWaiting>
  }
}
 80025c8:	bd10      	pop	{r4, pc}
    return uxQueueMessagesWaitingFromISR(queue_id);
 80025ca:	4620      	mov	r0, r4
 80025cc:	f001 f818 	bl	8003600 <uxQueueMessagesWaitingFromISR>
 80025d0:	bd10      	pop	{r4, pc}

080025d2 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 80025d2:	b510      	push	{r4, lr}
 80025d4:	4604      	mov	r4, r0
  if (inHandlerMode()) {
 80025d6:	f7ff fdfd 	bl	80021d4 <inHandlerMode>
 80025da:	b108      	cbz	r0, 80025e0 <osMessageDelete+0xe>
    return osErrorISR;
 80025dc:	2082      	movs	r0, #130	; 0x82
  }

  vQueueDelete(queue_id);

  return osOK; 
}
 80025de:	bd10      	pop	{r4, pc}
  vQueueDelete(queue_id);
 80025e0:	4620      	mov	r0, r4
 80025e2:	f001 f82f 	bl	8003644 <vQueueDelete>
  return osOK; 
 80025e6:	2000      	movs	r0, #0
 80025e8:	bd10      	pop	{r4, pc}

080025ea <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80025ea:	f100 0308 	add.w	r3, r0, #8
 80025ee:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80025f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80025f4:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80025f6:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80025f8:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80025fa:	2300      	movs	r3, #0
 80025fc:	6003      	str	r3, [r0, #0]
 80025fe:	4770      	bx	lr

08002600 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002600:	2300      	movs	r3, #0
 8002602:	6103      	str	r3, [r0, #16]
 8002604:	4770      	bx	lr

08002606 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8002606:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002608:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800260a:	689a      	ldr	r2, [r3, #8]
 800260c:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800260e:	689a      	ldr	r2, [r3, #8]
 8002610:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002612:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002614:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8002616:	6803      	ldr	r3, [r0, #0]
 8002618:	3301      	adds	r3, #1
 800261a:	6003      	str	r3, [r0, #0]
 800261c:	4770      	bx	lr

0800261e <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800261e:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002620:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002622:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8002626:	d002      	beq.n	800262e <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002628:	f100 0208 	add.w	r2, r0, #8
 800262c:	e002      	b.n	8002634 <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
 800262e:	6902      	ldr	r2, [r0, #16]
 8002630:	e004      	b.n	800263c <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002632:	461a      	mov	r2, r3
 8002634:	6853      	ldr	r3, [r2, #4]
 8002636:	681c      	ldr	r4, [r3, #0]
 8002638:	42a5      	cmp	r5, r4
 800263a:	d2fa      	bcs.n	8002632 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800263c:	6853      	ldr	r3, [r2, #4]
 800263e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002640:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002642:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8002644:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002646:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8002648:	6803      	ldr	r3, [r0, #0]
 800264a:	3301      	adds	r3, #1
 800264c:	6003      	str	r3, [r0, #0]
}
 800264e:	bc30      	pop	{r4, r5}
 8002650:	4770      	bx	lr

08002652 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002652:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002654:	6842      	ldr	r2, [r0, #4]
 8002656:	6881      	ldr	r1, [r0, #8]
 8002658:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800265a:	6882      	ldr	r2, [r0, #8]
 800265c:	6841      	ldr	r1, [r0, #4]
 800265e:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002660:	685a      	ldr	r2, [r3, #4]
 8002662:	4290      	cmp	r0, r2
 8002664:	d006      	beq.n	8002674 <uxListRemove+0x22>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002666:	2200      	movs	r2, #0
 8002668:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	3a01      	subs	r2, #1
 800266e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002670:	6818      	ldr	r0, [r3, #0]
}
 8002672:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002674:	6882      	ldr	r2, [r0, #8]
 8002676:	605a      	str	r2, [r3, #4]
 8002678:	e7f5      	b.n	8002666 <uxListRemove+0x14>
	...

0800267c <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800267c:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800267e:	2300      	movs	r3, #0
 8002680:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002682:	4b0d      	ldr	r3, [pc, #52]	; (80026b8 <prvTaskExitError+0x3c>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800268a:	d008      	beq.n	800269e <prvTaskExitError+0x22>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800268c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002690:	f383 8811 	msr	BASEPRI, r3
 8002694:	f3bf 8f6f 	isb	sy
 8002698:	f3bf 8f4f 	dsb	sy
 800269c:	e7fe      	b.n	800269c <prvTaskExitError+0x20>
 800269e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026a2:	f383 8811 	msr	BASEPRI, r3
 80026a6:	f3bf 8f6f 	isb	sy
 80026aa:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80026ae:	9b01      	ldr	r3, [sp, #4]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d0fc      	beq.n	80026ae <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80026b4:	b002      	add	sp, #8
 80026b6:	4770      	bx	lr
 80026b8:	20000004 	.word	0x20000004

080026bc <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80026bc:	4808      	ldr	r0, [pc, #32]	; (80026e0 <prvPortStartFirstTask+0x24>)
 80026be:	6800      	ldr	r0, [r0, #0]
 80026c0:	6800      	ldr	r0, [r0, #0]
 80026c2:	f380 8808 	msr	MSP, r0
 80026c6:	f04f 0000 	mov.w	r0, #0
 80026ca:	f380 8814 	msr	CONTROL, r0
 80026ce:	b662      	cpsie	i
 80026d0:	b661      	cpsie	f
 80026d2:	f3bf 8f4f 	dsb	sy
 80026d6:	f3bf 8f6f 	isb	sy
 80026da:	df00      	svc	0
 80026dc:	bf00      	nop
 80026de:	0000      	.short	0x0000
 80026e0:	e000ed08 	.word	0xe000ed08

080026e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80026e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80026f4 <vPortEnableVFP+0x10>
 80026e8:	6801      	ldr	r1, [r0, #0]
 80026ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80026ee:	6001      	str	r1, [r0, #0]
 80026f0:	4770      	bx	lr
 80026f2:	0000      	.short	0x0000
 80026f4:	e000ed88 	.word	0xe000ed88

080026f8 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80026f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80026fc:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002700:	f021 0101 	bic.w	r1, r1, #1
 8002704:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002708:	4b05      	ldr	r3, [pc, #20]	; (8002720 <pxPortInitialiseStack+0x28>)
 800270a:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800270e:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8002712:	f06f 0302 	mvn.w	r3, #2
 8002716:	f840 3c24 	str.w	r3, [r0, #-36]
}
 800271a:	3844      	subs	r0, #68	; 0x44
 800271c:	4770      	bx	lr
 800271e:	bf00      	nop
 8002720:	0800267d 	.word	0x0800267d
	...

08002730 <SVC_Handler>:
	__asm volatile (
 8002730:	4b07      	ldr	r3, [pc, #28]	; (8002750 <pxCurrentTCBConst2>)
 8002732:	6819      	ldr	r1, [r3, #0]
 8002734:	6808      	ldr	r0, [r1, #0]
 8002736:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800273a:	f380 8809 	msr	PSP, r0
 800273e:	f3bf 8f6f 	isb	sy
 8002742:	f04f 0000 	mov.w	r0, #0
 8002746:	f380 8811 	msr	BASEPRI, r0
 800274a:	4770      	bx	lr
 800274c:	f3af 8000 	nop.w

08002750 <pxCurrentTCBConst2>:
 8002750:	20003cb8 	.word	0x20003cb8

08002754 <vPortEnterCritical>:
 8002754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002758:	f383 8811 	msr	BASEPRI, r3
 800275c:	f3bf 8f6f 	isb	sy
 8002760:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8002764:	4a0a      	ldr	r2, [pc, #40]	; (8002790 <vPortEnterCritical+0x3c>)
 8002766:	6813      	ldr	r3, [r2, #0]
 8002768:	3301      	adds	r3, #1
 800276a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800276c:	2b01      	cmp	r3, #1
 800276e:	d10d      	bne.n	800278c <vPortEnterCritical+0x38>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002770:	4b08      	ldr	r3, [pc, #32]	; (8002794 <vPortEnterCritical+0x40>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f013 0fff 	tst.w	r3, #255	; 0xff
 8002778:	d008      	beq.n	800278c <vPortEnterCritical+0x38>
 800277a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800277e:	f383 8811 	msr	BASEPRI, r3
 8002782:	f3bf 8f6f 	isb	sy
 8002786:	f3bf 8f4f 	dsb	sy
 800278a:	e7fe      	b.n	800278a <vPortEnterCritical+0x36>
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop
 8002790:	20000004 	.word	0x20000004
 8002794:	e000ed04 	.word	0xe000ed04

08002798 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8002798:	4b09      	ldr	r3, [pc, #36]	; (80027c0 <vPortExitCritical+0x28>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	b943      	cbnz	r3, 80027b0 <vPortExitCritical+0x18>
 800279e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027a2:	f383 8811 	msr	BASEPRI, r3
 80027a6:	f3bf 8f6f 	isb	sy
 80027aa:	f3bf 8f4f 	dsb	sy
 80027ae:	e7fe      	b.n	80027ae <vPortExitCritical+0x16>
	uxCriticalNesting--;
 80027b0:	3b01      	subs	r3, #1
 80027b2:	4a03      	ldr	r2, [pc, #12]	; (80027c0 <vPortExitCritical+0x28>)
 80027b4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80027b6:	b90b      	cbnz	r3, 80027bc <vPortExitCritical+0x24>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80027b8:	f383 8811 	msr	BASEPRI, r3
 80027bc:	4770      	bx	lr
 80027be:	bf00      	nop
 80027c0:	20000004 	.word	0x20000004
	...

080027d0 <PendSV_Handler>:
	__asm volatile
 80027d0:	f3ef 8009 	mrs	r0, PSP
 80027d4:	f3bf 8f6f 	isb	sy
 80027d8:	4b15      	ldr	r3, [pc, #84]	; (8002830 <pxCurrentTCBConst>)
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	f01e 0f10 	tst.w	lr, #16
 80027e0:	bf08      	it	eq
 80027e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80027e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027ea:	6010      	str	r0, [r2, #0]
 80027ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80027f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80027f4:	f380 8811 	msr	BASEPRI, r0
 80027f8:	f3bf 8f4f 	dsb	sy
 80027fc:	f3bf 8f6f 	isb	sy
 8002800:	f001 fa70 	bl	8003ce4 <vTaskSwitchContext>
 8002804:	f04f 0000 	mov.w	r0, #0
 8002808:	f380 8811 	msr	BASEPRI, r0
 800280c:	bc09      	pop	{r0, r3}
 800280e:	6819      	ldr	r1, [r3, #0]
 8002810:	6808      	ldr	r0, [r1, #0]
 8002812:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002816:	f01e 0f10 	tst.w	lr, #16
 800281a:	bf08      	it	eq
 800281c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002820:	f380 8809 	msr	PSP, r0
 8002824:	f3bf 8f6f 	isb	sy
 8002828:	4770      	bx	lr
 800282a:	bf00      	nop
 800282c:	f3af 8000 	nop.w

08002830 <pxCurrentTCBConst>:
 8002830:	20003cb8 	.word	0x20003cb8

08002834 <SysTick_Handler>:
{
 8002834:	b508      	push	{r3, lr}
	__asm volatile
 8002836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800283a:	f383 8811 	msr	BASEPRI, r3
 800283e:	f3bf 8f6f 	isb	sy
 8002842:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8002846:	f001 f943 	bl	8003ad0 <xTaskIncrementTick>
 800284a:	b118      	cbz	r0, 8002854 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800284c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002850:	4b02      	ldr	r3, [pc, #8]	; (800285c <SysTick_Handler+0x28>)
 8002852:	601a      	str	r2, [r3, #0]
	__asm volatile
 8002854:	2300      	movs	r3, #0
 8002856:	f383 8811 	msr	BASEPRI, r3
 800285a:	bd08      	pop	{r3, pc}
 800285c:	e000ed04 	.word	0xe000ed04

08002860 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002860:	4a08      	ldr	r2, [pc, #32]	; (8002884 <vPortSetupTimerInterrupt+0x24>)
 8002862:	2300      	movs	r3, #0
 8002864:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002866:	4908      	ldr	r1, [pc, #32]	; (8002888 <vPortSetupTimerInterrupt+0x28>)
 8002868:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800286a:	4b08      	ldr	r3, [pc, #32]	; (800288c <vPortSetupTimerInterrupt+0x2c>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4908      	ldr	r1, [pc, #32]	; (8002890 <vPortSetupTimerInterrupt+0x30>)
 8002870:	fba1 1303 	umull	r1, r3, r1, r3
 8002874:	099b      	lsrs	r3, r3, #6
 8002876:	3b01      	subs	r3, #1
 8002878:	4906      	ldr	r1, [pc, #24]	; (8002894 <vPortSetupTimerInterrupt+0x34>)
 800287a:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800287c:	2307      	movs	r3, #7
 800287e:	6013      	str	r3, [r2, #0]
 8002880:	4770      	bx	lr
 8002882:	bf00      	nop
 8002884:	e000e010 	.word	0xe000e010
 8002888:	e000e018 	.word	0xe000e018
 800288c:	20000014 	.word	0x20000014
 8002890:	10624dd3 	.word	0x10624dd3
 8002894:	e000e014 	.word	0xe000e014

08002898 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002898:	4b3a      	ldr	r3, [pc, #232]	; (8002984 <xPortStartScheduler+0xec>)
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	4b3a      	ldr	r3, [pc, #232]	; (8002988 <xPortStartScheduler+0xf0>)
 800289e:	429a      	cmp	r2, r3
 80028a0:	d108      	bne.n	80028b4 <xPortStartScheduler+0x1c>
	__asm volatile
 80028a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028a6:	f383 8811 	msr	BASEPRI, r3
 80028aa:	f3bf 8f6f 	isb	sy
 80028ae:	f3bf 8f4f 	dsb	sy
 80028b2:	e7fe      	b.n	80028b2 <xPortStartScheduler+0x1a>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80028b4:	4b33      	ldr	r3, [pc, #204]	; (8002984 <xPortStartScheduler+0xec>)
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	4b34      	ldr	r3, [pc, #208]	; (800298c <xPortStartScheduler+0xf4>)
 80028ba:	429a      	cmp	r2, r3
 80028bc:	d108      	bne.n	80028d0 <xPortStartScheduler+0x38>
 80028be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028c2:	f383 8811 	msr	BASEPRI, r3
 80028c6:	f3bf 8f6f 	isb	sy
 80028ca:	f3bf 8f4f 	dsb	sy
 80028ce:	e7fe      	b.n	80028ce <xPortStartScheduler+0x36>
{
 80028d0:	b510      	push	{r4, lr}
 80028d2:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80028d4:	4b2e      	ldr	r3, [pc, #184]	; (8002990 <xPortStartScheduler+0xf8>)
 80028d6:	781a      	ldrb	r2, [r3, #0]
 80028d8:	b2d2      	uxtb	r2, r2
 80028da:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80028dc:	22ff      	movs	r2, #255	; 0xff
 80028de:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80028e0:	781b      	ldrb	r3, [r3, #0]
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80028e8:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80028ec:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80028f0:	4a28      	ldr	r2, [pc, #160]	; (8002994 <xPortStartScheduler+0xfc>)
 80028f2:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80028f4:	2207      	movs	r2, #7
 80028f6:	4b28      	ldr	r3, [pc, #160]	; (8002998 <xPortStartScheduler+0x100>)
 80028f8:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80028fa:	e009      	b.n	8002910 <xPortStartScheduler+0x78>
			ulMaxPRIGROUPValue--;
 80028fc:	4a26      	ldr	r2, [pc, #152]	; (8002998 <xPortStartScheduler+0x100>)
 80028fe:	6813      	ldr	r3, [r2, #0]
 8002900:	3b01      	subs	r3, #1
 8002902:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002904:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8002908:	005b      	lsls	r3, r3, #1
 800290a:	b2db      	uxtb	r3, r3
 800290c:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002910:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8002914:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002918:	d1f0      	bne.n	80028fc <xPortStartScheduler+0x64>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800291a:	4b1f      	ldr	r3, [pc, #124]	; (8002998 <xPortStartScheduler+0x100>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	2b03      	cmp	r3, #3
 8002920:	d008      	beq.n	8002934 <xPortStartScheduler+0x9c>
 8002922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002926:	f383 8811 	msr	BASEPRI, r3
 800292a:	f3bf 8f6f 	isb	sy
 800292e:	f3bf 8f4f 	dsb	sy
 8002932:	e7fe      	b.n	8002932 <xPortStartScheduler+0x9a>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002934:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002936:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800293a:	4a17      	ldr	r2, [pc, #92]	; (8002998 <xPortStartScheduler+0x100>)
 800293c:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800293e:	9b01      	ldr	r3, [sp, #4]
 8002940:	b2db      	uxtb	r3, r3
 8002942:	4a13      	ldr	r2, [pc, #76]	; (8002990 <xPortStartScheduler+0xf8>)
 8002944:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002946:	4b15      	ldr	r3, [pc, #84]	; (800299c <xPortStartScheduler+0x104>)
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800294e:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8002956:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8002958:	f7ff ff82 	bl	8002860 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800295c:	2400      	movs	r4, #0
 800295e:	4b10      	ldr	r3, [pc, #64]	; (80029a0 <xPortStartScheduler+0x108>)
 8002960:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 8002962:	f7ff febf 	bl	80026e4 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002966:	4a0f      	ldr	r2, [pc, #60]	; (80029a4 <xPortStartScheduler+0x10c>)
 8002968:	6813      	ldr	r3, [r2, #0]
 800296a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800296e:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8002970:	f7ff fea4 	bl	80026bc <prvPortStartFirstTask>
	vTaskSwitchContext();
 8002974:	f001 f9b6 	bl	8003ce4 <vTaskSwitchContext>
	prvTaskExitError();
 8002978:	f7ff fe80 	bl	800267c <prvTaskExitError>
}
 800297c:	4620      	mov	r0, r4
 800297e:	b002      	add	sp, #8
 8002980:	bd10      	pop	{r4, pc}
 8002982:	bf00      	nop
 8002984:	e000ed00 	.word	0xe000ed00
 8002988:	410fc271 	.word	0x410fc271
 800298c:	410fc270 	.word	0x410fc270
 8002990:	e000e400 	.word	0xe000e400
 8002994:	20000098 	.word	0x20000098
 8002998:	2000009c 	.word	0x2000009c
 800299c:	e000ed20 	.word	0xe000ed20
 80029a0:	20000004 	.word	0x20000004
 80029a4:	e000ef34 	.word	0xe000ef34

080029a8 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80029a8:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80029ac:	2b0f      	cmp	r3, #15
 80029ae:	d90f      	bls.n	80029d0 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80029b0:	4a10      	ldr	r2, [pc, #64]	; (80029f4 <vPortValidateInterruptPriority+0x4c>)
 80029b2:	5c9b      	ldrb	r3, [r3, r2]
 80029b4:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80029b6:	4a10      	ldr	r2, [pc, #64]	; (80029f8 <vPortValidateInterruptPriority+0x50>)
 80029b8:	7812      	ldrb	r2, [r2, #0]
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d208      	bcs.n	80029d0 <vPortValidateInterruptPriority+0x28>
 80029be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029c2:	f383 8811 	msr	BASEPRI, r3
 80029c6:	f3bf 8f6f 	isb	sy
 80029ca:	f3bf 8f4f 	dsb	sy
 80029ce:	e7fe      	b.n	80029ce <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80029d0:	4b0a      	ldr	r3, [pc, #40]	; (80029fc <vPortValidateInterruptPriority+0x54>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80029d8:	4a09      	ldr	r2, [pc, #36]	; (8002a00 <vPortValidateInterruptPriority+0x58>)
 80029da:	6812      	ldr	r2, [r2, #0]
 80029dc:	4293      	cmp	r3, r2
 80029de:	d908      	bls.n	80029f2 <vPortValidateInterruptPriority+0x4a>
 80029e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029e4:	f383 8811 	msr	BASEPRI, r3
 80029e8:	f3bf 8f6f 	isb	sy
 80029ec:	f3bf 8f4f 	dsb	sy
 80029f0:	e7fe      	b.n	80029f0 <vPortValidateInterruptPriority+0x48>
 80029f2:	4770      	bx	lr
 80029f4:	e000e3f0 	.word	0xe000e3f0
 80029f8:	20000098 	.word	0x20000098
 80029fc:	e000ed0c 	.word	0xe000ed0c
 8002a00:	2000009c 	.word	0x2000009c

08002a04 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8002a04:	4a12      	ldr	r2, [pc, #72]	; (8002a50 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002a06:	f012 0f07 	tst.w	r2, #7
 8002a0a:	d01e      	beq.n	8002a4a <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002a0c:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002a0e:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002a12:	f5c1 5370 	rsb	r3, r1, #15360	; 0x3c00
 8002a16:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002a18:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002a1a:	480e      	ldr	r0, [pc, #56]	; (8002a54 <prvHeapInit+0x50>)
 8002a1c:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8002a1e:	2100      	movs	r1, #0
 8002a20:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002a22:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8002a24:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002a26:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 8002a2a:	480b      	ldr	r0, [pc, #44]	; (8002a58 <prvHeapInit+0x54>)
 8002a2c:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 8002a2e:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8002a30:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002a32:	1a99      	subs	r1, r3, r2
 8002a34:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002a36:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002a38:	4b08      	ldr	r3, [pc, #32]	; (8002a5c <prvHeapInit+0x58>)
 8002a3a:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002a3c:	4b08      	ldr	r3, [pc, #32]	; (8002a60 <prvHeapInit+0x5c>)
 8002a3e:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002a40:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002a44:	4b07      	ldr	r3, [pc, #28]	; (8002a64 <prvHeapInit+0x60>)
 8002a46:	601a      	str	r2, [r3, #0]
 8002a48:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002a4a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8002a4e:	e7e4      	b.n	8002a1a <prvHeapInit+0x16>
 8002a50:	200000a4 	.word	0x200000a4
 8002a54:	20003cb0 	.word	0x20003cb0
 8002a58:	200000a0 	.word	0x200000a0
 8002a5c:	20003cac 	.word	0x20003cac
 8002a60:	20003ca8 	.word	0x20003ca8
 8002a64:	20003ca4 	.word	0x20003ca4

08002a68 <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002a68:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002a6a:	4b13      	ldr	r3, [pc, #76]	; (8002ab8 <prvInsertBlockIntoFreeList+0x50>)
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	4282      	cmp	r2, r0
 8002a70:	d31b      	bcc.n	8002aaa <prvInsertBlockIntoFreeList+0x42>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002a72:	6859      	ldr	r1, [r3, #4]
 8002a74:	185c      	adds	r4, r3, r1
 8002a76:	42a0      	cmp	r0, r4
 8002a78:	d103      	bne.n	8002a82 <prvInsertBlockIntoFreeList+0x1a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002a7a:	6840      	ldr	r0, [r0, #4]
 8002a7c:	4401      	add	r1, r0
 8002a7e:	6059      	str	r1, [r3, #4]
		pxBlockToInsert = pxIterator;
 8002a80:	4618      	mov	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002a82:	6841      	ldr	r1, [r0, #4]
 8002a84:	1844      	adds	r4, r0, r1
 8002a86:	42a2      	cmp	r2, r4
 8002a88:	d113      	bne.n	8002ab2 <prvInsertBlockIntoFreeList+0x4a>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8002a8a:	4c0c      	ldr	r4, [pc, #48]	; (8002abc <prvInsertBlockIntoFreeList+0x54>)
 8002a8c:	6824      	ldr	r4, [r4, #0]
 8002a8e:	42a2      	cmp	r2, r4
 8002a90:	d00d      	beq.n	8002aae <prvInsertBlockIntoFreeList+0x46>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002a92:	6852      	ldr	r2, [r2, #4]
 8002a94:	4411      	add	r1, r2
 8002a96:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	6812      	ldr	r2, [r2, #0]
 8002a9c:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002a9e:	4298      	cmp	r0, r3
 8002aa0:	d000      	beq.n	8002aa4 <prvInsertBlockIntoFreeList+0x3c>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002aa2:	6018      	str	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002aa4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002aa8:	4770      	bx	lr
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002aaa:	4613      	mov	r3, r2
 8002aac:	e7de      	b.n	8002a6c <prvInsertBlockIntoFreeList+0x4>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002aae:	6004      	str	r4, [r0, #0]
 8002ab0:	e7f5      	b.n	8002a9e <prvInsertBlockIntoFreeList+0x36>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002ab2:	6002      	str	r2, [r0, #0]
 8002ab4:	e7f3      	b.n	8002a9e <prvInsertBlockIntoFreeList+0x36>
 8002ab6:	bf00      	nop
 8002ab8:	20003cb0 	.word	0x20003cb0
 8002abc:	200000a0 	.word	0x200000a0

08002ac0 <pvPortMalloc>:
{
 8002ac0:	b570      	push	{r4, r5, r6, lr}
 8002ac2:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8002ac4:	f000 ffee 	bl	8003aa4 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8002ac8:	4b3a      	ldr	r3, [pc, #232]	; (8002bb4 <pvPortMalloc+0xf4>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	b1bb      	cbz	r3, 8002afe <pvPortMalloc+0x3e>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002ace:	4b3a      	ldr	r3, [pc, #232]	; (8002bb8 <pvPortMalloc+0xf8>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	421c      	tst	r4, r3
 8002ad4:	d163      	bne.n	8002b9e <pvPortMalloc+0xde>
			if( xWantedSize > 0 )
 8002ad6:	b1ac      	cbz	r4, 8002b04 <pvPortMalloc+0x44>
				xWantedSize += xHeapStructSize;
 8002ad8:	3408      	adds	r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002ada:	f014 0f07 	tst.w	r4, #7
 8002ade:	d011      	beq.n	8002b04 <pvPortMalloc+0x44>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002ae0:	f024 0407 	bic.w	r4, r4, #7
 8002ae4:	3408      	adds	r4, #8
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002ae6:	f004 0307 	and.w	r3, r4, #7
 8002aea:	b15b      	cbz	r3, 8002b04 <pvPortMalloc+0x44>
 8002aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002af0:	f383 8811 	msr	BASEPRI, r3
 8002af4:	f3bf 8f6f 	isb	sy
 8002af8:	f3bf 8f4f 	dsb	sy
 8002afc:	e7fe      	b.n	8002afc <pvPortMalloc+0x3c>
			prvHeapInit();
 8002afe:	f7ff ff81 	bl	8002a04 <prvHeapInit>
 8002b02:	e7e4      	b.n	8002ace <pvPortMalloc+0xe>
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002b04:	2c00      	cmp	r4, #0
 8002b06:	d04c      	beq.n	8002ba2 <pvPortMalloc+0xe2>
 8002b08:	4b2c      	ldr	r3, [pc, #176]	; (8002bbc <pvPortMalloc+0xfc>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	429c      	cmp	r4, r3
 8002b0e:	d84a      	bhi.n	8002ba6 <pvPortMalloc+0xe6>
				pxBlock = xStart.pxNextFreeBlock;
 8002b10:	4b2b      	ldr	r3, [pc, #172]	; (8002bc0 <pvPortMalloc+0x100>)
 8002b12:	681d      	ldr	r5, [r3, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002b14:	e001      	b.n	8002b1a <pvPortMalloc+0x5a>
					pxPreviousBlock = pxBlock;
 8002b16:	462b      	mov	r3, r5
					pxBlock = pxBlock->pxNextFreeBlock;
 8002b18:	4615      	mov	r5, r2
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002b1a:	686a      	ldr	r2, [r5, #4]
 8002b1c:	4294      	cmp	r4, r2
 8002b1e:	d902      	bls.n	8002b26 <pvPortMalloc+0x66>
 8002b20:	682a      	ldr	r2, [r5, #0]
 8002b22:	2a00      	cmp	r2, #0
 8002b24:	d1f7      	bne.n	8002b16 <pvPortMalloc+0x56>
				if( pxBlock != pxEnd )
 8002b26:	4a23      	ldr	r2, [pc, #140]	; (8002bb4 <pvPortMalloc+0xf4>)
 8002b28:	6812      	ldr	r2, [r2, #0]
 8002b2a:	4295      	cmp	r5, r2
 8002b2c:	d03d      	beq.n	8002baa <pvPortMalloc+0xea>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002b2e:	681e      	ldr	r6, [r3, #0]
 8002b30:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002b32:	682a      	ldr	r2, [r5, #0]
 8002b34:	601a      	str	r2, [r3, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002b36:	686b      	ldr	r3, [r5, #4]
 8002b38:	1b1b      	subs	r3, r3, r4
 8002b3a:	2b10      	cmp	r3, #16
 8002b3c:	d910      	bls.n	8002b60 <pvPortMalloc+0xa0>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002b3e:	1928      	adds	r0, r5, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002b40:	f010 0f07 	tst.w	r0, #7
 8002b44:	d008      	beq.n	8002b58 <pvPortMalloc+0x98>
 8002b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b4a:	f383 8811 	msr	BASEPRI, r3
 8002b4e:	f3bf 8f6f 	isb	sy
 8002b52:	f3bf 8f4f 	dsb	sy
 8002b56:	e7fe      	b.n	8002b56 <pvPortMalloc+0x96>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002b58:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002b5a:	606c      	str	r4, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002b5c:	f7ff ff84 	bl	8002a68 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002b60:	686a      	ldr	r2, [r5, #4]
 8002b62:	4916      	ldr	r1, [pc, #88]	; (8002bbc <pvPortMalloc+0xfc>)
 8002b64:	680b      	ldr	r3, [r1, #0]
 8002b66:	1a9b      	subs	r3, r3, r2
 8002b68:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002b6a:	4916      	ldr	r1, [pc, #88]	; (8002bc4 <pvPortMalloc+0x104>)
 8002b6c:	6809      	ldr	r1, [r1, #0]
 8002b6e:	428b      	cmp	r3, r1
 8002b70:	d201      	bcs.n	8002b76 <pvPortMalloc+0xb6>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002b72:	4914      	ldr	r1, [pc, #80]	; (8002bc4 <pvPortMalloc+0x104>)
 8002b74:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002b76:	4b10      	ldr	r3, [pc, #64]	; (8002bb8 <pvPortMalloc+0xf8>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	606b      	str	r3, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8002b82:	f001 f81b 	bl	8003bbc <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002b86:	f016 0f07 	tst.w	r6, #7
 8002b8a:	d010      	beq.n	8002bae <pvPortMalloc+0xee>
 8002b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b90:	f383 8811 	msr	BASEPRI, r3
 8002b94:	f3bf 8f6f 	isb	sy
 8002b98:	f3bf 8f4f 	dsb	sy
 8002b9c:	e7fe      	b.n	8002b9c <pvPortMalloc+0xdc>
void *pvReturn = NULL;
 8002b9e:	2600      	movs	r6, #0
 8002ba0:	e7ef      	b.n	8002b82 <pvPortMalloc+0xc2>
 8002ba2:	2600      	movs	r6, #0
 8002ba4:	e7ed      	b.n	8002b82 <pvPortMalloc+0xc2>
 8002ba6:	2600      	movs	r6, #0
 8002ba8:	e7eb      	b.n	8002b82 <pvPortMalloc+0xc2>
 8002baa:	2600      	movs	r6, #0
 8002bac:	e7e9      	b.n	8002b82 <pvPortMalloc+0xc2>
}
 8002bae:	4630      	mov	r0, r6
 8002bb0:	bd70      	pop	{r4, r5, r6, pc}
 8002bb2:	bf00      	nop
 8002bb4:	200000a0 	.word	0x200000a0
 8002bb8:	20003ca4 	.word	0x20003ca4
 8002bbc:	20003ca8 	.word	0x20003ca8
 8002bc0:	20003cb0 	.word	0x20003cb0
 8002bc4:	20003cac 	.word	0x20003cac

08002bc8 <vPortFree>:
	if( pv != NULL )
 8002bc8:	b380      	cbz	r0, 8002c2c <vPortFree+0x64>
{
 8002bca:	b538      	push	{r3, r4, r5, lr}
 8002bcc:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 8002bce:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002bd2:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8002bd6:	4916      	ldr	r1, [pc, #88]	; (8002c30 <vPortFree+0x68>)
 8002bd8:	6809      	ldr	r1, [r1, #0]
 8002bda:	420a      	tst	r2, r1
 8002bdc:	d108      	bne.n	8002bf0 <vPortFree+0x28>
 8002bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002be2:	f383 8811 	msr	BASEPRI, r3
 8002be6:	f3bf 8f6f 	isb	sy
 8002bea:	f3bf 8f4f 	dsb	sy
 8002bee:	e7fe      	b.n	8002bee <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002bf0:	f850 0c08 	ldr.w	r0, [r0, #-8]
 8002bf4:	b140      	cbz	r0, 8002c08 <vPortFree+0x40>
 8002bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bfa:	f383 8811 	msr	BASEPRI, r3
 8002bfe:	f3bf 8f6f 	isb	sy
 8002c02:	f3bf 8f4f 	dsb	sy
 8002c06:	e7fe      	b.n	8002c06 <vPortFree+0x3e>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002c08:	ea22 0201 	bic.w	r2, r2, r1
 8002c0c:	f844 2c04 	str.w	r2, [r4, #-4]
				vTaskSuspendAll();
 8002c10:	f000 ff48 	bl	8003aa4 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002c14:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8002c18:	4a06      	ldr	r2, [pc, #24]	; (8002c34 <vPortFree+0x6c>)
 8002c1a:	6813      	ldr	r3, [r2, #0]
 8002c1c:	440b      	add	r3, r1
 8002c1e:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002c20:	4628      	mov	r0, r5
 8002c22:	f7ff ff21 	bl	8002a68 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 8002c26:	f000 ffc9 	bl	8003bbc <xTaskResumeAll>
 8002c2a:	bd38      	pop	{r3, r4, r5, pc}
 8002c2c:	4770      	bx	lr
 8002c2e:	bf00      	nop
 8002c30:	20003ca4 	.word	0x20003ca4
 8002c34:	20003ca8 	.word	0x20003ca8

08002c38 <prvGetDisinheritPriorityAfterTimeout>:
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8002c38:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002c3a:	b123      	cbz	r3, 8002c46 <prvGetDisinheritPriorityAfterTimeout+0xe>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8002c3c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002c3e:	6818      	ldr	r0, [r3, #0]
 8002c40:	f1c0 0007 	rsb	r0, r0, #7
 8002c44:	4770      	bx	lr
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8002c46:	2000      	movs	r0, #0
		}

		return uxHighestPriorityOfWaitingTasks;
	}
 8002c48:	4770      	bx	lr

08002c4a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002c4a:	b510      	push	{r4, lr}
 8002c4c:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002c4e:	f7ff fd81 	bl	8002754 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002c52:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002c54:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d004      	beq.n	8002c64 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 8002c5a:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 8002c5c:	f7ff fd9c 	bl	8002798 <vPortExitCritical>

	return xReturn;
}
 8002c60:	4620      	mov	r0, r4
 8002c62:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 8002c64:	2401      	movs	r4, #1
 8002c66:	e7f9      	b.n	8002c5c <prvIsQueueFull+0x12>

08002c68 <prvIsQueueEmpty>:
{
 8002c68:	b510      	push	{r4, lr}
 8002c6a:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8002c6c:	f7ff fd72 	bl	8002754 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002c70:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002c72:	b123      	cbz	r3, 8002c7e <prvIsQueueEmpty+0x16>
			xReturn = pdFALSE;
 8002c74:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8002c76:	f7ff fd8f 	bl	8002798 <vPortExitCritical>
}
 8002c7a:	4620      	mov	r0, r4
 8002c7c:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 8002c7e:	2401      	movs	r4, #1
 8002c80:	e7f9      	b.n	8002c76 <prvIsQueueEmpty+0xe>

08002c82 <prvCopyDataToQueue>:
{
 8002c82:	b570      	push	{r4, r5, r6, lr}
 8002c84:	4604      	mov	r4, r0
 8002c86:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002c88:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002c8a:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8002c8c:	b94a      	cbnz	r2, 8002ca2 <prvCopyDataToQueue+0x20>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002c8e:	6803      	ldr	r3, [r0, #0]
 8002c90:	bb53      	cbnz	r3, 8002ce8 <prvCopyDataToQueue+0x66>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8002c92:	6840      	ldr	r0, [r0, #4]
 8002c94:	f001 f994 	bl	8003fc0 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	6063      	str	r3, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002c9c:	3501      	adds	r5, #1
 8002c9e:	63a5      	str	r5, [r4, #56]	; 0x38
}
 8002ca0:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8002ca2:	b96e      	cbnz	r6, 8002cc0 <prvCopyDataToQueue+0x3e>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002ca4:	6880      	ldr	r0, [r0, #8]
 8002ca6:	f00a fe14 	bl	800d8d2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002caa:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002cac:	68a3      	ldr	r3, [r4, #8]
 8002cae:	4413      	add	r3, r2
 8002cb0:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002cb2:	6862      	ldr	r2, [r4, #4]
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d319      	bcc.n	8002cec <prvCopyDataToQueue+0x6a>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002cb8:	6823      	ldr	r3, [r4, #0]
 8002cba:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 8002cbc:	2000      	movs	r0, #0
 8002cbe:	e7ed      	b.n	8002c9c <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002cc0:	68c0      	ldr	r0, [r0, #12]
 8002cc2:	f00a fe06 	bl	800d8d2 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002cc6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002cc8:	425b      	negs	r3, r3
 8002cca:	68e2      	ldr	r2, [r4, #12]
 8002ccc:	441a      	add	r2, r3
 8002cce:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002cd0:	6821      	ldr	r1, [r4, #0]
 8002cd2:	428a      	cmp	r2, r1
 8002cd4:	d202      	bcs.n	8002cdc <prvCopyDataToQueue+0x5a>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8002cd6:	6862      	ldr	r2, [r4, #4]
 8002cd8:	4413      	add	r3, r2
 8002cda:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8002cdc:	2e02      	cmp	r6, #2
 8002cde:	d107      	bne.n	8002cf0 <prvCopyDataToQueue+0x6e>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002ce0:	b145      	cbz	r5, 8002cf4 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 8002ce2:	3d01      	subs	r5, #1
BaseType_t xReturn = pdFALSE;
 8002ce4:	2000      	movs	r0, #0
 8002ce6:	e7d9      	b.n	8002c9c <prvCopyDataToQueue+0x1a>
 8002ce8:	2000      	movs	r0, #0
 8002cea:	e7d7      	b.n	8002c9c <prvCopyDataToQueue+0x1a>
 8002cec:	2000      	movs	r0, #0
 8002cee:	e7d5      	b.n	8002c9c <prvCopyDataToQueue+0x1a>
 8002cf0:	2000      	movs	r0, #0
 8002cf2:	e7d3      	b.n	8002c9c <prvCopyDataToQueue+0x1a>
 8002cf4:	2000      	movs	r0, #0
 8002cf6:	e7d1      	b.n	8002c9c <prvCopyDataToQueue+0x1a>

08002cf8 <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002cf8:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8002cfa:	b172      	cbz	r2, 8002d1a <prvCopyDataFromQueue+0x22>
{
 8002cfc:	b510      	push	{r4, lr}
 8002cfe:	4603      	mov	r3, r0
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002d00:	68c4      	ldr	r4, [r0, #12]
 8002d02:	4414      	add	r4, r2
 8002d04:	60c4      	str	r4, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002d06:	6840      	ldr	r0, [r0, #4]
 8002d08:	4284      	cmp	r4, r0
 8002d0a:	d301      	bcc.n	8002d10 <prvCopyDataFromQueue+0x18>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002d0c:	6818      	ldr	r0, [r3, #0]
 8002d0e:	60d8      	str	r0, [r3, #12]
 8002d10:	4608      	mov	r0, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8002d12:	68d9      	ldr	r1, [r3, #12]
 8002d14:	f00a fddd 	bl	800d8d2 <memcpy>
 8002d18:	bd10      	pop	{r4, pc}
 8002d1a:	4770      	bx	lr

08002d1c <prvUnlockQueue>:
{
 8002d1c:	b538      	push	{r3, r4, r5, lr}
 8002d1e:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 8002d20:	f7ff fd18 	bl	8002754 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8002d24:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 8002d28:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002d2a:	e001      	b.n	8002d30 <prvUnlockQueue+0x14>
			--cTxLock;
 8002d2c:	3c01      	subs	r4, #1
 8002d2e:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002d30:	2c00      	cmp	r4, #0
 8002d32:	dd0a      	ble.n	8002d4a <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002d34:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8002d36:	b143      	cbz	r3, 8002d4a <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002d38:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8002d3c:	f001 f838 	bl	8003db0 <xTaskRemoveFromEventList>
 8002d40:	2800      	cmp	r0, #0
 8002d42:	d0f3      	beq.n	8002d2c <prvUnlockQueue+0x10>
						vTaskMissedYield();
 8002d44:	f001 f8c6 	bl	8003ed4 <vTaskMissedYield>
 8002d48:	e7f0      	b.n	8002d2c <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 8002d4a:	23ff      	movs	r3, #255	; 0xff
 8002d4c:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 8002d50:	f7ff fd22 	bl	8002798 <vPortExitCritical>
	taskENTER_CRITICAL();
 8002d54:	f7ff fcfe 	bl	8002754 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8002d58:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 8002d5c:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002d5e:	e001      	b.n	8002d64 <prvUnlockQueue+0x48>
				--cRxLock;
 8002d60:	3c01      	subs	r4, #1
 8002d62:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002d64:	2c00      	cmp	r4, #0
 8002d66:	dd0a      	ble.n	8002d7e <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002d68:	692b      	ldr	r3, [r5, #16]
 8002d6a:	b143      	cbz	r3, 8002d7e <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002d6c:	f105 0010 	add.w	r0, r5, #16
 8002d70:	f001 f81e 	bl	8003db0 <xTaskRemoveFromEventList>
 8002d74:	2800      	cmp	r0, #0
 8002d76:	d0f3      	beq.n	8002d60 <prvUnlockQueue+0x44>
					vTaskMissedYield();
 8002d78:	f001 f8ac 	bl	8003ed4 <vTaskMissedYield>
 8002d7c:	e7f0      	b.n	8002d60 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 8002d7e:	23ff      	movs	r3, #255	; 0xff
 8002d80:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
 8002d84:	f7ff fd08 	bl	8002798 <vPortExitCritical>
 8002d88:	bd38      	pop	{r3, r4, r5, pc}

08002d8a <xQueueGenericReset>:
{
 8002d8a:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 8002d8c:	b1e8      	cbz	r0, 8002dca <xQueueGenericReset+0x40>
 8002d8e:	4604      	mov	r4, r0
 8002d90:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
 8002d92:	f7ff fcdf 	bl	8002754 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002d96:	6821      	ldr	r1, [r4, #0]
 8002d98:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002d9a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002d9c:	fb03 1002 	mla	r0, r3, r2, r1
 8002da0:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002da2:	2000      	movs	r0, #0
 8002da4:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002da6:	60a1      	str	r1, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002da8:	3a01      	subs	r2, #1
 8002daa:	fb02 1303 	mla	r3, r2, r3, r1
 8002dae:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002db0:	23ff      	movs	r3, #255	; 0xff
 8002db2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002db6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8002dba:	b97d      	cbnz	r5, 8002ddc <xQueueGenericReset+0x52>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002dbc:	6923      	ldr	r3, [r4, #16]
 8002dbe:	b1ab      	cbz	r3, 8002dec <xQueueGenericReset+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002dc0:	f104 0010 	add.w	r0, r4, #16
 8002dc4:	f000 fff4 	bl	8003db0 <xTaskRemoveFromEventList>
 8002dc8:	e010      	b.n	8002dec <xQueueGenericReset+0x62>
 8002dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dce:	f383 8811 	msr	BASEPRI, r3
 8002dd2:	f3bf 8f6f 	isb	sy
 8002dd6:	f3bf 8f4f 	dsb	sy
 8002dda:	e7fe      	b.n	8002dda <xQueueGenericReset+0x50>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002ddc:	f104 0010 	add.w	r0, r4, #16
 8002de0:	f7ff fc03 	bl	80025ea <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002de4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002de8:	f7ff fbff 	bl	80025ea <vListInitialise>
	taskEXIT_CRITICAL();
 8002dec:	f7ff fcd4 	bl	8002798 <vPortExitCritical>
}
 8002df0:	2001      	movs	r0, #1
 8002df2:	bd38      	pop	{r3, r4, r5, pc}

08002df4 <prvInitialiseNewQueue>:
{
 8002df4:	b510      	push	{r4, lr}
 8002df6:	9b02      	ldr	r3, [sp, #8]
	if( uxItemSize == ( UBaseType_t ) 0 )
 8002df8:	460c      	mov	r4, r1
 8002dfa:	b139      	cbz	r1, 8002e0c <prvInitialiseNewQueue+0x18>
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002dfc:	601a      	str	r2, [r3, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8002dfe:	63d8      	str	r0, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002e00:	641c      	str	r4, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002e02:	2101      	movs	r1, #1
 8002e04:	4618      	mov	r0, r3
 8002e06:	f7ff ffc0 	bl	8002d8a <xQueueGenericReset>
 8002e0a:	bd10      	pop	{r4, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002e0c:	601b      	str	r3, [r3, #0]
 8002e0e:	e7f6      	b.n	8002dfe <prvInitialiseNewQueue+0xa>

08002e10 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002e10:	b940      	cbnz	r0, 8002e24 <xQueueGenericCreateStatic+0x14>
 8002e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e16:	f383 8811 	msr	BASEPRI, r3
 8002e1a:	f3bf 8f6f 	isb	sy
 8002e1e:	f3bf 8f4f 	dsb	sy
 8002e22:	e7fe      	b.n	8002e22 <xQueueGenericCreateStatic+0x12>
	{
 8002e24:	b510      	push	{r4, lr}
 8002e26:	b084      	sub	sp, #16
 8002e28:	4604      	mov	r4, r0
		configASSERT( pxStaticQueue != NULL );
 8002e2a:	b163      	cbz	r3, 8002e46 <xQueueGenericCreateStatic+0x36>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002e2c:	b1a2      	cbz	r2, 8002e58 <xQueueGenericCreateStatic+0x48>
 8002e2e:	b1a9      	cbz	r1, 8002e5c <xQueueGenericCreateStatic+0x4c>
 8002e30:	2001      	movs	r0, #1
 8002e32:	b9a8      	cbnz	r0, 8002e60 <xQueueGenericCreateStatic+0x50>
 8002e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e38:	f383 8811 	msr	BASEPRI, r3
 8002e3c:	f3bf 8f6f 	isb	sy
 8002e40:	f3bf 8f4f 	dsb	sy
 8002e44:	e7fe      	b.n	8002e44 <xQueueGenericCreateStatic+0x34>
 8002e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e4a:	f383 8811 	msr	BASEPRI, r3
 8002e4e:	f3bf 8f6f 	isb	sy
 8002e52:	f3bf 8f4f 	dsb	sy
 8002e56:	e7fe      	b.n	8002e56 <xQueueGenericCreateStatic+0x46>
 8002e58:	2001      	movs	r0, #1
 8002e5a:	e7ea      	b.n	8002e32 <xQueueGenericCreateStatic+0x22>
 8002e5c:	2000      	movs	r0, #0
 8002e5e:	e7e8      	b.n	8002e32 <xQueueGenericCreateStatic+0x22>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002e60:	b90a      	cbnz	r2, 8002e66 <xQueueGenericCreateStatic+0x56>
 8002e62:	b101      	cbz	r1, 8002e66 <xQueueGenericCreateStatic+0x56>
 8002e64:	2000      	movs	r0, #0
 8002e66:	b940      	cbnz	r0, 8002e7a <xQueueGenericCreateStatic+0x6a>
 8002e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e6c:	f383 8811 	msr	BASEPRI, r3
 8002e70:	f3bf 8f6f 	isb	sy
 8002e74:	f3bf 8f4f 	dsb	sy
 8002e78:	e7fe      	b.n	8002e78 <xQueueGenericCreateStatic+0x68>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002e7a:	2048      	movs	r0, #72	; 0x48
 8002e7c:	9003      	str	r0, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002e7e:	9803      	ldr	r0, [sp, #12]
 8002e80:	2848      	cmp	r0, #72	; 0x48
 8002e82:	d008      	beq.n	8002e96 <xQueueGenericCreateStatic+0x86>
 8002e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e88:	f383 8811 	msr	BASEPRI, r3
 8002e8c:	f3bf 8f6f 	isb	sy
 8002e90:	f3bf 8f4f 	dsb	sy
 8002e94:	e7fe      	b.n	8002e94 <xQueueGenericCreateStatic+0x84>
 8002e96:	4620      	mov	r0, r4
 8002e98:	461c      	mov	r4, r3
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002ea0:	9400      	str	r4, [sp, #0]
 8002ea2:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8002ea6:	f7ff ffa5 	bl	8002df4 <prvInitialiseNewQueue>
	}
 8002eaa:	4620      	mov	r0, r4
 8002eac:	b004      	add	sp, #16
 8002eae:	bd10      	pop	{r4, pc}

08002eb0 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002eb0:	b940      	cbnz	r0, 8002ec4 <xQueueGenericCreate+0x14>
 8002eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eb6:	f383 8811 	msr	BASEPRI, r3
 8002eba:	f3bf 8f6f 	isb	sy
 8002ebe:	f3bf 8f4f 	dsb	sy
 8002ec2:	e7fe      	b.n	8002ec2 <xQueueGenericCreate+0x12>
	{
 8002ec4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ec6:	b083      	sub	sp, #12
 8002ec8:	4606      	mov	r6, r0
		if( uxItemSize == ( UBaseType_t ) 0 )
 8002eca:	b111      	cbz	r1, 8002ed2 <xQueueGenericCreate+0x22>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ecc:	fb01 f000 	mul.w	r0, r1, r0
 8002ed0:	e000      	b.n	8002ed4 <xQueueGenericCreate+0x24>
			xQueueSizeInBytes = ( size_t ) 0;
 8002ed2:	2000      	movs	r0, #0
 8002ed4:	4617      	mov	r7, r2
 8002ed6:	460c      	mov	r4, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8002ed8:	3048      	adds	r0, #72	; 0x48
 8002eda:	f7ff fdf1 	bl	8002ac0 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8002ede:	4605      	mov	r5, r0
 8002ee0:	b150      	cbz	r0, 8002ef8 <xQueueGenericCreate+0x48>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002ee8:	9000      	str	r0, [sp, #0]
 8002eea:	463b      	mov	r3, r7
 8002eec:	f100 0248 	add.w	r2, r0, #72	; 0x48
 8002ef0:	4621      	mov	r1, r4
 8002ef2:	4630      	mov	r0, r6
 8002ef4:	f7ff ff7e 	bl	8002df4 <prvInitialiseNewQueue>
	}
 8002ef8:	4628      	mov	r0, r5
 8002efa:	b003      	add	sp, #12
 8002efc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002f00 <xQueueGenericSend>:
{
 8002f00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f02:	b085      	sub	sp, #20
 8002f04:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8002f06:	b160      	cbz	r0, 8002f22 <xQueueGenericSend+0x22>
 8002f08:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002f0a:	b199      	cbz	r1, 8002f34 <xQueueGenericSend+0x34>
 8002f0c:	2501      	movs	r5, #1
 8002f0e:	b9bd      	cbnz	r5, 8002f40 <xQueueGenericSend+0x40>
 8002f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f14:	f383 8811 	msr	BASEPRI, r3
 8002f18:	f3bf 8f6f 	isb	sy
 8002f1c:	f3bf 8f4f 	dsb	sy
 8002f20:	e7fe      	b.n	8002f20 <xQueueGenericSend+0x20>
 8002f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f26:	f383 8811 	msr	BASEPRI, r3
 8002f2a:	f3bf 8f6f 	isb	sy
 8002f2e:	f3bf 8f4f 	dsb	sy
 8002f32:	e7fe      	b.n	8002f32 <xQueueGenericSend+0x32>
 8002f34:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8002f36:	b90a      	cbnz	r2, 8002f3c <xQueueGenericSend+0x3c>
 8002f38:	2501      	movs	r5, #1
 8002f3a:	e7e8      	b.n	8002f0e <xQueueGenericSend+0xe>
 8002f3c:	2500      	movs	r5, #0
 8002f3e:	e7e6      	b.n	8002f0e <xQueueGenericSend+0xe>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002f40:	2b02      	cmp	r3, #2
 8002f42:	d009      	beq.n	8002f58 <xQueueGenericSend+0x58>
 8002f44:	b96d      	cbnz	r5, 8002f62 <xQueueGenericSend+0x62>
 8002f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f4a:	f383 8811 	msr	BASEPRI, r3
 8002f4e:	f3bf 8f6f 	isb	sy
 8002f52:	f3bf 8f4f 	dsb	sy
 8002f56:	e7fe      	b.n	8002f56 <xQueueGenericSend+0x56>
 8002f58:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002f5a:	2a01      	cmp	r2, #1
 8002f5c:	d0f2      	beq.n	8002f44 <xQueueGenericSend+0x44>
 8002f5e:	2500      	movs	r5, #0
 8002f60:	e7f0      	b.n	8002f44 <xQueueGenericSend+0x44>
 8002f62:	461e      	mov	r6, r3
 8002f64:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002f66:	f000 ffbb 	bl	8003ee0 <xTaskGetSchedulerState>
 8002f6a:	b910      	cbnz	r0, 8002f72 <xQueueGenericSend+0x72>
 8002f6c:	9b01      	ldr	r3, [sp, #4]
 8002f6e:	b103      	cbz	r3, 8002f72 <xQueueGenericSend+0x72>
 8002f70:	2500      	movs	r5, #0
 8002f72:	b945      	cbnz	r5, 8002f86 <xQueueGenericSend+0x86>
 8002f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f78:	f383 8811 	msr	BASEPRI, r3
 8002f7c:	f3bf 8f6f 	isb	sy
 8002f80:	f3bf 8f4f 	dsb	sy
 8002f84:	e7fe      	b.n	8002f84 <xQueueGenericSend+0x84>
 8002f86:	2500      	movs	r5, #0
 8002f88:	e018      	b.n	8002fbc <xQueueGenericSend+0xbc>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002f8a:	4632      	mov	r2, r6
 8002f8c:	4639      	mov	r1, r7
 8002f8e:	4620      	mov	r0, r4
 8002f90:	f7ff fe77 	bl	8002c82 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002f94:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002f96:	b11b      	cbz	r3, 8002fa0 <xQueueGenericSend+0xa0>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002f98:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002f9c:	f000 ff08 	bl	8003db0 <xTaskRemoveFromEventList>
				taskEXIT_CRITICAL();
 8002fa0:	f7ff fbfa 	bl	8002798 <vPortExitCritical>
				return pdPASS;
 8002fa4:	2001      	movs	r0, #1
}
 8002fa6:	b005      	add	sp, #20
 8002fa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
					taskEXIT_CRITICAL();
 8002faa:	f7ff fbf5 	bl	8002798 <vPortExitCritical>
					return errQUEUE_FULL;
 8002fae:	2000      	movs	r0, #0
 8002fb0:	e7f9      	b.n	8002fa6 <xQueueGenericSend+0xa6>
				prvUnlockQueue( pxQueue );
 8002fb2:	4620      	mov	r0, r4
 8002fb4:	f7ff feb2 	bl	8002d1c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002fb8:	f000 fe00 	bl	8003bbc <xTaskResumeAll>
		taskENTER_CRITICAL();
 8002fbc:	f7ff fbca 	bl	8002754 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002fc0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002fc2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d3e0      	bcc.n	8002f8a <xQueueGenericSend+0x8a>
 8002fc8:	2e02      	cmp	r6, #2
 8002fca:	d0de      	beq.n	8002f8a <xQueueGenericSend+0x8a>
				if( xTicksToWait == ( TickType_t ) 0 )
 8002fcc:	9b01      	ldr	r3, [sp, #4]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d0eb      	beq.n	8002faa <xQueueGenericSend+0xaa>
				else if( xEntryTimeSet == pdFALSE )
 8002fd2:	b91d      	cbnz	r5, 8002fdc <xQueueGenericSend+0xdc>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002fd4:	a802      	add	r0, sp, #8
 8002fd6:	f000 ff31 	bl	8003e3c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002fda:	2501      	movs	r5, #1
		taskEXIT_CRITICAL();
 8002fdc:	f7ff fbdc 	bl	8002798 <vPortExitCritical>
		vTaskSuspendAll();
 8002fe0:	f000 fd60 	bl	8003aa4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002fe4:	f7ff fbb6 	bl	8002754 <vPortEnterCritical>
 8002fe8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8002fec:	b25b      	sxtb	r3, r3
 8002fee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ff2:	d102      	bne.n	8002ffa <xQueueGenericSend+0xfa>
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8002ffa:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8002ffe:	b25b      	sxtb	r3, r3
 8003000:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003004:	d102      	bne.n	800300c <xQueueGenericSend+0x10c>
 8003006:	2300      	movs	r3, #0
 8003008:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800300c:	f7ff fbc4 	bl	8002798 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003010:	a901      	add	r1, sp, #4
 8003012:	a802      	add	r0, sp, #8
 8003014:	f000 ff1e 	bl	8003e54 <xTaskCheckForTimeOut>
 8003018:	b9c8      	cbnz	r0, 800304e <xQueueGenericSend+0x14e>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800301a:	4620      	mov	r0, r4
 800301c:	f7ff fe15 	bl	8002c4a <prvIsQueueFull>
 8003020:	2800      	cmp	r0, #0
 8003022:	d0c6      	beq.n	8002fb2 <xQueueGenericSend+0xb2>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003024:	9901      	ldr	r1, [sp, #4]
 8003026:	f104 0010 	add.w	r0, r4, #16
 800302a:	f000 fea9 	bl	8003d80 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800302e:	4620      	mov	r0, r4
 8003030:	f7ff fe74 	bl	8002d1c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003034:	f000 fdc2 	bl	8003bbc <xTaskResumeAll>
 8003038:	2800      	cmp	r0, #0
 800303a:	d1bf      	bne.n	8002fbc <xQueueGenericSend+0xbc>
					portYIELD_WITHIN_API();
 800303c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003040:	4b06      	ldr	r3, [pc, #24]	; (800305c <xQueueGenericSend+0x15c>)
 8003042:	601a      	str	r2, [r3, #0]
 8003044:	f3bf 8f4f 	dsb	sy
 8003048:	f3bf 8f6f 	isb	sy
 800304c:	e7b6      	b.n	8002fbc <xQueueGenericSend+0xbc>
			prvUnlockQueue( pxQueue );
 800304e:	4620      	mov	r0, r4
 8003050:	f7ff fe64 	bl	8002d1c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003054:	f000 fdb2 	bl	8003bbc <xTaskResumeAll>
			return errQUEUE_FULL;
 8003058:	2000      	movs	r0, #0
 800305a:	e7a4      	b.n	8002fa6 <xQueueGenericSend+0xa6>
 800305c:	e000ed04 	.word	0xe000ed04

08003060 <prvInitialiseMutex>:
		if( pxNewQueue != NULL )
 8003060:	b148      	cbz	r0, 8003076 <prvInitialiseMutex+0x16>
	{
 8003062:	b508      	push	{r3, lr}
			pxNewQueue->pxMutexHolder = NULL;
 8003064:	2100      	movs	r1, #0
 8003066:	6041      	str	r1, [r0, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8003068:	6001      	str	r1, [r0, #0]
			pxNewQueue->u.uxRecursiveCallCount = 0;
 800306a:	60c1      	str	r1, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800306c:	460b      	mov	r3, r1
 800306e:	460a      	mov	r2, r1
 8003070:	f7ff ff46 	bl	8002f00 <xQueueGenericSend>
 8003074:	bd08      	pop	{r3, pc}
 8003076:	4770      	bx	lr

08003078 <xQueueCreateMutex>:
	{
 8003078:	b510      	push	{r4, lr}
		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800307a:	4602      	mov	r2, r0
 800307c:	2100      	movs	r1, #0
 800307e:	2001      	movs	r0, #1
 8003080:	f7ff ff16 	bl	8002eb0 <xQueueGenericCreate>
 8003084:	4604      	mov	r4, r0
		prvInitialiseMutex( pxNewQueue );
 8003086:	f7ff ffeb 	bl	8003060 <prvInitialiseMutex>
	}
 800308a:	4620      	mov	r0, r4
 800308c:	bd10      	pop	{r4, pc}

0800308e <xQueueCreateMutexStatic>:
	{
 800308e:	b510      	push	{r4, lr}
 8003090:	b082      	sub	sp, #8
		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8003092:	9000      	str	r0, [sp, #0]
 8003094:	460b      	mov	r3, r1
 8003096:	2200      	movs	r2, #0
 8003098:	4611      	mov	r1, r2
 800309a:	2001      	movs	r0, #1
 800309c:	f7ff feb8 	bl	8002e10 <xQueueGenericCreateStatic>
 80030a0:	4604      	mov	r4, r0
		prvInitialiseMutex( pxNewQueue );
 80030a2:	f7ff ffdd 	bl	8003060 <prvInitialiseMutex>
	}
 80030a6:	4620      	mov	r0, r4
 80030a8:	b002      	add	sp, #8
 80030aa:	bd10      	pop	{r4, pc}

080030ac <xQueueGenericSendFromISR>:
{
 80030ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 80030b0:	b160      	cbz	r0, 80030cc <xQueueGenericSendFromISR+0x20>
 80030b2:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80030b4:	b199      	cbz	r1, 80030de <xQueueGenericSendFromISR+0x32>
 80030b6:	2001      	movs	r0, #1
 80030b8:	b9b8      	cbnz	r0, 80030ea <xQueueGenericSendFromISR+0x3e>
 80030ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030be:	f383 8811 	msr	BASEPRI, r3
 80030c2:	f3bf 8f6f 	isb	sy
 80030c6:	f3bf 8f4f 	dsb	sy
 80030ca:	e7fe      	b.n	80030ca <xQueueGenericSendFromISR+0x1e>
 80030cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030d0:	f383 8811 	msr	BASEPRI, r3
 80030d4:	f3bf 8f6f 	isb	sy
 80030d8:	f3bf 8f4f 	dsb	sy
 80030dc:	e7fe      	b.n	80030dc <xQueueGenericSendFromISR+0x30>
 80030de:	6c00      	ldr	r0, [r0, #64]	; 0x40
 80030e0:	b908      	cbnz	r0, 80030e6 <xQueueGenericSendFromISR+0x3a>
 80030e2:	2001      	movs	r0, #1
 80030e4:	e7e8      	b.n	80030b8 <xQueueGenericSendFromISR+0xc>
 80030e6:	2000      	movs	r0, #0
 80030e8:	e7e6      	b.n	80030b8 <xQueueGenericSendFromISR+0xc>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	d009      	beq.n	8003102 <xQueueGenericSendFromISR+0x56>
 80030ee:	b968      	cbnz	r0, 800310c <xQueueGenericSendFromISR+0x60>
 80030f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030f4:	f383 8811 	msr	BASEPRI, r3
 80030f8:	f3bf 8f6f 	isb	sy
 80030fc:	f3bf 8f4f 	dsb	sy
 8003100:	e7fe      	b.n	8003100 <xQueueGenericSendFromISR+0x54>
 8003102:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8003104:	2d01      	cmp	r5, #1
 8003106:	d0f2      	beq.n	80030ee <xQueueGenericSendFromISR+0x42>
 8003108:	2000      	movs	r0, #0
 800310a:	e7f0      	b.n	80030ee <xQueueGenericSendFromISR+0x42>
 800310c:	461f      	mov	r7, r3
 800310e:	4690      	mov	r8, r2
 8003110:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003112:	f7ff fc49 	bl	80029a8 <vPortValidateInterruptPriority>
	__asm volatile
 8003116:	f3ef 8611 	mrs	r6, BASEPRI
 800311a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800311e:	f383 8811 	msr	BASEPRI, r3
 8003122:	f3bf 8f6f 	isb	sy
 8003126:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800312a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800312c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800312e:	429a      	cmp	r2, r3
 8003130:	d301      	bcc.n	8003136 <xQueueGenericSendFromISR+0x8a>
 8003132:	2f02      	cmp	r7, #2
 8003134:	d121      	bne.n	800317a <xQueueGenericSendFromISR+0xce>
			const int8_t cTxLock = pxQueue->cTxLock;
 8003136:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 800313a:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800313c:	463a      	mov	r2, r7
 800313e:	4649      	mov	r1, r9
 8003140:	4620      	mov	r0, r4
 8003142:	f7ff fd9e 	bl	8002c82 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8003146:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 800314a:	d110      	bne.n	800316e <xQueueGenericSendFromISR+0xc2>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800314c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800314e:	b1b3      	cbz	r3, 800317e <xQueueGenericSendFromISR+0xd2>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003150:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003154:	f000 fe2c 	bl	8003db0 <xTaskRemoveFromEventList>
 8003158:	b198      	cbz	r0, 8003182 <xQueueGenericSendFromISR+0xd6>
							if( pxHigherPriorityTaskWoken != NULL )
 800315a:	f1b8 0f00 	cmp.w	r8, #0
 800315e:	d012      	beq.n	8003186 <xQueueGenericSendFromISR+0xda>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003160:	2001      	movs	r0, #1
 8003162:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 8003166:	f386 8811 	msr	BASEPRI, r6
}
 800316a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800316e:	1c6b      	adds	r3, r5, #1
 8003170:	b25b      	sxtb	r3, r3
 8003172:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
 8003176:	2001      	movs	r0, #1
 8003178:	e7f5      	b.n	8003166 <xQueueGenericSendFromISR+0xba>
			xReturn = errQUEUE_FULL;
 800317a:	2000      	movs	r0, #0
 800317c:	e7f3      	b.n	8003166 <xQueueGenericSendFromISR+0xba>
			xReturn = pdPASS;
 800317e:	2001      	movs	r0, #1
 8003180:	e7f1      	b.n	8003166 <xQueueGenericSendFromISR+0xba>
 8003182:	2001      	movs	r0, #1
 8003184:	e7ef      	b.n	8003166 <xQueueGenericSendFromISR+0xba>
 8003186:	2001      	movs	r0, #1
 8003188:	e7ed      	b.n	8003166 <xQueueGenericSendFromISR+0xba>

0800318a <xQueueGiveFromISR>:
	configASSERT( pxQueue );
 800318a:	b160      	cbz	r0, 80031a6 <xQueueGiveFromISR+0x1c>
{
 800318c:	b570      	push	{r4, r5, r6, lr}
 800318e:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 8003190:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003192:	b18b      	cbz	r3, 80031b8 <xQueueGiveFromISR+0x2e>
	__asm volatile
 8003194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003198:	f383 8811 	msr	BASEPRI, r3
 800319c:	f3bf 8f6f 	isb	sy
 80031a0:	f3bf 8f4f 	dsb	sy
 80031a4:	e7fe      	b.n	80031a4 <xQueueGiveFromISR+0x1a>
 80031a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031aa:	f383 8811 	msr	BASEPRI, r3
 80031ae:	f3bf 8f6f 	isb	sy
 80031b2:	f3bf 8f4f 	dsb	sy
 80031b6:	e7fe      	b.n	80031b6 <xQueueGiveFromISR+0x2c>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 80031b8:	6803      	ldr	r3, [r0, #0]
 80031ba:	b153      	cbz	r3, 80031d2 <xQueueGiveFromISR+0x48>
 80031bc:	2301      	movs	r3, #1
 80031be:	b973      	cbnz	r3, 80031de <xQueueGiveFromISR+0x54>
 80031c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031c4:	f383 8811 	msr	BASEPRI, r3
 80031c8:	f3bf 8f6f 	isb	sy
 80031cc:	f3bf 8f4f 	dsb	sy
 80031d0:	e7fe      	b.n	80031d0 <xQueueGiveFromISR+0x46>
 80031d2:	6843      	ldr	r3, [r0, #4]
 80031d4:	b90b      	cbnz	r3, 80031da <xQueueGiveFromISR+0x50>
 80031d6:	2301      	movs	r3, #1
 80031d8:	e7f1      	b.n	80031be <xQueueGiveFromISR+0x34>
 80031da:	2300      	movs	r3, #0
 80031dc:	e7ef      	b.n	80031be <xQueueGiveFromISR+0x34>
 80031de:	460e      	mov	r6, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80031e0:	f7ff fbe2 	bl	80029a8 <vPortValidateInterruptPriority>
	__asm volatile
 80031e4:	f3ef 8511 	mrs	r5, BASEPRI
 80031e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031ec:	f383 8811 	msr	BASEPRI, r3
 80031f0:	f3bf 8f6f 	isb	sy
 80031f4:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80031f8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 80031fa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d21a      	bcs.n	8003236 <xQueueGiveFromISR+0xac>
			const int8_t cTxLock = pxQueue->cTxLock;
 8003200:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8003204:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003206:	3201      	adds	r2, #1
 8003208:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 800320a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800320e:	d10c      	bne.n	800322a <xQueueGiveFromISR+0xa0>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003210:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003212:	b193      	cbz	r3, 800323a <xQueueGiveFromISR+0xb0>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003214:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003218:	f000 fdca 	bl	8003db0 <xTaskRemoveFromEventList>
 800321c:	b178      	cbz	r0, 800323e <xQueueGiveFromISR+0xb4>
							if( pxHigherPriorityTaskWoken != NULL )
 800321e:	b186      	cbz	r6, 8003242 <xQueueGiveFromISR+0xb8>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003220:	2001      	movs	r0, #1
 8003222:	6030      	str	r0, [r6, #0]
	__asm volatile
 8003224:	f385 8811 	msr	BASEPRI, r5
}
 8003228:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800322a:	3301      	adds	r3, #1
 800322c:	b25b      	sxtb	r3, r3
 800322e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
 8003232:	2001      	movs	r0, #1
 8003234:	e7f6      	b.n	8003224 <xQueueGiveFromISR+0x9a>
			xReturn = errQUEUE_FULL;
 8003236:	2000      	movs	r0, #0
 8003238:	e7f4      	b.n	8003224 <xQueueGiveFromISR+0x9a>
			xReturn = pdPASS;
 800323a:	2001      	movs	r0, #1
 800323c:	e7f2      	b.n	8003224 <xQueueGiveFromISR+0x9a>
 800323e:	2001      	movs	r0, #1
 8003240:	e7f0      	b.n	8003224 <xQueueGiveFromISR+0x9a>
 8003242:	2001      	movs	r0, #1
 8003244:	e7ee      	b.n	8003224 <xQueueGiveFromISR+0x9a>
	...

08003248 <xQueueReceive>:
{
 8003248:	b5f0      	push	{r4, r5, r6, r7, lr}
 800324a:	b085      	sub	sp, #20
 800324c:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 800324e:	b160      	cbz	r0, 800326a <xQueueReceive+0x22>
 8003250:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003252:	b199      	cbz	r1, 800327c <xQueueReceive+0x34>
 8003254:	2501      	movs	r5, #1
 8003256:	b9bd      	cbnz	r5, 8003288 <xQueueReceive+0x40>
	__asm volatile
 8003258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800325c:	f383 8811 	msr	BASEPRI, r3
 8003260:	f3bf 8f6f 	isb	sy
 8003264:	f3bf 8f4f 	dsb	sy
 8003268:	e7fe      	b.n	8003268 <xQueueReceive+0x20>
 800326a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800326e:	f383 8811 	msr	BASEPRI, r3
 8003272:	f3bf 8f6f 	isb	sy
 8003276:	f3bf 8f4f 	dsb	sy
 800327a:	e7fe      	b.n	800327a <xQueueReceive+0x32>
 800327c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800327e:	b90b      	cbnz	r3, 8003284 <xQueueReceive+0x3c>
 8003280:	2501      	movs	r5, #1
 8003282:	e7e8      	b.n	8003256 <xQueueReceive+0xe>
 8003284:	2500      	movs	r5, #0
 8003286:	e7e6      	b.n	8003256 <xQueueReceive+0xe>
 8003288:	460e      	mov	r6, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800328a:	f000 fe29 	bl	8003ee0 <xTaskGetSchedulerState>
 800328e:	b910      	cbnz	r0, 8003296 <xQueueReceive+0x4e>
 8003290:	9b01      	ldr	r3, [sp, #4]
 8003292:	b103      	cbz	r3, 8003296 <xQueueReceive+0x4e>
 8003294:	2500      	movs	r5, #0
 8003296:	b945      	cbnz	r5, 80032aa <xQueueReceive+0x62>
 8003298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800329c:	f383 8811 	msr	BASEPRI, r3
 80032a0:	f3bf 8f6f 	isb	sy
 80032a4:	f3bf 8f4f 	dsb	sy
 80032a8:	e7fe      	b.n	80032a8 <xQueueReceive+0x60>
 80032aa:	2700      	movs	r7, #0
 80032ac:	e026      	b.n	80032fc <xQueueReceive+0xb4>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80032ae:	4631      	mov	r1, r6
 80032b0:	4620      	mov	r0, r4
 80032b2:	f7ff fd21 	bl	8002cf8 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80032b6:	3d01      	subs	r5, #1
 80032b8:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80032ba:	6923      	ldr	r3, [r4, #16]
 80032bc:	b11b      	cbz	r3, 80032c6 <xQueueReceive+0x7e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80032be:	f104 0010 	add.w	r0, r4, #16
 80032c2:	f000 fd75 	bl	8003db0 <xTaskRemoveFromEventList>
				taskEXIT_CRITICAL();
 80032c6:	f7ff fa67 	bl	8002798 <vPortExitCritical>
				return pdPASS;
 80032ca:	2001      	movs	r0, #1
}
 80032cc:	b005      	add	sp, #20
 80032ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
					taskEXIT_CRITICAL();
 80032d0:	f7ff fa62 	bl	8002798 <vPortExitCritical>
					return errQUEUE_EMPTY;
 80032d4:	2000      	movs	r0, #0
 80032d6:	e7f9      	b.n	80032cc <xQueueReceive+0x84>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80032d8:	a802      	add	r0, sp, #8
 80032da:	f000 fdaf 	bl	8003e3c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80032de:	2701      	movs	r7, #1
 80032e0:	e016      	b.n	8003310 <xQueueReceive+0xc8>
		prvLockQueue( pxQueue );
 80032e2:	2300      	movs	r3, #0
 80032e4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80032e8:	e01e      	b.n	8003328 <xQueueReceive+0xe0>
 80032ea:	2300      	movs	r3, #0
 80032ec:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80032f0:	e020      	b.n	8003334 <xQueueReceive+0xec>
				prvUnlockQueue( pxQueue );
 80032f2:	4620      	mov	r0, r4
 80032f4:	f7ff fd12 	bl	8002d1c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80032f8:	f000 fc60 	bl	8003bbc <xTaskResumeAll>
		taskENTER_CRITICAL();
 80032fc:	f7ff fa2a 	bl	8002754 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003300:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003302:	2d00      	cmp	r5, #0
 8003304:	d1d3      	bne.n	80032ae <xQueueReceive+0x66>
				if( xTicksToWait == ( TickType_t ) 0 )
 8003306:	9b01      	ldr	r3, [sp, #4]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d0e1      	beq.n	80032d0 <xQueueReceive+0x88>
				else if( xEntryTimeSet == pdFALSE )
 800330c:	2f00      	cmp	r7, #0
 800330e:	d0e3      	beq.n	80032d8 <xQueueReceive+0x90>
		taskEXIT_CRITICAL();
 8003310:	f7ff fa42 	bl	8002798 <vPortExitCritical>
		vTaskSuspendAll();
 8003314:	f000 fbc6 	bl	8003aa4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003318:	f7ff fa1c 	bl	8002754 <vPortEnterCritical>
 800331c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8003320:	b25b      	sxtb	r3, r3
 8003322:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003326:	d0dc      	beq.n	80032e2 <xQueueReceive+0x9a>
 8003328:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800332c:	b25b      	sxtb	r3, r3
 800332e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003332:	d0da      	beq.n	80032ea <xQueueReceive+0xa2>
 8003334:	f7ff fa30 	bl	8002798 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003338:	a901      	add	r1, sp, #4
 800333a:	a802      	add	r0, sp, #8
 800333c:	f000 fd8a 	bl	8003e54 <xTaskCheckForTimeOut>
 8003340:	b9c8      	cbnz	r0, 8003376 <xQueueReceive+0x12e>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003342:	4620      	mov	r0, r4
 8003344:	f7ff fc90 	bl	8002c68 <prvIsQueueEmpty>
 8003348:	2800      	cmp	r0, #0
 800334a:	d0d2      	beq.n	80032f2 <xQueueReceive+0xaa>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800334c:	9901      	ldr	r1, [sp, #4]
 800334e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003352:	f000 fd15 	bl	8003d80 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003356:	4620      	mov	r0, r4
 8003358:	f7ff fce0 	bl	8002d1c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800335c:	f000 fc2e 	bl	8003bbc <xTaskResumeAll>
 8003360:	2800      	cmp	r0, #0
 8003362:	d1cb      	bne.n	80032fc <xQueueReceive+0xb4>
					portYIELD_WITHIN_API();
 8003364:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003368:	4b09      	ldr	r3, [pc, #36]	; (8003390 <xQueueReceive+0x148>)
 800336a:	601a      	str	r2, [r3, #0]
 800336c:	f3bf 8f4f 	dsb	sy
 8003370:	f3bf 8f6f 	isb	sy
 8003374:	e7c2      	b.n	80032fc <xQueueReceive+0xb4>
			prvUnlockQueue( pxQueue );
 8003376:	4620      	mov	r0, r4
 8003378:	f7ff fcd0 	bl	8002d1c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800337c:	f000 fc1e 	bl	8003bbc <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003380:	4620      	mov	r0, r4
 8003382:	f7ff fc71 	bl	8002c68 <prvIsQueueEmpty>
 8003386:	2800      	cmp	r0, #0
 8003388:	d0b8      	beq.n	80032fc <xQueueReceive+0xb4>
				return errQUEUE_EMPTY;
 800338a:	2000      	movs	r0, #0
 800338c:	e79e      	b.n	80032cc <xQueueReceive+0x84>
 800338e:	bf00      	nop
 8003390:	e000ed04 	.word	0xe000ed04

08003394 <xQueueSemaphoreTake>:
{
 8003394:	b570      	push	{r4, r5, r6, lr}
 8003396:	b084      	sub	sp, #16
 8003398:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 800339a:	b158      	cbz	r0, 80033b4 <xQueueSemaphoreTake+0x20>
 800339c:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 800339e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80033a0:	b18b      	cbz	r3, 80033c6 <xQueueSemaphoreTake+0x32>
 80033a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033a6:	f383 8811 	msr	BASEPRI, r3
 80033aa:	f3bf 8f6f 	isb	sy
 80033ae:	f3bf 8f4f 	dsb	sy
 80033b2:	e7fe      	b.n	80033b2 <xQueueSemaphoreTake+0x1e>
 80033b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033b8:	f383 8811 	msr	BASEPRI, r3
 80033bc:	f3bf 8f6f 	isb	sy
 80033c0:	f3bf 8f4f 	dsb	sy
 80033c4:	e7fe      	b.n	80033c4 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80033c6:	f000 fd8b 	bl	8003ee0 <xTaskGetSchedulerState>
 80033ca:	b960      	cbnz	r0, 80033e6 <xQueueSemaphoreTake+0x52>
 80033cc:	9b01      	ldr	r3, [sp, #4]
 80033ce:	b963      	cbnz	r3, 80033ea <xQueueSemaphoreTake+0x56>
 80033d0:	2301      	movs	r3, #1
 80033d2:	b963      	cbnz	r3, 80033ee <xQueueSemaphoreTake+0x5a>
 80033d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033d8:	f383 8811 	msr	BASEPRI, r3
 80033dc:	f3bf 8f6f 	isb	sy
 80033e0:	f3bf 8f4f 	dsb	sy
 80033e4:	e7fe      	b.n	80033e4 <xQueueSemaphoreTake+0x50>
 80033e6:	2301      	movs	r3, #1
 80033e8:	e7f3      	b.n	80033d2 <xQueueSemaphoreTake+0x3e>
 80033ea:	2300      	movs	r3, #0
 80033ec:	e7f1      	b.n	80033d2 <xQueueSemaphoreTake+0x3e>
 80033ee:	2500      	movs	r5, #0
 80033f0:	462e      	mov	r6, r5
 80033f2:	e045      	b.n	8003480 <xQueueSemaphoreTake+0xec>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80033f4:	3b01      	subs	r3, #1
 80033f6:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80033f8:	6823      	ldr	r3, [r4, #0]
 80033fa:	b913      	cbnz	r3, 8003402 <xQueueSemaphoreTake+0x6e>
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80033fc:	f000 fea0 	bl	8004140 <pvTaskIncrementMutexHeldCount>
 8003400:	6060      	str	r0, [r4, #4]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003402:	6923      	ldr	r3, [r4, #16]
 8003404:	b11b      	cbz	r3, 800340e <xQueueSemaphoreTake+0x7a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003406:	f104 0010 	add.w	r0, r4, #16
 800340a:	f000 fcd1 	bl	8003db0 <xTaskRemoveFromEventList>
				taskEXIT_CRITICAL();
 800340e:	f7ff f9c3 	bl	8002798 <vPortExitCritical>
				return pdPASS;
 8003412:	2501      	movs	r5, #1
}
 8003414:	4628      	mov	r0, r5
 8003416:	b004      	add	sp, #16
 8003418:	bd70      	pop	{r4, r5, r6, pc}
						configASSERT( xInheritanceOccurred == pdFALSE );
 800341a:	b145      	cbz	r5, 800342e <xQueueSemaphoreTake+0x9a>
 800341c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003420:	f383 8811 	msr	BASEPRI, r3
 8003424:	f3bf 8f6f 	isb	sy
 8003428:	f3bf 8f4f 	dsb	sy
 800342c:	e7fe      	b.n	800342c <xQueueSemaphoreTake+0x98>
					taskEXIT_CRITICAL();
 800342e:	f7ff f9b3 	bl	8002798 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8003432:	e7ef      	b.n	8003414 <xQueueSemaphoreTake+0x80>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003434:	a802      	add	r0, sp, #8
 8003436:	f000 fd01 	bl	8003e3c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800343a:	2601      	movs	r6, #1
 800343c:	e02a      	b.n	8003494 <xQueueSemaphoreTake+0x100>
		prvLockQueue( pxQueue );
 800343e:	2300      	movs	r3, #0
 8003440:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8003444:	e032      	b.n	80034ac <xQueueSemaphoreTake+0x118>
 8003446:	2300      	movs	r3, #0
 8003448:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800344c:	e034      	b.n	80034b8 <xQueueSemaphoreTake+0x124>
						taskENTER_CRITICAL();
 800344e:	f7ff f981 	bl	8002754 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8003452:	6860      	ldr	r0, [r4, #4]
 8003454:	f000 fd54 	bl	8003f00 <xTaskPriorityInherit>
 8003458:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 800345a:	f7ff f99d 	bl	8002798 <vPortExitCritical>
 800345e:	e03b      	b.n	80034d8 <xQueueSemaphoreTake+0x144>
				prvUnlockQueue( pxQueue );
 8003460:	4620      	mov	r0, r4
 8003462:	f7ff fc5b 	bl	8002d1c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003466:	f000 fba9 	bl	8003bbc <xTaskResumeAll>
 800346a:	e009      	b.n	8003480 <xQueueSemaphoreTake+0xec>
			prvUnlockQueue( pxQueue );
 800346c:	4620      	mov	r0, r4
 800346e:	f7ff fc55 	bl	8002d1c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003472:	f000 fba3 	bl	8003bbc <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003476:	4620      	mov	r0, r4
 8003478:	f7ff fbf6 	bl	8002c68 <prvIsQueueEmpty>
 800347c:	2800      	cmp	r0, #0
 800347e:	d140      	bne.n	8003502 <xQueueSemaphoreTake+0x16e>
		taskENTER_CRITICAL();
 8003480:	f7ff f968 	bl	8002754 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003484:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003486:	2b00      	cmp	r3, #0
 8003488:	d1b4      	bne.n	80033f4 <xQueueSemaphoreTake+0x60>
				if( xTicksToWait == ( TickType_t ) 0 )
 800348a:	9b01      	ldr	r3, [sp, #4]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d0c4      	beq.n	800341a <xQueueSemaphoreTake+0x86>
				else if( xEntryTimeSet == pdFALSE )
 8003490:	2e00      	cmp	r6, #0
 8003492:	d0cf      	beq.n	8003434 <xQueueSemaphoreTake+0xa0>
		taskEXIT_CRITICAL();
 8003494:	f7ff f980 	bl	8002798 <vPortExitCritical>
		vTaskSuspendAll();
 8003498:	f000 fb04 	bl	8003aa4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800349c:	f7ff f95a 	bl	8002754 <vPortEnterCritical>
 80034a0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80034a4:	b25b      	sxtb	r3, r3
 80034a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80034aa:	d0c8      	beq.n	800343e <xQueueSemaphoreTake+0xaa>
 80034ac:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80034b0:	b25b      	sxtb	r3, r3
 80034b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80034b6:	d0c6      	beq.n	8003446 <xQueueSemaphoreTake+0xb2>
 80034b8:	f7ff f96e 	bl	8002798 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80034bc:	a901      	add	r1, sp, #4
 80034be:	a802      	add	r0, sp, #8
 80034c0:	f000 fcc8 	bl	8003e54 <xTaskCheckForTimeOut>
 80034c4:	2800      	cmp	r0, #0
 80034c6:	d1d1      	bne.n	800346c <xQueueSemaphoreTake+0xd8>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80034c8:	4620      	mov	r0, r4
 80034ca:	f7ff fbcd 	bl	8002c68 <prvIsQueueEmpty>
 80034ce:	2800      	cmp	r0, #0
 80034d0:	d0c6      	beq.n	8003460 <xQueueSemaphoreTake+0xcc>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80034d2:	6823      	ldr	r3, [r4, #0]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d0ba      	beq.n	800344e <xQueueSemaphoreTake+0xba>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80034d8:	9901      	ldr	r1, [sp, #4]
 80034da:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80034de:	f000 fc4f 	bl	8003d80 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80034e2:	4620      	mov	r0, r4
 80034e4:	f7ff fc1a 	bl	8002d1c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80034e8:	f000 fb68 	bl	8003bbc <xTaskResumeAll>
 80034ec:	2800      	cmp	r0, #0
 80034ee:	d1c7      	bne.n	8003480 <xQueueSemaphoreTake+0xec>
					portYIELD_WITHIN_API();
 80034f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034f4:	4b0a      	ldr	r3, [pc, #40]	; (8003520 <xQueueSemaphoreTake+0x18c>)
 80034f6:	601a      	str	r2, [r3, #0]
 80034f8:	f3bf 8f4f 	dsb	sy
 80034fc:	f3bf 8f6f 	isb	sy
 8003500:	e7be      	b.n	8003480 <xQueueSemaphoreTake+0xec>
					if( xInheritanceOccurred != pdFALSE )
 8003502:	2d00      	cmp	r5, #0
 8003504:	d086      	beq.n	8003414 <xQueueSemaphoreTake+0x80>
						taskENTER_CRITICAL();
 8003506:	f7ff f925 	bl	8002754 <vPortEnterCritical>
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800350a:	4620      	mov	r0, r4
 800350c:	f7ff fb94 	bl	8002c38 <prvGetDisinheritPriorityAfterTimeout>
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8003510:	4601      	mov	r1, r0
 8003512:	6860      	ldr	r0, [r4, #4]
 8003514:	f000 fdae 	bl	8004074 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 8003518:	f7ff f93e 	bl	8002798 <vPortExitCritical>
				return errQUEUE_EMPTY;
 800351c:	2500      	movs	r5, #0
 800351e:	e779      	b.n	8003414 <xQueueSemaphoreTake+0x80>
 8003520:	e000ed04 	.word	0xe000ed04

08003524 <xQueueReceiveFromISR>:
{
 8003524:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8003528:	b160      	cbz	r0, 8003544 <xQueueReceiveFromISR+0x20>
 800352a:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800352c:	b199      	cbz	r1, 8003556 <xQueueReceiveFromISR+0x32>
 800352e:	2301      	movs	r3, #1
 8003530:	b9bb      	cbnz	r3, 8003562 <xQueueReceiveFromISR+0x3e>
 8003532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003536:	f383 8811 	msr	BASEPRI, r3
 800353a:	f3bf 8f6f 	isb	sy
 800353e:	f3bf 8f4f 	dsb	sy
 8003542:	e7fe      	b.n	8003542 <xQueueReceiveFromISR+0x1e>
 8003544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003548:	f383 8811 	msr	BASEPRI, r3
 800354c:	f3bf 8f6f 	isb	sy
 8003550:	f3bf 8f4f 	dsb	sy
 8003554:	e7fe      	b.n	8003554 <xQueueReceiveFromISR+0x30>
 8003556:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003558:	b90b      	cbnz	r3, 800355e <xQueueReceiveFromISR+0x3a>
 800355a:	2301      	movs	r3, #1
 800355c:	e7e8      	b.n	8003530 <xQueueReceiveFromISR+0xc>
 800355e:	2300      	movs	r3, #0
 8003560:	e7e6      	b.n	8003530 <xQueueReceiveFromISR+0xc>
 8003562:	4617      	mov	r7, r2
 8003564:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003566:	f7ff fa1f 	bl	80029a8 <vPortValidateInterruptPriority>
	__asm volatile
 800356a:	f3ef 8611 	mrs	r6, BASEPRI
 800356e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003572:	f383 8811 	msr	BASEPRI, r3
 8003576:	f3bf 8f6f 	isb	sy
 800357a:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800357e:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003582:	f1b8 0f00 	cmp.w	r8, #0
 8003586:	d020      	beq.n	80035ca <xQueueReceiveFromISR+0xa6>
			const int8_t cRxLock = pxQueue->cRxLock;
 8003588:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 800358c:	b26d      	sxtb	r5, r5
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800358e:	4649      	mov	r1, r9
 8003590:	4620      	mov	r0, r4
 8003592:	f7ff fbb1 	bl	8002cf8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003596:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 800359a:	63a3      	str	r3, [r4, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 800359c:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 80035a0:	d10d      	bne.n	80035be <xQueueReceiveFromISR+0x9a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80035a2:	6923      	ldr	r3, [r4, #16]
 80035a4:	b19b      	cbz	r3, 80035ce <xQueueReceiveFromISR+0xaa>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80035a6:	f104 0010 	add.w	r0, r4, #16
 80035aa:	f000 fc01 	bl	8003db0 <xTaskRemoveFromEventList>
 80035ae:	b180      	cbz	r0, 80035d2 <xQueueReceiveFromISR+0xae>
						if( pxHigherPriorityTaskWoken != NULL )
 80035b0:	b18f      	cbz	r7, 80035d6 <xQueueReceiveFromISR+0xb2>
							*pxHigherPriorityTaskWoken = pdTRUE;
 80035b2:	2001      	movs	r0, #1
 80035b4:	6038      	str	r0, [r7, #0]
	__asm volatile
 80035b6:	f386 8811 	msr	BASEPRI, r6
}
 80035ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80035be:	1c6b      	adds	r3, r5, #1
 80035c0:	b25b      	sxtb	r3, r3
 80035c2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
			xReturn = pdPASS;
 80035c6:	2001      	movs	r0, #1
 80035c8:	e7f5      	b.n	80035b6 <xQueueReceiveFromISR+0x92>
			xReturn = pdFAIL;
 80035ca:	2000      	movs	r0, #0
 80035cc:	e7f3      	b.n	80035b6 <xQueueReceiveFromISR+0x92>
			xReturn = pdPASS;
 80035ce:	2001      	movs	r0, #1
 80035d0:	e7f1      	b.n	80035b6 <xQueueReceiveFromISR+0x92>
 80035d2:	2001      	movs	r0, #1
 80035d4:	e7ef      	b.n	80035b6 <xQueueReceiveFromISR+0x92>
 80035d6:	2001      	movs	r0, #1
 80035d8:	e7ed      	b.n	80035b6 <xQueueReceiveFromISR+0x92>

080035da <uxQueueMessagesWaiting>:
	configASSERT( xQueue );
 80035da:	b940      	cbnz	r0, 80035ee <uxQueueMessagesWaiting+0x14>
	__asm volatile
 80035dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035e0:	f383 8811 	msr	BASEPRI, r3
 80035e4:	f3bf 8f6f 	isb	sy
 80035e8:	f3bf 8f4f 	dsb	sy
 80035ec:	e7fe      	b.n	80035ec <uxQueueMessagesWaiting+0x12>
{
 80035ee:	b510      	push	{r4, lr}
 80035f0:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80035f2:	f7ff f8af 	bl	8002754 <vPortEnterCritical>
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80035f6:	6ba4      	ldr	r4, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 80035f8:	f7ff f8ce 	bl	8002798 <vPortExitCritical>
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80035fc:	4620      	mov	r0, r4
 80035fe:	bd10      	pop	{r4, pc}

08003600 <uxQueueMessagesWaitingFromISR>:
	configASSERT( xQueue );
 8003600:	b108      	cbz	r0, 8003606 <uxQueueMessagesWaitingFromISR+0x6>
	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8003602:	6b80      	ldr	r0, [r0, #56]	; 0x38
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8003604:	4770      	bx	lr
 8003606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800360a:	f383 8811 	msr	BASEPRI, r3
 800360e:	f3bf 8f6f 	isb	sy
 8003612:	f3bf 8f4f 	dsb	sy
 8003616:	e7fe      	b.n	8003616 <uxQueueMessagesWaitingFromISR+0x16>

08003618 <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003618:	2300      	movs	r3, #0
 800361a:	2b07      	cmp	r3, #7
 800361c:	d80f      	bhi.n	800363e <vQueueUnregisterQueue+0x26>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800361e:	4a08      	ldr	r2, [pc, #32]	; (8003640 <vQueueUnregisterQueue+0x28>)
 8003620:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8003624:	6852      	ldr	r2, [r2, #4]
 8003626:	4282      	cmp	r2, r0
 8003628:	d001      	beq.n	800362e <vQueueUnregisterQueue+0x16>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800362a:	3301      	adds	r3, #1
 800362c:	e7f5      	b.n	800361a <vQueueUnregisterQueue+0x2>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800362e:	4a04      	ldr	r2, [pc, #16]	; (8003640 <vQueueUnregisterQueue+0x28>)
 8003630:	2100      	movs	r1, #0
 8003632:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8003636:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800363a:	6059      	str	r1, [r3, #4]
				break;
 800363c:	4770      	bx	lr
 800363e:	4770      	bx	lr
 8003640:	2000422c 	.word	0x2000422c

08003644 <vQueueDelete>:
	configASSERT( pxQueue );
 8003644:	b150      	cbz	r0, 800365c <vQueueDelete+0x18>
{
 8003646:	b510      	push	{r4, lr}
 8003648:	4604      	mov	r4, r0
		vQueueUnregisterQueue( pxQueue );
 800364a:	f7ff ffe5 	bl	8003618 <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800364e:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8003652:	b913      	cbnz	r3, 800365a <vQueueDelete+0x16>
			vPortFree( pxQueue );
 8003654:	4620      	mov	r0, r4
 8003656:	f7ff fab7 	bl	8002bc8 <vPortFree>
 800365a:	bd10      	pop	{r4, pc}
 800365c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003660:	f383 8811 	msr	BASEPRI, r3
 8003664:	f3bf 8f6f 	isb	sy
 8003668:	f3bf 8f4f 	dsb	sy
 800366c:	e7fe      	b.n	800366c <vQueueDelete+0x28>
	...

08003670 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003670:	4b0a      	ldr	r3, [pc, #40]	; (800369c <prvResetNextTaskUnblockTime+0x2c>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	b94b      	cbnz	r3, 800368c <prvResetNextTaskUnblockTime+0x1c>
 8003678:	2301      	movs	r3, #1
 800367a:	b94b      	cbnz	r3, 8003690 <prvResetNextTaskUnblockTime+0x20>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800367c:	4b07      	ldr	r3, [pc, #28]	; (800369c <prvResetNextTaskUnblockTime+0x2c>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	68db      	ldr	r3, [r3, #12]
 8003682:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003684:	685a      	ldr	r2, [r3, #4]
 8003686:	4b06      	ldr	r3, [pc, #24]	; (80036a0 <prvResetNextTaskUnblockTime+0x30>)
 8003688:	601a      	str	r2, [r3, #0]
 800368a:	4770      	bx	lr
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800368c:	2300      	movs	r3, #0
 800368e:	e7f4      	b.n	800367a <prvResetNextTaskUnblockTime+0xa>
		xNextTaskUnblockTime = portMAX_DELAY;
 8003690:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003694:	4b02      	ldr	r3, [pc, #8]	; (80036a0 <prvResetNextTaskUnblockTime+0x30>)
 8003696:	601a      	str	r2, [r3, #0]
 8003698:	4770      	bx	lr
 800369a:	bf00      	nop
 800369c:	20003cbc 	.word	0x20003cbc
 80036a0:	20003d90 	.word	0x20003d90

080036a4 <prvInitialiseNewTask>:
{
 80036a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80036a8:	4680      	mov	r8, r0
 80036aa:	4699      	mov	r9, r3
 80036ac:	9d08      	ldr	r5, [sp, #32]
 80036ae:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80036b0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80036b2:	6b26      	ldr	r6, [r4, #48]	; 0x30
 80036b4:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80036b8:	3a01      	subs	r2, #1
 80036ba:	eb06 0682 	add.w	r6, r6, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80036be:	f026 0607 	bic.w	r6, r6, #7
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80036c2:	2300      	movs	r3, #0
 80036c4:	2b0f      	cmp	r3, #15
 80036c6:	d807      	bhi.n	80036d8 <prvInitialiseNewTask+0x34>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80036c8:	5cc8      	ldrb	r0, [r1, r3]
 80036ca:	18e2      	adds	r2, r4, r3
 80036cc:	f882 0034 	strb.w	r0, [r2, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
 80036d0:	5cca      	ldrb	r2, [r1, r3]
 80036d2:	b10a      	cbz	r2, 80036d8 <prvInitialiseNewTask+0x34>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80036d4:	3301      	adds	r3, #1
 80036d6:	e7f5      	b.n	80036c4 <prvInitialiseNewTask+0x20>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80036d8:	2300      	movs	r3, #0
 80036da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80036de:	2d06      	cmp	r5, #6
 80036e0:	d900      	bls.n	80036e4 <prvInitialiseNewTask+0x40>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80036e2:	2506      	movs	r5, #6
	pxNewTCB->uxPriority = uxPriority;
 80036e4:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 80036e6:	6465      	str	r5, [r4, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80036e8:	f04f 0a00 	mov.w	sl, #0
 80036ec:	f8c4 a048 	str.w	sl, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80036f0:	1d20      	adds	r0, r4, #4
 80036f2:	f7fe ff85 	bl	8002600 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80036f6:	f104 0018 	add.w	r0, r4, #24
 80036fa:	f7fe ff81 	bl	8002600 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80036fe:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003700:	f1c5 0507 	rsb	r5, r5, #7
 8003704:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003706:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
 8003708:	f8c4 a04c 	str.w	sl, [r4, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800370c:	f884 a050 	strb.w	sl, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003710:	464a      	mov	r2, r9
 8003712:	4641      	mov	r1, r8
 8003714:	4630      	mov	r0, r6
 8003716:	f7fe ffef 	bl	80026f8 <pxPortInitialiseStack>
 800371a:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 800371c:	b107      	cbz	r7, 8003720 <prvInitialiseNewTask+0x7c>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800371e:	603c      	str	r4, [r7, #0]
 8003720:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08003724 <prvInitialiseTaskLists>:
{
 8003724:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003726:	2400      	movs	r4, #0
 8003728:	e007      	b.n	800373a <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800372a:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 800372e:	0093      	lsls	r3, r2, #2
 8003730:	480e      	ldr	r0, [pc, #56]	; (800376c <prvInitialiseTaskLists+0x48>)
 8003732:	4418      	add	r0, r3
 8003734:	f7fe ff59 	bl	80025ea <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003738:	3401      	adds	r4, #1
 800373a:	2c06      	cmp	r4, #6
 800373c:	d9f5      	bls.n	800372a <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 800373e:	4d0c      	ldr	r5, [pc, #48]	; (8003770 <prvInitialiseTaskLists+0x4c>)
 8003740:	4628      	mov	r0, r5
 8003742:	f7fe ff52 	bl	80025ea <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003746:	4c0b      	ldr	r4, [pc, #44]	; (8003774 <prvInitialiseTaskLists+0x50>)
 8003748:	4620      	mov	r0, r4
 800374a:	f7fe ff4e 	bl	80025ea <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800374e:	480a      	ldr	r0, [pc, #40]	; (8003778 <prvInitialiseTaskLists+0x54>)
 8003750:	f7fe ff4b 	bl	80025ea <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8003754:	4809      	ldr	r0, [pc, #36]	; (800377c <prvInitialiseTaskLists+0x58>)
 8003756:	f7fe ff48 	bl	80025ea <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800375a:	4809      	ldr	r0, [pc, #36]	; (8003780 <prvInitialiseTaskLists+0x5c>)
 800375c:	f7fe ff45 	bl	80025ea <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8003760:	4b08      	ldr	r3, [pc, #32]	; (8003784 <prvInitialiseTaskLists+0x60>)
 8003762:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003764:	4b08      	ldr	r3, [pc, #32]	; (8003788 <prvInitialiseTaskLists+0x64>)
 8003766:	601c      	str	r4, [r3, #0]
 8003768:	bd38      	pop	{r3, r4, r5, pc}
 800376a:	bf00      	nop
 800376c:	20003cc4 	.word	0x20003cc4
 8003770:	20003d68 	.word	0x20003d68
 8003774:	20003d7c 	.word	0x20003d7c
 8003778:	20003d98 	.word	0x20003d98
 800377c:	20003dc4 	.word	0x20003dc4
 8003780:	20003db0 	.word	0x20003db0
 8003784:	20003cbc 	.word	0x20003cbc
 8003788:	20003cc0 	.word	0x20003cc0

0800378c <prvAddNewTaskToReadyList>:
{
 800378c:	b510      	push	{r4, lr}
 800378e:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8003790:	f7fe ffe0 	bl	8002754 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8003794:	4a1a      	ldr	r2, [pc, #104]	; (8003800 <prvAddNewTaskToReadyList+0x74>)
 8003796:	6813      	ldr	r3, [r2, #0]
 8003798:	3301      	adds	r3, #1
 800379a:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800379c:	4b19      	ldr	r3, [pc, #100]	; (8003804 <prvAddNewTaskToReadyList+0x78>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	b32b      	cbz	r3, 80037ee <prvAddNewTaskToReadyList+0x62>
			if( xSchedulerRunning == pdFALSE )
 80037a2:	4b19      	ldr	r3, [pc, #100]	; (8003808 <prvAddNewTaskToReadyList+0x7c>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	b93b      	cbnz	r3, 80037b8 <prvAddNewTaskToReadyList+0x2c>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80037a8:	4b16      	ldr	r3, [pc, #88]	; (8003804 <prvAddNewTaskToReadyList+0x78>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037ae:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d801      	bhi.n	80037b8 <prvAddNewTaskToReadyList+0x2c>
					pxCurrentTCB = pxNewTCB;
 80037b4:	4b13      	ldr	r3, [pc, #76]	; (8003804 <prvAddNewTaskToReadyList+0x78>)
 80037b6:	601c      	str	r4, [r3, #0]
		uxTaskNumber++;
 80037b8:	4a14      	ldr	r2, [pc, #80]	; (800380c <prvAddNewTaskToReadyList+0x80>)
 80037ba:	6813      	ldr	r3, [r2, #0]
 80037bc:	3301      	adds	r3, #1
 80037be:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80037c0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80037c2:	2201      	movs	r2, #1
 80037c4:	409a      	lsls	r2, r3
 80037c6:	4912      	ldr	r1, [pc, #72]	; (8003810 <prvAddNewTaskToReadyList+0x84>)
 80037c8:	6808      	ldr	r0, [r1, #0]
 80037ca:	4302      	orrs	r2, r0
 80037cc:	600a      	str	r2, [r1, #0]
 80037ce:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80037d2:	009a      	lsls	r2, r3, #2
 80037d4:	1d21      	adds	r1, r4, #4
 80037d6:	480f      	ldr	r0, [pc, #60]	; (8003814 <prvAddNewTaskToReadyList+0x88>)
 80037d8:	4410      	add	r0, r2
 80037da:	f7fe ff14 	bl	8002606 <vListInsertEnd>
	taskEXIT_CRITICAL();
 80037de:	f7fe ffdb 	bl	8002798 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 80037e2:	4b09      	ldr	r3, [pc, #36]	; (8003808 <prvAddNewTaskToReadyList+0x7c>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	b10b      	cbz	r3, 80037ec <prvAddNewTaskToReadyList+0x60>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80037e8:	4b06      	ldr	r3, [pc, #24]	; (8003804 <prvAddNewTaskToReadyList+0x78>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	bd10      	pop	{r4, pc}
			pxCurrentTCB = pxNewTCB;
 80037ee:	4b05      	ldr	r3, [pc, #20]	; (8003804 <prvAddNewTaskToReadyList+0x78>)
 80037f0:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80037f2:	6813      	ldr	r3, [r2, #0]
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d1df      	bne.n	80037b8 <prvAddNewTaskToReadyList+0x2c>
				prvInitialiseTaskLists();
 80037f8:	f7ff ff94 	bl	8003724 <prvInitialiseTaskLists>
 80037fc:	e7dc      	b.n	80037b8 <prvAddNewTaskToReadyList+0x2c>
 80037fe:	bf00      	nop
 8003800:	20003d50 	.word	0x20003d50
 8003804:	20003cb8 	.word	0x20003cb8
 8003808:	20003dac 	.word	0x20003dac
 800380c:	20003d60 	.word	0x20003d60
 8003810:	20003d64 	.word	0x20003d64
 8003814:	20003cc4 	.word	0x20003cc4

08003818 <prvDeleteTCB>:
	{
 8003818:	b510      	push	{r4, lr}
 800381a:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800381c:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8003820:	b163      	cbz	r3, 800383c <prvDeleteTCB+0x24>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003822:	2b01      	cmp	r3, #1
 8003824:	d011      	beq.n	800384a <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003826:	2b02      	cmp	r3, #2
 8003828:	d012      	beq.n	8003850 <prvDeleteTCB+0x38>
 800382a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800382e:	f383 8811 	msr	BASEPRI, r3
 8003832:	f3bf 8f6f 	isb	sy
 8003836:	f3bf 8f4f 	dsb	sy
 800383a:	e7fe      	b.n	800383a <prvDeleteTCB+0x22>
				vPortFree( pxTCB->pxStack );
 800383c:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800383e:	f7ff f9c3 	bl	8002bc8 <vPortFree>
				vPortFree( pxTCB );
 8003842:	4620      	mov	r0, r4
 8003844:	f7ff f9c0 	bl	8002bc8 <vPortFree>
 8003848:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 800384a:	f7ff f9bd 	bl	8002bc8 <vPortFree>
 800384e:	bd10      	pop	{r4, pc}
 8003850:	bd10      	pop	{r4, pc}
	...

08003854 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003854:	4b0f      	ldr	r3, [pc, #60]	; (8003894 <prvCheckTasksWaitingTermination+0x40>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	b1d3      	cbz	r3, 8003890 <prvCheckTasksWaitingTermination+0x3c>
{
 800385a:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 800385c:	f7fe ff7a 	bl	8002754 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003860:	4b0d      	ldr	r3, [pc, #52]	; (8003898 <prvCheckTasksWaitingTermination+0x44>)
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003866:	1d20      	adds	r0, r4, #4
 8003868:	f7fe fef3 	bl	8002652 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800386c:	4a0b      	ldr	r2, [pc, #44]	; (800389c <prvCheckTasksWaitingTermination+0x48>)
 800386e:	6813      	ldr	r3, [r2, #0]
 8003870:	3b01      	subs	r3, #1
 8003872:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003874:	4a07      	ldr	r2, [pc, #28]	; (8003894 <prvCheckTasksWaitingTermination+0x40>)
 8003876:	6813      	ldr	r3, [r2, #0]
 8003878:	3b01      	subs	r3, #1
 800387a:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 800387c:	f7fe ff8c 	bl	8002798 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8003880:	4620      	mov	r0, r4
 8003882:	f7ff ffc9 	bl	8003818 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003886:	4b03      	ldr	r3, [pc, #12]	; (8003894 <prvCheckTasksWaitingTermination+0x40>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d1e6      	bne.n	800385c <prvCheckTasksWaitingTermination+0x8>
}
 800388e:	bd10      	pop	{r4, pc}
 8003890:	4770      	bx	lr
 8003892:	bf00      	nop
 8003894:	20003d54 	.word	0x20003d54
 8003898:	20003dc4 	.word	0x20003dc4
 800389c:	20003d50 	.word	0x20003d50

080038a0 <prvIdleTask>:
{
 80038a0:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 80038a2:	f7ff ffd7 	bl	8003854 <prvCheckTasksWaitingTermination>
			taskYIELD();
 80038a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038aa:	4b03      	ldr	r3, [pc, #12]	; (80038b8 <prvIdleTask+0x18>)
 80038ac:	601a      	str	r2, [r3, #0]
 80038ae:	f3bf 8f4f 	dsb	sy
 80038b2:	f3bf 8f6f 	isb	sy
 80038b6:	e7f4      	b.n	80038a2 <prvIdleTask+0x2>
 80038b8:	e000ed04 	.word	0xe000ed04

080038bc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80038bc:	b570      	push	{r4, r5, r6, lr}
 80038be:	4604      	mov	r4, r0
 80038c0:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80038c2:	4b1d      	ldr	r3, [pc, #116]	; (8003938 <prvAddCurrentTaskToDelayedList+0x7c>)
 80038c4:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80038c6:	4b1d      	ldr	r3, [pc, #116]	; (800393c <prvAddCurrentTaskToDelayedList+0x80>)
 80038c8:	6818      	ldr	r0, [r3, #0]
 80038ca:	3004      	adds	r0, #4
 80038cc:	f7fe fec1 	bl	8002652 <uxListRemove>
 80038d0:	b950      	cbnz	r0, 80038e8 <prvAddCurrentTaskToDelayedList+0x2c>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80038d2:	4b1a      	ldr	r3, [pc, #104]	; (800393c <prvAddCurrentTaskToDelayedList+0x80>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038d8:	2301      	movs	r3, #1
 80038da:	fa03 f202 	lsl.w	r2, r3, r2
 80038de:	4918      	ldr	r1, [pc, #96]	; (8003940 <prvAddCurrentTaskToDelayedList+0x84>)
 80038e0:	680b      	ldr	r3, [r1, #0]
 80038e2:	ea23 0302 	bic.w	r3, r3, r2
 80038e6:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80038e8:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 80038ec:	d013      	beq.n	8003916 <prvAddCurrentTaskToDelayedList+0x5a>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 80038ee:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80038f0:	4b12      	ldr	r3, [pc, #72]	; (800393c <prvAddCurrentTaskToDelayedList+0x80>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 80038f6:	42a5      	cmp	r5, r4
 80038f8:	d816      	bhi.n	8003928 <prvAddCurrentTaskToDelayedList+0x6c>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80038fa:	4b12      	ldr	r3, [pc, #72]	; (8003944 <prvAddCurrentTaskToDelayedList+0x88>)
 80038fc:	6818      	ldr	r0, [r3, #0]
 80038fe:	4b0f      	ldr	r3, [pc, #60]	; (800393c <prvAddCurrentTaskToDelayedList+0x80>)
 8003900:	6819      	ldr	r1, [r3, #0]
 8003902:	3104      	adds	r1, #4
 8003904:	f7fe fe8b 	bl	800261e <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 8003908:	4b0f      	ldr	r3, [pc, #60]	; (8003948 <prvAddCurrentTaskToDelayedList+0x8c>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	429c      	cmp	r4, r3
 800390e:	d201      	bcs.n	8003914 <prvAddCurrentTaskToDelayedList+0x58>
				{
					xNextTaskUnblockTime = xTimeToWake;
 8003910:	4b0d      	ldr	r3, [pc, #52]	; (8003948 <prvAddCurrentTaskToDelayedList+0x8c>)
 8003912:	601c      	str	r4, [r3, #0]
 8003914:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003916:	2e00      	cmp	r6, #0
 8003918:	d0e9      	beq.n	80038ee <prvAddCurrentTaskToDelayedList+0x32>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800391a:	4b08      	ldr	r3, [pc, #32]	; (800393c <prvAddCurrentTaskToDelayedList+0x80>)
 800391c:	6819      	ldr	r1, [r3, #0]
 800391e:	3104      	adds	r1, #4
 8003920:	480a      	ldr	r0, [pc, #40]	; (800394c <prvAddCurrentTaskToDelayedList+0x90>)
 8003922:	f7fe fe70 	bl	8002606 <vListInsertEnd>
 8003926:	bd70      	pop	{r4, r5, r6, pc}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003928:	4b09      	ldr	r3, [pc, #36]	; (8003950 <prvAddCurrentTaskToDelayedList+0x94>)
 800392a:	6818      	ldr	r0, [r3, #0]
 800392c:	4b03      	ldr	r3, [pc, #12]	; (800393c <prvAddCurrentTaskToDelayedList+0x80>)
 800392e:	6819      	ldr	r1, [r3, #0]
 8003930:	3104      	adds	r1, #4
 8003932:	f7fe fe74 	bl	800261e <vListInsert>
 8003936:	bd70      	pop	{r4, r5, r6, pc}
 8003938:	20003dd8 	.word	0x20003dd8
 800393c:	20003cb8 	.word	0x20003cb8
 8003940:	20003d64 	.word	0x20003d64
 8003944:	20003cbc 	.word	0x20003cbc
 8003948:	20003d90 	.word	0x20003d90
 800394c:	20003db0 	.word	0x20003db0
 8003950:	20003cc0 	.word	0x20003cc0

08003954 <xTaskCreateStatic>:
	{
 8003954:	b570      	push	{r4, r5, r6, lr}
 8003956:	b086      	sub	sp, #24
 8003958:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800395a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
 800395c:	b175      	cbz	r5, 800397c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800395e:	b1b4      	cbz	r4, 800398e <xTaskCreateStatic+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 8003960:	2654      	movs	r6, #84	; 0x54
 8003962:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003964:	9e04      	ldr	r6, [sp, #16]
 8003966:	2e54      	cmp	r6, #84	; 0x54
 8003968:	d01a      	beq.n	80039a0 <xTaskCreateStatic+0x4c>
 800396a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800396e:	f383 8811 	msr	BASEPRI, r3
 8003972:	f3bf 8f6f 	isb	sy
 8003976:	f3bf 8f4f 	dsb	sy
 800397a:	e7fe      	b.n	800397a <xTaskCreateStatic+0x26>
 800397c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003980:	f383 8811 	msr	BASEPRI, r3
 8003984:	f3bf 8f6f 	isb	sy
 8003988:	f3bf 8f4f 	dsb	sy
 800398c:	e7fe      	b.n	800398c <xTaskCreateStatic+0x38>
 800398e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003992:	f383 8811 	msr	BASEPRI, r3
 8003996:	f3bf 8f6f 	isb	sy
 800399a:	f3bf 8f4f 	dsb	sy
 800399e:	e7fe      	b.n	800399e <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80039a0:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80039a2:	2502      	movs	r5, #2
 80039a4:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80039a8:	2500      	movs	r5, #0
 80039aa:	9503      	str	r5, [sp, #12]
 80039ac:	9402      	str	r4, [sp, #8]
 80039ae:	ad05      	add	r5, sp, #20
 80039b0:	9501      	str	r5, [sp, #4]
 80039b2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80039b4:	9500      	str	r5, [sp, #0]
 80039b6:	f7ff fe75 	bl	80036a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80039ba:	4620      	mov	r0, r4
 80039bc:	f7ff fee6 	bl	800378c <prvAddNewTaskToReadyList>
	}
 80039c0:	9805      	ldr	r0, [sp, #20]
 80039c2:	b006      	add	sp, #24
 80039c4:	bd70      	pop	{r4, r5, r6, pc}

080039c6 <xTaskCreate>:
	{
 80039c6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80039ca:	b085      	sub	sp, #20
 80039cc:	4606      	mov	r6, r0
 80039ce:	460f      	mov	r7, r1
 80039d0:	4615      	mov	r5, r2
 80039d2:	4698      	mov	r8, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80039d4:	0090      	lsls	r0, r2, #2
 80039d6:	f7ff f873 	bl	8002ac0 <pvPortMalloc>
			if( pxStack != NULL )
 80039da:	b310      	cbz	r0, 8003a22 <xTaskCreate+0x5c>
 80039dc:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80039de:	2054      	movs	r0, #84	; 0x54
 80039e0:	f7ff f86e 	bl	8002ac0 <pvPortMalloc>
				if( pxNewTCB != NULL )
 80039e4:	4604      	mov	r4, r0
 80039e6:	b1c0      	cbz	r0, 8003a1a <xTaskCreate+0x54>
					pxNewTCB->pxStack = pxStack;
 80039e8:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
 80039ec:	b1dc      	cbz	r4, 8003a26 <xTaskCreate+0x60>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80039ee:	2300      	movs	r3, #0
 80039f0:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80039f4:	9303      	str	r3, [sp, #12]
 80039f6:	9402      	str	r4, [sp, #8]
 80039f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80039fa:	9301      	str	r3, [sp, #4]
 80039fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80039fe:	9300      	str	r3, [sp, #0]
 8003a00:	4643      	mov	r3, r8
 8003a02:	462a      	mov	r2, r5
 8003a04:	4639      	mov	r1, r7
 8003a06:	4630      	mov	r0, r6
 8003a08:	f7ff fe4c 	bl	80036a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003a0c:	4620      	mov	r0, r4
 8003a0e:	f7ff febd 	bl	800378c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003a12:	2001      	movs	r0, #1
	}
 8003a14:	b005      	add	sp, #20
 8003a16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 8003a1a:	4648      	mov	r0, r9
 8003a1c:	f7ff f8d4 	bl	8002bc8 <vPortFree>
 8003a20:	e7e4      	b.n	80039ec <xTaskCreate+0x26>
				pxNewTCB = NULL;
 8003a22:	2400      	movs	r4, #0
 8003a24:	e7e2      	b.n	80039ec <xTaskCreate+0x26>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003a26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return xReturn;
 8003a2a:	e7f3      	b.n	8003a14 <xTaskCreate+0x4e>

08003a2c <vTaskStartScheduler>:
{
 8003a2c:	b510      	push	{r4, lr}
 8003a2e:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003a30:	2400      	movs	r4, #0
 8003a32:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003a34:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003a36:	aa07      	add	r2, sp, #28
 8003a38:	a906      	add	r1, sp, #24
 8003a3a:	a805      	add	r0, sp, #20
 8003a3c:	f009 f9f4 	bl	800ce28 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003a40:	9b05      	ldr	r3, [sp, #20]
 8003a42:	9302      	str	r3, [sp, #8]
 8003a44:	9b06      	ldr	r3, [sp, #24]
 8003a46:	9301      	str	r3, [sp, #4]
 8003a48:	9400      	str	r4, [sp, #0]
 8003a4a:	4623      	mov	r3, r4
 8003a4c:	9a07      	ldr	r2, [sp, #28]
 8003a4e:	4910      	ldr	r1, [pc, #64]	; (8003a90 <vTaskStartScheduler+0x64>)
 8003a50:	4810      	ldr	r0, [pc, #64]	; (8003a94 <vTaskStartScheduler+0x68>)
 8003a52:	f7ff ff7f 	bl	8003954 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8003a56:	b118      	cbz	r0, 8003a60 <vTaskStartScheduler+0x34>
			xReturn = pdPASS;
 8003a58:	2301      	movs	r3, #1
	if( xReturn == pdPASS )
 8003a5a:	b91b      	cbnz	r3, 8003a64 <vTaskStartScheduler+0x38>
}
 8003a5c:	b008      	add	sp, #32
 8003a5e:	bd10      	pop	{r4, pc}
			xReturn = pdFAIL;
 8003a60:	2300      	movs	r3, #0
 8003a62:	e7fa      	b.n	8003a5a <vTaskStartScheduler+0x2e>
 8003a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a68:	f383 8811 	msr	BASEPRI, r3
 8003a6c:	f3bf 8f6f 	isb	sy
 8003a70:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8003a74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003a78:	4b07      	ldr	r3, [pc, #28]	; (8003a98 <vTaskStartScheduler+0x6c>)
 8003a7a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	4b07      	ldr	r3, [pc, #28]	; (8003a9c <vTaskStartScheduler+0x70>)
 8003a80:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003a82:	2200      	movs	r2, #0
 8003a84:	4b06      	ldr	r3, [pc, #24]	; (8003aa0 <vTaskStartScheduler+0x74>)
 8003a86:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8003a88:	f7fe ff06 	bl	8002898 <xPortStartScheduler>
 8003a8c:	e7e6      	b.n	8003a5c <vTaskStartScheduler+0x30>
 8003a8e:	bf00      	nop
 8003a90:	0800dd80 	.word	0x0800dd80
 8003a94:	080038a1 	.word	0x080038a1
 8003a98:	20003d90 	.word	0x20003d90
 8003a9c:	20003dac 	.word	0x20003dac
 8003aa0:	20003dd8 	.word	0x20003dd8

08003aa4 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8003aa4:	4a02      	ldr	r2, [pc, #8]	; (8003ab0 <vTaskSuspendAll+0xc>)
 8003aa6:	6813      	ldr	r3, [r2, #0]
 8003aa8:	3301      	adds	r3, #1
 8003aaa:	6013      	str	r3, [r2, #0]
 8003aac:	4770      	bx	lr
 8003aae:	bf00      	nop
 8003ab0:	20003d5c 	.word	0x20003d5c

08003ab4 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8003ab4:	4b01      	ldr	r3, [pc, #4]	; (8003abc <xTaskGetTickCount+0x8>)
 8003ab6:	6818      	ldr	r0, [r3, #0]
}
 8003ab8:	4770      	bx	lr
 8003aba:	bf00      	nop
 8003abc:	20003dd8 	.word	0x20003dd8

08003ac0 <xTaskGetTickCountFromISR>:
{
 8003ac0:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003ac2:	f7fe ff71 	bl	80029a8 <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 8003ac6:	4b01      	ldr	r3, [pc, #4]	; (8003acc <xTaskGetTickCountFromISR+0xc>)
 8003ac8:	6818      	ldr	r0, [r3, #0]
}
 8003aca:	bd08      	pop	{r3, pc}
 8003acc:	20003dd8 	.word	0x20003dd8

08003ad0 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ad0:	4b31      	ldr	r3, [pc, #196]	; (8003b98 <xTaskIncrementTick+0xc8>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d158      	bne.n	8003b8a <xTaskIncrementTick+0xba>
{
 8003ad8:	b570      	push	{r4, r5, r6, lr}
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003ada:	4b30      	ldr	r3, [pc, #192]	; (8003b9c <xTaskIncrementTick+0xcc>)
 8003adc:	681c      	ldr	r4, [r3, #0]
 8003ade:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 8003ae0:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003ae2:	b9c4      	cbnz	r4, 8003b16 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8003ae4:	4b2e      	ldr	r3, [pc, #184]	; (8003ba0 <xTaskIncrementTick+0xd0>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	b143      	cbz	r3, 8003afe <xTaskIncrementTick+0x2e>
 8003aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003af0:	f383 8811 	msr	BASEPRI, r3
 8003af4:	f3bf 8f6f 	isb	sy
 8003af8:	f3bf 8f4f 	dsb	sy
 8003afc:	e7fe      	b.n	8003afc <xTaskIncrementTick+0x2c>
 8003afe:	4a28      	ldr	r2, [pc, #160]	; (8003ba0 <xTaskIncrementTick+0xd0>)
 8003b00:	6811      	ldr	r1, [r2, #0]
 8003b02:	4b28      	ldr	r3, [pc, #160]	; (8003ba4 <xTaskIncrementTick+0xd4>)
 8003b04:	6818      	ldr	r0, [r3, #0]
 8003b06:	6010      	str	r0, [r2, #0]
 8003b08:	6019      	str	r1, [r3, #0]
 8003b0a:	4a27      	ldr	r2, [pc, #156]	; (8003ba8 <xTaskIncrementTick+0xd8>)
 8003b0c:	6813      	ldr	r3, [r2, #0]
 8003b0e:	3301      	adds	r3, #1
 8003b10:	6013      	str	r3, [r2, #0]
 8003b12:	f7ff fdad 	bl	8003670 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003b16:	4b25      	ldr	r3, [pc, #148]	; (8003bac <xTaskIncrementTick+0xdc>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	429c      	cmp	r4, r3
 8003b1c:	d21a      	bcs.n	8003b54 <xTaskIncrementTick+0x84>
}
 8003b1e:	2000      	movs	r0, #0
 8003b20:	bd70      	pop	{r4, r5, r6, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b22:	2301      	movs	r3, #1
 8003b24:	e01c      	b.n	8003b60 <xTaskIncrementTick+0x90>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b26:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003b2a:	4b20      	ldr	r3, [pc, #128]	; (8003bac <xTaskIncrementTick+0xdc>)
 8003b2c:	601a      	str	r2, [r3, #0]
					break;
 8003b2e:	e7f6      	b.n	8003b1e <xTaskIncrementTick+0x4e>
						xNextTaskUnblockTime = xItemValue;
 8003b30:	4a1e      	ldr	r2, [pc, #120]	; (8003bac <xTaskIncrementTick+0xdc>)
 8003b32:	6013      	str	r3, [r2, #0]
						break;
 8003b34:	e7f3      	b.n	8003b1e <xTaskIncrementTick+0x4e>
					prvAddTaskToReadyList( pxTCB );
 8003b36:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8003b38:	2201      	movs	r2, #1
 8003b3a:	409a      	lsls	r2, r3
 8003b3c:	491c      	ldr	r1, [pc, #112]	; (8003bb0 <xTaskIncrementTick+0xe0>)
 8003b3e:	6808      	ldr	r0, [r1, #0]
 8003b40:	4302      	orrs	r2, r0
 8003b42:	600a      	str	r2, [r1, #0]
 8003b44:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003b48:	009a      	lsls	r2, r3, #2
 8003b4a:	4631      	mov	r1, r6
 8003b4c:	4819      	ldr	r0, [pc, #100]	; (8003bb4 <xTaskIncrementTick+0xe4>)
 8003b4e:	4410      	add	r0, r2
 8003b50:	f7fe fd59 	bl	8002606 <vListInsertEnd>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b54:	4b12      	ldr	r3, [pc, #72]	; (8003ba0 <xTaskIncrementTick+0xd0>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d0e1      	beq.n	8003b22 <xTaskIncrementTick+0x52>
 8003b5e:	2300      	movs	r3, #0
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d1e0      	bne.n	8003b26 <xTaskIncrementTick+0x56>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003b64:	4b0e      	ldr	r3, [pc, #56]	; (8003ba0 <xTaskIncrementTick+0xd0>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	68db      	ldr	r3, [r3, #12]
 8003b6a:	68dd      	ldr	r5, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003b6c:	686b      	ldr	r3, [r5, #4]
					if( xConstTickCount < xItemValue )
 8003b6e:	429c      	cmp	r4, r3
 8003b70:	d3de      	bcc.n	8003b30 <xTaskIncrementTick+0x60>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b72:	1d2e      	adds	r6, r5, #4
 8003b74:	4630      	mov	r0, r6
 8003b76:	f7fe fd6c 	bl	8002652 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003b7a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d0da      	beq.n	8003b36 <xTaskIncrementTick+0x66>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003b80:	f105 0018 	add.w	r0, r5, #24
 8003b84:	f7fe fd65 	bl	8002652 <uxListRemove>
 8003b88:	e7d5      	b.n	8003b36 <xTaskIncrementTick+0x66>
		++uxPendedTicks;
 8003b8a:	4a0b      	ldr	r2, [pc, #44]	; (8003bb8 <xTaskIncrementTick+0xe8>)
 8003b8c:	6813      	ldr	r3, [r2, #0]
 8003b8e:	3301      	adds	r3, #1
 8003b90:	6013      	str	r3, [r2, #0]
}
 8003b92:	2000      	movs	r0, #0
 8003b94:	4770      	bx	lr
 8003b96:	bf00      	nop
 8003b98:	20003d5c 	.word	0x20003d5c
 8003b9c:	20003dd8 	.word	0x20003dd8
 8003ba0:	20003cbc 	.word	0x20003cbc
 8003ba4:	20003cc0 	.word	0x20003cc0
 8003ba8:	20003d94 	.word	0x20003d94
 8003bac:	20003d90 	.word	0x20003d90
 8003bb0:	20003d64 	.word	0x20003d64
 8003bb4:	20003cc4 	.word	0x20003cc4
 8003bb8:	20003d58 	.word	0x20003d58

08003bbc <xTaskResumeAll>:
{
 8003bbc:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 8003bbe:	4b2d      	ldr	r3, [pc, #180]	; (8003c74 <xTaskResumeAll+0xb8>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	b943      	cbnz	r3, 8003bd6 <xTaskResumeAll+0x1a>
 8003bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bc8:	f383 8811 	msr	BASEPRI, r3
 8003bcc:	f3bf 8f6f 	isb	sy
 8003bd0:	f3bf 8f4f 	dsb	sy
 8003bd4:	e7fe      	b.n	8003bd4 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 8003bd6:	f7fe fdbd 	bl	8002754 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8003bda:	4b26      	ldr	r3, [pc, #152]	; (8003c74 <xTaskResumeAll+0xb8>)
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	3a01      	subs	r2, #1
 8003be0:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	b913      	cbnz	r3, 8003bec <xTaskResumeAll+0x30>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003be6:	4b24      	ldr	r3, [pc, #144]	; (8003c78 <xTaskResumeAll+0xbc>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	b91b      	cbnz	r3, 8003bf4 <xTaskResumeAll+0x38>
	taskEXIT_CRITICAL();
 8003bec:	f7fe fdd4 	bl	8002798 <vPortExitCritical>
}
 8003bf0:	2000      	movs	r0, #0
 8003bf2:	bd38      	pop	{r3, r4, r5, pc}
 8003bf4:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003bf6:	4b21      	ldr	r3, [pc, #132]	; (8003c7c <xTaskResumeAll+0xc0>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	b31b      	cbz	r3, 8003c44 <xTaskResumeAll+0x88>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003bfc:	4b1f      	ldr	r3, [pc, #124]	; (8003c7c <xTaskResumeAll+0xc0>)
 8003bfe:	68db      	ldr	r3, [r3, #12]
 8003c00:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003c02:	f104 0018 	add.w	r0, r4, #24
 8003c06:	f7fe fd24 	bl	8002652 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c0a:	1d25      	adds	r5, r4, #4
 8003c0c:	4628      	mov	r0, r5
 8003c0e:	f7fe fd20 	bl	8002652 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003c12:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003c14:	2201      	movs	r2, #1
 8003c16:	409a      	lsls	r2, r3
 8003c18:	4919      	ldr	r1, [pc, #100]	; (8003c80 <xTaskResumeAll+0xc4>)
 8003c1a:	6808      	ldr	r0, [r1, #0]
 8003c1c:	4302      	orrs	r2, r0
 8003c1e:	600a      	str	r2, [r1, #0]
 8003c20:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003c24:	009a      	lsls	r2, r3, #2
 8003c26:	4629      	mov	r1, r5
 8003c28:	4816      	ldr	r0, [pc, #88]	; (8003c84 <xTaskResumeAll+0xc8>)
 8003c2a:	4410      	add	r0, r2
 8003c2c:	f7fe fceb 	bl	8002606 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003c30:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003c32:	4b15      	ldr	r3, [pc, #84]	; (8003c88 <xTaskResumeAll+0xcc>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	d3dc      	bcc.n	8003bf6 <xTaskResumeAll+0x3a>
						xYieldPending = pdTRUE;
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	4b13      	ldr	r3, [pc, #76]	; (8003c8c <xTaskResumeAll+0xd0>)
 8003c40:	601a      	str	r2, [r3, #0]
 8003c42:	e7d8      	b.n	8003bf6 <xTaskResumeAll+0x3a>
				if( pxTCB != NULL )
 8003c44:	b10c      	cbz	r4, 8003c4a <xTaskResumeAll+0x8e>
					prvResetNextTaskUnblockTime();
 8003c46:	f7ff fd13 	bl	8003670 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003c4a:	4b11      	ldr	r3, [pc, #68]	; (8003c90 <xTaskResumeAll+0xd4>)
 8003c4c:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003c4e:	b924      	cbnz	r4, 8003c5a <xTaskResumeAll+0x9e>
				if( xYieldPending != pdFALSE )
 8003c50:	4b0e      	ldr	r3, [pc, #56]	; (8003c8c <xTaskResumeAll+0xd0>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	e7ca      	b.n	8003bec <xTaskResumeAll+0x30>
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003c56:	3c01      	subs	r4, #1
 8003c58:	d007      	beq.n	8003c6a <xTaskResumeAll+0xae>
							if( xTaskIncrementTick() != pdFALSE )
 8003c5a:	f7ff ff39 	bl	8003ad0 <xTaskIncrementTick>
 8003c5e:	2800      	cmp	r0, #0
 8003c60:	d0f9      	beq.n	8003c56 <xTaskResumeAll+0x9a>
								xYieldPending = pdTRUE;
 8003c62:	2201      	movs	r2, #1
 8003c64:	4b09      	ldr	r3, [pc, #36]	; (8003c8c <xTaskResumeAll+0xd0>)
 8003c66:	601a      	str	r2, [r3, #0]
 8003c68:	e7f5      	b.n	8003c56 <xTaskResumeAll+0x9a>
						uxPendedTicks = 0;
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	4b08      	ldr	r3, [pc, #32]	; (8003c90 <xTaskResumeAll+0xd4>)
 8003c6e:	601a      	str	r2, [r3, #0]
 8003c70:	e7ee      	b.n	8003c50 <xTaskResumeAll+0x94>
 8003c72:	bf00      	nop
 8003c74:	20003d5c 	.word	0x20003d5c
 8003c78:	20003d50 	.word	0x20003d50
 8003c7c:	20003d98 	.word	0x20003d98
 8003c80:	20003d64 	.word	0x20003d64
 8003c84:	20003cc4 	.word	0x20003cc4
 8003c88:	20003cb8 	.word	0x20003cb8
 8003c8c:	20003ddc 	.word	0x20003ddc
 8003c90:	20003d58 	.word	0x20003d58

08003c94 <vTaskDelay>:
	{
 8003c94:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003c96:	b1a8      	cbz	r0, 8003cc4 <vTaskDelay+0x30>
 8003c98:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 8003c9a:	4b10      	ldr	r3, [pc, #64]	; (8003cdc <vTaskDelay+0x48>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	b143      	cbz	r3, 8003cb2 <vTaskDelay+0x1e>
 8003ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ca4:	f383 8811 	msr	BASEPRI, r3
 8003ca8:	f3bf 8f6f 	isb	sy
 8003cac:	f3bf 8f4f 	dsb	sy
 8003cb0:	e7fe      	b.n	8003cb0 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8003cb2:	f7ff fef7 	bl	8003aa4 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003cb6:	2100      	movs	r1, #0
 8003cb8:	4620      	mov	r0, r4
 8003cba:	f7ff fdff 	bl	80038bc <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8003cbe:	f7ff ff7d 	bl	8003bbc <xTaskResumeAll>
 8003cc2:	e000      	b.n	8003cc6 <vTaskDelay+0x32>
	BaseType_t xAlreadyYielded = pdFALSE;
 8003cc4:	2000      	movs	r0, #0
		if( xAlreadyYielded == pdFALSE )
 8003cc6:	b938      	cbnz	r0, 8003cd8 <vTaskDelay+0x44>
			portYIELD_WITHIN_API();
 8003cc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ccc:	4b04      	ldr	r3, [pc, #16]	; (8003ce0 <vTaskDelay+0x4c>)
 8003cce:	601a      	str	r2, [r3, #0]
 8003cd0:	f3bf 8f4f 	dsb	sy
 8003cd4:	f3bf 8f6f 	isb	sy
 8003cd8:	bd10      	pop	{r4, pc}
 8003cda:	bf00      	nop
 8003cdc:	20003d5c 	.word	0x20003d5c
 8003ce0:	e000ed04 	.word	0xe000ed04

08003ce4 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003ce4:	4b21      	ldr	r3, [pc, #132]	; (8003d6c <vTaskSwitchContext+0x88>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	b9c3      	cbnz	r3, 8003d1c <vTaskSwitchContext+0x38>
		xYieldPending = pdFALSE;
 8003cea:	2200      	movs	r2, #0
 8003cec:	4b20      	ldr	r3, [pc, #128]	; (8003d70 <vTaskSwitchContext+0x8c>)
 8003cee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003cf0:	4b20      	ldr	r3, [pc, #128]	; (8003d74 <vTaskSwitchContext+0x90>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003cf4:	fab3 f383 	clz	r3, r3
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	f1c3 031f 	rsb	r3, r3, #31
 8003cfe:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8003d02:	008a      	lsls	r2, r1, #2
 8003d04:	491c      	ldr	r1, [pc, #112]	; (8003d78 <vTaskSwitchContext+0x94>)
 8003d06:	588a      	ldr	r2, [r1, r2]
 8003d08:	b962      	cbnz	r2, 8003d24 <vTaskSwitchContext+0x40>
	__asm volatile
 8003d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d0e:	f383 8811 	msr	BASEPRI, r3
 8003d12:	f3bf 8f6f 	isb	sy
 8003d16:	f3bf 8f4f 	dsb	sy
 8003d1a:	e7fe      	b.n	8003d1a <vTaskSwitchContext+0x36>
		xYieldPending = pdTRUE;
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	4b14      	ldr	r3, [pc, #80]	; (8003d70 <vTaskSwitchContext+0x8c>)
 8003d20:	601a      	str	r2, [r3, #0]
 8003d22:	4770      	bx	lr
{
 8003d24:	b410      	push	{r4}
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003d26:	4814      	ldr	r0, [pc, #80]	; (8003d78 <vTaskSwitchContext+0x94>)
 8003d28:	009a      	lsls	r2, r3, #2
 8003d2a:	18d4      	adds	r4, r2, r3
 8003d2c:	00a1      	lsls	r1, r4, #2
 8003d2e:	4401      	add	r1, r0
 8003d30:	684c      	ldr	r4, [r1, #4]
 8003d32:	6864      	ldr	r4, [r4, #4]
 8003d34:	604c      	str	r4, [r1, #4]
 8003d36:	441a      	add	r2, r3
 8003d38:	0091      	lsls	r1, r2, #2
 8003d3a:	3108      	adds	r1, #8
 8003d3c:	4408      	add	r0, r1
 8003d3e:	4284      	cmp	r4, r0
 8003d40:	d00b      	beq.n	8003d5a <vTaskSwitchContext+0x76>
 8003d42:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003d46:	009a      	lsls	r2, r3, #2
 8003d48:	4b0b      	ldr	r3, [pc, #44]	; (8003d78 <vTaskSwitchContext+0x94>)
 8003d4a:	4413      	add	r3, r2
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	68da      	ldr	r2, [r3, #12]
 8003d50:	4b0a      	ldr	r3, [pc, #40]	; (8003d7c <vTaskSwitchContext+0x98>)
 8003d52:	601a      	str	r2, [r3, #0]
}
 8003d54:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003d58:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003d5a:	6860      	ldr	r0, [r4, #4]
 8003d5c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8003d60:	0091      	lsls	r1, r2, #2
 8003d62:	4a05      	ldr	r2, [pc, #20]	; (8003d78 <vTaskSwitchContext+0x94>)
 8003d64:	440a      	add	r2, r1
 8003d66:	6050      	str	r0, [r2, #4]
 8003d68:	e7eb      	b.n	8003d42 <vTaskSwitchContext+0x5e>
 8003d6a:	bf00      	nop
 8003d6c:	20003d5c 	.word	0x20003d5c
 8003d70:	20003ddc 	.word	0x20003ddc
 8003d74:	20003d64 	.word	0x20003d64
 8003d78:	20003cc4 	.word	0x20003cc4
 8003d7c:	20003cb8 	.word	0x20003cb8

08003d80 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8003d80:	b940      	cbnz	r0, 8003d94 <vTaskPlaceOnEventList+0x14>
 8003d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d86:	f383 8811 	msr	BASEPRI, r3
 8003d8a:	f3bf 8f6f 	isb	sy
 8003d8e:	f3bf 8f4f 	dsb	sy
 8003d92:	e7fe      	b.n	8003d92 <vTaskPlaceOnEventList+0x12>
{
 8003d94:	b510      	push	{r4, lr}
 8003d96:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003d98:	4b04      	ldr	r3, [pc, #16]	; (8003dac <vTaskPlaceOnEventList+0x2c>)
 8003d9a:	6819      	ldr	r1, [r3, #0]
 8003d9c:	3118      	adds	r1, #24
 8003d9e:	f7fe fc3e 	bl	800261e <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003da2:	2101      	movs	r1, #1
 8003da4:	4620      	mov	r0, r4
 8003da6:	f7ff fd89 	bl	80038bc <prvAddCurrentTaskToDelayedList>
 8003daa:	bd10      	pop	{r4, pc}
 8003dac:	20003cb8 	.word	0x20003cb8

08003db0 <xTaskRemoveFromEventList>:
{
 8003db0:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003db2:	68c3      	ldr	r3, [r0, #12]
 8003db4:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8003db6:	b324      	cbz	r4, 8003e02 <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003db8:	f104 0518 	add.w	r5, r4, #24
 8003dbc:	4628      	mov	r0, r5
 8003dbe:	f7fe fc48 	bl	8002652 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003dc2:	4b18      	ldr	r3, [pc, #96]	; (8003e24 <xTaskRemoveFromEventList+0x74>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	bb2b      	cbnz	r3, 8003e14 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003dc8:	1d25      	adds	r5, r4, #4
 8003dca:	4628      	mov	r0, r5
 8003dcc:	f7fe fc41 	bl	8002652 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003dd0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	409a      	lsls	r2, r3
 8003dd6:	4914      	ldr	r1, [pc, #80]	; (8003e28 <xTaskRemoveFromEventList+0x78>)
 8003dd8:	6808      	ldr	r0, [r1, #0]
 8003dda:	4302      	orrs	r2, r0
 8003ddc:	600a      	str	r2, [r1, #0]
 8003dde:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003de2:	009a      	lsls	r2, r3, #2
 8003de4:	4629      	mov	r1, r5
 8003de6:	4811      	ldr	r0, [pc, #68]	; (8003e2c <xTaskRemoveFromEventList+0x7c>)
 8003de8:	4410      	add	r0, r2
 8003dea:	f7fe fc0c 	bl	8002606 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003dee:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003df0:	4b0f      	ldr	r3, [pc, #60]	; (8003e30 <xTaskRemoveFromEventList+0x80>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df6:	429a      	cmp	r2, r3
 8003df8:	d911      	bls.n	8003e1e <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
 8003dfa:	2001      	movs	r0, #1
 8003dfc:	4b0d      	ldr	r3, [pc, #52]	; (8003e34 <xTaskRemoveFromEventList+0x84>)
 8003dfe:	6018      	str	r0, [r3, #0]
 8003e00:	bd38      	pop	{r3, r4, r5, pc}
 8003e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e06:	f383 8811 	msr	BASEPRI, r3
 8003e0a:	f3bf 8f6f 	isb	sy
 8003e0e:	f3bf 8f4f 	dsb	sy
 8003e12:	e7fe      	b.n	8003e12 <xTaskRemoveFromEventList+0x62>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003e14:	4629      	mov	r1, r5
 8003e16:	4808      	ldr	r0, [pc, #32]	; (8003e38 <xTaskRemoveFromEventList+0x88>)
 8003e18:	f7fe fbf5 	bl	8002606 <vListInsertEnd>
 8003e1c:	e7e7      	b.n	8003dee <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
 8003e1e:	2000      	movs	r0, #0
}
 8003e20:	bd38      	pop	{r3, r4, r5, pc}
 8003e22:	bf00      	nop
 8003e24:	20003d5c 	.word	0x20003d5c
 8003e28:	20003d64 	.word	0x20003d64
 8003e2c:	20003cc4 	.word	0x20003cc4
 8003e30:	20003cb8 	.word	0x20003cb8
 8003e34:	20003ddc 	.word	0x20003ddc
 8003e38:	20003d98 	.word	0x20003d98

08003e3c <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003e3c:	4b03      	ldr	r3, [pc, #12]	; (8003e4c <vTaskInternalSetTimeOutState+0x10>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003e42:	4b03      	ldr	r3, [pc, #12]	; (8003e50 <vTaskInternalSetTimeOutState+0x14>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	6043      	str	r3, [r0, #4]
 8003e48:	4770      	bx	lr
 8003e4a:	bf00      	nop
 8003e4c:	20003d94 	.word	0x20003d94
 8003e50:	20003dd8 	.word	0x20003dd8

08003e54 <xTaskCheckForTimeOut>:
{
 8003e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 8003e56:	b1e0      	cbz	r0, 8003e92 <xTaskCheckForTimeOut+0x3e>
 8003e58:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 8003e5a:	b319      	cbz	r1, 8003ea4 <xTaskCheckForTimeOut+0x50>
 8003e5c:	460c      	mov	r4, r1
	taskENTER_CRITICAL();
 8003e5e:	f7fe fc79 	bl	8002754 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8003e62:	4b1a      	ldr	r3, [pc, #104]	; (8003ecc <xTaskCheckForTimeOut+0x78>)
 8003e64:	6818      	ldr	r0, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003e66:	6869      	ldr	r1, [r5, #4]
 8003e68:	1a42      	subs	r2, r0, r1
			if( *pxTicksToWait == portMAX_DELAY )
 8003e6a:	6823      	ldr	r3, [r4, #0]
 8003e6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e70:	d028      	beq.n	8003ec4 <xTaskCheckForTimeOut+0x70>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003e72:	682f      	ldr	r7, [r5, #0]
 8003e74:	4e16      	ldr	r6, [pc, #88]	; (8003ed0 <xTaskCheckForTimeOut+0x7c>)
 8003e76:	6836      	ldr	r6, [r6, #0]
 8003e78:	42b7      	cmp	r7, r6
 8003e7a:	d001      	beq.n	8003e80 <xTaskCheckForTimeOut+0x2c>
 8003e7c:	4288      	cmp	r0, r1
 8003e7e:	d223      	bcs.n	8003ec8 <xTaskCheckForTimeOut+0x74>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d318      	bcc.n	8003eb6 <xTaskCheckForTimeOut+0x62>
			*pxTicksToWait = 0;
 8003e84:	2300      	movs	r3, #0
 8003e86:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8003e88:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 8003e8a:	f7fe fc85 	bl	8002798 <vPortExitCritical>
}
 8003e8e:	4620      	mov	r0, r4
 8003e90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e96:	f383 8811 	msr	BASEPRI, r3
 8003e9a:	f3bf 8f6f 	isb	sy
 8003e9e:	f3bf 8f4f 	dsb	sy
 8003ea2:	e7fe      	b.n	8003ea2 <xTaskCheckForTimeOut+0x4e>
 8003ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ea8:	f383 8811 	msr	BASEPRI, r3
 8003eac:	f3bf 8f6f 	isb	sy
 8003eb0:	f3bf 8f4f 	dsb	sy
 8003eb4:	e7fe      	b.n	8003eb4 <xTaskCheckForTimeOut+0x60>
			*pxTicksToWait -= xElapsedTime;
 8003eb6:	1a9b      	subs	r3, r3, r2
 8003eb8:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003eba:	4628      	mov	r0, r5
 8003ebc:	f7ff ffbe 	bl	8003e3c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003ec0:	2400      	movs	r4, #0
 8003ec2:	e7e2      	b.n	8003e8a <xTaskCheckForTimeOut+0x36>
				xReturn = pdFALSE;
 8003ec4:	2400      	movs	r4, #0
 8003ec6:	e7e0      	b.n	8003e8a <xTaskCheckForTimeOut+0x36>
			xReturn = pdTRUE;
 8003ec8:	2401      	movs	r4, #1
 8003eca:	e7de      	b.n	8003e8a <xTaskCheckForTimeOut+0x36>
 8003ecc:	20003dd8 	.word	0x20003dd8
 8003ed0:	20003d94 	.word	0x20003d94

08003ed4 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	4b01      	ldr	r3, [pc, #4]	; (8003edc <vTaskMissedYield+0x8>)
 8003ed8:	601a      	str	r2, [r3, #0]
 8003eda:	4770      	bx	lr
 8003edc:	20003ddc 	.word	0x20003ddc

08003ee0 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8003ee0:	4b05      	ldr	r3, [pc, #20]	; (8003ef8 <xTaskGetSchedulerState+0x18>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	b123      	cbz	r3, 8003ef0 <xTaskGetSchedulerState+0x10>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ee6:	4b05      	ldr	r3, [pc, #20]	; (8003efc <xTaskGetSchedulerState+0x1c>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	b91b      	cbnz	r3, 8003ef4 <xTaskGetSchedulerState+0x14>
				xReturn = taskSCHEDULER_RUNNING;
 8003eec:	2002      	movs	r0, #2
 8003eee:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003ef0:	2001      	movs	r0, #1
 8003ef2:	4770      	bx	lr
				xReturn = taskSCHEDULER_SUSPENDED;
 8003ef4:	2000      	movs	r0, #0
	}
 8003ef6:	4770      	bx	lr
 8003ef8:	20003dac 	.word	0x20003dac
 8003efc:	20003d5c 	.word	0x20003d5c

08003f00 <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 8003f00:	2800      	cmp	r0, #0
 8003f02:	d054      	beq.n	8003fae <xTaskPriorityInherit+0xae>
	{
 8003f04:	b538      	push	{r3, r4, r5, lr}
 8003f06:	4604      	mov	r4, r0
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8003f08:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8003f0a:	492a      	ldr	r1, [pc, #168]	; (8003fb4 <xTaskPriorityInherit+0xb4>)
 8003f0c:	6809      	ldr	r1, [r1, #0]
 8003f0e:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8003f10:	428a      	cmp	r2, r1
 8003f12:	d242      	bcs.n	8003f9a <xTaskPriorityInherit+0x9a>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003f14:	6981      	ldr	r1, [r0, #24]
 8003f16:	2900      	cmp	r1, #0
 8003f18:	db05      	blt.n	8003f26 <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f1a:	4926      	ldr	r1, [pc, #152]	; (8003fb4 <xTaskPriorityInherit+0xb4>)
 8003f1c:	6809      	ldr	r1, [r1, #0]
 8003f1e:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8003f20:	f1c1 0107 	rsb	r1, r1, #7
 8003f24:	6181      	str	r1, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8003f26:	6960      	ldr	r0, [r4, #20]
 8003f28:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003f2c:	0091      	lsls	r1, r2, #2
 8003f2e:	4a22      	ldr	r2, [pc, #136]	; (8003fb8 <xTaskPriorityInherit+0xb8>)
 8003f30:	440a      	add	r2, r1
 8003f32:	4290      	cmp	r0, r2
 8003f34:	d007      	beq.n	8003f46 <xTaskPriorityInherit+0x46>
 8003f36:	2200      	movs	r2, #0
 8003f38:	b93a      	cbnz	r2, 8003f4a <xTaskPriorityInherit+0x4a>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003f3a:	4a1e      	ldr	r2, [pc, #120]	; (8003fb4 <xTaskPriorityInherit+0xb4>)
 8003f3c:	6812      	ldr	r2, [r2, #0]
 8003f3e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003f40:	62e2      	str	r2, [r4, #44]	; 0x2c
				xReturn = pdTRUE;
 8003f42:	2001      	movs	r0, #1
 8003f44:	bd38      	pop	{r3, r4, r5, pc}
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8003f46:	2201      	movs	r2, #1
 8003f48:	e7f6      	b.n	8003f38 <xTaskPriorityInherit+0x38>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003f4a:	1d25      	adds	r5, r4, #4
 8003f4c:	4628      	mov	r0, r5
 8003f4e:	f7fe fb80 	bl	8002652 <uxListRemove>
 8003f52:	b968      	cbnz	r0, 8003f70 <xTaskPriorityInherit+0x70>
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8003f54:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003f56:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8003f5a:	008a      	lsls	r2, r1, #2
 8003f5c:	4916      	ldr	r1, [pc, #88]	; (8003fb8 <xTaskPriorityInherit+0xb8>)
 8003f5e:	588a      	ldr	r2, [r1, r2]
 8003f60:	b932      	cbnz	r2, 8003f70 <xTaskPriorityInherit+0x70>
 8003f62:	2201      	movs	r2, #1
 8003f64:	409a      	lsls	r2, r3
 8003f66:	4915      	ldr	r1, [pc, #84]	; (8003fbc <xTaskPriorityInherit+0xbc>)
 8003f68:	680b      	ldr	r3, [r1, #0]
 8003f6a:	ea23 0302 	bic.w	r3, r3, r2
 8003f6e:	600b      	str	r3, [r1, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003f70:	4b10      	ldr	r3, [pc, #64]	; (8003fb4 <xTaskPriorityInherit+0xb4>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f76:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8003f78:	2401      	movs	r4, #1
 8003f7a:	fa04 f203 	lsl.w	r2, r4, r3
 8003f7e:	490f      	ldr	r1, [pc, #60]	; (8003fbc <xTaskPriorityInherit+0xbc>)
 8003f80:	6808      	ldr	r0, [r1, #0]
 8003f82:	4302      	orrs	r2, r0
 8003f84:	600a      	str	r2, [r1, #0]
 8003f86:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003f8a:	009a      	lsls	r2, r3, #2
 8003f8c:	4629      	mov	r1, r5
 8003f8e:	480a      	ldr	r0, [pc, #40]	; (8003fb8 <xTaskPriorityInherit+0xb8>)
 8003f90:	4410      	add	r0, r2
 8003f92:	f7fe fb38 	bl	8002606 <vListInsertEnd>
				xReturn = pdTRUE;
 8003f96:	4620      	mov	r0, r4
 8003f98:	bd38      	pop	{r3, r4, r5, pc}
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8003f9a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003f9c:	4b05      	ldr	r3, [pc, #20]	; (8003fb4 <xTaskPriorityInherit+0xb4>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	d201      	bcs.n	8003faa <xTaskPriorityInherit+0xaa>
					xReturn = pdTRUE;
 8003fa6:	2001      	movs	r0, #1
	}
 8003fa8:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
 8003faa:	2000      	movs	r0, #0
 8003fac:	bd38      	pop	{r3, r4, r5, pc}
 8003fae:	2000      	movs	r0, #0
 8003fb0:	4770      	bx	lr
 8003fb2:	bf00      	nop
 8003fb4:	20003cb8 	.word	0x20003cb8
 8003fb8:	20003cc4 	.word	0x20003cc4
 8003fbc:	20003d64 	.word	0x20003d64

08003fc0 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8003fc0:	2800      	cmp	r0, #0
 8003fc2:	d04a      	beq.n	800405a <xTaskPriorityDisinherit+0x9a>
	{
 8003fc4:	b538      	push	{r3, r4, r5, lr}
 8003fc6:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 8003fc8:	4a27      	ldr	r2, [pc, #156]	; (8004068 <xTaskPriorityDisinherit+0xa8>)
 8003fca:	6812      	ldr	r2, [r2, #0]
 8003fcc:	4290      	cmp	r0, r2
 8003fce:	d008      	beq.n	8003fe2 <xTaskPriorityDisinherit+0x22>
 8003fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fd4:	f383 8811 	msr	BASEPRI, r3
 8003fd8:	f3bf 8f6f 	isb	sy
 8003fdc:	f3bf 8f4f 	dsb	sy
 8003fe0:	e7fe      	b.n	8003fe0 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 8003fe2:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8003fe4:	b942      	cbnz	r2, 8003ff8 <xTaskPriorityDisinherit+0x38>
 8003fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fea:	f383 8811 	msr	BASEPRI, r3
 8003fee:	f3bf 8f6f 	isb	sy
 8003ff2:	f3bf 8f4f 	dsb	sy
 8003ff6:	e7fe      	b.n	8003ff6 <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 8003ff8:	3a01      	subs	r2, #1
 8003ffa:	6482      	str	r2, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003ffc:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8003ffe:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8004000:	4288      	cmp	r0, r1
 8004002:	d02c      	beq.n	800405e <xTaskPriorityDisinherit+0x9e>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004004:	bb6a      	cbnz	r2, 8004062 <xTaskPriorityDisinherit+0xa2>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004006:	1d25      	adds	r5, r4, #4
 8004008:	4628      	mov	r0, r5
 800400a:	f7fe fb22 	bl	8002652 <uxListRemove>
 800400e:	b970      	cbnz	r0, 800402e <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004010:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004012:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8004016:	008b      	lsls	r3, r1, #2
 8004018:	4914      	ldr	r1, [pc, #80]	; (800406c <xTaskPriorityDisinherit+0xac>)
 800401a:	58cb      	ldr	r3, [r1, r3]
 800401c:	b93b      	cbnz	r3, 800402e <xTaskPriorityDisinherit+0x6e>
 800401e:	2301      	movs	r3, #1
 8004020:	fa03 f202 	lsl.w	r2, r3, r2
 8004024:	4912      	ldr	r1, [pc, #72]	; (8004070 <xTaskPriorityDisinherit+0xb0>)
 8004026:	680b      	ldr	r3, [r1, #0]
 8004028:	ea23 0302 	bic.w	r3, r3, r2
 800402c:	600b      	str	r3, [r1, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800402e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004030:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004032:	f1c3 0207 	rsb	r2, r3, #7
 8004036:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8004038:	2401      	movs	r4, #1
 800403a:	fa04 f203 	lsl.w	r2, r4, r3
 800403e:	490c      	ldr	r1, [pc, #48]	; (8004070 <xTaskPriorityDisinherit+0xb0>)
 8004040:	6808      	ldr	r0, [r1, #0]
 8004042:	4302      	orrs	r2, r0
 8004044:	600a      	str	r2, [r1, #0]
 8004046:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800404a:	009a      	lsls	r2, r3, #2
 800404c:	4629      	mov	r1, r5
 800404e:	4807      	ldr	r0, [pc, #28]	; (800406c <xTaskPriorityDisinherit+0xac>)
 8004050:	4410      	add	r0, r2
 8004052:	f7fe fad8 	bl	8002606 <vListInsertEnd>
					xReturn = pdTRUE;
 8004056:	4620      	mov	r0, r4
 8004058:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
 800405a:	2000      	movs	r0, #0
 800405c:	4770      	bx	lr
 800405e:	2000      	movs	r0, #0
 8004060:	bd38      	pop	{r3, r4, r5, pc}
 8004062:	2000      	movs	r0, #0
	}
 8004064:	bd38      	pop	{r3, r4, r5, pc}
 8004066:	bf00      	nop
 8004068:	20003cb8 	.word	0x20003cb8
 800406c:	20003cc4 	.word	0x20003cc4
 8004070:	20003d64 	.word	0x20003d64

08004074 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 8004074:	2800      	cmp	r0, #0
 8004076:	d05b      	beq.n	8004130 <vTaskPriorityDisinheritAfterTimeout+0xbc>
	{
 8004078:	b538      	push	{r3, r4, r5, lr}
 800407a:	4604      	mov	r4, r0
			configASSERT( pxTCB->uxMutexesHeld );
 800407c:	6c80      	ldr	r0, [r0, #72]	; 0x48
 800407e:	b940      	cbnz	r0, 8004092 <vTaskPriorityDisinheritAfterTimeout+0x1e>
 8004080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004084:	f383 8811 	msr	BASEPRI, r3
 8004088:	f3bf 8f6f 	isb	sy
 800408c:	f3bf 8f4f 	dsb	sy
 8004090:	e7fe      	b.n	8004090 <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004092:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8004094:	428a      	cmp	r2, r1
 8004096:	d200      	bcs.n	800409a <vTaskPriorityDisinheritAfterTimeout+0x26>
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004098:	460a      	mov	r2, r1
			if( pxTCB->uxPriority != uxPriorityToUse )
 800409a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800409c:	428a      	cmp	r2, r1
 800409e:	d001      	beq.n	80040a4 <vTaskPriorityDisinheritAfterTimeout+0x30>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80040a0:	2801      	cmp	r0, #1
 80040a2:	d000      	beq.n	80040a6 <vTaskPriorityDisinheritAfterTimeout+0x32>
 80040a4:	bd38      	pop	{r3, r4, r5, pc}
					configASSERT( pxTCB != pxCurrentTCB );
 80040a6:	4823      	ldr	r0, [pc, #140]	; (8004134 <vTaskPriorityDisinheritAfterTimeout+0xc0>)
 80040a8:	6800      	ldr	r0, [r0, #0]
 80040aa:	4284      	cmp	r4, r0
 80040ac:	d108      	bne.n	80040c0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
 80040ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040b2:	f383 8811 	msr	BASEPRI, r3
 80040b6:	f3bf 8f6f 	isb	sy
 80040ba:	f3bf 8f4f 	dsb	sy
 80040be:	e7fe      	b.n	80040be <vTaskPriorityDisinheritAfterTimeout+0x4a>
					pxTCB->uxPriority = uxPriorityToUse;
 80040c0:	62e2      	str	r2, [r4, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80040c2:	69a0      	ldr	r0, [r4, #24]
 80040c4:	2800      	cmp	r0, #0
 80040c6:	db02      	blt.n	80040ce <vTaskPriorityDisinheritAfterTimeout+0x5a>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040c8:	f1c2 0207 	rsb	r2, r2, #7
 80040cc:	61a2      	str	r2, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80040ce:	6963      	ldr	r3, [r4, #20]
 80040d0:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80040d4:	0088      	lsls	r0, r1, #2
 80040d6:	4a18      	ldr	r2, [pc, #96]	; (8004138 <vTaskPriorityDisinheritAfterTimeout+0xc4>)
 80040d8:	4402      	add	r2, r0
 80040da:	4293      	cmp	r3, r2
 80040dc:	d126      	bne.n	800412c <vTaskPriorityDisinheritAfterTimeout+0xb8>
 80040de:	2201      	movs	r2, #1
 80040e0:	2a00      	cmp	r2, #0
 80040e2:	d0df      	beq.n	80040a4 <vTaskPriorityDisinheritAfterTimeout+0x30>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80040e4:	1d25      	adds	r5, r4, #4
 80040e6:	4628      	mov	r0, r5
 80040e8:	f7fe fab3 	bl	8002652 <uxListRemove>
 80040ec:	b970      	cbnz	r0, 800410c <vTaskPriorityDisinheritAfterTimeout+0x98>
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80040ee:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80040f0:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 80040f4:	008b      	lsls	r3, r1, #2
 80040f6:	4910      	ldr	r1, [pc, #64]	; (8004138 <vTaskPriorityDisinheritAfterTimeout+0xc4>)
 80040f8:	58cb      	ldr	r3, [r1, r3]
 80040fa:	b93b      	cbnz	r3, 800410c <vTaskPriorityDisinheritAfterTimeout+0x98>
 80040fc:	2301      	movs	r3, #1
 80040fe:	fa03 f202 	lsl.w	r2, r3, r2
 8004102:	490e      	ldr	r1, [pc, #56]	; (800413c <vTaskPriorityDisinheritAfterTimeout+0xc8>)
 8004104:	680b      	ldr	r3, [r1, #0]
 8004106:	ea23 0302 	bic.w	r3, r3, r2
 800410a:	600b      	str	r3, [r1, #0]
						prvAddTaskToReadyList( pxTCB );
 800410c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800410e:	2201      	movs	r2, #1
 8004110:	409a      	lsls	r2, r3
 8004112:	490a      	ldr	r1, [pc, #40]	; (800413c <vTaskPriorityDisinheritAfterTimeout+0xc8>)
 8004114:	6808      	ldr	r0, [r1, #0]
 8004116:	4302      	orrs	r2, r0
 8004118:	600a      	str	r2, [r1, #0]
 800411a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800411e:	009a      	lsls	r2, r3, #2
 8004120:	4629      	mov	r1, r5
 8004122:	4805      	ldr	r0, [pc, #20]	; (8004138 <vTaskPriorityDisinheritAfterTimeout+0xc4>)
 8004124:	4410      	add	r0, r2
 8004126:	f7fe fa6e 	bl	8002606 <vListInsertEnd>
	}
 800412a:	e7bb      	b.n	80040a4 <vTaskPriorityDisinheritAfterTimeout+0x30>
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800412c:	2200      	movs	r2, #0
 800412e:	e7d7      	b.n	80040e0 <vTaskPriorityDisinheritAfterTimeout+0x6c>
 8004130:	4770      	bx	lr
 8004132:	bf00      	nop
 8004134:	20003cb8 	.word	0x20003cb8
 8004138:	20003cc4 	.word	0x20003cc4
 800413c:	20003d64 	.word	0x20003d64

08004140 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8004140:	4b05      	ldr	r3, [pc, #20]	; (8004158 <pvTaskIncrementMutexHeldCount+0x18>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	b123      	cbz	r3, 8004150 <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
 8004146:	4b04      	ldr	r3, [pc, #16]	; (8004158 <pvTaskIncrementMutexHeldCount+0x18>)
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	6c93      	ldr	r3, [r2, #72]	; 0x48
 800414c:	3301      	adds	r3, #1
 800414e:	6493      	str	r3, [r2, #72]	; 0x48
		return pxCurrentTCB;
 8004150:	4b01      	ldr	r3, [pc, #4]	; (8004158 <pvTaskIncrementMutexHeldCount+0x18>)
 8004152:	6818      	ldr	r0, [r3, #0]
	}
 8004154:	4770      	bx	lr
 8004156:	bf00      	nop
 8004158:	20003cb8 	.word	0x20003cb8

0800415c <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800415c:	b510      	push	{r4, lr}
 800415e:	460c      	mov	r4, r1

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8004160:	680a      	ldr	r2, [r1, #0]
 8004162:	320c      	adds	r2, #12
 8004164:	f001 ff44 	bl	8005ff0 <tcpip_send_msg_wait_sem>
  if (err == ERR_OK) {
 8004168:	4603      	mov	r3, r0
 800416a:	b908      	cbnz	r0, 8004170 <netconn_apimsg+0x14>
    return apimsg->err;
 800416c:	f994 3004 	ldrsb.w	r3, [r4, #4]
  }
  return err;
}
 8004170:	4618      	mov	r0, r3
 8004172:	bd10      	pop	{r4, pc}

08004174 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn*
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8004174:	b570      	push	{r4, r5, r6, lr}
 8004176:	b086      	sub	sp, #24
 8004178:	460d      	mov	r5, r1
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 800417a:	4611      	mov	r1, r2
 800417c:	f000 fe5a 	bl	8004e34 <netconn_alloc>
  if (conn != NULL) {
 8004180:	4604      	mov	r4, r0
 8004182:	b140      	cbz	r0, 8004196 <netconn_new_with_proto_and_callback+0x22>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 8004184:	f88d 500c 	strb.w	r5, [sp, #12]
    API_MSG_VAR_REF(msg).conn = conn;
 8004188:	a906      	add	r1, sp, #24
 800418a:	f841 0d14 	str.w	r0, [r1, #-20]!
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 800418e:	4820      	ldr	r0, [pc, #128]	; (8004210 <netconn_new_with_proto_and_callback+0x9c>)
 8004190:	f7ff ffe4 	bl	800415c <netconn_apimsg>
    if (err != ERR_OK) {
 8004194:	b910      	cbnz	r0, 800419c <netconn_new_with_proto_and_callback+0x28>
      return NULL;
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
}
 8004196:	4620      	mov	r0, r4
 8004198:	b006      	add	sp, #24
 800419a:	bd70      	pop	{r4, r5, r6, pc}
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800419c:	6863      	ldr	r3, [r4, #4]
 800419e:	b12b      	cbz	r3, 80041ac <netconn_new_with_proto_and_callback+0x38>
 80041a0:	4b1c      	ldr	r3, [pc, #112]	; (8004214 <netconn_new_with_proto_and_callback+0xa0>)
 80041a2:	2289      	movs	r2, #137	; 0x89
 80041a4:	491c      	ldr	r1, [pc, #112]	; (8004218 <netconn_new_with_proto_and_callback+0xa4>)
 80041a6:	481d      	ldr	r0, [pc, #116]	; (800421c <netconn_new_with_proto_and_callback+0xa8>)
 80041a8:	f009 fa27 	bl	800d5fa <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 80041ac:	f104 0510 	add.w	r5, r4, #16
 80041b0:	4628      	mov	r0, r5
 80041b2:	f008 fb1d 	bl	800c7f0 <sys_mbox_valid>
 80041b6:	b1b0      	cbz	r0, 80041e6 <netconn_new_with_proto_and_callback+0x72>
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 80041b8:	f104 0014 	add.w	r0, r4, #20
 80041bc:	f008 fb18 	bl	800c7f0 <sys_mbox_valid>
 80041c0:	b9c0      	cbnz	r0, 80041f4 <netconn_new_with_proto_and_callback+0x80>
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 80041c2:	f104 060c 	add.w	r6, r4, #12
 80041c6:	4630      	mov	r0, r6
 80041c8:	f008 fb5c 	bl	800c884 <sys_sem_valid>
 80041cc:	b1c8      	cbz	r0, 8004202 <netconn_new_with_proto_and_callback+0x8e>
      sys_sem_free(&conn->op_completed);
 80041ce:	4630      	mov	r0, r6
 80041d0:	f008 fb53 	bl	800c87a <sys_sem_free>
      sys_mbox_free(&conn->recvmbox);
 80041d4:	4628      	mov	r0, r5
 80041d6:	f008 faad 	bl	800c734 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 80041da:	4621      	mov	r1, r4
 80041dc:	2007      	movs	r0, #7
 80041de:	f003 fd9f 	bl	8007d20 <memp_free>
      return NULL;
 80041e2:	2400      	movs	r4, #0
 80041e4:	e7d7      	b.n	8004196 <netconn_new_with_proto_and_callback+0x22>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 80041e6:	4b0b      	ldr	r3, [pc, #44]	; (8004214 <netconn_new_with_proto_and_callback+0xa0>)
 80041e8:	228a      	movs	r2, #138	; 0x8a
 80041ea:	490d      	ldr	r1, [pc, #52]	; (8004220 <netconn_new_with_proto_and_callback+0xac>)
 80041ec:	480b      	ldr	r0, [pc, #44]	; (800421c <netconn_new_with_proto_and_callback+0xa8>)
 80041ee:	f009 fa04 	bl	800d5fa <iprintf>
 80041f2:	e7e1      	b.n	80041b8 <netconn_new_with_proto_and_callback+0x44>
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 80041f4:	4b07      	ldr	r3, [pc, #28]	; (8004214 <netconn_new_with_proto_and_callback+0xa0>)
 80041f6:	228c      	movs	r2, #140	; 0x8c
 80041f8:	490a      	ldr	r1, [pc, #40]	; (8004224 <netconn_new_with_proto_and_callback+0xb0>)
 80041fa:	4808      	ldr	r0, [pc, #32]	; (800421c <netconn_new_with_proto_and_callback+0xa8>)
 80041fc:	f009 f9fd 	bl	800d5fa <iprintf>
 8004200:	e7df      	b.n	80041c2 <netconn_new_with_proto_and_callback+0x4e>
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8004202:	4b04      	ldr	r3, [pc, #16]	; (8004214 <netconn_new_with_proto_and_callback+0xa0>)
 8004204:	228f      	movs	r2, #143	; 0x8f
 8004206:	4908      	ldr	r1, [pc, #32]	; (8004228 <netconn_new_with_proto_and_callback+0xb4>)
 8004208:	4804      	ldr	r0, [pc, #16]	; (800421c <netconn_new_with_proto_and_callback+0xa8>)
 800420a:	f009 f9f6 	bl	800d5fa <iprintf>
 800420e:	e7de      	b.n	80041ce <netconn_new_with_proto_and_callback+0x5a>
 8004210:	08004e01 	.word	0x08004e01
 8004214:	0800dde4 	.word	0x0800dde4
 8004218:	0800dedc 	.word	0x0800dedc
 800421c:	0800de34 	.word	0x0800de34
 8004220:	0800df00 	.word	0x0800df00
 8004224:	0800df18 	.word	0x0800df18
 8004228:	0800df3c 	.word	0x0800df3c

0800422c <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 800422c:	b530      	push	{r4, r5, lr}
 800422e:	b087      	sub	sp, #28
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8004230:	b188      	cbz	r0, 8004256 <netconn_delete+0x2a>
 8004232:	4604      	mov	r4, r0
    return ERR_OK;
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8004234:	9001      	str	r0, [sp, #4]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8004236:	2329      	movs	r3, #41	; 0x29
 8004238:	f88d 300d 	strb.w	r3, [sp, #13]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 800423c:	a901      	add	r1, sp, #4
 800423e:	4807      	ldr	r0, [pc, #28]	; (800425c <netconn_delete+0x30>)
 8004240:	f7ff ff8c 	bl	800415c <netconn_apimsg>
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8004244:	4605      	mov	r5, r0
 8004246:	b110      	cbz	r0, 800424e <netconn_delete+0x22>
  }

  netconn_free(conn);

  return ERR_OK;
}
 8004248:	4628      	mov	r0, r5
 800424a:	b007      	add	sp, #28
 800424c:	bd30      	pop	{r4, r5, pc}
  netconn_free(conn);
 800424e:	4620      	mov	r0, r4
 8004250:	f000 fe36 	bl	8004ec0 <netconn_free>
  return ERR_OK;
 8004254:	e7f8      	b.n	8004248 <netconn_delete+0x1c>
    return ERR_OK;
 8004256:	2500      	movs	r5, #0
 8004258:	e7f6      	b.n	8004248 <netconn_delete+0x1c>
 800425a:	bf00      	nop
 800425c:	080050dd 	.word	0x080050dd

08004260 <netconn_getaddr>:
 * @return ERR_CONN for invalid connections
 *         ERR_OK if the information was retrieved
 */
err_t
netconn_getaddr(struct netconn *conn, ip_addr_t *addr, u16_t *port, u8_t local)
{
 8004260:	b510      	push	{r4, lr}
 8004262:	b086      	sub	sp, #24
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_getaddr: invalid conn", (conn != NULL), return ERR_ARG;);
 8004264:	b160      	cbz	r0, 8004280 <netconn_getaddr+0x20>
  LWIP_ERROR("netconn_getaddr: invalid addr", (addr != NULL), return ERR_ARG;);
 8004266:	b1a1      	cbz	r1, 8004292 <netconn_getaddr+0x32>
  LWIP_ERROR("netconn_getaddr: invalid port", (port != NULL), return ERR_ARG;);
 8004268:	b1e2      	cbz	r2, 80042a4 <netconn_getaddr+0x44>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800426a:	9001      	str	r0, [sp, #4]
  API_MSG_VAR_REF(msg).msg.ad.local = local;
 800426c:	f88d 3014 	strb.w	r3, [sp, #20]
#if LWIP_MPU_COMPATIBLE
  err = netconn_apimsg(lwip_netconn_do_getaddr, &API_MSG_VAR_REF(msg));
  *addr = msg->msg.ad.ipaddr;
  *port = msg->msg.ad.port;
#else /* LWIP_MPU_COMPATIBLE */
  msg.msg.ad.ipaddr = addr;
 8004270:	9103      	str	r1, [sp, #12]
  msg.msg.ad.port = port;
 8004272:	9204      	str	r2, [sp, #16]
  err = netconn_apimsg(lwip_netconn_do_getaddr, &msg);
 8004274:	a901      	add	r1, sp, #4
 8004276:	4810      	ldr	r0, [pc, #64]	; (80042b8 <netconn_getaddr+0x58>)
 8004278:	f7ff ff70 	bl	800415c <netconn_apimsg>
#endif /* LWIP_MPU_COMPATIBLE */
  API_MSG_VAR_FREE(msg);

  return err;
}
 800427c:	b006      	add	sp, #24
 800427e:	bd10      	pop	{r4, pc}
  LWIP_ERROR("netconn_getaddr: invalid conn", (conn != NULL), return ERR_ARG;);
 8004280:	4b0e      	ldr	r3, [pc, #56]	; (80042bc <netconn_getaddr+0x5c>)
 8004282:	22d9      	movs	r2, #217	; 0xd9
 8004284:	490e      	ldr	r1, [pc, #56]	; (80042c0 <netconn_getaddr+0x60>)
 8004286:	480f      	ldr	r0, [pc, #60]	; (80042c4 <netconn_getaddr+0x64>)
 8004288:	f009 f9b7 	bl	800d5fa <iprintf>
 800428c:	f06f 000f 	mvn.w	r0, #15
 8004290:	e7f4      	b.n	800427c <netconn_getaddr+0x1c>
  LWIP_ERROR("netconn_getaddr: invalid addr", (addr != NULL), return ERR_ARG;);
 8004292:	4b0a      	ldr	r3, [pc, #40]	; (80042bc <netconn_getaddr+0x5c>)
 8004294:	22da      	movs	r2, #218	; 0xda
 8004296:	490c      	ldr	r1, [pc, #48]	; (80042c8 <netconn_getaddr+0x68>)
 8004298:	480a      	ldr	r0, [pc, #40]	; (80042c4 <netconn_getaddr+0x64>)
 800429a:	f009 f9ae 	bl	800d5fa <iprintf>
 800429e:	f06f 000f 	mvn.w	r0, #15
 80042a2:	e7eb      	b.n	800427c <netconn_getaddr+0x1c>
  LWIP_ERROR("netconn_getaddr: invalid port", (port != NULL), return ERR_ARG;);
 80042a4:	4b05      	ldr	r3, [pc, #20]	; (80042bc <netconn_getaddr+0x5c>)
 80042a6:	22db      	movs	r2, #219	; 0xdb
 80042a8:	4908      	ldr	r1, [pc, #32]	; (80042cc <netconn_getaddr+0x6c>)
 80042aa:	4806      	ldr	r0, [pc, #24]	; (80042c4 <netconn_getaddr+0x64>)
 80042ac:	f009 f9a5 	bl	800d5fa <iprintf>
 80042b0:	f06f 000f 	mvn.w	r0, #15
 80042b4:	e7e2      	b.n	800427c <netconn_getaddr+0x1c>
 80042b6:	bf00      	nop
 80042b8:	08005505 	.word	0x08005505
 80042bc:	0800dde4 	.word	0x0800dde4
 80042c0:	0800de5c 	.word	0x0800de5c
 80042c4:	0800de34 	.word	0x0800de34
 80042c8:	0800de7c 	.word	0x0800de7c
 80042cc:	0800de9c 	.word	0x0800de9c

080042d0 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 80042d0:	b500      	push	{lr}
 80042d2:	b087      	sub	sp, #28
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  
  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 80042d4:	b160      	cbz	r0, 80042f0 <netconn_bind+0x20>
 80042d6:	4603      	mov	r3, r0

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 80042d8:	b199      	cbz	r1, 8004302 <netconn_bind+0x32>
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80042da:	9301      	str	r3, [sp, #4]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 80042dc:	9103      	str	r1, [sp, #12]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 80042de:	f8ad 2010 	strh.w	r2, [sp, #16]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 80042e2:	a901      	add	r1, sp, #4
 80042e4:	4808      	ldr	r0, [pc, #32]	; (8004308 <netconn_bind+0x38>)
 80042e6:	f7ff ff39 	bl	800415c <netconn_apimsg>
  API_MSG_VAR_FREE(msg);

  return err;
}
 80042ea:	b007      	add	sp, #28
 80042ec:	f85d fb04 	ldr.w	pc, [sp], #4
  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 80042f0:	4b06      	ldr	r3, [pc, #24]	; (800430c <netconn_bind+0x3c>)
 80042f2:	22ff      	movs	r2, #255	; 0xff
 80042f4:	4906      	ldr	r1, [pc, #24]	; (8004310 <netconn_bind+0x40>)
 80042f6:	4807      	ldr	r0, [pc, #28]	; (8004314 <netconn_bind+0x44>)
 80042f8:	f009 f97f 	bl	800d5fa <iprintf>
 80042fc:	f06f 000f 	mvn.w	r0, #15
 8004300:	e7f3      	b.n	80042ea <netconn_bind+0x1a>
    addr = IP4_ADDR_ANY;
 8004302:	4905      	ldr	r1, [pc, #20]	; (8004318 <netconn_bind+0x48>)
 8004304:	e7e9      	b.n	80042da <netconn_bind+0xa>
 8004306:	bf00      	nop
 8004308:	08005249 	.word	0x08005249
 800430c:	0800dde4 	.word	0x0800dde4
 8004310:	0800ddc8 	.word	0x0800ddc8
 8004314:	0800de34 	.word	0x0800de34
 8004318:	0800e99c 	.word	0x0800e99c

0800431c <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 800431c:	b500      	push	{lr}
 800431e:	b087      	sub	sp, #28
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 8004320:	b140      	cbz	r0, 8004334 <netconn_listen_with_backlog+0x18>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8004322:	a906      	add	r1, sp, #24
 8004324:	f841 0d14 	str.w	r0, [r1, #-20]!
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 8004328:	4807      	ldr	r0, [pc, #28]	; (8004348 <netconn_listen_with_backlog+0x2c>)
 800432a:	f7ff ff17 	bl	800415c <netconn_apimsg>
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800432e:	b007      	add	sp, #28
 8004330:	f85d fb04 	ldr.w	pc, [sp], #4
  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 8004334:	4b05      	ldr	r3, [pc, #20]	; (800434c <netconn_listen_with_backlog+0x30>)
 8004336:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800433a:	4905      	ldr	r1, [pc, #20]	; (8004350 <netconn_listen_with_backlog+0x34>)
 800433c:	4805      	ldr	r0, [pc, #20]	; (8004354 <netconn_listen_with_backlog+0x38>)
 800433e:	f009 f95c 	bl	800d5fa <iprintf>
 8004342:	f06f 000f 	mvn.w	r0, #15
 8004346:	e7f2      	b.n	800432e <netconn_listen_with_backlog+0x12>
 8004348:	080052ad 	.word	0x080052ad
 800434c:	0800dde4 	.word	0x0800dde4
 8004350:	0800debc 	.word	0x0800debc
 8004354:	0800de34 	.word	0x0800de34

08004358 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 8004358:	b570      	push	{r4, r5, r6, lr}
 800435a:	b082      	sub	sp, #8
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 800435c:	b159      	cbz	r1, 8004376 <netconn_accept+0x1e>
 800435e:	4604      	mov	r4, r0
 8004360:	460d      	mov	r5, r1
  *new_conn = NULL;
 8004362:	2300      	movs	r3, #0
 8004364:	600b      	str	r3, [r1, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 8004366:	b180      	cbz	r0, 800438a <netconn_accept+0x32>

  if (ERR_IS_FATAL(conn->last_err)) {
 8004368:	f990 0008 	ldrsb.w	r0, [r0, #8]
 800436c:	f110 0f0c 	cmn.w	r0, #12
 8004370:	da15      	bge.n	800439e <netconn_accept+0x46>
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8004372:	b002      	add	sp, #8
 8004374:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 8004376:	4b21      	ldr	r3, [pc, #132]	; (80043fc <netconn_accept+0xa4>)
 8004378:	f240 128d 	movw	r2, #397	; 0x18d
 800437c:	4920      	ldr	r1, [pc, #128]	; (8004400 <netconn_accept+0xa8>)
 800437e:	4821      	ldr	r0, [pc, #132]	; (8004404 <netconn_accept+0xac>)
 8004380:	f009 f93b 	bl	800d5fa <iprintf>
 8004384:	f06f 000f 	mvn.w	r0, #15
 8004388:	e7f3      	b.n	8004372 <netconn_accept+0x1a>
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 800438a:	4b1c      	ldr	r3, [pc, #112]	; (80043fc <netconn_accept+0xa4>)
 800438c:	f240 128f 	movw	r2, #399	; 0x18f
 8004390:	491d      	ldr	r1, [pc, #116]	; (8004408 <netconn_accept+0xb0>)
 8004392:	481c      	ldr	r0, [pc, #112]	; (8004404 <netconn_accept+0xac>)
 8004394:	f009 f931 	bl	800d5fa <iprintf>
 8004398:	f06f 000f 	mvn.w	r0, #15
 800439c:	e7e9      	b.n	8004372 <netconn_accept+0x1a>
  if (!sys_mbox_valid(&conn->acceptmbox)) {
 800439e:	f104 0614 	add.w	r6, r4, #20
 80043a2:	4630      	mov	r0, r6
 80043a4:	f008 fa24 	bl	800c7f0 <sys_mbox_valid>
 80043a8:	b308      	cbz	r0, 80043ee <netconn_accept+0x96>
  sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 80043aa:	2200      	movs	r2, #0
 80043ac:	a901      	add	r1, sp, #4
 80043ae:	4630      	mov	r0, r6
 80043b0:	f008 f9df 	bl	800c772 <sys_arch_mbox_fetch>
  newconn = (struct netconn *)accept_ptr;
 80043b4:	9e01      	ldr	r6, [sp, #4]
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 80043b6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80043b8:	b11b      	cbz	r3, 80043c2 <netconn_accept+0x6a>
 80043ba:	2200      	movs	r2, #0
 80043bc:	2101      	movs	r1, #1
 80043be:	4620      	mov	r0, r4
 80043c0:	4798      	blx	r3
  if (accept_ptr == &netconn_aborted) {
 80043c2:	4b12      	ldr	r3, [pc, #72]	; (800440c <netconn_accept+0xb4>)
 80043c4:	9a01      	ldr	r2, [sp, #4]
 80043c6:	429a      	cmp	r2, r3
 80043c8:	d014      	beq.n	80043f4 <netconn_accept+0x9c>
  if (newconn == NULL) {
 80043ca:	b116      	cbz	r6, 80043d2 <netconn_accept+0x7a>
  *new_conn = newconn;
 80043cc:	602e      	str	r6, [r5, #0]
  return ERR_OK;
 80043ce:	2000      	movs	r0, #0
 80043d0:	e7cf      	b.n	8004372 <netconn_accept+0x1a>
    NETCONN_SET_SAFE_ERR(conn, ERR_CLSD);
 80043d2:	f008 fa9f 	bl	800c914 <sys_arch_protect>
 80043d6:	f994 3008 	ldrsb.w	r3, [r4, #8]
 80043da:	f113 0f0c 	cmn.w	r3, #12
 80043de:	db01      	blt.n	80043e4 <netconn_accept+0x8c>
 80043e0:	23f1      	movs	r3, #241	; 0xf1
 80043e2:	7223      	strb	r3, [r4, #8]
 80043e4:	f008 faa2 	bl	800c92c <sys_arch_unprotect>
    return ERR_CLSD;
 80043e8:	f06f 000e 	mvn.w	r0, #14
 80043ec:	e7c1      	b.n	8004372 <netconn_accept+0x1a>
    return ERR_CLSD;
 80043ee:	f06f 000e 	mvn.w	r0, #14
 80043f2:	e7be      	b.n	8004372 <netconn_accept+0x1a>
    return ERR_ABRT;
 80043f4:	f06f 000c 	mvn.w	r0, #12
 80043f8:	e7bb      	b.n	8004372 <netconn_accept+0x1a>
 80043fa:	bf00      	nop
 80043fc:	0800dde4 	.word	0x0800dde4
 8004400:	0800dd88 	.word	0x0800dd88
 8004404:	0800de34 	.word	0x0800de34
 8004408:	0800dda8 	.word	0x0800dda8
 800440c:	2000426c 	.word	0x2000426c

08004410 <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
 8004410:	b500      	push	{lr}
 8004412:	b087      	sub	sp, #28
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 8004414:	b140      	cbz	r0, 8004428 <netconn_send+0x18>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8004416:	9001      	str	r0, [sp, #4]
  API_MSG_VAR_REF(msg).msg.b = buf;
 8004418:	9103      	str	r1, [sp, #12]
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
 800441a:	a901      	add	r1, sp, #4
 800441c:	4807      	ldr	r0, [pc, #28]	; (800443c <netconn_send+0x2c>)
 800441e:	f7ff fe9d 	bl	800415c <netconn_apimsg>
  API_MSG_VAR_FREE(msg);

  return err;
}
 8004422:	b007      	add	sp, #28
 8004424:	f85d fb04 	ldr.w	pc, [sp], #4
  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 8004428:	4b05      	ldr	r3, [pc, #20]	; (8004440 <netconn_send+0x30>)
 800442a:	f240 22c3 	movw	r2, #707	; 0x2c3
 800442e:	4905      	ldr	r1, [pc, #20]	; (8004444 <netconn_send+0x34>)
 8004430:	4805      	ldr	r0, [pc, #20]	; (8004448 <netconn_send+0x38>)
 8004432:	f009 f8e2 	bl	800d5fa <iprintf>
 8004436:	f06f 000f 	mvn.w	r0, #15
 800443a:	e7f2      	b.n	8004422 <netconn_send+0x12>
 800443c:	0800539d 	.word	0x0800539d
 8004440:	0800dde4 	.word	0x0800dde4
 8004444:	0800df58 	.word	0x0800df58
 8004448:	0800de34 	.word	0x0800de34

0800444c <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 800444c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800444e:	b087      	sub	sp, #28
 8004450:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  u8_t dontblock;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8004452:	b188      	cbz	r0, 8004478 <netconn_write_partly+0x2c>
 8004454:	4616      	mov	r6, r2
 8004456:	4604      	mov	r4, r0
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type)== NETCONN_TCP), return ERR_VAL;);
 8004458:	7802      	ldrb	r2, [r0, #0]
 800445a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 800445e:	2a10      	cmp	r2, #16
 8004460:	d114      	bne.n	800448c <netconn_write_partly+0x40>
  if (size == 0) {
 8004462:	2e00      	cmp	r6, #0
 8004464:	d035      	beq.n	80044d2 <netconn_write_partly+0x86>
    return ERR_OK;
  }
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8004466:	7f02      	ldrb	r2, [r0, #28]
 8004468:	f012 0f02 	tst.w	r2, #2
 800446c:	d118      	bne.n	80044a0 <netconn_write_partly+0x54>
 800446e:	f013 0f04 	tst.w	r3, #4
 8004472:	d029      	beq.n	80044c8 <netconn_write_partly+0x7c>
 8004474:	2201      	movs	r2, #1
 8004476:	e014      	b.n	80044a2 <netconn_write_partly+0x56>
  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8004478:	4b19      	ldr	r3, [pc, #100]	; (80044e0 <netconn_write_partly+0x94>)
 800447a:	f240 22e6 	movw	r2, #742	; 0x2e6
 800447e:	4919      	ldr	r1, [pc, #100]	; (80044e4 <netconn_write_partly+0x98>)
 8004480:	4819      	ldr	r0, [pc, #100]	; (80044e8 <netconn_write_partly+0x9c>)
 8004482:	f009 f8ba 	bl	800d5fa <iprintf>
 8004486:	f06f 030f 	mvn.w	r3, #15
 800448a:	e023      	b.n	80044d4 <netconn_write_partly+0x88>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type)== NETCONN_TCP), return ERR_VAL;);
 800448c:	4b14      	ldr	r3, [pc, #80]	; (80044e0 <netconn_write_partly+0x94>)
 800448e:	f240 22e7 	movw	r2, #743	; 0x2e7
 8004492:	4916      	ldr	r1, [pc, #88]	; (80044ec <netconn_write_partly+0xa0>)
 8004494:	4814      	ldr	r0, [pc, #80]	; (80044e8 <netconn_write_partly+0x9c>)
 8004496:	f009 f8b0 	bl	800d5fa <iprintf>
 800449a:	f06f 0305 	mvn.w	r3, #5
 800449e:	e019      	b.n	80044d4 <netconn_write_partly+0x88>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 80044a0:	2201      	movs	r2, #1
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 80044a2:	f002 07ff 	and.w	r7, r2, #255	; 0xff
 80044a6:	b102      	cbz	r2, 80044aa <netconn_write_partly+0x5e>
 80044a8:	b1bd      	cbz	r5, 80044da <netconn_write_partly+0x8e>
    return ERR_VAL;
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 80044aa:	9401      	str	r4, [sp, #4]
  API_MSG_VAR_REF(msg).msg.w.dataptr = dataptr;
 80044ac:	9103      	str	r1, [sp, #12]
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 80044ae:	f88d 3014 	strb.w	r3, [sp, #20]
  API_MSG_VAR_REF(msg).msg.w.len = size;
 80044b2:	9604      	str	r6, [sp, #16]
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 80044b4:	a901      	add	r1, sp, #4
 80044b6:	480e      	ldr	r0, [pc, #56]	; (80044f0 <netconn_write_partly+0xa4>)
 80044b8:	f7ff fe50 	bl	800415c <netconn_apimsg>
  if ((err == ERR_OK) && (bytes_written != NULL)) {
 80044bc:	4603      	mov	r3, r0
 80044be:	b948      	cbnz	r0, 80044d4 <netconn_write_partly+0x88>
 80044c0:	b145      	cbz	r5, 80044d4 <netconn_write_partly+0x88>
    if (dontblock) {
 80044c2:	b91f      	cbnz	r7, 80044cc <netconn_write_partly+0x80>
      /* nonblocking write: maybe the data has been sent partly */
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.len;
    } else {
      /* blocking call succeeded: all data has been sent if it */
      *bytes_written = size;
 80044c4:	602e      	str	r6, [r5, #0]
 80044c6:	e005      	b.n	80044d4 <netconn_write_partly+0x88>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 80044c8:	2200      	movs	r2, #0
 80044ca:	e7ea      	b.n	80044a2 <netconn_write_partly+0x56>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.len;
 80044cc:	9a04      	ldr	r2, [sp, #16]
 80044ce:	602a      	str	r2, [r5, #0]
 80044d0:	e000      	b.n	80044d4 <netconn_write_partly+0x88>
    return ERR_OK;
 80044d2:	2300      	movs	r3, #0
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	b007      	add	sp, #28
 80044d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return ERR_VAL;
 80044da:	f06f 0305 	mvn.w	r3, #5
 80044de:	e7f9      	b.n	80044d4 <netconn_write_partly+0x88>
 80044e0:	0800dde4 	.word	0x0800dde4
 80044e4:	0800df74 	.word	0x0800df74
 80044e8:	0800de34 	.word	0x0800de34
 80044ec:	0800df90 	.word	0x0800df90
 80044f0:	08005405 	.word	0x08005405

080044f4 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
   const ip_addr_t *addr, u16_t port)
{
 80044f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044f8:	4604      	mov	r4, r0
 80044fa:	4616      	mov	r6, r2
 80044fc:	4698      	mov	r8, r3
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 80044fe:	460d      	mov	r5, r1
 8004500:	2900      	cmp	r1, #0
 8004502:	d030      	beq.n	8004566 <recv_udp+0x72>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8004504:	2c00      	cmp	r4, #0
 8004506:	d035      	beq.n	8004574 <recv_udp+0x80>
  conn = (struct netconn *)arg;

  if (conn == NULL) {
 8004508:	2c00      	cmp	r4, #0
 800450a:	d03a      	beq.n	8004582 <recv_udp+0x8e>
    pbuf_free(p);
    return;
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 800450c:	6863      	ldr	r3, [r4, #4]
 800450e:	429d      	cmp	r5, r3
 8004510:	d005      	beq.n	800451e <recv_udp+0x2a>
 8004512:	4b27      	ldr	r3, [pc, #156]	; (80045b0 <recv_udp+0xbc>)
 8004514:	22ba      	movs	r2, #186	; 0xba
 8004516:	4927      	ldr	r1, [pc, #156]	; (80045b4 <recv_udp+0xc0>)
 8004518:	4827      	ldr	r0, [pc, #156]	; (80045b8 <recv_udp+0xc4>)
 800451a:	f009 f86e 	bl	800d5fa <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!sys_mbox_valid(&conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!sys_mbox_valid(&conn->recvmbox)) {
 800451e:	f104 0710 	add.w	r7, r4, #16
 8004522:	4638      	mov	r0, r7
 8004524:	f008 f964 	bl	800c7f0 <sys_mbox_valid>
 8004528:	b380      	cbz	r0, 800458c <recv_udp+0x98>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
    return;
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800452a:	2006      	movs	r0, #6
 800452c:	f003 fbde 	bl	8007cec <memp_malloc>
  if (buf == NULL) {
 8004530:	4605      	mov	r5, r0
 8004532:	b380      	cbz	r0, 8004596 <recv_udp+0xa2>
    pbuf_free(p);
    return;
  } else {
    buf->p = p;
 8004534:	6006      	str	r6, [r0, #0]
    buf->ptr = p;
 8004536:	6046      	str	r6, [r0, #4]
    ip_addr_set(&buf->addr, addr);
 8004538:	f1b8 0f00 	cmp.w	r8, #0
 800453c:	d030      	beq.n	80045a0 <recv_udp+0xac>
 800453e:	f8d8 3000 	ldr.w	r3, [r8]
 8004542:	60ab      	str	r3, [r5, #8]
    buf->port = port;
 8004544:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8004548:	81ab      	strh	r3, [r5, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 800454a:	8936      	ldrh	r6, [r6, #8]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800454c:	4629      	mov	r1, r5
 800454e:	4638      	mov	r0, r7
 8004550:	f008 f905 	bl	800c75e <sys_mbox_trypost>
 8004554:	bb30      	cbnz	r0, 80045a4 <recv_udp+0xb0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8004556:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004558:	b11b      	cbz	r3, 8004562 <recv_udp+0x6e>
 800455a:	4632      	mov	r2, r6
 800455c:	2100      	movs	r1, #0
 800455e:	4620      	mov	r0, r4
 8004560:	4798      	blx	r3
 8004562:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 8004566:	4b12      	ldr	r3, [pc, #72]	; (80045b0 <recv_udp+0xbc>)
 8004568:	22b1      	movs	r2, #177	; 0xb1
 800456a:	4914      	ldr	r1, [pc, #80]	; (80045bc <recv_udp+0xc8>)
 800456c:	4812      	ldr	r0, [pc, #72]	; (80045b8 <recv_udp+0xc4>)
 800456e:	f009 f844 	bl	800d5fa <iprintf>
 8004572:	e7c7      	b.n	8004504 <recv_udp+0x10>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8004574:	4b0e      	ldr	r3, [pc, #56]	; (80045b0 <recv_udp+0xbc>)
 8004576:	22b2      	movs	r2, #178	; 0xb2
 8004578:	4911      	ldr	r1, [pc, #68]	; (80045c0 <recv_udp+0xcc>)
 800457a:	480f      	ldr	r0, [pc, #60]	; (80045b8 <recv_udp+0xc4>)
 800457c:	f009 f83d 	bl	800d5fa <iprintf>
 8004580:	e7c2      	b.n	8004508 <recv_udp+0x14>
    pbuf_free(p);
 8004582:	4630      	mov	r0, r6
 8004584:	f003 fda2 	bl	80080cc <pbuf_free>
    return;
 8004588:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    pbuf_free(p);
 800458c:	4630      	mov	r0, r6
 800458e:	f003 fd9d 	bl	80080cc <pbuf_free>
    return;
 8004592:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    pbuf_free(p);
 8004596:	4630      	mov	r0, r6
 8004598:	f003 fd98 	bl	80080cc <pbuf_free>
    return;
 800459c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ip_addr_set(&buf->addr, addr);
 80045a0:	2300      	movs	r3, #0
 80045a2:	e7ce      	b.n	8004542 <recv_udp+0x4e>
    netbuf_delete(buf);
 80045a4:	4628      	mov	r0, r5
 80045a6:	f001 f81b 	bl	80055e0 <netbuf_delete>
    return;
 80045aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80045ae:	bf00      	nop
 80045b0:	0800e314 	.word	0x0800e314
 80045b4:	0800e38c 	.word	0x0800e38c
 80045b8:	0800de34 	.word	0x0800de34
 80045bc:	0800e348 	.word	0x0800e348
 80045c0:	0800e36c 	.word	0x0800e36c

080045c4 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 80045c4:	b510      	push	{r4, lr}
 80045c6:	4601      	mov	r1, r0
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 80045c8:	6844      	ldr	r4, [r0, #4]
  tcp_arg(pcb, conn);
 80045ca:	4620      	mov	r0, r4
 80045cc:	f004 fa95 	bl	8008afa <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 80045d0:	4908      	ldr	r1, [pc, #32]	; (80045f4 <setup_tcp+0x30>)
 80045d2:	4620      	mov	r0, r4
 80045d4:	f004 fa94 	bl	8008b00 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 80045d8:	4907      	ldr	r1, [pc, #28]	; (80045f8 <setup_tcp+0x34>)
 80045da:	4620      	mov	r0, r4
 80045dc:	f004 faaa 	bl	8008b34 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 80045e0:	2202      	movs	r2, #2
 80045e2:	4906      	ldr	r1, [pc, #24]	; (80045fc <setup_tcp+0x38>)
 80045e4:	4620      	mov	r0, r4
 80045e6:	f004 fadf 	bl	8008ba8 <tcp_poll>
  tcp_err(pcb, err_tcp);
 80045ea:	4905      	ldr	r1, [pc, #20]	; (8004600 <setup_tcp+0x3c>)
 80045ec:	4620      	mov	r0, r4
 80045ee:	f004 fab9 	bl	8008b64 <tcp_err>
 80045f2:	bd10      	pop	{r4, pc}
 80045f4:	08004d31 	.word	0x08004d31
 80045f8:	08004cbd 	.word	0x08004cbd
 80045fc:	08004c3d 	.word	0x08004c3d
 8004600:	0800468d 	.word	0x0800468d

08004604 <pcb_new>:
 *
 * @param msg the api_msg_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 8004604:	b538      	push	{r3, r4, r5, lr}
 8004606:	4604      	mov	r4, r0
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 8004608:	6803      	ldr	r3, [r0, #0]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	b133      	cbz	r3, 800461c <pcb_new+0x18>
 800460e:	4b1b      	ldr	r3, [pc, #108]	; (800467c <pcb_new+0x78>)
 8004610:	f44f 720b 	mov.w	r2, #556	; 0x22c
 8004614:	491a      	ldr	r1, [pc, #104]	; (8004680 <pcb_new+0x7c>)
 8004616:	481b      	ldr	r0, [pc, #108]	; (8004684 <pcb_new+0x80>)
 8004618:	f008 ffef 	bl	800d5fa <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif
  
  /* Allocate a PCB for this connection */
  switch(NETCONNTYPE_GROUP(msg->conn->type)) {
 800461c:	6825      	ldr	r5, [r4, #0]
 800461e:	782b      	ldrb	r3, [r5, #0]
 8004620:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004624:	2b10      	cmp	r3, #16
 8004626:	d018      	beq.n	800465a <pcb_new+0x56>
 8004628:	2b20      	cmp	r3, #32
 800462a:	d121      	bne.n	8004670 <pcb_new+0x6c>
    }
    break;
#endif /* LWIP_RAW */
#if LWIP_UDP
  case NETCONN_UDP:
    msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800462c:	2000      	movs	r0, #0
 800462e:	f007 ffc3 	bl	800c5b8 <udp_new_ip_type>
 8004632:	6068      	str	r0, [r5, #4]
    if (msg->conn->pcb.udp != NULL) {
 8004634:	6823      	ldr	r3, [r4, #0]
 8004636:	685a      	ldr	r2, [r3, #4]
 8004638:	b142      	cbz	r2, 800464c <pcb_new+0x48>
#if LWIP_UDPLITE
      if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
        udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
      }
#endif /* LWIP_UDPLITE */
      if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800463a:	781b      	ldrb	r3, [r3, #0]
 800463c:	2b22      	cmp	r3, #34	; 0x22
 800463e:	d009      	beq.n	8004654 <pcb_new+0x50>
        udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
      }
      udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 8004640:	6823      	ldr	r3, [r4, #0]
 8004642:	461a      	mov	r2, r3
 8004644:	4910      	ldr	r1, [pc, #64]	; (8004688 <pcb_new+0x84>)
 8004646:	6858      	ldr	r0, [r3, #4]
 8004648:	f007 ff89 	bl	800c55e <udp_recv>
  default:
    /* Unsupported netconn type, e.g. protocol disabled */
    msg->err = ERR_VAL;
    return;
  }
  if (msg->conn->pcb.ip == NULL) {
 800464c:	6823      	ldr	r3, [r4, #0]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	b18b      	cbz	r3, 8004676 <pcb_new+0x72>
 8004652:	bd38      	pop	{r3, r4, r5, pc}
        udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 8004654:	2301      	movs	r3, #1
 8004656:	7413      	strb	r3, [r2, #16]
 8004658:	e7f2      	b.n	8004640 <pcb_new+0x3c>
    msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800465a:	2000      	movs	r0, #0
 800465c:	f005 f816 	bl	800968c <tcp_new_ip_type>
 8004660:	6068      	str	r0, [r5, #4]
    if (msg->conn->pcb.tcp != NULL) {
 8004662:	6820      	ldr	r0, [r4, #0]
 8004664:	6843      	ldr	r3, [r0, #4]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d0f0      	beq.n	800464c <pcb_new+0x48>
      setup_tcp(msg->conn);
 800466a:	f7ff ffab 	bl	80045c4 <setup_tcp>
 800466e:	e7ed      	b.n	800464c <pcb_new+0x48>
    msg->err = ERR_VAL;
 8004670:	23fa      	movs	r3, #250	; 0xfa
 8004672:	7123      	strb	r3, [r4, #4]
    return;
 8004674:	bd38      	pop	{r3, r4, r5, pc}
    msg->err = ERR_MEM;
 8004676:	23ff      	movs	r3, #255	; 0xff
 8004678:	7123      	strb	r3, [r4, #4]
 800467a:	e7ea      	b.n	8004652 <pcb_new+0x4e>
 800467c:	0800e314 	.word	0x0800e314
 8004680:	0800e290 	.word	0x0800e290
 8004684:	0800de34 	.word	0x0800de34
 8004688:	080044f5 	.word	0x080044f5

0800468c <err_tcp>:
{
 800468c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800468e:	460e      	mov	r6, r1
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8004690:	4604      	mov	r4, r0
 8004692:	2800      	cmp	r0, #0
 8004694:	d038      	beq.n	8004708 <err_tcp+0x7c>
  conn->pcb.tcp = NULL;
 8004696:	2300      	movs	r3, #0
 8004698:	6063      	str	r3, [r4, #4]
  old_state = conn->state;
 800469a:	7865      	ldrb	r5, [r4, #1]
  conn->state = NETCONN_NONE;
 800469c:	7063      	strb	r3, [r4, #1]
  if (old_state == NETCONN_CLOSE) {
 800469e:	2d04      	cmp	r5, #4
 80046a0:	d03a      	beq.n	8004718 <err_tcp+0x8c>
    SYS_ARCH_SET(conn->last_err, err);
 80046a2:	f008 f937 	bl	800c914 <sys_arch_protect>
 80046a6:	7226      	strb	r6, [r4, #8]
 80046a8:	f008 f940 	bl	800c92c <sys_arch_unprotect>
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 80046ac:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80046ae:	b11b      	cbz	r3, 80046b8 <err_tcp+0x2c>
 80046b0:	2200      	movs	r2, #0
 80046b2:	2104      	movs	r1, #4
 80046b4:	4620      	mov	r0, r4
 80046b6:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80046b8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80046ba:	b11b      	cbz	r3, 80046c4 <err_tcp+0x38>
 80046bc:	2200      	movs	r2, #0
 80046be:	4611      	mov	r1, r2
 80046c0:	4620      	mov	r0, r4
 80046c2:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80046c4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80046c6:	b11b      	cbz	r3, 80046d0 <err_tcp+0x44>
 80046c8:	2200      	movs	r2, #0
 80046ca:	2102      	movs	r1, #2
 80046cc:	4620      	mov	r0, r4
 80046ce:	4798      	blx	r3
  if (sys_mbox_valid(&conn->recvmbox)) {
 80046d0:	f104 0710 	add.w	r7, r4, #16
 80046d4:	4638      	mov	r0, r7
 80046d6:	f008 f88b 	bl	800c7f0 <sys_mbox_valid>
 80046da:	bb68      	cbnz	r0, 8004738 <err_tcp+0xac>
  if (sys_mbox_valid(&conn->acceptmbox)) {
 80046dc:	f104 0714 	add.w	r7, r4, #20
 80046e0:	4638      	mov	r0, r7
 80046e2:	f008 f885 	bl	800c7f0 <sys_mbox_valid>
 80046e6:	bb60      	cbnz	r0, 8004742 <err_tcp+0xb6>
  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 80046e8:	2d01      	cmp	r5, #1
 80046ea:	d02f      	beq.n	800474c <err_tcp+0xc0>
 80046ec:	2d04      	cmp	r5, #4
 80046ee:	d02d      	beq.n	800474c <err_tcp+0xc0>
 80046f0:	2d03      	cmp	r5, #3
 80046f2:	d02b      	beq.n	800474c <err_tcp+0xc0>
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 80046f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80046f6:	b133      	cbz	r3, 8004706 <err_tcp+0x7a>
 80046f8:	4b2e      	ldr	r3, [pc, #184]	; (80047b4 <err_tcp+0x128>)
 80046fa:	f240 12bd 	movw	r2, #445	; 0x1bd
 80046fe:	492e      	ldr	r1, [pc, #184]	; (80047b8 <err_tcp+0x12c>)
 8004700:	482e      	ldr	r0, [pc, #184]	; (80047bc <err_tcp+0x130>)
 8004702:	f008 ff7a 	bl	800d5fa <iprintf>
 8004706:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8004708:	4b2a      	ldr	r3, [pc, #168]	; (80047b4 <err_tcp+0x128>)
 800470a:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800470e:	492c      	ldr	r1, [pc, #176]	; (80047c0 <err_tcp+0x134>)
 8004710:	482a      	ldr	r0, [pc, #168]	; (80047bc <err_tcp+0x130>)
 8004712:	f008 ff72 	bl	800d5fa <iprintf>
 8004716:	e7be      	b.n	8004696 <err_tcp+0xa>
    NETCONN_SET_SAFE_ERR(conn, ERR_OK);
 8004718:	b164      	cbz	r4, 8004734 <err_tcp+0xa8>
 800471a:	f008 f8fb 	bl	800c914 <sys_arch_protect>
 800471e:	f994 3008 	ldrsb.w	r3, [r4, #8]
 8004722:	f113 0f0c 	cmn.w	r3, #12
 8004726:	db01      	blt.n	800472c <err_tcp+0xa0>
 8004728:	2300      	movs	r3, #0
 800472a:	7223      	strb	r3, [r4, #8]
 800472c:	f008 f8fe 	bl	800c92c <sys_arch_unprotect>
    err = ERR_OK;
 8004730:	2600      	movs	r6, #0
 8004732:	e7bb      	b.n	80046ac <err_tcp+0x20>
 8004734:	2600      	movs	r6, #0
 8004736:	e7b9      	b.n	80046ac <err_tcp+0x20>
    sys_mbox_trypost(&conn->recvmbox, NULL);
 8004738:	2100      	movs	r1, #0
 800473a:	4638      	mov	r0, r7
 800473c:	f008 f80f 	bl	800c75e <sys_mbox_trypost>
 8004740:	e7cc      	b.n	80046dc <err_tcp+0x50>
    sys_mbox_trypost(&conn->acceptmbox, NULL);
 8004742:	2100      	movs	r1, #0
 8004744:	4638      	mov	r0, r7
 8004746:	f008 f80a 	bl	800c75e <sys_mbox_trypost>
 800474a:	e7cd      	b.n	80046e8 <err_tcp+0x5c>
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800474c:	7f23      	ldrb	r3, [r4, #28]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800474e:	f023 0204 	bic.w	r2, r3, #4
 8004752:	7722      	strb	r2, [r4, #28]
    if (!was_nonblocking_connect) {
 8004754:	f013 0f04 	tst.w	r3, #4
 8004758:	d1d5      	bne.n	8004706 <err_tcp+0x7a>
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800475a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800475c:	b1cb      	cbz	r3, 8004792 <err_tcp+0x106>
      conn->current_msg->err = err;
 800475e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004760:	711e      	strb	r6, [r3, #4]
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8004762:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004764:	681d      	ldr	r5, [r3, #0]
 8004766:	350c      	adds	r5, #12
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 8004768:	4628      	mov	r0, r5
 800476a:	f008 f88b 	bl	800c884 <sys_sem_valid>
 800476e:	b1c0      	cbz	r0, 80047a2 <err_tcp+0x116>
      conn->current_msg = NULL;
 8004770:	2300      	movs	r3, #0
 8004772:	6263      	str	r3, [r4, #36]	; 0x24
      NETCONN_SET_SAFE_ERR(conn, err);
 8004774:	b14c      	cbz	r4, 800478a <err_tcp+0xfe>
 8004776:	f008 f8cd 	bl	800c914 <sys_arch_protect>
 800477a:	f994 3008 	ldrsb.w	r3, [r4, #8]
 800477e:	f113 0f0c 	cmn.w	r3, #12
 8004782:	db00      	blt.n	8004786 <err_tcp+0xfa>
 8004784:	7226      	strb	r6, [r4, #8]
 8004786:	f008 f8d1 	bl	800c92c <sys_arch_unprotect>
      sys_sem_signal(op_completed_sem);
 800478a:	4628      	mov	r0, r5
 800478c:	f008 f870 	bl	800c870 <sys_sem_signal>
 8004790:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8004792:	4b08      	ldr	r3, [pc, #32]	; (80047b4 <err_tcp+0x128>)
 8004794:	f240 12b3 	movw	r2, #435	; 0x1b3
 8004798:	490a      	ldr	r1, [pc, #40]	; (80047c4 <err_tcp+0x138>)
 800479a:	4808      	ldr	r0, [pc, #32]	; (80047bc <err_tcp+0x130>)
 800479c:	f008 ff2d 	bl	800d5fa <iprintf>
 80047a0:	e7dd      	b.n	800475e <err_tcp+0xd2>
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 80047a2:	4b04      	ldr	r3, [pc, #16]	; (80047b4 <err_tcp+0x128>)
 80047a4:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 80047a8:	4907      	ldr	r1, [pc, #28]	; (80047c8 <err_tcp+0x13c>)
 80047aa:	4804      	ldr	r0, [pc, #16]	; (80047bc <err_tcp+0x130>)
 80047ac:	f008 ff25 	bl	800d5fa <iprintf>
 80047b0:	e7de      	b.n	8004770 <err_tcp+0xe4>
 80047b2:	bf00      	nop
 80047b4:	0800e314 	.word	0x0800e314
 80047b8:	0800dffc 	.word	0x0800dffc
 80047bc:	0800de34 	.word	0x0800de34
 80047c0:	0800dfb4 	.word	0x0800dfb4
 80047c4:	0800dfc4 	.word	0x0800dfc4
 80047c8:	0800dfe0 	.word	0x0800dfe0

080047cc <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 80047cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80047d0:	4688      	mov	r8, r1
  u8_t write_finished = 0;
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 80047d2:	4604      	mov	r4, r0
 80047d4:	b1f0      	cbz	r0, 8004814 <lwip_netconn_do_writemore+0x48>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 80047d6:	7863      	ldrb	r3, [r4, #1]
 80047d8:	2b01      	cmp	r3, #1
 80047da:	d006      	beq.n	80047ea <lwip_netconn_do_writemore+0x1e>
 80047dc:	4b7a      	ldr	r3, [pc, #488]	; (80049c8 <lwip_netconn_do_writemore+0x1fc>)
 80047de:	f240 52e4 	movw	r2, #1508	; 0x5e4
 80047e2:	497a      	ldr	r1, [pc, #488]	; (80049cc <lwip_netconn_do_writemore+0x200>)
 80047e4:	487a      	ldr	r0, [pc, #488]	; (80049d0 <lwip_netconn_do_writemore+0x204>)
 80047e6:	f008 ff08 	bl	800d5fa <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80047ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80047ec:	b1d3      	cbz	r3, 8004824 <lwip_netconn_do_writemore+0x58>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 80047ee:	6863      	ldr	r3, [r4, #4]
 80047f0:	b303      	cbz	r3, 8004834 <lwip_netconn_do_writemore+0x68>
  LWIP_ASSERT("conn->write_offset < conn->current_msg->msg.w.len",
 80047f2:	6a22      	ldr	r2, [r4, #32]
 80047f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80047f6:	68db      	ldr	r3, [r3, #12]
 80047f8:	429a      	cmp	r2, r3
 80047fa:	d223      	bcs.n	8004844 <lwip_netconn_do_writemore+0x78>
    conn->write_offset < conn->current_msg->msg.w.len);

  apiflags = conn->current_msg->msg.w.apiflags;
 80047fc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80047fe:	f892 9010 	ldrb.w	r9, [r2, #16]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8004802:	7f23      	ldrb	r3, [r4, #28]
 8004804:	f013 0f02 	tst.w	r3, #2
 8004808:	d124      	bne.n	8004854 <lwip_netconn_do_writemore+0x88>
 800480a:	f019 0f04 	tst.w	r9, #4
 800480e:	d039      	beq.n	8004884 <lwip_netconn_do_writemore+0xb8>
 8004810:	2601      	movs	r6, #1
 8004812:	e020      	b.n	8004856 <lwip_netconn_do_writemore+0x8a>
  LWIP_ASSERT("conn != NULL", conn != NULL);
 8004814:	4b6c      	ldr	r3, [pc, #432]	; (80049c8 <lwip_netconn_do_writemore+0x1fc>)
 8004816:	f240 52e3 	movw	r2, #1507	; 0x5e3
 800481a:	496e      	ldr	r1, [pc, #440]	; (80049d4 <lwip_netconn_do_writemore+0x208>)
 800481c:	486c      	ldr	r0, [pc, #432]	; (80049d0 <lwip_netconn_do_writemore+0x204>)
 800481e:	f008 feec 	bl	800d5fa <iprintf>
 8004822:	e7d8      	b.n	80047d6 <lwip_netconn_do_writemore+0xa>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8004824:	4b68      	ldr	r3, [pc, #416]	; (80049c8 <lwip_netconn_do_writemore+0x1fc>)
 8004826:	f240 52e5 	movw	r2, #1509	; 0x5e5
 800482a:	496b      	ldr	r1, [pc, #428]	; (80049d8 <lwip_netconn_do_writemore+0x20c>)
 800482c:	4868      	ldr	r0, [pc, #416]	; (80049d0 <lwip_netconn_do_writemore+0x204>)
 800482e:	f008 fee4 	bl	800d5fa <iprintf>
 8004832:	e7dc      	b.n	80047ee <lwip_netconn_do_writemore+0x22>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 8004834:	4b64      	ldr	r3, [pc, #400]	; (80049c8 <lwip_netconn_do_writemore+0x1fc>)
 8004836:	f240 52e6 	movw	r2, #1510	; 0x5e6
 800483a:	4968      	ldr	r1, [pc, #416]	; (80049dc <lwip_netconn_do_writemore+0x210>)
 800483c:	4864      	ldr	r0, [pc, #400]	; (80049d0 <lwip_netconn_do_writemore+0x204>)
 800483e:	f008 fedc 	bl	800d5fa <iprintf>
 8004842:	e7d6      	b.n	80047f2 <lwip_netconn_do_writemore+0x26>
  LWIP_ASSERT("conn->write_offset < conn->current_msg->msg.w.len",
 8004844:	4b60      	ldr	r3, [pc, #384]	; (80049c8 <lwip_netconn_do_writemore+0x1fc>)
 8004846:	f44f 62bd 	mov.w	r2, #1512	; 0x5e8
 800484a:	4965      	ldr	r1, [pc, #404]	; (80049e0 <lwip_netconn_do_writemore+0x214>)
 800484c:	4860      	ldr	r0, [pc, #384]	; (80049d0 <lwip_netconn_do_writemore+0x204>)
 800484e:	f008 fed4 	bl	800d5fa <iprintf>
 8004852:	e7d3      	b.n	80047fc <lwip_netconn_do_writemore+0x30>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8004854:	2601      	movs	r6, #1
 8004856:	b2f6      	uxtb	r6, r6
      conn->write_offset = 0;
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    dataptr = (const u8_t*)conn->current_msg->msg.w.dataptr + conn->write_offset;
 8004858:	6897      	ldr	r7, [r2, #8]
 800485a:	6a23      	ldr	r3, [r4, #32]
 800485c:	441f      	add	r7, r3
    diff = conn->current_msg->msg.w.len - conn->write_offset;
 800485e:	68d2      	ldr	r2, [r2, #12]
 8004860:	1ad5      	subs	r5, r2, r3
    if (diff > 0xffffUL) { /* max_u16_t */
 8004862:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 8004866:	d30f      	bcc.n	8004888 <lwip_netconn_do_writemore+0xbc>
      len = 0xffff;
      apiflags |= TCP_WRITE_FLAG_MORE;
 8004868:	f049 0902 	orr.w	r9, r9, #2
      len = 0xffff;
 800486c:	f64f 75ff 	movw	r5, #65535	; 0xffff
    } else {
      len = (u16_t)diff;
    }
    available = tcp_sndbuf(conn->pcb.tcp);
 8004870:	6861      	ldr	r1, [r4, #4]
 8004872:	f8b1 1060 	ldrh.w	r1, [r1, #96]	; 0x60
    if (available < len) {
 8004876:	428d      	cmp	r5, r1
 8004878:	d90b      	bls.n	8004892 <lwip_netconn_do_writemore+0xc6>
      /* don't try to write more than sendbuf */
      len = available;
      if (dontblock) {
 800487a:	b13e      	cbz	r6, 800488c <lwip_netconn_do_writemore+0xc0>
        if (!len) {
 800487c:	2900      	cmp	r1, #0
 800487e:	d039      	beq.n	80048f4 <lwip_netconn_do_writemore+0x128>
      len = available;
 8004880:	460d      	mov	r5, r1
 8004882:	e006      	b.n	8004892 <lwip_netconn_do_writemore+0xc6>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8004884:	2600      	movs	r6, #0
 8004886:	e7e6      	b.n	8004856 <lwip_netconn_do_writemore+0x8a>
      len = (u16_t)diff;
 8004888:	b2ad      	uxth	r5, r5
 800488a:	e7f1      	b.n	8004870 <lwip_netconn_do_writemore+0xa4>
          err = ERR_WOULDBLOCK;
          goto err_mem;
        }
      } else {
        apiflags |= TCP_WRITE_FLAG_MORE;
 800488c:	f049 0902 	orr.w	r9, r9, #2
      len = available;
 8004890:	460d      	mov	r5, r1
      }
    }
    LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!", ((conn->write_offset + len) <= conn->current_msg->msg.w.len));
 8004892:	442b      	add	r3, r5
 8004894:	429a      	cmp	r2, r3
 8004896:	d325      	bcc.n	80048e4 <lwip_netconn_do_writemore+0x118>
    err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 8004898:	464b      	mov	r3, r9
 800489a:	462a      	mov	r2, r5
 800489c:	4639      	mov	r1, r7
 800489e:	6860      	ldr	r0, [r4, #4]
 80048a0:	f006 fce0 	bl	800b264 <tcp_write>
 80048a4:	4607      	mov	r7, r0
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 80048a6:	1c43      	adds	r3, r0, #1
 80048a8:	b2db      	uxtb	r3, r3
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	d925      	bls.n	80048fa <lwip_netconn_do_writemore+0x12e>
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
      }
    }

    if (err == ERR_OK) {
 80048ae:	2f00      	cmp	r7, #0
 80048b0:	d145      	bne.n	800493e <lwip_netconn_do_writemore+0x172>
      err_t out_err;
      conn->write_offset += len;
 80048b2:	6a23      	ldr	r3, [r4, #32]
 80048b4:	441d      	add	r5, r3
 80048b6:	6225      	str	r5, [r4, #32]
      if ((conn->write_offset == conn->current_msg->msg.w.len) || dontblock) {
 80048b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80048ba:	68da      	ldr	r2, [r3, #12]
 80048bc:	4295      	cmp	r5, r2
 80048be:	d000      	beq.n	80048c2 <lwip_netconn_do_writemore+0xf6>
 80048c0:	b10e      	cbz	r6, 80048c6 <lwip_netconn_do_writemore+0xfa>
        /* return sent length */
        conn->current_msg->msg.w.len = conn->write_offset;
 80048c2:	60dd      	str	r5, [r3, #12]
        /* everything was written */
        write_finished = 1;
 80048c4:	2601      	movs	r6, #1
      }
      out_err = tcp_output(conn->pcb.tcp);
 80048c6:	6860      	ldr	r0, [r4, #4]
 80048c8:	f007 f87a 	bl	800b9c0 <tcp_output>
      if (ERR_IS_FATAL(out_err) || (out_err == ERR_RTE)) {
 80048cc:	f110 0f0c 	cmn.w	r0, #12
 80048d0:	db02      	blt.n	80048d8 <lwip_netconn_do_writemore+0x10c>
 80048d2:	f110 0f04 	cmn.w	r0, #4
 80048d6:	d139      	bne.n	800494c <lwip_netconn_do_writemore+0x180>
        /* If tcp_output fails with fatal error or no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
        write_finished = 1;
        conn->current_msg->msg.w.len = 0;
 80048d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80048da:	2200      	movs	r2, #0
 80048dc:	60da      	str	r2, [r3, #12]
        err = out_err;
 80048de:	4607      	mov	r7, r0
        write_finished = 1;
 80048e0:	2601      	movs	r6, #1
 80048e2:	e033      	b.n	800494c <lwip_netconn_do_writemore+0x180>
    LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!", ((conn->write_offset + len) <= conn->current_msg->msg.w.len));
 80048e4:	4b38      	ldr	r3, [pc, #224]	; (80049c8 <lwip_netconn_do_writemore+0x1fc>)
 80048e6:	f240 6213 	movw	r2, #1555	; 0x613
 80048ea:	493e      	ldr	r1, [pc, #248]	; (80049e4 <lwip_netconn_do_writemore+0x218>)
 80048ec:	4838      	ldr	r0, [pc, #224]	; (80049d0 <lwip_netconn_do_writemore+0x204>)
 80048ee:	f008 fe84 	bl	800d5fa <iprintf>
 80048f2:	e7d1      	b.n	8004898 <lwip_netconn_do_writemore+0xcc>
      len = available;
 80048f4:	460d      	mov	r5, r1
          err = ERR_WOULDBLOCK;
 80048f6:	f06f 0706 	mvn.w	r7, #6
      if (dontblock && (len < conn->current_msg->msg.w.len)) {
 80048fa:	b176      	cbz	r6, 800491a <lwip_netconn_do_writemore+0x14e>
 80048fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80048fe:	68db      	ldr	r3, [r3, #12]
 8004900:	429d      	cmp	r5, r3
 8004902:	d20a      	bcs.n	800491a <lwip_netconn_do_writemore+0x14e>
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
 8004904:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004906:	b11b      	cbz	r3, 8004910 <lwip_netconn_do_writemore+0x144>
 8004908:	462a      	mov	r2, r5
 800490a:	2103      	movs	r1, #3
 800490c:	4620      	mov	r0, r4
 800490e:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 8004910:	7f23      	ldrb	r3, [r4, #28]
 8004912:	f043 0310 	orr.w	r3, r3, #16
 8004916:	7723      	strb	r3, [r4, #28]
 8004918:	e7c9      	b.n	80048ae <lwip_netconn_do_writemore+0xe2>
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800491a:	6863      	ldr	r3, [r4, #4]
 800491c:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8004920:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8004924:	d303      	bcc.n	800492e <lwip_netconn_do_writemore+0x162>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 8004926:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800492a:	2b04      	cmp	r3, #4
 800492c:	d9bf      	bls.n	80048ae <lwip_netconn_do_writemore+0xe2>
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
 800492e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004930:	2b00      	cmp	r3, #0
 8004932:	d0bc      	beq.n	80048ae <lwip_netconn_do_writemore+0xe2>
 8004934:	462a      	mov	r2, r5
 8004936:	2103      	movs	r1, #3
 8004938:	4620      	mov	r0, r4
 800493a:	4798      	blx	r3
 800493c:	e7b7      	b.n	80048ae <lwip_netconn_do_writemore+0xe2>
      }
    } else if (err == ERR_MEM) {
 800493e:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 8004942:	d01f      	beq.n	8004984 <lwip_netconn_do_writemore+0x1b8>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
      conn->current_msg->msg.w.len = 0;
 8004944:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004946:	2200      	movs	r2, #0
 8004948:	60da      	str	r2, [r3, #12]
      write_finished = 1;
 800494a:	2601      	movs	r6, #1
    }
  }
  if (write_finished) {
 800494c:	2e00      	cmp	r6, #0
 800494e:	d037      	beq.n	80049c0 <lwip_netconn_do_writemore+0x1f4>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8004950:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004952:	6818      	ldr	r0, [r3, #0]
 8004954:	f100 050c 	add.w	r5, r0, #12
    conn->current_msg->err = err;
 8004958:	711f      	strb	r7, [r3, #4]
    conn->current_msg = NULL;
 800495a:	2300      	movs	r3, #0
 800495c:	6263      	str	r3, [r4, #36]	; 0x24
    conn->write_offset = 0;
 800495e:	6223      	str	r3, [r4, #32]
    conn->state = NETCONN_NONE;
 8004960:	7063      	strb	r3, [r4, #1]
    NETCONN_SET_SAFE_ERR(conn, err);
 8004962:	b14c      	cbz	r4, 8004978 <lwip_netconn_do_writemore+0x1ac>
 8004964:	f007 ffd6 	bl	800c914 <sys_arch_protect>
 8004968:	f994 3008 	ldrsb.w	r3, [r4, #8]
 800496c:	f113 0f0c 	cmn.w	r3, #12
 8004970:	db00      	blt.n	8004974 <lwip_netconn_do_writemore+0x1a8>
 8004972:	7227      	strb	r7, [r4, #8]
 8004974:	f007 ffda 	bl	800c92c <sys_arch_unprotect>
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8004978:	f1b8 0f00 	cmp.w	r8, #0
 800497c:	d11a      	bne.n	80049b4 <lwip_netconn_do_writemore+0x1e8>
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
  }
#endif
  return ERR_OK;
 800497e:	2000      	movs	r0, #0
}
 8004980:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      err_t out_err = tcp_output(conn->pcb.tcp);
 8004984:	6860      	ldr	r0, [r4, #4]
 8004986:	f007 f81b 	bl	800b9c0 <tcp_output>
      if (ERR_IS_FATAL(out_err) || (out_err == ERR_RTE)) {
 800498a:	f110 0f0c 	cmn.w	r0, #12
 800498e:	db0b      	blt.n	80049a8 <lwip_netconn_do_writemore+0x1dc>
 8004990:	f110 0f04 	cmn.w	r0, #4
 8004994:	d008      	beq.n	80049a8 <lwip_netconn_do_writemore+0x1dc>
      } else if (dontblock) {
 8004996:	2e00      	cmp	r6, #0
 8004998:	d0d8      	beq.n	800494c <lwip_netconn_do_writemore+0x180>
        conn->current_msg->msg.w.len = 0;
 800499a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800499c:	2200      	movs	r2, #0
 800499e:	60da      	str	r2, [r3, #12]
        write_finished = 1;
 80049a0:	2601      	movs	r6, #1
        err = ERR_WOULDBLOCK;
 80049a2:	f06f 0706 	mvn.w	r7, #6
 80049a6:	e7d1      	b.n	800494c <lwip_netconn_do_writemore+0x180>
        conn->current_msg->msg.w.len = 0;
 80049a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80049aa:	2200      	movs	r2, #0
 80049ac:	60da      	str	r2, [r3, #12]
        err = out_err;
 80049ae:	4607      	mov	r7, r0
        write_finished = 1;
 80049b0:	2601      	movs	r6, #1
        conn->current_msg->msg.w.len = 0;
 80049b2:	e7cb      	b.n	800494c <lwip_netconn_do_writemore+0x180>
      sys_sem_signal(op_completed_sem);
 80049b4:	4628      	mov	r0, r5
 80049b6:	f007 ff5b 	bl	800c870 <sys_sem_signal>
  return ERR_OK;
 80049ba:	2000      	movs	r0, #0
 80049bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return ERR_MEM;
 80049c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80049c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80049c8:	0800e314 	.word	0x0800e314
 80049cc:	0800e128 	.word	0x0800e128
 80049d0:	0800de34 	.word	0x0800de34
 80049d4:	0800dfb4 	.word	0x0800dfb4
 80049d8:	0800dfc4 	.word	0x0800dfc4
 80049dc:	0800e148 	.word	0x0800e148
 80049e0:	0800e160 	.word	0x0800e160
 80049e4:	0800e194 	.word	0x0800e194

080049e8 <lwip_netconn_do_close_internal>:
{
 80049e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049ec:	4688      	mov	r8, r1
  LWIP_ASSERT("invalid conn", (conn != NULL));
 80049ee:	4604      	mov	r4, r0
 80049f0:	2800      	cmp	r0, #0
 80049f2:	d035      	beq.n	8004a60 <lwip_netconn_do_close_internal+0x78>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 80049f4:	7823      	ldrb	r3, [r4, #0]
 80049f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80049fa:	2b10      	cmp	r3, #16
 80049fc:	d006      	beq.n	8004a0c <lwip_netconn_do_close_internal+0x24>
 80049fe:	4b83      	ldr	r3, [pc, #524]	; (8004c0c <lwip_netconn_do_close_internal+0x224>)
 8004a00:	f44f 7251 	mov.w	r2, #836	; 0x344
 8004a04:	4982      	ldr	r1, [pc, #520]	; (8004c10 <lwip_netconn_do_close_internal+0x228>)
 8004a06:	4883      	ldr	r0, [pc, #524]	; (8004c14 <lwip_netconn_do_close_internal+0x22c>)
 8004a08:	f008 fdf7 	bl	800d5fa <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 8004a0c:	7863      	ldrb	r3, [r4, #1]
 8004a0e:	2b04      	cmp	r3, #4
 8004a10:	d006      	beq.n	8004a20 <lwip_netconn_do_close_internal+0x38>
 8004a12:	4b7e      	ldr	r3, [pc, #504]	; (8004c0c <lwip_netconn_do_close_internal+0x224>)
 8004a14:	f240 3245 	movw	r2, #837	; 0x345
 8004a18:	497f      	ldr	r1, [pc, #508]	; (8004c18 <lwip_netconn_do_close_internal+0x230>)
 8004a1a:	487e      	ldr	r0, [pc, #504]	; (8004c14 <lwip_netconn_do_close_internal+0x22c>)
 8004a1c:	f008 fded 	bl	800d5fa <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8004a20:	6863      	ldr	r3, [r4, #4]
 8004a22:	b32b      	cbz	r3, 8004a70 <lwip_netconn_do_close_internal+0x88>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8004a24:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004a26:	b35b      	cbz	r3, 8004a80 <lwip_netconn_do_close_internal+0x98>
  tpcb = conn->pcb.tcp;
 8004a28:	6865      	ldr	r5, [r4, #4]
  shut = conn->current_msg->msg.sd.shut;
 8004a2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004a2c:	7a1b      	ldrb	r3, [r3, #8]
  shut_rx = shut & NETCONN_SHUT_RD;
 8004a2e:	f003 0a01 	and.w	sl, r3, #1
  shut_tx = shut & NETCONN_SHUT_WR;
 8004a32:	f003 0902 	and.w	r9, r3, #2
  if (shut == NETCONN_SHUT_RDWR) {
 8004a36:	2b03      	cmp	r3, #3
 8004a38:	d02a      	beq.n	8004a90 <lwip_netconn_do_close_internal+0xa8>
  } else if (shut_rx &&
 8004a3a:	f1ba 0f00 	cmp.w	sl, #0
 8004a3e:	d006      	beq.n	8004a4e <lwip_netconn_do_close_internal+0x66>
             ((tpcb->state == FIN_WAIT_1) ||
 8004a40:	7d2a      	ldrb	r2, [r5, #20]
 8004a42:	1f53      	subs	r3, r2, #5
 8004a44:	b2db      	uxtb	r3, r3
  } else if (shut_rx &&
 8004a46:	2b01      	cmp	r3, #1
 8004a48:	d93a      	bls.n	8004ac0 <lwip_netconn_do_close_internal+0xd8>
              (tpcb->state == FIN_WAIT_2) ||
 8004a4a:	2a08      	cmp	r2, #8
 8004a4c:	d03a      	beq.n	8004ac4 <lwip_netconn_do_close_internal+0xdc>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 8004a4e:	f1b9 0f00 	cmp.w	r9, #0
 8004a52:	d039      	beq.n	8004ac8 <lwip_netconn_do_close_internal+0xe0>
 8004a54:	7eab      	ldrb	r3, [r5, #26]
 8004a56:	f013 0f10 	tst.w	r3, #16
 8004a5a:	d137      	bne.n	8004acc <lwip_netconn_do_close_internal+0xe4>
    close = 0;
 8004a5c:	2700      	movs	r7, #0
 8004a5e:	e018      	b.n	8004a92 <lwip_netconn_do_close_internal+0xaa>
  LWIP_ASSERT("invalid conn", (conn != NULL));
 8004a60:	4b6a      	ldr	r3, [pc, #424]	; (8004c0c <lwip_netconn_do_close_internal+0x224>)
 8004a62:	f240 3243 	movw	r2, #835	; 0x343
 8004a66:	496d      	ldr	r1, [pc, #436]	; (8004c1c <lwip_netconn_do_close_internal+0x234>)
 8004a68:	486a      	ldr	r0, [pc, #424]	; (8004c14 <lwip_netconn_do_close_internal+0x22c>)
 8004a6a:	f008 fdc6 	bl	800d5fa <iprintf>
 8004a6e:	e7c1      	b.n	80049f4 <lwip_netconn_do_close_internal+0xc>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8004a70:	4b66      	ldr	r3, [pc, #408]	; (8004c0c <lwip_netconn_do_close_internal+0x224>)
 8004a72:	f240 3246 	movw	r2, #838	; 0x346
 8004a76:	496a      	ldr	r1, [pc, #424]	; (8004c20 <lwip_netconn_do_close_internal+0x238>)
 8004a78:	4866      	ldr	r0, [pc, #408]	; (8004c14 <lwip_netconn_do_close_internal+0x22c>)
 8004a7a:	f008 fdbe 	bl	800d5fa <iprintf>
 8004a7e:	e7d1      	b.n	8004a24 <lwip_netconn_do_close_internal+0x3c>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8004a80:	4b62      	ldr	r3, [pc, #392]	; (8004c0c <lwip_netconn_do_close_internal+0x224>)
 8004a82:	f240 3247 	movw	r2, #839	; 0x347
 8004a86:	4967      	ldr	r1, [pc, #412]	; (8004c24 <lwip_netconn_do_close_internal+0x23c>)
 8004a88:	4862      	ldr	r0, [pc, #392]	; (8004c14 <lwip_netconn_do_close_internal+0x22c>)
 8004a8a:	f008 fdb6 	bl	800d5fa <iprintf>
 8004a8e:	e7cb      	b.n	8004a28 <lwip_netconn_do_close_internal+0x40>
    close = 1;
 8004a90:	2701      	movs	r7, #1
  if (close) {
 8004a92:	b9ef      	cbnz	r7, 8004ad0 <lwip_netconn_do_close_internal+0xe8>
  if (tpcb->state == LISTEN) {
 8004a94:	7d2b      	ldrb	r3, [r5, #20]
 8004a96:	2b01      	cmp	r3, #1
 8004a98:	d01f      	beq.n	8004ada <lwip_netconn_do_close_internal+0xf2>
    if (shut_rx) {
 8004a9a:	f1ba 0f00 	cmp.w	sl, #0
 8004a9e:	d121      	bne.n	8004ae4 <lwip_netconn_do_close_internal+0xfc>
    if (shut_tx) {
 8004aa0:	f1b9 0f00 	cmp.w	r9, #0
 8004aa4:	d127      	bne.n	8004af6 <lwip_netconn_do_close_internal+0x10e>
    if (close) {
 8004aa6:	bb5f      	cbnz	r7, 8004b00 <lwip_netconn_do_close_internal+0x118>
  if (close) {
 8004aa8:	b3a7      	cbz	r7, 8004b14 <lwip_netconn_do_close_internal+0x12c>
      err = tcp_close(tpcb);
 8004aaa:	4628      	mov	r0, r5
 8004aac:	f004 fbb6 	bl	800921c <tcp_close>
 8004ab0:	4606      	mov	r6, r0
  if (err == ERR_OK) {
 8004ab2:	2e00      	cmp	r6, #0
 8004ab4:	d042      	beq.n	8004b3c <lwip_netconn_do_close_internal+0x154>
    if (err == ERR_MEM) {
 8004ab6:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
 8004aba:	d032      	beq.n	8004b22 <lwip_netconn_do_close_internal+0x13a>
      close_finished = 1;
 8004abc:	2301      	movs	r3, #1
 8004abe:	e03e      	b.n	8004b3e <lwip_netconn_do_close_internal+0x156>
    close = 1;
 8004ac0:	2701      	movs	r7, #1
 8004ac2:	e7e6      	b.n	8004a92 <lwip_netconn_do_close_internal+0xaa>
 8004ac4:	2701      	movs	r7, #1
 8004ac6:	e7e4      	b.n	8004a92 <lwip_netconn_do_close_internal+0xaa>
    close = 0;
 8004ac8:	2700      	movs	r7, #0
 8004aca:	e7e2      	b.n	8004a92 <lwip_netconn_do_close_internal+0xaa>
    close = 1;
 8004acc:	2701      	movs	r7, #1
 8004ace:	e7e0      	b.n	8004a92 <lwip_netconn_do_close_internal+0xaa>
    tcp_arg(tpcb, NULL);
 8004ad0:	2100      	movs	r1, #0
 8004ad2:	4628      	mov	r0, r5
 8004ad4:	f004 f811 	bl	8008afa <tcp_arg>
 8004ad8:	e7dc      	b.n	8004a94 <lwip_netconn_do_close_internal+0xac>
    tcp_accept(tpcb, NULL);
 8004ada:	2100      	movs	r1, #0
 8004adc:	4628      	mov	r0, r5
 8004ade:	f004 f85b 	bl	8008b98 <tcp_accept>
 8004ae2:	e7e1      	b.n	8004aa8 <lwip_netconn_do_close_internal+0xc0>
      tcp_recv(tpcb, NULL);
 8004ae4:	2100      	movs	r1, #0
 8004ae6:	4628      	mov	r0, r5
 8004ae8:	f004 f80a 	bl	8008b00 <tcp_recv>
      tcp_accept(tpcb, NULL);
 8004aec:	2100      	movs	r1, #0
 8004aee:	4628      	mov	r0, r5
 8004af0:	f004 f852 	bl	8008b98 <tcp_accept>
 8004af4:	e7d4      	b.n	8004aa0 <lwip_netconn_do_close_internal+0xb8>
      tcp_sent(tpcb, NULL);
 8004af6:	2100      	movs	r1, #0
 8004af8:	4628      	mov	r0, r5
 8004afa:	f004 f81b 	bl	8008b34 <tcp_sent>
 8004afe:	e7d2      	b.n	8004aa6 <lwip_netconn_do_close_internal+0xbe>
      tcp_poll(tpcb, NULL, 0);
 8004b00:	2200      	movs	r2, #0
 8004b02:	4611      	mov	r1, r2
 8004b04:	4628      	mov	r0, r5
 8004b06:	f004 f84f 	bl	8008ba8 <tcp_poll>
      tcp_err(tpcb, NULL);
 8004b0a:	2100      	movs	r1, #0
 8004b0c:	4628      	mov	r0, r5
 8004b0e:	f004 f829 	bl	8008b64 <tcp_err>
 8004b12:	e7c9      	b.n	8004aa8 <lwip_netconn_do_close_internal+0xc0>
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 8004b14:	464a      	mov	r2, r9
 8004b16:	4651      	mov	r1, sl
 8004b18:	4628      	mov	r0, r5
 8004b1a:	f004 fc27 	bl	800936c <tcp_shutdown>
 8004b1e:	4606      	mov	r6, r0
 8004b20:	e7c7      	b.n	8004ab2 <lwip_netconn_do_close_internal+0xca>
      if (conn->current_msg->msg.sd.polls_left == 0) {
 8004b22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004b24:	7a5b      	ldrb	r3, [r3, #9]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d13f      	bne.n	8004baa <lwip_netconn_do_close_internal+0x1c2>
        if (close) {
 8004b2a:	b90f      	cbnz	r7, 8004b30 <lwip_netconn_do_close_internal+0x148>
        close_finished = 1;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	e006      	b.n	8004b3e <lwip_netconn_do_close_internal+0x156>
          tcp_abort(tpcb);
 8004b30:	4628      	mov	r0, r5
 8004b32:	f004 fcc3 	bl	80094bc <tcp_abort>
        close_finished = 1;
 8004b36:	463b      	mov	r3, r7
          err = ERR_OK;
 8004b38:	2600      	movs	r6, #0
 8004b3a:	e000      	b.n	8004b3e <lwip_netconn_do_close_internal+0x156>
    close_finished = 1;
 8004b3c:	2301      	movs	r3, #1
  if (close_finished) {
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d03a      	beq.n	8004bb8 <lwip_netconn_do_close_internal+0x1d0>
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8004b42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004b44:	681d      	ldr	r5, [r3, #0]
 8004b46:	350c      	adds	r5, #12
    conn->current_msg->err = err;
 8004b48:	711e      	strb	r6, [r3, #4]
    conn->current_msg = NULL;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	6263      	str	r3, [r4, #36]	; 0x24
    conn->state = NETCONN_NONE;
 8004b4e:	7063      	strb	r3, [r4, #1]
    if (err == ERR_OK) {
 8004b50:	b9ce      	cbnz	r6, 8004b86 <lwip_netconn_do_close_internal+0x19e>
      if (close) {
 8004b52:	b137      	cbz	r7, 8004b62 <lwip_netconn_do_close_internal+0x17a>
        conn->pcb.tcp = NULL;
 8004b54:	6063      	str	r3, [r4, #4]
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8004b56:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004b58:	b11b      	cbz	r3, 8004b62 <lwip_netconn_do_close_internal+0x17a>
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	2104      	movs	r1, #4
 8004b5e:	4620      	mov	r0, r4
 8004b60:	4798      	blx	r3
      if (shut_rx) {
 8004b62:	f1ba 0f00 	cmp.w	sl, #0
 8004b66:	d005      	beq.n	8004b74 <lwip_netconn_do_close_internal+0x18c>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8004b68:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004b6a:	b11b      	cbz	r3, 8004b74 <lwip_netconn_do_close_internal+0x18c>
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	4611      	mov	r1, r2
 8004b70:	4620      	mov	r0, r4
 8004b72:	4798      	blx	r3
      if (shut_tx) {
 8004b74:	f1b9 0f00 	cmp.w	r9, #0
 8004b78:	d005      	beq.n	8004b86 <lwip_netconn_do_close_internal+0x19e>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8004b7a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004b7c:	b11b      	cbz	r3, 8004b86 <lwip_netconn_do_close_internal+0x19e>
 8004b7e:	2200      	movs	r2, #0
 8004b80:	2102      	movs	r1, #2
 8004b82:	4620      	mov	r0, r4
 8004b84:	4798      	blx	r3
    NETCONN_SET_SAFE_ERR(conn, err);
 8004b86:	b14c      	cbz	r4, 8004b9c <lwip_netconn_do_close_internal+0x1b4>
 8004b88:	f007 fec4 	bl	800c914 <sys_arch_protect>
 8004b8c:	f994 3008 	ldrsb.w	r3, [r4, #8]
 8004b90:	f113 0f0c 	cmn.w	r3, #12
 8004b94:	db00      	blt.n	8004b98 <lwip_netconn_do_close_internal+0x1b0>
 8004b96:	7226      	strb	r6, [r4, #8]
 8004b98:	f007 fec8 	bl	800c92c <sys_arch_unprotect>
    if (delayed)
 8004b9c:	f1b8 0f00 	cmp.w	r8, #0
 8004ba0:	d105      	bne.n	8004bae <lwip_netconn_do_close_internal+0x1c6>
    return ERR_OK;
 8004ba2:	2600      	movs	r6, #0
}
 8004ba4:	4630      	mov	r0, r6
 8004ba6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  u8_t close_finished = 0;
 8004baa:	2300      	movs	r3, #0
 8004bac:	e7c7      	b.n	8004b3e <lwip_netconn_do_close_internal+0x156>
      sys_sem_signal(op_completed_sem);
 8004bae:	4628      	mov	r0, r5
 8004bb0:	f007 fe5e 	bl	800c870 <sys_sem_signal>
    return ERR_OK;
 8004bb4:	2600      	movs	r6, #0
 8004bb6:	e7f5      	b.n	8004ba4 <lwip_netconn_do_close_internal+0x1bc>
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 8004bb8:	7d2b      	ldrb	r3, [r5, #20]
 8004bba:	2b01      	cmp	r3, #1
 8004bbc:	d019      	beq.n	8004bf2 <lwip_netconn_do_close_internal+0x20a>
    if (shut_tx) {
 8004bbe:	f1b9 0f00 	cmp.w	r9, #0
 8004bc2:	d11e      	bne.n	8004c02 <lwip_netconn_do_close_internal+0x21a>
    tcp_poll(tpcb, poll_tcp, 1);
 8004bc4:	2201      	movs	r2, #1
 8004bc6:	4918      	ldr	r1, [pc, #96]	; (8004c28 <lwip_netconn_do_close_internal+0x240>)
 8004bc8:	4628      	mov	r0, r5
 8004bca:	f003 ffed 	bl	8008ba8 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 8004bce:	4917      	ldr	r1, [pc, #92]	; (8004c2c <lwip_netconn_do_close_internal+0x244>)
 8004bd0:	4628      	mov	r0, r5
 8004bd2:	f003 ffc7 	bl	8008b64 <tcp_err>
    tcp_arg(tpcb, conn);
 8004bd6:	4621      	mov	r1, r4
 8004bd8:	4628      	mov	r0, r5
 8004bda:	f003 ff8e 	bl	8008afa <tcp_arg>
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 8004bde:	2e00      	cmp	r6, #0
 8004be0:	d1e0      	bne.n	8004ba4 <lwip_netconn_do_close_internal+0x1bc>
 8004be2:	4b0a      	ldr	r3, [pc, #40]	; (8004c0c <lwip_netconn_do_close_internal+0x224>)
 8004be4:	f240 32ef 	movw	r2, #1007	; 0x3ef
 8004be8:	4911      	ldr	r1, [pc, #68]	; (8004c30 <lwip_netconn_do_close_internal+0x248>)
 8004bea:	480a      	ldr	r0, [pc, #40]	; (8004c14 <lwip_netconn_do_close_internal+0x22c>)
 8004bec:	f008 fd05 	bl	800d5fa <iprintf>
 8004bf0:	e7d8      	b.n	8004ba4 <lwip_netconn_do_close_internal+0x1bc>
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 8004bf2:	4b06      	ldr	r3, [pc, #24]	; (8004c0c <lwip_netconn_do_close_internal+0x224>)
 8004bf4:	f240 32e3 	movw	r2, #995	; 0x3e3
 8004bf8:	490e      	ldr	r1, [pc, #56]	; (8004c34 <lwip_netconn_do_close_internal+0x24c>)
 8004bfa:	4806      	ldr	r0, [pc, #24]	; (8004c14 <lwip_netconn_do_close_internal+0x22c>)
 8004bfc:	f008 fcfd 	bl	800d5fa <iprintf>
 8004c00:	e7dd      	b.n	8004bbe <lwip_netconn_do_close_internal+0x1d6>
      tcp_sent(tpcb, sent_tcp);
 8004c02:	490d      	ldr	r1, [pc, #52]	; (8004c38 <lwip_netconn_do_close_internal+0x250>)
 8004c04:	4628      	mov	r0, r5
 8004c06:	f003 ff95 	bl	8008b34 <tcp_sent>
 8004c0a:	e7db      	b.n	8004bc4 <lwip_netconn_do_close_internal+0x1dc>
 8004c0c:	0800e314 	.word	0x0800e314
 8004c10:	0800e018 	.word	0x0800e018
 8004c14:	0800de34 	.word	0x0800de34
 8004c18:	0800e038 	.word	0x0800e038
 8004c1c:	0800decc 	.word	0x0800decc
 8004c20:	0800e05c 	.word	0x0800e05c
 8004c24:	0800dfc4 	.word	0x0800dfc4
 8004c28:	08004c3d 	.word	0x08004c3d
 8004c2c:	0800468d 	.word	0x0800468d
 8004c30:	0800e094 	.word	0x0800e094
 8004c34:	0800e070 	.word	0x0800e070
 8004c38:	08004cbd 	.word	0x08004cbd

08004c3c <poll_tcp>:
{
 8004c3c:	b510      	push	{r4, lr}
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8004c3e:	4604      	mov	r4, r0
 8004c40:	b1f0      	cbz	r0, 8004c80 <poll_tcp+0x44>
  if (conn->state == NETCONN_WRITE) {
 8004c42:	7863      	ldrb	r3, [r4, #1]
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	d023      	beq.n	8004c90 <poll_tcp+0x54>
  } else if (conn->state == NETCONN_CLOSE) {
 8004c48:	2b04      	cmp	r3, #4
 8004c4a:	d026      	beq.n	8004c9a <poll_tcp+0x5e>
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 8004c4c:	7f23      	ldrb	r3, [r4, #28]
 8004c4e:	f013 0f10 	tst.w	r3, #16
 8004c52:	d013      	beq.n	8004c7c <poll_tcp+0x40>
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8004c54:	6862      	ldr	r2, [r4, #4]
 8004c56:	b18a      	cbz	r2, 8004c7c <poll_tcp+0x40>
 8004c58:	f8b2 1060 	ldrh.w	r1, [r2, #96]	; 0x60
 8004c5c:	f5b1 6f86 	cmp.w	r1, #1072	; 0x430
 8004c60:	d30c      	bcc.n	8004c7c <poll_tcp+0x40>
      (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8004c62:	f8b2 2062 	ldrh.w	r2, [r2, #98]	; 0x62
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8004c66:	2a04      	cmp	r2, #4
 8004c68:	d808      	bhi.n	8004c7c <poll_tcp+0x40>
      conn->flags &= ~NETCONN_FLAG_CHECK_WRITESPACE;
 8004c6a:	f023 0310 	bic.w	r3, r3, #16
 8004c6e:	7723      	strb	r3, [r4, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8004c70:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004c72:	b11b      	cbz	r3, 8004c7c <poll_tcp+0x40>
 8004c74:	2200      	movs	r2, #0
 8004c76:	2102      	movs	r1, #2
 8004c78:	4620      	mov	r0, r4
 8004c7a:	4798      	blx	r3
}
 8004c7c:	2000      	movs	r0, #0
 8004c7e:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8004c80:	4b0b      	ldr	r3, [pc, #44]	; (8004cb0 <poll_tcp+0x74>)
 8004c82:	f44f 729c 	mov.w	r2, #312	; 0x138
 8004c86:	490b      	ldr	r1, [pc, #44]	; (8004cb4 <poll_tcp+0x78>)
 8004c88:	480b      	ldr	r0, [pc, #44]	; (8004cb8 <poll_tcp+0x7c>)
 8004c8a:	f008 fcb6 	bl	800d5fa <iprintf>
 8004c8e:	e7d8      	b.n	8004c42 <poll_tcp+0x6>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8004c90:	2101      	movs	r1, #1
 8004c92:	4620      	mov	r0, r4
 8004c94:	f7ff fd9a 	bl	80047cc <lwip_netconn_do_writemore>
 8004c98:	e7d8      	b.n	8004c4c <poll_tcp+0x10>
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 8004c9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004c9c:	b11b      	cbz	r3, 8004ca6 <poll_tcp+0x6a>
 8004c9e:	7a5a      	ldrb	r2, [r3, #9]
 8004ca0:	b10a      	cbz	r2, 8004ca6 <poll_tcp+0x6a>
      conn->current_msg->msg.sd.polls_left--;
 8004ca2:	3a01      	subs	r2, #1
 8004ca4:	725a      	strb	r2, [r3, #9]
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8004ca6:	2101      	movs	r1, #1
 8004ca8:	4620      	mov	r0, r4
 8004caa:	f7ff fe9d 	bl	80049e8 <lwip_netconn_do_close_internal>
 8004cae:	e7cd      	b.n	8004c4c <poll_tcp+0x10>
 8004cb0:	0800e314 	.word	0x0800e314
 8004cb4:	0800dfb4 	.word	0x0800dfb4
 8004cb8:	0800de34 	.word	0x0800de34

08004cbc <sent_tcp>:
{
 8004cbc:	b538      	push	{r3, r4, r5, lr}
 8004cbe:	4615      	mov	r5, r2
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8004cc0:	4604      	mov	r4, r0
 8004cc2:	b1e0      	cbz	r0, 8004cfe <sent_tcp+0x42>
  if (conn) {
 8004cc4:	b1cc      	cbz	r4, 8004cfa <sent_tcp+0x3e>
    if (conn->state == NETCONN_WRITE) {
 8004cc6:	7863      	ldrb	r3, [r4, #1]
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	d020      	beq.n	8004d0e <sent_tcp+0x52>
    } else if (conn->state == NETCONN_CLOSE) {
 8004ccc:	2b04      	cmp	r3, #4
 8004cce:	d023      	beq.n	8004d18 <sent_tcp+0x5c>
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8004cd0:	6863      	ldr	r3, [r4, #4]
 8004cd2:	b193      	cbz	r3, 8004cfa <sent_tcp+0x3e>
 8004cd4:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8004cd8:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8004cdc:	d30d      	bcc.n	8004cfa <sent_tcp+0x3e>
      (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8004cde:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8004ce2:	2b04      	cmp	r3, #4
 8004ce4:	d809      	bhi.n	8004cfa <sent_tcp+0x3e>
      conn->flags &= ~NETCONN_FLAG_CHECK_WRITESPACE;
 8004ce6:	7f23      	ldrb	r3, [r4, #28]
 8004ce8:	f023 0310 	bic.w	r3, r3, #16
 8004cec:	7723      	strb	r3, [r4, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 8004cee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004cf0:	b11b      	cbz	r3, 8004cfa <sent_tcp+0x3e>
 8004cf2:	462a      	mov	r2, r5
 8004cf4:	2102      	movs	r1, #2
 8004cf6:	4620      	mov	r0, r4
 8004cf8:	4798      	blx	r3
}
 8004cfa:	2000      	movs	r0, #0
 8004cfc:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8004cfe:	4b09      	ldr	r3, [pc, #36]	; (8004d24 <sent_tcp+0x68>)
 8004d00:	f240 1261 	movw	r2, #353	; 0x161
 8004d04:	4908      	ldr	r1, [pc, #32]	; (8004d28 <sent_tcp+0x6c>)
 8004d06:	4809      	ldr	r0, [pc, #36]	; (8004d2c <sent_tcp+0x70>)
 8004d08:	f008 fc77 	bl	800d5fa <iprintf>
 8004d0c:	e7da      	b.n	8004cc4 <sent_tcp+0x8>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8004d0e:	2101      	movs	r1, #1
 8004d10:	4620      	mov	r0, r4
 8004d12:	f7ff fd5b 	bl	80047cc <lwip_netconn_do_writemore>
 8004d16:	e7db      	b.n	8004cd0 <sent_tcp+0x14>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8004d18:	2101      	movs	r1, #1
 8004d1a:	4620      	mov	r0, r4
 8004d1c:	f7ff fe64 	bl	80049e8 <lwip_netconn_do_close_internal>
 8004d20:	e7d6      	b.n	8004cd0 <sent_tcp+0x14>
 8004d22:	bf00      	nop
 8004d24:	0800e314 	.word	0x0800e314
 8004d28:	0800dfb4 	.word	0x0800dfb4
 8004d2c:	0800de34 	.word	0x0800de34

08004d30 <recv_tcp>:
{
 8004d30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d34:	4604      	mov	r4, r0
 8004d36:	4615      	mov	r5, r2
 8004d38:	4698      	mov	r8, r3
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8004d3a:	460f      	mov	r7, r1
 8004d3c:	b1e9      	cbz	r1, 8004d7a <recv_tcp+0x4a>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8004d3e:	b31c      	cbz	r4, 8004d88 <recv_tcp+0x58>
  if (conn == NULL) {
 8004d40:	2c00      	cmp	r4, #0
 8004d42:	d04a      	beq.n	8004dda <recv_tcp+0xaa>
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 8004d44:	6863      	ldr	r3, [r4, #4]
 8004d46:	429f      	cmp	r7, r3
 8004d48:	d006      	beq.n	8004d58 <recv_tcp+0x28>
 8004d4a:	4b28      	ldr	r3, [pc, #160]	; (8004dec <recv_tcp+0xbc>)
 8004d4c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004d50:	4927      	ldr	r1, [pc, #156]	; (8004df0 <recv_tcp+0xc0>)
 8004d52:	4828      	ldr	r0, [pc, #160]	; (8004df4 <recv_tcp+0xc4>)
 8004d54:	f008 fc51 	bl	800d5fa <iprintf>
  if (!sys_mbox_valid(&conn->recvmbox)) {
 8004d58:	f104 0610 	add.w	r6, r4, #16
 8004d5c:	4630      	mov	r0, r6
 8004d5e:	f007 fd47 	bl	800c7f0 <sys_mbox_valid>
 8004d62:	b9c0      	cbnz	r0, 8004d96 <recv_tcp+0x66>
    if (p != NULL) {
 8004d64:	2d00      	cmp	r5, #0
 8004d66:	d03b      	beq.n	8004de0 <recv_tcp+0xb0>
      tcp_recved(pcb, p->tot_len);
 8004d68:	8929      	ldrh	r1, [r5, #8]
 8004d6a:	4638      	mov	r0, r7
 8004d6c:	f003 fe58 	bl	8008a20 <tcp_recved>
      pbuf_free(p);
 8004d70:	4628      	mov	r0, r5
 8004d72:	f003 f9ab 	bl	80080cc <pbuf_free>
    return ERR_OK;
 8004d76:	2500      	movs	r5, #0
 8004d78:	e01e      	b.n	8004db8 <recv_tcp+0x88>
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8004d7a:	4b1c      	ldr	r3, [pc, #112]	; (8004dec <recv_tcp+0xbc>)
 8004d7c:	22f9      	movs	r2, #249	; 0xf9
 8004d7e:	491e      	ldr	r1, [pc, #120]	; (8004df8 <recv_tcp+0xc8>)
 8004d80:	481c      	ldr	r0, [pc, #112]	; (8004df4 <recv_tcp+0xc4>)
 8004d82:	f008 fc3a 	bl	800d5fa <iprintf>
 8004d86:	e7da      	b.n	8004d3e <recv_tcp+0xe>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8004d88:	4b18      	ldr	r3, [pc, #96]	; (8004dec <recv_tcp+0xbc>)
 8004d8a:	22fa      	movs	r2, #250	; 0xfa
 8004d8c:	491b      	ldr	r1, [pc, #108]	; (8004dfc <recv_tcp+0xcc>)
 8004d8e:	4819      	ldr	r0, [pc, #100]	; (8004df4 <recv_tcp+0xc4>)
 8004d90:	f008 fc33 	bl	800d5fa <iprintf>
 8004d94:	e7d4      	b.n	8004d40 <recv_tcp+0x10>
  if (err != ERR_OK) {
 8004d96:	f1b8 0f00 	cmp.w	r8, #0
 8004d9a:	d110      	bne.n	8004dbe <recv_tcp+0x8e>
  if (p != NULL) {
 8004d9c:	b1dd      	cbz	r5, 8004dd6 <recv_tcp+0xa6>
    len = p->tot_len;
 8004d9e:	892f      	ldrh	r7, [r5, #8]
  if (sys_mbox_trypost(&conn->recvmbox, p) != ERR_OK) {
 8004da0:	4629      	mov	r1, r5
 8004da2:	4630      	mov	r0, r6
 8004da4:	f007 fcdb 	bl	800c75e <sys_mbox_trypost>
 8004da8:	4605      	mov	r5, r0
 8004daa:	b9d8      	cbnz	r0, 8004de4 <recv_tcp+0xb4>
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8004dac:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004dae:	b11b      	cbz	r3, 8004db8 <recv_tcp+0x88>
 8004db0:	463a      	mov	r2, r7
 8004db2:	2100      	movs	r1, #0
 8004db4:	4620      	mov	r0, r4
 8004db6:	4798      	blx	r3
}
 8004db8:	4628      	mov	r0, r5
 8004dba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    NETCONN_SET_SAFE_ERR(conn, err);
 8004dbe:	f007 fda9 	bl	800c914 <sys_arch_protect>
 8004dc2:	f994 3008 	ldrsb.w	r3, [r4, #8]
 8004dc6:	f113 0f0c 	cmn.w	r3, #12
 8004dca:	db01      	blt.n	8004dd0 <recv_tcp+0xa0>
 8004dcc:	f884 8008 	strb.w	r8, [r4, #8]
 8004dd0:	f007 fdac 	bl	800c92c <sys_arch_unprotect>
 8004dd4:	e7e2      	b.n	8004d9c <recv_tcp+0x6c>
    len = 0;
 8004dd6:	2700      	movs	r7, #0
 8004dd8:	e7e2      	b.n	8004da0 <recv_tcp+0x70>
    return ERR_VAL;
 8004dda:	f06f 0505 	mvn.w	r5, #5
 8004dde:	e7eb      	b.n	8004db8 <recv_tcp+0x88>
    return ERR_OK;
 8004de0:	2500      	movs	r5, #0
 8004de2:	e7e9      	b.n	8004db8 <recv_tcp+0x88>
    return ERR_MEM;
 8004de4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004de8:	e7e6      	b.n	8004db8 <recv_tcp+0x88>
 8004dea:	bf00      	nop
 8004dec:	0800e314 	.word	0x0800e314
 8004df0:	0800e2f4 	.word	0x0800e2f4
 8004df4:	0800de34 	.word	0x0800de34
 8004df8:	0800e2b0 	.word	0x0800e2b0
 8004dfc:	0800e2d4 	.word	0x0800e2d4

08004e00 <lwip_netconn_do_newconn>:
{
 8004e00:	b510      	push	{r4, lr}
 8004e02:	4604      	mov	r4, r0
  msg->err = ERR_OK;
 8004e04:	2300      	movs	r3, #0
 8004e06:	7103      	strb	r3, [r0, #4]
  if (msg->conn->pcb.tcp == NULL) {
 8004e08:	6803      	ldr	r3, [r0, #0]
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	b17b      	cbz	r3, 8004e2e <lwip_netconn_do_newconn+0x2e>
  TCPIP_APIMSG_ACK(msg);
 8004e0e:	6823      	ldr	r3, [r4, #0]
 8004e10:	b163      	cbz	r3, 8004e2c <lwip_netconn_do_newconn+0x2c>
 8004e12:	f007 fd7f 	bl	800c914 <sys_arch_protect>
 8004e16:	6823      	ldr	r3, [r4, #0]
 8004e18:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8004e1c:	f112 0f0c 	cmn.w	r2, #12
 8004e20:	db02      	blt.n	8004e28 <lwip_netconn_do_newconn+0x28>
 8004e22:	f994 2004 	ldrsb.w	r2, [r4, #4]
 8004e26:	721a      	strb	r2, [r3, #8]
 8004e28:	f007 fd80 	bl	800c92c <sys_arch_unprotect>
 8004e2c:	bd10      	pop	{r4, pc}
    pcb_new(msg);
 8004e2e:	f7ff fbe9 	bl	8004604 <pcb_new>
 8004e32:	e7ec      	b.n	8004e0e <lwip_netconn_do_newconn+0xe>

08004e34 <netconn_alloc>:
{
 8004e34:	b570      	push	{r4, r5, r6, lr}
 8004e36:	4605      	mov	r5, r0
 8004e38:	460e      	mov	r6, r1
  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8004e3a:	2007      	movs	r0, #7
 8004e3c:	f002 ff56 	bl	8007cec <memp_malloc>
  if (conn == NULL) {
 8004e40:	4604      	mov	r4, r0
 8004e42:	b318      	cbz	r0, 8004e8c <netconn_alloc+0x58>
  conn->last_err = ERR_OK;
 8004e44:	2300      	movs	r3, #0
 8004e46:	7203      	strb	r3, [r0, #8]
  conn->type = t;
 8004e48:	7005      	strb	r5, [r0, #0]
  conn->pcb.tcp = NULL;
 8004e4a:	6043      	str	r3, [r0, #4]
  switch(NETCONNTYPE_GROUP(t)) {
 8004e4c:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 8004e50:	2d10      	cmp	r5, #16
 8004e52:	d001      	beq.n	8004e58 <netconn_alloc+0x24>
 8004e54:	2d20      	cmp	r5, #32
 8004e56:	d11b      	bne.n	8004e90 <netconn_alloc+0x5c>
  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 8004e58:	f104 0510 	add.w	r5, r4, #16
 8004e5c:	2106      	movs	r1, #6
 8004e5e:	4628      	mov	r0, r5
 8004e60:	f007 fc54 	bl	800c70c <sys_mbox_new>
 8004e64:	b9d8      	cbnz	r0, 8004e9e <netconn_alloc+0x6a>
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8004e66:	2100      	movs	r1, #0
 8004e68:	f104 000c 	add.w	r0, r4, #12
 8004e6c:	f007 fcc9 	bl	800c802 <sys_sem_new>
 8004e70:	b9d8      	cbnz	r0, 8004eaa <netconn_alloc+0x76>
  sys_mbox_set_invalid(&conn->acceptmbox);
 8004e72:	f104 0014 	add.w	r0, r4, #20
 8004e76:	f007 fcc1 	bl	800c7fc <sys_mbox_set_invalid>
  conn->state        = NETCONN_NONE;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	7063      	strb	r3, [r4, #1]
  conn->socket       = -1;
 8004e7e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004e82:	61a2      	str	r2, [r4, #24]
  conn->callback     = callback;
 8004e84:	62a6      	str	r6, [r4, #40]	; 0x28
  conn->current_msg  = NULL;
 8004e86:	6263      	str	r3, [r4, #36]	; 0x24
  conn->write_offset = 0;
 8004e88:	6223      	str	r3, [r4, #32]
  conn->flags = 0;
 8004e8a:	7723      	strb	r3, [r4, #28]
}
 8004e8c:	4620      	mov	r0, r4
 8004e8e:	bd70      	pop	{r4, r5, r6, pc}
    LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 8004e90:	4b08      	ldr	r3, [pc, #32]	; (8004eb4 <netconn_alloc+0x80>)
 8004e92:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8004e96:	4908      	ldr	r1, [pc, #32]	; (8004eb8 <netconn_alloc+0x84>)
 8004e98:	4808      	ldr	r0, [pc, #32]	; (8004ebc <netconn_alloc+0x88>)
 8004e9a:	f008 fbae 	bl	800d5fa <iprintf>
  memp_free(MEMP_NETCONN, conn);
 8004e9e:	4621      	mov	r1, r4
 8004ea0:	2007      	movs	r0, #7
 8004ea2:	f002 ff3d 	bl	8007d20 <memp_free>
  return NULL;
 8004ea6:	2400      	movs	r4, #0
 8004ea8:	e7f0      	b.n	8004e8c <netconn_alloc+0x58>
    sys_mbox_free(&conn->recvmbox);
 8004eaa:	4628      	mov	r0, r5
 8004eac:	f007 fc42 	bl	800c734 <sys_mbox_free>
    goto free_and_return;
 8004eb0:	e7f5      	b.n	8004e9e <netconn_alloc+0x6a>
 8004eb2:	bf00      	nop
 8004eb4:	0800e314 	.word	0x0800e314
 8004eb8:	0800e1c0 	.word	0x0800e1c0
 8004ebc:	0800de34 	.word	0x0800de34

08004ec0 <netconn_free>:
{
 8004ec0:	b538      	push	{r3, r4, r5, lr}
 8004ec2:	4604      	mov	r4, r0
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8004ec4:	6843      	ldr	r3, [r0, #4]
 8004ec6:	b133      	cbz	r3, 8004ed6 <netconn_free+0x16>
 8004ec8:	4b16      	ldr	r3, [pc, #88]	; (8004f24 <netconn_free+0x64>)
 8004eca:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8004ece:	4916      	ldr	r1, [pc, #88]	; (8004f28 <netconn_free+0x68>)
 8004ed0:	4816      	ldr	r0, [pc, #88]	; (8004f2c <netconn_free+0x6c>)
 8004ed2:	f008 fb92 	bl	800d5fa <iprintf>
  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8004ed6:	f104 0010 	add.w	r0, r4, #16
 8004eda:	f007 fc89 	bl	800c7f0 <sys_mbox_valid>
 8004ede:	b988      	cbnz	r0, 8004f04 <netconn_free+0x44>
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8004ee0:	f104 0014 	add.w	r0, r4, #20
 8004ee4:	f007 fc84 	bl	800c7f0 <sys_mbox_valid>
 8004ee8:	b9a0      	cbnz	r0, 8004f14 <netconn_free+0x54>
  sys_sem_free(&conn->op_completed);
 8004eea:	f104 050c 	add.w	r5, r4, #12
 8004eee:	4628      	mov	r0, r5
 8004ef0:	f007 fcc3 	bl	800c87a <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 8004ef4:	4628      	mov	r0, r5
 8004ef6:	f007 fccb 	bl	800c890 <sys_sem_set_invalid>
  memp_free(MEMP_NETCONN, conn);
 8004efa:	4621      	mov	r1, r4
 8004efc:	2007      	movs	r0, #7
 8004efe:	f002 ff0f 	bl	8007d20 <memp_free>
 8004f02:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8004f04:	4b07      	ldr	r3, [pc, #28]	; (8004f24 <netconn_free+0x64>)
 8004f06:	f240 22e2 	movw	r2, #738	; 0x2e2
 8004f0a:	4909      	ldr	r1, [pc, #36]	; (8004f30 <netconn_free+0x70>)
 8004f0c:	4807      	ldr	r0, [pc, #28]	; (8004f2c <netconn_free+0x6c>)
 8004f0e:	f008 fb74 	bl	800d5fa <iprintf>
 8004f12:	e7e5      	b.n	8004ee0 <netconn_free+0x20>
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8004f14:	4b03      	ldr	r3, [pc, #12]	; (8004f24 <netconn_free+0x64>)
 8004f16:	f240 22e5 	movw	r2, #741	; 0x2e5
 8004f1a:	4906      	ldr	r1, [pc, #24]	; (8004f34 <netconn_free+0x74>)
 8004f1c:	4803      	ldr	r0, [pc, #12]	; (8004f2c <netconn_free+0x6c>)
 8004f1e:	f008 fb6c 	bl	800d5fa <iprintf>
 8004f22:	e7e2      	b.n	8004eea <netconn_free+0x2a>
 8004f24:	0800e314 	.word	0x0800e314
 8004f28:	0800e1e8 	.word	0x0800e1e8
 8004f2c:	0800de34 	.word	0x0800de34
 8004f30:	0800e218 	.word	0x0800e218
 8004f34:	0800e254 	.word	0x0800e254

08004f38 <netconn_drain>:
{
 8004f38:	b570      	push	{r4, r5, r6, lr}
 8004f3a:	b082      	sub	sp, #8
 8004f3c:	4605      	mov	r5, r0
  if (sys_mbox_valid(&conn->recvmbox)) {
 8004f3e:	f100 0410 	add.w	r4, r0, #16
 8004f42:	4620      	mov	r0, r4
 8004f44:	f007 fc54 	bl	800c7f0 <sys_mbox_valid>
 8004f48:	bb38      	cbnz	r0, 8004f9a <netconn_drain+0x62>
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8004f4a:	3514      	adds	r5, #20
 8004f4c:	4628      	mov	r0, r5
 8004f4e:	f007 fc4f 	bl	800c7f0 <sys_mbox_valid>
 8004f52:	2800      	cmp	r0, #0
 8004f54:	d03e      	beq.n	8004fd4 <netconn_drain+0x9c>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8004f56:	a901      	add	r1, sp, #4
 8004f58:	4628      	mov	r0, r5
 8004f5a:	f007 fc36 	bl	800c7ca <sys_arch_mbox_tryfetch>
 8004f5e:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8004f62:	d031      	beq.n	8004fc8 <netconn_drain+0x90>
      if (mem != &netconn_aborted) {
 8004f64:	9c01      	ldr	r4, [sp, #4]
 8004f66:	4b1c      	ldr	r3, [pc, #112]	; (8004fd8 <netconn_drain+0xa0>)
 8004f68:	429c      	cmp	r4, r3
 8004f6a:	d0f4      	beq.n	8004f56 <netconn_drain+0x1e>
        netconn_drain(newconn);
 8004f6c:	4620      	mov	r0, r4
 8004f6e:	f7ff ffe3 	bl	8004f38 <netconn_drain>
        if (newconn->pcb.tcp != NULL) {
 8004f72:	6860      	ldr	r0, [r4, #4]
 8004f74:	b118      	cbz	r0, 8004f7e <netconn_drain+0x46>
          tcp_abort(newconn->pcb.tcp);
 8004f76:	f004 faa1 	bl	80094bc <tcp_abort>
          newconn->pcb.tcp = NULL;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	6063      	str	r3, [r4, #4]
        netconn_free(newconn);
 8004f7e:	4620      	mov	r0, r4
 8004f80:	f7ff ff9e 	bl	8004ec0 <netconn_free>
 8004f84:	e7e7      	b.n	8004f56 <netconn_drain+0x1e>
        if (mem != NULL) {
 8004f86:	9e01      	ldr	r6, [sp, #4]
 8004f88:	b13e      	cbz	r6, 8004f9a <netconn_drain+0x62>
          if (conn->pcb.tcp != NULL) {
 8004f8a:	6868      	ldr	r0, [r5, #4]
 8004f8c:	b110      	cbz	r0, 8004f94 <netconn_drain+0x5c>
            tcp_recved(conn->pcb.tcp, p->tot_len);
 8004f8e:	8931      	ldrh	r1, [r6, #8]
 8004f90:	f003 fd46 	bl	8008a20 <tcp_recved>
          pbuf_free(p);
 8004f94:	4630      	mov	r0, r6
 8004f96:	f003 f899 	bl	80080cc <pbuf_free>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8004f9a:	a901      	add	r1, sp, #4
 8004f9c:	4620      	mov	r0, r4
 8004f9e:	f007 fc14 	bl	800c7ca <sys_arch_mbox_tryfetch>
 8004fa2:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8004fa6:	d008      	beq.n	8004fba <netconn_drain+0x82>
      if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 8004fa8:	782b      	ldrb	r3, [r5, #0]
 8004faa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004fae:	2b10      	cmp	r3, #16
 8004fb0:	d0e9      	beq.n	8004f86 <netconn_drain+0x4e>
        netbuf_delete((struct netbuf *)mem);
 8004fb2:	9801      	ldr	r0, [sp, #4]
 8004fb4:	f000 fb14 	bl	80055e0 <netbuf_delete>
 8004fb8:	e7ef      	b.n	8004f9a <netconn_drain+0x62>
    sys_mbox_free(&conn->recvmbox);
 8004fba:	4620      	mov	r0, r4
 8004fbc:	f007 fbba 	bl	800c734 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 8004fc0:	4620      	mov	r0, r4
 8004fc2:	f007 fc1b 	bl	800c7fc <sys_mbox_set_invalid>
 8004fc6:	e7c0      	b.n	8004f4a <netconn_drain+0x12>
    sys_mbox_free(&conn->acceptmbox);
 8004fc8:	4628      	mov	r0, r5
 8004fca:	f007 fbb3 	bl	800c734 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 8004fce:	4628      	mov	r0, r5
 8004fd0:	f007 fc14 	bl	800c7fc <sys_mbox_set_invalid>
}
 8004fd4:	b002      	add	sp, #8
 8004fd6:	bd70      	pop	{r4, r5, r6, pc}
 8004fd8:	2000426c 	.word	0x2000426c

08004fdc <accept_function>:
{
 8004fdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (conn == NULL) {
 8004fe0:	2800      	cmp	r0, #0
 8004fe2:	d067      	beq.n	80050b4 <accept_function+0xd8>
 8004fe4:	4604      	mov	r4, r0
 8004fe6:	4616      	mov	r6, r2
 8004fe8:	460d      	mov	r5, r1
  if (!sys_mbox_valid(&conn->acceptmbox)) {
 8004fea:	f100 0814 	add.w	r8, r0, #20
 8004fee:	4640      	mov	r0, r8
 8004ff0:	f007 fbfe 	bl	800c7f0 <sys_mbox_valid>
 8004ff4:	2800      	cmp	r0, #0
 8004ff6:	d060      	beq.n	80050ba <accept_function+0xde>
  if (newpcb == NULL) {
 8004ff8:	b1c5      	cbz	r5, 800502c <accept_function+0x50>
  newconn = netconn_alloc(conn->type, conn->callback);
 8004ffa:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8004ffc:	7820      	ldrb	r0, [r4, #0]
 8004ffe:	f7ff ff19 	bl	8004e34 <netconn_alloc>
  if (newconn == NULL) {
 8005002:	4607      	mov	r7, r0
 8005004:	b310      	cbz	r0, 800504c <accept_function+0x70>
  newconn->pcb.tcp = newpcb;
 8005006:	6045      	str	r5, [r0, #4]
  setup_tcp(newconn);
 8005008:	f7ff fadc 	bl	80045c4 <setup_tcp>
  newconn->last_err = err;
 800500c:	723e      	strb	r6, [r7, #8]
  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 800500e:	4639      	mov	r1, r7
 8005010:	4640      	mov	r0, r8
 8005012:	f007 fba4 	bl	800c75e <sys_mbox_trypost>
 8005016:	4605      	mov	r5, r0
 8005018:	bb30      	cbnz	r0, 8005068 <accept_function+0x8c>
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800501a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800501c:	b11b      	cbz	r3, 8005026 <accept_function+0x4a>
 800501e:	2200      	movs	r2, #0
 8005020:	4611      	mov	r1, r2
 8005022:	4620      	mov	r0, r4
 8005024:	4798      	blx	r3
}
 8005026:	4628      	mov	r0, r5
 8005028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (sys_mbox_trypost(&conn->acceptmbox, &netconn_aborted) == ERR_OK) {
 800502c:	492a      	ldr	r1, [pc, #168]	; (80050d8 <accept_function+0xfc>)
 800502e:	4640      	mov	r0, r8
 8005030:	f007 fb95 	bl	800c75e <sys_mbox_trypost>
 8005034:	2800      	cmp	r0, #0
 8005036:	d143      	bne.n	80050c0 <accept_function+0xe4>
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8005038:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800503a:	2b00      	cmp	r3, #0
 800503c:	d043      	beq.n	80050c6 <accept_function+0xea>
 800503e:	2200      	movs	r2, #0
 8005040:	4611      	mov	r1, r2
 8005042:	4620      	mov	r0, r4
 8005044:	4798      	blx	r3
    return ERR_VAL;
 8005046:	f06f 0505 	mvn.w	r5, #5
 800504a:	e7ec      	b.n	8005026 <accept_function+0x4a>
    if (sys_mbox_trypost(&conn->acceptmbox, &netconn_aborted) == ERR_OK) {
 800504c:	4922      	ldr	r1, [pc, #136]	; (80050d8 <accept_function+0xfc>)
 800504e:	4640      	mov	r0, r8
 8005050:	f007 fb85 	bl	800c75e <sys_mbox_trypost>
 8005054:	bbd0      	cbnz	r0, 80050cc <accept_function+0xf0>
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8005056:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005058:	b3db      	cbz	r3, 80050d2 <accept_function+0xf6>
 800505a:	2200      	movs	r2, #0
 800505c:	4611      	mov	r1, r2
 800505e:	4620      	mov	r0, r4
 8005060:	4798      	blx	r3
    return ERR_MEM;
 8005062:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005066:	e7de      	b.n	8005026 <accept_function+0x4a>
    struct tcp_pcb* pcb = newconn->pcb.tcp;
 8005068:	687c      	ldr	r4, [r7, #4]
    tcp_arg(pcb, NULL);
 800506a:	2100      	movs	r1, #0
 800506c:	4620      	mov	r0, r4
 800506e:	f003 fd44 	bl	8008afa <tcp_arg>
    tcp_recv(pcb, NULL);
 8005072:	2100      	movs	r1, #0
 8005074:	4620      	mov	r0, r4
 8005076:	f003 fd43 	bl	8008b00 <tcp_recv>
    tcp_sent(pcb, NULL);
 800507a:	2100      	movs	r1, #0
 800507c:	4620      	mov	r0, r4
 800507e:	f003 fd59 	bl	8008b34 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 8005082:	2200      	movs	r2, #0
 8005084:	4611      	mov	r1, r2
 8005086:	4620      	mov	r0, r4
 8005088:	f003 fd8e 	bl	8008ba8 <tcp_poll>
    tcp_err(pcb, NULL);
 800508c:	2100      	movs	r1, #0
 800508e:	4620      	mov	r0, r4
 8005090:	f003 fd68 	bl	8008b64 <tcp_err>
    newconn->pcb.tcp = NULL;
 8005094:	2300      	movs	r3, #0
 8005096:	607b      	str	r3, [r7, #4]
    sys_mbox_free(&newconn->recvmbox);
 8005098:	f107 0410 	add.w	r4, r7, #16
 800509c:	4620      	mov	r0, r4
 800509e:	f007 fb49 	bl	800c734 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 80050a2:	4620      	mov	r0, r4
 80050a4:	f007 fbaa 	bl	800c7fc <sys_mbox_set_invalid>
    netconn_free(newconn);
 80050a8:	4638      	mov	r0, r7
 80050aa:	f7ff ff09 	bl	8004ec0 <netconn_free>
    return ERR_MEM;
 80050ae:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80050b2:	e7b8      	b.n	8005026 <accept_function+0x4a>
    return ERR_VAL;
 80050b4:	f06f 0505 	mvn.w	r5, #5
 80050b8:	e7b5      	b.n	8005026 <accept_function+0x4a>
    return ERR_VAL;
 80050ba:	f06f 0505 	mvn.w	r5, #5
 80050be:	e7b2      	b.n	8005026 <accept_function+0x4a>
    return ERR_VAL;
 80050c0:	f06f 0505 	mvn.w	r5, #5
 80050c4:	e7af      	b.n	8005026 <accept_function+0x4a>
 80050c6:	f06f 0505 	mvn.w	r5, #5
 80050ca:	e7ac      	b.n	8005026 <accept_function+0x4a>
    return ERR_MEM;
 80050cc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80050d0:	e7a9      	b.n	8005026 <accept_function+0x4a>
 80050d2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80050d6:	e7a6      	b.n	8005026 <accept_function+0x4a>
 80050d8:	2000426c 	.word	0x2000426c

080050dc <lwip_netconn_do_delconn>:
{
 80050dc:	b538      	push	{r3, r4, r5, lr}
 80050de:	4604      	mov	r4, r0
  enum netconn_state state = msg->conn->state;
 80050e0:	6803      	ldr	r3, [r0, #0]
 80050e2:	785d      	ldrb	r5, [r3, #1]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 80050e4:	b15d      	cbz	r5, 80050fe <lwip_netconn_do_delconn+0x22>
 80050e6:	781b      	ldrb	r3, [r3, #0]
 80050e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80050ec:	2b10      	cmp	r3, #16
 80050ee:	d006      	beq.n	80050fe <lwip_netconn_do_delconn+0x22>
 80050f0:	4b4e      	ldr	r3, [pc, #312]	; (800522c <lwip_netconn_do_delconn+0x150>)
 80050f2:	f240 4201 	movw	r2, #1025	; 0x401
 80050f6:	494e      	ldr	r1, [pc, #312]	; (8005230 <lwip_netconn_do_delconn+0x154>)
 80050f8:	484e      	ldr	r0, [pc, #312]	; (8005234 <lwip_netconn_do_delconn+0x158>)
 80050fa:	f008 fa7e 	bl	800d5fa <iprintf>
  if (((state != NETCONN_NONE) &&
 80050fe:	b1d5      	cbz	r5, 8005136 <lwip_netconn_do_delconn+0x5a>
 8005100:	2d02      	cmp	r5, #2
 8005102:	d018      	beq.n	8005136 <lwip_netconn_do_delconn+0x5a>
       (state != NETCONN_LISTEN) &&
 8005104:	2d03      	cmp	r5, #3
 8005106:	d016      	beq.n	8005136 <lwip_netconn_do_delconn+0x5a>
    msg->err = ERR_INPROGRESS;
 8005108:	23fb      	movs	r3, #251	; 0xfb
 800510a:	7123      	strb	r3, [r4, #4]
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800510c:	6820      	ldr	r0, [r4, #0]
 800510e:	300c      	adds	r0, #12
 8005110:	f007 fbb8 	bl	800c884 <sys_sem_valid>
 8005114:	b170      	cbz	r0, 8005134 <lwip_netconn_do_delconn+0x58>
    TCPIP_APIMSG_ACK(msg);
 8005116:	6823      	ldr	r3, [r4, #0]
 8005118:	b163      	cbz	r3, 8005134 <lwip_netconn_do_delconn+0x58>
 800511a:	f007 fbfb 	bl	800c914 <sys_arch_protect>
 800511e:	6823      	ldr	r3, [r4, #0]
 8005120:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8005124:	f112 0f0c 	cmn.w	r2, #12
 8005128:	db02      	blt.n	8005130 <lwip_netconn_do_delconn+0x54>
 800512a:	f994 2004 	ldrsb.w	r2, [r4, #4]
 800512e:	721a      	strb	r2, [r3, #8]
 8005130:	f007 fbfc 	bl	800c92c <sys_arch_unprotect>
 8005134:	bd38      	pop	{r3, r4, r5, pc}
       (state != NETCONN_CONNECT)) ||
 8005136:	2d03      	cmp	r5, #3
 8005138:	d027      	beq.n	800518a <lwip_netconn_do_delconn+0xae>
    LWIP_ASSERT("blocking connect in progress",
 800513a:	2d03      	cmp	r5, #3
 800513c:	d02b      	beq.n	8005196 <lwip_netconn_do_delconn+0xba>
    msg->err = ERR_OK;
 800513e:	2300      	movs	r3, #0
 8005140:	7123      	strb	r3, [r4, #4]
    netconn_drain(msg->conn);
 8005142:	6820      	ldr	r0, [r4, #0]
 8005144:	f7ff fef8 	bl	8004f38 <netconn_drain>
    if (msg->conn->pcb.tcp != NULL) {
 8005148:	6822      	ldr	r2, [r4, #0]
 800514a:	6851      	ldr	r1, [r2, #4]
 800514c:	b179      	cbz	r1, 800516e <lwip_netconn_do_delconn+0x92>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800514e:	7813      	ldrb	r3, [r2, #0]
 8005150:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005154:	2b10      	cmp	r3, #16
 8005156:	d02b      	beq.n	80051b0 <lwip_netconn_do_delconn+0xd4>
 8005158:	2b20      	cmp	r3, #32
 800515a:	d105      	bne.n	8005168 <lwip_netconn_do_delconn+0x8c>
        msg->conn->pcb.udp->recv_arg = NULL;
 800515c:	2300      	movs	r3, #0
 800515e:	61cb      	str	r3, [r1, #28]
        udp_remove(msg->conn->pcb.udp);
 8005160:	6823      	ldr	r3, [r4, #0]
 8005162:	6858      	ldr	r0, [r3, #4]
 8005164:	f007 f9fe 	bl	800c564 <udp_remove>
      msg->conn->pcb.tcp = NULL;
 8005168:	6823      	ldr	r3, [r4, #0]
 800516a:	2200      	movs	r2, #0
 800516c:	605a      	str	r2, [r3, #4]
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800516e:	6820      	ldr	r0, [r4, #0]
 8005170:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005172:	b113      	cbz	r3, 800517a <lwip_netconn_do_delconn+0x9e>
 8005174:	2200      	movs	r2, #0
 8005176:	4611      	mov	r1, r2
 8005178:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800517a:	6820      	ldr	r0, [r4, #0]
 800517c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800517e:	2b00      	cmp	r3, #0
 8005180:	d0c4      	beq.n	800510c <lwip_netconn_do_delconn+0x30>
 8005182:	2200      	movs	r2, #0
 8005184:	2102      	movs	r1, #2
 8005186:	4798      	blx	r3
 8005188:	e7c0      	b.n	800510c <lwip_netconn_do_delconn+0x30>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800518a:	6823      	ldr	r3, [r4, #0]
 800518c:	7f1b      	ldrb	r3, [r3, #28]
 800518e:	f013 0f04 	tst.w	r3, #4
 8005192:	d1d2      	bne.n	800513a <lwip_netconn_do_delconn+0x5e>
 8005194:	e7b8      	b.n	8005108 <lwip_netconn_do_delconn+0x2c>
    LWIP_ASSERT("blocking connect in progress",
 8005196:	6823      	ldr	r3, [r4, #0]
 8005198:	7f1b      	ldrb	r3, [r3, #28]
 800519a:	f013 0f04 	tst.w	r3, #4
 800519e:	d1ce      	bne.n	800513e <lwip_netconn_do_delconn+0x62>
 80051a0:	4b22      	ldr	r3, [pc, #136]	; (800522c <lwip_netconn_do_delconn+0x150>)
 80051a2:	f240 421f 	movw	r2, #1055	; 0x41f
 80051a6:	4924      	ldr	r1, [pc, #144]	; (8005238 <lwip_netconn_do_delconn+0x15c>)
 80051a8:	4822      	ldr	r0, [pc, #136]	; (8005234 <lwip_netconn_do_delconn+0x158>)
 80051aa:	f008 fa26 	bl	800d5fa <iprintf>
 80051ae:	e7c6      	b.n	800513e <lwip_netconn_do_delconn+0x62>
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 80051b0:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d036      	beq.n	8005224 <lwip_netconn_do_delconn+0x148>
 80051b6:	4b1d      	ldr	r3, [pc, #116]	; (800522c <lwip_netconn_do_delconn+0x150>)
 80051b8:	f240 4235 	movw	r2, #1077	; 0x435
 80051bc:	491f      	ldr	r1, [pc, #124]	; (800523c <lwip_netconn_do_delconn+0x160>)
 80051be:	481d      	ldr	r0, [pc, #116]	; (8005234 <lwip_netconn_do_delconn+0x158>)
 80051c0:	f008 fa1b 	bl	800d5fa <iprintf>
        msg->conn->state = NETCONN_CLOSE;
 80051c4:	6823      	ldr	r3, [r4, #0]
 80051c6:	2204      	movs	r2, #4
 80051c8:	705a      	strb	r2, [r3, #1]
        msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 80051ca:	2303      	movs	r3, #3
 80051cc:	7223      	strb	r3, [r4, #8]
        msg->conn->current_msg = msg;
 80051ce:	6823      	ldr	r3, [r4, #0]
 80051d0:	625c      	str	r4, [r3, #36]	; 0x24
        if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 80051d2:	2100      	movs	r1, #0
 80051d4:	6820      	ldr	r0, [r4, #0]
 80051d6:	f7ff fc07 	bl	80049e8 <lwip_netconn_do_close_internal>
 80051da:	2800      	cmp	r0, #0
 80051dc:	d0aa      	beq.n	8005134 <lwip_netconn_do_delconn+0x58>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 80051de:	6823      	ldr	r3, [r4, #0]
 80051e0:	785b      	ldrb	r3, [r3, #1]
 80051e2:	2b04      	cmp	r3, #4
 80051e4:	d006      	beq.n	80051f4 <lwip_netconn_do_delconn+0x118>
 80051e6:	4b11      	ldr	r3, [pc, #68]	; (800522c <lwip_netconn_do_delconn+0x150>)
 80051e8:	f240 423b 	movw	r2, #1083	; 0x43b
 80051ec:	4914      	ldr	r1, [pc, #80]	; (8005240 <lwip_netconn_do_delconn+0x164>)
 80051ee:	4811      	ldr	r0, [pc, #68]	; (8005234 <lwip_netconn_do_delconn+0x158>)
 80051f0:	f008 fa03 	bl	800d5fa <iprintf>
          UNLOCK_TCPIP_CORE();
 80051f4:	4d13      	ldr	r5, [pc, #76]	; (8005244 <lwip_netconn_do_delconn+0x168>)
 80051f6:	4628      	mov	r0, r5
 80051f8:	f007 fb72 	bl	800c8e0 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 80051fc:	6820      	ldr	r0, [r4, #0]
 80051fe:	2100      	movs	r1, #0
 8005200:	300c      	adds	r0, #12
 8005202:	f007 fb17 	bl	800c834 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 8005206:	4628      	mov	r0, r5
 8005208:	f007 fb63 	bl	800c8d2 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800520c:	6823      	ldr	r3, [r4, #0]
 800520e:	785b      	ldrb	r3, [r3, #1]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d08f      	beq.n	8005134 <lwip_netconn_do_delconn+0x58>
 8005214:	4b05      	ldr	r3, [pc, #20]	; (800522c <lwip_netconn_do_delconn+0x150>)
 8005216:	f240 423f 	movw	r2, #1087	; 0x43f
 800521a:	4909      	ldr	r1, [pc, #36]	; (8005240 <lwip_netconn_do_delconn+0x164>)
 800521c:	4805      	ldr	r0, [pc, #20]	; (8005234 <lwip_netconn_do_delconn+0x158>)
 800521e:	f008 f9ec 	bl	800d5fa <iprintf>
 8005222:	bd38      	pop	{r3, r4, r5, pc}
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 8005224:	6a13      	ldr	r3, [r2, #32]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d0cc      	beq.n	80051c4 <lwip_netconn_do_delconn+0xe8>
 800522a:	e7c4      	b.n	80051b6 <lwip_netconn_do_delconn+0xda>
 800522c:	0800e314 	.word	0x0800e314
 8005230:	0800e0a4 	.word	0x0800e0a4
 8005234:	0800de34 	.word	0x0800de34
 8005238:	0800e0b8 	.word	0x0800e0b8
 800523c:	0800e0d8 	.word	0x0800e0d8
 8005240:	0800e0f4 	.word	0x0800e0f4
 8005244:	20004270 	.word	0x20004270

08005248 <lwip_netconn_do_bind>:
{
 8005248:	b510      	push	{r4, lr}
 800524a:	4604      	mov	r4, r0
  if (ERR_IS_FATAL(msg->conn->last_err)) {
 800524c:	6803      	ldr	r3, [r0, #0]
 800524e:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8005252:	f112 0f0c 	cmn.w	r2, #12
 8005256:	da10      	bge.n	800527a <lwip_netconn_do_bind+0x32>
    msg->err = msg->conn->last_err;
 8005258:	7102      	strb	r2, [r0, #4]
  TCPIP_APIMSG_ACK(msg);
 800525a:	6823      	ldr	r3, [r4, #0]
 800525c:	b163      	cbz	r3, 8005278 <lwip_netconn_do_bind+0x30>
 800525e:	f007 fb59 	bl	800c914 <sys_arch_protect>
 8005262:	6823      	ldr	r3, [r4, #0]
 8005264:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8005268:	f112 0f0c 	cmn.w	r2, #12
 800526c:	db02      	blt.n	8005274 <lwip_netconn_do_bind+0x2c>
 800526e:	f994 2004 	ldrsb.w	r2, [r4, #4]
 8005272:	721a      	strb	r2, [r3, #8]
 8005274:	f007 fb5a 	bl	800c92c <sys_arch_unprotect>
 8005278:	bd10      	pop	{r4, pc}
    msg->err = ERR_VAL;
 800527a:	22fa      	movs	r2, #250	; 0xfa
 800527c:	7102      	strb	r2, [r0, #4]
    if (msg->conn->pcb.tcp != NULL) {
 800527e:	6858      	ldr	r0, [r3, #4]
 8005280:	2800      	cmp	r0, #0
 8005282:	d0ea      	beq.n	800525a <lwip_netconn_do_bind+0x12>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8005284:	781b      	ldrb	r3, [r3, #0]
 8005286:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800528a:	2b10      	cmp	r3, #16
 800528c:	d007      	beq.n	800529e <lwip_netconn_do_bind+0x56>
 800528e:	2b20      	cmp	r3, #32
 8005290:	d1e3      	bne.n	800525a <lwip_netconn_do_bind+0x12>
        msg->err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8005292:	89a2      	ldrh	r2, [r4, #12]
 8005294:	68a1      	ldr	r1, [r4, #8]
 8005296:	f007 f86f 	bl	800c378 <udp_bind>
 800529a:	7120      	strb	r0, [r4, #4]
        break;
 800529c:	e7dd      	b.n	800525a <lwip_netconn_do_bind+0x12>
        msg->err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800529e:	89a2      	ldrh	r2, [r4, #12]
 80052a0:	68a1      	ldr	r1, [r4, #8]
 80052a2:	f003 facf 	bl	8008844 <tcp_bind>
 80052a6:	7120      	strb	r0, [r4, #4]
        break;
 80052a8:	e7d7      	b.n	800525a <lwip_netconn_do_bind+0x12>
	...

080052ac <lwip_netconn_do_listen>:
{
 80052ac:	b530      	push	{r4, r5, lr}
 80052ae:	b083      	sub	sp, #12
 80052b0:	4604      	mov	r4, r0
  if (ERR_IS_FATAL(msg->conn->last_err)) {
 80052b2:	6803      	ldr	r3, [r0, #0]
 80052b4:	f993 2008 	ldrsb.w	r2, [r3, #8]
 80052b8:	f112 0f0c 	cmn.w	r2, #12
 80052bc:	da11      	bge.n	80052e2 <lwip_netconn_do_listen+0x36>
    msg->err = msg->conn->last_err;
 80052be:	7102      	strb	r2, [r0, #4]
  TCPIP_APIMSG_ACK(msg);
 80052c0:	6823      	ldr	r3, [r4, #0]
 80052c2:	b163      	cbz	r3, 80052de <lwip_netconn_do_listen+0x32>
 80052c4:	f007 fb26 	bl	800c914 <sys_arch_protect>
 80052c8:	6823      	ldr	r3, [r4, #0]
 80052ca:	f993 2008 	ldrsb.w	r2, [r3, #8]
 80052ce:	f112 0f0c 	cmn.w	r2, #12
 80052d2:	db02      	blt.n	80052da <lwip_netconn_do_listen+0x2e>
 80052d4:	f994 2004 	ldrsb.w	r2, [r4, #4]
 80052d8:	721a      	strb	r2, [r3, #8]
 80052da:	f007 fb27 	bl	800c92c <sys_arch_unprotect>
}
 80052de:	b003      	add	sp, #12
 80052e0:	bd30      	pop	{r4, r5, pc}
    msg->err = ERR_CONN;
 80052e2:	22f5      	movs	r2, #245	; 0xf5
 80052e4:	7102      	strb	r2, [r0, #4]
    if (msg->conn->pcb.tcp != NULL) {
 80052e6:	6858      	ldr	r0, [r3, #4]
 80052e8:	2800      	cmp	r0, #0
 80052ea:	d0e9      	beq.n	80052c0 <lwip_netconn_do_listen+0x14>
      if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 80052ec:	781a      	ldrb	r2, [r3, #0]
 80052ee:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80052f2:	2a10      	cmp	r2, #16
 80052f4:	d002      	beq.n	80052fc <lwip_netconn_do_listen+0x50>
        msg->err = ERR_ARG;
 80052f6:	23f0      	movs	r3, #240	; 0xf0
 80052f8:	7123      	strb	r3, [r4, #4]
 80052fa:	e7e1      	b.n	80052c0 <lwip_netconn_do_listen+0x14>
        if (msg->conn->state == NETCONN_NONE) {
 80052fc:	785b      	ldrb	r3, [r3, #1]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d145      	bne.n	800538e <lwip_netconn_do_listen+0xe2>
          if (msg->conn->pcb.tcp->state != CLOSED) {
 8005302:	7d03      	ldrb	r3, [r0, #20]
 8005304:	b113      	cbz	r3, 800530c <lwip_netconn_do_listen+0x60>
            msg->err = ERR_VAL;
 8005306:	23fa      	movs	r3, #250	; 0xfa
 8005308:	7123      	strb	r3, [r4, #4]
 800530a:	e7d9      	b.n	80052c0 <lwip_netconn_do_listen+0x14>
            lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 800530c:	f10d 0207 	add.w	r2, sp, #7
 8005310:	21ff      	movs	r1, #255	; 0xff
 8005312:	f003 faf5 	bl	8008900 <tcp_listen_with_backlog_and_err>
            if (lpcb == NULL) {
 8005316:	4605      	mov	r5, r0
 8005318:	b1f0      	cbz	r0, 8005358 <lwip_netconn_do_listen+0xac>
              if (sys_mbox_valid(&msg->conn->recvmbox)) {
 800531a:	6820      	ldr	r0, [r4, #0]
 800531c:	3010      	adds	r0, #16
 800531e:	f007 fa67 	bl	800c7f0 <sys_mbox_valid>
 8005322:	b9e8      	cbnz	r0, 8005360 <lwip_netconn_do_listen+0xb4>
              msg->err = ERR_OK;
 8005324:	2300      	movs	r3, #0
 8005326:	7123      	strb	r3, [r4, #4]
              if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 8005328:	6820      	ldr	r0, [r4, #0]
 800532a:	3014      	adds	r0, #20
 800532c:	f007 fa60 	bl	800c7f0 <sys_mbox_valid>
 8005330:	b1f8      	cbz	r0, 8005372 <lwip_netconn_do_listen+0xc6>
              if (msg->err == ERR_OK) {
 8005332:	f994 3004 	ldrsb.w	r3, [r4, #4]
 8005336:	bb1b      	cbnz	r3, 8005380 <lwip_netconn_do_listen+0xd4>
                msg->conn->state = NETCONN_LISTEN;
 8005338:	6823      	ldr	r3, [r4, #0]
 800533a:	2202      	movs	r2, #2
 800533c:	705a      	strb	r2, [r3, #1]
                msg->conn->pcb.tcp = lpcb;
 800533e:	6823      	ldr	r3, [r4, #0]
 8005340:	605d      	str	r5, [r3, #4]
                tcp_arg(msg->conn->pcb.tcp, msg->conn);
 8005342:	6823      	ldr	r3, [r4, #0]
 8005344:	4619      	mov	r1, r3
 8005346:	6858      	ldr	r0, [r3, #4]
 8005348:	f003 fbd7 	bl	8008afa <tcp_arg>
                tcp_accept(msg->conn->pcb.tcp, accept_function);
 800534c:	6823      	ldr	r3, [r4, #0]
 800534e:	4912      	ldr	r1, [pc, #72]	; (8005398 <lwip_netconn_do_listen+0xec>)
 8005350:	6858      	ldr	r0, [r3, #4]
 8005352:	f003 fc21 	bl	8008b98 <tcp_accept>
 8005356:	e7b3      	b.n	80052c0 <lwip_netconn_do_listen+0x14>
              msg->err = err;
 8005358:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800535c:	7123      	strb	r3, [r4, #4]
 800535e:	e7af      	b.n	80052c0 <lwip_netconn_do_listen+0x14>
                sys_mbox_free(&msg->conn->recvmbox);
 8005360:	6820      	ldr	r0, [r4, #0]
 8005362:	3010      	adds	r0, #16
 8005364:	f007 f9e6 	bl	800c734 <sys_mbox_free>
                sys_mbox_set_invalid(&msg->conn->recvmbox);
 8005368:	6820      	ldr	r0, [r4, #0]
 800536a:	3010      	adds	r0, #16
 800536c:	f007 fa46 	bl	800c7fc <sys_mbox_set_invalid>
 8005370:	e7d8      	b.n	8005324 <lwip_netconn_do_listen+0x78>
                msg->err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 8005372:	6820      	ldr	r0, [r4, #0]
 8005374:	2106      	movs	r1, #6
 8005376:	3014      	adds	r0, #20
 8005378:	f007 f9c8 	bl	800c70c <sys_mbox_new>
 800537c:	7120      	strb	r0, [r4, #4]
 800537e:	e7d8      	b.n	8005332 <lwip_netconn_do_listen+0x86>
                tcp_close(lpcb);
 8005380:	4628      	mov	r0, r5
 8005382:	f003 ff4b 	bl	800921c <tcp_close>
                msg->conn->pcb.tcp = NULL;
 8005386:	6823      	ldr	r3, [r4, #0]
 8005388:	2200      	movs	r2, #0
 800538a:	605a      	str	r2, [r3, #4]
 800538c:	e798      	b.n	80052c0 <lwip_netconn_do_listen+0x14>
        } else if (msg->conn->state == NETCONN_LISTEN) {
 800538e:	2b02      	cmp	r3, #2
 8005390:	d196      	bne.n	80052c0 <lwip_netconn_do_listen+0x14>
          msg->err = ERR_OK;
 8005392:	2300      	movs	r3, #0
 8005394:	7123      	strb	r3, [r4, #4]
 8005396:	e793      	b.n	80052c0 <lwip_netconn_do_listen+0x14>
 8005398:	08004fdd 	.word	0x08004fdd

0800539c <lwip_netconn_do_send>:
{
 800539c:	b510      	push	{r4, lr}
 800539e:	4604      	mov	r4, r0
  if (ERR_IS_FATAL(msg->conn->last_err)) {
 80053a0:	6803      	ldr	r3, [r0, #0]
 80053a2:	f993 2008 	ldrsb.w	r2, [r3, #8]
 80053a6:	f112 0f0c 	cmn.w	r2, #12
 80053aa:	da10      	bge.n	80053ce <lwip_netconn_do_send+0x32>
    msg->err = msg->conn->last_err;
 80053ac:	7102      	strb	r2, [r0, #4]
  TCPIP_APIMSG_ACK(msg);
 80053ae:	6823      	ldr	r3, [r4, #0]
 80053b0:	b163      	cbz	r3, 80053cc <lwip_netconn_do_send+0x30>
 80053b2:	f007 faaf 	bl	800c914 <sys_arch_protect>
 80053b6:	6823      	ldr	r3, [r4, #0]
 80053b8:	f993 2008 	ldrsb.w	r2, [r3, #8]
 80053bc:	f112 0f0c 	cmn.w	r2, #12
 80053c0:	db02      	blt.n	80053c8 <lwip_netconn_do_send+0x2c>
 80053c2:	f994 2004 	ldrsb.w	r2, [r4, #4]
 80053c6:	721a      	strb	r2, [r3, #8]
 80053c8:	f007 fab0 	bl	800c92c <sys_arch_unprotect>
 80053cc:	bd10      	pop	{r4, pc}
    msg->err = ERR_CONN;
 80053ce:	22f5      	movs	r2, #245	; 0xf5
 80053d0:	7102      	strb	r2, [r0, #4]
    if (msg->conn->pcb.tcp != NULL) {
 80053d2:	6858      	ldr	r0, [r3, #4]
 80053d4:	2800      	cmp	r0, #0
 80053d6:	d0ea      	beq.n	80053ae <lwip_netconn_do_send+0x12>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80053d8:	781b      	ldrb	r3, [r3, #0]
 80053da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80053de:	2b20      	cmp	r3, #32
 80053e0:	d1e5      	bne.n	80053ae <lwip_netconn_do_send+0x12>
        if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 80053e2:	68a1      	ldr	r1, [r4, #8]
 80053e4:	688b      	ldr	r3, [r1, #8]
 80053e6:	b923      	cbnz	r3, 80053f2 <lwip_netconn_do_send+0x56>
          msg->err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 80053e8:	6809      	ldr	r1, [r1, #0]
 80053ea:	f007 f8ae 	bl	800c54a <udp_send>
 80053ee:	7120      	strb	r0, [r4, #4]
 80053f0:	e7dd      	b.n	80053ae <lwip_netconn_do_send+0x12>
          msg->err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 80053f2:	898b      	ldrh	r3, [r1, #12]
 80053f4:	f101 0208 	add.w	r2, r1, #8
 80053f8:	6809      	ldr	r1, [r1, #0]
 80053fa:	f007 f888 	bl	800c50e <udp_sendto>
 80053fe:	7120      	strb	r0, [r4, #4]
 8005400:	e7d5      	b.n	80053ae <lwip_netconn_do_send+0x12>
	...

08005404 <lwip_netconn_do_write>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 8005404:	b538      	push	{r3, r4, r5, lr}
 8005406:	4604      	mov	r4, r0
  struct api_msg *msg = (struct api_msg*)m;

  if (ERR_IS_FATAL(msg->conn->last_err)) {
 8005408:	6803      	ldr	r3, [r0, #0]
 800540a:	f993 2008 	ldrsb.w	r2, [r3, #8]
 800540e:	f112 0f0c 	cmn.w	r2, #12
 8005412:	da0f      	bge.n	8005434 <lwip_netconn_do_write+0x30>
    msg->err = msg->conn->last_err;
 8005414:	7102      	strb	r2, [r0, #4]
    } else {
      msg->err = ERR_VAL;
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  TCPIP_APIMSG_ACK(msg);
 8005416:	b163      	cbz	r3, 8005432 <lwip_netconn_do_write+0x2e>
 8005418:	f007 fa7c 	bl	800c914 <sys_arch_protect>
 800541c:	6823      	ldr	r3, [r4, #0]
 800541e:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8005422:	f112 0f0c 	cmn.w	r2, #12
 8005426:	db02      	blt.n	800542e <lwip_netconn_do_write+0x2a>
 8005428:	f994 2004 	ldrsb.w	r2, [r4, #4]
 800542c:	721a      	strb	r2, [r3, #8]
 800542e:	f007 fa7d 	bl	800c92c <sys_arch_unprotect>
 8005432:	bd38      	pop	{r3, r4, r5, pc}
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8005434:	781a      	ldrb	r2, [r3, #0]
 8005436:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 800543a:	2a10      	cmp	r2, #16
 800543c:	d002      	beq.n	8005444 <lwip_netconn_do_write+0x40>
      msg->err = ERR_VAL;
 800543e:	22fa      	movs	r2, #250	; 0xfa
 8005440:	7102      	strb	r2, [r0, #4]
 8005442:	e7e8      	b.n	8005416 <lwip_netconn_do_write+0x12>
      if (msg->conn->state != NETCONN_NONE) {
 8005444:	785a      	ldrb	r2, [r3, #1]
 8005446:	b112      	cbz	r2, 800544e <lwip_netconn_do_write+0x4a>
        msg->err = ERR_INPROGRESS;
 8005448:	22fb      	movs	r2, #251	; 0xfb
 800544a:	7102      	strb	r2, [r0, #4]
 800544c:	e7e3      	b.n	8005416 <lwip_netconn_do_write+0x12>
      } else if (msg->conn->pcb.tcp != NULL) {
 800544e:	685a      	ldr	r2, [r3, #4]
 8005450:	2a00      	cmp	r2, #0
 8005452:	d048      	beq.n	80054e6 <lwip_netconn_do_write+0xe2>
        msg->conn->state = NETCONN_WRITE;
 8005454:	2201      	movs	r2, #1
 8005456:	705a      	strb	r2, [r3, #1]
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 8005458:	6803      	ldr	r3, [r0, #0]
 800545a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800545c:	2a00      	cmp	r2, #0
 800545e:	d036      	beq.n	80054ce <lwip_netconn_do_write+0xca>
 8005460:	4b22      	ldr	r3, [pc, #136]	; (80054ec <lwip_netconn_do_write+0xe8>)
 8005462:	f240 6283 	movw	r2, #1667	; 0x683
 8005466:	4922      	ldr	r1, [pc, #136]	; (80054f0 <lwip_netconn_do_write+0xec>)
 8005468:	4822      	ldr	r0, [pc, #136]	; (80054f4 <lwip_netconn_do_write+0xf0>)
 800546a:	f008 f8c6 	bl	800d5fa <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800546e:	68e3      	ldr	r3, [r4, #12]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d030      	beq.n	80054d6 <lwip_netconn_do_write+0xd2>
        msg->conn->current_msg = msg;
 8005474:	6823      	ldr	r3, [r4, #0]
 8005476:	625c      	str	r4, [r3, #36]	; 0x24
        msg->conn->write_offset = 0;
 8005478:	6823      	ldr	r3, [r4, #0]
 800547a:	2100      	movs	r1, #0
 800547c:	6219      	str	r1, [r3, #32]
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800547e:	6820      	ldr	r0, [r4, #0]
 8005480:	f7ff f9a4 	bl	80047cc <lwip_netconn_do_writemore>
 8005484:	2800      	cmp	r0, #0
 8005486:	d0d4      	beq.n	8005432 <lwip_netconn_do_write+0x2e>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 8005488:	6823      	ldr	r3, [r4, #0]
 800548a:	785b      	ldrb	r3, [r3, #1]
 800548c:	2b01      	cmp	r3, #1
 800548e:	d006      	beq.n	800549e <lwip_netconn_do_write+0x9a>
 8005490:	4b16      	ldr	r3, [pc, #88]	; (80054ec <lwip_netconn_do_write+0xe8>)
 8005492:	f240 6289 	movw	r2, #1673	; 0x689
 8005496:	4918      	ldr	r1, [pc, #96]	; (80054f8 <lwip_netconn_do_write+0xf4>)
 8005498:	4816      	ldr	r0, [pc, #88]	; (80054f4 <lwip_netconn_do_write+0xf0>)
 800549a:	f008 f8ae 	bl	800d5fa <iprintf>
          UNLOCK_TCPIP_CORE();
 800549e:	4d17      	ldr	r5, [pc, #92]	; (80054fc <lwip_netconn_do_write+0xf8>)
 80054a0:	4628      	mov	r0, r5
 80054a2:	f007 fa1d 	bl	800c8e0 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 80054a6:	6820      	ldr	r0, [r4, #0]
 80054a8:	2100      	movs	r1, #0
 80054aa:	300c      	adds	r0, #12
 80054ac:	f007 f9c2 	bl	800c834 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 80054b0:	4628      	mov	r0, r5
 80054b2:	f007 fa0e 	bl	800c8d2 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 80054b6:	6823      	ldr	r3, [r4, #0]
 80054b8:	785b      	ldrb	r3, [r3, #1]
 80054ba:	2b01      	cmp	r3, #1
 80054bc:	d1b9      	bne.n	8005432 <lwip_netconn_do_write+0x2e>
 80054be:	4b0b      	ldr	r3, [pc, #44]	; (80054ec <lwip_netconn_do_write+0xe8>)
 80054c0:	f240 628d 	movw	r2, #1677	; 0x68d
 80054c4:	490c      	ldr	r1, [pc, #48]	; (80054f8 <lwip_netconn_do_write+0xf4>)
 80054c6:	480b      	ldr	r0, [pc, #44]	; (80054f4 <lwip_netconn_do_write+0xf0>)
 80054c8:	f008 f897 	bl	800d5fa <iprintf>
 80054cc:	bd38      	pop	{r3, r4, r5, pc}
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 80054ce:	6a1b      	ldr	r3, [r3, #32]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d0cc      	beq.n	800546e <lwip_netconn_do_write+0x6a>
 80054d4:	e7c4      	b.n	8005460 <lwip_netconn_do_write+0x5c>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 80054d6:	4b05      	ldr	r3, [pc, #20]	; (80054ec <lwip_netconn_do_write+0xe8>)
 80054d8:	f240 6284 	movw	r2, #1668	; 0x684
 80054dc:	4908      	ldr	r1, [pc, #32]	; (8005500 <lwip_netconn_do_write+0xfc>)
 80054de:	4805      	ldr	r0, [pc, #20]	; (80054f4 <lwip_netconn_do_write+0xf0>)
 80054e0:	f008 f88b 	bl	800d5fa <iprintf>
 80054e4:	e7c6      	b.n	8005474 <lwip_netconn_do_write+0x70>
        msg->err = ERR_CONN;
 80054e6:	22f5      	movs	r2, #245	; 0xf5
 80054e8:	7102      	strb	r2, [r0, #4]
 80054ea:	e794      	b.n	8005416 <lwip_netconn_do_write+0x12>
 80054ec:	0800e314 	.word	0x0800e314
 80054f0:	0800e0d8 	.word	0x0800e0d8
 80054f4:	0800de34 	.word	0x0800de34
 80054f8:	0800e0f4 	.word	0x0800e0f4
 80054fc:	20004270 	.word	0x20004270
 8005500:	0800e114 	.word	0x0800e114

08005504 <lwip_netconn_do_getaddr>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_getaddr(void *m)
{
 8005504:	b510      	push	{r4, lr}
 8005506:	4604      	mov	r4, r0
  struct api_msg *msg = (struct api_msg*)m;

  if (msg->conn->pcb.ip != NULL) {
 8005508:	6803      	ldr	r3, [r0, #0]
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d04e      	beq.n	80055ae <lwip_netconn_do_getaddr+0xaa>
    if (msg->msg.ad.local) {
 8005510:	7c02      	ldrb	r2, [r0, #16]
 8005512:	b19a      	cbz	r2, 800553c <lwip_netconn_do_getaddr+0x38>
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 8005514:	6882      	ldr	r2, [r0, #8]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	6013      	str	r3, [r2, #0]
    } else {
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
        msg->conn->pcb.ip->remote_ip);
    }

    msg->err = ERR_OK;
 800551a:	2300      	movs	r3, #0
 800551c:	7123      	strb	r3, [r4, #4]
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800551e:	6822      	ldr	r2, [r4, #0]
 8005520:	7813      	ldrb	r3, [r2, #0]
 8005522:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005526:	2b10      	cmp	r3, #16
 8005528:	d018      	beq.n	800555c <lwip_netconn_do_getaddr+0x58>
 800552a:	2b20      	cmp	r3, #32
 800552c:	d128      	bne.n	8005580 <lwip_netconn_do_getaddr+0x7c>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      if (msg->msg.ad.local) {
 800552e:	7c23      	ldrb	r3, [r4, #16]
 8005530:	b143      	cbz	r3, 8005544 <lwip_netconn_do_getaddr+0x40>
        API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->local_port;
 8005532:	68e3      	ldr	r3, [r4, #12]
 8005534:	6852      	ldr	r2, [r2, #4]
 8005536:	8a52      	ldrh	r2, [r2, #18]
 8005538:	801a      	strh	r2, [r3, #0]
 800553a:	e028      	b.n	800558e <lwip_netconn_do_getaddr+0x8a>
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 800553c:	6882      	ldr	r2, [r0, #8]
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	6013      	str	r3, [r2, #0]
 8005542:	e7ea      	b.n	800551a <lwip_netconn_do_getaddr+0x16>
      } else {
        if ((msg->conn->pcb.udp->flags & UDP_FLAGS_CONNECTED) == 0) {
 8005544:	6853      	ldr	r3, [r2, #4]
 8005546:	7c1a      	ldrb	r2, [r3, #16]
 8005548:	f012 0f04 	tst.w	r2, #4
 800554c:	d102      	bne.n	8005554 <lwip_netconn_do_getaddr+0x50>
          msg->err = ERR_CONN;
 800554e:	23f5      	movs	r3, #245	; 0xf5
 8005550:	7123      	strb	r3, [r4, #4]
 8005552:	e01c      	b.n	800558e <lwip_netconn_do_getaddr+0x8a>
        } else {
          API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
 8005554:	68e2      	ldr	r2, [r4, #12]
 8005556:	8a9b      	ldrh	r3, [r3, #20]
 8005558:	8013      	strh	r3, [r2, #0]
 800555a:	e018      	b.n	800558e <lwip_netconn_do_getaddr+0x8a>
      }
      break;
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      if ((msg->msg.ad.local == 0) &&
 800555c:	7c23      	ldrb	r3, [r4, #16]
 800555e:	b91b      	cbnz	r3, 8005568 <lwip_netconn_do_getaddr+0x64>
          ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
 8005560:	6851      	ldr	r1, [r2, #4]
 8005562:	7d09      	ldrb	r1, [r1, #20]
      if ((msg->msg.ad.local == 0) &&
 8005564:	2901      	cmp	r1, #1
 8005566:	d905      	bls.n	8005574 <lwip_netconn_do_getaddr+0x70>
        /* pcb is not connected and remote name is requested */
        msg->err = ERR_CONN;
      } else {
        API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
 8005568:	68e1      	ldr	r1, [r4, #12]
 800556a:	b133      	cbz	r3, 800557a <lwip_netconn_do_getaddr+0x76>
 800556c:	6853      	ldr	r3, [r2, #4]
 800556e:	8adb      	ldrh	r3, [r3, #22]
 8005570:	800b      	strh	r3, [r1, #0]
 8005572:	e00c      	b.n	800558e <lwip_netconn_do_getaddr+0x8a>
        msg->err = ERR_CONN;
 8005574:	23f5      	movs	r3, #245	; 0xf5
 8005576:	7123      	strb	r3, [r4, #4]
 8005578:	e009      	b.n	800558e <lwip_netconn_do_getaddr+0x8a>
        API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
 800557a:	6853      	ldr	r3, [r2, #4]
 800557c:	8b1b      	ldrh	r3, [r3, #24]
 800557e:	e7f7      	b.n	8005570 <lwip_netconn_do_getaddr+0x6c>
      }
      break;
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("invalid netconn_type", 0);
 8005580:	4b0c      	ldr	r3, [pc, #48]	; (80055b4 <lwip_netconn_do_getaddr+0xb0>)
 8005582:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8005586:	490c      	ldr	r1, [pc, #48]	; (80055b8 <lwip_netconn_do_getaddr+0xb4>)
 8005588:	480c      	ldr	r0, [pc, #48]	; (80055bc <lwip_netconn_do_getaddr+0xb8>)
 800558a:	f008 f836 	bl	800d5fa <iprintf>
      break;
    }
  } else {
    msg->err = ERR_CONN;
  }
  TCPIP_APIMSG_ACK(msg);
 800558e:	6823      	ldr	r3, [r4, #0]
 8005590:	b163      	cbz	r3, 80055ac <lwip_netconn_do_getaddr+0xa8>
 8005592:	f007 f9bf 	bl	800c914 <sys_arch_protect>
 8005596:	6823      	ldr	r3, [r4, #0]
 8005598:	f993 2008 	ldrsb.w	r2, [r3, #8]
 800559c:	f112 0f0c 	cmn.w	r2, #12
 80055a0:	db02      	blt.n	80055a8 <lwip_netconn_do_getaddr+0xa4>
 80055a2:	f994 2004 	ldrsb.w	r2, [r4, #4]
 80055a6:	721a      	strb	r2, [r3, #8]
 80055a8:	f007 f9c0 	bl	800c92c <sys_arch_unprotect>
 80055ac:	bd10      	pop	{r4, pc}
    msg->err = ERR_CONN;
 80055ae:	23f5      	movs	r3, #245	; 0xf5
 80055b0:	7103      	strb	r3, [r0, #4]
 80055b2:	e7ec      	b.n	800558e <lwip_netconn_do_getaddr+0x8a>
 80055b4:	0800e314 	.word	0x0800e314
 80055b8:	0800e0fc 	.word	0x0800e0fc
 80055bc:	0800de34 	.word	0x0800de34

080055c0 <err_to_errno>:
};

int
err_to_errno(err_t err)
{
  if ((err > 0) || (-err >= (err_t)LWIP_ARRAYSIZE(err_to_errno_table))) {
 80055c0:	2800      	cmp	r0, #0
 80055c2:	dd01      	ble.n	80055c8 <err_to_errno+0x8>
    return EIO;
 80055c4:	2005      	movs	r0, #5
 80055c6:	4770      	bx	lr
  if ((err > 0) || (-err >= (err_t)LWIP_ARRAYSIZE(err_to_errno_table))) {
 80055c8:	4240      	negs	r0, r0
 80055ca:	2810      	cmp	r0, #16
 80055cc:	dd01      	ble.n	80055d2 <err_to_errno+0x12>
    return EIO;
 80055ce:	2005      	movs	r0, #5
  }
  return err_to_errno_table[-err];
}
 80055d0:	4770      	bx	lr
  return err_to_errno_table[-err];
 80055d2:	4b02      	ldr	r3, [pc, #8]	; (80055dc <err_to_errno+0x1c>)
 80055d4:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80055d8:	4770      	bx	lr
 80055da:	bf00      	nop
 80055dc:	0800e3ac 	.word	0x0800e3ac

080055e0 <netbuf_delete>:
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
  if (buf != NULL) {
 80055e0:	b168      	cbz	r0, 80055fe <netbuf_delete+0x1e>
{
 80055e2:	b510      	push	{r4, lr}
 80055e4:	4604      	mov	r4, r0
    if (buf->p != NULL) {
 80055e6:	6800      	ldr	r0, [r0, #0]
 80055e8:	b120      	cbz	r0, 80055f4 <netbuf_delete+0x14>
      pbuf_free(buf->p);
 80055ea:	f002 fd6f 	bl	80080cc <pbuf_free>
      buf->p = buf->ptr = NULL;
 80055ee:	2300      	movs	r3, #0
 80055f0:	6063      	str	r3, [r4, #4]
 80055f2:	6023      	str	r3, [r4, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 80055f4:	4621      	mov	r1, r4
 80055f6:	2006      	movs	r0, #6
 80055f8:	f002 fb92 	bl	8007d20 <memp_free>
 80055fc:	bd10      	pop	{r4, pc}
 80055fe:	4770      	bx	lr

08005600 <netbuf_free>:
 *
 * @param buf pointer to the netbuf which contains the packet buffer to free
 */
void
netbuf_free(struct netbuf *buf)
{
 8005600:	b510      	push	{r4, lr}
  LWIP_ERROR("netbuf_free: invalid buf", (buf != NULL), return;);
 8005602:	b140      	cbz	r0, 8005616 <netbuf_free+0x16>
 8005604:	4604      	mov	r4, r0
  if (buf->p != NULL) {
 8005606:	6800      	ldr	r0, [r0, #0]
 8005608:	b108      	cbz	r0, 800560e <netbuf_free+0xe>
    pbuf_free(buf->p);
 800560a:	f002 fd5f 	bl	80080cc <pbuf_free>
  }
  buf->p = buf->ptr = NULL;
 800560e:	2300      	movs	r3, #0
 8005610:	6063      	str	r3, [r4, #4]
 8005612:	6023      	str	r3, [r4, #0]
 8005614:	bd10      	pop	{r4, pc}
  LWIP_ERROR("netbuf_free: invalid buf", (buf != NULL), return;);
 8005616:	4b03      	ldr	r3, [pc, #12]	; (8005624 <netbuf_free+0x24>)
 8005618:	2281      	movs	r2, #129	; 0x81
 800561a:	4903      	ldr	r1, [pc, #12]	; (8005628 <netbuf_free+0x28>)
 800561c:	4803      	ldr	r0, [pc, #12]	; (800562c <netbuf_free+0x2c>)
 800561e:	f007 ffec 	bl	800d5fa <iprintf>
 8005622:	bd10      	pop	{r4, pc}
 8005624:	0800e3f0 	.word	0x0800e3f0
 8005628:	0800e464 	.word	0x0800e464
 800562c:	0800de34 	.word	0x0800de34

08005630 <netbuf_ref>:
 * @return ERR_OK if data is referenced
 *         ERR_MEM if data couldn't be referenced due to lack of memory
 */
err_t
netbuf_ref(struct netbuf *buf, const void *dataptr, u16_t size)
{
 8005630:	b570      	push	{r4, r5, r6, lr}
  LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
 8005632:	b1a8      	cbz	r0, 8005660 <netbuf_ref+0x30>
 8005634:	460e      	mov	r6, r1
 8005636:	4615      	mov	r5, r2
 8005638:	4604      	mov	r4, r0
  if (buf->p != NULL) {
 800563a:	6800      	ldr	r0, [r0, #0]
 800563c:	b108      	cbz	r0, 8005642 <netbuf_ref+0x12>
    pbuf_free(buf->p);
 800563e:	f002 fd45 	bl	80080cc <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
 8005642:	2202      	movs	r2, #2
 8005644:	2100      	movs	r1, #0
 8005646:	4608      	mov	r0, r1
 8005648:	f002 fdac 	bl	80081a4 <pbuf_alloc>
 800564c:	6020      	str	r0, [r4, #0]
  if (buf->p == NULL) {
 800564e:	b180      	cbz	r0, 8005672 <netbuf_ref+0x42>
    buf->ptr = NULL;
    return ERR_MEM;
  }
  ((struct pbuf_rom*)buf->p)->payload = dataptr;
 8005650:	6046      	str	r6, [r0, #4]
  buf->p->len = buf->p->tot_len = size;
 8005652:	6823      	ldr	r3, [r4, #0]
 8005654:	811d      	strh	r5, [r3, #8]
 8005656:	815d      	strh	r5, [r3, #10]
  buf->ptr = buf->p;
 8005658:	6823      	ldr	r3, [r4, #0]
 800565a:	6063      	str	r3, [r4, #4]
  return ERR_OK;
 800565c:	2000      	movs	r0, #0
}
 800565e:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
 8005660:	4b06      	ldr	r3, [pc, #24]	; (800567c <netbuf_ref+0x4c>)
 8005662:	2295      	movs	r2, #149	; 0x95
 8005664:	4906      	ldr	r1, [pc, #24]	; (8005680 <netbuf_ref+0x50>)
 8005666:	4807      	ldr	r0, [pc, #28]	; (8005684 <netbuf_ref+0x54>)
 8005668:	f007 ffc7 	bl	800d5fa <iprintf>
 800566c:	f06f 000f 	mvn.w	r0, #15
 8005670:	bd70      	pop	{r4, r5, r6, pc}
    buf->ptr = NULL;
 8005672:	2300      	movs	r3, #0
 8005674:	6063      	str	r3, [r4, #4]
    return ERR_MEM;
 8005676:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800567a:	bd70      	pop	{r4, r5, r6, pc}
 800567c:	0800e3f0 	.word	0x0800e3f0
 8005680:	0800e480 	.word	0x0800e480
 8005684:	0800de34 	.word	0x0800de34

08005688 <get_socket>:
{
  struct lwip_sock *sock;

  s -= LWIP_SOCKET_OFFSET;

  if ((s < 0) || (s >= NUM_SOCKETS)) {
 8005688:	2803      	cmp	r0, #3
 800568a:	d80c      	bhi.n	80056a6 <get_socket+0x1e>
{
 800568c:	b410      	push	{r4}
    LWIP_DEBUGF(SOCKETS_DEBUG, ("get_socket(%d): invalid\n", s + LWIP_SOCKET_OFFSET));
    set_errno(EBADF);
    return NULL;
  }

  sock = &sockets[s];
 800568e:	4c0b      	ldr	r4, [pc, #44]	; (80056bc <get_socket+0x34>)
 8005690:	0083      	lsls	r3, r0, #2
 8005692:	1819      	adds	r1, r3, r0
 8005694:	008a      	lsls	r2, r1, #2
 8005696:	4611      	mov	r1, r2
 8005698:	4422      	add	r2, r4

  if (!sock->conn) {
 800569a:	5863      	ldr	r3, [r4, r1]
 800569c:	b14b      	cbz	r3, 80056b2 <get_socket+0x2a>
    set_errno(EBADF);
    return NULL;
  }

  return sock;
}
 800569e:	4610      	mov	r0, r2
 80056a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80056a4:	4770      	bx	lr
    set_errno(EBADF);
 80056a6:	2209      	movs	r2, #9
 80056a8:	4b05      	ldr	r3, [pc, #20]	; (80056c0 <get_socket+0x38>)
 80056aa:	601a      	str	r2, [r3, #0]
    return NULL;
 80056ac:	2200      	movs	r2, #0
}
 80056ae:	4610      	mov	r0, r2
 80056b0:	4770      	bx	lr
    set_errno(EBADF);
 80056b2:	2209      	movs	r2, #9
 80056b4:	4b02      	ldr	r3, [pc, #8]	; (80056c0 <get_socket+0x38>)
 80056b6:	601a      	str	r2, [r3, #0]
    return NULL;
 80056b8:	2200      	movs	r2, #0
 80056ba:	e7f0      	b.n	800569e <get_socket+0x16>
 80056bc:	20003de8 	.word	0x20003de8
 80056c0:	200079a0 	.word	0x200079a0

080056c4 <alloc_socket>:
 *                 0 if socket has been created by socket()
 * @return the index of the new socket; -1 on error
 */
static int
alloc_socket(struct netconn *newconn, int accepted)
{
 80056c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056c6:	4606      	mov	r6, r0
 80056c8:	460d      	mov	r5, r1
  int i;
  SYS_ARCH_DECL_PROTECT(lev);

  /* allocate a new socket identifier */
  for (i = 0; i < NUM_SOCKETS; ++i) {
 80056ca:	2400      	movs	r4, #0
 80056cc:	e005      	b.n	80056da <alloc_socket+0x16>
      sockets[i].lastdata   = NULL;
      sockets[i].lastoffset = 0;
      sockets[i].rcvevent   = 0;
      /* TCP sendbuf is empty, but the socket is not yet writable until connected
       * (unless it has been created by accept()). */
      sockets[i].sendevent  = (NETCONNTYPE_GROUP(newconn->type) == NETCONN_TCP ? (accepted != 0) : 1);
 80056ce:	b335      	cbz	r5, 800571e <alloc_socket+0x5a>
 80056d0:	2501      	movs	r5, #1
 80056d2:	e024      	b.n	800571e <alloc_socket+0x5a>
      sockets[i].errevent   = 0;
      sockets[i].err        = 0;
      return i + LWIP_SOCKET_OFFSET;
    }
    SYS_ARCH_UNPROTECT(lev);
 80056d4:	f007 f92a 	bl	800c92c <sys_arch_unprotect>
  for (i = 0; i < NUM_SOCKETS; ++i) {
 80056d8:	3401      	adds	r4, #1
 80056da:	2c03      	cmp	r4, #3
 80056dc:	dc29      	bgt.n	8005732 <alloc_socket+0x6e>
    SYS_ARCH_PROTECT(lev);
 80056de:	f007 f919 	bl	800c914 <sys_arch_protect>
    if (!sockets[i].conn && (sockets[i].select_waiting == 0)) {
 80056e2:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 80056e6:	0093      	lsls	r3, r2, #2
 80056e8:	4a14      	ldr	r2, [pc, #80]	; (800573c <alloc_socket+0x78>)
 80056ea:	58d3      	ldr	r3, [r2, r3]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d1f1      	bne.n	80056d4 <alloc_socket+0x10>
 80056f0:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80056f4:	009a      	lsls	r2, r3, #2
 80056f6:	4b11      	ldr	r3, [pc, #68]	; (800573c <alloc_socket+0x78>)
 80056f8:	4413      	add	r3, r2
 80056fa:	7c5b      	ldrb	r3, [r3, #17]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d1e9      	bne.n	80056d4 <alloc_socket+0x10>
      sockets[i].conn       = newconn;
 8005700:	490e      	ldr	r1, [pc, #56]	; (800573c <alloc_socket+0x78>)
 8005702:	188f      	adds	r7, r1, r2
 8005704:	508e      	str	r6, [r1, r2]
      SYS_ARCH_UNPROTECT(lev);
 8005706:	f007 f911 	bl	800c92c <sys_arch_unprotect>
      sockets[i].lastdata   = NULL;
 800570a:	2300      	movs	r3, #0
 800570c:	607b      	str	r3, [r7, #4]
      sockets[i].lastoffset = 0;
 800570e:	813b      	strh	r3, [r7, #8]
      sockets[i].rcvevent   = 0;
 8005710:	817b      	strh	r3, [r7, #10]
      sockets[i].sendevent  = (NETCONNTYPE_GROUP(newconn->type) == NETCONN_TCP ? (accepted != 0) : 1);
 8005712:	7833      	ldrb	r3, [r6, #0]
 8005714:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005718:	2b10      	cmp	r3, #16
 800571a:	d0d8      	beq.n	80056ce <alloc_socket+0xa>
 800571c:	2501      	movs	r5, #1
 800571e:	00a3      	lsls	r3, r4, #2
 8005720:	4423      	add	r3, r4
 8005722:	009a      	lsls	r2, r3, #2
 8005724:	4b05      	ldr	r3, [pc, #20]	; (800573c <alloc_socket+0x78>)
 8005726:	4413      	add	r3, r2
 8005728:	819d      	strh	r5, [r3, #12]
      sockets[i].errevent   = 0;
 800572a:	2200      	movs	r2, #0
 800572c:	81da      	strh	r2, [r3, #14]
      sockets[i].err        = 0;
 800572e:	741a      	strb	r2, [r3, #16]
      return i + LWIP_SOCKET_OFFSET;
 8005730:	e001      	b.n	8005736 <alloc_socket+0x72>
  }
  return -1;
 8005732:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
 8005736:	4620      	mov	r0, r4
 8005738:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800573a:	bf00      	nop
 800573c:	20003de8 	.word	0x20003de8

08005740 <event_callback>:
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_UNUSED_ARG(len);

  /* Get socket */
  if (conn) {
 8005740:	2800      	cmp	r0, #0
 8005742:	f000 80a5 	beq.w	8005890 <event_callback+0x150>
{
 8005746:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800574a:	4605      	mov	r5, r0
 800574c:	460c      	mov	r4, r1
    s = conn->socket;
 800574e:	f8d0 8018 	ldr.w	r8, [r0, #24]
    if (s < 0) {
 8005752:	f1b8 0f00 	cmp.w	r8, #0
 8005756:	db10      	blt.n	800577a <event_callback+0x3a>
      }
      s = conn->socket;
      SYS_ARCH_UNPROTECT(lev);
    }

    sock = get_socket(s);
 8005758:	4640      	mov	r0, r8
 800575a:	f7ff ff95 	bl	8005688 <get_socket>
    if (!sock) {
 800575e:	4607      	mov	r7, r0
 8005760:	2800      	cmp	r0, #0
 8005762:	f000 8093 	beq.w	800588c <event_callback+0x14c>
    }
  } else {
    return;
  }

  SYS_ARCH_PROTECT(lev);
 8005766:	f007 f8d5 	bl	800c914 <sys_arch_protect>
 800576a:	4605      	mov	r5, r0
  /* Set event as required */
  switch (evt) {
 800576c:	2c04      	cmp	r4, #4
 800576e:	d82d      	bhi.n	80057cc <event_callback+0x8c>
 8005770:	e8df f004 	tbb	[pc, r4]
 8005774:	26231e15 	.word	0x26231e15
 8005778:	29          	.byte	0x29
 8005779:	00          	.byte	0x00
      SYS_ARCH_PROTECT(lev);
 800577a:	f007 f8cb 	bl	800c914 <sys_arch_protect>
      if (conn->socket < 0) {
 800577e:	f8d5 8018 	ldr.w	r8, [r5, #24]
 8005782:	f1b8 0f00 	cmp.w	r8, #0
 8005786:	db02      	blt.n	800578e <event_callback+0x4e>
      SYS_ARCH_UNPROTECT(lev);
 8005788:	f007 f8d0 	bl	800c92c <sys_arch_unprotect>
 800578c:	e7e4      	b.n	8005758 <event_callback+0x18>
        if (evt == NETCONN_EVT_RCVPLUS) {
 800578e:	b914      	cbnz	r4, 8005796 <event_callback+0x56>
          conn->socket--;
 8005790:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 8005794:	61ab      	str	r3, [r5, #24]
        SYS_ARCH_UNPROTECT(lev);
 8005796:	f007 f8c9 	bl	800c92c <sys_arch_unprotect>
        return;
 800579a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    case NETCONN_EVT_RCVPLUS:
      sock->rcvevent++;
 800579e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80057a2:	3301      	adds	r3, #1
 80057a4:	817b      	strh	r3, [r7, #10]
    default:
      LWIP_ASSERT("unknown event", 0);
      break;
  }

  if (sock->select_waiting == 0) {
 80057a6:	7c7b      	ldrb	r3, [r7, #17]
 80057a8:	b1c3      	cbz	r3, 80057dc <event_callback+0x9c>
     ONLY IF a select was actually waiting. We go through the list the number
     of waiting select calls + 1. This list is expected to be small. */

  /* At this point, SYS_ARCH is still protected! */
again:
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 80057aa:	4b3a      	ldr	r3, [pc, #232]	; (8005894 <event_callback+0x154>)
 80057ac:	681c      	ldr	r4, [r3, #0]
 80057ae:	e027      	b.n	8005800 <event_callback+0xc0>
      sock->rcvevent--;
 80057b0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80057b4:	3b01      	subs	r3, #1
 80057b6:	817b      	strh	r3, [r7, #10]
      break;
 80057b8:	e7f5      	b.n	80057a6 <event_callback+0x66>
      sock->sendevent = 1;
 80057ba:	2301      	movs	r3, #1
 80057bc:	81bb      	strh	r3, [r7, #12]
      break;
 80057be:	e7f2      	b.n	80057a6 <event_callback+0x66>
      sock->sendevent = 0;
 80057c0:	2300      	movs	r3, #0
 80057c2:	81bb      	strh	r3, [r7, #12]
      break;
 80057c4:	e7ef      	b.n	80057a6 <event_callback+0x66>
      sock->errevent = 1;
 80057c6:	2301      	movs	r3, #1
 80057c8:	81fb      	strh	r3, [r7, #14]
      break;
 80057ca:	e7ec      	b.n	80057a6 <event_callback+0x66>
      LWIP_ASSERT("unknown event", 0);
 80057cc:	4b32      	ldr	r3, [pc, #200]	; (8005898 <event_callback+0x158>)
 80057ce:	f240 625d 	movw	r2, #1629	; 0x65d
 80057d2:	4932      	ldr	r1, [pc, #200]	; (800589c <event_callback+0x15c>)
 80057d4:	4832      	ldr	r0, [pc, #200]	; (80058a0 <event_callback+0x160>)
 80057d6:	f007 ff10 	bl	800d5fa <iprintf>
      break;
 80057da:	e7e4      	b.n	80057a6 <event_callback+0x66>
    SYS_ARCH_UNPROTECT(lev);
 80057dc:	4628      	mov	r0, r5
 80057de:	f007 f8a5 	bl	800c92c <sys_arch_unprotect>
    return;
 80057e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (sock->errevent != 0) {
        if (!do_signal && scb->exceptset && FD_ISSET(s, scb->exceptset)) {
          do_signal = 1;
        }
      }
      if (do_signal) {
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d146      	bne.n	8005878 <event_callback+0x138>
           lead to the select thread taking itself off the list, invalidating the semaphore. */
        sys_sem_signal(SELECT_SEM_PTR(scb->sem));
      }
    }
    /* unlock interrupts with each step */
    SYS_ARCH_UNPROTECT(lev);
 80057ea:	4628      	mov	r0, r5
 80057ec:	f007 f89e 	bl	800c92c <sys_arch_unprotect>
    /* this makes sure interrupt protection time is short */
    SYS_ARCH_PROTECT(lev);
 80057f0:	f007 f890 	bl	800c914 <sys_arch_protect>
 80057f4:	4605      	mov	r5, r0
    if (last_select_cb_ctr != select_cb_ctr) {
 80057f6:	4b2b      	ldr	r3, [pc, #172]	; (80058a4 <event_callback+0x164>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	429e      	cmp	r6, r3
 80057fc:	d1d5      	bne.n	80057aa <event_callback+0x6a>
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 80057fe:	6824      	ldr	r4, [r4, #0]
 8005800:	2c00      	cmp	r4, #0
 8005802:	d040      	beq.n	8005886 <event_callback+0x146>
    last_select_cb_ctr = select_cb_ctr;
 8005804:	4b27      	ldr	r3, [pc, #156]	; (80058a4 <event_callback+0x164>)
 8005806:	681e      	ldr	r6, [r3, #0]
    if (scb->sem_signalled == 0) {
 8005808:	6963      	ldr	r3, [r4, #20]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d1ed      	bne.n	80057ea <event_callback+0xaa>
      if (sock->rcvevent > 0) {
 800580e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8005812:	2a00      	cmp	r2, #0
 8005814:	dd0c      	ble.n	8005830 <event_callback+0xf0>
        if (scb->readset && FD_ISSET(s, scb->readset)) {
 8005816:	68a2      	ldr	r2, [r4, #8]
 8005818:	b152      	cbz	r2, 8005830 <event_callback+0xf0>
 800581a:	ea4f 1158 	mov.w	r1, r8, lsr #5
 800581e:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8005822:	f008 001f 	and.w	r0, r8, #31
 8005826:	2201      	movs	r2, #1
 8005828:	4082      	lsls	r2, r0
 800582a:	4211      	tst	r1, r2
 800582c:	d000      	beq.n	8005830 <event_callback+0xf0>
          do_signal = 1;
 800582e:	2301      	movs	r3, #1
      if (sock->sendevent != 0) {
 8005830:	89ba      	ldrh	r2, [r7, #12]
 8005832:	b16a      	cbz	r2, 8005850 <event_callback+0x110>
        if (!do_signal && scb->writeset && FD_ISSET(s, scb->writeset)) {
 8005834:	b963      	cbnz	r3, 8005850 <event_callback+0x110>
 8005836:	68e2      	ldr	r2, [r4, #12]
 8005838:	b152      	cbz	r2, 8005850 <event_callback+0x110>
 800583a:	ea4f 1158 	mov.w	r1, r8, lsr #5
 800583e:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8005842:	f008 001f 	and.w	r0, r8, #31
 8005846:	2201      	movs	r2, #1
 8005848:	4082      	lsls	r2, r0
 800584a:	4211      	tst	r1, r2
 800584c:	d000      	beq.n	8005850 <event_callback+0x110>
          do_signal = 1;
 800584e:	2301      	movs	r3, #1
      if (sock->errevent != 0) {
 8005850:	89fa      	ldrh	r2, [r7, #14]
 8005852:	2a00      	cmp	r2, #0
 8005854:	d0c7      	beq.n	80057e6 <event_callback+0xa6>
        if (!do_signal && scb->exceptset && FD_ISSET(s, scb->exceptset)) {
 8005856:	2b00      	cmp	r3, #0
 8005858:	d1c5      	bne.n	80057e6 <event_callback+0xa6>
 800585a:	6922      	ldr	r2, [r4, #16]
 800585c:	2a00      	cmp	r2, #0
 800585e:	d0c2      	beq.n	80057e6 <event_callback+0xa6>
 8005860:	ea4f 1158 	mov.w	r1, r8, lsr #5
 8005864:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8005868:	f008 001f 	and.w	r0, r8, #31
 800586c:	2201      	movs	r2, #1
 800586e:	4082      	lsls	r2, r0
 8005870:	4211      	tst	r1, r2
 8005872:	d0b8      	beq.n	80057e6 <event_callback+0xa6>
          do_signal = 1;
 8005874:	2301      	movs	r3, #1
 8005876:	e7b6      	b.n	80057e6 <event_callback+0xa6>
        scb->sem_signalled = 1;
 8005878:	2301      	movs	r3, #1
 800587a:	6163      	str	r3, [r4, #20]
        sys_sem_signal(SELECT_SEM_PTR(scb->sem));
 800587c:	f104 0018 	add.w	r0, r4, #24
 8005880:	f006 fff6 	bl	800c870 <sys_sem_signal>
 8005884:	e7b1      	b.n	80057ea <event_callback+0xaa>
      /* someone has changed select_cb_list, restart at the beginning */
      goto again;
    }
  }
  SYS_ARCH_UNPROTECT(lev);
 8005886:	4628      	mov	r0, r5
 8005888:	f007 f850 	bl	800c92c <sys_arch_unprotect>
 800588c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005890:	4770      	bx	lr
 8005892:	bf00      	nop
 8005894:	20003de4 	.word	0x20003de4
 8005898:	0800e544 	.word	0x0800e544
 800589c:	0800e498 	.word	0x0800e498
 80058a0:	0800de34 	.word	0x0800de34
 80058a4:	20003de0 	.word	0x20003de0

080058a8 <free_socket>:
{
 80058a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058aa:	4604      	mov	r4, r0
 80058ac:	460f      	mov	r7, r1
  lastdata         = sock->lastdata;
 80058ae:	6846      	ldr	r6, [r0, #4]
  sock->lastdata   = NULL;
 80058b0:	2500      	movs	r5, #0
 80058b2:	6045      	str	r5, [r0, #4]
  sock->lastoffset = 0;
 80058b4:	8105      	strh	r5, [r0, #8]
  sock->err        = 0;
 80058b6:	7405      	strb	r5, [r0, #16]
  SYS_ARCH_SET(sock->conn, NULL);
 80058b8:	f007 f82c 	bl	800c914 <sys_arch_protect>
 80058bc:	6025      	str	r5, [r4, #0]
 80058be:	f007 f835 	bl	800c92c <sys_arch_unprotect>
  if (lastdata != NULL) {
 80058c2:	b11e      	cbz	r6, 80058cc <free_socket+0x24>
    if (is_tcp) {
 80058c4:	b91f      	cbnz	r7, 80058ce <free_socket+0x26>
      netbuf_delete((struct netbuf *)lastdata);
 80058c6:	4630      	mov	r0, r6
 80058c8:	f7ff fe8a 	bl	80055e0 <netbuf_delete>
 80058cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      pbuf_free((struct pbuf *)lastdata);
 80058ce:	4630      	mov	r0, r6
 80058d0:	f002 fbfc 	bl	80080cc <pbuf_free>
 80058d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080058d8 <lwip_accept>:
{
 80058d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80058dc:	b089      	sub	sp, #36	; 0x24
 80058de:	460f      	mov	r7, r1
 80058e0:	4616      	mov	r6, r2
  u16_t port = 0;
 80058e2:	2300      	movs	r3, #0
 80058e4:	f8ad 3016 	strh.w	r3, [sp, #22]
  sock = get_socket(s);
 80058e8:	f7ff fece 	bl	8005688 <get_socket>
  if (!sock) {
 80058ec:	2800      	cmp	r0, #0
 80058ee:	f000 80c2 	beq.w	8005a76 <lwip_accept+0x19e>
 80058f2:	4605      	mov	r5, r0
  if (netconn_is_nonblocking(sock->conn) && (sock->rcvevent <= 0)) {
 80058f4:	6800      	ldr	r0, [r0, #0]
 80058f6:	7f03      	ldrb	r3, [r0, #28]
 80058f8:	f013 0f02 	tst.w	r3, #2
 80058fc:	d003      	beq.n	8005906 <lwip_accept+0x2e>
 80058fe:	f9b5 300a 	ldrsh.w	r3, [r5, #10]
 8005902:	2b00      	cmp	r3, #0
 8005904:	dd17      	ble.n	8005936 <lwip_accept+0x5e>
  err = netconn_accept(sock->conn, &newconn);
 8005906:	a907      	add	r1, sp, #28
 8005908:	f7fe fd26 	bl	8004358 <netconn_accept>
  if (err != ERR_OK) {
 800590c:	b338      	cbz	r0, 800595e <lwip_accept+0x86>
    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 800590e:	682b      	ldr	r3, [r5, #0]
 8005910:	781b      	ldrb	r3, [r3, #0]
 8005912:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005916:	2b10      	cmp	r3, #16
 8005918:	d113      	bne.n	8005942 <lwip_accept+0x6a>
    } else if (err == ERR_CLSD) {
 800591a:	f110 0f0f 	cmn.w	r0, #15
 800591e:	d017      	beq.n	8005950 <lwip_accept+0x78>
      sock_set_errno(sock, err_to_errno(err));
 8005920:	f7ff fe4e 	bl	80055c0 <err_to_errno>
 8005924:	7428      	strb	r0, [r5, #16]
 8005926:	2800      	cmp	r0, #0
 8005928:	f000 80a8 	beq.w	8005a7c <lwip_accept+0x1a4>
 800592c:	4b55      	ldr	r3, [pc, #340]	; (8005a84 <lwip_accept+0x1ac>)
 800592e:	6018      	str	r0, [r3, #0]
    return -1;
 8005930:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005934:	e06a      	b.n	8005a0c <lwip_accept+0x134>
    set_errno(EWOULDBLOCK);
 8005936:	220b      	movs	r2, #11
 8005938:	4b52      	ldr	r3, [pc, #328]	; (8005a84 <lwip_accept+0x1ac>)
 800593a:	601a      	str	r2, [r3, #0]
    return -1;
 800593c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005940:	e064      	b.n	8005a0c <lwip_accept+0x134>
      sock_set_errno(sock, EOPNOTSUPP);
 8005942:	235f      	movs	r3, #95	; 0x5f
 8005944:	742b      	strb	r3, [r5, #16]
 8005946:	4a4f      	ldr	r2, [pc, #316]	; (8005a84 <lwip_accept+0x1ac>)
 8005948:	6013      	str	r3, [r2, #0]
    return -1;
 800594a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800594e:	e05d      	b.n	8005a0c <lwip_accept+0x134>
      sock_set_errno(sock, EINVAL);
 8005950:	2316      	movs	r3, #22
 8005952:	742b      	strb	r3, [r5, #16]
 8005954:	4a4b      	ldr	r2, [pc, #300]	; (8005a84 <lwip_accept+0x1ac>)
 8005956:	6013      	str	r3, [r2, #0]
    return -1;
 8005958:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800595c:	e056      	b.n	8005a0c <lwip_accept+0x134>
  LWIP_ASSERT("newconn != NULL", newconn != NULL);
 800595e:	9b07      	ldr	r3, [sp, #28]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d057      	beq.n	8005a14 <lwip_accept+0x13c>
  newsock = alloc_socket(newconn, 1);
 8005964:	2101      	movs	r1, #1
 8005966:	9807      	ldr	r0, [sp, #28]
 8005968:	f7ff feac 	bl	80056c4 <alloc_socket>
 800596c:	4604      	mov	r4, r0
  if (newsock == -1) {
 800596e:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8005972:	d057      	beq.n	8005a24 <lwip_accept+0x14c>
  LWIP_ASSERT("invalid socket index", (newsock >= LWIP_SOCKET_OFFSET) && (newsock < NUM_SOCKETS + LWIP_SOCKET_OFFSET));
 8005974:	2803      	cmp	r0, #3
 8005976:	d85d      	bhi.n	8005a34 <lwip_accept+0x15c>
  LWIP_ASSERT("newconn->callback == event_callback", newconn->callback == event_callback);
 8005978:	9b07      	ldr	r3, [sp, #28]
 800597a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800597c:	4b42      	ldr	r3, [pc, #264]	; (8005a88 <lwip_accept+0x1b0>)
 800597e:	429a      	cmp	r2, r3
 8005980:	d006      	beq.n	8005990 <lwip_accept+0xb8>
 8005982:	4b42      	ldr	r3, [pc, #264]	; (8005a8c <lwip_accept+0x1b4>)
 8005984:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
 8005988:	4941      	ldr	r1, [pc, #260]	; (8005a90 <lwip_accept+0x1b8>)
 800598a:	4842      	ldr	r0, [pc, #264]	; (8005a94 <lwip_accept+0x1bc>)
 800598c:	f007 fe35 	bl	800d5fa <iprintf>
  nsock = &sockets[newsock - LWIP_SOCKET_OFFSET];
 8005990:	00a3      	lsls	r3, r4, #2
 8005992:	4423      	add	r3, r4
 8005994:	009a      	lsls	r2, r3, #2
 8005996:	4b40      	ldr	r3, [pc, #256]	; (8005a98 <lwip_accept+0x1c0>)
 8005998:	eb03 0802 	add.w	r8, r3, r2
  SYS_ARCH_PROTECT(lev);
 800599c:	f006 ffba 	bl	800c914 <sys_arch_protect>
  nsock->rcvevent += (s16_t)(-1 - newconn->socket);
 80059a0:	9a07      	ldr	r2, [sp, #28]
 80059a2:	8b11      	ldrh	r1, [r2, #24]
 80059a4:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 80059a8:	1a5b      	subs	r3, r3, r1
 80059aa:	3b01      	subs	r3, #1
 80059ac:	f8a8 300a 	strh.w	r3, [r8, #10]
  newconn->socket = newsock;
 80059b0:	6194      	str	r4, [r2, #24]
  SYS_ARCH_UNPROTECT(lev);
 80059b2:	f006 ffbb 	bl	800c92c <sys_arch_unprotect>
  if (addr != NULL) {
 80059b6:	b33f      	cbz	r7, 8005a08 <lwip_accept+0x130>
    err = netconn_peer(newconn, &naddr, &port);
 80059b8:	2300      	movs	r3, #0
 80059ba:	f10d 0216 	add.w	r2, sp, #22
 80059be:	a906      	add	r1, sp, #24
 80059c0:	9807      	ldr	r0, [sp, #28]
 80059c2:	f7fe fc4d 	bl	8004260 <netconn_getaddr>
    if (err != ERR_OK) {
 80059c6:	4681      	mov	r9, r0
 80059c8:	2800      	cmp	r0, #0
 80059ca:	d13b      	bne.n	8005a44 <lwip_accept+0x16c>
    LWIP_ASSERT("addr valid but addrlen NULL", addrlen != NULL);
 80059cc:	2e00      	cmp	r6, #0
 80059ce:	d04a      	beq.n	8005a66 <lwip_accept+0x18e>
    IPADDR_PORT_TO_SOCKADDR(&tempaddr, &naddr, port);
 80059d0:	2310      	movs	r3, #16
 80059d2:	f88d 3004 	strb.w	r3, [sp, #4]
 80059d6:	2302      	movs	r3, #2
 80059d8:	f88d 3005 	strb.w	r3, [sp, #5]
 80059dc:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 80059e0:	f000 fb58 	bl	8006094 <lwip_htons>
 80059e4:	f8ad 0006 	strh.w	r0, [sp, #6]
 80059e8:	9b06      	ldr	r3, [sp, #24]
 80059ea:	9302      	str	r3, [sp, #8]
 80059ec:	2300      	movs	r3, #0
 80059ee:	9303      	str	r3, [sp, #12]
 80059f0:	9304      	str	r3, [sp, #16]
    if (*addrlen > tempaddr.sa.sa_len) {
 80059f2:	6832      	ldr	r2, [r6, #0]
 80059f4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80059f8:	429a      	cmp	r2, r3
 80059fa:	d900      	bls.n	80059fe <lwip_accept+0x126>
      *addrlen = tempaddr.sa.sa_len;
 80059fc:	6033      	str	r3, [r6, #0]
    MEMCPY(addr, &tempaddr, *addrlen);
 80059fe:	6832      	ldr	r2, [r6, #0]
 8005a00:	a901      	add	r1, sp, #4
 8005a02:	4638      	mov	r0, r7
 8005a04:	f007 ff65 	bl	800d8d2 <memcpy>
  sock_set_errno(sock, 0);
 8005a08:	2300      	movs	r3, #0
 8005a0a:	742b      	strb	r3, [r5, #16]
}
 8005a0c:	4620      	mov	r0, r4
 8005a0e:	b009      	add	sp, #36	; 0x24
 8005a10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("newconn != NULL", newconn != NULL);
 8005a14:	4b1d      	ldr	r3, [pc, #116]	; (8005a8c <lwip_accept+0x1b4>)
 8005a16:	f240 12f5 	movw	r2, #501	; 0x1f5
 8005a1a:	4920      	ldr	r1, [pc, #128]	; (8005a9c <lwip_accept+0x1c4>)
 8005a1c:	481d      	ldr	r0, [pc, #116]	; (8005a94 <lwip_accept+0x1bc>)
 8005a1e:	f007 fdec 	bl	800d5fa <iprintf>
 8005a22:	e79f      	b.n	8005964 <lwip_accept+0x8c>
    netconn_delete(newconn);
 8005a24:	9807      	ldr	r0, [sp, #28]
 8005a26:	f7fe fc01 	bl	800422c <netconn_delete>
    sock_set_errno(sock, ENFILE);
 8005a2a:	2317      	movs	r3, #23
 8005a2c:	742b      	strb	r3, [r5, #16]
 8005a2e:	4a15      	ldr	r2, [pc, #84]	; (8005a84 <lwip_accept+0x1ac>)
 8005a30:	6013      	str	r3, [r2, #0]
    return -1;
 8005a32:	e7eb      	b.n	8005a0c <lwip_accept+0x134>
  LWIP_ASSERT("invalid socket index", (newsock >= LWIP_SOCKET_OFFSET) && (newsock < NUM_SOCKETS + LWIP_SOCKET_OFFSET));
 8005a34:	4b15      	ldr	r3, [pc, #84]	; (8005a8c <lwip_accept+0x1b4>)
 8005a36:	f240 12fd 	movw	r2, #509	; 0x1fd
 8005a3a:	4919      	ldr	r1, [pc, #100]	; (8005aa0 <lwip_accept+0x1c8>)
 8005a3c:	4815      	ldr	r0, [pc, #84]	; (8005a94 <lwip_accept+0x1bc>)
 8005a3e:	f007 fddc 	bl	800d5fa <iprintf>
 8005a42:	e799      	b.n	8005978 <lwip_accept+0xa0>
      netconn_delete(newconn);
 8005a44:	9807      	ldr	r0, [sp, #28]
 8005a46:	f7fe fbf1 	bl	800422c <netconn_delete>
      free_socket(nsock, 1);
 8005a4a:	2101      	movs	r1, #1
 8005a4c:	4640      	mov	r0, r8
 8005a4e:	f7ff ff2b 	bl	80058a8 <free_socket>
      sock_set_errno(sock, err_to_errno(err));
 8005a52:	4648      	mov	r0, r9
 8005a54:	f7ff fdb4 	bl	80055c0 <err_to_errno>
 8005a58:	7428      	strb	r0, [r5, #16]
 8005a5a:	b108      	cbz	r0, 8005a60 <lwip_accept+0x188>
 8005a5c:	4b09      	ldr	r3, [pc, #36]	; (8005a84 <lwip_accept+0x1ac>)
 8005a5e:	6018      	str	r0, [r3, #0]
      return -1;
 8005a60:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005a64:	e7d2      	b.n	8005a0c <lwip_accept+0x134>
    LWIP_ASSERT("addr valid but addrlen NULL", addrlen != NULL);
 8005a66:	4b09      	ldr	r3, [pc, #36]	; (8005a8c <lwip_accept+0x1b4>)
 8005a68:	f240 2219 	movw	r2, #537	; 0x219
 8005a6c:	490d      	ldr	r1, [pc, #52]	; (8005aa4 <lwip_accept+0x1cc>)
 8005a6e:	4809      	ldr	r0, [pc, #36]	; (8005a94 <lwip_accept+0x1bc>)
 8005a70:	f007 fdc3 	bl	800d5fa <iprintf>
 8005a74:	e7ac      	b.n	80059d0 <lwip_accept+0xf8>
    return -1;
 8005a76:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005a7a:	e7c7      	b.n	8005a0c <lwip_accept+0x134>
    return -1;
 8005a7c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005a80:	e7c4      	b.n	8005a0c <lwip_accept+0x134>
 8005a82:	bf00      	nop
 8005a84:	200079a0 	.word	0x200079a0
 8005a88:	08005741 	.word	0x08005741
 8005a8c:	0800e544 	.word	0x0800e544
 8005a90:	0800e4d0 	.word	0x0800e4d0
 8005a94:	0800de34 	.word	0x0800de34
 8005a98:	20003de8 	.word	0x20003de8
 8005a9c:	0800e4a8 	.word	0x0800e4a8
 8005aa0:	0800e4b8 	.word	0x0800e4b8
 8005aa4:	0800e4f4 	.word	0x0800e4f4

08005aa8 <lwip_bind>:
{
 8005aa8:	b570      	push	{r4, r5, r6, lr}
 8005aaa:	b082      	sub	sp, #8
 8005aac:	460e      	mov	r6, r1
 8005aae:	4615      	mov	r5, r2
  sock = get_socket(s);
 8005ab0:	f7ff fdea 	bl	8005688 <get_socket>
  if (!sock) {
 8005ab4:	2800      	cmp	r0, #0
 8005ab6:	d034      	beq.n	8005b22 <lwip_bind+0x7a>
 8005ab8:	4604      	mov	r4, r0
  LWIP_ERROR("lwip_bind: invalid address", (IS_SOCK_ADDR_LEN_VALID(namelen) &&
 8005aba:	2d10      	cmp	r5, #16
 8005abc:	d012      	beq.n	8005ae4 <lwip_bind+0x3c>
 8005abe:	4b1d      	ldr	r3, [pc, #116]	; (8005b34 <lwip_bind+0x8c>)
 8005ac0:	f240 2242 	movw	r2, #578	; 0x242
 8005ac4:	491c      	ldr	r1, [pc, #112]	; (8005b38 <lwip_bind+0x90>)
 8005ac6:	481d      	ldr	r0, [pc, #116]	; (8005b3c <lwip_bind+0x94>)
 8005ac8:	f007 fd97 	bl	800d5fa <iprintf>
 8005acc:	f06f 000f 	mvn.w	r0, #15
 8005ad0:	f7ff fd76 	bl	80055c0 <err_to_errno>
 8005ad4:	7420      	strb	r0, [r4, #16]
 8005ad6:	b338      	cbz	r0, 8005b28 <lwip_bind+0x80>
 8005ad8:	4b19      	ldr	r3, [pc, #100]	; (8005b40 <lwip_bind+0x98>)
 8005ada:	6018      	str	r0, [r3, #0]
 8005adc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8005ae0:	b002      	add	sp, #8
 8005ae2:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("lwip_bind: invalid address", (IS_SOCK_ADDR_LEN_VALID(namelen) &&
 8005ae4:	7873      	ldrb	r3, [r6, #1]
 8005ae6:	2b02      	cmp	r3, #2
 8005ae8:	d1e9      	bne.n	8005abe <lwip_bind+0x16>
 8005aea:	f016 0f03 	tst.w	r6, #3
 8005aee:	d1e6      	bne.n	8005abe <lwip_bind+0x16>
  SOCKADDR_TO_IPADDR_PORT(name, &local_addr, local_port);
 8005af0:	6873      	ldr	r3, [r6, #4]
 8005af2:	ad02      	add	r5, sp, #8
 8005af4:	f845 3d04 	str.w	r3, [r5, #-4]!
 8005af8:	8870      	ldrh	r0, [r6, #2]
 8005afa:	f000 facb 	bl	8006094 <lwip_htons>
  err = netconn_bind(sock->conn, &local_addr, local_port);
 8005afe:	4602      	mov	r2, r0
 8005b00:	4629      	mov	r1, r5
 8005b02:	6820      	ldr	r0, [r4, #0]
 8005b04:	f7fe fbe4 	bl	80042d0 <netconn_bind>
  if (err != ERR_OK) {
 8005b08:	b910      	cbnz	r0, 8005b10 <lwip_bind+0x68>
  sock_set_errno(sock, 0);
 8005b0a:	2000      	movs	r0, #0
 8005b0c:	7420      	strb	r0, [r4, #16]
  return 0;
 8005b0e:	e7e7      	b.n	8005ae0 <lwip_bind+0x38>
    sock_set_errno(sock, err_to_errno(err));
 8005b10:	f7ff fd56 	bl	80055c0 <err_to_errno>
 8005b14:	7420      	strb	r0, [r4, #16]
 8005b16:	b150      	cbz	r0, 8005b2e <lwip_bind+0x86>
 8005b18:	4b09      	ldr	r3, [pc, #36]	; (8005b40 <lwip_bind+0x98>)
 8005b1a:	6018      	str	r0, [r3, #0]
    return -1;
 8005b1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005b20:	e7de      	b.n	8005ae0 <lwip_bind+0x38>
    return -1;
 8005b22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005b26:	e7db      	b.n	8005ae0 <lwip_bind+0x38>
  LWIP_ERROR("lwip_bind: invalid address", (IS_SOCK_ADDR_LEN_VALID(namelen) &&
 8005b28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005b2c:	e7d8      	b.n	8005ae0 <lwip_bind+0x38>
    return -1;
 8005b2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005b32:	e7d5      	b.n	8005ae0 <lwip_bind+0x38>
 8005b34:	0800e544 	.word	0x0800e544
 8005b38:	0800e510 	.word	0x0800e510
 8005b3c:	0800de34 	.word	0x0800de34
 8005b40:	200079a0 	.word	0x200079a0

08005b44 <lwip_close>:
{
 8005b44:	b538      	push	{r3, r4, r5, lr}
  sock = get_socket(s);
 8005b46:	f7ff fd9f 	bl	8005688 <get_socket>
  if (!sock) {
 8005b4a:	b348      	cbz	r0, 8005ba0 <lwip_close+0x5c>
 8005b4c:	4605      	mov	r5, r0
  if (sock->conn != NULL) {
 8005b4e:	6803      	ldr	r3, [r0, #0]
 8005b50:	b19b      	cbz	r3, 8005b7a <lwip_close+0x36>
    is_tcp = NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP;
 8005b52:	7819      	ldrb	r1, [r3, #0]
 8005b54:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
 8005b58:	2910      	cmp	r1, #16
 8005b5a:	bf14      	ite	ne
 8005b5c:	2400      	movne	r4, #0
 8005b5e:	2401      	moveq	r4, #1
  err = netconn_delete(sock->conn);
 8005b60:	6828      	ldr	r0, [r5, #0]
 8005b62:	f7fe fb63 	bl	800422c <netconn_delete>
  if (err != ERR_OK) {
 8005b66:	b1a8      	cbz	r0, 8005b94 <lwip_close+0x50>
    sock_set_errno(sock, err_to_errno(err));
 8005b68:	f7ff fd2a 	bl	80055c0 <err_to_errno>
 8005b6c:	7428      	strb	r0, [r5, #16]
 8005b6e:	b1d0      	cbz	r0, 8005ba6 <lwip_close+0x62>
 8005b70:	4b0e      	ldr	r3, [pc, #56]	; (8005bac <lwip_close+0x68>)
 8005b72:	6018      	str	r0, [r3, #0]
    return -1;
 8005b74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005b78:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("sock->lastdata == NULL", sock->lastdata == NULL);
 8005b7a:	6843      	ldr	r3, [r0, #4]
 8005b7c:	b143      	cbz	r3, 8005b90 <lwip_close+0x4c>
 8005b7e:	4b0c      	ldr	r3, [pc, #48]	; (8005bb0 <lwip_close+0x6c>)
 8005b80:	f44f 721c 	mov.w	r2, #624	; 0x270
 8005b84:	490b      	ldr	r1, [pc, #44]	; (8005bb4 <lwip_close+0x70>)
 8005b86:	480c      	ldr	r0, [pc, #48]	; (8005bb8 <lwip_close+0x74>)
 8005b88:	f007 fd37 	bl	800d5fa <iprintf>
  int is_tcp = 0;
 8005b8c:	2400      	movs	r4, #0
 8005b8e:	e7e7      	b.n	8005b60 <lwip_close+0x1c>
 8005b90:	2400      	movs	r4, #0
 8005b92:	e7e5      	b.n	8005b60 <lwip_close+0x1c>
  free_socket(sock, is_tcp);
 8005b94:	4621      	mov	r1, r4
 8005b96:	4628      	mov	r0, r5
 8005b98:	f7ff fe86 	bl	80058a8 <free_socket>
  return 0;
 8005b9c:	2000      	movs	r0, #0
 8005b9e:	bd38      	pop	{r3, r4, r5, pc}
    return -1;
 8005ba0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005ba4:	bd38      	pop	{r3, r4, r5, pc}
    return -1;
 8005ba6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8005baa:	bd38      	pop	{r3, r4, r5, pc}
 8005bac:	200079a0 	.word	0x200079a0
 8005bb0:	0800e544 	.word	0x0800e544
 8005bb4:	0800e52c 	.word	0x0800e52c
 8005bb8:	0800de34 	.word	0x0800de34

08005bbc <lwip_listen>:
{
 8005bbc:	b538      	push	{r3, r4, r5, lr}
 8005bbe:	460c      	mov	r4, r1
  sock = get_socket(s);
 8005bc0:	f7ff fd62 	bl	8005688 <get_socket>
  if (!sock) {
 8005bc4:	b320      	cbz	r0, 8005c10 <lwip_listen+0x54>
 8005bc6:	4605      	mov	r5, r0
  backlog = LWIP_MIN(LWIP_MAX(backlog, 0), 0xff);
 8005bc8:	2cfe      	cmp	r4, #254	; 0xfe
 8005bca:	dc15      	bgt.n	8005bf8 <lwip_listen+0x3c>
 8005bcc:	ea24 71e4 	bic.w	r1, r4, r4, asr #31
  err = netconn_listen_with_backlog(sock->conn, (u8_t)backlog);
 8005bd0:	b2c9      	uxtb	r1, r1
 8005bd2:	6828      	ldr	r0, [r5, #0]
 8005bd4:	f7fe fba2 	bl	800431c <netconn_listen_with_backlog>
  if (err != ERR_OK) {
 8005bd8:	b1b8      	cbz	r0, 8005c0a <lwip_listen+0x4e>
    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 8005bda:	682b      	ldr	r3, [r5, #0]
 8005bdc:	781b      	ldrb	r3, [r3, #0]
 8005bde:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005be2:	2b10      	cmp	r3, #16
 8005be4:	d10a      	bne.n	8005bfc <lwip_listen+0x40>
    sock_set_errno(sock, err_to_errno(err));
 8005be6:	f7ff fceb 	bl	80055c0 <err_to_errno>
 8005bea:	7428      	strb	r0, [r5, #16]
 8005bec:	b198      	cbz	r0, 8005c16 <lwip_listen+0x5a>
 8005bee:	4b0b      	ldr	r3, [pc, #44]	; (8005c1c <lwip_listen+0x60>)
 8005bf0:	6018      	str	r0, [r3, #0]
    return -1;
 8005bf2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005bf6:	bd38      	pop	{r3, r4, r5, pc}
  backlog = LWIP_MIN(LWIP_MAX(backlog, 0), 0xff);
 8005bf8:	21ff      	movs	r1, #255	; 0xff
 8005bfa:	e7e9      	b.n	8005bd0 <lwip_listen+0x14>
      sock_set_errno(sock, EOPNOTSUPP);
 8005bfc:	235f      	movs	r3, #95	; 0x5f
 8005bfe:	742b      	strb	r3, [r5, #16]
 8005c00:	4a06      	ldr	r2, [pc, #24]	; (8005c1c <lwip_listen+0x60>)
 8005c02:	6013      	str	r3, [r2, #0]
      return -1;
 8005c04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005c08:	bd38      	pop	{r3, r4, r5, pc}
  sock_set_errno(sock, 0);
 8005c0a:	2000      	movs	r0, #0
 8005c0c:	7428      	strb	r0, [r5, #16]
  return 0;
 8005c0e:	bd38      	pop	{r3, r4, r5, pc}
    return -1;
 8005c10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005c14:	bd38      	pop	{r3, r4, r5, pc}
    return -1;
 8005c16:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8005c1a:	bd38      	pop	{r3, r4, r5, pc}
 8005c1c:	200079a0 	.word	0x200079a0

08005c20 <lwip_sendto>:
{
 8005c20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005c24:	b085      	sub	sp, #20
 8005c26:	4680      	mov	r8, r0
 8005c28:	460f      	mov	r7, r1
 8005c2a:	4614      	mov	r4, r2
 8005c2c:	4699      	mov	r9, r3
 8005c2e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  sock = get_socket(s);
 8005c30:	f7ff fd2a 	bl	8005688 <get_socket>
  if (!sock) {
 8005c34:	2800      	cmp	r0, #0
 8005c36:	d063      	beq.n	8005d00 <lwip_sendto+0xe0>
 8005c38:	4605      	mov	r5, r0
  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 8005c3a:	6803      	ldr	r3, [r0, #0]
 8005c3c:	781b      	ldrb	r3, [r3, #0]
 8005c3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c42:	2b10      	cmp	r3, #16
 8005c44:	d01b      	beq.n	8005c7e <lwip_sendto+0x5e>
  LWIP_ASSERT("lwip_sendto: size must fit in u16_t", size <= 0xffff);
 8005c46:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
 8005c4a:	d21f      	bcs.n	8005c8c <lwip_sendto+0x6c>
  short_size = (u16_t)size;
 8005c4c:	fa1f f884 	uxth.w	r8, r4
  LWIP_ERROR("lwip_sendto: invalid address", (((to == NULL) && (tolen == 0)) ||
 8005c50:	b326      	cbz	r6, 8005c9c <lwip_sendto+0x7c>
 8005c52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005c54:	2b10      	cmp	r3, #16
 8005c56:	d043      	beq.n	8005ce0 <lwip_sendto+0xc0>
 8005c58:	4b2f      	ldr	r3, [pc, #188]	; (8005d18 <lwip_sendto+0xf8>)
 8005c5a:	f44f 6290 	mov.w	r2, #1152	; 0x480
 8005c5e:	492f      	ldr	r1, [pc, #188]	; (8005d1c <lwip_sendto+0xfc>)
 8005c60:	482f      	ldr	r0, [pc, #188]	; (8005d20 <lwip_sendto+0x100>)
 8005c62:	f007 fcca 	bl	800d5fa <iprintf>
 8005c66:	f06f 000f 	mvn.w	r0, #15
 8005c6a:	f7ff fca9 	bl	80055c0 <err_to_errno>
 8005c6e:	7428      	strb	r0, [r5, #16]
 8005c70:	2800      	cmp	r0, #0
 8005c72:	d048      	beq.n	8005d06 <lwip_sendto+0xe6>
 8005c74:	4b2b      	ldr	r3, [pc, #172]	; (8005d24 <lwip_sendto+0x104>)
 8005c76:	6018      	str	r0, [r3, #0]
 8005c78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005c7c:	e045      	b.n	8005d0a <lwip_sendto+0xea>
    return lwip_send(s, data, size, flags);
 8005c7e:	464b      	mov	r3, r9
 8005c80:	4622      	mov	r2, r4
 8005c82:	4639      	mov	r1, r7
 8005c84:	4640      	mov	r0, r8
 8005c86:	f000 f851 	bl	8005d2c <lwip_send>
 8005c8a:	e03e      	b.n	8005d0a <lwip_sendto+0xea>
  LWIP_ASSERT("lwip_sendto: size must fit in u16_t", size <= 0xffff);
 8005c8c:	4b22      	ldr	r3, [pc, #136]	; (8005d18 <lwip_sendto+0xf8>)
 8005c8e:	f240 427b 	movw	r2, #1147	; 0x47b
 8005c92:	4925      	ldr	r1, [pc, #148]	; (8005d28 <lwip_sendto+0x108>)
 8005c94:	4822      	ldr	r0, [pc, #136]	; (8005d20 <lwip_sendto+0x100>)
 8005c96:	f007 fcb0 	bl	800d5fa <iprintf>
 8005c9a:	e7d7      	b.n	8005c4c <lwip_sendto+0x2c>
  LWIP_ERROR("lwip_sendto: invalid address", (((to == NULL) && (tolen == 0)) ||
 8005c9c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d1d7      	bne.n	8005c52 <lwip_sendto+0x32>
  buf.p = buf.ptr = NULL;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	9301      	str	r3, [sp, #4]
 8005ca6:	9300      	str	r3, [sp, #0]
  if (to) {
 8005ca8:	b30e      	cbz	r6, 8005cee <lwip_sendto+0xce>
    SOCKADDR_TO_IPADDR_PORT(to, &buf.addr, remote_port);
 8005caa:	6873      	ldr	r3, [r6, #4]
 8005cac:	9302      	str	r3, [sp, #8]
 8005cae:	8870      	ldrh	r0, [r6, #2]
 8005cb0:	f000 f9f0 	bl	8006094 <lwip_htons>
  netbuf_fromport(&buf) = remote_port;
 8005cb4:	f8ad 000c 	strh.w	r0, [sp, #12]
  err = netbuf_ref(&buf, data, short_size);
 8005cb8:	4642      	mov	r2, r8
 8005cba:	4639      	mov	r1, r7
 8005cbc:	4668      	mov	r0, sp
 8005cbe:	f7ff fcb7 	bl	8005630 <netbuf_ref>
  if (err == ERR_OK) {
 8005cc2:	4606      	mov	r6, r0
 8005cc4:	b1b0      	cbz	r0, 8005cf4 <lwip_sendto+0xd4>
  netbuf_free(&buf);
 8005cc6:	4668      	mov	r0, sp
 8005cc8:	f7ff fc9a 	bl	8005600 <netbuf_free>
  sock_set_errno(sock, err_to_errno(err));
 8005ccc:	4630      	mov	r0, r6
 8005cce:	f7ff fc77 	bl	80055c0 <err_to_errno>
 8005cd2:	7428      	strb	r0, [r5, #16]
 8005cd4:	b108      	cbz	r0, 8005cda <lwip_sendto+0xba>
 8005cd6:	4b13      	ldr	r3, [pc, #76]	; (8005d24 <lwip_sendto+0x104>)
 8005cd8:	6018      	str	r0, [r3, #0]
  return (err == ERR_OK ? short_size : -1);
 8005cda:	b9ce      	cbnz	r6, 8005d10 <lwip_sendto+0xf0>
 8005cdc:	b2a0      	uxth	r0, r4
 8005cde:	e014      	b.n	8005d0a <lwip_sendto+0xea>
  LWIP_ERROR("lwip_sendto: invalid address", (((to == NULL) && (tolen == 0)) ||
 8005ce0:	7873      	ldrb	r3, [r6, #1]
 8005ce2:	2b02      	cmp	r3, #2
 8005ce4:	d1b8      	bne.n	8005c58 <lwip_sendto+0x38>
 8005ce6:	f016 0f03 	tst.w	r6, #3
 8005cea:	d0da      	beq.n	8005ca2 <lwip_sendto+0x82>
 8005cec:	e7b4      	b.n	8005c58 <lwip_sendto+0x38>
    ip_addr_set_any(NETCONNTYPE_ISIPV6(netconn_type(sock->conn)), &buf.addr);
 8005cee:	2000      	movs	r0, #0
 8005cf0:	9002      	str	r0, [sp, #8]
 8005cf2:	e7df      	b.n	8005cb4 <lwip_sendto+0x94>
    err = netconn_send(sock->conn, &buf);
 8005cf4:	4669      	mov	r1, sp
 8005cf6:	6828      	ldr	r0, [r5, #0]
 8005cf8:	f7fe fb8a 	bl	8004410 <netconn_send>
 8005cfc:	4606      	mov	r6, r0
 8005cfe:	e7e2      	b.n	8005cc6 <lwip_sendto+0xa6>
    return -1;
 8005d00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005d04:	e001      	b.n	8005d0a <lwip_sendto+0xea>
  LWIP_ERROR("lwip_sendto: invalid address", (((to == NULL) && (tolen == 0)) ||
 8005d06:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8005d0a:	b005      	add	sp, #20
 8005d0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  return (err == ERR_OK ? short_size : -1);
 8005d10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005d14:	e7f9      	b.n	8005d0a <lwip_sendto+0xea>
 8005d16:	bf00      	nop
 8005d18:	0800e544 	.word	0x0800e544
 8005d1c:	0800e5a8 	.word	0x0800e5a8
 8005d20:	0800de34 	.word	0x0800de34
 8005d24:	200079a0 	.word	0x200079a0
 8005d28:	0800e584 	.word	0x0800e584

08005d2c <lwip_send>:
{
 8005d2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d30:	b084      	sub	sp, #16
 8005d32:	4680      	mov	r8, r0
 8005d34:	460e      	mov	r6, r1
 8005d36:	4617      	mov	r7, r2
 8005d38:	461d      	mov	r5, r3
  sock = get_socket(s);
 8005d3a:	f7ff fca5 	bl	8005688 <get_socket>
  if (!sock) {
 8005d3e:	b398      	cbz	r0, 8005da8 <lwip_send+0x7c>
 8005d40:	4604      	mov	r4, r0
  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 8005d42:	6803      	ldr	r3, [r0, #0]
 8005d44:	781b      	ldrb	r3, [r3, #0]
 8005d46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005d4a:	2b10      	cmp	r3, #16
 8005d4c:	d11e      	bne.n	8005d8c <lwip_send+0x60>
    ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 8005d4e:	f015 0f10 	tst.w	r5, #16
 8005d52:	d025      	beq.n	8005da0 <lwip_send+0x74>
 8005d54:	2103      	movs	r1, #3
 8005d56:	f015 0f08 	tst.w	r5, #8
 8005d5a:	d023      	beq.n	8005da4 <lwip_send+0x78>
 8005d5c:	2304      	movs	r3, #4
  written = 0;
 8005d5e:	aa04      	add	r2, sp, #16
 8005d60:	2000      	movs	r0, #0
 8005d62:	f842 0d04 	str.w	r0, [r2, #-4]!
  err = netconn_write_partly(sock->conn, data, size, write_flags, &written);
 8005d66:	6820      	ldr	r0, [r4, #0]
 8005d68:	9200      	str	r2, [sp, #0]
 8005d6a:	430b      	orrs	r3, r1
 8005d6c:	463a      	mov	r2, r7
 8005d6e:	4631      	mov	r1, r6
 8005d70:	f7fe fb6c 	bl	800444c <netconn_write_partly>
 8005d74:	4605      	mov	r5, r0
  sock_set_errno(sock, err_to_errno(err));
 8005d76:	f7ff fc23 	bl	80055c0 <err_to_errno>
 8005d7a:	7420      	strb	r0, [r4, #16]
 8005d7c:	b108      	cbz	r0, 8005d82 <lwip_send+0x56>
 8005d7e:	4b0d      	ldr	r3, [pc, #52]	; (8005db4 <lwip_send+0x88>)
 8005d80:	6018      	str	r0, [r3, #0]
  return (err == ERR_OK ? (int)written : -1);
 8005d82:	b9a5      	cbnz	r5, 8005dae <lwip_send+0x82>
 8005d84:	9803      	ldr	r0, [sp, #12]
}
 8005d86:	b004      	add	sp, #16
 8005d88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return lwip_sendto(s, data, size, flags, NULL, 0);
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	9301      	str	r3, [sp, #4]
 8005d90:	9300      	str	r3, [sp, #0]
 8005d92:	462b      	mov	r3, r5
 8005d94:	463a      	mov	r2, r7
 8005d96:	4631      	mov	r1, r6
 8005d98:	4640      	mov	r0, r8
 8005d9a:	f7ff ff41 	bl	8005c20 <lwip_sendto>
 8005d9e:	e7f2      	b.n	8005d86 <lwip_send+0x5a>
    ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 8005da0:	2101      	movs	r1, #1
 8005da2:	e7d8      	b.n	8005d56 <lwip_send+0x2a>
 8005da4:	2300      	movs	r3, #0
 8005da6:	e7da      	b.n	8005d5e <lwip_send+0x32>
    return -1;
 8005da8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005dac:	e7eb      	b.n	8005d86 <lwip_send+0x5a>
  return (err == ERR_OK ? (int)written : -1);
 8005dae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005db2:	e7e8      	b.n	8005d86 <lwip_send+0x5a>
 8005db4:	200079a0 	.word	0x200079a0

08005db8 <lwip_socket>:
{
 8005db8:	b538      	push	{r3, r4, r5, lr}
 8005dba:	4613      	mov	r3, r2
  switch (type) {
 8005dbc:	2902      	cmp	r1, #2
 8005dbe:	d01b      	beq.n	8005df8 <lwip_socket+0x40>
 8005dc0:	2903      	cmp	r1, #3
 8005dc2:	d007      	beq.n	8005dd4 <lwip_socket+0x1c>
 8005dc4:	2901      	cmp	r1, #1
 8005dc6:	d022      	beq.n	8005e0e <lwip_socket+0x56>
    set_errno(EINVAL);
 8005dc8:	2216      	movs	r2, #22
 8005dca:	4b1b      	ldr	r3, [pc, #108]	; (8005e38 <lwip_socket+0x80>)
 8005dcc:	601a      	str	r2, [r3, #0]
    return -1;
 8005dce:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005dd2:	e00f      	b.n	8005df4 <lwip_socket+0x3c>
    conn = netconn_new_with_proto_and_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_RAW),
 8005dd4:	4a19      	ldr	r2, [pc, #100]	; (8005e3c <lwip_socket+0x84>)
 8005dd6:	b2d9      	uxtb	r1, r3
 8005dd8:	2040      	movs	r0, #64	; 0x40
 8005dda:	f7fe f9cb 	bl	8004174 <netconn_new_with_proto_and_callback>
 8005dde:	4605      	mov	r5, r0
  if (!conn) {
 8005de0:	b1e5      	cbz	r5, 8005e1c <lwip_socket+0x64>
  i = alloc_socket(conn, 0);
 8005de2:	2100      	movs	r1, #0
 8005de4:	4628      	mov	r0, r5
 8005de6:	f7ff fc6d 	bl	80056c4 <alloc_socket>
 8005dea:	4604      	mov	r4, r0
  if (i == -1) {
 8005dec:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8005df0:	d01a      	beq.n	8005e28 <lwip_socket+0x70>
  conn->socket = i;
 8005df2:	61a8      	str	r0, [r5, #24]
}
 8005df4:	4620      	mov	r0, r4
 8005df6:	bd38      	pop	{r3, r4, r5, pc}
    conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain,
 8005df8:	2a88      	cmp	r2, #136	; 0x88
 8005dfa:	d006      	beq.n	8005e0a <lwip_socket+0x52>
 8005dfc:	2020      	movs	r0, #32
 8005dfe:	4a0f      	ldr	r2, [pc, #60]	; (8005e3c <lwip_socket+0x84>)
 8005e00:	2100      	movs	r1, #0
 8005e02:	f7fe f9b7 	bl	8004174 <netconn_new_with_proto_and_callback>
 8005e06:	4605      	mov	r5, r0
    break;
 8005e08:	e7ea      	b.n	8005de0 <lwip_socket+0x28>
    conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain,
 8005e0a:	2021      	movs	r0, #33	; 0x21
 8005e0c:	e7f7      	b.n	8005dfe <lwip_socket+0x46>
    conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_TCP), event_callback);
 8005e0e:	4a0b      	ldr	r2, [pc, #44]	; (8005e3c <lwip_socket+0x84>)
 8005e10:	2100      	movs	r1, #0
 8005e12:	2010      	movs	r0, #16
 8005e14:	f7fe f9ae 	bl	8004174 <netconn_new_with_proto_and_callback>
 8005e18:	4605      	mov	r5, r0
    break;
 8005e1a:	e7e1      	b.n	8005de0 <lwip_socket+0x28>
    set_errno(ENOBUFS);
 8005e1c:	2269      	movs	r2, #105	; 0x69
 8005e1e:	4b06      	ldr	r3, [pc, #24]	; (8005e38 <lwip_socket+0x80>)
 8005e20:	601a      	str	r2, [r3, #0]
    return -1;
 8005e22:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005e26:	e7e5      	b.n	8005df4 <lwip_socket+0x3c>
    netconn_delete(conn);
 8005e28:	4628      	mov	r0, r5
 8005e2a:	f7fe f9ff 	bl	800422c <netconn_delete>
    set_errno(ENFILE);
 8005e2e:	2217      	movs	r2, #23
 8005e30:	4b01      	ldr	r3, [pc, #4]	; (8005e38 <lwip_socket+0x80>)
 8005e32:	601a      	str	r2, [r3, #0]
    return -1;
 8005e34:	e7de      	b.n	8005df4 <lwip_socket+0x3c>
 8005e36:	bf00      	nop
 8005e38:	200079a0 	.word	0x200079a0
 8005e3c:	08005741 	.word	0x08005741

08005e40 <lwip_write>:
{
 8005e40:	b508      	push	{r3, lr}
  return lwip_send(s, data, size, 0);
 8005e42:	2300      	movs	r3, #0
 8005e44:	f7ff ff72 	bl	8005d2c <lwip_send>
}
 8005e48:	bd08      	pop	{r3, pc}
	...

08005e4c <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8005e4c:	b500      	push	{lr}
 8005e4e:	b083      	sub	sp, #12
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  if (tcpip_init_done != NULL) {
 8005e50:	4b20      	ldr	r3, [pc, #128]	; (8005ed4 <tcpip_thread+0x88>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	b113      	cbz	r3, 8005e5c <tcpip_thread+0x10>
    tcpip_init_done(tcpip_init_done_arg);
 8005e56:	4a20      	ldr	r2, [pc, #128]	; (8005ed8 <tcpip_thread+0x8c>)
 8005e58:	6810      	ldr	r0, [r2, #0]
 8005e5a:	4798      	blx	r3
  }

  LOCK_TCPIP_CORE();
 8005e5c:	481f      	ldr	r0, [pc, #124]	; (8005edc <tcpip_thread+0x90>)
 8005e5e:	f006 fd38 	bl	800c8d2 <sys_mutex_lock>
 8005e62:	e00e      	b.n	8005e82 <tcpip_thread+0x36>
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&mbox, (void **)&msg);
    LOCK_TCPIP_CORE();
    if (msg == NULL) {
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8005e64:	4b1e      	ldr	r3, [pc, #120]	; (8005ee0 <tcpip_thread+0x94>)
 8005e66:	2269      	movs	r2, #105	; 0x69
 8005e68:	491e      	ldr	r1, [pc, #120]	; (8005ee4 <tcpip_thread+0x98>)
 8005e6a:	481f      	ldr	r0, [pc, #124]	; (8005ee8 <tcpip_thread+0x9c>)
 8005e6c:	f007 fbc5 	bl	800d5fa <iprintf>
      continue;
 8005e70:	e007      	b.n	8005e82 <tcpip_thread+0x36>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif);
 8005e72:	68da      	ldr	r2, [r3, #12]
 8005e74:	6899      	ldr	r1, [r3, #8]
 8005e76:	6858      	ldr	r0, [r3, #4]
 8005e78:	4790      	blx	r2
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8005e7a:	9901      	ldr	r1, [sp, #4]
 8005e7c:	2009      	movs	r0, #9
 8005e7e:	f001 ff4f 	bl	8007d20 <memp_free>
    UNLOCK_TCPIP_CORE();
 8005e82:	4c16      	ldr	r4, [pc, #88]	; (8005edc <tcpip_thread+0x90>)
 8005e84:	4620      	mov	r0, r4
 8005e86:	f006 fd2b 	bl	800c8e0 <sys_mutex_unlock>
    TCPIP_MBOX_FETCH(&mbox, (void **)&msg);
 8005e8a:	a901      	add	r1, sp, #4
 8005e8c:	4817      	ldr	r0, [pc, #92]	; (8005eec <tcpip_thread+0xa0>)
 8005e8e:	f006 f961 	bl	800c154 <sys_timeouts_mbox_fetch>
    LOCK_TCPIP_CORE();
 8005e92:	4620      	mov	r0, r4
 8005e94:	f006 fd1d 	bl	800c8d2 <sys_mutex_lock>
    if (msg == NULL) {
 8005e98:	9b01      	ldr	r3, [sp, #4]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d0e2      	beq.n	8005e64 <tcpip_thread+0x18>
    switch (msg->type) {
 8005e9e:	781a      	ldrb	r2, [r3, #0]
 8005ea0:	2a03      	cmp	r2, #3
 8005ea2:	d00a      	beq.n	8005eba <tcpip_thread+0x6e>
 8005ea4:	2a04      	cmp	r2, #4
 8005ea6:	d010      	beq.n	8005eca <tcpip_thread+0x7e>
 8005ea8:	2a02      	cmp	r2, #2
 8005eaa:	d0e2      	beq.n	8005e72 <tcpip_thread+0x26>
      msg->msg.cb.function(msg->msg.cb.ctx);
      break;

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8005eac:	4b0c      	ldr	r3, [pc, #48]	; (8005ee0 <tcpip_thread+0x94>)
 8005eae:	229b      	movs	r2, #155	; 0x9b
 8005eb0:	490c      	ldr	r1, [pc, #48]	; (8005ee4 <tcpip_thread+0x98>)
 8005eb2:	480d      	ldr	r0, [pc, #52]	; (8005ee8 <tcpip_thread+0x9c>)
 8005eb4:	f007 fba1 	bl	800d5fa <iprintf>
      break;
 8005eb8:	e7e3      	b.n	8005e82 <tcpip_thread+0x36>
      msg->msg.cb.function(msg->msg.cb.ctx);
 8005eba:	685a      	ldr	r2, [r3, #4]
 8005ebc:	6898      	ldr	r0, [r3, #8]
 8005ebe:	4790      	blx	r2
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8005ec0:	9901      	ldr	r1, [sp, #4]
 8005ec2:	2008      	movs	r0, #8
 8005ec4:	f001 ff2c 	bl	8007d20 <memp_free>
      break;
 8005ec8:	e7db      	b.n	8005e82 <tcpip_thread+0x36>
      msg->msg.cb.function(msg->msg.cb.ctx);
 8005eca:	685a      	ldr	r2, [r3, #4]
 8005ecc:	6898      	ldr	r0, [r3, #8]
 8005ece:	4790      	blx	r2
      break;
 8005ed0:	e7d7      	b.n	8005e82 <tcpip_thread+0x36>
 8005ed2:	bf00      	nop
 8005ed4:	20003e3c 	.word	0x20003e3c
 8005ed8:	20003e40 	.word	0x20003e40
 8005edc:	20004270 	.word	0x20004270
 8005ee0:	0800e630 	.word	0x0800e630
 8005ee4:	0800e660 	.word	0x0800e660
 8005ee8:	0800de34 	.word	0x0800de34
 8005eec:	20003e38 	.word	0x20003e38

08005ef0 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8005ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ef2:	4607      	mov	r7, r0
 8005ef4:	460e      	mov	r6, r1
 8005ef6:	4615      	mov	r5, r2
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 8005ef8:	4813      	ldr	r0, [pc, #76]	; (8005f48 <tcpip_inpkt+0x58>)
 8005efa:	f006 fc79 	bl	800c7f0 <sys_mbox_valid>
 8005efe:	b188      	cbz	r0, 8005f24 <tcpip_inpkt+0x34>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8005f00:	2009      	movs	r0, #9
 8005f02:	f001 fef3 	bl	8007cec <memp_malloc>
  if (msg == NULL) {
 8005f06:	4604      	mov	r4, r0
 8005f08:	b1d0      	cbz	r0, 8005f40 <tcpip_inpkt+0x50>
    return ERR_MEM;
  }

  msg->type = TCPIP_MSG_INPKT;
 8005f0a:	2302      	movs	r3, #2
 8005f0c:	7003      	strb	r3, [r0, #0]
  msg->msg.inp.p = p;
 8005f0e:	6047      	str	r7, [r0, #4]
  msg->msg.inp.netif = inp;
 8005f10:	6086      	str	r6, [r0, #8]
  msg->msg.inp.input_fn = input_fn;
 8005f12:	60c5      	str	r5, [r0, #12]
  if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 8005f14:	4601      	mov	r1, r0
 8005f16:	480c      	ldr	r0, [pc, #48]	; (8005f48 <tcpip_inpkt+0x58>)
 8005f18:	f006 fc21 	bl	800c75e <sys_mbox_trypost>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	b940      	cbnz	r0, 8005f32 <tcpip_inpkt+0x42>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
    return ERR_MEM;
  }
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 8005f24:	4b09      	ldr	r3, [pc, #36]	; (8005f4c <tcpip_inpkt+0x5c>)
 8005f26:	22b5      	movs	r2, #181	; 0xb5
 8005f28:	4909      	ldr	r1, [pc, #36]	; (8005f50 <tcpip_inpkt+0x60>)
 8005f2a:	480a      	ldr	r0, [pc, #40]	; (8005f54 <tcpip_inpkt+0x64>)
 8005f2c:	f007 fb65 	bl	800d5fa <iprintf>
 8005f30:	e7e6      	b.n	8005f00 <tcpip_inpkt+0x10>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8005f32:	4621      	mov	r1, r4
 8005f34:	2009      	movs	r0, #9
 8005f36:	f001 fef3 	bl	8007d20 <memp_free>
    return ERR_MEM;
 8005f3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005f3e:	e7ef      	b.n	8005f20 <tcpip_inpkt+0x30>
    return ERR_MEM;
 8005f40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005f44:	e7ec      	b.n	8005f20 <tcpip_inpkt+0x30>
 8005f46:	bf00      	nop
 8005f48:	20003e38 	.word	0x20003e38
 8005f4c:	0800e630 	.word	0x0800e630
 8005f50:	0800e620 	.word	0x0800e620
 8005f54:	0800de34 	.word	0x0800de34

08005f58 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8005f58:	b508      	push	{r3, lr}
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8005f5a:	f891 302b 	ldrb.w	r3, [r1, #43]	; 0x2b
 8005f5e:	f013 0f18 	tst.w	r3, #24
 8005f62:	d103      	bne.n	8005f6c <tcpip_input+0x14>
    return tcpip_inpkt(p, inp, ethernet_input);
  } else
#endif /* LWIP_ETHERNET */
  return tcpip_inpkt(p, inp, ip_input);
 8005f64:	4a03      	ldr	r2, [pc, #12]	; (8005f74 <tcpip_input+0x1c>)
 8005f66:	f7ff ffc3 	bl	8005ef0 <tcpip_inpkt>
}
 8005f6a:	bd08      	pop	{r3, pc}
    return tcpip_inpkt(p, inp, ethernet_input);
 8005f6c:	4a02      	ldr	r2, [pc, #8]	; (8005f78 <tcpip_input+0x20>)
 8005f6e:	f7ff ffbf 	bl	8005ef0 <tcpip_inpkt>
 8005f72:	bd08      	pop	{r3, pc}
 8005f74:	08006c89 	.word	0x08006c89
 8005f78:	0800c5f5 	.word	0x0800c5f5

08005f7c <tcpip_callback_with_block>:
 * @param block 1 to block until the request is posted, 0 to non-blocking mode
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_callback_with_block(tcpip_callback_fn function, void *ctx, u8_t block)
{
 8005f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f7e:	4607      	mov	r7, r0
 8005f80:	460e      	mov	r6, r1
 8005f82:	4615      	mov	r5, r2
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 8005f84:	4816      	ldr	r0, [pc, #88]	; (8005fe0 <tcpip_callback_with_block+0x64>)
 8005f86:	f006 fc33 	bl	800c7f0 <sys_mbox_valid>
 8005f8a:	b188      	cbz	r0, 8005fb0 <tcpip_callback_with_block+0x34>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8005f8c:	2008      	movs	r0, #8
 8005f8e:	f001 fead 	bl	8007cec <memp_malloc>
  if (msg == NULL) {
 8005f92:	4604      	mov	r4, r0
 8005f94:	b300      	cbz	r0, 8005fd8 <tcpip_callback_with_block+0x5c>
    return ERR_MEM;
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8005f96:	2303      	movs	r3, #3
 8005f98:	7003      	strb	r3, [r0, #0]
  msg->msg.cb.function = function;
 8005f9a:	6047      	str	r7, [r0, #4]
  msg->msg.cb.ctx = ctx;
 8005f9c:	6086      	str	r6, [r0, #8]
  if (block) {
 8005f9e:	b975      	cbnz	r5, 8005fbe <tcpip_callback_with_block+0x42>
    sys_mbox_post(&mbox, msg);
  } else {
    if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 8005fa0:	4601      	mov	r1, r0
 8005fa2:	480f      	ldr	r0, [pc, #60]	; (8005fe0 <tcpip_callback_with_block+0x64>)
 8005fa4:	f006 fbdb 	bl	800c75e <sys_mbox_trypost>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	b970      	cbnz	r0, 8005fca <tcpip_callback_with_block+0x4e>
      memp_free(MEMP_TCPIP_MSG_API, msg);
      return ERR_MEM;
    }
  }
  return ERR_OK;
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 8005fb0:	4b0c      	ldr	r3, [pc, #48]	; (8005fe4 <tcpip_callback_with_block+0x68>)
 8005fb2:	22ee      	movs	r2, #238	; 0xee
 8005fb4:	490c      	ldr	r1, [pc, #48]	; (8005fe8 <tcpip_callback_with_block+0x6c>)
 8005fb6:	480d      	ldr	r0, [pc, #52]	; (8005fec <tcpip_callback_with_block+0x70>)
 8005fb8:	f007 fb1f 	bl	800d5fa <iprintf>
 8005fbc:	e7e6      	b.n	8005f8c <tcpip_callback_with_block+0x10>
    sys_mbox_post(&mbox, msg);
 8005fbe:	4601      	mov	r1, r0
 8005fc0:	4807      	ldr	r0, [pc, #28]	; (8005fe0 <tcpip_callback_with_block+0x64>)
 8005fc2:	f006 fbc0 	bl	800c746 <sys_mbox_post>
  return ERR_OK;
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	e7f0      	b.n	8005fac <tcpip_callback_with_block+0x30>
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8005fca:	4621      	mov	r1, r4
 8005fcc:	2008      	movs	r0, #8
 8005fce:	f001 fea7 	bl	8007d20 <memp_free>
      return ERR_MEM;
 8005fd2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005fd6:	e7e9      	b.n	8005fac <tcpip_callback_with_block+0x30>
    return ERR_MEM;
 8005fd8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005fdc:	e7e6      	b.n	8005fac <tcpip_callback_with_block+0x30>
 8005fde:	bf00      	nop
 8005fe0:	20003e38 	.word	0x20003e38
 8005fe4:	0800e630 	.word	0x0800e630
 8005fe8:	0800e620 	.word	0x0800e620
 8005fec:	0800de34 	.word	0x0800de34

08005ff0 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t* sem)
{
 8005ff0:	b570      	push	{r4, r5, r6, lr}
 8005ff2:	4605      	mov	r5, r0
 8005ff4:	460e      	mov	r6, r1
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 8005ff6:	4c05      	ldr	r4, [pc, #20]	; (800600c <tcpip_send_msg_wait_sem+0x1c>)
 8005ff8:	4620      	mov	r0, r4
 8005ffa:	f006 fc6a 	bl	800c8d2 <sys_mutex_lock>
  fn(apimsg);
 8005ffe:	4630      	mov	r0, r6
 8006000:	47a8      	blx	r5
  UNLOCK_TCPIP_CORE();
 8006002:	4620      	mov	r0, r4
 8006004:	f006 fc6c 	bl	800c8e0 <sys_mutex_unlock>
  sys_mbox_post(&mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 8006008:	2000      	movs	r0, #0
 800600a:	bd70      	pop	{r4, r5, r6, pc}
 800600c:	20004270 	.word	0x20004270

08006010 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8006010:	b530      	push	{r4, r5, lr}
 8006012:	b083      	sub	sp, #12
 8006014:	4605      	mov	r5, r0
 8006016:	460c      	mov	r4, r1
  lwip_init();
 8006018:	f000 f84b 	bl	80060b2 <lwip_init>

  tcpip_init_done = initfunc;
 800601c:	4b13      	ldr	r3, [pc, #76]	; (800606c <tcpip_init+0x5c>)
 800601e:	601d      	str	r5, [r3, #0]
  tcpip_init_done_arg = arg;
 8006020:	4b13      	ldr	r3, [pc, #76]	; (8006070 <tcpip_init+0x60>)
 8006022:	601c      	str	r4, [r3, #0]
  if (sys_mbox_new(&mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8006024:	2106      	movs	r1, #6
 8006026:	4813      	ldr	r0, [pc, #76]	; (8006074 <tcpip_init+0x64>)
 8006028:	f006 fb70 	bl	800c70c <sys_mbox_new>
 800602c:	b970      	cbnz	r0, 800604c <tcpip_init+0x3c>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800602e:	4812      	ldr	r0, [pc, #72]	; (8006078 <tcpip_init+0x68>)
 8006030:	f006 fc3e 	bl	800c8b0 <sys_mutex_new>
 8006034:	b990      	cbnz	r0, 800605c <tcpip_init+0x4c>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8006036:	2303      	movs	r3, #3
 8006038:	9300      	str	r3, [sp, #0]
 800603a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800603e:	2200      	movs	r2, #0
 8006040:	490e      	ldr	r1, [pc, #56]	; (800607c <tcpip_init+0x6c>)
 8006042:	480f      	ldr	r0, [pc, #60]	; (8006080 <tcpip_init+0x70>)
 8006044:	f006 fc51 	bl	800c8ea <sys_thread_new>
}
 8006048:	b003      	add	sp, #12
 800604a:	bd30      	pop	{r4, r5, pc}
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800604c:	4b0d      	ldr	r3, [pc, #52]	; (8006084 <tcpip_init+0x74>)
 800604e:	f240 12d5 	movw	r2, #469	; 0x1d5
 8006052:	490d      	ldr	r1, [pc, #52]	; (8006088 <tcpip_init+0x78>)
 8006054:	480d      	ldr	r0, [pc, #52]	; (800608c <tcpip_init+0x7c>)
 8006056:	f007 fad0 	bl	800d5fa <iprintf>
 800605a:	e7e8      	b.n	800602e <tcpip_init+0x1e>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800605c:	4b09      	ldr	r3, [pc, #36]	; (8006084 <tcpip_init+0x74>)
 800605e:	f240 12d9 	movw	r2, #473	; 0x1d9
 8006062:	490b      	ldr	r1, [pc, #44]	; (8006090 <tcpip_init+0x80>)
 8006064:	4809      	ldr	r0, [pc, #36]	; (800608c <tcpip_init+0x7c>)
 8006066:	f007 fac8 	bl	800d5fa <iprintf>
 800606a:	e7e4      	b.n	8006036 <tcpip_init+0x26>
 800606c:	20003e3c 	.word	0x20003e3c
 8006070:	20003e40 	.word	0x20003e40
 8006074:	20003e38 	.word	0x20003e38
 8006078:	20004270 	.word	0x20004270
 800607c:	08005e4d 	.word	0x08005e4d
 8006080:	0800e610 	.word	0x0800e610
 8006084:	0800e630 	.word	0x0800e630
 8006088:	0800e5c8 	.word	0x0800e5c8
 800608c:	0800de34 	.word	0x0800de34
 8006090:	0800e5ec 	.word	0x0800e5ec

08006094 <lwip_htons>:
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  return (u16_t)PP_HTONS(n);
 8006094:	ba40      	rev16	r0, r0
}
 8006096:	b280      	uxth	r0, r0
 8006098:	4770      	bx	lr

0800609a <lwip_htonl>:
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
  return (u32_t)PP_HTONL(n);
 800609a:	0203      	lsls	r3, r0, #8
 800609c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80060a0:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80060a4:	0a02      	lsrs	r2, r0, #8
 80060a6:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80060aa:	4313      	orrs	r3, r2
}
 80060ac:	ea43 6010 	orr.w	r0, r3, r0, lsr #24
 80060b0:	4770      	bx	lr

080060b2 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80060b2:	b508      	push	{r3, lr}
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 80060b4:	f006 fbf0 	bl	800c898 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 80060b8:	f001 fbda 	bl	8007870 <mem_init>
  memp_init();
 80060bc:	f001 fe06 	bl	8007ccc <memp_init>
  pbuf_init();
  netif_init();
 80060c0:	f001 fe59 	bl	8007d76 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80060c4:	f006 f8b4 	bl	800c230 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80060c8:	f002 fbba 	bl	8008840 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
 80060cc:	f006 f81c 	bl	800c108 <sys_timeouts_init>
 80060d0:	bd08      	pop	{r3, pc}
	...

080060d4 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80060d4:	b510      	push	{r4, lr}
 80060d6:	4604      	mov	r4, r0
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80060d8:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 80060dc:	00d3      	lsls	r3, r2, #3
 80060de:	4a09      	ldr	r2, [pc, #36]	; (8006104 <etharp_free_entry+0x30>)
 80060e0:	58d0      	ldr	r0, [r2, r3]
 80060e2:	b138      	cbz	r0, 80060f4 <etharp_free_entry+0x20>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80060e4:	f001 fff2 	bl	80080cc <pbuf_free>
    arp_table[i].q = NULL;
 80060e8:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 80060ec:	00d3      	lsls	r3, r2, #3
 80060ee:	2100      	movs	r1, #0
 80060f0:	4a04      	ldr	r2, [pc, #16]	; (8006104 <etharp_free_entry+0x30>)
 80060f2:	50d1      	str	r1, [r2, r3]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80060f4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80060f8:	00e2      	lsls	r2, r4, #3
 80060fa:	4b02      	ldr	r3, [pc, #8]	; (8006104 <etharp_free_entry+0x30>)
 80060fc:	4413      	add	r3, r2
 80060fe:	2200      	movs	r2, #0
 8006100:	751a      	strb	r2, [r3, #20]
 8006102:	bd10      	pop	{r4, pc}
 8006104:	20003e44 	.word	0x20003e44

08006108 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
{
 8006108:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  s8_t empty = ARP_TABLE_SIZE;
  u8_t i = 0;
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800610c:	f04f 0e00 	mov.w	lr, #0
 8006110:	46f3      	mov	fp, lr
 8006112:	46f1      	mov	r9, lr
  s8_t old_queue = ARP_TABLE_SIZE;
 8006114:	f04f 0c0a 	mov.w	ip, #10
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8006118:	4673      	mov	r3, lr
  s8_t empty = ARP_TABLE_SIZE;
 800611a:	4667      	mov	r7, ip
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800611c:	46e0      	mov	r8, ip
 800611e:	46e2      	mov	sl, ip
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8006120:	e003      	b.n	800612a <etharp_find_entry+0x22>
    u8_t state = arp_table[i].state;
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8006122:	b96c      	cbnz	r4, 8006140 <etharp_find_entry+0x38>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
 8006124:	b25f      	sxtb	r7, r3
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8006126:	3301      	adds	r3, #1
 8006128:	b2db      	uxtb	r3, r3
 800612a:	2b09      	cmp	r3, #9
 800612c:	d845      	bhi.n	80061ba <etharp_find_entry+0xb2>
    u8_t state = arp_table[i].state;
 800612e:	461a      	mov	r2, r3
 8006130:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 8006134:	00e5      	lsls	r5, r4, #3
 8006136:	4c59      	ldr	r4, [pc, #356]	; (800629c <etharp_find_entry+0x194>)
 8006138:	442c      	add	r4, r5
 800613a:	7d24      	ldrb	r4, [r4, #20]
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800613c:	2f0a      	cmp	r7, #10
 800613e:	d0f0      	beq.n	8006122 <etharp_find_entry+0x1a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8006140:	2c00      	cmp	r4, #0
 8006142:	d0f0      	beq.n	8006126 <etharp_find_entry+0x1e>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8006144:	b140      	cbz	r0, 8006158 <etharp_find_entry+0x50>
 8006146:	eb02 0542 	add.w	r5, r2, r2, lsl #1
 800614a:	00ee      	lsls	r6, r5, #3
 800614c:	4d53      	ldr	r5, [pc, #332]	; (800629c <etharp_find_entry+0x194>)
 800614e:	4435      	add	r5, r6
 8006150:	686d      	ldr	r5, [r5, #4]
 8006152:	6806      	ldr	r6, [r0, #0]
 8006154:	42ae      	cmp	r6, r5
 8006156:	d00f      	beq.n	8006178 <etharp_find_entry+0x70>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8006158:	2c01      	cmp	r4, #1
 800615a:	d010      	beq.n	800617e <etharp_find_entry+0x76>
            old_pending = i;
            age_pending = arp_table[i].ctime;
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800615c:	2c01      	cmp	r4, #1
 800615e:	d9e2      	bls.n	8006126 <etharp_find_entry+0x1e>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8006160:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8006164:	00d4      	lsls	r4, r2, #3
 8006166:	4a4d      	ldr	r2, [pc, #308]	; (800629c <etharp_find_entry+0x194>)
 8006168:	4422      	add	r2, r4
 800616a:	8a52      	ldrh	r2, [r2, #18]
 800616c:	4596      	cmp	lr, r2
 800616e:	d8da      	bhi.n	8006126 <etharp_find_entry+0x1e>
            old_stable = i;
 8006170:	fa4f f883 	sxtb.w	r8, r3
            age_stable = arp_table[i].ctime;
 8006174:	4696      	mov	lr, r2
 8006176:	e7d6      	b.n	8006126 <etharp_find_entry+0x1e>
        return i;
 8006178:	b258      	sxtb	r0, r3
 800617a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (arp_table[i].q != NULL) {
 800617e:	eb02 0542 	add.w	r5, r2, r2, lsl #1
 8006182:	00ec      	lsls	r4, r5, #3
 8006184:	4d45      	ldr	r5, [pc, #276]	; (800629c <etharp_find_entry+0x194>)
 8006186:	592c      	ldr	r4, [r5, r4]
 8006188:	b15c      	cbz	r4, 80061a2 <etharp_find_entry+0x9a>
          if (arp_table[i].ctime >= age_queue) {
 800618a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800618e:	00d4      	lsls	r4, r2, #3
 8006190:	462a      	mov	r2, r5
 8006192:	4422      	add	r2, r4
 8006194:	8a52      	ldrh	r2, [r2, #18]
 8006196:	4591      	cmp	r9, r2
 8006198:	d8c5      	bhi.n	8006126 <etharp_find_entry+0x1e>
            old_queue = i;
 800619a:	fa4f fc83 	sxtb.w	ip, r3
            age_queue = arp_table[i].ctime;
 800619e:	4691      	mov	r9, r2
 80061a0:	e7c1      	b.n	8006126 <etharp_find_entry+0x1e>
          if (arp_table[i].ctime >= age_pending) {
 80061a2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80061a6:	00d4      	lsls	r4, r2, #3
 80061a8:	4a3c      	ldr	r2, [pc, #240]	; (800629c <etharp_find_entry+0x194>)
 80061aa:	4422      	add	r2, r4
 80061ac:	8a52      	ldrh	r2, [r2, #18]
 80061ae:	4593      	cmp	fp, r2
 80061b0:	d8b9      	bhi.n	8006126 <etharp_find_entry+0x1e>
            old_pending = i;
 80061b2:	fa4f fa83 	sxtb.w	sl, r3
            age_pending = arp_table[i].ctime;
 80061b6:	4693      	mov	fp, r2
 80061b8:	e7b5      	b.n	8006126 <etharp_find_entry+0x1e>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80061ba:	f011 0f02 	tst.w	r1, #2
 80061be:	d165      	bne.n	800628c <etharp_find_entry+0x184>
 80061c0:	2f0a      	cmp	r7, #10
 80061c2:	d020      	beq.n	8006206 <etharp_find_entry+0xfe>
 80061c4:	4605      	mov	r5, r0
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80061c6:	2f09      	cmp	r7, #9
 80061c8:	dc24      	bgt.n	8006214 <etharp_find_entry+0x10c>
    i = empty;
 80061ca:	b2ff      	uxtb	r7, r7
    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
    etharp_free_entry(i);
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80061cc:	2f09      	cmp	r7, #9
 80061ce:	d84d      	bhi.n	800626c <etharp_find_entry+0x164>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80061d0:	463c      	mov	r4, r7
 80061d2:	eb07 0347 	add.w	r3, r7, r7, lsl #1
 80061d6:	00da      	lsls	r2, r3, #3
 80061d8:	4b30      	ldr	r3, [pc, #192]	; (800629c <etharp_find_entry+0x194>)
 80061da:	4413      	add	r3, r2
 80061dc:	7d1b      	ldrb	r3, [r3, #20]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d14c      	bne.n	800627c <etharp_find_entry+0x174>
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80061e2:	b135      	cbz	r5, 80061f2 <etharp_find_entry+0xea>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80061e4:	6829      	ldr	r1, [r5, #0]
 80061e6:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 80061ea:	00da      	lsls	r2, r3, #3
 80061ec:	4b2b      	ldr	r3, [pc, #172]	; (800629c <etharp_find_entry+0x194>)
 80061ee:	4413      	add	r3, r2
 80061f0:	6059      	str	r1, [r3, #4]
  }
  arp_table[i].ctime = 0;
 80061f2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80061f6:	00e2      	lsls	r2, r4, #3
 80061f8:	4b28      	ldr	r3, [pc, #160]	; (800629c <etharp_find_entry+0x194>)
 80061fa:	4413      	add	r3, r2
 80061fc:	2200      	movs	r2, #0
 80061fe:	825a      	strh	r2, [r3, #18]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF*/
  return (err_t)i;
 8006200:	b278      	sxtb	r0, r7
 8006202:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8006206:	f011 0f01 	tst.w	r1, #1
 800620a:	d1db      	bne.n	80061c4 <etharp_find_entry+0xbc>
    return (s8_t)ERR_MEM;
 800620c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006210:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (old_stable < ARP_TABLE_SIZE) {
 8006214:	f1b8 0f09 	cmp.w	r8, #9
 8006218:	dc14      	bgt.n	8006244 <etharp_find_entry+0x13c>
      i = old_stable;
 800621a:	fa5f f788 	uxtb.w	r7, r8
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800621e:	eb07 0247 	add.w	r2, r7, r7, lsl #1
 8006222:	00d3      	lsls	r3, r2, #3
 8006224:	4a1d      	ldr	r2, [pc, #116]	; (800629c <etharp_find_entry+0x194>)
 8006226:	58d3      	ldr	r3, [r2, r3]
 8006228:	b133      	cbz	r3, 8006238 <etharp_find_entry+0x130>
 800622a:	4b1d      	ldr	r3, [pc, #116]	; (80062a0 <etharp_find_entry+0x198>)
 800622c:	f240 126f 	movw	r2, #367	; 0x16f
 8006230:	491c      	ldr	r1, [pc, #112]	; (80062a4 <etharp_find_entry+0x19c>)
 8006232:	481d      	ldr	r0, [pc, #116]	; (80062a8 <etharp_find_entry+0x1a0>)
 8006234:	f007 f9e1 	bl	800d5fa <iprintf>
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8006238:	2f09      	cmp	r7, #9
 800623a:	d80f      	bhi.n	800625c <etharp_find_entry+0x154>
    etharp_free_entry(i);
 800623c:	4638      	mov	r0, r7
 800623e:	f7ff ff49 	bl	80060d4 <etharp_free_entry>
 8006242:	e7c3      	b.n	80061cc <etharp_find_entry+0xc4>
    } else if (old_pending < ARP_TABLE_SIZE) {
 8006244:	f1ba 0f09 	cmp.w	sl, #9
 8006248:	dc02      	bgt.n	8006250 <etharp_find_entry+0x148>
      i = old_pending;
 800624a:	fa5f f78a 	uxtb.w	r7, sl
 800624e:	e7f3      	b.n	8006238 <etharp_find_entry+0x130>
    } else if (old_queue < ARP_TABLE_SIZE) {
 8006250:	f1bc 0f09 	cmp.w	ip, #9
 8006254:	dc1e      	bgt.n	8006294 <etharp_find_entry+0x18c>
      i = old_queue;
 8006256:	fa5f f78c 	uxtb.w	r7, ip
 800625a:	e7ed      	b.n	8006238 <etharp_find_entry+0x130>
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800625c:	4b10      	ldr	r3, [pc, #64]	; (80062a0 <etharp_find_entry+0x198>)
 800625e:	f240 1281 	movw	r2, #385	; 0x181
 8006262:	4912      	ldr	r1, [pc, #72]	; (80062ac <etharp_find_entry+0x1a4>)
 8006264:	4810      	ldr	r0, [pc, #64]	; (80062a8 <etharp_find_entry+0x1a0>)
 8006266:	f007 f9c8 	bl	800d5fa <iprintf>
 800626a:	e7e7      	b.n	800623c <etharp_find_entry+0x134>
  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800626c:	4b0c      	ldr	r3, [pc, #48]	; (80062a0 <etharp_find_entry+0x198>)
 800626e:	f240 1285 	movw	r2, #389	; 0x185
 8006272:	490e      	ldr	r1, [pc, #56]	; (80062ac <etharp_find_entry+0x1a4>)
 8006274:	480c      	ldr	r0, [pc, #48]	; (80062a8 <etharp_find_entry+0x1a0>)
 8006276:	f007 f9c0 	bl	800d5fa <iprintf>
 800627a:	e7a9      	b.n	80061d0 <etharp_find_entry+0xc8>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800627c:	4b08      	ldr	r3, [pc, #32]	; (80062a0 <etharp_find_entry+0x198>)
 800627e:	f240 1287 	movw	r2, #391	; 0x187
 8006282:	490b      	ldr	r1, [pc, #44]	; (80062b0 <etharp_find_entry+0x1a8>)
 8006284:	4808      	ldr	r0, [pc, #32]	; (80062a8 <etharp_find_entry+0x1a0>)
 8006286:	f007 f9b8 	bl	800d5fa <iprintf>
 800628a:	e7aa      	b.n	80061e2 <etharp_find_entry+0xda>
    return (s8_t)ERR_MEM;
 800628c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006290:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return (s8_t)ERR_MEM;
 8006294:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8006298:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800629c:	20003e44 	.word	0x20003e44
 80062a0:	0800e680 	.word	0x0800e680
 80062a4:	0800e6b8 	.word	0x0800e6b8
 80062a8:	0800de34 	.word	0x0800de34
 80062ac:	0800e6d0 	.word	0x0800e6d0
 80062b0:	0800e6e4 	.word	0x0800e6e4

080062b4 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80062b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062b6:	b083      	sub	sp, #12
 80062b8:	4604      	mov	r4, r0
 80062ba:	460d      	mov	r5, r1
 80062bc:	4616      	mov	r6, r2
 80062be:	461f      	mov	r7, r3
  s8_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80062c0:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80062c4:	2b06      	cmp	r3, #6
 80062c6:	d006      	beq.n	80062d6 <etharp_update_arp_entry+0x22>
 80062c8:	4b28      	ldr	r3, [pc, #160]	; (800636c <etharp_update_arp_entry+0xb8>)
 80062ca:	f240 12ab 	movw	r2, #427	; 0x1ab
 80062ce:	4928      	ldr	r1, [pc, #160]	; (8006370 <etharp_update_arp_entry+0xbc>)
 80062d0:	4828      	ldr	r0, [pc, #160]	; (8006374 <etharp_update_arp_entry+0xc0>)
 80062d2:	f007 f992 	bl	800d5fa <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
    (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80062d6:	2d00      	cmp	r5, #0
 80062d8:	d039      	beq.n	800634e <etharp_update_arp_entry+0x9a>
 80062da:	6828      	ldr	r0, [r5, #0]
 80062dc:	2800      	cmp	r0, #0
 80062de:	d039      	beq.n	8006354 <etharp_update_arp_entry+0xa0>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80062e0:	4621      	mov	r1, r4
 80062e2:	f000 fe3c 	bl	8006f5e <ip4_addr_isbroadcast_u32>
  if (ip4_addr_isany(ipaddr) ||
 80062e6:	2800      	cmp	r0, #0
 80062e8:	d137      	bne.n	800635a <etharp_update_arp_entry+0xa6>
      ip4_addr_ismulticast(ipaddr)) {
 80062ea:	682b      	ldr	r3, [r5, #0]
 80062ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80062f0:	2be0      	cmp	r3, #224	; 0xe0
 80062f2:	d035      	beq.n	8006360 <etharp_update_arp_entry+0xac>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 80062f4:	4622      	mov	r2, r4
 80062f6:	4639      	mov	r1, r7
 80062f8:	4628      	mov	r0, r5
 80062fa:	f7ff ff05 	bl	8006108 <etharp_find_entry>
  /* bail out if no entry could be found */
  if (i < 0) {
 80062fe:	2800      	cmp	r0, #0
 8006300:	db23      	blt.n	800634a <etharp_update_arp_entry+0x96>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8006302:	4d1d      	ldr	r5, [pc, #116]	; (8006378 <etharp_update_arp_entry+0xc4>)
 8006304:	0042      	lsls	r2, r0, #1
 8006306:	1813      	adds	r3, r2, r0
 8006308:	00d9      	lsls	r1, r3, #3
 800630a:	186f      	adds	r7, r5, r1
 800630c:	2302      	movs	r3, #2
 800630e:	753b      	strb	r3, [r7, #20]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8006310:	60bc      	str	r4, [r7, #8]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 8006312:	460b      	mov	r3, r1
 8006314:	3308      	adds	r3, #8
 8006316:	442b      	add	r3, r5
 8006318:	6832      	ldr	r2, [r6, #0]
 800631a:	605a      	str	r2, [r3, #4]
 800631c:	88b2      	ldrh	r2, [r6, #4]
 800631e:	811a      	strh	r2, [r3, #8]
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8006320:	2300      	movs	r3, #0
 8006322:	827b      	strh	r3, [r7, #18]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8006324:	586d      	ldr	r5, [r5, r1]
 8006326:	b1f5      	cbz	r5, 8006366 <etharp_update_arp_entry+0xb2>
    struct pbuf *p = arp_table[i].q;
    arp_table[i].q = NULL;
 8006328:	2700      	movs	r7, #0
 800632a:	4a13      	ldr	r2, [pc, #76]	; (8006378 <etharp_update_arp_entry+0xc4>)
 800632c:	5057      	str	r7, [r2, r1]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800632e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006332:	9300      	str	r3, [sp, #0]
 8006334:	4633      	mov	r3, r6
 8006336:	f104 0225 	add.w	r2, r4, #37	; 0x25
 800633a:	4629      	mov	r1, r5
 800633c:	4620      	mov	r0, r4
 800633e:	f006 f9ad 	bl	800c69c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8006342:	4628      	mov	r0, r5
 8006344:	f001 fec2 	bl	80080cc <pbuf_free>
  }
  return ERR_OK;
 8006348:	4638      	mov	r0, r7
}
 800634a:	b003      	add	sp, #12
 800634c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return ERR_ARG;
 800634e:	f06f 000f 	mvn.w	r0, #15
 8006352:	e7fa      	b.n	800634a <etharp_update_arp_entry+0x96>
 8006354:	f06f 000f 	mvn.w	r0, #15
 8006358:	e7f7      	b.n	800634a <etharp_update_arp_entry+0x96>
 800635a:	f06f 000f 	mvn.w	r0, #15
 800635e:	e7f4      	b.n	800634a <etharp_update_arp_entry+0x96>
 8006360:	f06f 000f 	mvn.w	r0, #15
 8006364:	e7f1      	b.n	800634a <etharp_update_arp_entry+0x96>
  return ERR_OK;
 8006366:	2000      	movs	r0, #0
 8006368:	e7ef      	b.n	800634a <etharp_update_arp_entry+0x96>
 800636a:	bf00      	nop
 800636c:	0800e680 	.word	0x0800e680
 8006370:	0800e838 	.word	0x0800e838
 8006374:	0800de34 	.word	0x0800de34
 8006378:	20003e44 	.word	0x20003e44

0800637c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800637c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006380:	b082      	sub	sp, #8
 8006382:	4689      	mov	r9, r1
 8006384:	4692      	mov	sl, r2
 8006386:	4698      	mov	r8, r3
 8006388:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  struct pbuf *p;
  err_t result = ERR_OK;
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800638a:	4607      	mov	r7, r0
 800638c:	2800      	cmp	r0, #0
 800638e:	d048      	beq.n	8006422 <etharp_raw+0xa6>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8006390:	2200      	movs	r2, #0
 8006392:	211c      	movs	r1, #28
 8006394:	2002      	movs	r0, #2
 8006396:	f001 ff05 	bl	80081a4 <pbuf_alloc>
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800639a:	4606      	mov	r6, r0
 800639c:	2800      	cmp	r0, #0
 800639e:	d050      	beq.n	8006442 <etharp_raw+0xc6>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80063a0:	8943      	ldrh	r3, [r0, #10]
 80063a2:	2b1b      	cmp	r3, #27
 80063a4:	d945      	bls.n	8006432 <etharp_raw+0xb6>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80063a6:	6874      	ldr	r4, [r6, #4]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80063a8:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 80063ac:	f7ff fe72 	bl	8006094 <lwip_htons>
 80063b0:	80e0      	strh	r0, [r4, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80063b2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80063b6:	2b06      	cmp	r3, #6
 80063b8:	d006      	beq.n	80063c8 <etharp_raw+0x4c>
 80063ba:	4b23      	ldr	r3, [pc, #140]	; (8006448 <etharp_raw+0xcc>)
 80063bc:	f240 426b 	movw	r2, #1131	; 0x46b
 80063c0:	4922      	ldr	r1, [pc, #136]	; (800644c <etharp_raw+0xd0>)
 80063c2:	4823      	ldr	r0, [pc, #140]	; (8006450 <etharp_raw+0xd4>)
 80063c4:	f007 f919 	bl	800d5fa <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 80063c8:	f8d8 3000 	ldr.w	r3, [r8]
 80063cc:	60a3      	str	r3, [r4, #8]
 80063ce:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 80063d2:	81a3      	strh	r3, [r4, #12]
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 80063d4:	682b      	ldr	r3, [r5, #0]
 80063d6:	f8c4 3012 	str.w	r3, [r4, #18]
 80063da:	88ab      	ldrh	r3, [r5, #4]
 80063dc:	82e3      	strh	r3, [r4, #22]
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 80063de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f8c4 300e 	str.w	r3, [r4, #14]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 80063e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	61a3      	str	r3, [r4, #24]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 80063ec:	2500      	movs	r5, #0
 80063ee:	7025      	strb	r5, [r4, #0]
 80063f0:	2301      	movs	r3, #1
 80063f2:	7063      	strb	r3, [r4, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80063f4:	2308      	movs	r3, #8
 80063f6:	70a3      	strb	r3, [r4, #2]
 80063f8:	70e5      	strb	r5, [r4, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80063fa:	2306      	movs	r3, #6
 80063fc:	7123      	strb	r3, [r4, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80063fe:	2304      	movs	r3, #4
 8006400:	7163      	strb	r3, [r4, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8006402:	f640 0306 	movw	r3, #2054	; 0x806
 8006406:	9300      	str	r3, [sp, #0]
 8006408:	4653      	mov	r3, sl
 800640a:	464a      	mov	r2, r9
 800640c:	4631      	mov	r1, r6
 800640e:	4638      	mov	r0, r7
 8006410:	f006 f944 	bl	800c69c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8006414:	4630      	mov	r0, r6
 8006416:	f001 fe59 	bl	80080cc <pbuf_free>
  p = NULL;
  /* could not allocate pbuf for ARP request */

  return result;
 800641a:	4628      	mov	r0, r5
}
 800641c:	b002      	add	sp, #8
 800641e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8006422:	4b09      	ldr	r3, [pc, #36]	; (8006448 <etharp_raw+0xcc>)
 8006424:	f44f 628b 	mov.w	r2, #1112	; 0x458
 8006428:	490a      	ldr	r1, [pc, #40]	; (8006454 <etharp_raw+0xd8>)
 800642a:	4809      	ldr	r0, [pc, #36]	; (8006450 <etharp_raw+0xd4>)
 800642c:	f007 f8e5 	bl	800d5fa <iprintf>
 8006430:	e7ae      	b.n	8006390 <etharp_raw+0x14>
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8006432:	4b05      	ldr	r3, [pc, #20]	; (8006448 <etharp_raw+0xcc>)
 8006434:	f240 4264 	movw	r2, #1124	; 0x464
 8006438:	4907      	ldr	r1, [pc, #28]	; (8006458 <etharp_raw+0xdc>)
 800643a:	4805      	ldr	r0, [pc, #20]	; (8006450 <etharp_raw+0xd4>)
 800643c:	f007 f8dd 	bl	800d5fa <iprintf>
 8006440:	e7b1      	b.n	80063a6 <etharp_raw+0x2a>
    return ERR_MEM;
 8006442:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006446:	e7e9      	b.n	800641c <etharp_raw+0xa0>
 8006448:	0800e680 	.word	0x0800e680
 800644c:	0800e7f4 	.word	0x0800e7f4
 8006450:	0800de34 	.word	0x0800de34
 8006454:	0800e7b0 	.word	0x0800e7b0
 8006458:	0800e7c0 	.word	0x0800e7c0

0800645c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
 800645c:	b530      	push	{r4, r5, lr}
 800645e:	b085      	sub	sp, #20
 8006460:	4603      	mov	r3, r0
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8006462:	f100 0425 	add.w	r4, r0, #37	; 0x25
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8006466:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8006468:	2501      	movs	r5, #1
 800646a:	9503      	str	r5, [sp, #12]
 800646c:	9102      	str	r1, [sp, #8]
 800646e:	4904      	ldr	r1, [pc, #16]	; (8006480 <etharp_request_dst+0x24>)
 8006470:	9101      	str	r1, [sp, #4]
 8006472:	9300      	str	r3, [sp, #0]
 8006474:	4623      	mov	r3, r4
 8006476:	4621      	mov	r1, r4
 8006478:	f7ff ff80 	bl	800637c <etharp_raw>
                    ipaddr, ARP_REQUEST);
}
 800647c:	b005      	add	sp, #20
 800647e:	bd30      	pop	{r4, r5, pc}
 8006480:	0800ff78 	.word	0x0800ff78

08006484 <etharp_cleanup_netif>:
{
 8006484:	b538      	push	{r3, r4, r5, lr}
 8006486:	4605      	mov	r5, r0
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8006488:	2400      	movs	r4, #0
 800648a:	e001      	b.n	8006490 <etharp_cleanup_netif+0xc>
 800648c:	3401      	adds	r4, #1
 800648e:	b2e4      	uxtb	r4, r4
 8006490:	2c09      	cmp	r4, #9
 8006492:	d810      	bhi.n	80064b6 <etharp_cleanup_netif+0x32>
    u8_t state = arp_table[i].state;
 8006494:	4620      	mov	r0, r4
 8006496:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800649a:	00da      	lsls	r2, r3, #3
 800649c:	4b06      	ldr	r3, [pc, #24]	; (80064b8 <etharp_cleanup_netif+0x34>)
 800649e:	4413      	add	r3, r2
 80064a0:	7d1b      	ldrb	r3, [r3, #20]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d0f2      	beq.n	800648c <etharp_cleanup_netif+0x8>
 80064a6:	4b04      	ldr	r3, [pc, #16]	; (80064b8 <etharp_cleanup_netif+0x34>)
 80064a8:	4413      	add	r3, r2
 80064aa:	689b      	ldr	r3, [r3, #8]
 80064ac:	42ab      	cmp	r3, r5
 80064ae:	d1ed      	bne.n	800648c <etharp_cleanup_netif+0x8>
      etharp_free_entry(i);
 80064b0:	f7ff fe10 	bl	80060d4 <etharp_free_entry>
 80064b4:	e7ea      	b.n	800648c <etharp_cleanup_netif+0x8>
}
 80064b6:	bd38      	pop	{r3, r4, r5, pc}
 80064b8:	20003e44 	.word	0x20003e44

080064bc <etharp_input>:
{
 80064bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064c0:	b086      	sub	sp, #24
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80064c2:	b161      	cbz	r1, 80064de <etharp_input+0x22>
 80064c4:	4604      	mov	r4, r0
 80064c6:	460e      	mov	r6, r1
  hdr = (struct etharp_hdr *)p->payload;
 80064c8:	6845      	ldr	r5, [r0, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 80064ca:	882b      	ldrh	r3, [r5, #0]
 80064cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064d0:	d00d      	beq.n	80064ee <etharp_input+0x32>
    pbuf_free(p);
 80064d2:	4620      	mov	r0, r4
 80064d4:	f001 fdfa 	bl	80080cc <pbuf_free>
}
 80064d8:	b006      	add	sp, #24
 80064da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80064de:	4b20      	ldr	r3, [pc, #128]	; (8006560 <etharp_input+0xa4>)
 80064e0:	f44f 7222 	mov.w	r2, #648	; 0x288
 80064e4:	491f      	ldr	r1, [pc, #124]	; (8006564 <etharp_input+0xa8>)
 80064e6:	4820      	ldr	r0, [pc, #128]	; (8006568 <etharp_input+0xac>)
 80064e8:	f007 f887 	bl	800d5fa <iprintf>
 80064ec:	e7f4      	b.n	80064d8 <etharp_input+0x1c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80064ee:	792b      	ldrb	r3, [r5, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 80064f0:	2b06      	cmp	r3, #6
 80064f2:	d1ee      	bne.n	80064d2 <etharp_input+0x16>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80064f4:	796b      	ldrb	r3, [r5, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80064f6:	2b04      	cmp	r3, #4
 80064f8:	d1eb      	bne.n	80064d2 <etharp_input+0x16>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80064fa:	886b      	ldrh	r3, [r5, #2]
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80064fc:	2b08      	cmp	r3, #8
 80064fe:	d1e8      	bne.n	80064d2 <etharp_input+0x16>
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 8006500:	f8d5 300e 	ldr.w	r3, [r5, #14]
 8006504:	9305      	str	r3, [sp, #20]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 8006506:	69af      	ldr	r7, [r5, #24]
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8006508:	684b      	ldr	r3, [r1, #4]
 800650a:	b1ab      	cbz	r3, 8006538 <etharp_input+0x7c>
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800650c:	429f      	cmp	r7, r3
 800650e:	bf14      	ite	ne
 8006510:	2700      	movne	r7, #0
 8006512:	2701      	moveq	r7, #1
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8006514:	f105 0808 	add.w	r8, r5, #8
 8006518:	b187      	cbz	r7, 800653c <etharp_input+0x80>
 800651a:	2301      	movs	r3, #1
 800651c:	4642      	mov	r2, r8
 800651e:	a905      	add	r1, sp, #20
 8006520:	4630      	mov	r0, r6
 8006522:	f7ff fec7 	bl	80062b4 <etharp_update_arp_entry>
  switch (hdr->opcode) {
 8006526:	88eb      	ldrh	r3, [r5, #6]
 8006528:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800652c:	d100      	bne.n	8006530 <etharp_input+0x74>
    if (for_us) {
 800652e:	b93f      	cbnz	r7, 8006540 <etharp_input+0x84>
  pbuf_free(p);
 8006530:	4620      	mov	r0, r4
 8006532:	f001 fdcb 	bl	80080cc <pbuf_free>
 8006536:	e7cf      	b.n	80064d8 <etharp_input+0x1c>
    for_us = 0;
 8006538:	2700      	movs	r7, #0
 800653a:	e7eb      	b.n	8006514 <etharp_input+0x58>
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800653c:	2302      	movs	r3, #2
 800653e:	e7ed      	b.n	800651c <etharp_input+0x60>
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8006540:	f106 0125 	add.w	r1, r6, #37	; 0x25
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8006544:	1d33      	adds	r3, r6, #4
      etharp_raw(netif,
 8006546:	2202      	movs	r2, #2
 8006548:	9203      	str	r2, [sp, #12]
 800654a:	aa05      	add	r2, sp, #20
 800654c:	9202      	str	r2, [sp, #8]
 800654e:	f8cd 8004 	str.w	r8, [sp, #4]
 8006552:	9300      	str	r3, [sp, #0]
 8006554:	460b      	mov	r3, r1
 8006556:	4642      	mov	r2, r8
 8006558:	4630      	mov	r0, r6
 800655a:	f7ff ff0f 	bl	800637c <etharp_raw>
 800655e:	e7e7      	b.n	8006530 <etharp_input+0x74>
 8006560:	0800e680 	.word	0x0800e680
 8006564:	0800e7b0 	.word	0x0800e7b0
 8006568:	0800de34 	.word	0x0800de34

0800656c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800656c:	b508      	push	{r3, lr}
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800656e:	4a02      	ldr	r2, [pc, #8]	; (8006578 <etharp_request+0xc>)
 8006570:	f7ff ff74 	bl	800645c <etharp_request_dst>
}
 8006574:	bd08      	pop	{r3, pc}
 8006576:	bf00      	nop
 8006578:	0800ff04 	.word	0x0800ff04

0800657c <etharp_tmr>:
{
 800657c:	b538      	push	{r3, r4, r5, lr}
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800657e:	2400      	movs	r4, #0
 8006580:	e005      	b.n	800658e <etharp_tmr+0x12>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8006582:	2b04      	cmp	r3, #4
 8006584:	d91d      	bls.n	80065c2 <etharp_tmr+0x46>
        etharp_free_entry(i);
 8006586:	f7ff fda5 	bl	80060d4 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800658a:	3401      	adds	r4, #1
 800658c:	b2e4      	uxtb	r4, r4
 800658e:	2c09      	cmp	r4, #9
 8006590:	d838      	bhi.n	8006604 <etharp_tmr+0x88>
    u8_t state = arp_table[i].state;
 8006592:	4620      	mov	r0, r4
 8006594:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8006598:	00da      	lsls	r2, r3, #3
 800659a:	4b1b      	ldr	r3, [pc, #108]	; (8006608 <etharp_tmr+0x8c>)
 800659c:	4413      	add	r3, r2
 800659e:	7d1b      	ldrb	r3, [r3, #20]
    if (state != ETHARP_STATE_EMPTY
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d0f2      	beq.n	800658a <etharp_tmr+0xe>
      arp_table[i].ctime++;
 80065a4:	4611      	mov	r1, r2
 80065a6:	4a18      	ldr	r2, [pc, #96]	; (8006608 <etharp_tmr+0x8c>)
 80065a8:	440a      	add	r2, r1
 80065aa:	8a53      	ldrh	r3, [r2, #18]
 80065ac:	3301      	adds	r3, #1
 80065ae:	b29b      	uxth	r3, r3
 80065b0:	8253      	strh	r3, [r2, #18]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80065b2:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80065b6:	d2e6      	bcs.n	8006586 <etharp_tmr+0xa>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80065b8:	4a13      	ldr	r2, [pc, #76]	; (8006608 <etharp_tmr+0x8c>)
 80065ba:	440a      	add	r2, r1
 80065bc:	7d12      	ldrb	r2, [r2, #20]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80065be:	2a01      	cmp	r2, #1
 80065c0:	d0df      	beq.n	8006582 <etharp_tmr+0x6>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80065c2:	2a03      	cmp	r2, #3
 80065c4:	d00e      	beq.n	80065e4 <etharp_tmr+0x68>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80065c6:	2a04      	cmp	r2, #4
 80065c8:	d014      	beq.n	80065f4 <etharp_tmr+0x78>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80065ca:	2a01      	cmp	r2, #1
 80065cc:	d1dd      	bne.n	800658a <etharp_tmr+0xe>
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80065ce:	4a0e      	ldr	r2, [pc, #56]	; (8006608 <etharp_tmr+0x8c>)
 80065d0:	0043      	lsls	r3, r0, #1
 80065d2:	181d      	adds	r5, r3, r0
 80065d4:	00e9      	lsls	r1, r5, #3
 80065d6:	4411      	add	r1, r2
 80065d8:	460a      	mov	r2, r1
 80065da:	3104      	adds	r1, #4
 80065dc:	6890      	ldr	r0, [r2, #8]
 80065de:	f7ff ffc5 	bl	800656c <etharp_request>
 80065e2:	e7d2      	b.n	800658a <etharp_tmr+0xe>
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80065e4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80065e8:	00c2      	lsls	r2, r0, #3
 80065ea:	4b07      	ldr	r3, [pc, #28]	; (8006608 <etharp_tmr+0x8c>)
 80065ec:	4413      	add	r3, r2
 80065ee:	2204      	movs	r2, #4
 80065f0:	751a      	strb	r2, [r3, #20]
 80065f2:	e7ca      	b.n	800658a <etharp_tmr+0xe>
        arp_table[i].state = ETHARP_STATE_STABLE;
 80065f4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80065f8:	00c2      	lsls	r2, r0, #3
 80065fa:	4b03      	ldr	r3, [pc, #12]	; (8006608 <etharp_tmr+0x8c>)
 80065fc:	4413      	add	r3, r2
 80065fe:	2202      	movs	r2, #2
 8006600:	751a      	strb	r2, [r3, #20]
 8006602:	e7c2      	b.n	800658a <etharp_tmr+0xe>
}
 8006604:	bd38      	pop	{r3, r4, r5, pc}
 8006606:	bf00      	nop
 8006608:	20003e44 	.word	0x20003e44

0800660c <etharp_output_to_arp_index>:
{
 800660c:	b570      	push	{r4, r5, r6, lr}
 800660e:	b082      	sub	sp, #8
 8006610:	4605      	mov	r5, r0
 8006612:	460e      	mov	r6, r1
 8006614:	4614      	mov	r4, r2
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8006616:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 800661a:	00da      	lsls	r2, r3, #3
 800661c:	4b2c      	ldr	r3, [pc, #176]	; (80066d0 <etharp_output_to_arp_index+0xc4>)
 800661e:	4413      	add	r3, r2
 8006620:	7d1b      	ldrb	r3, [r3, #20]
 8006622:	2b01      	cmp	r3, #1
 8006624:	d919      	bls.n	800665a <etharp_output_to_arp_index+0x4e>
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8006626:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800662a:	00da      	lsls	r2, r3, #3
 800662c:	4b28      	ldr	r3, [pc, #160]	; (80066d0 <etharp_output_to_arp_index+0xc4>)
 800662e:	4413      	add	r3, r2
 8006630:	7d1b      	ldrb	r3, [r3, #20]
 8006632:	2b02      	cmp	r3, #2
 8006634:	d019      	beq.n	800666a <etharp_output_to_arp_index+0x5e>
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8006636:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800663a:	00e3      	lsls	r3, r4, #3
 800663c:	3308      	adds	r3, #8
 800663e:	4a24      	ldr	r2, [pc, #144]	; (80066d0 <etharp_output_to_arp_index+0xc4>)
 8006640:	4413      	add	r3, r2
 8006642:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006646:	9200      	str	r2, [sp, #0]
 8006648:	3304      	adds	r3, #4
 800664a:	f105 0225 	add.w	r2, r5, #37	; 0x25
 800664e:	4631      	mov	r1, r6
 8006650:	4628      	mov	r0, r5
 8006652:	f006 f823 	bl	800c69c <ethernet_output>
}
 8006656:	b002      	add	sp, #8
 8006658:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800665a:	4b1e      	ldr	r3, [pc, #120]	; (80066d4 <etharp_output_to_arp_index+0xc8>)
 800665c:	f240 22ed 	movw	r2, #749	; 0x2ed
 8006660:	491d      	ldr	r1, [pc, #116]	; (80066d8 <etharp_output_to_arp_index+0xcc>)
 8006662:	481e      	ldr	r0, [pc, #120]	; (80066dc <etharp_output_to_arp_index+0xd0>)
 8006664:	f006 ffc9 	bl	800d5fa <iprintf>
 8006668:	e7dd      	b.n	8006626 <etharp_output_to_arp_index+0x1a>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800666a:	4b19      	ldr	r3, [pc, #100]	; (80066d0 <etharp_output_to_arp_index+0xc4>)
 800666c:	4413      	add	r3, r2
 800666e:	8a5b      	ldrh	r3, [r3, #18]
 8006670:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8006674:	d819      	bhi.n	80066aa <etharp_output_to_arp_index+0x9e>
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8006676:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800667a:	d3dc      	bcc.n	8006636 <etharp_output_to_arp_index+0x2a>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800667c:	4a14      	ldr	r2, [pc, #80]	; (80066d0 <etharp_output_to_arp_index+0xc4>)
 800667e:	0063      	lsls	r3, r4, #1
 8006680:	1918      	adds	r0, r3, r4
 8006682:	00c1      	lsls	r1, r0, #3
 8006684:	4608      	mov	r0, r1
 8006686:	4411      	add	r1, r2
 8006688:	3008      	adds	r0, #8
 800668a:	4402      	add	r2, r0
 800668c:	3204      	adds	r2, #4
 800668e:	3104      	adds	r1, #4
 8006690:	4628      	mov	r0, r5
 8006692:	f7ff fee3 	bl	800645c <etharp_request_dst>
 8006696:	2800      	cmp	r0, #0
 8006698:	d1cd      	bne.n	8006636 <etharp_output_to_arp_index+0x2a>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800669a:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800669e:	00da      	lsls	r2, r3, #3
 80066a0:	4b0b      	ldr	r3, [pc, #44]	; (80066d0 <etharp_output_to_arp_index+0xc4>)
 80066a2:	4413      	add	r3, r2
 80066a4:	2203      	movs	r2, #3
 80066a6:	751a      	strb	r2, [r3, #20]
 80066a8:	e7c5      	b.n	8006636 <etharp_output_to_arp_index+0x2a>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80066aa:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 80066ae:	00d3      	lsls	r3, r2, #3
 80066b0:	4907      	ldr	r1, [pc, #28]	; (80066d0 <etharp_output_to_arp_index+0xc4>)
 80066b2:	4419      	add	r1, r3
 80066b4:	3104      	adds	r1, #4
 80066b6:	4628      	mov	r0, r5
 80066b8:	f7ff ff58 	bl	800656c <etharp_request>
 80066bc:	2800      	cmp	r0, #0
 80066be:	d1ba      	bne.n	8006636 <etharp_output_to_arp_index+0x2a>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80066c0:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 80066c4:	00da      	lsls	r2, r3, #3
 80066c6:	4b02      	ldr	r3, [pc, #8]	; (80066d0 <etharp_output_to_arp_index+0xc4>)
 80066c8:	4413      	add	r3, r2
 80066ca:	2203      	movs	r2, #3
 80066cc:	751a      	strb	r2, [r3, #20]
 80066ce:	e7b2      	b.n	8006636 <etharp_output_to_arp_index+0x2a>
 80066d0:	20003e44 	.word	0x20003e44
 80066d4:	0800e680 	.word	0x0800e680
 80066d8:	0800e730 	.word	0x0800e730
 80066dc:	0800de34 	.word	0x0800de34

080066e0 <etharp_query>:
{
 80066e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80066e4:	b083      	sub	sp, #12
 80066e6:	4606      	mov	r6, r0
 80066e8:	460c      	mov	r4, r1
 80066ea:	4617      	mov	r7, r2
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
 80066ec:	f100 0825 	add.w	r8, r0, #37	; 0x25
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80066f0:	4601      	mov	r1, r0
 80066f2:	6820      	ldr	r0, [r4, #0]
 80066f4:	f000 fc33 	bl	8006f5e <ip4_addr_isbroadcast_u32>
 80066f8:	2800      	cmp	r0, #0
 80066fa:	f040 80aa 	bne.w	8006852 <etharp_query+0x172>
      ip4_addr_ismulticast(ipaddr) ||
 80066fe:	6823      	ldr	r3, [r4, #0]
 8006700:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8006704:	2ae0      	cmp	r2, #224	; 0xe0
 8006706:	f000 80a7 	beq.w	8006858 <etharp_query+0x178>
      ip4_addr_ismulticast(ipaddr) ||
 800670a:	2c00      	cmp	r4, #0
 800670c:	f000 80a7 	beq.w	800685e <etharp_query+0x17e>
      ip4_addr_isany(ipaddr)) {
 8006710:	2b00      	cmp	r3, #0
 8006712:	f000 80a7 	beq.w	8006864 <etharp_query+0x184>
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8006716:	4632      	mov	r2, r6
 8006718:	2101      	movs	r1, #1
 800671a:	4620      	mov	r0, r4
 800671c:	f7ff fcf4 	bl	8006108 <etharp_find_entry>
  if (i < 0) {
 8006720:	1e05      	subs	r5, r0, #0
 8006722:	f2c0 80a2 	blt.w	800686a <etharp_query+0x18a>
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8006726:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 800672a:	00da      	lsls	r2, r3, #3
 800672c:	4b51      	ldr	r3, [pc, #324]	; (8006874 <etharp_query+0x194>)
 800672e:	4413      	add	r3, r2
 8006730:	7d1b      	ldrb	r3, [r3, #20]
 8006732:	bb1b      	cbnz	r3, 800677c <etharp_query+0x9c>
    arp_table[i].state = ETHARP_STATE_PENDING;
 8006734:	006a      	lsls	r2, r5, #1
 8006736:	442a      	add	r2, r5
 8006738:	00d1      	lsls	r1, r2, #3
 800673a:	4b4e      	ldr	r3, [pc, #312]	; (8006874 <etharp_query+0x194>)
 800673c:	440b      	add	r3, r1
 800673e:	f04f 0901 	mov.w	r9, #1
 8006742:	f883 9014 	strb.w	r9, [r3, #20]
    arp_table[i].netif = netif;
 8006746:	609e      	str	r6, [r3, #8]
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8006748:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 800674c:	00da      	lsls	r2, r3, #3
 800674e:	4b49      	ldr	r3, [pc, #292]	; (8006874 <etharp_query+0x194>)
 8006750:	4413      	add	r3, r2
 8006752:	7d1b      	ldrb	r3, [r3, #20]
 8006754:	b1ab      	cbz	r3, 8006782 <etharp_query+0xa2>
  if (is_new_entry || (q == NULL)) {
 8006756:	f1b9 0f00 	cmp.w	r9, #0
 800675a:	d11a      	bne.n	8006792 <etharp_query+0xb2>
 800675c:	b1cf      	cbz	r7, 8006792 <etharp_query+0xb2>
  err_t result = ERR_MEM;
 800675e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
  LWIP_ASSERT("q != NULL", q != NULL);
 8006762:	b1f7      	cbz	r7, 80067a2 <etharp_query+0xc2>
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8006764:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8006768:	00da      	lsls	r2, r3, #3
 800676a:	4b42      	ldr	r3, [pc, #264]	; (8006874 <etharp_query+0x194>)
 800676c:	4413      	add	r3, r2
 800676e:	7d1b      	ldrb	r3, [r3, #20]
 8006770:	2b01      	cmp	r3, #1
 8006772:	d81e      	bhi.n	80067b2 <etharp_query+0xd2>
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8006774:	2b01      	cmp	r3, #1
 8006776:	d12c      	bne.n	80067d2 <etharp_query+0xf2>
 8006778:	463c      	mov	r4, r7
 800677a:	e032      	b.n	80067e2 <etharp_query+0x102>
  int is_new_entry = 0;
 800677c:	f04f 0900 	mov.w	r9, #0
 8006780:	e7e2      	b.n	8006748 <etharp_query+0x68>
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8006782:	4b3d      	ldr	r3, [pc, #244]	; (8006878 <etharp_query+0x198>)
 8006784:	f240 32c9 	movw	r2, #969	; 0x3c9
 8006788:	493c      	ldr	r1, [pc, #240]	; (800687c <etharp_query+0x19c>)
 800678a:	483d      	ldr	r0, [pc, #244]	; (8006880 <etharp_query+0x1a0>)
 800678c:	f006 ff35 	bl	800d5fa <iprintf>
 8006790:	e7e1      	b.n	8006756 <etharp_query+0x76>
    result = etharp_request(netif, ipaddr);
 8006792:	4621      	mov	r1, r4
 8006794:	4630      	mov	r0, r6
 8006796:	f7ff fee9 	bl	800656c <etharp_request>
 800679a:	4604      	mov	r4, r0
    if (q == NULL) {
 800679c:	2f00      	cmp	r7, #0
 800679e:	d1e0      	bne.n	8006762 <etharp_query+0x82>
 80067a0:	e017      	b.n	80067d2 <etharp_query+0xf2>
  LWIP_ASSERT("q != NULL", q != NULL);
 80067a2:	4b35      	ldr	r3, [pc, #212]	; (8006878 <etharp_query+0x198>)
 80067a4:	f240 32db 	movw	r2, #987	; 0x3db
 80067a8:	4936      	ldr	r1, [pc, #216]	; (8006884 <etharp_query+0x1a4>)
 80067aa:	4835      	ldr	r0, [pc, #212]	; (8006880 <etharp_query+0x1a0>)
 80067ac:	f006 ff25 	bl	800d5fa <iprintf>
 80067b0:	e7d8      	b.n	8006764 <etharp_query+0x84>
    ETHARP_SET_HINT(netif, i);
 80067b2:	4b35      	ldr	r3, [pc, #212]	; (8006888 <etharp_query+0x1a8>)
 80067b4:	701d      	strb	r5, [r3, #0]
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80067b6:	4613      	mov	r3, r2
 80067b8:	3308      	adds	r3, #8
 80067ba:	4a2e      	ldr	r2, [pc, #184]	; (8006874 <etharp_query+0x194>)
 80067bc:	4413      	add	r3, r2
 80067be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80067c2:	9200      	str	r2, [sp, #0]
 80067c4:	3304      	adds	r3, #4
 80067c6:	4642      	mov	r2, r8
 80067c8:	4639      	mov	r1, r7
 80067ca:	4630      	mov	r0, r6
 80067cc:	f005 ff66 	bl	800c69c <ethernet_output>
 80067d0:	4604      	mov	r4, r0
}
 80067d2:	4620      	mov	r0, r4
 80067d4:	b003      	add	sp, #12
 80067d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (p->type != PBUF_ROM) {
 80067da:	7b23      	ldrb	r3, [r4, #12]
 80067dc:	2b01      	cmp	r3, #1
 80067de:	d122      	bne.n	8006826 <etharp_query+0x146>
      p = p->next;
 80067e0:	6824      	ldr	r4, [r4, #0]
    while (p) {
 80067e2:	b174      	cbz	r4, 8006802 <etharp_query+0x122>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80067e4:	8962      	ldrh	r2, [r4, #10]
 80067e6:	8923      	ldrh	r3, [r4, #8]
 80067e8:	429a      	cmp	r2, r3
 80067ea:	d1f6      	bne.n	80067da <etharp_query+0xfa>
 80067ec:	6823      	ldr	r3, [r4, #0]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d0f3      	beq.n	80067da <etharp_query+0xfa>
 80067f2:	4b21      	ldr	r3, [pc, #132]	; (8006878 <etharp_query+0x198>)
 80067f4:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 80067f8:	4924      	ldr	r1, [pc, #144]	; (800688c <etharp_query+0x1ac>)
 80067fa:	4821      	ldr	r0, [pc, #132]	; (8006880 <etharp_query+0x1a0>)
 80067fc:	f006 fefd 	bl	800d5fa <iprintf>
 8006800:	e7eb      	b.n	80067da <etharp_query+0xfa>
    int copy_needed = 0;
 8006802:	2300      	movs	r3, #0
    if (copy_needed) {
 8006804:	b18b      	cbz	r3, 800682a <etharp_query+0x14a>
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 8006806:	2200      	movs	r2, #0
 8006808:	8921      	ldrh	r1, [r4, #8]
 800680a:	2002      	movs	r0, #2
 800680c:	f001 fcca 	bl	80081a4 <pbuf_alloc>
      if (p != NULL) {
 8006810:	4604      	mov	r4, r0
 8006812:	b170      	cbz	r0, 8006832 <etharp_query+0x152>
        if (pbuf_copy(p, q) != ERR_OK) {
 8006814:	4639      	mov	r1, r7
 8006816:	f001 fe87 	bl	8008528 <pbuf_copy>
 800681a:	b150      	cbz	r0, 8006832 <etharp_query+0x152>
          pbuf_free(p);
 800681c:	4620      	mov	r0, r4
 800681e:	f001 fc55 	bl	80080cc <pbuf_free>
          p = NULL;
 8006822:	2400      	movs	r4, #0
 8006824:	e005      	b.n	8006832 <etharp_query+0x152>
        copy_needed = 1;
 8006826:	2301      	movs	r3, #1
 8006828:	e7ec      	b.n	8006804 <etharp_query+0x124>
      pbuf_ref(p);
 800682a:	4638      	mov	r0, r7
 800682c:	f001 fe1e 	bl	800846c <pbuf_ref>
      p = q;
 8006830:	463c      	mov	r4, r7
    if (p != NULL) {
 8006832:	b1e4      	cbz	r4, 800686e <etharp_query+0x18e>
      if (arp_table[i].q != NULL) {
 8006834:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 8006838:	00d3      	lsls	r3, r2, #3
 800683a:	4a0e      	ldr	r2, [pc, #56]	; (8006874 <etharp_query+0x194>)
 800683c:	58d0      	ldr	r0, [r2, r3]
 800683e:	b108      	cbz	r0, 8006844 <etharp_query+0x164>
        pbuf_free(arp_table[i].q);
 8006840:	f001 fc44 	bl	80080cc <pbuf_free>
      arp_table[i].q = p;
 8006844:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006848:	00eb      	lsls	r3, r5, #3
 800684a:	4a0a      	ldr	r2, [pc, #40]	; (8006874 <etharp_query+0x194>)
 800684c:	50d4      	str	r4, [r2, r3]
      result = ERR_OK;
 800684e:	2400      	movs	r4, #0
 8006850:	e7bf      	b.n	80067d2 <etharp_query+0xf2>
    return ERR_ARG;
 8006852:	f06f 040f 	mvn.w	r4, #15
 8006856:	e7bc      	b.n	80067d2 <etharp_query+0xf2>
 8006858:	f06f 040f 	mvn.w	r4, #15
 800685c:	e7b9      	b.n	80067d2 <etharp_query+0xf2>
 800685e:	f06f 040f 	mvn.w	r4, #15
 8006862:	e7b6      	b.n	80067d2 <etharp_query+0xf2>
 8006864:	f06f 040f 	mvn.w	r4, #15
 8006868:	e7b3      	b.n	80067d2 <etharp_query+0xf2>
    return (err_t)i;
 800686a:	462c      	mov	r4, r5
 800686c:	e7b1      	b.n	80067d2 <etharp_query+0xf2>
      result = ERR_MEM;
 800686e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006872:	e7ae      	b.n	80067d2 <etharp_query+0xf2>
 8006874:	20003e44 	.word	0x20003e44
 8006878:	0800e680 	.word	0x0800e680
 800687c:	0800e760 	.word	0x0800e760
 8006880:	0800de34 	.word	0x0800de34
 8006884:	0800e788 	.word	0x0800e788
 8006888:	20003f34 	.word	0x20003f34
 800688c:	0800e794 	.word	0x0800e794

08006890 <etharp_output>:
{
 8006890:	b570      	push	{r4, r5, r6, lr}
 8006892:	b084      	sub	sp, #16
 8006894:	460e      	mov	r6, r1
 8006896:	4614      	mov	r4, r2
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8006898:	4605      	mov	r5, r0
 800689a:	2800      	cmp	r0, #0
 800689c:	d02f      	beq.n	80068fe <etharp_output+0x6e>
  LWIP_ASSERT("q != NULL", q != NULL);
 800689e:	2e00      	cmp	r6, #0
 80068a0:	d035      	beq.n	800690e <etharp_output+0x7e>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80068a2:	2c00      	cmp	r4, #0
 80068a4:	d03b      	beq.n	800691e <etharp_output+0x8e>
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80068a6:	4629      	mov	r1, r5
 80068a8:	6820      	ldr	r0, [r4, #0]
 80068aa:	f000 fb58 	bl	8006f5e <ip4_addr_isbroadcast_u32>
 80068ae:	2800      	cmp	r0, #0
 80068b0:	d17a      	bne.n	80069a8 <etharp_output+0x118>
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80068b2:	6823      	ldr	r3, [r4, #0]
 80068b4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80068b8:	2ae0      	cmp	r2, #224	; 0xe0
 80068ba:	d038      	beq.n	800692e <etharp_output+0x9e>
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80068bc:	686a      	ldr	r2, [r5, #4]
 80068be:	68a9      	ldr	r1, [r5, #8]
 80068c0:	405a      	eors	r2, r3
 80068c2:	420a      	tst	r2, r1
 80068c4:	d009      	beq.n	80068da <etharp_output+0x4a>
        !ip4_addr_islinklocal(ipaddr)) {
 80068c6:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80068c8:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d004      	beq.n	80068da <etharp_output+0x4a>
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80068d0:	68eb      	ldr	r3, [r5, #12]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d074      	beq.n	80069c0 <etharp_output+0x130>
            dst_addr = netif_ip4_gw(netif);
 80068d6:	f105 040c 	add.w	r4, r5, #12
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80068da:	4b3b      	ldr	r3, [pc, #236]	; (80069c8 <etharp_output+0x138>)
 80068dc:	781a      	ldrb	r2, [r3, #0]
 80068de:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 80068e2:	00d9      	lsls	r1, r3, #3
 80068e4:	4b39      	ldr	r3, [pc, #228]	; (80069cc <etharp_output+0x13c>)
 80068e6:	440b      	add	r3, r1
 80068e8:	7d1b      	ldrb	r3, [r3, #20]
 80068ea:	2b01      	cmp	r3, #1
 80068ec:	d954      	bls.n	8006998 <etharp_output+0x108>
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80068ee:	6820      	ldr	r0, [r4, #0]
 80068f0:	4b36      	ldr	r3, [pc, #216]	; (80069cc <etharp_output+0x13c>)
 80068f2:	440b      	add	r3, r1
 80068f4:	685b      	ldr	r3, [r3, #4]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80068f6:	4298      	cmp	r0, r3
 80068f8:	d02f      	beq.n	800695a <etharp_output+0xca>
 80068fa:	2200      	movs	r2, #0
 80068fc:	e034      	b.n	8006968 <etharp_output+0xd8>
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80068fe:	4b34      	ldr	r3, [pc, #208]	; (80069d0 <etharp_output+0x140>)
 8006900:	f240 321b 	movw	r2, #795	; 0x31b
 8006904:	4933      	ldr	r1, [pc, #204]	; (80069d4 <etharp_output+0x144>)
 8006906:	4834      	ldr	r0, [pc, #208]	; (80069d8 <etharp_output+0x148>)
 8006908:	f006 fe77 	bl	800d5fa <iprintf>
 800690c:	e7c7      	b.n	800689e <etharp_output+0xe>
  LWIP_ASSERT("q != NULL", q != NULL);
 800690e:	4b30      	ldr	r3, [pc, #192]	; (80069d0 <etharp_output+0x140>)
 8006910:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8006914:	4931      	ldr	r1, [pc, #196]	; (80069dc <etharp_output+0x14c>)
 8006916:	4830      	ldr	r0, [pc, #192]	; (80069d8 <etharp_output+0x148>)
 8006918:	f006 fe6f 	bl	800d5fa <iprintf>
 800691c:	e7c1      	b.n	80068a2 <etharp_output+0x12>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800691e:	4b2c      	ldr	r3, [pc, #176]	; (80069d0 <etharp_output+0x140>)
 8006920:	f240 321d 	movw	r2, #797	; 0x31d
 8006924:	492e      	ldr	r1, [pc, #184]	; (80069e0 <etharp_output+0x150>)
 8006926:	482c      	ldr	r0, [pc, #176]	; (80069d8 <etharp_output+0x148>)
 8006928:	f006 fe67 	bl	800d5fa <iprintf>
 800692c:	e7bb      	b.n	80068a6 <etharp_output+0x16>
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800692e:	2301      	movs	r3, #1
 8006930:	f88d 3008 	strb.w	r3, [sp, #8]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8006934:	2300      	movs	r3, #0
 8006936:	f88d 3009 	strb.w	r3, [sp, #9]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800693a:	235e      	movs	r3, #94	; 0x5e
 800693c:	f88d 300a 	strb.w	r3, [sp, #10]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8006940:	7863      	ldrb	r3, [r4, #1]
 8006942:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006946:	f88d 300b 	strb.w	r3, [sp, #11]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800694a:	78a3      	ldrb	r3, [r4, #2]
 800694c:	f88d 300c 	strb.w	r3, [sp, #12]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8006950:	78e3      	ldrb	r3, [r4, #3]
 8006952:	f88d 300d 	strb.w	r3, [sp, #13]
    dest = &mcastaddr;
 8006956:	ab02      	add	r3, sp, #8
 8006958:	e027      	b.n	80069aa <etharp_output+0x11a>
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800695a:	4631      	mov	r1, r6
 800695c:	4628      	mov	r0, r5
 800695e:	f7ff fe55 	bl	800660c <etharp_output_to_arp_index>
 8006962:	e02b      	b.n	80069bc <etharp_output+0x12c>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8006964:	3201      	adds	r2, #1
 8006966:	b252      	sxtb	r2, r2
 8006968:	2a09      	cmp	r2, #9
 800696a:	dc17      	bgt.n	800699c <etharp_output+0x10c>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800696c:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8006970:	00d9      	lsls	r1, r3, #3
 8006972:	4b16      	ldr	r3, [pc, #88]	; (80069cc <etharp_output+0x13c>)
 8006974:	440b      	add	r3, r1
 8006976:	7d1b      	ldrb	r3, [r3, #20]
 8006978:	2b01      	cmp	r3, #1
 800697a:	d9f3      	bls.n	8006964 <etharp_output+0xd4>
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800697c:	6820      	ldr	r0, [r4, #0]
 800697e:	4b13      	ldr	r3, [pc, #76]	; (80069cc <etharp_output+0x13c>)
 8006980:	440b      	add	r3, r1
 8006982:	685b      	ldr	r3, [r3, #4]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8006984:	4298      	cmp	r0, r3
 8006986:	d1ed      	bne.n	8006964 <etharp_output+0xd4>
        ETHARP_SET_HINT(netif, i);
 8006988:	b2d2      	uxtb	r2, r2
 800698a:	4b0f      	ldr	r3, [pc, #60]	; (80069c8 <etharp_output+0x138>)
 800698c:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800698e:	4631      	mov	r1, r6
 8006990:	4628      	mov	r0, r5
 8006992:	f7ff fe3b 	bl	800660c <etharp_output_to_arp_index>
 8006996:	e011      	b.n	80069bc <etharp_output+0x12c>
 8006998:	2200      	movs	r2, #0
 800699a:	e7e5      	b.n	8006968 <etharp_output+0xd8>
    return etharp_query(netif, dst_addr, q);
 800699c:	4632      	mov	r2, r6
 800699e:	4621      	mov	r1, r4
 80069a0:	4628      	mov	r0, r5
 80069a2:	f7ff fe9d 	bl	80066e0 <etharp_query>
 80069a6:	e009      	b.n	80069bc <etharp_output+0x12c>
    dest = (const struct eth_addr *)&ethbroadcast;
 80069a8:	4b0e      	ldr	r3, [pc, #56]	; (80069e4 <etharp_output+0x154>)
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 80069aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80069ae:	9200      	str	r2, [sp, #0]
 80069b0:	f105 0225 	add.w	r2, r5, #37	; 0x25
 80069b4:	4631      	mov	r1, r6
 80069b6:	4628      	mov	r0, r5
 80069b8:	f005 fe70 	bl	800c69c <ethernet_output>
}
 80069bc:	b004      	add	sp, #16
 80069be:	bd70      	pop	{r4, r5, r6, pc}
            return ERR_RTE;
 80069c0:	f06f 0003 	mvn.w	r0, #3
 80069c4:	e7fa      	b.n	80069bc <etharp_output+0x12c>
 80069c6:	bf00      	nop
 80069c8:	20003f34 	.word	0x20003f34
 80069cc:	20003e44 	.word	0x20003e44
 80069d0:	0800e680 	.word	0x0800e680
 80069d4:	0800e7b0 	.word	0x0800e7b0
 80069d8:	0800de34 	.word	0x0800de34
 80069dc:	0800e788 	.word	0x0800e788
 80069e0:	0800e710 	.word	0x0800e710
 80069e4:	0800ff04 	.word	0x0800ff04

080069e8 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80069e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069ec:	b086      	sub	sp, #24
 80069ee:	4606      	mov	r6, r0
 80069f0:	4688      	mov	r8, r1
 80069f2:	4617      	mov	r7, r2

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80069f4:	2200      	movs	r2, #0
 80069f6:	2124      	movs	r1, #36	; 0x24
 80069f8:	2001      	movs	r0, #1
 80069fa:	f001 fbd3 	bl	80081a4 <pbuf_alloc>
                 PBUF_RAM);
  if (q == NULL) {
 80069fe:	2800      	cmp	r0, #0
 8006a00:	d037      	beq.n	8006a72 <icmp_send_response+0x8a>
 8006a02:	4605      	mov	r5, r0
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8006a04:	8943      	ldrh	r3, [r0, #10]
 8006a06:	2b23      	cmp	r3, #35	; 0x23
 8006a08:	d936      	bls.n	8006a78 <icmp_send_response+0x90>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8006a0a:	f8d6 e004 	ldr.w	lr, [r6, #4]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8006a0e:	686c      	ldr	r4, [r5, #4]
  icmphdr->type = type;
 8006a10:	f884 8000 	strb.w	r8, [r4]
  icmphdr->code = code;
 8006a14:	7067      	strb	r7, [r4, #1]
  icmphdr->id = 0;
 8006a16:	2300      	movs	r3, #0
 8006a18:	7123      	strb	r3, [r4, #4]
 8006a1a:	7163      	strb	r3, [r4, #5]
  icmphdr->seqno = 0;
 8006a1c:	71a3      	strb	r3, [r4, #6]
 8006a1e:	71e3      	strb	r3, [r4, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8006a20:	686f      	ldr	r7, [r5, #4]
 8006a22:	6873      	ldr	r3, [r6, #4]
 8006a24:	681e      	ldr	r6, [r3, #0]
 8006a26:	6858      	ldr	r0, [r3, #4]
 8006a28:	6899      	ldr	r1, [r3, #8]
 8006a2a:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 8006a2e:	60be      	str	r6, [r7, #8]
 8006a30:	60f8      	str	r0, [r7, #12]
 8006a32:	6139      	str	r1, [r7, #16]
 8006a34:	f8c7 c014 	str.w	ip, [r7, #20]
 8006a38:	691e      	ldr	r6, [r3, #16]
 8006a3a:	6958      	ldr	r0, [r3, #20]
 8006a3c:	6999      	ldr	r1, [r3, #24]
 8006a3e:	61be      	str	r6, [r7, #24]
 8006a40:	61f8      	str	r0, [r7, #28]
 8006a42:	6239      	str	r1, [r7, #32]
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8006a44:	f8de 300c 	ldr.w	r3, [lr, #12]
 8006a48:	a806      	add	r0, sp, #24
 8006a4a:	f840 3d04 	str.w	r3, [r0, #-4]!
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 8006a4e:	f000 f8cb 	bl	8006be8 <ip4_route>
#endif
  if (netif != NULL) {
 8006a52:	b158      	cbz	r0, 8006a6c <icmp_send_response+0x84>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8006a54:	2100      	movs	r1, #0
 8006a56:	70a1      	strb	r1, [r4, #2]
 8006a58:	70e1      	strb	r1, [r4, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8006a5a:	9002      	str	r0, [sp, #8]
 8006a5c:	2301      	movs	r3, #1
 8006a5e:	9301      	str	r3, [sp, #4]
 8006a60:	9100      	str	r1, [sp, #0]
 8006a62:	23ff      	movs	r3, #255	; 0xff
 8006a64:	aa05      	add	r2, sp, #20
 8006a66:	4628      	mov	r0, r5
 8006a68:	f000 fa64 	bl	8006f34 <ip4_output_if>
  }
  pbuf_free(q);
 8006a6c:	4628      	mov	r0, r5
 8006a6e:	f001 fb2d 	bl	80080cc <pbuf_free>
}
 8006a72:	b006      	add	sp, #24
 8006a74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8006a78:	4b03      	ldr	r3, [pc, #12]	; (8006a88 <icmp_send_response+0xa0>)
 8006a7a:	f44f 72b1 	mov.w	r2, #354	; 0x162
 8006a7e:	4903      	ldr	r1, [pc, #12]	; (8006a8c <icmp_send_response+0xa4>)
 8006a80:	4803      	ldr	r0, [pc, #12]	; (8006a90 <icmp_send_response+0xa8>)
 8006a82:	f006 fdba 	bl	800d5fa <iprintf>
 8006a86:	e7c0      	b.n	8006a0a <icmp_send_response+0x22>
 8006a88:	0800e8c8 	.word	0x0800e8c8
 8006a8c:	0800e900 	.word	0x0800e900
 8006a90:	0800de34 	.word	0x0800de34

08006a94 <icmp_input>:
{
 8006a94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a98:	b084      	sub	sp, #16
 8006a9a:	4605      	mov	r5, r0
  iphdr_in = ip4_current_header();
 8006a9c:	4b47      	ldr	r3, [pc, #284]	; (8006bbc <icmp_input+0x128>)
 8006a9e:	689e      	ldr	r6, [r3, #8]
  hlen = IPH_HL(iphdr_in) * 4;
 8006aa0:	7834      	ldrb	r4, [r6, #0]
 8006aa2:	f004 040f 	and.w	r4, r4, #15
 8006aa6:	00a4      	lsls	r4, r4, #2
  if (hlen < IP_HLEN) {
 8006aa8:	2c13      	cmp	r4, #19
 8006aaa:	d915      	bls.n	8006ad8 <icmp_input+0x44>
 8006aac:	460f      	mov	r7, r1
  if (p->len < sizeof(u16_t)*2) {
 8006aae:	8943      	ldrh	r3, [r0, #10]
 8006ab0:	2b03      	cmp	r3, #3
 8006ab2:	d911      	bls.n	8006ad8 <icmp_input+0x44>
  type = *((u8_t *)p->payload);
 8006ab4:	6843      	ldr	r3, [r0, #4]
 8006ab6:	781b      	ldrb	r3, [r3, #0]
  switch (type) {
 8006ab8:	2b08      	cmp	r3, #8
 8006aba:	d15d      	bne.n	8006b78 <icmp_input+0xe4>
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8006abc:	4b3f      	ldr	r3, [pc, #252]	; (8006bbc <icmp_input+0x128>)
 8006abe:	6958      	ldr	r0, [r3, #20]
 8006ac0:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 8006ac4:	2be0      	cmp	r3, #224	; 0xe0
 8006ac6:	d023      	beq.n	8006b10 <icmp_input+0x7c>
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8006ac8:	4b3c      	ldr	r3, [pc, #240]	; (8006bbc <icmp_input+0x128>)
 8006aca:	6819      	ldr	r1, [r3, #0]
 8006acc:	f000 fa47 	bl	8006f5e <ip4_addr_isbroadcast_u32>
 8006ad0:	b9f0      	cbnz	r0, 8006b10 <icmp_input+0x7c>
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8006ad2:	892b      	ldrh	r3, [r5, #8]
 8006ad4:	2b07      	cmp	r3, #7
 8006ad6:	d805      	bhi.n	8006ae4 <icmp_input+0x50>
  pbuf_free(p);
 8006ad8:	4628      	mov	r0, r5
 8006ada:	f001 faf7 	bl	80080cc <pbuf_free>
}
 8006ade:	b004      	add	sp, #16
 8006ae0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 8006ae4:	f104 010e 	add.w	r1, r4, #14
 8006ae8:	4628      	mov	r0, r5
 8006aea:	f001 fae5 	bl	80080b8 <pbuf_header>
 8006aee:	b3a8      	cbz	r0, 8006b5c <icmp_input+0xc8>
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 8006af0:	8929      	ldrh	r1, [r5, #8]
 8006af2:	4421      	add	r1, r4
 8006af4:	2200      	movs	r2, #0
 8006af6:	b289      	uxth	r1, r1
 8006af8:	2002      	movs	r0, #2
 8006afa:	f001 fb53 	bl	80081a4 <pbuf_alloc>
      if (r == NULL) {
 8006afe:	4680      	mov	r8, r0
 8006b00:	b130      	cbz	r0, 8006b10 <icmp_input+0x7c>
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8006b02:	8942      	ldrh	r2, [r0, #10]
 8006b04:	f104 0308 	add.w	r3, r4, #8
 8006b08:	429a      	cmp	r2, r3
 8006b0a:	d205      	bcs.n	8006b18 <icmp_input+0x84>
        pbuf_free(r);
 8006b0c:	f001 fade 	bl	80080cc <pbuf_free>
  pbuf_free(p);
 8006b10:	4628      	mov	r0, r5
 8006b12:	f001 fadb 	bl	80080cc <pbuf_free>
  return;
 8006b16:	e7e2      	b.n	8006ade <icmp_input+0x4a>
      MEMCPY(r->payload, iphdr_in, hlen);
 8006b18:	4622      	mov	r2, r4
 8006b1a:	4631      	mov	r1, r6
 8006b1c:	6840      	ldr	r0, [r0, #4]
 8006b1e:	f006 fed8 	bl	800d8d2 <memcpy>
      if (pbuf_header(r, (s16_t)-hlen)) {
 8006b22:	4261      	negs	r1, r4
 8006b24:	4640      	mov	r0, r8
 8006b26:	f001 fac7 	bl	80080b8 <pbuf_header>
 8006b2a:	b148      	cbz	r0, 8006b40 <icmp_input+0xac>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8006b2c:	4b24      	ldr	r3, [pc, #144]	; (8006bc0 <icmp_input+0x12c>)
 8006b2e:	22af      	movs	r2, #175	; 0xaf
 8006b30:	4924      	ldr	r1, [pc, #144]	; (8006bc4 <icmp_input+0x130>)
 8006b32:	4825      	ldr	r0, [pc, #148]	; (8006bc8 <icmp_input+0x134>)
 8006b34:	f006 fd61 	bl	800d5fa <iprintf>
        pbuf_free(r);
 8006b38:	4640      	mov	r0, r8
 8006b3a:	f001 fac7 	bl	80080cc <pbuf_free>
        goto icmperr;
 8006b3e:	e7e7      	b.n	8006b10 <icmp_input+0x7c>
      if (pbuf_copy(r, p) != ERR_OK) {
 8006b40:	4629      	mov	r1, r5
 8006b42:	4640      	mov	r0, r8
 8006b44:	f001 fcf0 	bl	8008528 <pbuf_copy>
 8006b48:	b118      	cbz	r0, 8006b52 <icmp_input+0xbe>
        pbuf_free(r);
 8006b4a:	4640      	mov	r0, r8
 8006b4c:	f001 fabe 	bl	80080cc <pbuf_free>
        goto icmperr;
 8006b50:	e7de      	b.n	8006b10 <icmp_input+0x7c>
      pbuf_free(p);
 8006b52:	4628      	mov	r0, r5
 8006b54:	f001 faba 	bl	80080cc <pbuf_free>
      p = r;
 8006b58:	4645      	mov	r5, r8
 8006b5a:	e007      	b.n	8006b6c <icmp_input+0xd8>
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 8006b5c:	f5c4 417f 	rsb	r1, r4, #65280	; 0xff00
 8006b60:	31f2      	adds	r1, #242	; 0xf2
 8006b62:	b209      	sxth	r1, r1
 8006b64:	4628      	mov	r0, r5
 8006b66:	f001 faa7 	bl	80080b8 <pbuf_header>
 8006b6a:	b948      	cbnz	r0, 8006b80 <icmp_input+0xec>
    iecho = (struct icmp_echo_hdr *)p->payload;
 8006b6c:	686e      	ldr	r6, [r5, #4]
    if (pbuf_header(p, (s16_t)hlen)) {
 8006b6e:	4621      	mov	r1, r4
 8006b70:	4628      	mov	r0, r5
 8006b72:	f001 faa1 	bl	80080b8 <pbuf_header>
 8006b76:	b150      	cbz	r0, 8006b8e <icmp_input+0xfa>
  pbuf_free(p);
 8006b78:	4628      	mov	r0, r5
 8006b7a:	f001 faa7 	bl	80080cc <pbuf_free>
  return;
 8006b7e:	e7ae      	b.n	8006ade <icmp_input+0x4a>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8006b80:	4b0f      	ldr	r3, [pc, #60]	; (8006bc0 <icmp_input+0x12c>)
 8006b82:	22c0      	movs	r2, #192	; 0xc0
 8006b84:	4911      	ldr	r1, [pc, #68]	; (8006bcc <icmp_input+0x138>)
 8006b86:	4810      	ldr	r0, [pc, #64]	; (8006bc8 <icmp_input+0x134>)
 8006b88:	f006 fd37 	bl	800d5fa <iprintf>
        goto icmperr;
 8006b8c:	e7c0      	b.n	8006b10 <icmp_input+0x7c>
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 8006b8e:	6868      	ldr	r0, [r5, #4]
      ip4_addr_copy(iphdr->src, *src);
 8006b90:	490a      	ldr	r1, [pc, #40]	; (8006bbc <icmp_input+0x128>)
 8006b92:	694b      	ldr	r3, [r1, #20]
 8006b94:	60c3      	str	r3, [r0, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8006b96:	690b      	ldr	r3, [r1, #16]
 8006b98:	6103      	str	r3, [r0, #16]
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	7032      	strb	r2, [r6, #0]
      iecho->chksum = 0;
 8006b9e:	70b2      	strb	r2, [r6, #2]
 8006ba0:	70f2      	strb	r2, [r6, #3]
      IPH_TTL_SET(iphdr, ICMP_TTL);
 8006ba2:	23ff      	movs	r3, #255	; 0xff
 8006ba4:	7203      	strb	r3, [r0, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 8006ba6:	7282      	strb	r2, [r0, #10]
 8006ba8:	72c2      	strb	r2, [r0, #11]
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8006baa:	9702      	str	r7, [sp, #8]
 8006bac:	2001      	movs	r0, #1
 8006bae:	9001      	str	r0, [sp, #4]
 8006bb0:	9200      	str	r2, [sp, #0]
 8006bb2:	3114      	adds	r1, #20
 8006bb4:	4628      	mov	r0, r5
 8006bb6:	f000 f9bd 	bl	8006f34 <ip4_output_if>
 8006bba:	e7dd      	b.n	8006b78 <icmp_input+0xe4>
 8006bbc:	20004274 	.word	0x20004274
 8006bc0:	0800e8c8 	.word	0x0800e8c8
 8006bc4:	0800e85c 	.word	0x0800e85c
 8006bc8:	0800de34 	.word	0x0800de34
 8006bcc:	0800e894 	.word	0x0800e894

08006bd0 <icmp_dest_unreach>:
{
 8006bd0:	b508      	push	{r3, lr}
  icmp_send_response(p, ICMP_DUR, t);
 8006bd2:	460a      	mov	r2, r1
 8006bd4:	2103      	movs	r1, #3
 8006bd6:	f7ff ff07 	bl	80069e8 <icmp_send_response>
 8006bda:	bd08      	pop	{r3, pc}

08006bdc <icmp_time_exceeded>:
{
 8006bdc:	b508      	push	{r3, lr}
  icmp_send_response(p, ICMP_TE, t);
 8006bde:	460a      	mov	r2, r1
 8006be0:	210b      	movs	r1, #11
 8006be2:	f7ff ff01 	bl	80069e8 <icmp_send_response>
 8006be6:	bd08      	pop	{r3, pc}

08006be8 <ip4_route>:
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 8006be8:	4b25      	ldr	r3, [pc, #148]	; (8006c80 <ip4_route+0x98>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	e02b      	b.n	8006c46 <ip4_route+0x5e>
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	b1ab      	cbz	r3, 8006c1e <ip4_route+0x36>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8006bf2:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 8006bf6:	f002 0105 	and.w	r1, r2, #5
 8006bfa:	2905      	cmp	r1, #5
 8006bfc:	d1f7      	bne.n	8006bee <ip4_route+0x6>
 8006bfe:	6859      	ldr	r1, [r3, #4]
 8006c00:	2900      	cmp	r1, #0
 8006c02:	d0f4      	beq.n	8006bee <ip4_route+0x6>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8006c04:	6804      	ldr	r4, [r0, #0]
 8006c06:	689d      	ldr	r5, [r3, #8]
 8006c08:	4061      	eors	r1, r4
 8006c0a:	4229      	tst	r1, r5
 8006c0c:	d016      	beq.n	8006c3c <ip4_route+0x54>
        /* return netif on which to forward IP packet */
        return netif;
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8006c0e:	f012 0f02 	tst.w	r2, #2
 8006c12:	d1ec      	bne.n	8006bee <ip4_route+0x6>
 8006c14:	68da      	ldr	r2, [r3, #12]
 8006c16:	4294      	cmp	r4, r2
 8006c18:	d1e9      	bne.n	8006bee <ip4_route+0x6>
        /* return netif on which to forward IP packet */
        return netif;
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	e00a      	b.n	8006c34 <ip4_route+0x4c>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8006c1e:	4a19      	ldr	r2, [pc, #100]	; (8006c84 <ip4_route+0x9c>)
 8006c20:	6810      	ldr	r0, [r2, #0]
 8006c22:	b138      	cbz	r0, 8006c34 <ip4_route+0x4c>
 8006c24:	f890 202b 	ldrb.w	r2, [r0, #43]	; 0x2b
 8006c28:	f002 0205 	and.w	r2, r2, #5
 8006c2c:	2a05      	cmp	r2, #5
 8006c2e:	d107      	bne.n	8006c40 <ip4_route+0x58>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
 8006c30:	6842      	ldr	r2, [r0, #4]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8006c32:	b10a      	cbz	r2, 8006c38 <ip4_route+0x50>
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
  }

  return netif_default;
}
 8006c34:	bc30      	pop	{r4, r5}
 8006c36:	4770      	bx	lr
    return NULL;
 8006c38:	4618      	mov	r0, r3
 8006c3a:	e7fb      	b.n	8006c34 <ip4_route+0x4c>
        return netif;
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	e7f9      	b.n	8006c34 <ip4_route+0x4c>
    return NULL;
 8006c40:	4618      	mov	r0, r3
 8006c42:	e7f7      	b.n	8006c34 <ip4_route+0x4c>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	b153      	cbz	r3, 8006c5e <ip4_route+0x76>
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8006c48:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 8006c4c:	f002 0105 	and.w	r1, r2, #5
 8006c50:	2905      	cmp	r1, #5
 8006c52:	d1f7      	bne.n	8006c44 <ip4_route+0x5c>
 8006c54:	6859      	ldr	r1, [r3, #4]
 8006c56:	2900      	cmp	r1, #0
 8006c58:	d0f4      	beq.n	8006c44 <ip4_route+0x5c>
{
 8006c5a:	b430      	push	{r4, r5}
 8006c5c:	e7d2      	b.n	8006c04 <ip4_route+0x1c>
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8006c5e:	4a09      	ldr	r2, [pc, #36]	; (8006c84 <ip4_route+0x9c>)
 8006c60:	6810      	ldr	r0, [r2, #0]
 8006c62:	2800      	cmp	r0, #0
 8006c64:	d0e7      	beq.n	8006c36 <ip4_route+0x4e>
 8006c66:	f890 202b 	ldrb.w	r2, [r0, #43]	; 0x2b
 8006c6a:	f002 0205 	and.w	r2, r2, #5
 8006c6e:	2a05      	cmp	r2, #5
 8006c70:	d104      	bne.n	8006c7c <ip4_route+0x94>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
 8006c72:	6842      	ldr	r2, [r0, #4]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8006c74:	2a00      	cmp	r2, #0
 8006c76:	d1de      	bne.n	8006c36 <ip4_route+0x4e>
    return NULL;
 8006c78:	4618      	mov	r0, r3
 8006c7a:	4770      	bx	lr
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	4770      	bx	lr
 8006c80:	20007974 	.word	0x20007974
 8006c84:	20007978 	.word	0x20007978

08006c88 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8006c88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c8c:	4605      	mov	r5, r0

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8006c8e:	f8d0 8004 	ldr.w	r8, [r0, #4]
  if (IPH_V(iphdr) != 4) {
 8006c92:	f898 3000 	ldrb.w	r3, [r8]
 8006c96:	091a      	lsrs	r2, r3, #4
 8006c98:	2a04      	cmp	r2, #4
 8006c9a:	d004      	beq.n	8006ca6 <ip4_input+0x1e>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8006c9c:	f001 fa16 	bl	80080cc <pbuf_free>
  ip_data.current_ip_header_tot_len = 0;
  ip4_addr_set_any(ip4_current_src_addr());
  ip4_addr_set_any(ip4_current_dest_addr());

  return ERR_OK;
}
 8006ca0:	2000      	movs	r0, #0
 8006ca2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ca6:	460f      	mov	r7, r1
  iphdr_hlen = IPH_HL(iphdr);
 8006ca8:	f003 030f 	and.w	r3, r3, #15
  iphdr_hlen *= 4;
 8006cac:	009e      	lsls	r6, r3, #2
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8006cae:	f8b8 0002 	ldrh.w	r0, [r8, #2]
 8006cb2:	f7ff f9ef 	bl	8006094 <lwip_htons>
 8006cb6:	4604      	mov	r4, r0
  if (iphdr_len < p->tot_len) {
 8006cb8:	892b      	ldrh	r3, [r5, #8]
 8006cba:	4298      	cmp	r0, r3
 8006cbc:	d316      	bcc.n	8006cec <ip4_input+0x64>
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8006cbe:	896b      	ldrh	r3, [r5, #10]
 8006cc0:	429e      	cmp	r6, r3
 8006cc2:	d818      	bhi.n	8006cf6 <ip4_input+0x6e>
 8006cc4:	892b      	ldrh	r3, [r5, #8]
 8006cc6:	429c      	cmp	r4, r3
 8006cc8:	d815      	bhi.n	8006cf6 <ip4_input+0x6e>
 8006cca:	2e13      	cmp	r6, #19
 8006ccc:	d913      	bls.n	8006cf6 <ip4_input+0x6e>
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8006cce:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8006cd2:	4a59      	ldr	r2, [pc, #356]	; (8006e38 <ip4_input+0x1b0>)
 8006cd4:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8006cd6:	f8d8 100c 	ldr.w	r1, [r8, #12]
 8006cda:	6111      	str	r1, [r2, #16]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8006cdc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006ce0:	2be0      	cmp	r3, #224	; 0xe0
 8006ce2:	d00c      	beq.n	8006cfe <ip4_input+0x76>
 8006ce4:	463c      	mov	r4, r7
 8006ce6:	f04f 0901 	mov.w	r9, #1
 8006cea:	e015      	b.n	8006d18 <ip4_input+0x90>
    pbuf_realloc(p, iphdr_len);
 8006cec:	4601      	mov	r1, r0
 8006cee:	4628      	mov	r0, r5
 8006cf0:	f001 fb40 	bl	8008374 <pbuf_realloc>
 8006cf4:	e7e3      	b.n	8006cbe <ip4_input+0x36>
    pbuf_free(p);
 8006cf6:	4628      	mov	r0, r5
 8006cf8:	f001 f9e8 	bl	80080cc <pbuf_free>
    return ERR_OK;
 8006cfc:	e7d0      	b.n	8006ca0 <ip4_input+0x18>
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8006cfe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006d02:	f013 0f01 	tst.w	r3, #1
 8006d06:	d024      	beq.n	8006d52 <ip4_input+0xca>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	bb23      	cbnz	r3, 8006d56 <ip4_input+0xce>
      netif = NULL;
 8006d0c:	2400      	movs	r4, #0
 8006d0e:	e025      	b.n	8006d5c <ip4_input+0xd4>
        netif = netif->next;
 8006d10:	6824      	ldr	r4, [r4, #0]
      if (netif == inp) {
 8006d12:	42bc      	cmp	r4, r7
 8006d14:	d01b      	beq.n	8006d4e <ip4_input+0xc6>
    } while (netif != NULL);
 8006d16:	b30c      	cbz	r4, 8006d5c <ip4_input+0xd4>
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8006d18:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 8006d1c:	f013 0f01 	tst.w	r3, #1
 8006d20:	d009      	beq.n	8006d36 <ip4_input+0xae>
 8006d22:	6863      	ldr	r3, [r4, #4]
 8006d24:	b13b      	cbz	r3, 8006d36 <ip4_input+0xae>
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8006d26:	4a44      	ldr	r2, [pc, #272]	; (8006e38 <ip4_input+0x1b0>)
 8006d28:	6950      	ldr	r0, [r2, #20]
 8006d2a:	4283      	cmp	r3, r0
 8006d2c:	d016      	beq.n	8006d5c <ip4_input+0xd4>
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8006d2e:	4621      	mov	r1, r4
 8006d30:	f000 f915 	bl	8006f5e <ip4_addr_isbroadcast_u32>
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8006d34:	b990      	cbnz	r0, 8006d5c <ip4_input+0xd4>
      if (first) {
 8006d36:	f1b9 0f00 	cmp.w	r9, #0
 8006d3a:	d0e9      	beq.n	8006d10 <ip4_input+0x88>
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 8006d3c:	4b3e      	ldr	r3, [pc, #248]	; (8006e38 <ip4_input+0x1b0>)
 8006d3e:	7d1b      	ldrb	r3, [r3, #20]
 8006d40:	2b7f      	cmp	r3, #127	; 0x7f
 8006d42:	d00a      	beq.n	8006d5a <ip4_input+0xd2>
        netif = netif_list;
 8006d44:	4b3d      	ldr	r3, [pc, #244]	; (8006e3c <ip4_input+0x1b4>)
 8006d46:	681c      	ldr	r4, [r3, #0]
        first = 0;
 8006d48:	f04f 0900 	mov.w	r9, #0
 8006d4c:	e7e1      	b.n	8006d12 <ip4_input+0x8a>
        netif = netif->next;
 8006d4e:	6824      	ldr	r4, [r4, #0]
 8006d50:	e7e1      	b.n	8006d16 <ip4_input+0x8e>
      netif = NULL;
 8006d52:	2400      	movs	r4, #0
 8006d54:	e002      	b.n	8006d5c <ip4_input+0xd4>
      netif = inp;
 8006d56:	463c      	mov	r4, r7
 8006d58:	e000      	b.n	8006d5c <ip4_input+0xd4>
          netif = NULL;
 8006d5a:	2400      	movs	r4, #0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8006d5c:	4639      	mov	r1, r7
 8006d5e:	4b36      	ldr	r3, [pc, #216]	; (8006e38 <ip4_input+0x1b0>)
 8006d60:	6918      	ldr	r0, [r3, #16]
 8006d62:	f000 f8fc 	bl	8006f5e <ip4_addr_isbroadcast_u32>
 8006d66:	2800      	cmp	r0, #0
 8006d68:	d146      	bne.n	8006df8 <ip4_input+0x170>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8006d6a:	4b33      	ldr	r3, [pc, #204]	; (8006e38 <ip4_input+0x1b0>)
 8006d6c:	691b      	ldr	r3, [r3, #16]
 8006d6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8006d72:	2be0      	cmp	r3, #224	; 0xe0
 8006d74:	d040      	beq.n	8006df8 <ip4_input+0x170>
  if (netif == NULL) {
 8006d76:	2c00      	cmp	r4, #0
 8006d78:	d042      	beq.n	8006e00 <ip4_input+0x178>
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8006d7a:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8006d7e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006d82:	b29b      	uxth	r3, r3
 8006d84:	b13b      	cbz	r3, 8006d96 <ip4_input+0x10e>
    p = ip4_reass(p);
 8006d86:	4628      	mov	r0, r5
 8006d88:	f000 fb38 	bl	80073fc <ip4_reass>
    if (p == NULL) {
 8006d8c:	4605      	mov	r5, r0
 8006d8e:	2800      	cmp	r0, #0
 8006d90:	d086      	beq.n	8006ca0 <ip4_input+0x18>
    iphdr = (struct ip_hdr *)p->payload;
 8006d92:	f8d0 8004 	ldr.w	r8, [r0, #4]
  ip_data.current_netif = netif;
 8006d96:	4a28      	ldr	r2, [pc, #160]	; (8006e38 <ip4_input+0x1b0>)
 8006d98:	6014      	str	r4, [r2, #0]
  ip_data.current_input_netif = inp;
 8006d9a:	6057      	str	r7, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8006d9c:	f8c2 8008 	str.w	r8, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 8006da0:	f898 3000 	ldrb.w	r3, [r8]
 8006da4:	f003 030f 	and.w	r3, r3, #15
 8006da8:	009b      	lsls	r3, r3, #2
 8006daa:	8193      	strh	r3, [r2, #12]
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 8006dac:	4271      	negs	r1, r6
 8006dae:	4628      	mov	r0, r5
 8006db0:	f001 f982 	bl	80080b8 <pbuf_header>
    switch (IPH_PROTO(iphdr)) {
 8006db4:	f898 3009 	ldrb.w	r3, [r8, #9]
 8006db8:	2b06      	cmp	r3, #6
 8006dba:	d032      	beq.n	8006e22 <ip4_input+0x19a>
 8006dbc:	2b11      	cmp	r3, #17
 8006dbe:	d023      	beq.n	8006e08 <ip4_input+0x180>
 8006dc0:	2b01      	cmp	r3, #1
 8006dc2:	d033      	beq.n	8006e2c <ip4_input+0x1a4>
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8006dc4:	4621      	mov	r1, r4
 8006dc6:	4b1c      	ldr	r3, [pc, #112]	; (8006e38 <ip4_input+0x1b0>)
 8006dc8:	6958      	ldr	r0, [r3, #20]
 8006dca:	f000 f8c8 	bl	8006f5e <ip4_addr_isbroadcast_u32>
 8006dce:	b978      	cbnz	r0, 8006df0 <ip4_input+0x168>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8006dd0:	4b19      	ldr	r3, [pc, #100]	; (8006e38 <ip4_input+0x1b0>)
 8006dd2:	695b      	ldr	r3, [r3, #20]
 8006dd4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8006dd8:	2be0      	cmp	r3, #224	; 0xe0
 8006dda:	d009      	beq.n	8006df0 <ip4_input+0x168>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 8006ddc:	4631      	mov	r1, r6
 8006dde:	4628      	mov	r0, r5
 8006de0:	f001 f96f 	bl	80080c2 <pbuf_header_force>
        p->payload = iphdr;
 8006de4:	f8c5 8004 	str.w	r8, [r5, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8006de8:	2102      	movs	r1, #2
 8006dea:	4628      	mov	r0, r5
 8006dec:	f7ff fef0 	bl	8006bd0 <icmp_dest_unreach>
      pbuf_free(p);
 8006df0:	4628      	mov	r0, r5
 8006df2:	f001 f96b 	bl	80080cc <pbuf_free>
 8006df6:	e00b      	b.n	8006e10 <ip4_input+0x188>
      pbuf_free(p);
 8006df8:	4628      	mov	r0, r5
 8006dfa:	f001 f967 	bl	80080cc <pbuf_free>
      return ERR_OK;
 8006dfe:	e74f      	b.n	8006ca0 <ip4_input+0x18>
    pbuf_free(p);
 8006e00:	4628      	mov	r0, r5
 8006e02:	f001 f963 	bl	80080cc <pbuf_free>
    return ERR_OK;
 8006e06:	e74b      	b.n	8006ca0 <ip4_input+0x18>
      udp_input(p, inp);
 8006e08:	4639      	mov	r1, r7
 8006e0a:	4628      	mov	r0, r5
 8006e0c:	f005 fa12 	bl	800c234 <udp_input>
  ip_data.current_netif = NULL;
 8006e10:	4b09      	ldr	r3, [pc, #36]	; (8006e38 <ip4_input+0x1b0>)
 8006e12:	2200      	movs	r2, #0
 8006e14:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8006e16:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8006e18:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8006e1a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8006e1c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8006e1e:	615a      	str	r2, [r3, #20]
  return ERR_OK;
 8006e20:	e73e      	b.n	8006ca0 <ip4_input+0x18>
      tcp_input(p, inp);
 8006e22:	4639      	mov	r1, r7
 8006e24:	4628      	mov	r0, r5
 8006e26:	f003 fde1 	bl	800a9ec <tcp_input>
      break;
 8006e2a:	e7f1      	b.n	8006e10 <ip4_input+0x188>
      icmp_input(p, inp);
 8006e2c:	4639      	mov	r1, r7
 8006e2e:	4628      	mov	r0, r5
 8006e30:	f7ff fe30 	bl	8006a94 <icmp_input>
      break;
 8006e34:	e7ec      	b.n	8006e10 <ip4_input+0x188>
 8006e36:	bf00      	nop
 8006e38:	20004274 	.word	0x20004274
 8006e3c:	20007974 	.word	0x20007974

08006e40 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 8006e40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006e44:	b083      	sub	sp, #12
 8006e46:	4605      	mov	r5, r0
 8006e48:	4689      	mov	r9, r1
 8006e4a:	4616      	mov	r6, r2
 8006e4c:	4698      	mov	r8, r3
 8006e4e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8006e50:	89c3      	ldrh	r3, [r0, #14]
 8006e52:	2b01      	cmp	r3, #1
 8006e54:	d006      	beq.n	8006e64 <ip4_output_if_src+0x24>
 8006e56:	4b31      	ldr	r3, [pc, #196]	; (8006f1c <ip4_output_if_src+0xdc>)
 8006e58:	f240 3233 	movw	r2, #819	; 0x333
 8006e5c:	4930      	ldr	r1, [pc, #192]	; (8006f20 <ip4_output_if_src+0xe0>)
 8006e5e:	4831      	ldr	r0, [pc, #196]	; (8006f24 <ip4_output_if_src+0xe4>)
 8006e60:	f006 fbcb 	bl	800d5fa <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8006e64:	2e00      	cmp	r6, #0
 8006e66:	d04a      	beq.n	8006efe <ip4_output_if_src+0xbe>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 8006e68:	2114      	movs	r1, #20
 8006e6a:	4628      	mov	r0, r5
 8006e6c:	f001 f924 	bl	80080b8 <pbuf_header>
 8006e70:	2800      	cmp	r0, #0
 8006e72:	d150      	bne.n	8006f16 <ip4_output_if_src+0xd6>
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
    }

    iphdr = (struct ip_hdr *)p->payload;
 8006e74:	686c      	ldr	r4, [r5, #4]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8006e76:	896b      	ldrh	r3, [r5, #10]
 8006e78:	2b13      	cmp	r3, #19
 8006e7a:	d934      	bls.n	8006ee6 <ip4_output_if_src+0xa6>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8006e7c:	f884 8008 	strb.w	r8, [r4, #8]
    IPH_PROTO_SET(iphdr, proto);
 8006e80:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 8006e84:	7263      	strb	r3, [r4, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8006e86:	6833      	ldr	r3, [r6, #0]
 8006e88:	6123      	str	r3, [r4, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8006e8a:	2345      	movs	r3, #69	; 0x45
 8006e8c:	7023      	strb	r3, [r4, #0]
    IPH_TOS_SET(iphdr, tos);
 8006e8e:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8006e92:	7063      	strb	r3, [r4, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8006e94:	8928      	ldrh	r0, [r5, #8]
 8006e96:	f7ff f8fd 	bl	8006094 <lwip_htons>
 8006e9a:	8060      	strh	r0, [r4, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	71a3      	strb	r3, [r4, #6]
 8006ea0:	71e3      	strb	r3, [r4, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8006ea2:	f8df 808c 	ldr.w	r8, [pc, #140]	; 8006f30 <ip4_output_if_src+0xf0>
 8006ea6:	f8b8 0000 	ldrh.w	r0, [r8]
 8006eaa:	f7ff f8f3 	bl	8006094 <lwip_htons>
 8006eae:	80a0      	strh	r0, [r4, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8006eb0:	f8b8 3000 	ldrh.w	r3, [r8]
 8006eb4:	3301      	adds	r3, #1
 8006eb6:	f8a8 3000 	strh.w	r3, [r8]

    if (src == NULL) {
 8006eba:	f1b9 0f00 	cmp.w	r9, #0
 8006ebe:	d01a      	beq.n	8006ef6 <ip4_output_if_src+0xb6>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8006ec0:	f8d9 3000 	ldr.w	r3, [r9]
 8006ec4:	60e3      	str	r3, [r4, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	72a3      	strb	r3, [r4, #10]
 8006eca:	72e3      	strb	r3, [r4, #11]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8006ecc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006ece:	b113      	cbz	r3, 8006ed6 <ip4_output_if_src+0x96>
 8006ed0:	892a      	ldrh	r2, [r5, #8]
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d319      	bcc.n	8006f0a <ip4_output_if_src+0xca>
    return ip4_frag(p, netif, dest);
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	4632      	mov	r2, r6
 8006eda:	4629      	mov	r1, r5
 8006edc:	4638      	mov	r0, r7
 8006ede:	4798      	blx	r3
}
 8006ee0:	b003      	add	sp, #12
 8006ee2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8006ee6:	4b0d      	ldr	r3, [pc, #52]	; (8006f1c <ip4_output_if_src+0xdc>)
 8006ee8:	f240 3261 	movw	r2, #865	; 0x361
 8006eec:	490e      	ldr	r1, [pc, #56]	; (8006f28 <ip4_output_if_src+0xe8>)
 8006eee:	480d      	ldr	r0, [pc, #52]	; (8006f24 <ip4_output_if_src+0xe4>)
 8006ef0:	f006 fb83 	bl	800d5fa <iprintf>
 8006ef4:	e7c2      	b.n	8006e7c <ip4_output_if_src+0x3c>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8006ef6:	4b0d      	ldr	r3, [pc, #52]	; (8006f2c <ip4_output_if_src+0xec>)
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	60e3      	str	r3, [r4, #12]
 8006efc:	e7e3      	b.n	8006ec6 <ip4_output_if_src+0x86>
    iphdr = (struct ip_hdr *)p->payload;
 8006efe:	686b      	ldr	r3, [r5, #4]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8006f00:	691b      	ldr	r3, [r3, #16]
 8006f02:	ae02      	add	r6, sp, #8
 8006f04:	f846 3d04 	str.w	r3, [r6, #-4]!
 8006f08:	e7e0      	b.n	8006ecc <ip4_output_if_src+0x8c>
    return ip4_frag(p, netif, dest);
 8006f0a:	4632      	mov	r2, r6
 8006f0c:	4639      	mov	r1, r7
 8006f0e:	4628      	mov	r0, r5
 8006f10:	f000 fb48 	bl	80075a4 <ip4_frag>
 8006f14:	e7e4      	b.n	8006ee0 <ip4_output_if_src+0xa0>
      return ERR_BUF;
 8006f16:	f06f 0001 	mvn.w	r0, #1
 8006f1a:	e7e1      	b.n	8006ee0 <ip4_output_if_src+0xa0>
 8006f1c:	0800e92c 	.word	0x0800e92c
 8006f20:	0800e960 	.word	0x0800e960
 8006f24:	0800de34 	.word	0x0800de34
 8006f28:	0800e96c 	.word	0x0800e96c
 8006f2c:	0800e99c 	.word	0x0800e99c
 8006f30:	20003f36 	.word	0x20003f36

08006f34 <ip4_output_if>:
{
 8006f34:	b530      	push	{r4, r5, lr}
 8006f36:	b085      	sub	sp, #20
 8006f38:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  if (dest != LWIP_IP_HDRINCL) {
 8006f3a:	4615      	mov	r5, r2
 8006f3c:	b11a      	cbz	r2, 8006f46 <ip4_output_if+0x12>
    if (ip4_addr_isany(src)) {
 8006f3e:	b109      	cbz	r1, 8006f44 <ip4_output_if+0x10>
 8006f40:	680a      	ldr	r2, [r1, #0]
 8006f42:	b902      	cbnz	r2, 8006f46 <ip4_output_if+0x12>
      src_used = netif_ip4_addr(netif);
 8006f44:	1d21      	adds	r1, r4, #4
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8006f46:	9402      	str	r4, [sp, #8]
 8006f48:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
 8006f4c:	9201      	str	r2, [sp, #4]
 8006f4e:	f89d 2020 	ldrb.w	r2, [sp, #32]
 8006f52:	9200      	str	r2, [sp, #0]
 8006f54:	462a      	mov	r2, r5
 8006f56:	f7ff ff73 	bl	8006e40 <ip4_output_if_src>
}
 8006f5a:	b005      	add	sp, #20
 8006f5c:	bd30      	pop	{r4, r5, pc}

08006f5e <ip4_addr_isbroadcast_u32>:
{
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8006f5e:	1e43      	subs	r3, r0, #1
 8006f60:	f113 0f03 	cmn.w	r3, #3
 8006f64:	d811      	bhi.n	8006f8a <ip4_addr_isbroadcast_u32+0x2c>
      (addr == IPADDR_ANY)) {
    return 1;
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8006f66:	f891 302b 	ldrb.w	r3, [r1, #43]	; 0x2b
 8006f6a:	f013 0f02 	tst.w	r3, #2
 8006f6e:	d00e      	beq.n	8006f8e <ip4_addr_isbroadcast_u32+0x30>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8006f70:	684b      	ldr	r3, [r1, #4]
 8006f72:	4298      	cmp	r0, r3
 8006f74:	d00d      	beq.n	8006f92 <ip4_addr_isbroadcast_u32+0x34>
    return 0;
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8006f76:	688a      	ldr	r2, [r1, #8]
 8006f78:	4043      	eors	r3, r0
 8006f7a:	4213      	tst	r3, r2
 8006f7c:	d10b      	bne.n	8006f96 <ip4_addr_isbroadcast_u32+0x38>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8006f7e:	43d2      	mvns	r2, r2
 8006f80:	ea32 0300 	bics.w	r3, r2, r0
 8006f84:	d009      	beq.n	8006f9a <ip4_addr_isbroadcast_u32+0x3c>
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
    /* => network broadcast address */
    return 1;
  } else {
    return 0;
 8006f86:	2000      	movs	r0, #0
 8006f88:	4770      	bx	lr
    return 1;
 8006f8a:	2001      	movs	r0, #1
 8006f8c:	4770      	bx	lr
    return 0;
 8006f8e:	2000      	movs	r0, #0
 8006f90:	4770      	bx	lr
    return 0;
 8006f92:	2000      	movs	r0, #0
 8006f94:	4770      	bx	lr
    return 0;
 8006f96:	2000      	movs	r0, #0
 8006f98:	4770      	bx	lr
    return 1;
 8006f9a:	2001      	movs	r0, #1
  }
}
 8006f9c:	4770      	bx	lr
	...

08006fa0 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8006fa0:	b538      	push	{r3, r4, r5, lr}
 8006fa2:	4604      	mov	r4, r0
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8006fa4:	4b0c      	ldr	r3, [pc, #48]	; (8006fd8 <ip_reass_dequeue_datagram+0x38>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4283      	cmp	r3, r0
 8006faa:	d008      	beq.n	8006fbe <ip_reass_dequeue_datagram+0x1e>
 8006fac:	460d      	mov	r5, r1
    /* it was the first in the list */
    reassdatagrams = ipr->next;
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8006fae:	b151      	cbz	r1, 8006fc6 <ip_reass_dequeue_datagram+0x26>
    prev->next = ipr->next;
 8006fb0:	6823      	ldr	r3, [r4, #0]
 8006fb2:	602b      	str	r3, [r5, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8006fb4:	4621      	mov	r1, r4
 8006fb6:	2004      	movs	r0, #4
 8006fb8:	f000 feb2 	bl	8007d20 <memp_free>
 8006fbc:	bd38      	pop	{r3, r4, r5, pc}
    reassdatagrams = ipr->next;
 8006fbe:	6802      	ldr	r2, [r0, #0]
 8006fc0:	4b05      	ldr	r3, [pc, #20]	; (8006fd8 <ip_reass_dequeue_datagram+0x38>)
 8006fc2:	601a      	str	r2, [r3, #0]
 8006fc4:	e7f6      	b.n	8006fb4 <ip_reass_dequeue_datagram+0x14>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8006fc6:	4b05      	ldr	r3, [pc, #20]	; (8006fdc <ip_reass_dequeue_datagram+0x3c>)
 8006fc8:	f240 1245 	movw	r2, #325	; 0x145
 8006fcc:	4904      	ldr	r1, [pc, #16]	; (8006fe0 <ip_reass_dequeue_datagram+0x40>)
 8006fce:	4805      	ldr	r0, [pc, #20]	; (8006fe4 <ip_reass_dequeue_datagram+0x44>)
 8006fd0:	f006 fb13 	bl	800d5fa <iprintf>
 8006fd4:	e7ec      	b.n	8006fb0 <ip_reass_dequeue_datagram+0x10>
 8006fd6:	bf00      	nop
 8006fd8:	20003f3c 	.word	0x20003f3c
 8006fdc:	0800ea90 	.word	0x0800ea90
 8006fe0:	0800eacc 	.word	0x0800eacc
 8006fe4:	0800de34 	.word	0x0800de34

08006fe8 <ip_reass_free_complete_datagram>:
{
 8006fe8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006fec:	4680      	mov	r8, r0
 8006fee:	4689      	mov	r9, r1
  LWIP_ASSERT("prev != ipr", prev != ipr);
 8006ff0:	4281      	cmp	r1, r0
 8006ff2:	d015      	beq.n	8007020 <ip_reass_free_complete_datagram+0x38>
  if (prev != NULL) {
 8006ff4:	f1b9 0f00 	cmp.w	r9, #0
 8006ff8:	d009      	beq.n	800700e <ip_reass_free_complete_datagram+0x26>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8006ffa:	f8d9 3000 	ldr.w	r3, [r9]
 8006ffe:	4598      	cmp	r8, r3
 8007000:	d005      	beq.n	800700e <ip_reass_free_complete_datagram+0x26>
 8007002:	4b35      	ldr	r3, [pc, #212]	; (80070d8 <ip_reass_free_complete_datagram+0xf0>)
 8007004:	22ad      	movs	r2, #173	; 0xad
 8007006:	4935      	ldr	r1, [pc, #212]	; (80070dc <ip_reass_free_complete_datagram+0xf4>)
 8007008:	4835      	ldr	r0, [pc, #212]	; (80070e0 <ip_reass_free_complete_datagram+0xf8>)
 800700a:	f006 faf6 	bl	800d5fa <iprintf>
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800700e:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8007012:	6863      	ldr	r3, [r4, #4]
  if (iprh->start == 0) {
 8007014:	889a      	ldrh	r2, [r3, #4]
 8007016:	b152      	cbz	r2, 800702e <ip_reass_free_complete_datagram+0x46>
  u16_t pbufs_freed = 0;
 8007018:	2600      	movs	r6, #0
  p = ipr->p;
 800701a:	f8d8 4004 	ldr.w	r4, [r8, #4]
  while (p != NULL) {
 800701e:	e032      	b.n	8007086 <ip_reass_free_complete_datagram+0x9e>
  LWIP_ASSERT("prev != ipr", prev != ipr);
 8007020:	4b2d      	ldr	r3, [pc, #180]	; (80070d8 <ip_reass_free_complete_datagram+0xf0>)
 8007022:	22ab      	movs	r2, #171	; 0xab
 8007024:	492f      	ldr	r1, [pc, #188]	; (80070e4 <ip_reass_free_complete_datagram+0xfc>)
 8007026:	482e      	ldr	r0, [pc, #184]	; (80070e0 <ip_reass_free_complete_datagram+0xf8>)
 8007028:	f006 fae7 	bl	800d5fa <iprintf>
 800702c:	e7e2      	b.n	8006ff4 <ip_reass_free_complete_datagram+0xc>
    ipr->p = iprh->next_pbuf;
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f8c8 3004 	str.w	r3, [r8, #4]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8007034:	4643      	mov	r3, r8
 8007036:	6862      	ldr	r2, [r4, #4]
 8007038:	f853 1f08 	ldr.w	r1, [r3, #8]!
 800703c:	685e      	ldr	r6, [r3, #4]
 800703e:	689d      	ldr	r5, [r3, #8]
 8007040:	68d8      	ldr	r0, [r3, #12]
 8007042:	6011      	str	r1, [r2, #0]
 8007044:	6056      	str	r6, [r2, #4]
 8007046:	6095      	str	r5, [r2, #8]
 8007048:	60d0      	str	r0, [r2, #12]
 800704a:	6919      	ldr	r1, [r3, #16]
 800704c:	6111      	str	r1, [r2, #16]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800704e:	2101      	movs	r1, #1
 8007050:	4620      	mov	r0, r4
 8007052:	f7ff fdc3 	bl	8006bdc <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8007056:	4620      	mov	r0, r4
 8007058:	f001 f9fe 	bl	8008458 <pbuf_clen>
 800705c:	4606      	mov	r6, r0
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800705e:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8007062:	da03      	bge.n	800706c <ip_reass_free_complete_datagram+0x84>
    pbuf_free(p);
 8007064:	4620      	mov	r0, r4
 8007066:	f001 f831 	bl	80080cc <pbuf_free>
 800706a:	e7d6      	b.n	800701a <ip_reass_free_complete_datagram+0x32>
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800706c:	4b1a      	ldr	r3, [pc, #104]	; (80070d8 <ip_reass_free_complete_datagram+0xf0>)
 800706e:	22bc      	movs	r2, #188	; 0xbc
 8007070:	491d      	ldr	r1, [pc, #116]	; (80070e8 <ip_reass_free_complete_datagram+0x100>)
 8007072:	481b      	ldr	r0, [pc, #108]	; (80070e0 <ip_reass_free_complete_datagram+0xf8>)
 8007074:	f006 fac1 	bl	800d5fa <iprintf>
 8007078:	e7f4      	b.n	8007064 <ip_reass_free_complete_datagram+0x7c>
    pbufs_freed += clen;
 800707a:	4435      	add	r5, r6
 800707c:	b2ae      	uxth	r6, r5
    pbuf_free(pcur);
 800707e:	4620      	mov	r0, r4
 8007080:	f001 f824 	bl	80080cc <pbuf_free>
    p = iprh->next_pbuf;
 8007084:	463c      	mov	r4, r7
  while (p != NULL) {
 8007086:	b184      	cbz	r4, 80070aa <ip_reass_free_complete_datagram+0xc2>
    iprh = (struct ip_reass_helper *)p->payload;
 8007088:	6863      	ldr	r3, [r4, #4]
    p = iprh->next_pbuf;
 800708a:	681f      	ldr	r7, [r3, #0]
    clen = pbuf_clen(pcur);
 800708c:	4620      	mov	r0, r4
 800708e:	f001 f9e3 	bl	8008458 <pbuf_clen>
 8007092:	4605      	mov	r5, r0
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8007094:	1833      	adds	r3, r6, r0
 8007096:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800709a:	dbee      	blt.n	800707a <ip_reass_free_complete_datagram+0x92>
 800709c:	4b0e      	ldr	r3, [pc, #56]	; (80070d8 <ip_reass_free_complete_datagram+0xf0>)
 800709e:	22cc      	movs	r2, #204	; 0xcc
 80070a0:	4911      	ldr	r1, [pc, #68]	; (80070e8 <ip_reass_free_complete_datagram+0x100>)
 80070a2:	480f      	ldr	r0, [pc, #60]	; (80070e0 <ip_reass_free_complete_datagram+0xf8>)
 80070a4:	f006 faa9 	bl	800d5fa <iprintf>
 80070a8:	e7e7      	b.n	800707a <ip_reass_free_complete_datagram+0x92>
  ip_reass_dequeue_datagram(ipr, prev);
 80070aa:	4649      	mov	r1, r9
 80070ac:	4640      	mov	r0, r8
 80070ae:	f7ff ff77 	bl	8006fa0 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 80070b2:	4b0e      	ldr	r3, [pc, #56]	; (80070ec <ip_reass_free_complete_datagram+0x104>)
 80070b4:	881b      	ldrh	r3, [r3, #0]
 80070b6:	429e      	cmp	r6, r3
 80070b8:	d806      	bhi.n	80070c8 <ip_reass_free_complete_datagram+0xe0>
  ip_reass_pbufcount -= pbufs_freed;
 80070ba:	4a0c      	ldr	r2, [pc, #48]	; (80070ec <ip_reass_free_complete_datagram+0x104>)
 80070bc:	8813      	ldrh	r3, [r2, #0]
 80070be:	1b9b      	subs	r3, r3, r6
 80070c0:	8013      	strh	r3, [r2, #0]
}
 80070c2:	4630      	mov	r0, r6
 80070c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 80070c8:	4b03      	ldr	r3, [pc, #12]	; (80070d8 <ip_reass_free_complete_datagram+0xf0>)
 80070ca:	22d2      	movs	r2, #210	; 0xd2
 80070cc:	4908      	ldr	r1, [pc, #32]	; (80070f0 <ip_reass_free_complete_datagram+0x108>)
 80070ce:	4804      	ldr	r0, [pc, #16]	; (80070e0 <ip_reass_free_complete_datagram+0xf8>)
 80070d0:	f006 fa93 	bl	800d5fa <iprintf>
 80070d4:	e7f1      	b.n	80070ba <ip_reass_free_complete_datagram+0xd2>
 80070d6:	bf00      	nop
 80070d8:	0800ea90 	.word	0x0800ea90
 80070dc:	0800eaf4 	.word	0x0800eaf4
 80070e0:	0800de34 	.word	0x0800de34
 80070e4:	0800eae8 	.word	0x0800eae8
 80070e8:	0800eb08 	.word	0x0800eb08
 80070ec:	20003f38 	.word	0x20003f38
 80070f0:	0800eb28 	.word	0x0800eb28

080070f4 <ip_reass_remove_oldest_datagram>:
{
 80070f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070f8:	4605      	mov	r5, r0
 80070fa:	4688      	mov	r8, r1
  int pbufs_freed = 0, pbufs_freed_current;
 80070fc:	2600      	movs	r6, #0
 80070fe:	e02a      	b.n	8007156 <ip_reass_remove_oldest_datagram+0x62>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8007100:	699a      	ldr	r2, [r3, #24]
 8007102:	f8d5 c010 	ldr.w	ip, [r5, #16]
 8007106:	4562      	cmp	r2, ip
 8007108:	d110      	bne.n	800712c <ip_reass_remove_oldest_datagram+0x38>
 800710a:	f8b3 c00c 	ldrh.w	ip, [r3, #12]
 800710e:	88aa      	ldrh	r2, [r5, #4]
 8007110:	4594      	cmp	ip, r2
 8007112:	d10b      	bne.n	800712c <ip_reass_remove_oldest_datagram+0x38>
 8007114:	e001      	b.n	800711a <ip_reass_remove_oldest_datagram+0x26>
          oldest_prev = prev;
 8007116:	4671      	mov	r1, lr
          oldest = r;
 8007118:	4618      	mov	r0, r3
      if (r->next != NULL) {
 800711a:	681a      	ldr	r2, [r3, #0]
 800711c:	b18a      	cbz	r2, 8007142 <ip_reass_remove_oldest_datagram+0x4e>
 800711e:	469e      	mov	lr, r3
 8007120:	4613      	mov	r3, r2
    while (r != NULL) {
 8007122:	b183      	cbz	r3, 8007146 <ip_reass_remove_oldest_datagram+0x52>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8007124:	68ea      	ldr	r2, [r5, #12]
 8007126:	695f      	ldr	r7, [r3, #20]
 8007128:	4297      	cmp	r7, r2
 800712a:	d0e9      	beq.n	8007100 <ip_reass_remove_oldest_datagram+0xc>
        other_datagrams++;
 800712c:	3401      	adds	r4, #1
        if (oldest == NULL) {
 800712e:	2800      	cmp	r0, #0
 8007130:	d0f1      	beq.n	8007116 <ip_reass_remove_oldest_datagram+0x22>
        } else if (r->timer <= oldest->timer) {
 8007132:	f893 c01f 	ldrb.w	ip, [r3, #31]
 8007136:	7fc2      	ldrb	r2, [r0, #31]
 8007138:	4594      	cmp	ip, r2
 800713a:	d8ee      	bhi.n	800711a <ip_reass_remove_oldest_datagram+0x26>
          oldest_prev = prev;
 800713c:	4671      	mov	r1, lr
          oldest = r;
 800713e:	4618      	mov	r0, r3
 8007140:	e7eb      	b.n	800711a <ip_reass_remove_oldest_datagram+0x26>
      if (r->next != NULL) {
 8007142:	4673      	mov	r3, lr
 8007144:	e7eb      	b.n	800711e <ip_reass_remove_oldest_datagram+0x2a>
    if (oldest != NULL) {
 8007146:	b110      	cbz	r0, 800714e <ip_reass_remove_oldest_datagram+0x5a>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8007148:	f7ff ff4e 	bl	8006fe8 <ip_reass_free_complete_datagram>
      pbufs_freed += pbufs_freed_current;
 800714c:	4406      	add	r6, r0
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800714e:	4546      	cmp	r6, r8
 8007150:	da08      	bge.n	8007164 <ip_reass_remove_oldest_datagram+0x70>
 8007152:	2c01      	cmp	r4, #1
 8007154:	dd06      	ble.n	8007164 <ip_reass_remove_oldest_datagram+0x70>
    r = reassdatagrams;
 8007156:	4b05      	ldr	r3, [pc, #20]	; (800716c <ip_reass_remove_oldest_datagram+0x78>)
 8007158:	681b      	ldr	r3, [r3, #0]
    other_datagrams = 0;
 800715a:	2400      	movs	r4, #0
    oldest_prev = NULL;
 800715c:	4621      	mov	r1, r4
    prev = NULL;
 800715e:	46a6      	mov	lr, r4
    oldest = NULL;
 8007160:	4620      	mov	r0, r4
    while (r != NULL) {
 8007162:	e7de      	b.n	8007122 <ip_reass_remove_oldest_datagram+0x2e>
}
 8007164:	4630      	mov	r0, r6
 8007166:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800716a:	bf00      	nop
 800716c:	20003f3c 	.word	0x20003f3c

08007170 <ip_frag_free_pbuf_custom_ref>:
}

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 8007170:	b510      	push	{r4, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 8007172:	4604      	mov	r4, r0
 8007174:	b120      	cbz	r0, 8007180 <ip_frag_free_pbuf_custom_ref+0x10>
  memp_free(MEMP_FRAG_PBUF, p);
 8007176:	4621      	mov	r1, r4
 8007178:	2005      	movs	r0, #5
 800717a:	f000 fdd1 	bl	8007d20 <memp_free>
 800717e:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("p != NULL", p != NULL);
 8007180:	4b03      	ldr	r3, [pc, #12]	; (8007190 <ip_frag_free_pbuf_custom_ref+0x20>)
 8007182:	f240 22ae 	movw	r2, #686	; 0x2ae
 8007186:	4903      	ldr	r1, [pc, #12]	; (8007194 <ip_frag_free_pbuf_custom_ref+0x24>)
 8007188:	4803      	ldr	r0, [pc, #12]	; (8007198 <ip_frag_free_pbuf_custom_ref+0x28>)
 800718a:	f006 fa36 	bl	800d5fa <iprintf>
 800718e:	e7f2      	b.n	8007176 <ip_frag_free_pbuf_custom_ref+0x6>
 8007190:	0800ea90 	.word	0x0800ea90
 8007194:	0800e154 	.word	0x0800e154
 8007198:	0800de34 	.word	0x0800de34

0800719c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800719c:	b510      	push	{r4, lr}
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800719e:	4604      	mov	r4, r0
 80071a0:	b138      	cbz	r0, 80071b2 <ipfrag_free_pbuf_custom+0x16>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
  if (pcr->original != NULL) {
 80071a2:	6960      	ldr	r0, [r4, #20]
 80071a4:	b108      	cbz	r0, 80071aa <ipfrag_free_pbuf_custom+0xe>
    pbuf_free(pcr->original);
 80071a6:	f000 ff91 	bl	80080cc <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80071aa:	4620      	mov	r0, r4
 80071ac:	f7ff ffe0 	bl	8007170 <ip_frag_free_pbuf_custom_ref>
 80071b0:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80071b2:	4b04      	ldr	r3, [pc, #16]	; (80071c4 <ipfrag_free_pbuf_custom+0x28>)
 80071b4:	f44f 722e 	mov.w	r2, #696	; 0x2b8
 80071b8:	4903      	ldr	r1, [pc, #12]	; (80071c8 <ipfrag_free_pbuf_custom+0x2c>)
 80071ba:	4804      	ldr	r0, [pc, #16]	; (80071cc <ipfrag_free_pbuf_custom+0x30>)
 80071bc:	f006 fa1d 	bl	800d5fa <iprintf>
 80071c0:	e7ef      	b.n	80071a2 <ipfrag_free_pbuf_custom+0x6>
 80071c2:	bf00      	nop
 80071c4:	0800ea90 	.word	0x0800ea90
 80071c8:	0800eb44 	.word	0x0800eb44
 80071cc:	0800de34 	.word	0x0800de34

080071d0 <ip_reass_chain_frag_into_datagram_and_validate>:
{
 80071d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071d4:	4680      	mov	r8, r0
 80071d6:	460f      	mov	r7, r1
 80071d8:	4691      	mov	r9, r2
  fraghdr = (struct ip_hdr*)new_p->payload;
 80071da:	684c      	ldr	r4, [r1, #4]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 80071dc:	8860      	ldrh	r0, [r4, #2]
 80071de:	f7fe ff59 	bl	8006094 <lwip_htons>
 80071e2:	7826      	ldrb	r6, [r4, #0]
 80071e4:	f006 060f 	and.w	r6, r6, #15
 80071e8:	eba0 0686 	sub.w	r6, r0, r6, lsl #2
 80071ec:	b2b6      	uxth	r6, r6
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 80071ee:	88e0      	ldrh	r0, [r4, #6]
 80071f0:	f7fe ff50 	bl	8006094 <lwip_htons>
 80071f4:	f3c0 000c 	ubfx	r0, r0, #0, #13
 80071f8:	00c0      	lsls	r0, r0, #3
  iprh = (struct ip_reass_helper*)new_p->payload;
 80071fa:	687d      	ldr	r5, [r7, #4]
  iprh->next_pbuf = NULL;
 80071fc:	2400      	movs	r4, #0
 80071fe:	702c      	strb	r4, [r5, #0]
 8007200:	706c      	strb	r4, [r5, #1]
 8007202:	70ac      	strb	r4, [r5, #2]
 8007204:	70ec      	strb	r4, [r5, #3]
  iprh->start = offset;
 8007206:	80a8      	strh	r0, [r5, #4]
  iprh->end = offset + len;
 8007208:	eb06 0e00 	add.w	lr, r6, r0
 800720c:	fa1f fe8e 	uxth.w	lr, lr
 8007210:	f8a5 e006 	strh.w	lr, [r5, #6]
  for (q = ipr->p; q != NULL;) {
 8007214:	f8d8 1004 	ldr.w	r1, [r8, #4]
  int valid = 1;
 8007218:	2601      	movs	r6, #1
  for (q = ipr->p; q != NULL;) {
 800721a:	e033      	b.n	8007284 <ip_reass_chain_frag_into_datagram_and_validate+0xb4>
      iprh->next_pbuf = q;
 800721c:	6029      	str	r1, [r5, #0]
      if (iprh_prev != NULL) {
 800721e:	b34c      	cbz	r4, 8007274 <ip_reass_chain_frag_into_datagram_and_validate+0xa4>
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8007220:	88e2      	ldrh	r2, [r4, #6]
 8007222:	4290      	cmp	r0, r2
 8007224:	d37e      	bcc.n	8007324 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
 8007226:	889b      	ldrh	r3, [r3, #4]
 8007228:	459e      	cmp	lr, r3
 800722a:	d87b      	bhi.n	8007324 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
        iprh_prev->next_pbuf = new_p;
 800722c:	6027      	str	r7, [r4, #0]
        if (iprh_prev->end != iprh->start) {
 800722e:	88ab      	ldrh	r3, [r5, #4]
 8007230:	429a      	cmp	r2, r3
 8007232:	d000      	beq.n	8007236 <ip_reass_chain_frag_into_datagram_and_validate+0x66>
          valid = 0;
 8007234:	2600      	movs	r6, #0
  if (q == NULL) {
 8007236:	2900      	cmp	r1, #0
 8007238:	d036      	beq.n	80072a8 <ip_reass_chain_frag_into_datagram_and_validate+0xd8>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800723a:	f1b9 0f00 	cmp.w	r9, #0
 800723e:	d104      	bne.n	800724a <ip_reass_chain_frag_into_datagram_and_validate+0x7a>
 8007240:	f898 301e 	ldrb.w	r3, [r8, #30]
 8007244:	f013 0f01 	tst.w	r3, #1
 8007248:	d07a      	beq.n	8007340 <ip_reass_chain_frag_into_datagram_and_validate+0x170>
    if (valid) {
 800724a:	2e00      	cmp	r6, #0
 800724c:	d067      	beq.n	800731e <ip_reass_chain_frag_into_datagram_and_validate+0x14e>
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 800724e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d060      	beq.n	8007318 <ip_reass_chain_frag_into_datagram_and_validate+0x148>
 8007256:	6858      	ldr	r0, [r3, #4]
 8007258:	8883      	ldrh	r3, [r0, #4]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d15e      	bne.n	800731c <ip_reass_chain_frag_into_datagram_and_validate+0x14c>
        q = iprh->next_pbuf;
 800725e:	682a      	ldr	r2, [r5, #0]
        while (q != NULL) {
 8007260:	2a00      	cmp	r2, #0
 8007262:	d044      	beq.n	80072ee <ip_reass_chain_frag_into_datagram_and_validate+0x11e>
          iprh = (struct ip_reass_helper*)q->payload;
 8007264:	6853      	ldr	r3, [r2, #4]
          if (iprh_prev->end != iprh->start) {
 8007266:	88e9      	ldrh	r1, [r5, #6]
 8007268:	889a      	ldrh	r2, [r3, #4]
 800726a:	4291      	cmp	r1, r2
 800726c:	d13d      	bne.n	80072ea <ip_reass_chain_frag_into_datagram_and_validate+0x11a>
          q = iprh->next_pbuf;
 800726e:	681a      	ldr	r2, [r3, #0]
          iprh = (struct ip_reass_helper*)q->payload;
 8007270:	461d      	mov	r5, r3
 8007272:	e7f5      	b.n	8007260 <ip_reass_chain_frag_into_datagram_and_validate+0x90>
        if (iprh->end > iprh_tmp->start) {
 8007274:	889b      	ldrh	r3, [r3, #4]
 8007276:	459e      	cmp	lr, r3
 8007278:	d854      	bhi.n	8007324 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
        ipr->p = new_p;
 800727a:	f8c8 7004 	str.w	r7, [r8, #4]
 800727e:	e7da      	b.n	8007236 <ip_reass_chain_frag_into_datagram_and_validate+0x66>
    q = iprh_tmp->next_pbuf;
 8007280:	6819      	ldr	r1, [r3, #0]
    iprh_prev = iprh_tmp;
 8007282:	461c      	mov	r4, r3
  for (q = ipr->p; q != NULL;) {
 8007284:	2900      	cmp	r1, #0
 8007286:	d0d6      	beq.n	8007236 <ip_reass_chain_frag_into_datagram_and_validate+0x66>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 8007288:	684b      	ldr	r3, [r1, #4]
    if (iprh->start < iprh_tmp->start) {
 800728a:	889a      	ldrh	r2, [r3, #4]
 800728c:	4290      	cmp	r0, r2
 800728e:	d3c5      	bcc.n	800721c <ip_reass_chain_frag_into_datagram_and_validate+0x4c>
    } else if (iprh->start == iprh_tmp->start) {
 8007290:	4290      	cmp	r0, r2
 8007292:	d047      	beq.n	8007324 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
    } else if (iprh->start < iprh_tmp->end) {
 8007294:	88d9      	ldrh	r1, [r3, #6]
 8007296:	4288      	cmp	r0, r1
 8007298:	d344      	bcc.n	8007324 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
      if (iprh_prev != NULL) {
 800729a:	2c00      	cmp	r4, #0
 800729c:	d0f0      	beq.n	8007280 <ip_reass_chain_frag_into_datagram_and_validate+0xb0>
        if (iprh_prev->end != iprh_tmp->start) {
 800729e:	88e1      	ldrh	r1, [r4, #6]
 80072a0:	428a      	cmp	r2, r1
 80072a2:	d0ed      	beq.n	8007280 <ip_reass_chain_frag_into_datagram_and_validate+0xb0>
          valid = 0;
 80072a4:	2600      	movs	r6, #0
 80072a6:	e7eb      	b.n	8007280 <ip_reass_chain_frag_into_datagram_and_validate+0xb0>
    if (iprh_prev != NULL) {
 80072a8:	b194      	cbz	r4, 80072d0 <ip_reass_chain_frag_into_datagram_and_validate+0x100>
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80072aa:	88e2      	ldrh	r2, [r4, #6]
 80072ac:	88ab      	ldrh	r3, [r5, #4]
 80072ae:	429a      	cmp	r2, r3
 80072b0:	d806      	bhi.n	80072c0 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
      iprh_prev->next_pbuf = new_p;
 80072b2:	6027      	str	r7, [r4, #0]
      if (iprh_prev->end != iprh->start) {
 80072b4:	88e2      	ldrh	r2, [r4, #6]
 80072b6:	88ab      	ldrh	r3, [r5, #4]
 80072b8:	429a      	cmp	r2, r3
 80072ba:	d0be      	beq.n	800723a <ip_reass_chain_frag_into_datagram_and_validate+0x6a>
        valid = 0;
 80072bc:	2600      	movs	r6, #0
 80072be:	e7bc      	b.n	800723a <ip_reass_chain_frag_into_datagram_and_validate+0x6a>
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80072c0:	4b21      	ldr	r3, [pc, #132]	; (8007348 <ip_reass_chain_frag_into_datagram_and_validate+0x178>)
 80072c2:	f240 12ab 	movw	r2, #427	; 0x1ab
 80072c6:	4921      	ldr	r1, [pc, #132]	; (800734c <ip_reass_chain_frag_into_datagram_and_validate+0x17c>)
 80072c8:	4821      	ldr	r0, [pc, #132]	; (8007350 <ip_reass_chain_frag_into_datagram_and_validate+0x180>)
 80072ca:	f006 f996 	bl	800d5fa <iprintf>
 80072ce:	e7f0      	b.n	80072b2 <ip_reass_chain_frag_into_datagram_and_validate+0xe2>
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80072d0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80072d4:	b133      	cbz	r3, 80072e4 <ip_reass_chain_frag_into_datagram_and_validate+0x114>
 80072d6:	4b1c      	ldr	r3, [pc, #112]	; (8007348 <ip_reass_chain_frag_into_datagram_and_validate+0x178>)
 80072d8:	f44f 72da 	mov.w	r2, #436	; 0x1b4
 80072dc:	491d      	ldr	r1, [pc, #116]	; (8007354 <ip_reass_chain_frag_into_datagram_and_validate+0x184>)
 80072de:	481c      	ldr	r0, [pc, #112]	; (8007350 <ip_reass_chain_frag_into_datagram_and_validate+0x180>)
 80072e0:	f006 f98b 	bl	800d5fa <iprintf>
      ipr->p = new_p;
 80072e4:	f8c8 7004 	str.w	r7, [r8, #4]
 80072e8:	e7a7      	b.n	800723a <ip_reass_chain_frag_into_datagram_and_validate+0x6a>
          iprh = (struct ip_reass_helper*)q->payload;
 80072ea:	461d      	mov	r5, r3
            valid = 0;
 80072ec:	2600      	movs	r6, #0
        if (valid) {
 80072ee:	b1b6      	cbz	r6, 800731e <ip_reass_chain_frag_into_datagram_and_validate+0x14e>
          LWIP_ASSERT("sanity check",
 80072f0:	4285      	cmp	r5, r0
 80072f2:	d009      	beq.n	8007308 <ip_reass_chain_frag_into_datagram_and_validate+0x138>
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80072f4:	682b      	ldr	r3, [r5, #0]
 80072f6:	b193      	cbz	r3, 800731e <ip_reass_chain_frag_into_datagram_and_validate+0x14e>
 80072f8:	4b13      	ldr	r3, [pc, #76]	; (8007348 <ip_reass_chain_frag_into_datagram_and_validate+0x178>)
 80072fa:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 80072fe:	4916      	ldr	r1, [pc, #88]	; (8007358 <ip_reass_chain_frag_into_datagram_and_validate+0x188>)
 8007300:	4813      	ldr	r0, [pc, #76]	; (8007350 <ip_reass_chain_frag_into_datagram_and_validate+0x180>)
 8007302:	f006 f97a 	bl	800d5fa <iprintf>
 8007306:	e00a      	b.n	800731e <ip_reass_chain_frag_into_datagram_and_validate+0x14e>
          LWIP_ASSERT("sanity check",
 8007308:	4b0f      	ldr	r3, [pc, #60]	; (8007348 <ip_reass_chain_frag_into_datagram_and_validate+0x178>)
 800730a:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 800730e:	4913      	ldr	r1, [pc, #76]	; (800735c <ip_reass_chain_frag_into_datagram_and_validate+0x18c>)
 8007310:	480f      	ldr	r0, [pc, #60]	; (8007350 <ip_reass_chain_frag_into_datagram_and_validate+0x180>)
 8007312:	f006 f972 	bl	800d5fa <iprintf>
 8007316:	e7ed      	b.n	80072f4 <ip_reass_chain_frag_into_datagram_and_validate+0x124>
        valid = 0;
 8007318:	2600      	movs	r6, #0
 800731a:	e000      	b.n	800731e <ip_reass_chain_frag_into_datagram_and_validate+0x14e>
 800731c:	2600      	movs	r6, #0
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800731e:	4630      	mov	r0, r6
 8007320:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  ip_reass_pbufcount -= pbuf_clen(new_p);
 8007324:	4638      	mov	r0, r7
 8007326:	f001 f897 	bl	8008458 <pbuf_clen>
 800732a:	4a0d      	ldr	r2, [pc, #52]	; (8007360 <ip_reass_chain_frag_into_datagram_and_validate+0x190>)
 800732c:	8813      	ldrh	r3, [r2, #0]
 800732e:	1a18      	subs	r0, r3, r0
 8007330:	8010      	strh	r0, [r2, #0]
  pbuf_free(new_p);
 8007332:	4638      	mov	r0, r7
 8007334:	f000 feca 	bl	80080cc <pbuf_free>
  return IP_REASS_VALIDATE_PBUF_DROPPED;
 8007338:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800733c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8007340:	4648      	mov	r0, r9
}
 8007342:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007346:	bf00      	nop
 8007348:	0800ea90 	.word	0x0800ea90
 800734c:	0800ea04 	.word	0x0800ea04
 8007350:	0800de34 	.word	0x0800de34
 8007354:	0800ea24 	.word	0x0800ea24
 8007358:	0800ea6c 	.word	0x0800ea6c
 800735c:	0800ea5c 	.word	0x0800ea5c
 8007360:	20003f38 	.word	0x20003f38

08007364 <ip_frag_alloc_pbuf_custom_ref>:
{
 8007364:	b508      	push	{r3, lr}
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 8007366:	2005      	movs	r0, #5
 8007368:	f000 fcc0 	bl	8007cec <memp_malloc>
}
 800736c:	bd08      	pop	{r3, pc}
	...

08007370 <ip_reass_enqueue_new_datagram>:
{
 8007370:	b570      	push	{r4, r5, r6, lr}
 8007372:	4605      	mov	r5, r0
 8007374:	460e      	mov	r6, r1
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8007376:	2004      	movs	r0, #4
 8007378:	f000 fcb8 	bl	8007cec <memp_malloc>
  if (ipr == NULL) {
 800737c:	4604      	mov	r4, r0
 800737e:	b1b0      	cbz	r0, 80073ae <ip_reass_enqueue_new_datagram+0x3e>
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8007380:	2220      	movs	r2, #32
 8007382:	2100      	movs	r1, #0
 8007384:	4620      	mov	r0, r4
 8007386:	f006 faaf 	bl	800d8e8 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800738a:	2303      	movs	r3, #3
 800738c:	77e3      	strb	r3, [r4, #31]
  ipr->next = reassdatagrams;
 800738e:	4b0f      	ldr	r3, [pc, #60]	; (80073cc <ip_reass_enqueue_new_datagram+0x5c>)
 8007390:	681a      	ldr	r2, [r3, #0]
 8007392:	6022      	str	r2, [r4, #0]
  reassdatagrams = ipr;
 8007394:	601c      	str	r4, [r3, #0]
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8007396:	682a      	ldr	r2, [r5, #0]
 8007398:	686e      	ldr	r6, [r5, #4]
 800739a:	68a8      	ldr	r0, [r5, #8]
 800739c:	68e9      	ldr	r1, [r5, #12]
 800739e:	60a2      	str	r2, [r4, #8]
 80073a0:	60e6      	str	r6, [r4, #12]
 80073a2:	6120      	str	r0, [r4, #16]
 80073a4:	6161      	str	r1, [r4, #20]
 80073a6:	692a      	ldr	r2, [r5, #16]
 80073a8:	61a2      	str	r2, [r4, #24]
}
 80073aa:	4620      	mov	r0, r4
 80073ac:	bd70      	pop	{r4, r5, r6, pc}
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80073ae:	4631      	mov	r1, r6
 80073b0:	4628      	mov	r0, r5
 80073b2:	f7ff fe9f 	bl	80070f4 <ip_reass_remove_oldest_datagram>
 80073b6:	4286      	cmp	r6, r0
 80073b8:	dd02      	ble.n	80073c0 <ip_reass_enqueue_new_datagram+0x50>
    if (ipr == NULL)
 80073ba:	2c00      	cmp	r4, #0
 80073bc:	d1e0      	bne.n	8007380 <ip_reass_enqueue_new_datagram+0x10>
 80073be:	e7f4      	b.n	80073aa <ip_reass_enqueue_new_datagram+0x3a>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80073c0:	2004      	movs	r0, #4
 80073c2:	f000 fc93 	bl	8007cec <memp_malloc>
 80073c6:	4604      	mov	r4, r0
 80073c8:	e7f7      	b.n	80073ba <ip_reass_enqueue_new_datagram+0x4a>
 80073ca:	bf00      	nop
 80073cc:	20003f3c 	.word	0x20003f3c

080073d0 <ip_reass_tmr>:
{
 80073d0:	b538      	push	{r3, r4, r5, lr}
  r = reassdatagrams;
 80073d2:	4b09      	ldr	r3, [pc, #36]	; (80073f8 <ip_reass_tmr+0x28>)
 80073d4:	6818      	ldr	r0, [r3, #0]
  struct ip_reassdata *r, *prev = NULL;
 80073d6:	2400      	movs	r4, #0
  while (r != NULL) {
 80073d8:	e004      	b.n	80073e4 <ip_reass_tmr+0x14>
      r = r->next;
 80073da:	6805      	ldr	r5, [r0, #0]
      ip_reass_free_complete_datagram(tmp, prev);
 80073dc:	4621      	mov	r1, r4
 80073de:	f7ff fe03 	bl	8006fe8 <ip_reass_free_complete_datagram>
      r = r->next;
 80073e2:	4628      	mov	r0, r5
  while (r != NULL) {
 80073e4:	b138      	cbz	r0, 80073f6 <ip_reass_tmr+0x26>
    if (r->timer > 0) {
 80073e6:	7fc3      	ldrb	r3, [r0, #31]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d0f6      	beq.n	80073da <ip_reass_tmr+0xa>
      r->timer--;
 80073ec:	3b01      	subs	r3, #1
 80073ee:	77c3      	strb	r3, [r0, #31]
      prev = r;
 80073f0:	4604      	mov	r4, r0
      r = r->next;
 80073f2:	6800      	ldr	r0, [r0, #0]
 80073f4:	e7f6      	b.n	80073e4 <ip_reass_tmr+0x14>
}
 80073f6:	bd38      	pop	{r3, r4, r5, pc}
 80073f8:	20003f3c 	.word	0x20003f3c

080073fc <ip4_reass>:
{
 80073fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007400:	4681      	mov	r9, r0
  fraghdr = (struct ip_hdr*)p->payload;
 8007402:	6845      	ldr	r5, [r0, #4]
  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 8007404:	782b      	ldrb	r3, [r5, #0]
 8007406:	f003 030f 	and.w	r3, r3, #15
 800740a:	2b05      	cmp	r3, #5
 800740c:	d124      	bne.n	8007458 <ip4_reass+0x5c>
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 800740e:	88e8      	ldrh	r0, [r5, #6]
 8007410:	f7fe fe40 	bl	8006094 <lwip_htons>
 8007414:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8007418:	00c7      	lsls	r7, r0, #3
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 800741a:	8868      	ldrh	r0, [r5, #2]
 800741c:	f7fe fe3a 	bl	8006094 <lwip_htons>
 8007420:	782e      	ldrb	r6, [r5, #0]
 8007422:	f006 060f 	and.w	r6, r6, #15
 8007426:	eba0 0686 	sub.w	r6, r0, r6, lsl #2
 800742a:	b2b6      	uxth	r6, r6
  clen = pbuf_clen(p);
 800742c:	4648      	mov	r0, r9
 800742e:	f001 f813 	bl	8008458 <pbuf_clen>
 8007432:	4680      	mov	r8, r0
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8007434:	4b59      	ldr	r3, [pc, #356]	; (800759c <ip4_reass+0x1a0>)
 8007436:	881b      	ldrh	r3, [r3, #0]
 8007438:	4403      	add	r3, r0
 800743a:	2b0a      	cmp	r3, #10
 800743c:	dc02      	bgt.n	8007444 <ip4_reass+0x48>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800743e:	4b58      	ldr	r3, [pc, #352]	; (80075a0 <ip4_reass+0x1a4>)
 8007440:	681c      	ldr	r4, [r3, #0]
 8007442:	e011      	b.n	8007468 <ip4_reass+0x6c>
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8007444:	4601      	mov	r1, r0
 8007446:	4628      	mov	r0, r5
 8007448:	f7ff fe54 	bl	80070f4 <ip_reass_remove_oldest_datagram>
 800744c:	b120      	cbz	r0, 8007458 <ip4_reass+0x5c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800744e:	4b53      	ldr	r3, [pc, #332]	; (800759c <ip4_reass+0x1a0>)
 8007450:	881b      	ldrh	r3, [r3, #0]
 8007452:	4443      	add	r3, r8
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8007454:	2b0a      	cmp	r3, #10
 8007456:	ddf2      	ble.n	800743e <ip4_reass+0x42>
  pbuf_free(p);
 8007458:	4648      	mov	r0, r9
 800745a:	f000 fe37 	bl	80080cc <pbuf_free>
  return NULL;
 800745e:	2700      	movs	r7, #0
}
 8007460:	4638      	mov	r0, r7
 8007462:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8007466:	6824      	ldr	r4, [r4, #0]
 8007468:	b15c      	cbz	r4, 8007482 <ip4_reass+0x86>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800746a:	6962      	ldr	r2, [r4, #20]
 800746c:	68eb      	ldr	r3, [r5, #12]
 800746e:	429a      	cmp	r2, r3
 8007470:	d1f9      	bne.n	8007466 <ip4_reass+0x6a>
 8007472:	69a2      	ldr	r2, [r4, #24]
 8007474:	692b      	ldr	r3, [r5, #16]
 8007476:	429a      	cmp	r2, r3
 8007478:	d1f5      	bne.n	8007466 <ip4_reass+0x6a>
 800747a:	89a2      	ldrh	r2, [r4, #12]
 800747c:	88ab      	ldrh	r3, [r5, #4]
 800747e:	429a      	cmp	r2, r3
 8007480:	d1f1      	bne.n	8007466 <ip4_reass+0x6a>
  if (ipr == NULL) {
 8007482:	2c00      	cmp	r4, #0
 8007484:	d048      	beq.n	8007518 <ip4_reass+0x11c>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8007486:	88e8      	ldrh	r0, [r5, #6]
 8007488:	f7fe fe04 	bl	8006094 <lwip_htons>
 800748c:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8007490:	2800      	cmp	r0, #0
 8007492:	d049      	beq.n	8007528 <ip4_reass+0x12c>
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8007494:	88ed      	ldrh	r5, [r5, #6]
 8007496:	f005 0520 	and.w	r5, r5, #32
 800749a:	2d00      	cmp	r5, #0
 800749c:	bf0c      	ite	eq
 800749e:	2201      	moveq	r2, #1
 80074a0:	2200      	movne	r2, #0
  if (is_last) {
 80074a2:	d107      	bne.n	80074b4 <ip4_reass+0xb8>
    u16_t datagram_len = (u16_t)(offset + len);
 80074a4:	19bb      	adds	r3, r7, r6
 80074a6:	b29b      	uxth	r3, r3
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80074a8:	429f      	cmp	r7, r3
 80074aa:	d8d5      	bhi.n	8007458 <ip4_reass+0x5c>
 80074ac:	f64f 71eb 	movw	r1, #65515	; 0xffeb
 80074b0:	428b      	cmp	r3, r1
 80074b2:	d8d1      	bhi.n	8007458 <ip4_reass+0x5c>
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80074b4:	4649      	mov	r1, r9
 80074b6:	4620      	mov	r0, r4
 80074b8:	f7ff fe8a 	bl	80071d0 <ip_reass_chain_frag_into_datagram_and_validate>
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80074bc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80074c0:	d0ca      	beq.n	8007458 <ip4_reass+0x5c>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80074c2:	4b36      	ldr	r3, [pc, #216]	; (800759c <ip4_reass+0x1a0>)
 80074c4:	881a      	ldrh	r2, [r3, #0]
 80074c6:	4490      	add	r8, r2
 80074c8:	f8a3 8000 	strh.w	r8, [r3]
  if (is_last) {
 80074cc:	b92d      	cbnz	r5, 80074da <ip4_reass+0xde>
    u16_t datagram_len = (u16_t)(offset + len);
 80074ce:	443e      	add	r6, r7
    ipr->datagram_len = datagram_len;
 80074d0:	83a6      	strh	r6, [r4, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80074d2:	7fa3      	ldrb	r3, [r4, #30]
 80074d4:	f043 0301 	orr.w	r3, r3, #1
 80074d8:	77a3      	strb	r3, [r4, #30]
  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80074da:	2801      	cmp	r0, #1
 80074dc:	d15b      	bne.n	8007596 <ip4_reass+0x19a>
    ipr->datagram_len += IP_HLEN;
 80074de:	8ba3      	ldrh	r3, [r4, #28]
 80074e0:	3314      	adds	r3, #20
 80074e2:	83a3      	strh	r3, [r4, #28]
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 80074e4:	6863      	ldr	r3, [r4, #4]
 80074e6:	685e      	ldr	r6, [r3, #4]
 80074e8:	6835      	ldr	r5, [r6, #0]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80074ea:	4623      	mov	r3, r4
 80074ec:	f853 2f08 	ldr.w	r2, [r3, #8]!
 80074f0:	685f      	ldr	r7, [r3, #4]
 80074f2:	6898      	ldr	r0, [r3, #8]
 80074f4:	68d9      	ldr	r1, [r3, #12]
 80074f6:	6032      	str	r2, [r6, #0]
 80074f8:	6077      	str	r7, [r6, #4]
 80074fa:	60b0      	str	r0, [r6, #8]
 80074fc:	60f1      	str	r1, [r6, #12]
 80074fe:	691a      	ldr	r2, [r3, #16]
 8007500:	6132      	str	r2, [r6, #16]
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 8007502:	8ba0      	ldrh	r0, [r4, #28]
 8007504:	f7fe fdc6 	bl	8006094 <lwip_htons>
 8007508:	8070      	strh	r0, [r6, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800750a:	2300      	movs	r3, #0
 800750c:	71b3      	strb	r3, [r6, #6]
 800750e:	71f3      	strb	r3, [r6, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8007510:	72b3      	strb	r3, [r6, #10]
 8007512:	72f3      	strb	r3, [r6, #11]
    p = ipr->p;
 8007514:	6867      	ldr	r7, [r4, #4]
    while (r != NULL) {
 8007516:	e026      	b.n	8007566 <ip4_reass+0x16a>
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8007518:	4641      	mov	r1, r8
 800751a:	4628      	mov	r0, r5
 800751c:	f7ff ff28 	bl	8007370 <ip_reass_enqueue_new_datagram>
    if (ipr == NULL) {
 8007520:	4604      	mov	r4, r0
 8007522:	2800      	cmp	r0, #0
 8007524:	d1b6      	bne.n	8007494 <ip4_reass+0x98>
 8007526:	e797      	b.n	8007458 <ip4_reass+0x5c>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8007528:	89e0      	ldrh	r0, [r4, #14]
 800752a:	f7fe fdb3 	bl	8006094 <lwip_htons>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800752e:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8007532:	2800      	cmp	r0, #0
 8007534:	d0ae      	beq.n	8007494 <ip4_reass+0x98>
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8007536:	682a      	ldr	r2, [r5, #0]
 8007538:	f8d5 e004 	ldr.w	lr, [r5, #4]
 800753c:	68a8      	ldr	r0, [r5, #8]
 800753e:	68e9      	ldr	r1, [r5, #12]
 8007540:	60a2      	str	r2, [r4, #8]
 8007542:	f8c4 e00c 	str.w	lr, [r4, #12]
 8007546:	6120      	str	r0, [r4, #16]
 8007548:	6161      	str	r1, [r4, #20]
 800754a:	692a      	ldr	r2, [r5, #16]
 800754c:	61a2      	str	r2, [r4, #24]
 800754e:	e7a1      	b.n	8007494 <ip4_reass+0x98>
      iprh = (struct ip_reass_helper*)r->payload;
 8007550:	686e      	ldr	r6, [r5, #4]
      pbuf_header(r, -IP_HLEN);
 8007552:	f06f 0113 	mvn.w	r1, #19
 8007556:	4628      	mov	r0, r5
 8007558:	f000 fdae 	bl	80080b8 <pbuf_header>
      pbuf_cat(p, r);
 800755c:	4629      	mov	r1, r5
 800755e:	4638      	mov	r0, r7
 8007560:	f000 ffa0 	bl	80084a4 <pbuf_cat>
      r = iprh->next_pbuf;
 8007564:	6835      	ldr	r5, [r6, #0]
    while (r != NULL) {
 8007566:	2d00      	cmp	r5, #0
 8007568:	d1f2      	bne.n	8007550 <ip4_reass+0x154>
    if (ipr == reassdatagrams) {
 800756a:	4b0d      	ldr	r3, [pc, #52]	; (80075a0 <ip4_reass+0x1a4>)
 800756c:	6819      	ldr	r1, [r3, #0]
 800756e:	428c      	cmp	r4, r1
 8007570:	d005      	beq.n	800757e <ip4_reass+0x182>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8007572:	b129      	cbz	r1, 8007580 <ip4_reass+0x184>
        if (ipr_prev->next == ipr) {
 8007574:	680b      	ldr	r3, [r1, #0]
 8007576:	429c      	cmp	r4, r3
 8007578:	d002      	beq.n	8007580 <ip4_reass+0x184>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800757a:	4619      	mov	r1, r3
 800757c:	e7f9      	b.n	8007572 <ip4_reass+0x176>
      ipr_prev = NULL;
 800757e:	2100      	movs	r1, #0
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8007580:	4620      	mov	r0, r4
 8007582:	f7ff fd0d 	bl	8006fa0 <ip_reass_dequeue_datagram>
    ip_reass_pbufcount -= pbuf_clen(p);
 8007586:	4638      	mov	r0, r7
 8007588:	f000 ff66 	bl	8008458 <pbuf_clen>
 800758c:	4a03      	ldr	r2, [pc, #12]	; (800759c <ip4_reass+0x1a0>)
 800758e:	8813      	ldrh	r3, [r2, #0]
 8007590:	1a18      	subs	r0, r3, r0
 8007592:	8010      	strh	r0, [r2, #0]
    return p;
 8007594:	e764      	b.n	8007460 <ip4_reass+0x64>
  return NULL;
 8007596:	2700      	movs	r7, #0
 8007598:	e762      	b.n	8007460 <ip4_reass+0x64>
 800759a:	bf00      	nop
 800759c:	20003f38 	.word	0x20003f38
 80075a0:	20003f3c 	.word	0x20003f3c

080075a4 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80075a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075a8:	b08d      	sub	sp, #52	; 0x34
 80075aa:	4605      	mov	r5, r0
 80075ac:	9107      	str	r1, [sp, #28]
 80075ae:	920b      	str	r2, [sp, #44]	; 0x2c
  u16_t newpbuflen = 0;
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 80075b0:	8c4b      	ldrh	r3, [r1, #34]	; 0x22
 80075b2:	3b14      	subs	r3, #20
 80075b4:	d420      	bmi.n	80075f8 <ip4_frag+0x54>
 80075b6:	10db      	asrs	r3, r3, #3
 80075b8:	9309      	str	r3, [sp, #36]	; 0x24
 80075ba:	b29b      	uxth	r3, r3
 80075bc:	930a      	str	r3, [sp, #40]	; 0x28
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 80075be:	f8d5 a004 	ldr.w	sl, [r5, #4]
  iphdr = original_iphdr;
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 80075c2:	f89a 3000 	ldrb.w	r3, [sl]
 80075c6:	f003 030f 	and.w	r3, r3, #15
 80075ca:	2b05      	cmp	r3, #5
 80075cc:	d116      	bne.n	80075fc <ip4_frag+0x58>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80075ce:	f8ba 0006 	ldrh.w	r0, [sl, #6]
 80075d2:	f7fe fd5f 	bl	8006094 <lwip_htons>
  ofo = tmp & IP_OFFMASK;
 80075d6:	f3c0 030c 	ubfx	r3, r0, #0, #13
 80075da:	9306      	str	r3, [sp, #24]
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 80075dc:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 80075e0:	d116      	bne.n	8007610 <ip4_frag+0x6c>

  left = p->tot_len - IP_HLEN;
 80075e2:	f8b5 9008 	ldrh.w	r9, [r5, #8]
 80075e6:	f1a9 0914 	sub.w	r9, r9, #20
 80075ea:	fa1f fb89 	uxth.w	fp, r9
  u16_t poff = IP_HLEN;
 80075ee:	f04f 0814 	mov.w	r8, #20
  u16_t newpbuflen = 0;
 80075f2:	2400      	movs	r4, #0
 80075f4:	46d9      	mov	r9, fp

  while (left) {
 80075f6:	e08c      	b.n	8007712 <ip4_frag+0x16e>
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 80075f8:	3307      	adds	r3, #7
 80075fa:	e7dc      	b.n	80075b6 <ip4_frag+0x12>
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 80075fc:	4b5e      	ldr	r3, [pc, #376]	; (8007778 <ip4_frag+0x1d4>)
 80075fe:	f240 22e1 	movw	r2, #737	; 0x2e1
 8007602:	495e      	ldr	r1, [pc, #376]	; (800777c <ip4_frag+0x1d8>)
 8007604:	485e      	ldr	r0, [pc, #376]	; (8007780 <ip4_frag+0x1dc>)
 8007606:	f005 fff8 	bl	800d5fa <iprintf>
 800760a:	f06f 0005 	mvn.w	r0, #5
 800760e:	e043      	b.n	8007698 <ip4_frag+0xf4>
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 8007610:	4b59      	ldr	r3, [pc, #356]	; (8007778 <ip4_frag+0x1d4>)
 8007612:	f240 22e6 	movw	r2, #742	; 0x2e6
 8007616:	495b      	ldr	r1, [pc, #364]	; (8007784 <ip4_frag+0x1e0>)
 8007618:	4859      	ldr	r0, [pc, #356]	; (8007780 <ip4_frag+0x1dc>)
 800761a:	f005 ffee 	bl	800d5fa <iprintf>
 800761e:	f06f 0005 	mvn.w	r0, #5
 8007622:	e039      	b.n	8007698 <ip4_frag+0xf4>
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
    if (rambuf == NULL) {
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8007624:	4b54      	ldr	r3, [pc, #336]	; (8007778 <ip4_frag+0x1d4>)
 8007626:	f240 3209 	movw	r2, #777	; 0x309
 800762a:	4957      	ldr	r1, [pc, #348]	; (8007788 <ip4_frag+0x1e4>)
 800762c:	4854      	ldr	r0, [pc, #336]	; (8007780 <ip4_frag+0x1dc>)
 800762e:	f005 ffe4 	bl	800d5fa <iprintf>
 8007632:	e086      	b.n	8007742 <ip4_frag+0x19e>
      if (!newpbuflen) {
        poff = 0;
        p = p->next;
        continue;
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8007634:	f7ff fe96 	bl	8007364 <ip_frag_alloc_pbuf_custom_ref>
      if (pcr == NULL) {
 8007638:	4607      	mov	r7, r0
 800763a:	b340      	cbz	r0, 800768e <ip4_frag+0xea>
        pbuf_free(rambuf);
        goto memerr;
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
        (u8_t*)p->payload + poff, newpbuflen);
 800763c:	686b      	ldr	r3, [r5, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800763e:	4443      	add	r3, r8
 8007640:	9401      	str	r4, [sp, #4]
 8007642:	9300      	str	r3, [sp, #0]
 8007644:	4603      	mov	r3, r0
 8007646:	2202      	movs	r2, #2
 8007648:	4621      	mov	r1, r4
 800764a:	2004      	movs	r0, #4
 800764c:	f000 fcf8 	bl	8008040 <pbuf_alloced_custom>
      if (newpbuf == NULL) {
 8007650:	9003      	str	r0, [sp, #12]
 8007652:	b320      	cbz	r0, 800769e <ip4_frag+0xfa>
        ip_frag_free_pbuf_custom_ref(pcr);
        pbuf_free(rambuf);
        goto memerr;
      }
      pbuf_ref(p);
 8007654:	4628      	mov	r0, r5
 8007656:	f000 ff09 	bl	800846c <pbuf_ref>
      pcr->original = p;
 800765a:	617d      	str	r5, [r7, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800765c:	4b4b      	ldr	r3, [pc, #300]	; (800778c <ip4_frag+0x1e8>)
 800765e:	613b      	str	r3, [r7, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8007660:	9903      	ldr	r1, [sp, #12]
 8007662:	9804      	ldr	r0, [sp, #16]
 8007664:	f000 ff1e 	bl	80084a4 <pbuf_cat>
      left_to_copy -= newpbuflen;
 8007668:	1b36      	subs	r6, r6, r4
 800766a:	b2b6      	uxth	r6, r6
      if (left_to_copy) {
 800766c:	b116      	cbz	r6, 8007674 <ip4_frag+0xd0>
        poff = 0;
        p = p->next;
 800766e:	682d      	ldr	r5, [r5, #0]
        poff = 0;
 8007670:	f04f 0800 	mov.w	r8, #0
    while (left_to_copy) {
 8007674:	b1e6      	cbz	r6, 80076b0 <ip4_frag+0x10c>
      u16_t plen = p->len - poff;
 8007676:	896c      	ldrh	r4, [r5, #10]
 8007678:	eba4 0408 	sub.w	r4, r4, r8
 800767c:	b2a4      	uxth	r4, r4
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800767e:	42b4      	cmp	r4, r6
 8007680:	bf28      	it	cs
 8007682:	4634      	movcs	r4, r6
      if (!newpbuflen) {
 8007684:	2c00      	cmp	r4, #0
 8007686:	d1d5      	bne.n	8007634 <ip4_frag+0x90>
        p = p->next;
 8007688:	682d      	ldr	r5, [r5, #0]
        poff = 0;
 800768a:	46a0      	mov	r8, r4
        continue;
 800768c:	e7f2      	b.n	8007674 <ip4_frag+0xd0>
        pbuf_free(rambuf);
 800768e:	9804      	ldr	r0, [sp, #16]
 8007690:	f000 fd1c 	bl	80080cc <pbuf_free>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8007694:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8007698:	b00d      	add	sp, #52	; 0x34
 800769a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        ip_frag_free_pbuf_custom_ref(pcr);
 800769e:	4638      	mov	r0, r7
 80076a0:	f7ff fd66 	bl	8007170 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 80076a4:	9804      	ldr	r0, [sp, #16]
 80076a6:	f000 fd11 	bl	80080cc <pbuf_free>
  return ERR_MEM;
 80076aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        goto memerr;
 80076ae:	e7f3      	b.n	8007698 <ip4_frag+0xf4>
    poff += newpbuflen;
 80076b0:	44a0      	add	r8, r4
 80076b2:	fa1f f888 	uxth.w	r8, r8
    last = (left <= netif->mtu - IP_HLEN);
 80076b6:	9b07      	ldr	r3, [sp, #28]
 80076b8:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80076ba:	3b14      	subs	r3, #20
    tmp = (IP_OFFMASK & (ofo));
 80076bc:	9a06      	ldr	r2, [sp, #24]
 80076be:	f3c2 000c 	ubfx	r0, r2, #0, #13
    if (!last) {
 80076c2:	9a08      	ldr	r2, [sp, #32]
 80076c4:	429a      	cmp	r2, r3
 80076c6:	dd01      	ble.n	80076cc <ip4_frag+0x128>
      tmp = tmp | IP_MF;
 80076c8:	f440 5000 	orr.w	r0, r0, #8192	; 0x2000
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80076cc:	f7fe fce2 	bl	8006094 <lwip_htons>
 80076d0:	f8ab 0006 	strh.w	r0, [fp, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 80076d4:	9e05      	ldr	r6, [sp, #20]
 80076d6:	f106 0014 	add.w	r0, r6, #20
 80076da:	b280      	uxth	r0, r0
 80076dc:	f7fe fcda 	bl	8006094 <lwip_htons>
 80076e0:	f8ab 0002 	strh.w	r0, [fp, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80076e4:	2300      	movs	r3, #0
 80076e6:	f88b 300a 	strb.w	r3, [fp, #10]
 80076ea:	f88b 300b 	strb.w	r3, [fp, #11]
    netif->output(netif, rambuf, dest);
 80076ee:	9807      	ldr	r0, [sp, #28]
 80076f0:	6943      	ldr	r3, [r0, #20]
 80076f2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80076f4:	9f04      	ldr	r7, [sp, #16]
 80076f6:	4639      	mov	r1, r7
 80076f8:	4798      	blx	r3
    pbuf_free(rambuf);
 80076fa:	4638      	mov	r0, r7
 80076fc:	f000 fce6 	bl	80080cc <pbuf_free>
    left -= fragsize;
 8007700:	eba9 0306 	sub.w	r3, r9, r6
 8007704:	fa1f f983 	uxth.w	r9, r3
    ofo += nfb;
 8007708:	9b06      	ldr	r3, [sp, #24]
 800770a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800770c:	4413      	add	r3, r2
 800770e:	b29b      	uxth	r3, r3
 8007710:	9306      	str	r3, [sp, #24]
  while (left) {
 8007712:	f1b9 0f00 	cmp.w	r9, #0
 8007716:	d029      	beq.n	800776c <ip4_frag+0x1c8>
    fragsize = LWIP_MIN(left, nfb * 8);
 8007718:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 800771c:	00db      	lsls	r3, r3, #3
 800771e:	f8cd 9020 	str.w	r9, [sp, #32]
 8007722:	454b      	cmp	r3, r9
 8007724:	bfa8      	it	ge
 8007726:	464b      	movge	r3, r9
 8007728:	b29b      	uxth	r3, r3
 800772a:	9305      	str	r3, [sp, #20]
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800772c:	2200      	movs	r2, #0
 800772e:	2114      	movs	r1, #20
 8007730:	2002      	movs	r0, #2
 8007732:	f000 fd37 	bl	80081a4 <pbuf_alloc>
    if (rambuf == NULL) {
 8007736:	9004      	str	r0, [sp, #16]
 8007738:	b1d0      	cbz	r0, 8007770 <ip4_frag+0x1cc>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800773a:	896b      	ldrh	r3, [r5, #10]
 800773c:	2b13      	cmp	r3, #19
 800773e:	f67f af71 	bls.w	8007624 <ip4_frag+0x80>
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8007742:	9f04      	ldr	r7, [sp, #16]
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	f8da 2000 	ldr.w	r2, [sl]
 800774a:	f8da 6004 	ldr.w	r6, [sl, #4]
 800774e:	f8da 0008 	ldr.w	r0, [sl, #8]
 8007752:	f8da 100c 	ldr.w	r1, [sl, #12]
 8007756:	601a      	str	r2, [r3, #0]
 8007758:	605e      	str	r6, [r3, #4]
 800775a:	6098      	str	r0, [r3, #8]
 800775c:	60d9      	str	r1, [r3, #12]
 800775e:	f8da 2010 	ldr.w	r2, [sl, #16]
 8007762:	611a      	str	r2, [r3, #16]
    iphdr = (struct ip_hdr *)rambuf->payload;
 8007764:	f8d7 b004 	ldr.w	fp, [r7, #4]
    left_to_copy = fragsize;
 8007768:	9e05      	ldr	r6, [sp, #20]
    while (left_to_copy) {
 800776a:	e783      	b.n	8007674 <ip4_frag+0xd0>
  return ERR_OK;
 800776c:	2000      	movs	r0, #0
 800776e:	e793      	b.n	8007698 <ip4_frag+0xf4>
  return ERR_MEM;
 8007770:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007774:	e790      	b.n	8007698 <ip4_frag+0xf4>
 8007776:	bf00      	nop
 8007778:	0800ea90 	.word	0x0800ea90
 800777c:	0800e9a0 	.word	0x0800e9a0
 8007780:	0800de34 	.word	0x0800de34
 8007784:	0800e9c8 	.word	0x0800e9c8
 8007788:	0800e9e4 	.word	0x0800e9e4
 800778c:	0800719d 	.word	0x0800719d

08007790 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8007790:	b510      	push	{r4, lr}
 8007792:	4604      	mov	r4, r0
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8007794:	4b2d      	ldr	r3, [pc, #180]	; (800784c <plug_holes+0xbc>)
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	4283      	cmp	r3, r0
 800779a:	d831      	bhi.n	8007800 <plug_holes+0x70>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800779c:	4b2c      	ldr	r3, [pc, #176]	; (8007850 <plug_holes+0xc0>)
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	429c      	cmp	r4, r3
 80077a2:	d235      	bcs.n	8007810 <plug_holes+0x80>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80077a4:	7923      	ldrb	r3, [r4, #4]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d13a      	bne.n	8007820 <plug_holes+0x90>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80077aa:	8823      	ldrh	r3, [r4, #0]
 80077ac:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80077b0:	d83e      	bhi.n	8007830 <plug_holes+0xa0>

  nmem = (struct mem *)(void *)&ram[mem->next];
 80077b2:	4b26      	ldr	r3, [pc, #152]	; (800784c <plug_holes+0xbc>)
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	8821      	ldrh	r1, [r4, #0]
 80077b8:	185a      	adds	r2, r3, r1
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80077ba:	4294      	cmp	r4, r2
 80077bc:	d00f      	beq.n	80077de <plug_holes+0x4e>
 80077be:	7910      	ldrb	r0, [r2, #4]
 80077c0:	b968      	cbnz	r0, 80077de <plug_holes+0x4e>
 80077c2:	4823      	ldr	r0, [pc, #140]	; (8007850 <plug_holes+0xc0>)
 80077c4:	6800      	ldr	r0, [r0, #0]
 80077c6:	4282      	cmp	r2, r0
 80077c8:	d009      	beq.n	80077de <plug_holes+0x4e>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80077ca:	4822      	ldr	r0, [pc, #136]	; (8007854 <plug_holes+0xc4>)
 80077cc:	6800      	ldr	r0, [r0, #0]
 80077ce:	4282      	cmp	r2, r0
 80077d0:	d036      	beq.n	8007840 <plug_holes+0xb0>
      lfree = mem;
    }
    mem->next = nmem->next;
 80077d2:	5a5a      	ldrh	r2, [r3, r1]
 80077d4:	8022      	strh	r2, [r4, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 80077d6:	5a5a      	ldrh	r2, [r3, r1]
 80077d8:	441a      	add	r2, r3
 80077da:	1ae1      	subs	r1, r4, r3
 80077dc:	8051      	strh	r1, [r2, #2]
  }

  /* plug hole backward */
  pmem = (struct mem *)(void *)&ram[mem->prev];
 80077de:	8861      	ldrh	r1, [r4, #2]
 80077e0:	185a      	adds	r2, r3, r1
  if (pmem != mem && pmem->used == 0) {
 80077e2:	4294      	cmp	r4, r2
 80077e4:	d00b      	beq.n	80077fe <plug_holes+0x6e>
 80077e6:	7910      	ldrb	r0, [r2, #4]
 80077e8:	b948      	cbnz	r0, 80077fe <plug_holes+0x6e>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 80077ea:	481a      	ldr	r0, [pc, #104]	; (8007854 <plug_holes+0xc4>)
 80077ec:	6800      	ldr	r0, [r0, #0]
 80077ee:	4284      	cmp	r4, r0
 80077f0:	d029      	beq.n	8007846 <plug_holes+0xb6>
      lfree = pmem;
    }
    pmem->next = mem->next;
 80077f2:	8820      	ldrh	r0, [r4, #0]
 80077f4:	5258      	strh	r0, [r3, r1]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 80077f6:	8821      	ldrh	r1, [r4, #0]
 80077f8:	4419      	add	r1, r3
 80077fa:	1ad3      	subs	r3, r2, r3
 80077fc:	804b      	strh	r3, [r1, #2]
 80077fe:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8007800:	4b15      	ldr	r3, [pc, #84]	; (8007858 <plug_holes+0xc8>)
 8007802:	f240 125d 	movw	r2, #349	; 0x15d
 8007806:	4915      	ldr	r1, [pc, #84]	; (800785c <plug_holes+0xcc>)
 8007808:	4815      	ldr	r0, [pc, #84]	; (8007860 <plug_holes+0xd0>)
 800780a:	f005 fef6 	bl	800d5fa <iprintf>
 800780e:	e7c5      	b.n	800779c <plug_holes+0xc>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8007810:	4b11      	ldr	r3, [pc, #68]	; (8007858 <plug_holes+0xc8>)
 8007812:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8007816:	4913      	ldr	r1, [pc, #76]	; (8007864 <plug_holes+0xd4>)
 8007818:	4811      	ldr	r0, [pc, #68]	; (8007860 <plug_holes+0xd0>)
 800781a:	f005 feee 	bl	800d5fa <iprintf>
 800781e:	e7c1      	b.n	80077a4 <plug_holes+0x14>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8007820:	4b0d      	ldr	r3, [pc, #52]	; (8007858 <plug_holes+0xc8>)
 8007822:	f240 125f 	movw	r2, #351	; 0x15f
 8007826:	4910      	ldr	r1, [pc, #64]	; (8007868 <plug_holes+0xd8>)
 8007828:	480d      	ldr	r0, [pc, #52]	; (8007860 <plug_holes+0xd0>)
 800782a:	f005 fee6 	bl	800d5fa <iprintf>
 800782e:	e7bc      	b.n	80077aa <plug_holes+0x1a>
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8007830:	4b09      	ldr	r3, [pc, #36]	; (8007858 <plug_holes+0xc8>)
 8007832:	f44f 72b1 	mov.w	r2, #354	; 0x162
 8007836:	490d      	ldr	r1, [pc, #52]	; (800786c <plug_holes+0xdc>)
 8007838:	4809      	ldr	r0, [pc, #36]	; (8007860 <plug_holes+0xd0>)
 800783a:	f005 fede 	bl	800d5fa <iprintf>
 800783e:	e7b8      	b.n	80077b2 <plug_holes+0x22>
      lfree = mem;
 8007840:	4a04      	ldr	r2, [pc, #16]	; (8007854 <plug_holes+0xc4>)
 8007842:	6014      	str	r4, [r2, #0]
 8007844:	e7c5      	b.n	80077d2 <plug_holes+0x42>
      lfree = pmem;
 8007846:	4803      	ldr	r0, [pc, #12]	; (8007854 <plug_holes+0xc4>)
 8007848:	6002      	str	r2, [r0, #0]
 800784a:	e7d2      	b.n	80077f2 <plug_holes+0x62>
 800784c:	20003f48 	.word	0x20003f48
 8007850:	20003f4c 	.word	0x20003f4c
 8007854:	20003f40 	.word	0x20003f40
 8007858:	0800ec94 	.word	0x0800ec94
 800785c:	0800ecc4 	.word	0x0800ecc4
 8007860:	0800de34 	.word	0x0800de34
 8007864:	0800ecdc 	.word	0x0800ecdc
 8007868:	0800ecf8 	.word	0x0800ecf8
 800786c:	0800ed14 	.word	0x0800ed14

08007870 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8007870:	b508      	push	{r3, lr}

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8007872:	4b11      	ldr	r3, [pc, #68]	; (80078b8 <mem_init+0x48>)
 8007874:	f023 0303 	bic.w	r3, r3, #3
 8007878:	4a10      	ldr	r2, [pc, #64]	; (80078bc <mem_init+0x4c>)
 800787a:	6013      	str	r3, [r2, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
  mem->next = MEM_SIZE_ALIGNED;
 800787c:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 8007880:	8019      	strh	r1, [r3, #0]
  mem->prev = 0;
 8007882:	2200      	movs	r2, #0
 8007884:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8007886:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 8007888:	185a      	adds	r2, r3, r1
 800788a:	480d      	ldr	r0, [pc, #52]	; (80078c0 <mem_init+0x50>)
 800788c:	6002      	str	r2, [r0, #0]
  ram_end->used = 1;
 800788e:	2001      	movs	r0, #1
 8007890:	7110      	strb	r0, [r2, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8007892:	f8a3 1640 	strh.w	r1, [r3, #1600]	; 0x640
  ram_end->prev = MEM_SIZE_ALIGNED;
 8007896:	8051      	strh	r1, [r2, #2]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8007898:	4a0a      	ldr	r2, [pc, #40]	; (80078c4 <mem_init+0x54>)
 800789a:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800789c:	480a      	ldr	r0, [pc, #40]	; (80078c8 <mem_init+0x58>)
 800789e:	f005 f807 	bl	800c8b0 <sys_mutex_new>
 80078a2:	b900      	cbnz	r0, 80078a6 <mem_init+0x36>
 80078a4:	bd08      	pop	{r3, pc}
    LWIP_ASSERT("failed to create mem_mutex", 0);
 80078a6:	4b09      	ldr	r3, [pc, #36]	; (80078cc <mem_init+0x5c>)
 80078a8:	f44f 72cc 	mov.w	r2, #408	; 0x198
 80078ac:	4908      	ldr	r1, [pc, #32]	; (80078d0 <mem_init+0x60>)
 80078ae:	4809      	ldr	r0, [pc, #36]	; (80078d4 <mem_init+0x64>)
 80078b0:	f005 fea3 	bl	800d5fa <iprintf>
  }
}
 80078b4:	e7f6      	b.n	80078a4 <mem_init+0x34>
 80078b6:	bf00      	nop
 80078b8:	2000428f 	.word	0x2000428f
 80078bc:	20003f48 	.word	0x20003f48
 80078c0:	20003f4c 	.word	0x20003f4c
 80078c4:	20003f40 	.word	0x20003f40
 80078c8:	20003f44 	.word	0x20003f44
 80078cc:	0800ec94 	.word	0x0800ec94
 80078d0:	0800eba0 	.word	0x0800eba0
 80078d4:	0800de34 	.word	0x0800de34

080078d8 <mem_free>:
mem_free(void *rmem)
{
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80078d8:	2800      	cmp	r0, #0
 80078da:	d048      	beq.n	800796e <mem_free+0x96>
{
 80078dc:	b538      	push	{r3, r4, r5, lr}
 80078de:	4604      	mov	r4, r0
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 80078e0:	f010 0f03 	tst.w	r0, #3
 80078e4:	d11b      	bne.n	800791e <mem_free+0x46>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80078e6:	4b22      	ldr	r3, [pc, #136]	; (8007970 <mem_free+0x98>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	429c      	cmp	r4, r3
 80078ec:	d303      	bcc.n	80078f6 <mem_free+0x1e>
 80078ee:	4b21      	ldr	r3, [pc, #132]	; (8007974 <mem_free+0x9c>)
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	429c      	cmp	r4, r3
 80078f4:	d306      	bcc.n	8007904 <mem_free+0x2c>
 80078f6:	4b20      	ldr	r3, [pc, #128]	; (8007978 <mem_free+0xa0>)
 80078f8:	f240 12af 	movw	r2, #431	; 0x1af
 80078fc:	491f      	ldr	r1, [pc, #124]	; (800797c <mem_free+0xa4>)
 80078fe:	4820      	ldr	r0, [pc, #128]	; (8007980 <mem_free+0xa8>)
 8007900:	f005 fe7b 	bl	800d5fa <iprintf>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8007904:	4b1a      	ldr	r3, [pc, #104]	; (8007970 <mem_free+0x98>)
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	429c      	cmp	r4, r3
 800790a:	d303      	bcc.n	8007914 <mem_free+0x3c>
 800790c:	4b19      	ldr	r3, [pc, #100]	; (8007974 <mem_free+0x9c>)
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	429c      	cmp	r4, r3
 8007912:	d30c      	bcc.n	800792e <mem_free+0x56>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 8007914:	f004 fffe 	bl	800c914 <sys_arch_protect>
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
 8007918:	f005 f808 	bl	800c92c <sys_arch_unprotect>
    return;
 800791c:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 800791e:	4b16      	ldr	r3, [pc, #88]	; (8007978 <mem_free+0xa0>)
 8007920:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 8007924:	4917      	ldr	r1, [pc, #92]	; (8007984 <mem_free+0xac>)
 8007926:	4816      	ldr	r0, [pc, #88]	; (8007980 <mem_free+0xa8>)
 8007928:	f005 fe67 	bl	800d5fa <iprintf>
 800792c:	e7db      	b.n	80078e6 <mem_free+0xe>
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800792e:	4816      	ldr	r0, [pc, #88]	; (8007988 <mem_free+0xb0>)
 8007930:	f004 ffcf 	bl	800c8d2 <sys_mutex_lock>
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8007934:	f1a4 0508 	sub.w	r5, r4, #8
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 8007938:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 800793c:	b17b      	cbz	r3, 800795e <mem_free+0x86>
  /* ... and is now unused. */
  mem->used = 0;
 800793e:	2300      	movs	r3, #0
 8007940:	f804 3c04 	strb.w	r3, [r4, #-4]

  if (mem < lfree) {
 8007944:	4b11      	ldr	r3, [pc, #68]	; (800798c <mem_free+0xb4>)
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	429d      	cmp	r5, r3
 800794a:	d201      	bcs.n	8007950 <mem_free+0x78>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800794c:	4b0f      	ldr	r3, [pc, #60]	; (800798c <mem_free+0xb4>)
 800794e:	601d      	str	r5, [r3, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8007950:	4628      	mov	r0, r5
 8007952:	f7ff ff1d 	bl	8007790 <plug_holes>
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8007956:	480c      	ldr	r0, [pc, #48]	; (8007988 <mem_free+0xb0>)
 8007958:	f004 ffc2 	bl	800c8e0 <sys_mutex_unlock>
 800795c:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 800795e:	4b06      	ldr	r3, [pc, #24]	; (8007978 <mem_free+0xa0>)
 8007960:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 8007964:	490a      	ldr	r1, [pc, #40]	; (8007990 <mem_free+0xb8>)
 8007966:	4806      	ldr	r0, [pc, #24]	; (8007980 <mem_free+0xa8>)
 8007968:	f005 fe47 	bl	800d5fa <iprintf>
 800796c:	e7e7      	b.n	800793e <mem_free+0x66>
 800796e:	4770      	bx	lr
 8007970:	20003f48 	.word	0x20003f48
 8007974:	20003f4c 	.word	0x20003f4c
 8007978:	0800ec94 	.word	0x0800ec94
 800797c:	0800eb74 	.word	0x0800eb74
 8007980:	0800de34 	.word	0x0800de34
 8007984:	0800eb50 	.word	0x0800eb50
 8007988:	20003f44 	.word	0x20003f44
 800798c:	20003f40 	.word	0x20003f40
 8007990:	0800eb8c 	.word	0x0800eb8c

08007994 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 8007994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007996:	4605      	mov	r5, r0
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 8007998:	1ccc      	adds	r4, r1, #3
 800799a:	b2a4      	uxth	r4, r4
 800799c:	f024 0403 	bic.w	r4, r4, #3
 80079a0:	b2a4      	uxth	r4, r4

  if (newsize < MIN_SIZE_ALIGNED) {
 80079a2:	2c0b      	cmp	r4, #11
 80079a4:	d800      	bhi.n	80079a8 <mem_trim+0x14>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80079a6:	240c      	movs	r4, #12
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 80079a8:	f5b4 6fc8 	cmp.w	r4, #1600	; 0x640
 80079ac:	d879      	bhi.n	8007aa2 <mem_trim+0x10e>
    return NULL;
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80079ae:	4b3f      	ldr	r3, [pc, #252]	; (8007aac <mem_trim+0x118>)
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	42ab      	cmp	r3, r5
 80079b4:	d803      	bhi.n	80079be <mem_trim+0x2a>
 80079b6:	4b3e      	ldr	r3, [pc, #248]	; (8007ab0 <mem_trim+0x11c>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	429d      	cmp	r5, r3
 80079bc:	d306      	bcc.n	80079cc <mem_trim+0x38>
 80079be:	4b3d      	ldr	r3, [pc, #244]	; (8007ab4 <mem_trim+0x120>)
 80079c0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80079c4:	493c      	ldr	r1, [pc, #240]	; (8007ab8 <mem_trim+0x124>)
 80079c6:	483d      	ldr	r0, [pc, #244]	; (8007abc <mem_trim+0x128>)
 80079c8:	f005 fe17 	bl	800d5fa <iprintf>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80079cc:	4b37      	ldr	r3, [pc, #220]	; (8007aac <mem_trim+0x118>)
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	429d      	cmp	r5, r3
 80079d2:	d336      	bcc.n	8007a42 <mem_trim+0xae>
 80079d4:	4a36      	ldr	r2, [pc, #216]	; (8007ab0 <mem_trim+0x11c>)
 80079d6:	6812      	ldr	r2, [r2, #0]
 80079d8:	4295      	cmp	r5, r2
 80079da:	d232      	bcs.n	8007a42 <mem_trim+0xae>
    SYS_ARCH_UNPROTECT(lev);
    return rmem;
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 80079dc:	f1a5 0708 	sub.w	r7, r5, #8
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
 80079e0:	1aff      	subs	r7, r7, r3
 80079e2:	b2bf      	uxth	r7, r7

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 80079e4:	f835 6c08 	ldrh.w	r6, [r5, #-8]
 80079e8:	1bf6      	subs	r6, r6, r7
 80079ea:	b2b6      	uxth	r6, r6
 80079ec:	3e08      	subs	r6, #8
 80079ee:	b2b6      	uxth	r6, r6
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80079f0:	42b4      	cmp	r4, r6
 80079f2:	d82c      	bhi.n	8007a4e <mem_trim+0xba>
  if (newsize > size) {
 80079f4:	42b4      	cmp	r4, r6
 80079f6:	d856      	bhi.n	8007aa6 <mem_trim+0x112>
    /* not supported */
    return NULL;
  }
  if (newsize == size) {
 80079f8:	d027      	beq.n	8007a4a <mem_trim+0xb6>
    /* No change in size, simply return */
    return rmem;
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 80079fa:	4831      	ldr	r0, [pc, #196]	; (8007ac0 <mem_trim+0x12c>)
 80079fc:	f004 ff69 	bl	800c8d2 <sys_mutex_lock>

  mem2 = (struct mem *)(void *)&ram[mem->next];
 8007a00:	4b2a      	ldr	r3, [pc, #168]	; (8007aac <mem_trim+0x118>)
 8007a02:	681a      	ldr	r2, [r3, #0]
 8007a04:	f835 3c08 	ldrh.w	r3, [r5, #-8]
 8007a08:	18d1      	adds	r1, r2, r3
  if (mem2->used == 0) {
 8007a0a:	7908      	ldrb	r0, [r1, #4]
 8007a0c:	bb58      	cbnz	r0, 8007a66 <mem_trim+0xd2>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
 8007a0e:	5ad0      	ldrh	r0, [r2, r3]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8007a10:	19e3      	adds	r3, r4, r7
 8007a12:	b29b      	uxth	r3, r3
 8007a14:	3308      	adds	r3, #8
 8007a16:	b29b      	uxth	r3, r3
    if (lfree == mem2) {
 8007a18:	4c2a      	ldr	r4, [pc, #168]	; (8007ac4 <mem_trim+0x130>)
 8007a1a:	6824      	ldr	r4, [r4, #0]
 8007a1c:	42a1      	cmp	r1, r4
 8007a1e:	d01e      	beq.n	8007a5e <mem_trim+0xca>
      lfree = (struct mem *)(void *)&ram[ptr2];
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
 8007a20:	18d1      	adds	r1, r2, r3
    mem2->used = 0;
 8007a22:	2400      	movs	r4, #0
 8007a24:	710c      	strb	r4, [r1, #4]
    /* restore the next pointer */
    mem2->next = next;
 8007a26:	52d0      	strh	r0, [r2, r3]
    /* link it back to mem */
    mem2->prev = ptr;
 8007a28:	804f      	strh	r7, [r1, #2]
    /* link mem to it */
    mem->next = ptr2;
 8007a2a:	f825 3c08 	strh.w	r3, [r5, #-8]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8007a2e:	5ad1      	ldrh	r1, [r2, r3]
 8007a30:	f5b1 6fc8 	cmp.w	r1, #1600	; 0x640
 8007a34:	d001      	beq.n	8007a3a <mem_trim+0xa6>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8007a36:	440a      	add	r2, r1
 8007a38:	8053      	strh	r3, [r2, #2]
    -> the remaining space stays unused since it is too small
  } */
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8007a3a:	4821      	ldr	r0, [pc, #132]	; (8007ac0 <mem_trim+0x12c>)
 8007a3c:	f004 ff50 	bl	800c8e0 <sys_mutex_unlock>
  return rmem;
 8007a40:	e003      	b.n	8007a4a <mem_trim+0xb6>
    SYS_ARCH_PROTECT(lev);
 8007a42:	f004 ff67 	bl	800c914 <sys_arch_protect>
    SYS_ARCH_UNPROTECT(lev);
 8007a46:	f004 ff71 	bl	800c92c <sys_arch_unprotect>
}
 8007a4a:	4628      	mov	r0, r5
 8007a4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8007a4e:	4b19      	ldr	r3, [pc, #100]	; (8007ab4 <mem_trim+0x120>)
 8007a50:	f240 2206 	movw	r2, #518	; 0x206
 8007a54:	491c      	ldr	r1, [pc, #112]	; (8007ac8 <mem_trim+0x134>)
 8007a56:	4819      	ldr	r0, [pc, #100]	; (8007abc <mem_trim+0x128>)
 8007a58:	f005 fdcf 	bl	800d5fa <iprintf>
 8007a5c:	e7ca      	b.n	80079f4 <mem_trim+0x60>
      lfree = (struct mem *)(void *)&ram[ptr2];
 8007a5e:	18d1      	adds	r1, r2, r3
 8007a60:	4c18      	ldr	r4, [pc, #96]	; (8007ac4 <mem_trim+0x130>)
 8007a62:	6021      	str	r1, [r4, #0]
 8007a64:	e7dc      	b.n	8007a20 <mem_trim+0x8c>
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8007a66:	f104 0314 	add.w	r3, r4, #20
 8007a6a:	42b3      	cmp	r3, r6
 8007a6c:	d8e5      	bhi.n	8007a3a <mem_trim+0xa6>
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8007a6e:	19e3      	adds	r3, r4, r7
 8007a70:	b29b      	uxth	r3, r3
 8007a72:	3308      	adds	r3, #8
 8007a74:	b29b      	uxth	r3, r3
    mem2 = (struct mem *)(void *)&ram[ptr2];
 8007a76:	18d1      	adds	r1, r2, r3
    if (mem2 < lfree) {
 8007a78:	4812      	ldr	r0, [pc, #72]	; (8007ac4 <mem_trim+0x130>)
 8007a7a:	6800      	ldr	r0, [r0, #0]
 8007a7c:	4281      	cmp	r1, r0
 8007a7e:	d201      	bcs.n	8007a84 <mem_trim+0xf0>
      lfree = mem2;
 8007a80:	4810      	ldr	r0, [pc, #64]	; (8007ac4 <mem_trim+0x130>)
 8007a82:	6001      	str	r1, [r0, #0]
    mem2->used = 0;
 8007a84:	2000      	movs	r0, #0
 8007a86:	7108      	strb	r0, [r1, #4]
    mem2->next = mem->next;
 8007a88:	f835 0c08 	ldrh.w	r0, [r5, #-8]
 8007a8c:	52d0      	strh	r0, [r2, r3]
    mem2->prev = ptr;
 8007a8e:	804f      	strh	r7, [r1, #2]
    mem->next = ptr2;
 8007a90:	f825 3c08 	strh.w	r3, [r5, #-8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8007a94:	5ad1      	ldrh	r1, [r2, r3]
 8007a96:	f5b1 6fc8 	cmp.w	r1, #1600	; 0x640
 8007a9a:	d0ce      	beq.n	8007a3a <mem_trim+0xa6>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8007a9c:	440a      	add	r2, r1
 8007a9e:	8053      	strh	r3, [r2, #2]
 8007aa0:	e7cb      	b.n	8007a3a <mem_trim+0xa6>
    return NULL;
 8007aa2:	2500      	movs	r5, #0
 8007aa4:	e7d1      	b.n	8007a4a <mem_trim+0xb6>
    return NULL;
 8007aa6:	2500      	movs	r5, #0
 8007aa8:	e7cf      	b.n	8007a4a <mem_trim+0xb6>
 8007aaa:	bf00      	nop
 8007aac:	20003f48 	.word	0x20003f48
 8007ab0:	20003f4c 	.word	0x20003f4c
 8007ab4:	0800ec94 	.word	0x0800ec94
 8007ab8:	0800ec5c 	.word	0x0800ec5c
 8007abc:	0800de34 	.word	0x0800de34
 8007ac0:	20003f44 	.word	0x20003f44
 8007ac4:	20003f40 	.word	0x20003f40
 8007ac8:	0800ec74 	.word	0x0800ec74

08007acc <mem_malloc>:
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 8007acc:	2800      	cmp	r0, #0
 8007ace:	f000 808e 	beq.w	8007bee <mem_malloc+0x122>
{
 8007ad2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ad4:	4605      	mov	r5, r0
    return NULL;
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 8007ad6:	3503      	adds	r5, #3
 8007ad8:	b2ad      	uxth	r5, r5
 8007ada:	f025 0503 	bic.w	r5, r5, #3
 8007ade:	b2ad      	uxth	r5, r5

  if (size < MIN_SIZE_ALIGNED) {
 8007ae0:	2d0b      	cmp	r5, #11
 8007ae2:	d800      	bhi.n	8007ae6 <mem_malloc+0x1a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8007ae4:	250c      	movs	r5, #12
  }

  if (size > MEM_SIZE_ALIGNED) {
 8007ae6:	f5b5 6fc8 	cmp.w	r5, #1600	; 0x640
 8007aea:	f200 8082 	bhi.w	8007bf2 <mem_malloc+0x126>
    return NULL;
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8007aee:	4842      	ldr	r0, [pc, #264]	; (8007bf8 <mem_malloc+0x12c>)
 8007af0:	f004 feef 	bl	800c8d2 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8007af4:	4b41      	ldr	r3, [pc, #260]	; (8007bfc <mem_malloc+0x130>)
 8007af6:	6818      	ldr	r0, [r3, #0]
 8007af8:	4b41      	ldr	r3, [pc, #260]	; (8007c00 <mem_malloc+0x134>)
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	1a1b      	subs	r3, r3, r0
 8007afe:	b29b      	uxth	r3, r3
 8007b00:	e049      	b.n	8007b96 <mem_malloc+0xca>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8007b02:	2301      	movs	r3, #1
 8007b04:	7123      	strb	r3, [r4, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8007b06:	4b3e      	ldr	r3, [pc, #248]	; (8007c00 <mem_malloc+0x134>)
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	429c      	cmp	r4, r3
 8007b0c:	d014      	beq.n	8007b38 <mem_malloc+0x6c>
          }
          lfree = cur;
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8007b0e:	483a      	ldr	r0, [pc, #232]	; (8007bf8 <mem_malloc+0x12c>)
 8007b10:	f004 fee6 	bl	800c8e0 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8007b14:	4426      	add	r6, r4
 8007b16:	3608      	adds	r6, #8
 8007b18:	4b3a      	ldr	r3, [pc, #232]	; (8007c04 <mem_malloc+0x138>)
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	429e      	cmp	r6, r3
 8007b1e:	d821      	bhi.n	8007b64 <mem_malloc+0x98>
         (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8007b20:	f014 0503 	ands.w	r5, r4, #3
 8007b24:	d126      	bne.n	8007b74 <mem_malloc+0xa8>
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8007b26:	2d00      	cmp	r5, #0
 8007b28:	d12c      	bne.n	8007b84 <mem_malloc+0xb8>
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 8007b2a:	f104 0008 	add.w	r0, r4, #8
 8007b2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            cur = (struct mem *)(void *)&ram[cur->next];
 8007b30:	4a32      	ldr	r2, [pc, #200]	; (8007bfc <mem_malloc+0x130>)
 8007b32:	6812      	ldr	r2, [r2, #0]
 8007b34:	881b      	ldrh	r3, [r3, #0]
 8007b36:	4413      	add	r3, r2
          while (cur->used && cur != ram_end) {
 8007b38:	791a      	ldrb	r2, [r3, #4]
 8007b3a:	b11a      	cbz	r2, 8007b44 <mem_malloc+0x78>
 8007b3c:	4931      	ldr	r1, [pc, #196]	; (8007c04 <mem_malloc+0x138>)
 8007b3e:	6809      	ldr	r1, [r1, #0]
 8007b40:	428b      	cmp	r3, r1
 8007b42:	d1f5      	bne.n	8007b30 <mem_malloc+0x64>
          lfree = cur;
 8007b44:	492e      	ldr	r1, [pc, #184]	; (8007c00 <mem_malloc+0x134>)
 8007b46:	600b      	str	r3, [r1, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8007b48:	492e      	ldr	r1, [pc, #184]	; (8007c04 <mem_malloc+0x138>)
 8007b4a:	6809      	ldr	r1, [r1, #0]
 8007b4c:	428b      	cmp	r3, r1
 8007b4e:	d0de      	beq.n	8007b0e <mem_malloc+0x42>
 8007b50:	2a00      	cmp	r2, #0
 8007b52:	d0dc      	beq.n	8007b0e <mem_malloc+0x42>
 8007b54:	4b2c      	ldr	r3, [pc, #176]	; (8007c08 <mem_malloc+0x13c>)
 8007b56:	f240 22cf 	movw	r2, #719	; 0x2cf
 8007b5a:	492c      	ldr	r1, [pc, #176]	; (8007c0c <mem_malloc+0x140>)
 8007b5c:	482c      	ldr	r0, [pc, #176]	; (8007c10 <mem_malloc+0x144>)
 8007b5e:	f005 fd4c 	bl	800d5fa <iprintf>
 8007b62:	e7d4      	b.n	8007b0e <mem_malloc+0x42>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8007b64:	4b28      	ldr	r3, [pc, #160]	; (8007c08 <mem_malloc+0x13c>)
 8007b66:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8007b6a:	492a      	ldr	r1, [pc, #168]	; (8007c14 <mem_malloc+0x148>)
 8007b6c:	4828      	ldr	r0, [pc, #160]	; (8007c10 <mem_malloc+0x144>)
 8007b6e:	f005 fd44 	bl	800d5fa <iprintf>
 8007b72:	e7d5      	b.n	8007b20 <mem_malloc+0x54>
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8007b74:	4b24      	ldr	r3, [pc, #144]	; (8007c08 <mem_malloc+0x13c>)
 8007b76:	f240 22d6 	movw	r2, #726	; 0x2d6
 8007b7a:	4927      	ldr	r1, [pc, #156]	; (8007c18 <mem_malloc+0x14c>)
 8007b7c:	4824      	ldr	r0, [pc, #144]	; (8007c10 <mem_malloc+0x144>)
 8007b7e:	f005 fd3c 	bl	800d5fa <iprintf>
 8007b82:	e7d0      	b.n	8007b26 <mem_malloc+0x5a>
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8007b84:	4b20      	ldr	r3, [pc, #128]	; (8007c08 <mem_malloc+0x13c>)
 8007b86:	f44f 7236 	mov.w	r2, #728	; 0x2d8
 8007b8a:	4924      	ldr	r1, [pc, #144]	; (8007c1c <mem_malloc+0x150>)
 8007b8c:	4820      	ldr	r0, [pc, #128]	; (8007c10 <mem_malloc+0x144>)
 8007b8e:	f005 fd34 	bl	800d5fa <iprintf>
 8007b92:	e7ca      	b.n	8007b2a <mem_malloc+0x5e>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 8007b94:	8823      	ldrh	r3, [r4, #0]
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8007b96:	461f      	mov	r7, r3
 8007b98:	462e      	mov	r6, r5
 8007b9a:	f5c5 61c8 	rsb	r1, r5, #1600	; 0x640
 8007b9e:	428b      	cmp	r3, r1
 8007ba0:	d220      	bcs.n	8007be4 <mem_malloc+0x118>
      mem = (struct mem *)(void *)&ram[ptr];
 8007ba2:	18c4      	adds	r4, r0, r3
      if ((!mem->used) &&
 8007ba4:	7921      	ldrb	r1, [r4, #4]
 8007ba6:	2900      	cmp	r1, #0
 8007ba8:	d1f4      	bne.n	8007b94 <mem_malloc+0xc8>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8007baa:	5ac2      	ldrh	r2, [r0, r3]
 8007bac:	1bd2      	subs	r2, r2, r7
 8007bae:	3a08      	subs	r2, #8
      if ((!mem->used) &&
 8007bb0:	4296      	cmp	r6, r2
 8007bb2:	d8ef      	bhi.n	8007b94 <mem_malloc+0xc8>
        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8007bb4:	f106 0114 	add.w	r1, r6, #20
 8007bb8:	428a      	cmp	r2, r1
 8007bba:	d3a2      	bcc.n	8007b02 <mem_malloc+0x36>
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 8007bbc:	18ea      	adds	r2, r5, r3
 8007bbe:	b292      	uxth	r2, r2
 8007bc0:	3208      	adds	r2, #8
 8007bc2:	b292      	uxth	r2, r2
          mem2 = (struct mem *)(void *)&ram[ptr2];
 8007bc4:	1881      	adds	r1, r0, r2
          mem2->used = 0;
 8007bc6:	2500      	movs	r5, #0
 8007bc8:	710d      	strb	r5, [r1, #4]
          mem2->next = mem->next;
 8007bca:	8825      	ldrh	r5, [r4, #0]
 8007bcc:	5285      	strh	r5, [r0, r2]
          mem2->prev = ptr;
 8007bce:	804b      	strh	r3, [r1, #2]
          mem->next = ptr2;
 8007bd0:	8022      	strh	r2, [r4, #0]
          mem->used = 1;
 8007bd2:	2301      	movs	r3, #1
 8007bd4:	7123      	strb	r3, [r4, #4]
          if (mem2->next != MEM_SIZE_ALIGNED) {
 8007bd6:	5a83      	ldrh	r3, [r0, r2]
 8007bd8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007bdc:	d093      	beq.n	8007b06 <mem_malloc+0x3a>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8007bde:	4418      	add	r0, r3
 8007be0:	8042      	strh	r2, [r0, #2]
 8007be2:	e790      	b.n	8007b06 <mem_malloc+0x3a>
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8007be4:	4804      	ldr	r0, [pc, #16]	; (8007bf8 <mem_malloc+0x12c>)
 8007be6:	f004 fe7b 	bl	800c8e0 <sys_mutex_unlock>
  return NULL;
 8007bea:	2000      	movs	r0, #0
 8007bec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return NULL;
 8007bee:	2000      	movs	r0, #0
 8007bf0:	4770      	bx	lr
    return NULL;
 8007bf2:	2000      	movs	r0, #0
}
 8007bf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007bf6:	bf00      	nop
 8007bf8:	20003f44 	.word	0x20003f44
 8007bfc:	20003f48 	.word	0x20003f48
 8007c00:	20003f40 	.word	0x20003f40
 8007c04:	20003f4c 	.word	0x20003f4c
 8007c08:	0800ec94 	.word	0x0800ec94
 8007c0c:	0800ebbc 	.word	0x0800ebbc
 8007c10:	0800de34 	.word	0x0800de34
 8007c14:	0800ebd8 	.word	0x0800ebd8
 8007c18:	0800ec08 	.word	0x0800ec08
 8007c1c:	0800ec38 	.word	0x0800ec38

08007c20 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
 8007c20:	b538      	push	{r3, r4, r5, lr}
 8007c22:	4604      	mov	r4, r0

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8007c24:	f004 fe76 	bl	800c914 <sys_arch_protect>
 8007c28:	4605      	mov	r5, r0

  memp = *desc->tab;
 8007c2a:	68a3      	ldr	r3, [r4, #8]
 8007c2c:	681c      	ldr	r4, [r3, #0]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8007c2e:	b18c      	cbz	r4, 8007c54 <do_memp_malloc_pool+0x34>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8007c30:	6822      	ldr	r2, [r4, #0]
 8007c32:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8007c34:	f014 0f03 	tst.w	r4, #3
 8007c38:	d104      	bne.n	8007c44 <do_memp_malloc_pool+0x24>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8007c3a:	4628      	mov	r0, r5
 8007c3c:	f004 fe76 	bl	800c92c <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t*)memp + MEMP_SIZE);
 8007c40:	4620      	mov	r0, r4
 8007c42:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8007c44:	4b05      	ldr	r3, [pc, #20]	; (8007c5c <do_memp_malloc_pool+0x3c>)
 8007c46:	f240 1249 	movw	r2, #329	; 0x149
 8007c4a:	4905      	ldr	r1, [pc, #20]	; (8007c60 <do_memp_malloc_pool+0x40>)
 8007c4c:	4805      	ldr	r0, [pc, #20]	; (8007c64 <do_memp_malloc_pool+0x44>)
 8007c4e:	f005 fcd4 	bl	800d5fa <iprintf>
 8007c52:	e7f2      	b.n	8007c3a <do_memp_malloc_pool+0x1a>
#if MEMP_STATS
    desc->stats->err++;
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
 8007c54:	f004 fe6a 	bl	800c92c <sys_arch_unprotect>
  return NULL;
 8007c58:	2000      	movs	r0, #0
}
 8007c5a:	bd38      	pop	{r3, r4, r5, pc}
 8007c5c:	0800ed60 	.word	0x0800ed60
 8007c60:	0800ed90 	.word	0x0800ed90
 8007c64:	0800de34 	.word	0x0800de34

08007c68 <do_memp_free_pool>:
  return memp;
}

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
{
 8007c68:	b538      	push	{r3, r4, r5, lr}
 8007c6a:	4605      	mov	r5, r0
 8007c6c:	460c      	mov	r4, r1
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8007c6e:	f011 0f03 	tst.w	r1, #3
 8007c72:	d109      	bne.n	8007c88 <do_memp_free_pool+0x20>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);

  SYS_ARCH_PROTECT(old_level);
 8007c74:	f004 fe4e 	bl	800c914 <sys_arch_protect>
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8007c78:	68ab      	ldr	r3, [r5, #8]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	6023      	str	r3, [r4, #0]
  *desc->tab = memp;
 8007c7e:	68ab      	ldr	r3, [r5, #8]
 8007c80:	601c      	str	r4, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8007c82:	f004 fe53 	bl	800c92c <sys_arch_unprotect>
 8007c86:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("memp_free: mem properly aligned",
 8007c88:	4b03      	ldr	r3, [pc, #12]	; (8007c98 <do_memp_free_pool+0x30>)
 8007c8a:	f240 129d 	movw	r2, #413	; 0x19d
 8007c8e:	4903      	ldr	r1, [pc, #12]	; (8007c9c <do_memp_free_pool+0x34>)
 8007c90:	4803      	ldr	r0, [pc, #12]	; (8007ca0 <do_memp_free_pool+0x38>)
 8007c92:	f005 fcb2 	bl	800d5fa <iprintf>
 8007c96:	e7ed      	b.n	8007c74 <do_memp_free_pool+0xc>
 8007c98:	0800ed60 	.word	0x0800ed60
 8007c9c:	0800ed40 	.word	0x0800ed40
 8007ca0:	0800de34 	.word	0x0800de34

08007ca4 <memp_init_pool>:
  *desc->tab = NULL;
 8007ca4:	6883      	ldr	r3, [r0, #8]
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	601a      	str	r2, [r3, #0]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 8007caa:	6843      	ldr	r3, [r0, #4]
 8007cac:	3303      	adds	r3, #3
 8007cae:	f023 0303 	bic.w	r3, r3, #3
  for (i = 0; i < desc->num; ++i) {
 8007cb2:	e007      	b.n	8007cc4 <memp_init_pool+0x20>
    memp->next = *desc->tab;
 8007cb4:	6881      	ldr	r1, [r0, #8]
 8007cb6:	6809      	ldr	r1, [r1, #0]
 8007cb8:	6019      	str	r1, [r3, #0]
    *desc->tab = memp;
 8007cba:	6881      	ldr	r1, [r0, #8]
 8007cbc:	600b      	str	r3, [r1, #0]
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8007cbe:	8801      	ldrh	r1, [r0, #0]
 8007cc0:	440b      	add	r3, r1
  for (i = 0; i < desc->num; ++i) {
 8007cc2:	3201      	adds	r2, #1
 8007cc4:	8841      	ldrh	r1, [r0, #2]
 8007cc6:	428a      	cmp	r2, r1
 8007cc8:	dbf4      	blt.n	8007cb4 <memp_init_pool+0x10>
}
 8007cca:	4770      	bx	lr

08007ccc <memp_init>:
{
 8007ccc:	b510      	push	{r4, lr}
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8007cce:	2400      	movs	r4, #0
 8007cd0:	e006      	b.n	8007ce0 <memp_init+0x14>
    memp_init_pool(memp_pools[i]);
 8007cd2:	4b05      	ldr	r3, [pc, #20]	; (8007ce8 <memp_init+0x1c>)
 8007cd4:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8007cd8:	f7ff ffe4 	bl	8007ca4 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8007cdc:	3401      	adds	r4, #1
 8007cde:	b2a4      	uxth	r4, r4
 8007ce0:	2c0c      	cmp	r4, #12
 8007ce2:	d9f6      	bls.n	8007cd2 <memp_init+0x6>
}
 8007ce4:	bd10      	pop	{r4, pc}
 8007ce6:	bf00      	nop
 8007ce8:	0800ee8c 	.word	0x0800ee8c

08007cec <memp_malloc>:
{
 8007cec:	b508      	push	{r3, lr}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8007cee:	280c      	cmp	r0, #12
 8007cf0:	d805      	bhi.n	8007cfe <memp_malloc+0x12>
  memp = do_memp_malloc_pool(memp_pools[type]);
 8007cf2:	4b07      	ldr	r3, [pc, #28]	; (8007d10 <memp_malloc+0x24>)
 8007cf4:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8007cf8:	f7ff ff92 	bl	8007c20 <do_memp_malloc_pool>
}
 8007cfc:	bd08      	pop	{r3, pc}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8007cfe:	4b05      	ldr	r3, [pc, #20]	; (8007d14 <memp_malloc+0x28>)
 8007d00:	f240 1287 	movw	r2, #391	; 0x187
 8007d04:	4904      	ldr	r1, [pc, #16]	; (8007d18 <memp_malloc+0x2c>)
 8007d06:	4805      	ldr	r0, [pc, #20]	; (8007d1c <memp_malloc+0x30>)
 8007d08:	f005 fc77 	bl	800d5fa <iprintf>
 8007d0c:	2000      	movs	r0, #0
 8007d0e:	bd08      	pop	{r3, pc}
 8007d10:	0800ee8c 	.word	0x0800ee8c
 8007d14:	0800ed60 	.word	0x0800ed60
 8007d18:	0800ee6c 	.word	0x0800ee6c
 8007d1c:	0800de34 	.word	0x0800de34

08007d20 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8007d20:	b508      	push	{r3, lr}
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8007d22:	280c      	cmp	r0, #12
 8007d24:	d806      	bhi.n	8007d34 <memp_free+0x14>

  if (mem == NULL) {
 8007d26:	b121      	cbz	r1, 8007d32 <memp_free+0x12>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8007d28:	4b06      	ldr	r3, [pc, #24]	; (8007d44 <memp_free+0x24>)
 8007d2a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8007d2e:	f7ff ff9b 	bl	8007c68 <do_memp_free_pool>
 8007d32:	bd08      	pop	{r3, pc}
  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8007d34:	4b04      	ldr	r3, [pc, #16]	; (8007d48 <memp_free+0x28>)
 8007d36:	f240 12db 	movw	r2, #475	; 0x1db
 8007d3a:	4904      	ldr	r1, [pc, #16]	; (8007d4c <memp_free+0x2c>)
 8007d3c:	4804      	ldr	r0, [pc, #16]	; (8007d50 <memp_free+0x30>)
 8007d3e:	f005 fc5c 	bl	800d5fa <iprintf>
 8007d42:	bd08      	pop	{r3, pc}
 8007d44:	0800ee8c 	.word	0x0800ee8c
 8007d48:	0800ed60 	.word	0x0800ed60
 8007d4c:	0800ee50 	.word	0x0800ee50
 8007d50:	0800de34 	.word	0x0800de34

08007d54 <netif_issue_reports>:
 */
static void
netif_issue_reports(struct netif* netif, u8_t report_type)
{
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8007d54:	f011 0f01 	tst.w	r1, #1
 8007d58:	d00c      	beq.n	8007d74 <netif_issue_reports+0x20>
{
 8007d5a:	b508      	push	{r3, lr}
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8007d5c:	6843      	ldr	r3, [r0, #4]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8007d5e:	b123      	cbz	r3, 8007d6a <netif_issue_reports+0x16>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8007d60:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
 8007d64:	f013 0f08 	tst.w	r3, #8
 8007d68:	d100      	bne.n	8007d6c <netif_issue_reports+0x18>
 8007d6a:	bd08      	pop	{r3, pc}
      etharp_gratuitous(netif);
 8007d6c:	1d01      	adds	r1, r0, #4
 8007d6e:	f7fe fbfd 	bl	800656c <etharp_request>
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
 8007d72:	e7fa      	b.n	8007d6a <netif_issue_reports+0x16>
 8007d74:	4770      	bx	lr

08007d76 <netif_init>:
{
 8007d76:	4770      	bx	lr

08007d78 <netif_set_ipaddr>:
{
 8007d78:	b570      	push	{r4, r5, r6, lr}
 8007d7a:	b082      	sub	sp, #8
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 8007d7c:	460d      	mov	r5, r1
 8007d7e:	b1c1      	cbz	r1, 8007db2 <netif_set_ipaddr+0x3a>
 8007d80:	680a      	ldr	r2, [r1, #0]
 8007d82:	9201      	str	r2, [sp, #4]
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 8007d84:	6842      	ldr	r2, [r0, #4]
 8007d86:	9901      	ldr	r1, [sp, #4]
 8007d88:	4291      	cmp	r1, r2
 8007d8a:	d010      	beq.n	8007dae <netif_set_ipaddr+0x36>
 8007d8c:	4604      	mov	r4, r0
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 8007d8e:	1d06      	adds	r6, r0, #4
 8007d90:	a901      	add	r1, sp, #4
 8007d92:	4630      	mov	r0, r6
 8007d94:	f001 fc9e 	bl	80096d4 <tcp_netif_ip_addr_changed>
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 8007d98:	a901      	add	r1, sp, #4
 8007d9a:	4630      	mov	r0, r6
 8007d9c:	f004 fc10 	bl	800c5c0 <udp_netif_ip_addr_changed>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8007da0:	b15d      	cbz	r5, 8007dba <netif_set_ipaddr+0x42>
 8007da2:	682b      	ldr	r3, [r5, #0]
 8007da4:	6063      	str	r3, [r4, #4]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8007da6:	2101      	movs	r1, #1
 8007da8:	4620      	mov	r0, r4
 8007daa:	f7ff ffd3 	bl	8007d54 <netif_issue_reports>
}
 8007dae:	b002      	add	sp, #8
 8007db0:	bd70      	pop	{r4, r5, r6, pc}
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 8007db2:	4a03      	ldr	r2, [pc, #12]	; (8007dc0 <netif_set_ipaddr+0x48>)
 8007db4:	6812      	ldr	r2, [r2, #0]
 8007db6:	9201      	str	r2, [sp, #4]
 8007db8:	e7e4      	b.n	8007d84 <netif_set_ipaddr+0xc>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8007dba:	2300      	movs	r3, #0
 8007dbc:	e7f2      	b.n	8007da4 <netif_set_ipaddr+0x2c>
 8007dbe:	bf00      	nop
 8007dc0:	0800e99c 	.word	0x0800e99c

08007dc4 <netif_set_gw>:
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8007dc4:	b111      	cbz	r1, 8007dcc <netif_set_gw+0x8>
 8007dc6:	680b      	ldr	r3, [r1, #0]
 8007dc8:	60c3      	str	r3, [r0, #12]
 8007dca:	4770      	bx	lr
 8007dcc:	2300      	movs	r3, #0
 8007dce:	e7fb      	b.n	8007dc8 <netif_set_gw+0x4>

08007dd0 <netif_set_netmask>:
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8007dd0:	b111      	cbz	r1, 8007dd8 <netif_set_netmask+0x8>
 8007dd2:	680b      	ldr	r3, [r1, #0]
 8007dd4:	6083      	str	r3, [r0, #8]
 8007dd6:	4770      	bx	lr
 8007dd8:	2300      	movs	r3, #0
 8007dda:	e7fb      	b.n	8007dd4 <netif_set_netmask+0x4>

08007ddc <netif_set_addr>:
{
 8007ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dde:	4604      	mov	r4, r0
 8007de0:	4617      	mov	r7, r2
 8007de2:	461e      	mov	r6, r3
  if (ip4_addr_isany(ipaddr)) {
 8007de4:	460d      	mov	r5, r1
 8007de6:	b109      	cbz	r1, 8007dec <netif_set_addr+0x10>
 8007de8:	680b      	ldr	r3, [r1, #0]
 8007dea:	b963      	cbnz	r3, 8007e06 <netif_set_addr+0x2a>
    netif_set_ipaddr(netif, ipaddr);
 8007dec:	4629      	mov	r1, r5
 8007dee:	4620      	mov	r0, r4
 8007df0:	f7ff ffc2 	bl	8007d78 <netif_set_ipaddr>
    netif_set_netmask(netif, netmask);
 8007df4:	4639      	mov	r1, r7
 8007df6:	4620      	mov	r0, r4
 8007df8:	f7ff ffea 	bl	8007dd0 <netif_set_netmask>
    netif_set_gw(netif, gw);
 8007dfc:	4631      	mov	r1, r6
 8007dfe:	4620      	mov	r0, r4
 8007e00:	f7ff ffe0 	bl	8007dc4 <netif_set_gw>
 8007e04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    netif_set_netmask(netif, netmask);
 8007e06:	4611      	mov	r1, r2
 8007e08:	f7ff ffe2 	bl	8007dd0 <netif_set_netmask>
    netif_set_gw(netif, gw);
 8007e0c:	4631      	mov	r1, r6
 8007e0e:	4620      	mov	r0, r4
 8007e10:	f7ff ffd8 	bl	8007dc4 <netif_set_gw>
    netif_set_ipaddr(netif, ipaddr);
 8007e14:	4629      	mov	r1, r5
 8007e16:	4620      	mov	r0, r4
 8007e18:	f7ff ffae 	bl	8007d78 <netif_set_ipaddr>
 8007e1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007e20 <netif_add>:
{
 8007e20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e24:	4604      	mov	r4, r0
 8007e26:	460e      	mov	r6, r1
 8007e28:	4617      	mov	r7, r2
 8007e2a:	4698      	mov	r8, r3
 8007e2c:	9d07      	ldr	r5, [sp, #28]
  LWIP_ASSERT("No init function given", init != NULL);
 8007e2e:	b315      	cbz	r5, 8007e76 <netif_add+0x56>
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8007e30:	2300      	movs	r3, #0
 8007e32:	6063      	str	r3, [r4, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8007e34:	60a3      	str	r3, [r4, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8007e36:	60e3      	str	r3, [r4, #12]
  netif->flags = 0;
 8007e38:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 8007e3c:	2303      	movs	r3, #3
 8007e3e:	f884 3020 	strb.w	r3, [r4, #32]
  netif->state = state;
 8007e42:	9b06      	ldr	r3, [sp, #24]
 8007e44:	61e3      	str	r3, [r4, #28]
  netif->num = netif_num++;
 8007e46:	4a11      	ldr	r2, [pc, #68]	; (8007e8c <netif_add+0x6c>)
 8007e48:	7813      	ldrb	r3, [r2, #0]
 8007e4a:	1c59      	adds	r1, r3, #1
 8007e4c:	7011      	strb	r1, [r2, #0]
 8007e4e:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
  netif->input = input;
 8007e52:	9b08      	ldr	r3, [sp, #32]
 8007e54:	6123      	str	r3, [r4, #16]
  netif_set_addr(netif, ipaddr, netmask, gw);
 8007e56:	4643      	mov	r3, r8
 8007e58:	463a      	mov	r2, r7
 8007e5a:	4631      	mov	r1, r6
 8007e5c:	4620      	mov	r0, r4
 8007e5e:	f7ff ffbd 	bl	8007ddc <netif_set_addr>
  if (init(netif) != ERR_OK) {
 8007e62:	4620      	mov	r0, r4
 8007e64:	47a8      	blx	r5
 8007e66:	b968      	cbnz	r0, 8007e84 <netif_add+0x64>
  netif->next = netif_list;
 8007e68:	4b09      	ldr	r3, [pc, #36]	; (8007e90 <netif_add+0x70>)
 8007e6a:	681a      	ldr	r2, [r3, #0]
 8007e6c:	6022      	str	r2, [r4, #0]
  netif_list = netif;
 8007e6e:	601c      	str	r4, [r3, #0]
  return netif;
 8007e70:	4620      	mov	r0, r4
 8007e72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("No init function given", init != NULL);
 8007e76:	4b07      	ldr	r3, [pc, #28]	; (8007e94 <netif_add+0x74>)
 8007e78:	22fb      	movs	r2, #251	; 0xfb
 8007e7a:	4907      	ldr	r1, [pc, #28]	; (8007e98 <netif_add+0x78>)
 8007e7c:	4807      	ldr	r0, [pc, #28]	; (8007e9c <netif_add+0x7c>)
 8007e7e:	f005 fbbc 	bl	800d5fa <iprintf>
 8007e82:	e7d5      	b.n	8007e30 <netif_add+0x10>
    return NULL;
 8007e84:	2000      	movs	r0, #0
}
 8007e86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e8a:	bf00      	nop
 8007e8c:	20003f84 	.word	0x20003f84
 8007e90:	20007974 	.word	0x20007974
 8007e94:	0800eec0 	.word	0x0800eec0
 8007e98:	0800eef4 	.word	0x0800eef4
 8007e9c:	0800de34 	.word	0x0800de34

08007ea0 <netif_set_default>:
  netif_default = netif;
 8007ea0:	4b01      	ldr	r3, [pc, #4]	; (8007ea8 <netif_set_default+0x8>)
 8007ea2:	6018      	str	r0, [r3, #0]
 8007ea4:	4770      	bx	lr
 8007ea6:	bf00      	nop
 8007ea8:	20007978 	.word	0x20007978

08007eac <netif_set_up>:
{
 8007eac:	b508      	push	{r3, lr}
  if (!(netif->flags & NETIF_FLAG_UP)) {
 8007eae:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
 8007eb2:	f013 0f01 	tst.w	r3, #1
 8007eb6:	d106      	bne.n	8007ec6 <netif_set_up+0x1a>
    netif->flags |= NETIF_FLAG_UP;
 8007eb8:	f043 0301 	orr.w	r3, r3, #1
 8007ebc:	f880 302b 	strb.w	r3, [r0, #43]	; 0x2b
    if (netif->flags & NETIF_FLAG_LINK_UP) {
 8007ec0:	f013 0f04 	tst.w	r3, #4
 8007ec4:	d100      	bne.n	8007ec8 <netif_set_up+0x1c>
 8007ec6:	bd08      	pop	{r3, pc}
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 8007ec8:	2103      	movs	r1, #3
 8007eca:	f7ff ff43 	bl	8007d54 <netif_issue_reports>
}
 8007ece:	e7fa      	b.n	8007ec6 <netif_set_up+0x1a>

08007ed0 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8007ed0:	b508      	push	{r3, lr}
  if (netif->flags & NETIF_FLAG_UP) {
 8007ed2:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
 8007ed6:	f013 0f01 	tst.w	r3, #1
 8007eda:	d006      	beq.n	8007eea <netif_set_down+0x1a>
    netif->flags &= ~NETIF_FLAG_UP;
 8007edc:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8007ee0:	f880 302b 	strb.w	r3, [r0, #43]	; 0x2b
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8007ee4:	f013 0f08 	tst.w	r3, #8
 8007ee8:	d100      	bne.n	8007eec <netif_set_down+0x1c>
 8007eea:	bd08      	pop	{r3, pc}
      etharp_cleanup_netif(netif);
 8007eec:	f7fe faca 	bl	8006484 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8007ef0:	e7fb      	b.n	8007eea <netif_set_down+0x1a>
	...

08007ef4 <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8007ef4:	b570      	push	{r4, r5, r6, lr}
 8007ef6:	460c      	mov	r4, r1
 8007ef8:	4616      	mov	r6, r2
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8007efa:	4605      	mov	r5, r0
 8007efc:	b1c0      	cbz	r0, 8007f30 <pbuf_header_impl+0x3c>
  if ((header_size_increment == 0) || (p == NULL)) {
 8007efe:	2c00      	cmp	r4, #0
 8007f00:	d04e      	beq.n	8007fa0 <pbuf_header_impl+0xac>
 8007f02:	2d00      	cmp	r5, #0
 8007f04:	d04e      	beq.n	8007fa4 <pbuf_header_impl+0xb0>
    return 0;
  }

  if (header_size_increment < 0) {
 8007f06:	2c00      	cmp	r4, #0
 8007f08:	db1a      	blt.n	8007f40 <pbuf_header_impl+0x4c>
    increment_magnitude = (u16_t)-header_size_increment;
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
  } else {
    increment_magnitude = (u16_t)header_size_increment;
 8007f0a:	b2a2      	uxth	r2, r4
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
 8007f0c:	7b2b      	ldrb	r3, [r5, #12]
  /* remember current payload pointer */
  payload = p->payload;
 8007f0e:	6869      	ldr	r1, [r5, #4]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
 8007f10:	b32b      	cbz	r3, 8007f5e <pbuf_header_impl+0x6a>
 8007f12:	2b03      	cmp	r3, #3
 8007f14:	d023      	beq.n	8007f5e <pbuf_header_impl+0x6a>
      p->payload = payload;
      /* bail out unsuccessfully */
      return 1;
    }
  /* pbuf types referring to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 8007f16:	3b01      	subs	r3, #1
 8007f18:	b29b      	uxth	r3, r3
 8007f1a:	2b01      	cmp	r3, #1
 8007f1c:	d837      	bhi.n	8007f8e <pbuf_header_impl+0x9a>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 8007f1e:	2c00      	cmp	r4, #0
 8007f20:	db2f      	blt.n	8007f82 <pbuf_header_impl+0x8e>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
    } else if ((header_size_increment > 0) && force) {
 8007f22:	2c00      	cmp	r4, #0
 8007f24:	dd40      	ble.n	8007fa8 <pbuf_header_impl+0xb4>
 8007f26:	2e00      	cmp	r6, #0
 8007f28:	d040      	beq.n	8007fac <pbuf_header_impl+0xb8>
      p->payload = (u8_t *)p->payload - header_size_increment;
 8007f2a:	1b09      	subs	r1, r1, r4
 8007f2c:	6069      	str	r1, [r5, #4]
 8007f2e:	e01c      	b.n	8007f6a <pbuf_header_impl+0x76>
  LWIP_ASSERT("p != NULL", p != NULL);
 8007f30:	4b1f      	ldr	r3, [pc, #124]	; (8007fb0 <pbuf_header_impl+0xbc>)
 8007f32:	f240 223f 	movw	r2, #575	; 0x23f
 8007f36:	491f      	ldr	r1, [pc, #124]	; (8007fb4 <pbuf_header_impl+0xc0>)
 8007f38:	481f      	ldr	r0, [pc, #124]	; (8007fb8 <pbuf_header_impl+0xc4>)
 8007f3a:	f005 fb5e 	bl	800d5fa <iprintf>
 8007f3e:	e7de      	b.n	8007efe <pbuf_header_impl+0xa>
    increment_magnitude = (u16_t)-header_size_increment;
 8007f40:	b2a2      	uxth	r2, r4
 8007f42:	4252      	negs	r2, r2
 8007f44:	b292      	uxth	r2, r2
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8007f46:	896b      	ldrh	r3, [r5, #10]
 8007f48:	429a      	cmp	r2, r3
 8007f4a:	d9df      	bls.n	8007f0c <pbuf_header_impl+0x18>
 8007f4c:	4b18      	ldr	r3, [pc, #96]	; (8007fb0 <pbuf_header_impl+0xbc>)
 8007f4e:	f240 2247 	movw	r2, #583	; 0x247
 8007f52:	491a      	ldr	r1, [pc, #104]	; (8007fbc <pbuf_header_impl+0xc8>)
 8007f54:	4818      	ldr	r0, [pc, #96]	; (8007fb8 <pbuf_header_impl+0xc4>)
 8007f56:	f005 fb50 	bl	800d5fa <iprintf>
 8007f5a:	2001      	movs	r0, #1
 8007f5c:	bd70      	pop	{r4, r5, r6, pc}
    p->payload = (u8_t *)p->payload - header_size_increment;
 8007f5e:	1b0b      	subs	r3, r1, r4
 8007f60:	606b      	str	r3, [r5, #4]
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8007f62:	f105 0210 	add.w	r2, r5, #16
 8007f66:	4293      	cmp	r3, r2
 8007f68:	d308      	bcc.n	8007f7c <pbuf_header_impl+0x88>
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
    return 1;
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
 8007f6a:	b2a4      	uxth	r4, r4
 8007f6c:	896b      	ldrh	r3, [r5, #10]
 8007f6e:	4423      	add	r3, r4
 8007f70:	816b      	strh	r3, [r5, #10]
  p->tot_len += header_size_increment;
 8007f72:	892b      	ldrh	r3, [r5, #8]
 8007f74:	441c      	add	r4, r3
 8007f76:	812c      	strh	r4, [r5, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 8007f78:	2000      	movs	r0, #0
 8007f7a:	bd70      	pop	{r4, r5, r6, pc}
      p->payload = payload;
 8007f7c:	6069      	str	r1, [r5, #4]
      return 1;
 8007f7e:	2001      	movs	r0, #1
 8007f80:	bd70      	pop	{r4, r5, r6, pc}
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 8007f82:	896b      	ldrh	r3, [r5, #10]
 8007f84:	429a      	cmp	r2, r3
 8007f86:	d8cc      	bhi.n	8007f22 <pbuf_header_impl+0x2e>
      p->payload = (u8_t *)p->payload - header_size_increment;
 8007f88:	1b09      	subs	r1, r1, r4
 8007f8a:	6069      	str	r1, [r5, #4]
 8007f8c:	e7ed      	b.n	8007f6a <pbuf_header_impl+0x76>
    LWIP_ASSERT("bad pbuf type", 0);
 8007f8e:	4b08      	ldr	r3, [pc, #32]	; (8007fb0 <pbuf_header_impl+0xbc>)
 8007f90:	f240 2277 	movw	r2, #631	; 0x277
 8007f94:	490a      	ldr	r1, [pc, #40]	; (8007fc0 <pbuf_header_impl+0xcc>)
 8007f96:	4808      	ldr	r0, [pc, #32]	; (8007fb8 <pbuf_header_impl+0xc4>)
 8007f98:	f005 fb2f 	bl	800d5fa <iprintf>
    return 1;
 8007f9c:	2001      	movs	r0, #1
 8007f9e:	bd70      	pop	{r4, r5, r6, pc}
    return 0;
 8007fa0:	2000      	movs	r0, #0
 8007fa2:	bd70      	pop	{r4, r5, r6, pc}
 8007fa4:	2000      	movs	r0, #0
 8007fa6:	bd70      	pop	{r4, r5, r6, pc}
      return 1;
 8007fa8:	2001      	movs	r0, #1
 8007faa:	bd70      	pop	{r4, r5, r6, pc}
 8007fac:	2001      	movs	r0, #1
}
 8007fae:	bd70      	pop	{r4, r5, r6, pc}
 8007fb0:	0800f1c4 	.word	0x0800f1c4
 8007fb4:	0800e154 	.word	0x0800e154
 8007fb8:	0800de34 	.word	0x0800de34
 8007fbc:	0800f1f4 	.word	0x0800f1f4
 8007fc0:	0800f214 	.word	0x0800f214

08007fc4 <pbuf_pool_is_empty>:
{
 8007fc4:	b510      	push	{r4, lr}
  SYS_ARCH_PROTECT(old_level);
 8007fc6:	f004 fca5 	bl	800c914 <sys_arch_protect>
  queued = pbuf_free_ooseq_pending;
 8007fca:	4b0c      	ldr	r3, [pc, #48]	; (8007ffc <pbuf_pool_is_empty+0x38>)
 8007fcc:	781c      	ldrb	r4, [r3, #0]
 8007fce:	b2e4      	uxtb	r4, r4
  pbuf_free_ooseq_pending = 1;
 8007fd0:	2201      	movs	r2, #1
 8007fd2:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8007fd4:	f004 fcaa 	bl	800c92c <sys_arch_unprotect>
  if (!queued) {
 8007fd8:	b104      	cbz	r4, 8007fdc <pbuf_pool_is_empty+0x18>
 8007fda:	bd10      	pop	{r4, pc}
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8007fdc:	2200      	movs	r2, #0
 8007fde:	4611      	mov	r1, r2
 8007fe0:	4807      	ldr	r0, [pc, #28]	; (8008000 <pbuf_pool_is_empty+0x3c>)
 8007fe2:	f7fd ffcb 	bl	8005f7c <tcpip_callback_with_block>
 8007fe6:	2800      	cmp	r0, #0
 8007fe8:	d0f7      	beq.n	8007fda <pbuf_pool_is_empty+0x16>
 8007fea:	f004 fc93 	bl	800c914 <sys_arch_protect>
 8007fee:	2200      	movs	r2, #0
 8007ff0:	4b02      	ldr	r3, [pc, #8]	; (8007ffc <pbuf_pool_is_empty+0x38>)
 8007ff2:	701a      	strb	r2, [r3, #0]
 8007ff4:	f004 fc9a 	bl	800c92c <sys_arch_unprotect>
}
 8007ff8:	e7ef      	b.n	8007fda <pbuf_pool_is_empty+0x16>
 8007ffa:	bf00      	nop
 8007ffc:	2000797c 	.word	0x2000797c
 8008000:	08008039 	.word	0x08008039

08008004 <pbuf_free_ooseq>:
{
 8008004:	b510      	push	{r4, lr}
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8008006:	f004 fc85 	bl	800c914 <sys_arch_protect>
 800800a:	2200      	movs	r2, #0
 800800c:	4b08      	ldr	r3, [pc, #32]	; (8008030 <pbuf_free_ooseq+0x2c>)
 800800e:	701a      	strb	r2, [r3, #0]
 8008010:	f004 fc8c 	bl	800c92c <sys_arch_unprotect>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8008014:	4b07      	ldr	r3, [pc, #28]	; (8008034 <pbuf_free_ooseq+0x30>)
 8008016:	681c      	ldr	r4, [r3, #0]
 8008018:	b144      	cbz	r4, 800802c <pbuf_free_ooseq+0x28>
    if (NULL != pcb->ooseq) {
 800801a:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800801c:	b908      	cbnz	r0, 8008022 <pbuf_free_ooseq+0x1e>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800801e:	68e4      	ldr	r4, [r4, #12]
 8008020:	e7fa      	b.n	8008018 <pbuf_free_ooseq+0x14>
      tcp_segs_free(pcb->ooseq);
 8008022:	f000 fd4c 	bl	8008abe <tcp_segs_free>
      pcb->ooseq = NULL;
 8008026:	2300      	movs	r3, #0
 8008028:	6723      	str	r3, [r4, #112]	; 0x70
      return;
 800802a:	bd10      	pop	{r4, pc}
 800802c:	bd10      	pop	{r4, pc}
 800802e:	bf00      	nop
 8008030:	2000797c 	.word	0x2000797c
 8008034:	20007984 	.word	0x20007984

08008038 <pbuf_free_ooseq_callback>:
{
 8008038:	b508      	push	{r3, lr}
  pbuf_free_ooseq();
 800803a:	f7ff ffe3 	bl	8008004 <pbuf_free_ooseq>
 800803e:	bd08      	pop	{r3, pc}

08008040 <pbuf_alloced_custom>:
{
 8008040:	b570      	push	{r4, r5, r6, lr}
 8008042:	9c04      	ldr	r4, [sp, #16]
  switch (l) {
 8008044:	2804      	cmp	r0, #4
 8008046:	d80a      	bhi.n	800805e <pbuf_alloced_custom+0x1e>
 8008048:	e8df f000 	tbb	[pc, r0]
 800804c:	05031412 	.word	0x05031412
 8008050:	07          	.byte	0x07
 8008051:	00          	.byte	0x00
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 8008052:	200e      	movs	r0, #14
    break;
 8008054:	e00f      	b.n	8008076 <pbuf_alloced_custom+0x36>
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 8008056:	2000      	movs	r0, #0
    break;
 8008058:	e00d      	b.n	8008076 <pbuf_alloced_custom+0x36>
    offset = 0;
 800805a:	2000      	movs	r0, #0
    break;
 800805c:	e00b      	b.n	8008076 <pbuf_alloced_custom+0x36>
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 800805e:	4b13      	ldr	r3, [pc, #76]	; (80080ac <pbuf_alloced_custom+0x6c>)
 8008060:	f240 12c5 	movw	r2, #453	; 0x1c5
 8008064:	4912      	ldr	r1, [pc, #72]	; (80080b0 <pbuf_alloced_custom+0x70>)
 8008066:	4813      	ldr	r0, [pc, #76]	; (80080b4 <pbuf_alloced_custom+0x74>)
 8008068:	f005 fac7 	bl	800d5fa <iprintf>
    return NULL;
 800806c:	2000      	movs	r0, #0
 800806e:	bd70      	pop	{r4, r5, r6, pc}
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 8008070:	2036      	movs	r0, #54	; 0x36
 8008072:	e000      	b.n	8008076 <pbuf_alloced_custom+0x36>
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 8008074:	2022      	movs	r0, #34	; 0x22
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8008076:	3003      	adds	r0, #3
 8008078:	f020 0003 	bic.w	r0, r0, #3
 800807c:	180e      	adds	r6, r1, r0
 800807e:	f8bd 5014 	ldrh.w	r5, [sp, #20]
 8008082:	42ae      	cmp	r6, r5
 8008084:	d810      	bhi.n	80080a8 <pbuf_alloced_custom+0x68>
  p->pbuf.next = NULL;
 8008086:	2500      	movs	r5, #0
 8008088:	601d      	str	r5, [r3, #0]
  if (payload_mem != NULL) {
 800808a:	b154      	cbz	r4, 80080a2 <pbuf_alloced_custom+0x62>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800808c:	4420      	add	r0, r4
 800808e:	6058      	str	r0, [r3, #4]
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 8008090:	2002      	movs	r0, #2
 8008092:	7358      	strb	r0, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 8008094:	8119      	strh	r1, [r3, #8]
 8008096:	8159      	strh	r1, [r3, #10]
  p->pbuf.type = type;
 8008098:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 800809a:	2201      	movs	r2, #1
 800809c:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 800809e:	4618      	mov	r0, r3
 80080a0:	bd70      	pop	{r4, r5, r6, pc}
    p->pbuf.payload = NULL;
 80080a2:	2000      	movs	r0, #0
 80080a4:	6058      	str	r0, [r3, #4]
 80080a6:	e7f3      	b.n	8008090 <pbuf_alloced_custom+0x50>
    return NULL;
 80080a8:	2000      	movs	r0, #0
}
 80080aa:	bd70      	pop	{r4, r5, r6, pc}
 80080ac:	0800f1c4 	.word	0x0800f1c4
 80080b0:	0800eff0 	.word	0x0800eff0
 80080b4:	0800de34 	.word	0x0800de34

080080b8 <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
 80080b8:	b508      	push	{r3, lr}
   return pbuf_header_impl(p, header_size_increment, 0);
 80080ba:	2200      	movs	r2, #0
 80080bc:	f7ff ff1a 	bl	8007ef4 <pbuf_header_impl>
}
 80080c0:	bd08      	pop	{r3, pc}

080080c2 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80080c2:	b508      	push	{r3, lr}
   return pbuf_header_impl(p, header_size_increment, 1);
 80080c4:	2201      	movs	r2, #1
 80080c6:	f7ff ff15 	bl	8007ef4 <pbuf_header_impl>
}
 80080ca:	bd08      	pop	{r3, pc}

080080cc <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80080cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80080ce:	b128      	cbz	r0, 80080dc <pbuf_free+0x10>
 80080d0:	4604      	mov	r4, r0
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  LWIP_ASSERT("pbuf_free: sane type",
 80080d2:	7b03      	ldrb	r3, [r0, #12]
 80080d4:	2b03      	cmp	r3, #3
 80080d6:	d80b      	bhi.n	80080f0 <pbuf_free+0x24>
{
 80080d8:	2600      	movs	r6, #0
 80080da:	e01f      	b.n	800811c <pbuf_free+0x50>
    LWIP_ASSERT("p != NULL", p != NULL);
 80080dc:	4b2b      	ldr	r3, [pc, #172]	; (800818c <pbuf_free+0xc0>)
 80080de:	f240 22d2 	movw	r2, #722	; 0x2d2
 80080e2:	492b      	ldr	r1, [pc, #172]	; (8008190 <pbuf_free+0xc4>)
 80080e4:	482b      	ldr	r0, [pc, #172]	; (8008194 <pbuf_free+0xc8>)
 80080e6:	f005 fa88 	bl	800d5fa <iprintf>
    return 0;
 80080ea:	2600      	movs	r6, #0
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
}
 80080ec:	4630      	mov	r0, r6
 80080ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("pbuf_free: sane type",
 80080f0:	4b26      	ldr	r3, [pc, #152]	; (800818c <pbuf_free+0xc0>)
 80080f2:	f240 22de 	movw	r2, #734	; 0x2de
 80080f6:	4928      	ldr	r1, [pc, #160]	; (8008198 <pbuf_free+0xcc>)
 80080f8:	4826      	ldr	r0, [pc, #152]	; (8008194 <pbuf_free+0xc8>)
 80080fa:	f005 fa7e 	bl	800d5fa <iprintf>
 80080fe:	e7eb      	b.n	80080d8 <pbuf_free+0xc>
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8008100:	4b22      	ldr	r3, [pc, #136]	; (800818c <pbuf_free+0xc0>)
 8008102:	f240 22eb 	movw	r2, #747	; 0x2eb
 8008106:	4925      	ldr	r1, [pc, #148]	; (800819c <pbuf_free+0xd0>)
 8008108:	4822      	ldr	r0, [pc, #136]	; (8008194 <pbuf_free+0xc8>)
 800810a:	f005 fa76 	bl	800d5fa <iprintf>
 800810e:	e00d      	b.n	800812c <pbuf_free+0x60>
        pc->custom_free_function(p);
 8008110:	6923      	ldr	r3, [r4, #16]
 8008112:	4620      	mov	r0, r4
 8008114:	4798      	blx	r3
      count++;
 8008116:	3601      	adds	r6, #1
 8008118:	b2f6      	uxtb	r6, r6
      p = q;
 800811a:	462c      	mov	r4, r5
  while (p != NULL) {
 800811c:	2c00      	cmp	r4, #0
 800811e:	d0e5      	beq.n	80080ec <pbuf_free+0x20>
    SYS_ARCH_PROTECT(old_level);
 8008120:	f004 fbf8 	bl	800c914 <sys_arch_protect>
 8008124:	4607      	mov	r7, r0
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8008126:	89e3      	ldrh	r3, [r4, #14]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d0e9      	beq.n	8008100 <pbuf_free+0x34>
    ref = --(p->ref);
 800812c:	89e5      	ldrh	r5, [r4, #14]
 800812e:	3d01      	subs	r5, #1
 8008130:	b2ad      	uxth	r5, r5
 8008132:	81e5      	strh	r5, [r4, #14]
    SYS_ARCH_UNPROTECT(old_level);
 8008134:	4638      	mov	r0, r7
 8008136:	f004 fbf9 	bl	800c92c <sys_arch_unprotect>
    if (ref == 0) {
 800813a:	bb25      	cbnz	r5, 8008186 <pbuf_free+0xba>
      q = p->next;
 800813c:	6825      	ldr	r5, [r4, #0]
      type = p->type;
 800813e:	7b23      	ldrb	r3, [r4, #12]
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8008140:	7b62      	ldrb	r2, [r4, #13]
 8008142:	f012 0f02 	tst.w	r2, #2
 8008146:	d00a      	beq.n	800815e <pbuf_free+0x92>
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8008148:	6923      	ldr	r3, [r4, #16]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d1e0      	bne.n	8008110 <pbuf_free+0x44>
 800814e:	4b0f      	ldr	r3, [pc, #60]	; (800818c <pbuf_free+0xc0>)
 8008150:	f240 22f9 	movw	r2, #761	; 0x2f9
 8008154:	4912      	ldr	r1, [pc, #72]	; (80081a0 <pbuf_free+0xd4>)
 8008156:	480f      	ldr	r0, [pc, #60]	; (8008194 <pbuf_free+0xc8>)
 8008158:	f005 fa4f 	bl	800d5fa <iprintf>
 800815c:	e7d8      	b.n	8008110 <pbuf_free+0x44>
        if (type == PBUF_POOL) {
 800815e:	2b03      	cmp	r3, #3
 8008160:	d007      	beq.n	8008172 <pbuf_free+0xa6>
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 8008162:	3b01      	subs	r3, #1
 8008164:	b29b      	uxth	r3, r3
 8008166:	2b01      	cmp	r3, #1
 8008168:	d908      	bls.n	800817c <pbuf_free+0xb0>
          mem_free(p);
 800816a:	4620      	mov	r0, r4
 800816c:	f7ff fbb4 	bl	80078d8 <mem_free>
 8008170:	e7d1      	b.n	8008116 <pbuf_free+0x4a>
          memp_free(MEMP_PBUF_POOL, p);
 8008172:	4621      	mov	r1, r4
 8008174:	200c      	movs	r0, #12
 8008176:	f7ff fdd3 	bl	8007d20 <memp_free>
 800817a:	e7cc      	b.n	8008116 <pbuf_free+0x4a>
          memp_free(MEMP_PBUF, p);
 800817c:	4621      	mov	r1, r4
 800817e:	200b      	movs	r0, #11
 8008180:	f7ff fdce 	bl	8007d20 <memp_free>
 8008184:	e7c7      	b.n	8008116 <pbuf_free+0x4a>
      p = NULL;
 8008186:	2400      	movs	r4, #0
 8008188:	e7c8      	b.n	800811c <pbuf_free+0x50>
 800818a:	bf00      	nop
 800818c:	0800f1c4 	.word	0x0800f1c4
 8008190:	0800e154 	.word	0x0800e154
 8008194:	0800de34 	.word	0x0800de34
 8008198:	0800f170 	.word	0x0800f170
 800819c:	0800f188 	.word	0x0800f188
 80081a0:	0800f1a0 	.word	0x0800f1a0

080081a4 <pbuf_alloc>:
{
 80081a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081a8:	460d      	mov	r5, r1
 80081aa:	4617      	mov	r7, r2
  switch (layer) {
 80081ac:	2804      	cmp	r0, #4
 80081ae:	d80a      	bhi.n	80081c6 <pbuf_alloc+0x22>
 80081b0:	e8df f000 	tbb	[pc, r0]
 80081b4:	05031412 	.word	0x05031412
 80081b8:	07          	.byte	0x07
 80081b9:	00          	.byte	0x00
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 80081ba:	240e      	movs	r4, #14
    break;
 80081bc:	e00f      	b.n	80081de <pbuf_alloc+0x3a>
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 80081be:	2400      	movs	r4, #0
    break;
 80081c0:	e00d      	b.n	80081de <pbuf_alloc+0x3a>
    offset = 0;
 80081c2:	2400      	movs	r4, #0
    break;
 80081c4:	e00b      	b.n	80081de <pbuf_alloc+0x3a>
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 80081c6:	4b64      	ldr	r3, [pc, #400]	; (8008358 <pbuf_alloc+0x1b4>)
 80081c8:	f44f 728b 	mov.w	r2, #278	; 0x116
 80081cc:	4963      	ldr	r1, [pc, #396]	; (800835c <pbuf_alloc+0x1b8>)
 80081ce:	4864      	ldr	r0, [pc, #400]	; (8008360 <pbuf_alloc+0x1bc>)
 80081d0:	f005 fa13 	bl	800d5fa <iprintf>
    return NULL;
 80081d4:	2600      	movs	r6, #0
 80081d6:	e0b1      	b.n	800833c <pbuf_alloc+0x198>
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 80081d8:	2436      	movs	r4, #54	; 0x36
 80081da:	e000      	b.n	80081de <pbuf_alloc+0x3a>
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 80081dc:	2422      	movs	r4, #34	; 0x22
  switch (type) {
 80081de:	2f03      	cmp	r7, #3
 80081e0:	f200 80af 	bhi.w	8008342 <pbuf_alloc+0x19e>
 80081e4:	e8df f007 	tbb	[pc, r7]
 80081e8:	029b9b7b 	.word	0x029b9b7b
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80081ec:	200c      	movs	r0, #12
 80081ee:	f7ff fd7d 	bl	8007cec <memp_malloc>
    if (p == NULL) {
 80081f2:	4606      	mov	r6, r0
 80081f4:	b1f8      	cbz	r0, 8008236 <pbuf_alloc+0x92>
    p->type = type;
 80081f6:	7307      	strb	r7, [r0, #12]
    p->next = NULL;
 80081f8:	2300      	movs	r3, #0
 80081fa:	6003      	str	r3, [r0, #0]
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 80081fc:	f104 0310 	add.w	r3, r4, #16
 8008200:	4403      	add	r3, r0
 8008202:	3303      	adds	r3, #3
 8008204:	f023 0303 	bic.w	r3, r3, #3
 8008208:	6043      	str	r3, [r0, #4]
    p->tot_len = length;
 800820a:	8105      	strh	r5, [r0, #8]
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 800820c:	1ce2      	adds	r2, r4, #3
 800820e:	f022 0203 	bic.w	r2, r2, #3
 8008212:	f5c2 7214 	rsb	r2, r2, #592	; 0x250
 8008216:	42aa      	cmp	r2, r5
 8008218:	bf28      	it	cs
 800821a:	462a      	movcs	r2, r5
 800821c:	b292      	uxth	r2, r2
 800821e:	8142      	strh	r2, [r0, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8008220:	4413      	add	r3, r2
 8008222:	f500 7818 	add.w	r8, r0, #608	; 0x260
 8008226:	4543      	cmp	r3, r8
 8008228:	d808      	bhi.n	800823c <pbuf_alloc+0x98>
    p->ref = 1;
 800822a:	2301      	movs	r3, #1
 800822c:	81f3      	strh	r3, [r6, #14]
    rem_len = length - p->len;
 800822e:	8973      	ldrh	r3, [r6, #10]
 8008230:	1aed      	subs	r5, r5, r3
    r = p;
 8008232:	46b1      	mov	r9, r6
    while (rem_len > 0) {
 8008234:	e026      	b.n	8008284 <pbuf_alloc+0xe0>
      PBUF_POOL_IS_EMPTY();
 8008236:	f7ff fec5 	bl	8007fc4 <pbuf_pool_is_empty>
      return NULL;
 800823a:	e07f      	b.n	800833c <pbuf_alloc+0x198>
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 800823c:	4b46      	ldr	r3, [pc, #280]	; (8008358 <pbuf_alloc+0x1b4>)
 800823e:	f44f 7298 	mov.w	r2, #304	; 0x130
 8008242:	4948      	ldr	r1, [pc, #288]	; (8008364 <pbuf_alloc+0x1c0>)
 8008244:	4846      	ldr	r0, [pc, #280]	; (8008360 <pbuf_alloc+0x1bc>)
 8008246:	f005 f9d8 	bl	800d5fa <iprintf>
 800824a:	e7ee      	b.n	800822a <pbuf_alloc+0x86>
        PBUF_POOL_IS_EMPTY();
 800824c:	f7ff feba 	bl	8007fc4 <pbuf_pool_is_empty>
        pbuf_free(p);
 8008250:	4630      	mov	r0, r6
 8008252:	f7ff ff3b 	bl	80080cc <pbuf_free>
        return NULL;
 8008256:	4626      	mov	r6, r4
 8008258:	e070      	b.n	800833c <pbuf_alloc+0x198>
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 800825a:	4b3f      	ldr	r3, [pc, #252]	; (8008358 <pbuf_alloc+0x1b4>)
 800825c:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 8008260:	4941      	ldr	r1, [pc, #260]	; (8008368 <pbuf_alloc+0x1c4>)
 8008262:	483f      	ldr	r0, [pc, #252]	; (8008360 <pbuf_alloc+0x1bc>)
 8008264:	f005 f9c9 	bl	800d5fa <iprintf>
 8008268:	e01e      	b.n	80082a8 <pbuf_alloc+0x104>
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800826a:	4b3b      	ldr	r3, [pc, #236]	; (8008358 <pbuf_alloc+0x1b4>)
 800826c:	f44f 72a9 	mov.w	r2, #338	; 0x152
 8008270:	493e      	ldr	r1, [pc, #248]	; (800836c <pbuf_alloc+0x1c8>)
 8008272:	483b      	ldr	r0, [pc, #236]	; (8008360 <pbuf_alloc+0x1bc>)
 8008274:	f005 f9c1 	bl	800d5fa <iprintf>
 8008278:	e024      	b.n	80082c4 <pbuf_alloc+0x120>
      q->ref = 1;
 800827a:	2301      	movs	r3, #1
 800827c:	81e3      	strh	r3, [r4, #14]
      rem_len -= q->len;
 800827e:	8963      	ldrh	r3, [r4, #10]
 8008280:	1aed      	subs	r5, r5, r3
      r = q;
 8008282:	46a1      	mov	r9, r4
    while (rem_len > 0) {
 8008284:	2d00      	cmp	r5, #0
 8008286:	dd55      	ble.n	8008334 <pbuf_alloc+0x190>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8008288:	200c      	movs	r0, #12
 800828a:	f7ff fd2f 	bl	8007cec <memp_malloc>
      if (q == NULL) {
 800828e:	4604      	mov	r4, r0
 8008290:	2800      	cmp	r0, #0
 8008292:	d0db      	beq.n	800824c <pbuf_alloc+0xa8>
      q->type = type;
 8008294:	7307      	strb	r7, [r0, #12]
      q->flags = 0;
 8008296:	2300      	movs	r3, #0
 8008298:	7343      	strb	r3, [r0, #13]
      q->next = NULL;
 800829a:	6003      	str	r3, [r0, #0]
      r->next = q;
 800829c:	f8c9 0000 	str.w	r0, [r9]
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 80082a0:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80082a4:	429d      	cmp	r5, r3
 80082a6:	dcd8      	bgt.n	800825a <pbuf_alloc+0xb6>
      q->tot_len = (u16_t)rem_len;
 80082a8:	b2ab      	uxth	r3, r5
 80082aa:	8123      	strh	r3, [r4, #8]
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 80082ac:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 80082b0:	bf28      	it	cs
 80082b2:	f44f 7314 	movcs.w	r3, #592	; 0x250
 80082b6:	8163      	strh	r3, [r4, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 80082b8:	f104 0310 	add.w	r3, r4, #16
 80082bc:	6063      	str	r3, [r4, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80082be:	f013 0f03 	tst.w	r3, #3
 80082c2:	d1d2      	bne.n	800826a <pbuf_alloc+0xc6>
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 80082c4:	6873      	ldr	r3, [r6, #4]
 80082c6:	8972      	ldrh	r2, [r6, #10]
 80082c8:	4413      	add	r3, r2
 80082ca:	4598      	cmp	r8, r3
 80082cc:	d2d5      	bcs.n	800827a <pbuf_alloc+0xd6>
 80082ce:	4b22      	ldr	r3, [pc, #136]	; (8008358 <pbuf_alloc+0x1b4>)
 80082d0:	f240 1255 	movw	r2, #341	; 0x155
 80082d4:	4923      	ldr	r1, [pc, #140]	; (8008364 <pbuf_alloc+0x1c0>)
 80082d6:	4822      	ldr	r0, [pc, #136]	; (8008360 <pbuf_alloc+0x1bc>)
 80082d8:	f005 f98f 	bl	800d5fa <iprintf>
 80082dc:	e7cd      	b.n	800827a <pbuf_alloc+0xd6>
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 80082de:	f104 0013 	add.w	r0, r4, #19
 80082e2:	f020 0003 	bic.w	r0, r0, #3
 80082e6:	b283      	uxth	r3, r0
 80082e8:	1cea      	adds	r2, r5, #3
 80082ea:	b290      	uxth	r0, r2
 80082ec:	f020 0003 	bic.w	r0, r0, #3
 80082f0:	4418      	add	r0, r3
 80082f2:	b280      	uxth	r0, r0
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 80082f4:	f022 0203 	bic.w	r2, r2, #3
 80082f8:	4290      	cmp	r0, r2
 80082fa:	d32b      	bcc.n	8008354 <pbuf_alloc+0x1b0>
      p = (struct pbuf*)mem_malloc(alloc_len);
 80082fc:	f7ff fbe6 	bl	8007acc <mem_malloc>
    if (p == NULL) {
 8008300:	4606      	mov	r6, r0
 8008302:	b1d8      	cbz	r0, 800833c <pbuf_alloc+0x198>
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 8008304:	f104 0310 	add.w	r3, r4, #16
 8008308:	4403      	add	r3, r0
 800830a:	3303      	adds	r3, #3
 800830c:	f023 0303 	bic.w	r3, r3, #3
 8008310:	6043      	str	r3, [r0, #4]
    p->len = p->tot_len = length;
 8008312:	8105      	strh	r5, [r0, #8]
 8008314:	8145      	strh	r5, [r0, #10]
    p->next = NULL;
 8008316:	2300      	movs	r3, #0
 8008318:	6003      	str	r3, [r0, #0]
    p->type = type;
 800831a:	7307      	strb	r7, [r0, #12]
 800831c:	e00a      	b.n	8008334 <pbuf_alloc+0x190>
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800831e:	200b      	movs	r0, #11
 8008320:	f7ff fce4 	bl	8007cec <memp_malloc>
    if (p == NULL) {
 8008324:	4606      	mov	r6, r0
 8008326:	b148      	cbz	r0, 800833c <pbuf_alloc+0x198>
    p->payload = NULL;
 8008328:	2300      	movs	r3, #0
 800832a:	6043      	str	r3, [r0, #4]
    p->len = p->tot_len = length;
 800832c:	8105      	strh	r5, [r0, #8]
 800832e:	8145      	strh	r5, [r0, #10]
    p->next = NULL;
 8008330:	6003      	str	r3, [r0, #0]
    p->type = type;
 8008332:	7307      	strb	r7, [r0, #12]
  p->ref = 1;
 8008334:	2301      	movs	r3, #1
 8008336:	81f3      	strh	r3, [r6, #14]
  p->flags = 0;
 8008338:	2300      	movs	r3, #0
 800833a:	7373      	strb	r3, [r6, #13]
}
 800833c:	4630      	mov	r0, r6
 800833e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8008342:	4b05      	ldr	r3, [pc, #20]	; (8008358 <pbuf_alloc+0x1b4>)
 8008344:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 8008348:	4909      	ldr	r1, [pc, #36]	; (8008370 <pbuf_alloc+0x1cc>)
 800834a:	4805      	ldr	r0, [pc, #20]	; (8008360 <pbuf_alloc+0x1bc>)
 800834c:	f005 f955 	bl	800d5fa <iprintf>
    return NULL;
 8008350:	2600      	movs	r6, #0
 8008352:	e7f3      	b.n	800833c <pbuf_alloc+0x198>
        return NULL;
 8008354:	2600      	movs	r6, #0
 8008356:	e7f1      	b.n	800833c <pbuf_alloc+0x198>
 8008358:	0800f1c4 	.word	0x0800f1c4
 800835c:	0800ef0c 	.word	0x0800ef0c
 8008360:	0800de34 	.word	0x0800de34
 8008364:	0800ef28 	.word	0x0800ef28
 8008368:	0800ef90 	.word	0x0800ef90
 800836c:	0800efa4 	.word	0x0800efa4
 8008370:	0800efd4 	.word	0x0800efd4

08008374 <pbuf_realloc>:
{
 8008374:	b570      	push	{r4, r5, r6, lr}
 8008376:	460d      	mov	r5, r1
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8008378:	4604      	mov	r4, r0
 800837a:	b198      	cbz	r0, 80083a4 <pbuf_realloc+0x30>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 800837c:	7b23      	ldrb	r3, [r4, #12]
 800837e:	2b03      	cmp	r3, #3
 8008380:	d00b      	beq.n	800839a <pbuf_realloc+0x26>
 8008382:	2b01      	cmp	r3, #1
 8008384:	d009      	beq.n	800839a <pbuf_realloc+0x26>
 8008386:	b143      	cbz	r3, 800839a <pbuf_realloc+0x26>
 8008388:	2b02      	cmp	r3, #2
 800838a:	d006      	beq.n	800839a <pbuf_realloc+0x26>
 800838c:	4b2b      	ldr	r3, [pc, #172]	; (800843c <pbuf_realloc+0xc8>)
 800838e:	f240 12f7 	movw	r2, #503	; 0x1f7
 8008392:	492b      	ldr	r1, [pc, #172]	; (8008440 <pbuf_realloc+0xcc>)
 8008394:	482b      	ldr	r0, [pc, #172]	; (8008444 <pbuf_realloc+0xd0>)
 8008396:	f005 f930 	bl	800d5fa <iprintf>
  if (new_len >= p->tot_len) {
 800839a:	8926      	ldrh	r6, [r4, #8]
 800839c:	42ae      	cmp	r6, r5
 800839e:	d938      	bls.n	8008412 <pbuf_realloc+0x9e>
  grow = new_len - p->tot_len;
 80083a0:	1bae      	subs	r6, r5, r6
  while (rem_len > q->len) {
 80083a2:	e00d      	b.n	80083c0 <pbuf_realloc+0x4c>
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80083a4:	4b25      	ldr	r3, [pc, #148]	; (800843c <pbuf_realloc+0xc8>)
 80083a6:	f240 12f3 	movw	r2, #499	; 0x1f3
 80083aa:	4927      	ldr	r1, [pc, #156]	; (8008448 <pbuf_realloc+0xd4>)
 80083ac:	4825      	ldr	r0, [pc, #148]	; (8008444 <pbuf_realloc+0xd0>)
 80083ae:	f005 f924 	bl	800d5fa <iprintf>
 80083b2:	e7e3      	b.n	800837c <pbuf_realloc+0x8>
    q->tot_len += (u16_t)grow;
 80083b4:	8923      	ldrh	r3, [r4, #8]
 80083b6:	fa13 f386 	uxtah	r3, r3, r6
 80083ba:	8123      	strh	r3, [r4, #8]
    q = q->next;
 80083bc:	6824      	ldr	r4, [r4, #0]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80083be:	b184      	cbz	r4, 80083e2 <pbuf_realloc+0x6e>
  while (rem_len > q->len) {
 80083c0:	8961      	ldrh	r1, [r4, #10]
 80083c2:	428d      	cmp	r5, r1
 80083c4:	d915      	bls.n	80083f2 <pbuf_realloc+0x7e>
    rem_len -= q->len;
 80083c6:	1a69      	subs	r1, r5, r1
 80083c8:	b28d      	uxth	r5, r1
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 80083ca:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80083ce:	429e      	cmp	r6, r3
 80083d0:	ddf0      	ble.n	80083b4 <pbuf_realloc+0x40>
 80083d2:	4b1a      	ldr	r3, [pc, #104]	; (800843c <pbuf_realloc+0xc8>)
 80083d4:	f240 220b 	movw	r2, #523	; 0x20b
 80083d8:	491c      	ldr	r1, [pc, #112]	; (800844c <pbuf_realloc+0xd8>)
 80083da:	481a      	ldr	r0, [pc, #104]	; (8008444 <pbuf_realloc+0xd0>)
 80083dc:	f005 f90d 	bl	800d5fa <iprintf>
 80083e0:	e7e8      	b.n	80083b4 <pbuf_realloc+0x40>
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80083e2:	4b16      	ldr	r3, [pc, #88]	; (800843c <pbuf_realloc+0xc8>)
 80083e4:	f240 220f 	movw	r2, #527	; 0x20f
 80083e8:	4919      	ldr	r1, [pc, #100]	; (8008450 <pbuf_realloc+0xdc>)
 80083ea:	4816      	ldr	r0, [pc, #88]	; (8008444 <pbuf_realloc+0xd0>)
 80083ec:	f005 f905 	bl	800d5fa <iprintf>
 80083f0:	e7e6      	b.n	80083c0 <pbuf_realloc+0x4c>
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 80083f2:	7b23      	ldrb	r3, [r4, #12]
 80083f4:	b92b      	cbnz	r3, 8008402 <pbuf_realloc+0x8e>
 80083f6:	428d      	cmp	r5, r1
 80083f8:	d003      	beq.n	8008402 <pbuf_realloc+0x8e>
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80083fa:	7b63      	ldrb	r3, [r4, #13]
 80083fc:	f013 0f02 	tst.w	r3, #2
 8008400:	d008      	beq.n	8008414 <pbuf_realloc+0xa0>
  q->len = rem_len;
 8008402:	8165      	strh	r5, [r4, #10]
  q->tot_len = q->len;
 8008404:	8125      	strh	r5, [r4, #8]
  if (q->next != NULL) {
 8008406:	6820      	ldr	r0, [r4, #0]
 8008408:	b108      	cbz	r0, 800840e <pbuf_realloc+0x9a>
    pbuf_free(q->next);
 800840a:	f7ff fe5f 	bl	80080cc <pbuf_free>
  q->next = NULL;
 800840e:	2300      	movs	r3, #0
 8008410:	6023      	str	r3, [r4, #0]
 8008412:	bd70      	pop	{r4, r5, r6, pc}
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 8008414:	6863      	ldr	r3, [r4, #4]
 8008416:	1b1b      	subs	r3, r3, r4
 8008418:	fa15 f183 	uxtah	r1, r5, r3
 800841c:	b289      	uxth	r1, r1
 800841e:	4620      	mov	r0, r4
 8008420:	f7ff fab8 	bl	8007994 <mem_trim>
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8008424:	4604      	mov	r4, r0
 8008426:	2800      	cmp	r0, #0
 8008428:	d1eb      	bne.n	8008402 <pbuf_realloc+0x8e>
 800842a:	4b04      	ldr	r3, [pc, #16]	; (800843c <pbuf_realloc+0xc8>)
 800842c:	f240 221d 	movw	r2, #541	; 0x21d
 8008430:	4908      	ldr	r1, [pc, #32]	; (8008454 <pbuf_realloc+0xe0>)
 8008432:	4804      	ldr	r0, [pc, #16]	; (8008444 <pbuf_realloc+0xd0>)
 8008434:	f005 f8e1 	bl	800d5fa <iprintf>
 8008438:	e7e3      	b.n	8008402 <pbuf_realloc+0x8e>
 800843a:	bf00      	nop
 800843c:	0800f1c4 	.word	0x0800f1c4
 8008440:	0800f23c 	.word	0x0800f23c
 8008444:	0800de34 	.word	0x0800de34
 8008448:	0800f224 	.word	0x0800f224
 800844c:	0800f258 	.word	0x0800f258
 8008450:	0800f26c 	.word	0x0800f26c
 8008454:	0800f284 	.word	0x0800f284

08008458 <pbuf_clen>:
u16_t
pbuf_clen(const struct pbuf *p)
{
  u16_t len;

  len = 0;
 8008458:	2300      	movs	r3, #0
  while (p != NULL) {
 800845a:	e002      	b.n	8008462 <pbuf_clen+0xa>
    ++len;
 800845c:	3301      	adds	r3, #1
 800845e:	b29b      	uxth	r3, r3
    p = p->next;
 8008460:	6800      	ldr	r0, [r0, #0]
  while (p != NULL) {
 8008462:	2800      	cmp	r0, #0
 8008464:	d1fa      	bne.n	800845c <pbuf_clen+0x4>
  }
  return len;
}
 8008466:	4618      	mov	r0, r3
 8008468:	4770      	bx	lr
	...

0800846c <pbuf_ref>:
 */
void
pbuf_ref(struct pbuf *p)
{
  /* pbuf given? */
  if (p != NULL) {
 800846c:	b198      	cbz	r0, 8008496 <pbuf_ref+0x2a>
{
 800846e:	b510      	push	{r4, lr}
 8008470:	4604      	mov	r4, r0
    SYS_ARCH_INC(p->ref, 1);
 8008472:	f004 fa4f 	bl	800c914 <sys_arch_protect>
 8008476:	89e3      	ldrh	r3, [r4, #14]
 8008478:	3301      	adds	r3, #1
 800847a:	81e3      	strh	r3, [r4, #14]
 800847c:	f004 fa56 	bl	800c92c <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8008480:	89e3      	ldrh	r3, [r4, #14]
 8008482:	b103      	cbz	r3, 8008486 <pbuf_ref+0x1a>
 8008484:	bd10      	pop	{r4, pc}
 8008486:	4b04      	ldr	r3, [pc, #16]	; (8008498 <pbuf_ref+0x2c>)
 8008488:	f240 3239 	movw	r2, #825	; 0x339
 800848c:	4903      	ldr	r1, [pc, #12]	; (800849c <pbuf_ref+0x30>)
 800848e:	4804      	ldr	r0, [pc, #16]	; (80084a0 <pbuf_ref+0x34>)
 8008490:	f005 f8b3 	bl	800d5fa <iprintf>
  }
}
 8008494:	e7f6      	b.n	8008484 <pbuf_ref+0x18>
 8008496:	4770      	bx	lr
 8008498:	0800f1c4 	.word	0x0800f1c4
 800849c:	0800f2a0 	.word	0x0800f2a0
 80084a0:	0800de34 	.word	0x0800de34

080084a4 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80084a4:	b538      	push	{r3, r4, r5, lr}
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80084a6:	b110      	cbz	r0, 80084ae <pbuf_cat+0xa>
 80084a8:	460d      	mov	r5, r1
 80084aa:	4604      	mov	r4, r0
 80084ac:	b961      	cbnz	r1, 80084c8 <pbuf_cat+0x24>
 80084ae:	4b15      	ldr	r3, [pc, #84]	; (8008504 <pbuf_cat+0x60>)
 80084b0:	f240 324d 	movw	r2, #845	; 0x34d
 80084b4:	4914      	ldr	r1, [pc, #80]	; (8008508 <pbuf_cat+0x64>)
 80084b6:	4815      	ldr	r0, [pc, #84]	; (800850c <pbuf_cat+0x68>)
 80084b8:	f005 f89f 	bl	800d5fa <iprintf>
 80084bc:	bd38      	pop	{r3, r4, r5, pc}
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 80084be:	892b      	ldrh	r3, [r5, #8]
 80084c0:	8921      	ldrh	r1, [r4, #8]
 80084c2:	440b      	add	r3, r1
 80084c4:	8123      	strh	r3, [r4, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80084c6:	4614      	mov	r4, r2
 80084c8:	6822      	ldr	r2, [r4, #0]
 80084ca:	2a00      	cmp	r2, #0
 80084cc:	d1f7      	bne.n	80084be <pbuf_cat+0x1a>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80084ce:	8922      	ldrh	r2, [r4, #8]
 80084d0:	8963      	ldrh	r3, [r4, #10]
 80084d2:	429a      	cmp	r2, r3
 80084d4:	d006      	beq.n	80084e4 <pbuf_cat+0x40>
 80084d6:	4b0b      	ldr	r3, [pc, #44]	; (8008504 <pbuf_cat+0x60>)
 80084d8:	f240 3255 	movw	r2, #853	; 0x355
 80084dc:	490c      	ldr	r1, [pc, #48]	; (8008510 <pbuf_cat+0x6c>)
 80084de:	480b      	ldr	r0, [pc, #44]	; (800850c <pbuf_cat+0x68>)
 80084e0:	f005 f88b 	bl	800d5fa <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80084e4:	6823      	ldr	r3, [r4, #0]
 80084e6:	b133      	cbz	r3, 80084f6 <pbuf_cat+0x52>
 80084e8:	4b06      	ldr	r3, [pc, #24]	; (8008504 <pbuf_cat+0x60>)
 80084ea:	f240 3256 	movw	r2, #854	; 0x356
 80084ee:	4909      	ldr	r1, [pc, #36]	; (8008514 <pbuf_cat+0x70>)
 80084f0:	4806      	ldr	r0, [pc, #24]	; (800850c <pbuf_cat+0x68>)
 80084f2:	f005 f882 	bl	800d5fa <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
 80084f6:	892b      	ldrh	r3, [r5, #8]
 80084f8:	8922      	ldrh	r2, [r4, #8]
 80084fa:	4413      	add	r3, r2
 80084fc:	8123      	strh	r3, [r4, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80084fe:	6025      	str	r5, [r4, #0]
 8008500:	bd38      	pop	{r3, r4, r5, pc}
 8008502:	bf00      	nop
 8008504:	0800f1c4 	.word	0x0800f1c4
 8008508:	0800f014 	.word	0x0800f014
 800850c:	0800de34 	.word	0x0800de34
 8008510:	0800f04c 	.word	0x0800f04c
 8008514:	0800f07c 	.word	0x0800f07c

08008518 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8008518:	b510      	push	{r4, lr}
 800851a:	460c      	mov	r4, r1
  pbuf_cat(h, t);
 800851c:	f7ff ffc2 	bl	80084a4 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8008520:	4620      	mov	r0, r4
 8008522:	f7ff ffa3 	bl	800846c <pbuf_ref>
 8008526:	bd10      	pop	{r4, pc}

08008528 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8008528:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800852c:	b150      	cbz	r0, 8008544 <pbuf_copy+0x1c>
 800852e:	460d      	mov	r5, r1
 8008530:	4607      	mov	r7, r0
 8008532:	b139      	cbz	r1, 8008544 <pbuf_copy+0x1c>
 8008534:	8902      	ldrh	r2, [r0, #8]
 8008536:	890b      	ldrh	r3, [r1, #8]
 8008538:	429a      	cmp	r2, r3
 800853a:	d303      	bcc.n	8008544 <pbuf_copy+0x1c>
 800853c:	f04f 0800 	mov.w	r8, #0
 8008540:	4646      	mov	r6, r8
 8008542:	e02c      	b.n	800859e <pbuf_copy+0x76>
 8008544:	4b3f      	ldr	r3, [pc, #252]	; (8008644 <pbuf_copy+0x11c>)
 8008546:	f240 32bd 	movw	r2, #957	; 0x3bd
 800854a:	493f      	ldr	r1, [pc, #252]	; (8008648 <pbuf_copy+0x120>)
 800854c:	483f      	ldr	r0, [pc, #252]	; (800864c <pbuf_copy+0x124>)
 800854e:	f005 f854 	bl	800d5fa <iprintf>
 8008552:	f06f 000f 	mvn.w	r0, #15
 8008556:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800855a:	1b9b      	subs	r3, r3, r6
 800855c:	b29c      	uxth	r4, r3
 800855e:	e026      	b.n	80085ae <pbuf_copy+0x86>
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
    offset_to += len;
    offset_from += len;
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8008560:	4b38      	ldr	r3, [pc, #224]	; (8008644 <pbuf_copy+0x11c>)
 8008562:	f240 32cd 	movw	r2, #973	; 0x3cd
 8008566:	493a      	ldr	r1, [pc, #232]	; (8008650 <pbuf_copy+0x128>)
 8008568:	4838      	ldr	r0, [pc, #224]	; (800864c <pbuf_copy+0x124>)
 800856a:	f005 f846 	bl	800d5fa <iprintf>
 800856e:	e02d      	b.n	80085cc <pbuf_copy+0xa4>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8008570:	4b34      	ldr	r3, [pc, #208]	; (8008644 <pbuf_copy+0x11c>)
 8008572:	f240 32ce 	movw	r2, #974	; 0x3ce
 8008576:	4937      	ldr	r1, [pc, #220]	; (8008654 <pbuf_copy+0x12c>)
 8008578:	4834      	ldr	r0, [pc, #208]	; (800864c <pbuf_copy+0x124>)
 800857a:	f005 f83e 	bl	800d5fa <iprintf>
 800857e:	e028      	b.n	80085d2 <pbuf_copy+0xaa>
    if (offset_from >= p_from->len) {
      /* on to next p_from (if any) */
      offset_from = 0;
      p_from = p_from->next;
    }
    if (offset_to == p_to->len) {
 8008580:	897b      	ldrh	r3, [r7, #10]
 8008582:	429e      	cmp	r6, r3
 8008584:	d02c      	beq.n	80085e0 <pbuf_copy+0xb8>
      offset_to = 0;
      p_to = p_to->next;
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8008586:	b11d      	cbz	r5, 8008590 <pbuf_copy+0x68>
 8008588:	896a      	ldrh	r2, [r5, #10]
 800858a:	892b      	ldrh	r3, [r5, #8]
 800858c:	429a      	cmp	r2, r3
 800858e:	d039      	beq.n	8008604 <pbuf_copy+0xdc>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8008590:	b11f      	cbz	r7, 800859a <pbuf_copy+0x72>
 8008592:	897a      	ldrh	r2, [r7, #10]
 8008594:	893b      	ldrh	r3, [r7, #8]
 8008596:	429a      	cmp	r2, r3
 8008598:	d042      	beq.n	8008620 <pbuf_copy+0xf8>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800859a:	2d00      	cmp	r5, #0
 800859c:	d04e      	beq.n	800863c <pbuf_copy+0x114>
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800859e:	897b      	ldrh	r3, [r7, #10]
 80085a0:	1b99      	subs	r1, r3, r6
 80085a2:	896c      	ldrh	r4, [r5, #10]
 80085a4:	eba4 0208 	sub.w	r2, r4, r8
 80085a8:	4291      	cmp	r1, r2
 80085aa:	dbd6      	blt.n	800855a <pbuf_copy+0x32>
      len = p_from->len - offset_from;
 80085ac:	b294      	uxth	r4, r2
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	6869      	ldr	r1, [r5, #4]
 80085b2:	4622      	mov	r2, r4
 80085b4:	4441      	add	r1, r8
 80085b6:	4430      	add	r0, r6
 80085b8:	f005 f98b 	bl	800d8d2 <memcpy>
    offset_to += len;
 80085bc:	4426      	add	r6, r4
 80085be:	b2b6      	uxth	r6, r6
    offset_from += len;
 80085c0:	4444      	add	r4, r8
 80085c2:	fa1f f884 	uxth.w	r8, r4
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80085c6:	897b      	ldrh	r3, [r7, #10]
 80085c8:	429e      	cmp	r6, r3
 80085ca:	d8c9      	bhi.n	8008560 <pbuf_copy+0x38>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80085cc:	896b      	ldrh	r3, [r5, #10]
 80085ce:	4598      	cmp	r8, r3
 80085d0:	d8ce      	bhi.n	8008570 <pbuf_copy+0x48>
    if (offset_from >= p_from->len) {
 80085d2:	896b      	ldrh	r3, [r5, #10]
 80085d4:	4598      	cmp	r8, r3
 80085d6:	d3d3      	bcc.n	8008580 <pbuf_copy+0x58>
      p_from = p_from->next;
 80085d8:	682d      	ldr	r5, [r5, #0]
      offset_from = 0;
 80085da:	f04f 0800 	mov.w	r8, #0
 80085de:	e7cf      	b.n	8008580 <pbuf_copy+0x58>
      p_to = p_to->next;
 80085e0:	683f      	ldr	r7, [r7, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 80085e2:	b10f      	cbz	r7, 80085e8 <pbuf_copy+0xc0>
      offset_to = 0;
 80085e4:	2600      	movs	r6, #0
 80085e6:	e7ce      	b.n	8008586 <pbuf_copy+0x5e>
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 80085e8:	b90d      	cbnz	r5, 80085ee <pbuf_copy+0xc6>
      offset_to = 0;
 80085ea:	2600      	movs	r6, #0
 80085ec:	e7cb      	b.n	8008586 <pbuf_copy+0x5e>
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 80085ee:	4b15      	ldr	r3, [pc, #84]	; (8008644 <pbuf_copy+0x11c>)
 80085f0:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 80085f4:	4918      	ldr	r1, [pc, #96]	; (8008658 <pbuf_copy+0x130>)
 80085f6:	4815      	ldr	r0, [pc, #84]	; (800864c <pbuf_copy+0x124>)
 80085f8:	f004 ffff 	bl	800d5fa <iprintf>
 80085fc:	f06f 000f 	mvn.w	r0, #15
 8008600:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8008604:	682b      	ldr	r3, [r5, #0]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d0c2      	beq.n	8008590 <pbuf_copy+0x68>
 800860a:	4b0e      	ldr	r3, [pc, #56]	; (8008644 <pbuf_copy+0x11c>)
 800860c:	f240 32de 	movw	r2, #990	; 0x3de
 8008610:	4912      	ldr	r1, [pc, #72]	; (800865c <pbuf_copy+0x134>)
 8008612:	480e      	ldr	r0, [pc, #56]	; (800864c <pbuf_copy+0x124>)
 8008614:	f004 fff1 	bl	800d5fa <iprintf>
 8008618:	f06f 0005 	mvn.w	r0, #5
 800861c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d0b9      	beq.n	800859a <pbuf_copy+0x72>
 8008626:	4b07      	ldr	r3, [pc, #28]	; (8008644 <pbuf_copy+0x11c>)
 8008628:	f240 32e3 	movw	r2, #995	; 0x3e3
 800862c:	490b      	ldr	r1, [pc, #44]	; (800865c <pbuf_copy+0x134>)
 800862e:	4807      	ldr	r0, [pc, #28]	; (800864c <pbuf_copy+0x124>)
 8008630:	f004 ffe3 	bl	800d5fa <iprintf>
 8008634:	f06f 0005 	mvn.w	r0, #5
 8008638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800863c:	2000      	movs	r0, #0
}
 800863e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008642:	bf00      	nop
 8008644:	0800f1c4 	.word	0x0800f1c4
 8008648:	0800f08c 	.word	0x0800f08c
 800864c:	0800de34 	.word	0x0800de34
 8008650:	0800f0bc 	.word	0x0800f0bc
 8008654:	0800f0d4 	.word	0x0800f0d4
 8008658:	0800f0f0 	.word	0x0800f0f0
 800865c:	0800f100 	.word	0x0800f100

08008660 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8008660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8008664:	b128      	cbz	r0, 8008672 <pbuf_copy_partial+0x12>
 8008666:	460f      	mov	r7, r1
 8008668:	4690      	mov	r8, r2
 800866a:	4605      	mov	r5, r0
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800866c:	b161      	cbz	r1, 8008688 <pbuf_copy_partial+0x28>
 800866e:	2600      	movs	r6, #0
 8008670:	e027      	b.n	80086c2 <pbuf_copy_partial+0x62>
  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8008672:	4b1a      	ldr	r3, [pc, #104]	; (80086dc <pbuf_copy_partial+0x7c>)
 8008674:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8008678:	4919      	ldr	r1, [pc, #100]	; (80086e0 <pbuf_copy_partial+0x80>)
 800867a:	481a      	ldr	r0, [pc, #104]	; (80086e4 <pbuf_copy_partial+0x84>)
 800867c:	f004 ffbd 	bl	800d5fa <iprintf>
 8008680:	2600      	movs	r6, #0
      len -= buf_copy_len;
      offset = 0;
    }
  }
  return copied_total;
}
 8008682:	4630      	mov	r0, r6
 8008684:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8008688:	4b14      	ldr	r3, [pc, #80]	; (80086dc <pbuf_copy_partial+0x7c>)
 800868a:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800868e:	4916      	ldr	r1, [pc, #88]	; (80086e8 <pbuf_copy_partial+0x88>)
 8008690:	4814      	ldr	r0, [pc, #80]	; (80086e4 <pbuf_copy_partial+0x84>)
 8008692:	f004 ffb2 	bl	800d5fa <iprintf>
 8008696:	2600      	movs	r6, #0
 8008698:	e7f3      	b.n	8008682 <pbuf_copy_partial+0x22>
      buf_copy_len = p->len - offset;
 800869a:	896a      	ldrh	r2, [r5, #10]
 800869c:	1ad2      	subs	r2, r2, r3
 800869e:	b294      	uxth	r4, r2
      if (buf_copy_len > len) {
 80086a0:	45a0      	cmp	r8, r4
 80086a2:	d200      	bcs.n	80086a6 <pbuf_copy_partial+0x46>
        buf_copy_len = len;
 80086a4:	4644      	mov	r4, r8
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 80086a6:	6869      	ldr	r1, [r5, #4]
 80086a8:	4622      	mov	r2, r4
 80086aa:	4419      	add	r1, r3
 80086ac:	19b8      	adds	r0, r7, r6
 80086ae:	f005 f910 	bl	800d8d2 <memcpy>
      copied_total += buf_copy_len;
 80086b2:	4426      	add	r6, r4
 80086b4:	b2b6      	uxth	r6, r6
      len -= buf_copy_len;
 80086b6:	eba8 0404 	sub.w	r4, r8, r4
 80086ba:	fa1f f884 	uxth.w	r8, r4
      offset = 0;
 80086be:	2300      	movs	r3, #0
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80086c0:	682d      	ldr	r5, [r5, #0]
 80086c2:	f1b8 0f00 	cmp.w	r8, #0
 80086c6:	d0dc      	beq.n	8008682 <pbuf_copy_partial+0x22>
 80086c8:	2d00      	cmp	r5, #0
 80086ca:	d0da      	beq.n	8008682 <pbuf_copy_partial+0x22>
    if ((offset != 0) && (offset >= p->len)) {
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d0e4      	beq.n	800869a <pbuf_copy_partial+0x3a>
 80086d0:	8969      	ldrh	r1, [r5, #10]
 80086d2:	428b      	cmp	r3, r1
 80086d4:	d3e1      	bcc.n	800869a <pbuf_copy_partial+0x3a>
      offset -= p->len;
 80086d6:	1a5b      	subs	r3, r3, r1
 80086d8:	b29b      	uxth	r3, r3
 80086da:	e7f1      	b.n	80086c0 <pbuf_copy_partial+0x60>
 80086dc:	0800f1c4 	.word	0x0800f1c4
 80086e0:	0800f12c 	.word	0x0800f12c
 80086e4:	0800de34 	.word	0x0800de34
 80086e8:	0800f14c 	.word	0x0800f14c

080086ec <tcp_remove_listener>:
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
   struct tcp_pcb *pcb;
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80086ec:	e000      	b.n	80086f0 <tcp_remove_listener+0x4>
 80086ee:	68c0      	ldr	r0, [r0, #12]
 80086f0:	b128      	cbz	r0, 80086fe <tcp_remove_listener+0x12>
      if (pcb->listener == lpcb) {
 80086f2:	6f83      	ldr	r3, [r0, #120]	; 0x78
 80086f4:	428b      	cmp	r3, r1
 80086f6:	d1fa      	bne.n	80086ee <tcp_remove_listener+0x2>
         pcb->listener = NULL;
 80086f8:	2300      	movs	r3, #0
 80086fa:	6783      	str	r3, [r0, #120]	; 0x78
 80086fc:	e7f7      	b.n	80086ee <tcp_remove_listener+0x2>
      }
   }
}
 80086fe:	4770      	bx	lr

08008700 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8008700:	b410      	push	{r4}
  u8_t i;
  u16_t n = 0;
 8008702:	2400      	movs	r4, #0
 8008704:	e009      	b.n	800871a <tcp_new_port+0x1a>
  struct tcp_pcb *pcb;

again:
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8008706:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800870a:	4b14      	ldr	r3, [pc, #80]	; (800875c <tcp_new_port+0x5c>)
 800870c:	801a      	strh	r2, [r3, #0]
 800870e:	e00c      	b.n	800872a <tcp_new_port+0x2a>
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
      if (pcb->local_port == tcp_port) {
        if (++n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8008710:	3401      	adds	r4, #1
 8008712:	b2a4      	uxth	r4, r4
 8008714:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
 8008718:	d21e      	bcs.n	8008758 <tcp_new_port+0x58>
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
 800871a:	4a10      	ldr	r2, [pc, #64]	; (800875c <tcp_new_port+0x5c>)
 800871c:	8813      	ldrh	r3, [r2, #0]
 800871e:	1c59      	adds	r1, r3, #1
 8008720:	8011      	strh	r1, [r2, #0]
 8008722:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008726:	4293      	cmp	r3, r2
 8008728:	d0ed      	beq.n	8008706 <tcp_new_port+0x6>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800872a:	2000      	movs	r0, #0
 800872c:	2803      	cmp	r0, #3
 800872e:	d80e      	bhi.n	800874e <tcp_new_port+0x4e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8008730:	4b0b      	ldr	r3, [pc, #44]	; (8008760 <tcp_new_port+0x60>)
 8008732:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	b133      	cbz	r3, 8008748 <tcp_new_port+0x48>
      if (pcb->local_port == tcp_port) {
 800873a:	8ad9      	ldrh	r1, [r3, #22]
 800873c:	4a07      	ldr	r2, [pc, #28]	; (800875c <tcp_new_port+0x5c>)
 800873e:	8812      	ldrh	r2, [r2, #0]
 8008740:	4291      	cmp	r1, r2
 8008742:	d0e5      	beq.n	8008710 <tcp_new_port+0x10>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8008744:	68db      	ldr	r3, [r3, #12]
 8008746:	e7f7      	b.n	8008738 <tcp_new_port+0x38>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8008748:	3001      	adds	r0, #1
 800874a:	b2c0      	uxtb	r0, r0
 800874c:	e7ee      	b.n	800872c <tcp_new_port+0x2c>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800874e:	4b03      	ldr	r3, [pc, #12]	; (800875c <tcp_new_port+0x5c>)
 8008750:	8818      	ldrh	r0, [r3, #0]
}
 8008752:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008756:	4770      	bx	lr
          return 0;
 8008758:	2000      	movs	r0, #0
 800875a:	e7fa      	b.n	8008752 <tcp_new_port+0x52>
 800875c:	2000000c 	.word	0x2000000c
 8008760:	0800f3ec 	.word	0x0800f3ec

08008764 <tcp_listen_closed>:
{
 8008764:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8008766:	4605      	mov	r5, r0
 8008768:	b150      	cbz	r0, 8008780 <tcp_listen_closed+0x1c>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800876a:	7d2b      	ldrb	r3, [r5, #20]
 800876c:	2b01      	cmp	r3, #1
 800876e:	d005      	beq.n	800877c <tcp_listen_closed+0x18>
 8008770:	4b0c      	ldr	r3, [pc, #48]	; (80087a4 <tcp_listen_closed+0x40>)
 8008772:	22c1      	movs	r2, #193	; 0xc1
 8008774:	490c      	ldr	r1, [pc, #48]	; (80087a8 <tcp_listen_closed+0x44>)
 8008776:	480d      	ldr	r0, [pc, #52]	; (80087ac <tcp_listen_closed+0x48>)
 8008778:	f004 ff3f 	bl	800d5fa <iprintf>
{
 800877c:	2401      	movs	r4, #1
 800877e:	e00e      	b.n	800879e <tcp_listen_closed+0x3a>
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8008780:	4b08      	ldr	r3, [pc, #32]	; (80087a4 <tcp_listen_closed+0x40>)
 8008782:	22c0      	movs	r2, #192	; 0xc0
 8008784:	490a      	ldr	r1, [pc, #40]	; (80087b0 <tcp_listen_closed+0x4c>)
 8008786:	4809      	ldr	r0, [pc, #36]	; (80087ac <tcp_listen_closed+0x48>)
 8008788:	f004 ff37 	bl	800d5fa <iprintf>
 800878c:	e7ed      	b.n	800876a <tcp_listen_closed+0x6>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 800878e:	4b09      	ldr	r3, [pc, #36]	; (80087b4 <tcp_listen_closed+0x50>)
 8008790:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8008794:	4629      	mov	r1, r5
 8008796:	6818      	ldr	r0, [r3, #0]
 8008798:	f7ff ffa8 	bl	80086ec <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800879c:	3401      	adds	r4, #1
 800879e:	2c03      	cmp	r4, #3
 80087a0:	d9f5      	bls.n	800878e <tcp_listen_closed+0x2a>
}
 80087a2:	bd38      	pop	{r3, r4, r5, pc}
 80087a4:	0800f374 	.word	0x0800f374
 80087a8:	0800f3b0 	.word	0x0800f3b0
 80087ac:	0800de34 	.word	0x0800de34
 80087b0:	0800f3a4 	.word	0x0800f3a4
 80087b4:	0800f3ec 	.word	0x0800f3ec

080087b8 <tcp_close_shutdown_fin>:
{
 80087b8:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80087ba:	4604      	mov	r4, r0
 80087bc:	b140      	cbz	r0, 80087d0 <tcp_close_shutdown_fin+0x18>
  switch (pcb->state) {
 80087be:	7d23      	ldrb	r3, [r4, #20]
 80087c0:	2b04      	cmp	r3, #4
 80087c2:	d01a      	beq.n	80087fa <tcp_close_shutdown_fin+0x42>
 80087c4:	2b07      	cmp	r3, #7
 80087c6:	d021      	beq.n	800880c <tcp_close_shutdown_fin+0x54>
 80087c8:	2b03      	cmp	r3, #3
 80087ca:	d009      	beq.n	80087e0 <tcp_close_shutdown_fin+0x28>
    return ERR_OK;
 80087cc:	2500      	movs	r5, #0
 80087ce:	e012      	b.n	80087f6 <tcp_close_shutdown_fin+0x3e>
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80087d0:	4b18      	ldr	r3, [pc, #96]	; (8008834 <tcp_close_shutdown_fin+0x7c>)
 80087d2:	f240 124d 	movw	r2, #333	; 0x14d
 80087d6:	4918      	ldr	r1, [pc, #96]	; (8008838 <tcp_close_shutdown_fin+0x80>)
 80087d8:	4818      	ldr	r0, [pc, #96]	; (800883c <tcp_close_shutdown_fin+0x84>)
 80087da:	f004 ff0e 	bl	800d5fa <iprintf>
 80087de:	e7ee      	b.n	80087be <tcp_close_shutdown_fin+0x6>
    err = tcp_send_fin(pcb);
 80087e0:	4620      	mov	r0, r4
 80087e2:	f003 f891 	bl	800b908 <tcp_send_fin>
    if (err == ERR_OK) {
 80087e6:	4605      	mov	r5, r0
 80087e8:	b908      	cbnz	r0, 80087ee <tcp_close_shutdown_fin+0x36>
      pcb->state = FIN_WAIT_1;
 80087ea:	2305      	movs	r3, #5
 80087ec:	7523      	strb	r3, [r4, #20]
  if (err == ERR_OK) {
 80087ee:	b1b5      	cbz	r5, 800881e <tcp_close_shutdown_fin+0x66>
  } else if (err == ERR_MEM) {
 80087f0:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 80087f4:	d017      	beq.n	8008826 <tcp_close_shutdown_fin+0x6e>
}
 80087f6:	4628      	mov	r0, r5
 80087f8:	bd38      	pop	{r3, r4, r5, pc}
    err = tcp_send_fin(pcb);
 80087fa:	4620      	mov	r0, r4
 80087fc:	f003 f884 	bl	800b908 <tcp_send_fin>
    if (err == ERR_OK) {
 8008800:	4605      	mov	r5, r0
 8008802:	2800      	cmp	r0, #0
 8008804:	d1f3      	bne.n	80087ee <tcp_close_shutdown_fin+0x36>
      pcb->state = FIN_WAIT_1;
 8008806:	2305      	movs	r3, #5
 8008808:	7523      	strb	r3, [r4, #20]
 800880a:	e7f0      	b.n	80087ee <tcp_close_shutdown_fin+0x36>
    err = tcp_send_fin(pcb);
 800880c:	4620      	mov	r0, r4
 800880e:	f003 f87b 	bl	800b908 <tcp_send_fin>
    if (err == ERR_OK) {
 8008812:	4605      	mov	r5, r0
 8008814:	2800      	cmp	r0, #0
 8008816:	d1ea      	bne.n	80087ee <tcp_close_shutdown_fin+0x36>
      pcb->state = LAST_ACK;
 8008818:	2309      	movs	r3, #9
 800881a:	7523      	strb	r3, [r4, #20]
 800881c:	e7e7      	b.n	80087ee <tcp_close_shutdown_fin+0x36>
    tcp_output(pcb);
 800881e:	4620      	mov	r0, r4
 8008820:	f003 f8ce 	bl	800b9c0 <tcp_output>
 8008824:	e7e7      	b.n	80087f6 <tcp_close_shutdown_fin+0x3e>
    pcb->flags |= TF_CLOSEPEND;
 8008826:	7ea3      	ldrb	r3, [r4, #26]
 8008828:	f043 0308 	orr.w	r3, r3, #8
 800882c:	76a3      	strb	r3, [r4, #26]
    return ERR_OK;
 800882e:	2500      	movs	r5, #0
 8008830:	e7e1      	b.n	80087f6 <tcp_close_shutdown_fin+0x3e>
 8008832:	bf00      	nop
 8008834:	0800f374 	.word	0x0800f374
 8008838:	0800f3a4 	.word	0x0800f3a4
 800883c:	0800de34 	.word	0x0800de34

08008840 <tcp_init>:
{
 8008840:	4770      	bx	lr
	...

08008844 <tcp_bind>:
{
 8008844:	b570      	push	{r4, r5, r6, lr}
 8008846:	4605      	mov	r5, r0
  if (ipaddr == NULL) {
 8008848:	460c      	mov	r4, r1
 800884a:	b171      	cbz	r1, 800886a <tcp_bind+0x26>
  if ((pcb == NULL) || (ipaddr == NULL)) {
 800884c:	2d00      	cmp	r5, #0
 800884e:	d039      	beq.n	80088c4 <tcp_bind+0x80>
 8008850:	2c00      	cmp	r4, #0
 8008852:	d03a      	beq.n	80088ca <tcp_bind+0x86>
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8008854:	7d2b      	ldrb	r3, [r5, #20]
 8008856:	b953      	cbnz	r3, 800886e <tcp_bind+0x2a>
  if (port == 0) {
 8008858:	b19a      	cbz	r2, 8008882 <tcp_bind+0x3e>
 800885a:	2600      	movs	r6, #0
    for (i = 0; i < max_pcb_list; i++) {
 800885c:	2e03      	cmp	r6, #3
 800885e:	dc14      	bgt.n	800888a <tcp_bind+0x46>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8008860:	4b21      	ldr	r3, [pc, #132]	; (80088e8 <tcp_bind+0xa4>)
 8008862:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	e01c      	b.n	80088a4 <tcp_bind+0x60>
    ipaddr = IP4_ADDR_ANY;
 800886a:	4c20      	ldr	r4, [pc, #128]	; (80088ec <tcp_bind+0xa8>)
 800886c:	e7ee      	b.n	800884c <tcp_bind+0x8>
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800886e:	4b20      	ldr	r3, [pc, #128]	; (80088f0 <tcp_bind+0xac>)
 8008870:	f44f 7211 	mov.w	r2, #580	; 0x244
 8008874:	491f      	ldr	r1, [pc, #124]	; (80088f4 <tcp_bind+0xb0>)
 8008876:	4820      	ldr	r0, [pc, #128]	; (80088f8 <tcp_bind+0xb4>)
 8008878:	f004 febf 	bl	800d5fa <iprintf>
 800887c:	f06f 0005 	mvn.w	r0, #5
 8008880:	bd70      	pop	{r4, r5, r6, pc}
    port = tcp_new_port();
 8008882:	f7ff ff3d 	bl	8008700 <tcp_new_port>
    if (port == 0) {
 8008886:	4602      	mov	r2, r0
 8008888:	b310      	cbz	r0, 80088d0 <tcp_bind+0x8c>
  if (!ip_addr_isany(ipaddr)) {
 800888a:	6823      	ldr	r3, [r4, #0]
 800888c:	b103      	cbz	r3, 8008890 <tcp_bind+0x4c>
    ip_addr_set(&pcb->local_ip, ipaddr);
 800888e:	602b      	str	r3, [r5, #0]
  pcb->local_port = port;
 8008890:	82ea      	strh	r2, [r5, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8008892:	4b1a      	ldr	r3, [pc, #104]	; (80088fc <tcp_bind+0xb8>)
 8008894:	681a      	ldr	r2, [r3, #0]
 8008896:	60ea      	str	r2, [r5, #12]
 8008898:	601d      	str	r5, [r3, #0]
 800889a:	f003 fbfb 	bl	800c094 <tcp_timer_needed>
  return ERR_OK;
 800889e:	2000      	movs	r0, #0
 80088a0:	bd70      	pop	{r4, r5, r6, pc}
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80088a2:	68db      	ldr	r3, [r3, #12]
 80088a4:	b163      	cbz	r3, 80088c0 <tcp_bind+0x7c>
        if (cpcb->local_port == port) {
 80088a6:	8ad9      	ldrh	r1, [r3, #22]
 80088a8:	428a      	cmp	r2, r1
 80088aa:	d1fa      	bne.n	80088a2 <tcp_bind+0x5e>
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 80088ac:	b19b      	cbz	r3, 80088d6 <tcp_bind+0x92>
                (ip_addr_isany(&cpcb->local_ip) ||
 80088ae:	6819      	ldr	r1, [r3, #0]
 80088b0:	b1a1      	cbz	r1, 80088dc <tcp_bind+0x98>
                ip_addr_isany(ipaddr) ||
 80088b2:	6820      	ldr	r0, [r4, #0]
 80088b4:	b1a8      	cbz	r0, 80088e2 <tcp_bind+0x9e>
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 80088b6:	4281      	cmp	r1, r0
 80088b8:	d1f3      	bne.n	80088a2 <tcp_bind+0x5e>
              return ERR_USE;
 80088ba:	f06f 0007 	mvn.w	r0, #7
}
 80088be:	bd70      	pop	{r4, r5, r6, pc}
    for (i = 0; i < max_pcb_list; i++) {
 80088c0:	3601      	adds	r6, #1
 80088c2:	e7cb      	b.n	800885c <tcp_bind+0x18>
    return ERR_VAL;
 80088c4:	f06f 0005 	mvn.w	r0, #5
 80088c8:	bd70      	pop	{r4, r5, r6, pc}
 80088ca:	f06f 0005 	mvn.w	r0, #5
 80088ce:	bd70      	pop	{r4, r5, r6, pc}
      return ERR_BUF;
 80088d0:	f06f 0001 	mvn.w	r0, #1
 80088d4:	bd70      	pop	{r4, r5, r6, pc}
              return ERR_USE;
 80088d6:	f06f 0007 	mvn.w	r0, #7
 80088da:	bd70      	pop	{r4, r5, r6, pc}
 80088dc:	f06f 0007 	mvn.w	r0, #7
 80088e0:	bd70      	pop	{r4, r5, r6, pc}
 80088e2:	f06f 0007 	mvn.w	r0, #7
 80088e6:	bd70      	pop	{r4, r5, r6, pc}
 80088e8:	0800f3ec 	.word	0x0800f3ec
 80088ec:	0800e99c 	.word	0x0800e99c
 80088f0:	0800f374 	.word	0x0800f374
 80088f4:	0800f2f8 	.word	0x0800f2f8
 80088f8:	0800de34 	.word	0x0800de34
 80088fc:	20007990 	.word	0x20007990

08008900 <tcp_listen_with_backlog_and_err>:
{
 8008900:	b570      	push	{r4, r5, r6, lr}
 8008902:	4616      	mov	r6, r2
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8008904:	7d03      	ldrb	r3, [r0, #20]
 8008906:	bb23      	cbnz	r3, 8008952 <tcp_listen_with_backlog_and_err+0x52>
 8008908:	4604      	mov	r4, r0
  if (pcb->state == LISTEN) {
 800890a:	2b01      	cmp	r3, #1
 800890c:	d042      	beq.n	8008994 <tcp_listen_with_backlog_and_err+0x94>
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800890e:	2002      	movs	r0, #2
 8008910:	f7ff f9ec 	bl	8007cec <memp_malloc>
  if (lpcb == NULL) {
 8008914:	4605      	mov	r5, r0
 8008916:	2800      	cmp	r0, #0
 8008918:	d043      	beq.n	80089a2 <tcp_listen_with_backlog_and_err+0xa2>
  lpcb->callback_arg = pcb->callback_arg;
 800891a:	6923      	ldr	r3, [r4, #16]
 800891c:	6103      	str	r3, [r0, #16]
  lpcb->local_port = pcb->local_port;
 800891e:	8ae3      	ldrh	r3, [r4, #22]
 8008920:	82c3      	strh	r3, [r0, #22]
  lpcb->state = LISTEN;
 8008922:	2301      	movs	r3, #1
 8008924:	7503      	strb	r3, [r0, #20]
  lpcb->prio = pcb->prio;
 8008926:	7d63      	ldrb	r3, [r4, #21]
 8008928:	7543      	strb	r3, [r0, #21]
  lpcb->so_options = pcb->so_options;
 800892a:	7a23      	ldrb	r3, [r4, #8]
 800892c:	7203      	strb	r3, [r0, #8]
  lpcb->ttl = pcb->ttl;
 800892e:	7aa3      	ldrb	r3, [r4, #10]
 8008930:	7283      	strb	r3, [r0, #10]
  lpcb->tos = pcb->tos;
 8008932:	7a63      	ldrb	r3, [r4, #9]
 8008934:	7243      	strb	r3, [r0, #9]
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8008936:	6823      	ldr	r3, [r4, #0]
 8008938:	6003      	str	r3, [r0, #0]
  if (pcb->local_port != 0) {
 800893a:	8ae3      	ldrh	r3, [r4, #22]
 800893c:	b1e3      	cbz	r3, 8008978 <tcp_listen_with_backlog_and_err+0x78>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800893e:	4b1a      	ldr	r3, [pc, #104]	; (80089a8 <tcp_listen_with_backlog_and_err+0xa8>)
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	429c      	cmp	r4, r3
 8008944:	d010      	beq.n	8008968 <tcp_listen_with_backlog_and_err+0x68>
 8008946:	b1ab      	cbz	r3, 8008974 <tcp_listen_with_backlog_and_err+0x74>
 8008948:	68da      	ldr	r2, [r3, #12]
 800894a:	4294      	cmp	r4, r2
 800894c:	d010      	beq.n	8008970 <tcp_listen_with_backlog_and_err+0x70>
 800894e:	4613      	mov	r3, r2
 8008950:	e7f9      	b.n	8008946 <tcp_listen_with_backlog_and_err+0x46>
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8008952:	4b16      	ldr	r3, [pc, #88]	; (80089ac <tcp_listen_with_backlog_and_err+0xac>)
 8008954:	f44f 722d 	mov.w	r2, #692	; 0x2b4
 8008958:	4915      	ldr	r1, [pc, #84]	; (80089b0 <tcp_listen_with_backlog_and_err+0xb0>)
 800895a:	4816      	ldr	r0, [pc, #88]	; (80089b4 <tcp_listen_with_backlog_and_err+0xb4>)
 800895c:	f004 fe4d 	bl	800d5fa <iprintf>
 8008960:	f06f 030e 	mvn.w	r3, #14
  struct tcp_pcb_listen *lpcb = NULL;
 8008964:	2500      	movs	r5, #0
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8008966:	e018      	b.n	800899a <tcp_listen_with_backlog_and_err+0x9a>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8008968:	68da      	ldr	r2, [r3, #12]
 800896a:	4b0f      	ldr	r3, [pc, #60]	; (80089a8 <tcp_listen_with_backlog_and_err+0xa8>)
 800896c:	601a      	str	r2, [r3, #0]
 800896e:	e001      	b.n	8008974 <tcp_listen_with_backlog_and_err+0x74>
 8008970:	68e2      	ldr	r2, [r4, #12]
 8008972:	60da      	str	r2, [r3, #12]
 8008974:	2300      	movs	r3, #0
 8008976:	60e3      	str	r3, [r4, #12]
  memp_free(MEMP_TCP_PCB, pcb);
 8008978:	4621      	mov	r1, r4
 800897a:	2001      	movs	r0, #1
 800897c:	f7ff f9d0 	bl	8007d20 <memp_free>
  lpcb->accept = tcp_accept_null;
 8008980:	4b0d      	ldr	r3, [pc, #52]	; (80089b8 <tcp_listen_with_backlog_and_err+0xb8>)
 8008982:	61ab      	str	r3, [r5, #24]
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8008984:	4b0d      	ldr	r3, [pc, #52]	; (80089bc <tcp_listen_with_backlog_and_err+0xbc>)
 8008986:	681a      	ldr	r2, [r3, #0]
 8008988:	60ea      	str	r2, [r5, #12]
 800898a:	601d      	str	r5, [r3, #0]
 800898c:	f003 fb82 	bl	800c094 <tcp_timer_needed>
  res = ERR_OK;
 8008990:	2300      	movs	r3, #0
 8008992:	e002      	b.n	800899a <tcp_listen_with_backlog_and_err+0x9a>
    lpcb = (struct tcp_pcb_listen*)pcb;
 8008994:	4605      	mov	r5, r0
    res = ERR_ALREADY;
 8008996:	f06f 0308 	mvn.w	r3, #8
  if (err != NULL) {
 800899a:	b106      	cbz	r6, 800899e <tcp_listen_with_backlog_and_err+0x9e>
    *err = res;
 800899c:	7033      	strb	r3, [r6, #0]
}
 800899e:	4628      	mov	r0, r5
 80089a0:	bd70      	pop	{r4, r5, r6, pc}
    res = ERR_MEM;
 80089a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80089a6:	e7f8      	b.n	800899a <tcp_listen_with_backlog_and_err+0x9a>
 80089a8:	20007990 	.word	0x20007990
 80089ac:	0800f374 	.word	0x0800f374
 80089b0:	0800f3c8 	.word	0x0800f3c8
 80089b4:	0800de34 	.word	0x0800de34
 80089b8:	080094c7 	.word	0x080094c7
 80089bc:	2000798c 	.word	0x2000798c

080089c0 <tcp_update_rcv_ann_wnd>:
{
 80089c0:	b538      	push	{r3, r4, r5, lr}
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80089c2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80089c4:	8d04      	ldrh	r4, [r0, #40]	; 0x28
 80089c6:	192a      	adds	r2, r5, r4
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80089c8:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80089ca:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 80089cc:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 80089d0:	d901      	bls.n	80089d6 <tcp_update_rcv_ann_wnd+0x16>
 80089d2:	f44f 6386 	mov.w	r3, #1072	; 0x430
 80089d6:	440b      	add	r3, r1
 80089d8:	1ad3      	subs	r3, r2, r3
 80089da:	2b00      	cmp	r3, #0
 80089dc:	db02      	blt.n	80089e4 <tcp_update_rcv_ann_wnd+0x24>
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 80089de:	8544      	strh	r4, [r0, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 80089e0:	1a50      	subs	r0, r2, r1
 80089e2:	bd38      	pop	{r3, r4, r5, pc}
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80089e4:	1a6b      	subs	r3, r5, r1
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	dd03      	ble.n	80089f2 <tcp_update_rcv_ann_wnd+0x32>
      pcb->rcv_ann_wnd = 0;
 80089ea:	2200      	movs	r2, #0
 80089ec:	8542      	strh	r2, [r0, #42]	; 0x2a
    return 0;
 80089ee:	4610      	mov	r0, r2
 80089f0:	bd38      	pop	{r3, r4, r5, pc}
 80089f2:	4604      	mov	r4, r0
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80089f4:	1b4d      	subs	r5, r1, r5
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80089f6:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 80089fa:	d202      	bcs.n	8008a02 <tcp_update_rcv_ann_wnd+0x42>
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80089fc:	8565      	strh	r5, [r4, #42]	; 0x2a
    return 0;
 80089fe:	2000      	movs	r0, #0
}
 8008a00:	bd38      	pop	{r3, r4, r5, pc}
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8008a02:	4b04      	ldr	r3, [pc, #16]	; (8008a14 <tcp_update_rcv_ann_wnd+0x54>)
 8008a04:	f44f 7242 	mov.w	r2, #776	; 0x308
 8008a08:	4903      	ldr	r1, [pc, #12]	; (8008a18 <tcp_update_rcv_ann_wnd+0x58>)
 8008a0a:	4804      	ldr	r0, [pc, #16]	; (8008a1c <tcp_update_rcv_ann_wnd+0x5c>)
 8008a0c:	f004 fdf5 	bl	800d5fa <iprintf>
 8008a10:	e7f4      	b.n	80089fc <tcp_update_rcv_ann_wnd+0x3c>
 8008a12:	bf00      	nop
 8008a14:	0800f374 	.word	0x0800f374
 8008a18:	0800f66c 	.word	0x0800f66c
 8008a1c:	0800de34 	.word	0x0800de34

08008a20 <tcp_recved>:
{
 8008a20:	b538      	push	{r3, r4, r5, lr}
 8008a22:	4605      	mov	r5, r0
 8008a24:	460c      	mov	r4, r1
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8008a26:	7d03      	ldrb	r3, [r0, #20]
 8008a28:	2b01      	cmp	r3, #1
 8008a2a:	d010      	beq.n	8008a4e <tcp_recved+0x2e>
  pcb->rcv_wnd += len;
 8008a2c:	8d29      	ldrh	r1, [r5, #40]	; 0x28
 8008a2e:	4421      	add	r1, r4
 8008a30:	b289      	uxth	r1, r1
 8008a32:	8529      	strh	r1, [r5, #40]	; 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 8008a34:	f5b1 6f06 	cmp.w	r1, #2144	; 0x860
 8008a38:	d911      	bls.n	8008a5e <tcp_recved+0x3e>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8008a3a:	f44f 6306 	mov.w	r3, #2144	; 0x860
 8008a3e:	852b      	strh	r3, [r5, #40]	; 0x28
  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8008a40:	4628      	mov	r0, r5
 8008a42:	f7ff ffbd 	bl	80089c0 <tcp_update_rcv_ann_wnd>
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8008a46:	f5b0 7f06 	cmp.w	r0, #536	; 0x218
 8008a4a:	da1b      	bge.n	8008a84 <tcp_recved+0x64>
 8008a4c:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8008a4e:	4b11      	ldr	r3, [pc, #68]	; (8008a94 <tcp_recved+0x74>)
 8008a50:	f44f 7248 	mov.w	r2, #800	; 0x320
 8008a54:	4910      	ldr	r1, [pc, #64]	; (8008a98 <tcp_recved+0x78>)
 8008a56:	4811      	ldr	r0, [pc, #68]	; (8008a9c <tcp_recved+0x7c>)
 8008a58:	f004 fdcf 	bl	800d5fa <iprintf>
 8008a5c:	e7e6      	b.n	8008a2c <tcp_recved+0xc>
  } else if (pcb->rcv_wnd == 0) {
 8008a5e:	2900      	cmp	r1, #0
 8008a60:	d1ee      	bne.n	8008a40 <tcp_recved+0x20>
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 8008a62:	7d2b      	ldrb	r3, [r5, #20]
 8008a64:	2b07      	cmp	r3, #7
 8008a66:	d009      	beq.n	8008a7c <tcp_recved+0x5c>
 8008a68:	2b09      	cmp	r3, #9
 8008a6a:	d007      	beq.n	8008a7c <tcp_recved+0x5c>
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 8008a6c:	4b09      	ldr	r3, [pc, #36]	; (8008a94 <tcp_recved+0x74>)
 8008a6e:	f240 322d 	movw	r2, #813	; 0x32d
 8008a72:	490b      	ldr	r1, [pc, #44]	; (8008aa0 <tcp_recved+0x80>)
 8008a74:	4809      	ldr	r0, [pc, #36]	; (8008a9c <tcp_recved+0x7c>)
 8008a76:	f004 fdc0 	bl	800d5fa <iprintf>
 8008a7a:	e7e1      	b.n	8008a40 <tcp_recved+0x20>
      pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8008a7c:	f44f 6306 	mov.w	r3, #2144	; 0x860
 8008a80:	852b      	strh	r3, [r5, #40]	; 0x28
 8008a82:	e7dd      	b.n	8008a40 <tcp_recved+0x20>
    tcp_ack_now(pcb);
 8008a84:	7eab      	ldrb	r3, [r5, #26]
 8008a86:	f043 0302 	orr.w	r3, r3, #2
 8008a8a:	76ab      	strb	r3, [r5, #26]
    tcp_output(pcb);
 8008a8c:	4628      	mov	r0, r5
 8008a8e:	f002 ff97 	bl	800b9c0 <tcp_output>
}
 8008a92:	e7db      	b.n	8008a4c <tcp_recved+0x2c>
 8008a94:	0800f374 	.word	0x0800f374
 8008a98:	0800f498 	.word	0x0800f498
 8008a9c:	0800de34 	.word	0x0800de34
 8008aa0:	0800f4c0 	.word	0x0800f4c0

08008aa4 <tcp_seg_free>:
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
  if (seg != NULL) {
 8008aa4:	b150      	cbz	r0, 8008abc <tcp_seg_free+0x18>
{
 8008aa6:	b510      	push	{r4, lr}
 8008aa8:	4604      	mov	r4, r0
    if (seg->p != NULL) {
 8008aaa:	6840      	ldr	r0, [r0, #4]
 8008aac:	b108      	cbz	r0, 8008ab2 <tcp_seg_free+0xe>
      pbuf_free(seg->p);
 8008aae:	f7ff fb0d 	bl	80080cc <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8008ab2:	4621      	mov	r1, r4
 8008ab4:	2003      	movs	r0, #3
 8008ab6:	f7ff f933 	bl	8007d20 <memp_free>
 8008aba:	bd10      	pop	{r4, pc}
 8008abc:	4770      	bx	lr

08008abe <tcp_segs_free>:
  while (seg != NULL) {
 8008abe:	b138      	cbz	r0, 8008ad0 <tcp_segs_free+0x12>
{
 8008ac0:	b510      	push	{r4, lr}
    struct tcp_seg *next = seg->next;
 8008ac2:	6804      	ldr	r4, [r0, #0]
    tcp_seg_free(seg);
 8008ac4:	f7ff ffee 	bl	8008aa4 <tcp_seg_free>
    seg = next;
 8008ac8:	4620      	mov	r0, r4
  while (seg != NULL) {
 8008aca:	2c00      	cmp	r4, #0
 8008acc:	d1f9      	bne.n	8008ac2 <tcp_segs_free+0x4>
}
 8008ace:	bd10      	pop	{r4, pc}
 8008ad0:	4770      	bx	lr

08008ad2 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8008ad2:	b538      	push	{r3, r4, r5, lr}
 8008ad4:	4605      	mov	r5, r0
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8008ad6:	2003      	movs	r0, #3
 8008ad8:	f7ff f908 	bl	8007cec <memp_malloc>
  if (cseg == NULL) {
 8008adc:	4604      	mov	r4, r0
 8008ade:	b150      	cbz	r0, 8008af6 <tcp_seg_copy+0x24>
    return NULL;
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8008ae0:	6828      	ldr	r0, [r5, #0]
 8008ae2:	6869      	ldr	r1, [r5, #4]
 8008ae4:	68aa      	ldr	r2, [r5, #8]
 8008ae6:	68eb      	ldr	r3, [r5, #12]
 8008ae8:	6020      	str	r0, [r4, #0]
 8008aea:	6061      	str	r1, [r4, #4]
 8008aec:	60a2      	str	r2, [r4, #8]
 8008aee:	60e3      	str	r3, [r4, #12]
  pbuf_ref(cseg->p);
 8008af0:	6860      	ldr	r0, [r4, #4]
 8008af2:	f7ff fcbb 	bl	800846c <pbuf_ref>
  return cseg;
}
 8008af6:	4620      	mov	r0, r4
 8008af8:	bd38      	pop	{r3, r4, r5, pc}

08008afa <tcp_arg>:
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8008afa:	b100      	cbz	r0, 8008afe <tcp_arg+0x4>
    pcb->callback_arg = arg;
 8008afc:	6101      	str	r1, [r0, #16]
 8008afe:	4770      	bx	lr

08008b00 <tcp_recv>:
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
  if (pcb != NULL) {
 8008b00:	b180      	cbz	r0, 8008b24 <tcp_recv+0x24>
{
 8008b02:	b538      	push	{r3, r4, r5, lr}
 8008b04:	4604      	mov	r4, r0
 8008b06:	460d      	mov	r5, r1
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8008b08:	7d03      	ldrb	r3, [r0, #20]
 8008b0a:	2b01      	cmp	r3, #1
 8008b0c:	d002      	beq.n	8008b14 <tcp_recv+0x14>
    pcb->recv = recv;
 8008b0e:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
 8008b12:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8008b14:	4b04      	ldr	r3, [pc, #16]	; (8008b28 <tcp_recv+0x28>)
 8008b16:	f240 62bb 	movw	r2, #1723	; 0x6bb
 8008b1a:	4904      	ldr	r1, [pc, #16]	; (8008b2c <tcp_recv+0x2c>)
 8008b1c:	4804      	ldr	r0, [pc, #16]	; (8008b30 <tcp_recv+0x30>)
 8008b1e:	f004 fd6c 	bl	800d5fa <iprintf>
 8008b22:	e7f4      	b.n	8008b0e <tcp_recv+0xe>
 8008b24:	4770      	bx	lr
 8008b26:	bf00      	nop
 8008b28:	0800f374 	.word	0x0800f374
 8008b2c:	0800f470 	.word	0x0800f470
 8008b30:	0800de34 	.word	0x0800de34

08008b34 <tcp_sent>:
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
  if (pcb != NULL) {
 8008b34:	b178      	cbz	r0, 8008b56 <tcp_sent+0x22>
{
 8008b36:	b538      	push	{r3, r4, r5, lr}
 8008b38:	4604      	mov	r4, r0
 8008b3a:	460d      	mov	r5, r1
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8008b3c:	7d03      	ldrb	r3, [r0, #20]
 8008b3e:	2b01      	cmp	r3, #1
 8008b40:	d001      	beq.n	8008b46 <tcp_sent+0x12>
    pcb->sent = sent;
 8008b42:	67e5      	str	r5, [r4, #124]	; 0x7c
 8008b44:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8008b46:	4b04      	ldr	r3, [pc, #16]	; (8008b58 <tcp_sent+0x24>)
 8008b48:	f240 62cc 	movw	r2, #1740	; 0x6cc
 8008b4c:	4903      	ldr	r1, [pc, #12]	; (8008b5c <tcp_sent+0x28>)
 8008b4e:	4804      	ldr	r0, [pc, #16]	; (8008b60 <tcp_sent+0x2c>)
 8008b50:	f004 fd53 	bl	800d5fa <iprintf>
 8008b54:	e7f5      	b.n	8008b42 <tcp_sent+0xe>
 8008b56:	4770      	bx	lr
 8008b58:	0800f374 	.word	0x0800f374
 8008b5c:	0800f4e4 	.word	0x0800f4e4
 8008b60:	0800de34 	.word	0x0800de34

08008b64 <tcp_err>:
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
  if (pcb != NULL) {
 8008b64:	b180      	cbz	r0, 8008b88 <tcp_err+0x24>
{
 8008b66:	b538      	push	{r3, r4, r5, lr}
 8008b68:	4604      	mov	r4, r0
 8008b6a:	460d      	mov	r5, r1
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8008b6c:	7d03      	ldrb	r3, [r0, #20]
 8008b6e:	2b01      	cmp	r3, #1
 8008b70:	d002      	beq.n	8008b78 <tcp_err+0x14>
    pcb->errf = err;
 8008b72:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
 8008b76:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8008b78:	4b04      	ldr	r3, [pc, #16]	; (8008b8c <tcp_err+0x28>)
 8008b7a:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8008b7e:	4904      	ldr	r1, [pc, #16]	; (8008b90 <tcp_err+0x2c>)
 8008b80:	4804      	ldr	r0, [pc, #16]	; (8008b94 <tcp_err+0x30>)
 8008b82:	f004 fd3a 	bl	800d5fa <iprintf>
 8008b86:	e7f4      	b.n	8008b72 <tcp_err+0xe>
 8008b88:	4770      	bx	lr
 8008b8a:	bf00      	nop
 8008b8c:	0800f374 	.word	0x0800f374
 8008b90:	0800f33c 	.word	0x0800f33c
 8008b94:	0800de34 	.word	0x0800de34

08008b98 <tcp_accept>:
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8008b98:	b110      	cbz	r0, 8008ba0 <tcp_accept+0x8>
 8008b9a:	7d02      	ldrb	r2, [r0, #20]
 8008b9c:	2a01      	cmp	r2, #1
 8008b9e:	d000      	beq.n	8008ba2 <tcp_accept+0xa>
 8008ba0:	4770      	bx	lr
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen*)pcb;
    lpcb->accept = accept;
 8008ba2:	6181      	str	r1, [r0, #24]
  }
}
 8008ba4:	e7fc      	b.n	8008ba0 <tcp_accept+0x8>
	...

08008ba8 <tcp_poll>:
 * timer interval, which is called twice a second.
 *
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8008ba8:	b570      	push	{r4, r5, r6, lr}
 8008baa:	4604      	mov	r4, r0
 8008bac:	460e      	mov	r6, r1
 8008bae:	4615      	mov	r5, r2
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8008bb0:	7d03      	ldrb	r3, [r0, #20]
 8008bb2:	2b01      	cmp	r3, #1
 8008bb4:	d003      	beq.n	8008bbe <tcp_poll+0x16>
#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8008bb6:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8008bba:	7725      	strb	r5, [r4, #28]
 8008bbc:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8008bbe:	4b04      	ldr	r3, [pc, #16]	; (8008bd0 <tcp_poll+0x28>)
 8008bc0:	f240 7203 	movw	r2, #1795	; 0x703
 8008bc4:	4903      	ldr	r1, [pc, #12]	; (8008bd4 <tcp_poll+0x2c>)
 8008bc6:	4804      	ldr	r0, [pc, #16]	; (8008bd8 <tcp_poll+0x30>)
 8008bc8:	f004 fd17 	bl	800d5fa <iprintf>
 8008bcc:	e7f3      	b.n	8008bb6 <tcp_poll+0xe>
 8008bce:	bf00      	nop
 8008bd0:	0800f374 	.word	0x0800f374
 8008bd4:	0800f450 	.word	0x0800f450
 8008bd8:	0800de34 	.word	0x0800de34

08008bdc <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8008bdc:	b538      	push	{r3, r4, r5, lr}
  if (pcb->state != CLOSED &&
 8008bde:	7d03      	ldrb	r3, [r0, #20]
 8008be0:	b1e3      	cbz	r3, 8008c1c <tcp_pcb_purge+0x40>
 8008be2:	2b0a      	cmp	r3, #10
 8008be4:	d01a      	beq.n	8008c1c <tcp_pcb_purge+0x40>
     pcb->state != TIME_WAIT &&
 8008be6:	2b01      	cmp	r3, #1
 8008be8:	d018      	beq.n	8008c1c <tcp_pcb_purge+0x40>
 8008bea:	4604      	mov	r4, r0

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8008bec:	6f40      	ldr	r0, [r0, #116]	; 0x74
 8008bee:	b118      	cbz	r0, 8008bf8 <tcp_pcb_purge+0x1c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8008bf0:	f7ff fa6c 	bl	80080cc <pbuf_free>
      pcb->refused_data = NULL;
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	6763      	str	r3, [r4, #116]	; 0x74
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 8008bf8:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8008bfa:	f7ff ff60 	bl	8008abe <tcp_segs_free>
    pcb->ooseq = NULL;
 8008bfe:	2500      	movs	r5, #0
 8008c00:	6725      	str	r5, [r4, #112]	; 0x70
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8008c02:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008c06:	8623      	strh	r3, [r4, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8008c08:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8008c0a:	f7ff ff58 	bl	8008abe <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8008c0e:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8008c10:	f7ff ff55 	bl	8008abe <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8008c14:	66a5      	str	r5, [r4, #104]	; 0x68
 8008c16:	66e5      	str	r5, [r4, #108]	; 0x6c
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8008c18:	f8a4 5064 	strh.w	r5, [r4, #100]	; 0x64
 8008c1c:	bd38      	pop	{r3, r4, r5, pc}
	...

08008c20 <tcp_slowtmr>:
{
 8008c20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c24:	b082      	sub	sp, #8
  ++tcp_ticks;
 8008c26:	4aae      	ldr	r2, [pc, #696]	; (8008ee0 <tcp_slowtmr+0x2c0>)
 8008c28:	6813      	ldr	r3, [r2, #0]
 8008c2a:	3301      	adds	r3, #1
 8008c2c:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8008c2e:	4aad      	ldr	r2, [pc, #692]	; (8008ee4 <tcp_slowtmr+0x2c4>)
 8008c30:	7813      	ldrb	r3, [r2, #0]
 8008c32:	3301      	adds	r3, #1
 8008c34:	7013      	strb	r3, [r2, #0]
  pcb = tcp_active_pcbs;
 8008c36:	4bac      	ldr	r3, [pc, #688]	; (8008ee8 <tcp_slowtmr+0x2c8>)
 8008c38:	681c      	ldr	r4, [r3, #0]
  prev = NULL;
 8008c3a:	2600      	movs	r6, #0
  while (pcb != NULL) {
 8008c3c:	e018      	b.n	8008c70 <tcp_slowtmr+0x50>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8008c3e:	4bab      	ldr	r3, [pc, #684]	; (8008eec <tcp_slowtmr+0x2cc>)
 8008c40:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 8008c44:	49aa      	ldr	r1, [pc, #680]	; (8008ef0 <tcp_slowtmr+0x2d0>)
 8008c46:	48ab      	ldr	r0, [pc, #684]	; (8008ef4 <tcp_slowtmr+0x2d4>)
 8008c48:	f004 fcd7 	bl	800d5fa <iprintf>
 8008c4c:	e016      	b.n	8008c7c <tcp_slowtmr+0x5c>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8008c4e:	4ba7      	ldr	r3, [pc, #668]	; (8008eec <tcp_slowtmr+0x2cc>)
 8008c50:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8008c54:	49a8      	ldr	r1, [pc, #672]	; (8008ef8 <tcp_slowtmr+0x2d8>)
 8008c56:	48a7      	ldr	r0, [pc, #668]	; (8008ef4 <tcp_slowtmr+0x2d4>)
 8008c58:	f004 fccf 	bl	800d5fa <iprintf>
 8008c5c:	e011      	b.n	8008c82 <tcp_slowtmr+0x62>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8008c5e:	4ba3      	ldr	r3, [pc, #652]	; (8008eec <tcp_slowtmr+0x2cc>)
 8008c60:	f240 32f2 	movw	r2, #1010	; 0x3f2
 8008c64:	49a5      	ldr	r1, [pc, #660]	; (8008efc <tcp_slowtmr+0x2dc>)
 8008c66:	48a3      	ldr	r0, [pc, #652]	; (8008ef4 <tcp_slowtmr+0x2d4>)
 8008c68:	f004 fcc7 	bl	800d5fa <iprintf>
 8008c6c:	e00c      	b.n	8008c88 <tcp_slowtmr+0x68>
      pcb = pcb->next;
 8008c6e:	68e4      	ldr	r4, [r4, #12]
  while (pcb != NULL) {
 8008c70:	2c00      	cmp	r4, #0
 8008c72:	f000 817c 	beq.w	8008f6e <tcp_slowtmr+0x34e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8008c76:	7d23      	ldrb	r3, [r4, #20]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d0e0      	beq.n	8008c3e <tcp_slowtmr+0x1e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8008c7c:	7d23      	ldrb	r3, [r4, #20]
 8008c7e:	2b01      	cmp	r3, #1
 8008c80:	d0e5      	beq.n	8008c4e <tcp_slowtmr+0x2e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8008c82:	7d23      	ldrb	r3, [r4, #20]
 8008c84:	2b0a      	cmp	r3, #10
 8008c86:	d0ea      	beq.n	8008c5e <tcp_slowtmr+0x3e>
    if (pcb->last_timer == tcp_timer_ctr) {
 8008c88:	7f62      	ldrb	r2, [r4, #29]
 8008c8a:	4b96      	ldr	r3, [pc, #600]	; (8008ee4 <tcp_slowtmr+0x2c4>)
 8008c8c:	781b      	ldrb	r3, [r3, #0]
 8008c8e:	429a      	cmp	r2, r3
 8008c90:	d0ed      	beq.n	8008c6e <tcp_slowtmr+0x4e>
    pcb->last_timer = tcp_timer_ctr;
 8008c92:	7763      	strb	r3, [r4, #29]
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8008c94:	7d23      	ldrb	r3, [r4, #20]
 8008c96:	2b02      	cmp	r3, #2
 8008c98:	d016      	beq.n	8008cc8 <tcp_slowtmr+0xa8>
    else if (pcb->nrtx >= TCP_MAXRTX) {
 8008c9a:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 8008c9e:	2a0b      	cmp	r2, #11
 8008ca0:	d860      	bhi.n	8008d64 <tcp_slowtmr+0x144>
      if (pcb->persist_backoff > 0) {
 8008ca2:	f894 5095 	ldrb.w	r5, [r4, #149]	; 0x95
 8008ca6:	b335      	cbz	r5, 8008cf6 <tcp_slowtmr+0xd6>
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 8008ca8:	3d01      	subs	r5, #1
 8008caa:	4b95      	ldr	r3, [pc, #596]	; (8008f00 <tcp_slowtmr+0x2e0>)
 8008cac:	5d5a      	ldrb	r2, [r3, r5]
        if (pcb->persist_cnt < backoff_cnt) {
 8008cae:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
 8008cb2:	429a      	cmp	r2, r3
 8008cb4:	d902      	bls.n	8008cbc <tcp_slowtmr+0x9c>
          pcb->persist_cnt++;
 8008cb6:	3301      	adds	r3, #1
 8008cb8:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
        if (pcb->persist_cnt >= backoff_cnt) {
 8008cbc:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
 8008cc0:	429a      	cmp	r2, r3
 8008cc2:	d907      	bls.n	8008cd4 <tcp_slowtmr+0xb4>
    pcb_remove = 0;
 8008cc4:	2500      	movs	r5, #0
 8008cc6:	e04e      	b.n	8008d66 <tcp_slowtmr+0x146>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8008cc8:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 8008ccc:	2a05      	cmp	r2, #5
 8008cce:	d9e4      	bls.n	8008c9a <tcp_slowtmr+0x7a>
      ++pcb_remove;
 8008cd0:	2501      	movs	r5, #1
 8008cd2:	e048      	b.n	8008d66 <tcp_slowtmr+0x146>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 8008cd4:	4620      	mov	r0, r4
 8008cd6:	f003 f8c2 	bl	800be5e <tcp_zero_window_probe>
 8008cda:	2800      	cmp	r0, #0
 8008cdc:	d150      	bne.n	8008d80 <tcp_slowtmr+0x160>
            pcb->persist_cnt = 0;
 8008cde:	2300      	movs	r3, #0
 8008ce0:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8008ce4:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 8008ce8:	2b06      	cmp	r3, #6
 8008cea:	d84b      	bhi.n	8008d84 <tcp_slowtmr+0x164>
              pcb->persist_backoff++;
 8008cec:	3301      	adds	r3, #1
 8008cee:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
    pcb_remove = 0;
 8008cf2:	2500      	movs	r5, #0
 8008cf4:	e037      	b.n	8008d66 <tcp_slowtmr+0x146>
        if (pcb->rtime >= 0) {
 8008cf6:	f9b4 1030 	ldrsh.w	r1, [r4, #48]	; 0x30
 8008cfa:	2900      	cmp	r1, #0
 8008cfc:	db01      	blt.n	8008d02 <tcp_slowtmr+0xe2>
          ++pcb->rtime;
 8008cfe:	3101      	adds	r1, #1
 8008d00:	8621      	strh	r1, [r4, #48]	; 0x30
        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 8008d02:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8008d04:	b379      	cbz	r1, 8008d66 <tcp_slowtmr+0x146>
 8008d06:	f9b4 0030 	ldrsh.w	r0, [r4, #48]	; 0x30
 8008d0a:	f9b4 1040 	ldrsh.w	r1, [r4, #64]	; 0x40
 8008d0e:	4288      	cmp	r0, r1
 8008d10:	db29      	blt.n	8008d66 <tcp_slowtmr+0x146>
          if (pcb->state != SYN_SENT) {
 8008d12:	2b02      	cmp	r3, #2
 8008d14:	d00d      	beq.n	8008d32 <tcp_slowtmr+0x112>
            u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff)-1);
 8008d16:	2a0c      	cmp	r2, #12
 8008d18:	bf28      	it	cs
 8008d1a:	220c      	movcs	r2, #12
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8008d1c:	f9b4 103c 	ldrsh.w	r1, [r4, #60]	; 0x3c
 8008d20:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	; 0x3e
 8008d24:	eb03 03e1 	add.w	r3, r3, r1, asr #3
 8008d28:	4976      	ldr	r1, [pc, #472]	; (8008f04 <tcp_slowtmr+0x2e4>)
 8008d2a:	5c8a      	ldrb	r2, [r1, r2]
 8008d2c:	4093      	lsls	r3, r2
 8008d2e:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
          pcb->rtime = 0;
 8008d32:	2300      	movs	r3, #0
 8008d34:	8623      	strh	r3, [r4, #48]	; 0x30
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8008d36:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
 8008d3a:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 8008d3e:	4293      	cmp	r3, r2
 8008d40:	bf28      	it	cs
 8008d42:	4613      	movcs	r3, r2
          pcb->ssthresh = eff_wnd >> 1;
 8008d44:	085b      	lsrs	r3, r3, #1
 8008d46:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8008d4a:	8e61      	ldrh	r1, [r4, #50]	; 0x32
 8008d4c:	004a      	lsls	r2, r1, #1
 8008d4e:	b292      	uxth	r2, r2
 8008d50:	4293      	cmp	r3, r2
 8008d52:	d201      	bcs.n	8008d58 <tcp_slowtmr+0x138>
            pcb->ssthresh = (pcb->mss << 1);
 8008d54:	f8a4 204a 	strh.w	r2, [r4, #74]	; 0x4a
          pcb->cwnd = pcb->mss;
 8008d58:	f8a4 1048 	strh.w	r1, [r4, #72]	; 0x48
          tcp_rexmit_rto(pcb);
 8008d5c:	4620      	mov	r0, r4
 8008d5e:	f002 ffe1 	bl	800bd24 <tcp_rexmit_rto>
 8008d62:	e000      	b.n	8008d66 <tcp_slowtmr+0x146>
      ++pcb_remove;
 8008d64:	2501      	movs	r5, #1
    if (pcb->state == FIN_WAIT_2) {
 8008d66:	7d23      	ldrb	r3, [r4, #20]
 8008d68:	2b06      	cmp	r3, #6
 8008d6a:	d00d      	beq.n	8008d88 <tcp_slowtmr+0x168>
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8008d6c:	7a22      	ldrb	r2, [r4, #8]
 8008d6e:	f012 0f08 	tst.w	r2, #8
 8008d72:	d043      	beq.n	8008dfc <tcp_slowtmr+0x1dc>
 8008d74:	2b04      	cmp	r3, #4
 8008d76:	d014      	beq.n	8008da2 <tcp_slowtmr+0x182>
       ((pcb->state == ESTABLISHED) ||
 8008d78:	2b07      	cmp	r3, #7
 8008d7a:	d012      	beq.n	8008da2 <tcp_slowtmr+0x182>
    pcb_reset = 0;
 8008d7c:	2700      	movs	r7, #0
 8008d7e:	e03e      	b.n	8008dfe <tcp_slowtmr+0x1de>
    pcb_remove = 0;
 8008d80:	2500      	movs	r5, #0
 8008d82:	e7f0      	b.n	8008d66 <tcp_slowtmr+0x146>
 8008d84:	2500      	movs	r5, #0
 8008d86:	e7ee      	b.n	8008d66 <tcp_slowtmr+0x146>
      if (pcb->flags & TF_RXCLOSED) {
 8008d88:	7ea2      	ldrb	r2, [r4, #26]
 8008d8a:	f012 0f10 	tst.w	r2, #16
 8008d8e:	d0ed      	beq.n	8008d6c <tcp_slowtmr+0x14c>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008d90:	6a21      	ldr	r1, [r4, #32]
 8008d92:	4a53      	ldr	r2, [pc, #332]	; (8008ee0 <tcp_slowtmr+0x2c0>)
 8008d94:	6812      	ldr	r2, [r2, #0]
 8008d96:	1a52      	subs	r2, r2, r1
 8008d98:	2a28      	cmp	r2, #40	; 0x28
 8008d9a:	d9e7      	bls.n	8008d6c <tcp_slowtmr+0x14c>
          ++pcb_remove;
 8008d9c:	3501      	adds	r5, #1
 8008d9e:	b2ed      	uxtb	r5, r5
 8008da0:	e7e4      	b.n	8008d6c <tcp_slowtmr+0x14c>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008da2:	4b4f      	ldr	r3, [pc, #316]	; (8008ee0 <tcp_slowtmr+0x2c0>)
 8008da4:	681a      	ldr	r2, [r3, #0]
 8008da6:	6a23      	ldr	r3, [r4, #32]
 8008da8:	1ad2      	subs	r2, r2, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 8008daa:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 8008dae:	f501 2324 	add.w	r3, r1, #671744	; 0xa4000
 8008db2:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8008db6:	4854      	ldr	r0, [pc, #336]	; (8008f08 <tcp_slowtmr+0x2e8>)
 8008db8:	fba0 0303 	umull	r0, r3, r0, r3
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008dbc:	ebb2 1f53 	cmp.w	r2, r3, lsr #5
 8008dc0:	d903      	bls.n	8008dca <tcp_slowtmr+0x1aa>
        ++pcb_remove;
 8008dc2:	3501      	adds	r5, #1
 8008dc4:	b2ed      	uxtb	r5, r5
        ++pcb_reset;
 8008dc6:	2701      	movs	r7, #1
 8008dc8:	e019      	b.n	8008dfe <tcp_slowtmr+0x1de>
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8008dca:	f894 3096 	ldrb.w	r3, [r4, #150]	; 0x96
 8008dce:	484f      	ldr	r0, [pc, #316]	; (8008f0c <tcp_slowtmr+0x2ec>)
 8008dd0:	fb00 1303 	mla	r3, r0, r3, r1
                / TCP_SLOW_INTERVAL)
 8008dd4:	494c      	ldr	r1, [pc, #304]	; (8008f08 <tcp_slowtmr+0x2e8>)
 8008dd6:	fba1 1303 	umull	r1, r3, r1, r3
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008dda:	ebb2 1f53 	cmp.w	r2, r3, lsr #5
 8008dde:	d801      	bhi.n	8008de4 <tcp_slowtmr+0x1c4>
    pcb_reset = 0;
 8008de0:	2700      	movs	r7, #0
 8008de2:	e00c      	b.n	8008dfe <tcp_slowtmr+0x1de>
        err = tcp_keepalive(pcb);
 8008de4:	4620      	mov	r0, r4
 8008de6:	f003 f80e 	bl	800be06 <tcp_keepalive>
        if (err == ERR_OK) {
 8008dea:	2800      	cmp	r0, #0
 8008dec:	d13a      	bne.n	8008e64 <tcp_slowtmr+0x244>
          pcb->keep_cnt_sent++;
 8008dee:	f894 3096 	ldrb.w	r3, [r4, #150]	; 0x96
 8008df2:	3301      	adds	r3, #1
 8008df4:	f884 3096 	strb.w	r3, [r4, #150]	; 0x96
    pcb_reset = 0;
 8008df8:	2700      	movs	r7, #0
 8008dfa:	e000      	b.n	8008dfe <tcp_slowtmr+0x1de>
 8008dfc:	2700      	movs	r7, #0
    if (pcb->ooseq != NULL &&
 8008dfe:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8008e00:	b150      	cbz	r0, 8008e18 <tcp_slowtmr+0x1f8>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 8008e02:	4b37      	ldr	r3, [pc, #220]	; (8008ee0 <tcp_slowtmr+0x2c0>)
 8008e04:	681a      	ldr	r2, [r3, #0]
 8008e06:	6a23      	ldr	r3, [r4, #32]
 8008e08:	1ad2      	subs	r2, r2, r3
 8008e0a:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 8008e0e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8008e12:	0059      	lsls	r1, r3, #1
    if (pcb->ooseq != NULL &&
 8008e14:	428a      	cmp	r2, r1
 8008e16:	d227      	bcs.n	8008e68 <tcp_slowtmr+0x248>
    if (pcb->state == SYN_RCVD) {
 8008e18:	7d23      	ldrb	r3, [r4, #20]
 8008e1a:	2b03      	cmp	r3, #3
 8008e1c:	d029      	beq.n	8008e72 <tcp_slowtmr+0x252>
    if (pcb->state == LAST_ACK) {
 8008e1e:	2b09      	cmp	r3, #9
 8008e20:	d030      	beq.n	8008e84 <tcp_slowtmr+0x264>
    if (pcb_remove) {
 8008e22:	2d00      	cmp	r5, #0
 8008e24:	d137      	bne.n	8008e96 <tcp_slowtmr+0x276>
      pcb = pcb->next;
 8008e26:	68e5      	ldr	r5, [r4, #12]
      ++prev->polltmr;
 8008e28:	7ee3      	ldrb	r3, [r4, #27]
 8008e2a:	3301      	adds	r3, #1
 8008e2c:	b2db      	uxtb	r3, r3
 8008e2e:	76e3      	strb	r3, [r4, #27]
      if (prev->polltmr >= prev->pollinterval) {
 8008e30:	7f22      	ldrb	r2, [r4, #28]
 8008e32:	4293      	cmp	r3, r2
 8008e34:	f0c0 8098 	bcc.w	8008f68 <tcp_slowtmr+0x348>
        prev->polltmr = 0;
 8008e38:	2300      	movs	r3, #0
 8008e3a:	76e3      	strb	r3, [r4, #27]
        tcp_active_pcbs_changed = 0;
 8008e3c:	4a34      	ldr	r2, [pc, #208]	; (8008f10 <tcp_slowtmr+0x2f0>)
 8008e3e:	7013      	strb	r3, [r2, #0]
        TCP_EVENT_POLL(prev, err);
 8008e40:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	f000 8087 	beq.w	8008f58 <tcp_slowtmr+0x338>
 8008e4a:	4621      	mov	r1, r4
 8008e4c:	6920      	ldr	r0, [r4, #16]
 8008e4e:	4798      	blx	r3
        if (tcp_active_pcbs_changed) {
 8008e50:	4b2f      	ldr	r3, [pc, #188]	; (8008f10 <tcp_slowtmr+0x2f0>)
 8008e52:	781b      	ldrb	r3, [r3, #0]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	f47f aeee 	bne.w	8008c36 <tcp_slowtmr+0x16>
        if (err == ERR_OK) {
 8008e5a:	2800      	cmp	r0, #0
 8008e5c:	d07e      	beq.n	8008f5c <tcp_slowtmr+0x33c>
      prev = pcb;
 8008e5e:	4626      	mov	r6, r4
      pcb = pcb->next;
 8008e60:	462c      	mov	r4, r5
 8008e62:	e705      	b.n	8008c70 <tcp_slowtmr+0x50>
    pcb_reset = 0;
 8008e64:	2700      	movs	r7, #0
 8008e66:	e7ca      	b.n	8008dfe <tcp_slowtmr+0x1de>
      tcp_segs_free(pcb->ooseq);
 8008e68:	f7ff fe29 	bl	8008abe <tcp_segs_free>
      pcb->ooseq = NULL;
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	6723      	str	r3, [r4, #112]	; 0x70
 8008e70:	e7d2      	b.n	8008e18 <tcp_slowtmr+0x1f8>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008e72:	6a21      	ldr	r1, [r4, #32]
 8008e74:	4a1a      	ldr	r2, [pc, #104]	; (8008ee0 <tcp_slowtmr+0x2c0>)
 8008e76:	6812      	ldr	r2, [r2, #0]
 8008e78:	1a52      	subs	r2, r2, r1
 8008e7a:	2a28      	cmp	r2, #40	; 0x28
 8008e7c:	d9cf      	bls.n	8008e1e <tcp_slowtmr+0x1fe>
        ++pcb_remove;
 8008e7e:	3501      	adds	r5, #1
 8008e80:	b2ed      	uxtb	r5, r5
 8008e82:	e7cc      	b.n	8008e1e <tcp_slowtmr+0x1fe>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8008e84:	6a22      	ldr	r2, [r4, #32]
 8008e86:	4b16      	ldr	r3, [pc, #88]	; (8008ee0 <tcp_slowtmr+0x2c0>)
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	1a9b      	subs	r3, r3, r2
 8008e8c:	2bf0      	cmp	r3, #240	; 0xf0
 8008e8e:	d9c8      	bls.n	8008e22 <tcp_slowtmr+0x202>
        ++pcb_remove;
 8008e90:	3501      	adds	r5, #1
 8008e92:	b2ed      	uxtb	r5, r5
 8008e94:	e7c5      	b.n	8008e22 <tcp_slowtmr+0x202>
      tcp_err_fn err_fn = pcb->errf;
 8008e96:	f8d4 508c 	ldr.w	r5, [r4, #140]	; 0x8c
      tcp_pcb_purge(pcb);
 8008e9a:	4620      	mov	r0, r4
 8008e9c:	f7ff fe9e 	bl	8008bdc <tcp_pcb_purge>
      if (prev != NULL) {
 8008ea0:	2e00      	cmp	r6, #0
 8008ea2:	d03f      	beq.n	8008f24 <tcp_slowtmr+0x304>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8008ea4:	4b10      	ldr	r3, [pc, #64]	; (8008ee8 <tcp_slowtmr+0x2c8>)
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	429c      	cmp	r4, r3
 8008eaa:	d033      	beq.n	8008f14 <tcp_slowtmr+0x2f4>
        prev->next = pcb->next;
 8008eac:	68e3      	ldr	r3, [r4, #12]
 8008eae:	60f3      	str	r3, [r6, #12]
      if (pcb_reset) {
 8008eb0:	2f00      	cmp	r7, #0
 8008eb2:	d146      	bne.n	8008f42 <tcp_slowtmr+0x322>
      err_arg = pcb->callback_arg;
 8008eb4:	f8d4 8010 	ldr.w	r8, [r4, #16]
      pcb = pcb->next;
 8008eb8:	68e7      	ldr	r7, [r4, #12]
      memp_free(MEMP_TCP_PCB, pcb2);
 8008eba:	4621      	mov	r1, r4
 8008ebc:	2001      	movs	r0, #1
 8008ebe:	f7fe ff2f 	bl	8007d20 <memp_free>
      tcp_active_pcbs_changed = 0;
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	4b12      	ldr	r3, [pc, #72]	; (8008f10 <tcp_slowtmr+0x2f0>)
 8008ec6:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8008ec8:	b11d      	cbz	r5, 8008ed2 <tcp_slowtmr+0x2b2>
 8008eca:	f06f 010c 	mvn.w	r1, #12
 8008ece:	4640      	mov	r0, r8
 8008ed0:	47a8      	blx	r5
      if (tcp_active_pcbs_changed) {
 8008ed2:	4b0f      	ldr	r3, [pc, #60]	; (8008f10 <tcp_slowtmr+0x2f0>)
 8008ed4:	781b      	ldrb	r3, [r3, #0]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	f47f aead 	bne.w	8008c36 <tcp_slowtmr+0x16>
      pcb = pcb->next;
 8008edc:	463c      	mov	r4, r7
 8008ede:	e6c7      	b.n	8008c70 <tcp_slowtmr+0x50>
 8008ee0:	20007988 	.word	0x20007988
 8008ee4:	20003f86 	.word	0x20003f86
 8008ee8:	20007984 	.word	0x20007984
 8008eec:	0800f374 	.word	0x0800f374
 8008ef0:	0800f50c 	.word	0x0800f50c
 8008ef4:	0800de34 	.word	0x0800de34
 8008ef8:	0800f538 	.word	0x0800f538
 8008efc:	0800f564 	.word	0x0800f564
 8008f00:	0800f448 	.word	0x0800f448
 8008f04:	0800f2e8 	.word	0x0800f2e8
 8008f08:	10624dd3 	.word	0x10624dd3
 8008f0c:	000124f8 	.word	0x000124f8
 8008f10:	20007980 	.word	0x20007980
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8008f14:	4b39      	ldr	r3, [pc, #228]	; (8008ffc <tcp_slowtmr+0x3dc>)
 8008f16:	f240 4289 	movw	r2, #1161	; 0x489
 8008f1a:	4939      	ldr	r1, [pc, #228]	; (8009000 <tcp_slowtmr+0x3e0>)
 8008f1c:	4839      	ldr	r0, [pc, #228]	; (8009004 <tcp_slowtmr+0x3e4>)
 8008f1e:	f004 fb6c 	bl	800d5fa <iprintf>
 8008f22:	e7c3      	b.n	8008eac <tcp_slowtmr+0x28c>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8008f24:	4b38      	ldr	r3, [pc, #224]	; (8009008 <tcp_slowtmr+0x3e8>)
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	429c      	cmp	r4, r3
 8008f2a:	d006      	beq.n	8008f3a <tcp_slowtmr+0x31a>
 8008f2c:	4b33      	ldr	r3, [pc, #204]	; (8008ffc <tcp_slowtmr+0x3dc>)
 8008f2e:	f240 428d 	movw	r2, #1165	; 0x48d
 8008f32:	4936      	ldr	r1, [pc, #216]	; (800900c <tcp_slowtmr+0x3ec>)
 8008f34:	4833      	ldr	r0, [pc, #204]	; (8009004 <tcp_slowtmr+0x3e4>)
 8008f36:	f004 fb60 	bl	800d5fa <iprintf>
        tcp_active_pcbs = pcb->next;
 8008f3a:	68e2      	ldr	r2, [r4, #12]
 8008f3c:	4b32      	ldr	r3, [pc, #200]	; (8009008 <tcp_slowtmr+0x3e8>)
 8008f3e:	601a      	str	r2, [r3, #0]
 8008f40:	e7b6      	b.n	8008eb0 <tcp_slowtmr+0x290>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8008f42:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008f44:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8008f46:	8b23      	ldrh	r3, [r4, #24]
 8008f48:	9301      	str	r3, [sp, #4]
 8008f4a:	8ae3      	ldrh	r3, [r4, #22]
 8008f4c:	9300      	str	r3, [sp, #0]
 8008f4e:	1d23      	adds	r3, r4, #4
 8008f50:	4622      	mov	r2, r4
 8008f52:	f002 fe91 	bl	800bc78 <tcp_rst>
 8008f56:	e7ad      	b.n	8008eb4 <tcp_slowtmr+0x294>
        TCP_EVENT_POLL(prev, err);
 8008f58:	2000      	movs	r0, #0
 8008f5a:	e779      	b.n	8008e50 <tcp_slowtmr+0x230>
          tcp_output(prev);
 8008f5c:	4620      	mov	r0, r4
 8008f5e:	f002 fd2f 	bl	800b9c0 <tcp_output>
      prev = pcb;
 8008f62:	4626      	mov	r6, r4
      pcb = pcb->next;
 8008f64:	462c      	mov	r4, r5
 8008f66:	e683      	b.n	8008c70 <tcp_slowtmr+0x50>
      prev = pcb;
 8008f68:	4626      	mov	r6, r4
      pcb = pcb->next;
 8008f6a:	462c      	mov	r4, r5
 8008f6c:	e680      	b.n	8008c70 <tcp_slowtmr+0x50>
  pcb = tcp_tw_pcbs;
 8008f6e:	4b28      	ldr	r3, [pc, #160]	; (8009010 <tcp_slowtmr+0x3f0>)
 8008f70:	681d      	ldr	r5, [r3, #0]
  while (pcb != NULL) {
 8008f72:	e003      	b.n	8008f7c <tcp_slowtmr+0x35c>
      ++pcb_remove;
 8008f74:	2301      	movs	r3, #1
    if (pcb_remove) {
 8008f76:	b9ab      	cbnz	r3, 8008fa4 <tcp_slowtmr+0x384>
      prev = pcb;
 8008f78:	462c      	mov	r4, r5
      pcb = pcb->next;
 8008f7a:	68ed      	ldr	r5, [r5, #12]
  while (pcb != NULL) {
 8008f7c:	2d00      	cmp	r5, #0
 8008f7e:	d039      	beq.n	8008ff4 <tcp_slowtmr+0x3d4>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8008f80:	7d2b      	ldrb	r3, [r5, #20]
 8008f82:	2b0a      	cmp	r3, #10
 8008f84:	d006      	beq.n	8008f94 <tcp_slowtmr+0x374>
 8008f86:	4b1d      	ldr	r3, [pc, #116]	; (8008ffc <tcp_slowtmr+0x3dc>)
 8008f88:	f240 42bd 	movw	r2, #1213	; 0x4bd
 8008f8c:	4921      	ldr	r1, [pc, #132]	; (8009014 <tcp_slowtmr+0x3f4>)
 8008f8e:	481d      	ldr	r0, [pc, #116]	; (8009004 <tcp_slowtmr+0x3e4>)
 8008f90:	f004 fb33 	bl	800d5fa <iprintf>
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8008f94:	6a2a      	ldr	r2, [r5, #32]
 8008f96:	4b20      	ldr	r3, [pc, #128]	; (8009018 <tcp_slowtmr+0x3f8>)
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	1a9b      	subs	r3, r3, r2
 8008f9c:	2bf0      	cmp	r3, #240	; 0xf0
 8008f9e:	d8e9      	bhi.n	8008f74 <tcp_slowtmr+0x354>
    pcb_remove = 0;
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	e7e8      	b.n	8008f76 <tcp_slowtmr+0x356>
      tcp_pcb_purge(pcb);
 8008fa4:	4628      	mov	r0, r5
 8008fa6:	f7ff fe19 	bl	8008bdc <tcp_pcb_purge>
      if (prev != NULL) {
 8008faa:	b1a4      	cbz	r4, 8008fd6 <tcp_slowtmr+0x3b6>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8008fac:	4b18      	ldr	r3, [pc, #96]	; (8009010 <tcp_slowtmr+0x3f0>)
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	429d      	cmp	r5, r3
 8008fb2:	d008      	beq.n	8008fc6 <tcp_slowtmr+0x3a6>
        prev->next = pcb->next;
 8008fb4:	68eb      	ldr	r3, [r5, #12]
 8008fb6:	60e3      	str	r3, [r4, #12]
      pcb = pcb->next;
 8008fb8:	68ee      	ldr	r6, [r5, #12]
      memp_free(MEMP_TCP_PCB, pcb2);
 8008fba:	4629      	mov	r1, r5
 8008fbc:	2001      	movs	r0, #1
 8008fbe:	f7fe feaf 	bl	8007d20 <memp_free>
      pcb = pcb->next;
 8008fc2:	4635      	mov	r5, r6
 8008fc4:	e7da      	b.n	8008f7c <tcp_slowtmr+0x35c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8008fc6:	4b0d      	ldr	r3, [pc, #52]	; (8008ffc <tcp_slowtmr+0x3dc>)
 8008fc8:	f240 42cb 	movw	r2, #1227	; 0x4cb
 8008fcc:	4913      	ldr	r1, [pc, #76]	; (800901c <tcp_slowtmr+0x3fc>)
 8008fce:	480d      	ldr	r0, [pc, #52]	; (8009004 <tcp_slowtmr+0x3e4>)
 8008fd0:	f004 fb13 	bl	800d5fa <iprintf>
 8008fd4:	e7ee      	b.n	8008fb4 <tcp_slowtmr+0x394>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8008fd6:	4b0e      	ldr	r3, [pc, #56]	; (8009010 <tcp_slowtmr+0x3f0>)
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	429d      	cmp	r5, r3
 8008fdc:	d006      	beq.n	8008fec <tcp_slowtmr+0x3cc>
 8008fde:	4b07      	ldr	r3, [pc, #28]	; (8008ffc <tcp_slowtmr+0x3dc>)
 8008fe0:	f240 42cf 	movw	r2, #1231	; 0x4cf
 8008fe4:	490e      	ldr	r1, [pc, #56]	; (8009020 <tcp_slowtmr+0x400>)
 8008fe6:	4807      	ldr	r0, [pc, #28]	; (8009004 <tcp_slowtmr+0x3e4>)
 8008fe8:	f004 fb07 	bl	800d5fa <iprintf>
        tcp_tw_pcbs = pcb->next;
 8008fec:	68ea      	ldr	r2, [r5, #12]
 8008fee:	4b08      	ldr	r3, [pc, #32]	; (8009010 <tcp_slowtmr+0x3f0>)
 8008ff0:	601a      	str	r2, [r3, #0]
 8008ff2:	e7e1      	b.n	8008fb8 <tcp_slowtmr+0x398>
}
 8008ff4:	b002      	add	sp, #8
 8008ff6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ffa:	bf00      	nop
 8008ffc:	0800f374 	.word	0x0800f374
 8009000:	0800f594 	.word	0x0800f594
 8009004:	0800de34 	.word	0x0800de34
 8009008:	20007984 	.word	0x20007984
 800900c:	0800f5c0 	.word	0x0800f5c0
 8009010:	20007994 	.word	0x20007994
 8009014:	0800f5ec 	.word	0x0800f5ec
 8009018:	20007988 	.word	0x20007988
 800901c:	0800f61c 	.word	0x0800f61c
 8009020:	0800f644 	.word	0x0800f644

08009024 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8009024:	b510      	push	{r4, lr}
 8009026:	460c      	mov	r4, r1
  TCP_RMV(pcblist, pcb);
 8009028:	6803      	ldr	r3, [r0, #0]
 800902a:	428b      	cmp	r3, r1
 800902c:	d005      	beq.n	800903a <tcp_pcb_remove+0x16>
 800902e:	b14b      	cbz	r3, 8009044 <tcp_pcb_remove+0x20>
 8009030:	68da      	ldr	r2, [r3, #12]
 8009032:	4294      	cmp	r4, r2
 8009034:	d004      	beq.n	8009040 <tcp_pcb_remove+0x1c>
 8009036:	4613      	mov	r3, r2
 8009038:	e7f9      	b.n	800902e <tcp_pcb_remove+0xa>
 800903a:	68db      	ldr	r3, [r3, #12]
 800903c:	6003      	str	r3, [r0, #0]
 800903e:	e001      	b.n	8009044 <tcp_pcb_remove+0x20>
 8009040:	68e2      	ldr	r2, [r4, #12]
 8009042:	60da      	str	r2, [r3, #12]
 8009044:	2300      	movs	r3, #0
 8009046:	60e3      	str	r3, [r4, #12]

  tcp_pcb_purge(pcb);
 8009048:	4620      	mov	r0, r4
 800904a:	f7ff fdc7 	bl	8008bdc <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 800904e:	7d23      	ldrb	r3, [r4, #20]
 8009050:	2b0a      	cmp	r3, #10
 8009052:	d005      	beq.n	8009060 <tcp_pcb_remove+0x3c>
 8009054:	2b01      	cmp	r3, #1
 8009056:	d003      	beq.n	8009060 <tcp_pcb_remove+0x3c>
     pcb->state != LISTEN &&
     pcb->flags & TF_ACK_DELAY) {
 8009058:	7ea3      	ldrb	r3, [r4, #26]
     pcb->state != LISTEN &&
 800905a:	f013 0f01 	tst.w	r3, #1
 800905e:	d121      	bne.n	80090a4 <tcp_pcb_remove+0x80>
    pcb->flags |= TF_ACK_NOW;
    tcp_output(pcb);
  }

  if (pcb->state != LISTEN) {
 8009060:	7d23      	ldrb	r3, [r4, #20]
 8009062:	2b01      	cmp	r3, #1
 8009064:	d01a      	beq.n	800909c <tcp_pcb_remove+0x78>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8009066:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8009068:	b133      	cbz	r3, 8009078 <tcp_pcb_remove+0x54>
 800906a:	4b12      	ldr	r3, [pc, #72]	; (80090b4 <tcp_pcb_remove+0x90>)
 800906c:	f240 7253 	movw	r2, #1875	; 0x753
 8009070:	4911      	ldr	r1, [pc, #68]	; (80090b8 <tcp_pcb_remove+0x94>)
 8009072:	4812      	ldr	r0, [pc, #72]	; (80090bc <tcp_pcb_remove+0x98>)
 8009074:	f004 fac1 	bl	800d5fa <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8009078:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800907a:	b133      	cbz	r3, 800908a <tcp_pcb_remove+0x66>
 800907c:	4b0d      	ldr	r3, [pc, #52]	; (80090b4 <tcp_pcb_remove+0x90>)
 800907e:	f240 7254 	movw	r2, #1876	; 0x754
 8009082:	490f      	ldr	r1, [pc, #60]	; (80090c0 <tcp_pcb_remove+0x9c>)
 8009084:	480d      	ldr	r0, [pc, #52]	; (80090bc <tcp_pcb_remove+0x98>)
 8009086:	f004 fab8 	bl	800d5fa <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800908a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800908c:	b133      	cbz	r3, 800909c <tcp_pcb_remove+0x78>
 800908e:	4b09      	ldr	r3, [pc, #36]	; (80090b4 <tcp_pcb_remove+0x90>)
 8009090:	f240 7256 	movw	r2, #1878	; 0x756
 8009094:	490b      	ldr	r1, [pc, #44]	; (80090c4 <tcp_pcb_remove+0xa0>)
 8009096:	4809      	ldr	r0, [pc, #36]	; (80090bc <tcp_pcb_remove+0x98>)
 8009098:	f004 faaf 	bl	800d5fa <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800909c:	2300      	movs	r3, #0
 800909e:	7523      	strb	r3, [r4, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 80090a0:	82e3      	strh	r3, [r4, #22]
 80090a2:	bd10      	pop	{r4, pc}
    pcb->flags |= TF_ACK_NOW;
 80090a4:	f043 0302 	orr.w	r3, r3, #2
 80090a8:	76a3      	strb	r3, [r4, #26]
    tcp_output(pcb);
 80090aa:	4620      	mov	r0, r4
 80090ac:	f002 fc88 	bl	800b9c0 <tcp_output>
 80090b0:	e7d6      	b.n	8009060 <tcp_pcb_remove+0x3c>
 80090b2:	bf00      	nop
 80090b4:	0800f374 	.word	0x0800f374
 80090b8:	0800f3fc 	.word	0x0800f3fc
 80090bc:	0800de34 	.word	0x0800de34
 80090c0:	0800f414 	.word	0x0800f414
 80090c4:	0800f430 	.word	0x0800f430

080090c8 <tcp_close_shutdown>:
{
 80090c8:	b510      	push	{r4, lr}
 80090ca:	b082      	sub	sp, #8
 80090cc:	4604      	mov	r4, r0
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 80090ce:	b121      	cbz	r1, 80090da <tcp_close_shutdown+0x12>
 80090d0:	7d03      	ldrb	r3, [r0, #20]
 80090d2:	2b04      	cmp	r3, #4
 80090d4:	d00c      	beq.n	80090f0 <tcp_close_shutdown+0x28>
 80090d6:	2b07      	cmp	r3, #7
 80090d8:	d00a      	beq.n	80090f0 <tcp_close_shutdown+0x28>
  switch (pcb->state) {
 80090da:	7d23      	ldrb	r3, [r4, #20]
 80090dc:	2b01      	cmp	r3, #1
 80090de:	d072      	beq.n	80091c6 <tcp_close_shutdown+0xfe>
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d055      	beq.n	8009190 <tcp_close_shutdown+0xc8>
 80090e4:	2b02      	cmp	r3, #2
 80090e6:	d07b      	beq.n	80091e0 <tcp_close_shutdown+0x118>
    return tcp_close_shutdown_fin(pcb);
 80090e8:	4620      	mov	r0, r4
 80090ea:	f7ff fb65 	bl	80087b8 <tcp_close_shutdown_fin>
 80090ee:	e068      	b.n	80091c2 <tcp_close_shutdown+0xfa>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80090f0:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80090f2:	b1d3      	cbz	r3, 800912a <tcp_close_shutdown+0x62>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80090f4:	7ea3      	ldrb	r3, [r4, #26]
 80090f6:	f013 0f10 	tst.w	r3, #16
 80090fa:	d01b      	beq.n	8009134 <tcp_close_shutdown+0x6c>
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80090fc:	8b23      	ldrh	r3, [r4, #24]
 80090fe:	9301      	str	r3, [sp, #4]
 8009100:	8ae3      	ldrh	r3, [r4, #22]
 8009102:	9300      	str	r3, [sp, #0]
 8009104:	1d23      	adds	r3, r4, #4
 8009106:	4622      	mov	r2, r4
 8009108:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800910a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800910c:	f002 fdb4 	bl	800bc78 <tcp_rst>
      tcp_pcb_purge(pcb);
 8009110:	4620      	mov	r0, r4
 8009112:	f7ff fd63 	bl	8008bdc <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8009116:	4b38      	ldr	r3, [pc, #224]	; (80091f8 <tcp_close_shutdown+0x130>)
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	429c      	cmp	r4, r3
 800911c:	d012      	beq.n	8009144 <tcp_close_shutdown+0x7c>
 800911e:	b1bb      	cbz	r3, 8009150 <tcp_close_shutdown+0x88>
 8009120:	68da      	ldr	r2, [r3, #12]
 8009122:	4294      	cmp	r4, r2
 8009124:	d012      	beq.n	800914c <tcp_close_shutdown+0x84>
 8009126:	4613      	mov	r3, r2
 8009128:	e7f9      	b.n	800911e <tcp_close_shutdown+0x56>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800912a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800912c:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8009130:	d1e0      	bne.n	80090f4 <tcp_close_shutdown+0x2c>
 8009132:	e7d2      	b.n	80090da <tcp_close_shutdown+0x12>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8009134:	4b31      	ldr	r3, [pc, #196]	; (80091fc <tcp_close_shutdown+0x134>)
 8009136:	f240 120f 	movw	r2, #271	; 0x10f
 800913a:	4931      	ldr	r1, [pc, #196]	; (8009200 <tcp_close_shutdown+0x138>)
 800913c:	4831      	ldr	r0, [pc, #196]	; (8009204 <tcp_close_shutdown+0x13c>)
 800913e:	f004 fa5c 	bl	800d5fa <iprintf>
 8009142:	e7db      	b.n	80090fc <tcp_close_shutdown+0x34>
      TCP_RMV_ACTIVE(pcb);
 8009144:	68da      	ldr	r2, [r3, #12]
 8009146:	4b2c      	ldr	r3, [pc, #176]	; (80091f8 <tcp_close_shutdown+0x130>)
 8009148:	601a      	str	r2, [r3, #0]
 800914a:	e001      	b.n	8009150 <tcp_close_shutdown+0x88>
 800914c:	68e2      	ldr	r2, [r4, #12]
 800914e:	60da      	str	r2, [r3, #12]
 8009150:	2300      	movs	r3, #0
 8009152:	60e3      	str	r3, [r4, #12]
 8009154:	2201      	movs	r2, #1
 8009156:	4b2c      	ldr	r3, [pc, #176]	; (8009208 <tcp_close_shutdown+0x140>)
 8009158:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 800915a:	7d23      	ldrb	r3, [r4, #20]
 800915c:	2b04      	cmp	r3, #4
 800915e:	d009      	beq.n	8009174 <tcp_close_shutdown+0xac>
        if (tcp_input_pcb == pcb) {
 8009160:	4b2a      	ldr	r3, [pc, #168]	; (800920c <tcp_close_shutdown+0x144>)
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	429c      	cmp	r4, r3
 8009166:	d00f      	beq.n	8009188 <tcp_close_shutdown+0xc0>
          memp_free(MEMP_TCP_PCB, pcb);
 8009168:	4621      	mov	r1, r4
 800916a:	2001      	movs	r0, #1
 800916c:	f7fe fdd8 	bl	8007d20 <memp_free>
      return ERR_OK;
 8009170:	2000      	movs	r0, #0
 8009172:	e026      	b.n	80091c2 <tcp_close_shutdown+0xfa>
        pcb->state = TIME_WAIT;
 8009174:	230a      	movs	r3, #10
 8009176:	7523      	strb	r3, [r4, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8009178:	4b25      	ldr	r3, [pc, #148]	; (8009210 <tcp_close_shutdown+0x148>)
 800917a:	681a      	ldr	r2, [r3, #0]
 800917c:	60e2      	str	r2, [r4, #12]
 800917e:	601c      	str	r4, [r3, #0]
 8009180:	f002 ff88 	bl	800c094 <tcp_timer_needed>
      return ERR_OK;
 8009184:	2000      	movs	r0, #0
 8009186:	e01c      	b.n	80091c2 <tcp_close_shutdown+0xfa>
          tcp_trigger_input_pcb_close();
 8009188:	f001 feca 	bl	800af20 <tcp_trigger_input_pcb_close>
      return ERR_OK;
 800918c:	2000      	movs	r0, #0
 800918e:	e018      	b.n	80091c2 <tcp_close_shutdown+0xfa>
    if (pcb->local_port != 0) {
 8009190:	8ae3      	ldrh	r3, [r4, #22]
 8009192:	b18b      	cbz	r3, 80091b8 <tcp_close_shutdown+0xf0>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8009194:	4b1f      	ldr	r3, [pc, #124]	; (8009214 <tcp_close_shutdown+0x14c>)
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	429c      	cmp	r4, r3
 800919a:	d005      	beq.n	80091a8 <tcp_close_shutdown+0xe0>
 800919c:	b153      	cbz	r3, 80091b4 <tcp_close_shutdown+0xec>
 800919e:	68da      	ldr	r2, [r3, #12]
 80091a0:	4294      	cmp	r4, r2
 80091a2:	d005      	beq.n	80091b0 <tcp_close_shutdown+0xe8>
 80091a4:	4613      	mov	r3, r2
 80091a6:	e7f9      	b.n	800919c <tcp_close_shutdown+0xd4>
 80091a8:	68da      	ldr	r2, [r3, #12]
 80091aa:	4b1a      	ldr	r3, [pc, #104]	; (8009214 <tcp_close_shutdown+0x14c>)
 80091ac:	601a      	str	r2, [r3, #0]
 80091ae:	e001      	b.n	80091b4 <tcp_close_shutdown+0xec>
 80091b0:	68e2      	ldr	r2, [r4, #12]
 80091b2:	60da      	str	r2, [r3, #12]
 80091b4:	2300      	movs	r3, #0
 80091b6:	60e3      	str	r3, [r4, #12]
    memp_free(MEMP_TCP_PCB, pcb);
 80091b8:	4621      	mov	r1, r4
 80091ba:	2001      	movs	r0, #1
 80091bc:	f7fe fdb0 	bl	8007d20 <memp_free>
  return ERR_OK;
 80091c0:	2000      	movs	r0, #0
}
 80091c2:	b002      	add	sp, #8
 80091c4:	bd10      	pop	{r4, pc}
    tcp_listen_closed(pcb);
 80091c6:	4620      	mov	r0, r4
 80091c8:	f7ff facc 	bl	8008764 <tcp_listen_closed>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80091cc:	4621      	mov	r1, r4
 80091ce:	4812      	ldr	r0, [pc, #72]	; (8009218 <tcp_close_shutdown+0x150>)
 80091d0:	f7ff ff28 	bl	8009024 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80091d4:	4621      	mov	r1, r4
 80091d6:	2002      	movs	r0, #2
 80091d8:	f7fe fda2 	bl	8007d20 <memp_free>
  return ERR_OK;
 80091dc:	2000      	movs	r0, #0
    break;
 80091de:	e7f0      	b.n	80091c2 <tcp_close_shutdown+0xfa>
    TCP_PCB_REMOVE_ACTIVE(pcb);
 80091e0:	4621      	mov	r1, r4
 80091e2:	4805      	ldr	r0, [pc, #20]	; (80091f8 <tcp_close_shutdown+0x130>)
 80091e4:	f7ff ff1e 	bl	8009024 <tcp_pcb_remove>
 80091e8:	2001      	movs	r0, #1
 80091ea:	4b07      	ldr	r3, [pc, #28]	; (8009208 <tcp_close_shutdown+0x140>)
 80091ec:	7018      	strb	r0, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 80091ee:	4621      	mov	r1, r4
 80091f0:	f7fe fd96 	bl	8007d20 <memp_free>
  return ERR_OK;
 80091f4:	2000      	movs	r0, #0
    break;
 80091f6:	e7e4      	b.n	80091c2 <tcp_close_shutdown+0xfa>
 80091f8:	20007984 	.word	0x20007984
 80091fc:	0800f374 	.word	0x0800f374
 8009200:	0800f320 	.word	0x0800f320
 8009204:	0800de34 	.word	0x0800de34
 8009208:	20007980 	.word	0x20007980
 800920c:	20007998 	.word	0x20007998
 8009210:	20007994 	.word	0x20007994
 8009214:	20007990 	.word	0x20007990
 8009218:	2000798c 	.word	0x2000798c

0800921c <tcp_close>:
{
 800921c:	b508      	push	{r3, lr}
  if (pcb->state != LISTEN) {
 800921e:	7d03      	ldrb	r3, [r0, #20]
 8009220:	2b01      	cmp	r3, #1
 8009222:	d003      	beq.n	800922c <tcp_close+0x10>
    pcb->flags |= TF_RXCLOSED;
 8009224:	7e83      	ldrb	r3, [r0, #26]
 8009226:	f043 0310 	orr.w	r3, r3, #16
 800922a:	7683      	strb	r3, [r0, #26]
  return tcp_close_shutdown(pcb, 1);
 800922c:	2101      	movs	r1, #1
 800922e:	f7ff ff4b 	bl	80090c8 <tcp_close_shutdown>
}
 8009232:	bd08      	pop	{r3, pc}

08009234 <tcp_recv_null>:
{
 8009234:	b510      	push	{r4, lr}
 8009236:	4608      	mov	r0, r1
  if (p != NULL) {
 8009238:	b142      	cbz	r2, 800924c <tcp_recv_null+0x18>
 800923a:	4614      	mov	r4, r2
    tcp_recved(pcb, p->tot_len);
 800923c:	8911      	ldrh	r1, [r2, #8]
 800923e:	f7ff fbef 	bl	8008a20 <tcp_recved>
    pbuf_free(p);
 8009242:	4620      	mov	r0, r4
 8009244:	f7fe ff42 	bl	80080cc <pbuf_free>
  return ERR_OK;
 8009248:	2000      	movs	r0, #0
 800924a:	bd10      	pop	{r4, pc}
  } else if (err == ERR_OK) {
 800924c:	b10b      	cbz	r3, 8009252 <tcp_recv_null+0x1e>
  return ERR_OK;
 800924e:	2000      	movs	r0, #0
}
 8009250:	bd10      	pop	{r4, pc}
    return tcp_close(pcb);
 8009252:	f7ff ffe3 	bl	800921c <tcp_close>
 8009256:	bd10      	pop	{r4, pc}

08009258 <tcp_process_refused_data>:
{
 8009258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800925a:	4604      	mov	r4, r0
    u8_t refused_flags = pcb->refused_data->flags;
 800925c:	6f46      	ldr	r6, [r0, #116]	; 0x74
 800925e:	7b77      	ldrb	r7, [r6, #13]
    pcb->refused_data = NULL;
 8009260:	2300      	movs	r3, #0
 8009262:	6743      	str	r3, [r0, #116]	; 0x74
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8009264:	f8d0 5080 	ldr.w	r5, [r0, #128]	; 0x80
 8009268:	b1dd      	cbz	r5, 80092a2 <tcp_process_refused_data+0x4a>
 800926a:	4632      	mov	r2, r6
 800926c:	4601      	mov	r1, r0
 800926e:	6900      	ldr	r0, [r0, #16]
 8009270:	47a8      	blx	r5
 8009272:	4605      	mov	r5, r0
    if (err == ERR_OK) {
 8009274:	b9fd      	cbnz	r5, 80092b6 <tcp_process_refused_data+0x5e>
      if (refused_flags & PBUF_FLAG_TCP_FIN
 8009276:	f017 0f20 	tst.w	r7, #32
 800927a:	d022      	beq.n	80092c2 <tcp_process_refused_data+0x6a>
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800927c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800927e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8009282:	d001      	beq.n	8009288 <tcp_process_refused_data+0x30>
          pcb->rcv_wnd++;
 8009284:	3301      	adds	r3, #1
 8009286:	8523      	strh	r3, [r4, #40]	; 0x28
        TCP_EVENT_CLOSED(pcb, err);
 8009288:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
 800928c:	b18e      	cbz	r6, 80092b2 <tcp_process_refused_data+0x5a>
 800928e:	2300      	movs	r3, #0
 8009290:	461a      	mov	r2, r3
 8009292:	4621      	mov	r1, r4
 8009294:	6920      	ldr	r0, [r4, #16]
 8009296:	47b0      	blx	r6
        if (err == ERR_ABRT) {
 8009298:	f110 0f0d 	cmn.w	r0, #13
 800929c:	d111      	bne.n	80092c2 <tcp_process_refused_data+0x6a>
          return ERR_ABRT;
 800929e:	4605      	mov	r5, r0
 80092a0:	e00f      	b.n	80092c2 <tcp_process_refused_data+0x6a>
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80092a2:	2300      	movs	r3, #0
 80092a4:	4632      	mov	r2, r6
 80092a6:	4601      	mov	r1, r0
 80092a8:	4618      	mov	r0, r3
 80092aa:	f7ff ffc3 	bl	8009234 <tcp_recv_null>
 80092ae:	4605      	mov	r5, r0
 80092b0:	e7e0      	b.n	8009274 <tcp_process_refused_data+0x1c>
        TCP_EVENT_CLOSED(pcb, err);
 80092b2:	4628      	mov	r0, r5
 80092b4:	e7f0      	b.n	8009298 <tcp_process_refused_data+0x40>
    } else if (err == ERR_ABRT) {
 80092b6:	f115 0f0d 	cmn.w	r5, #13
 80092ba:	d002      	beq.n	80092c2 <tcp_process_refused_data+0x6a>
      pcb->refused_data = refused_data;
 80092bc:	6766      	str	r6, [r4, #116]	; 0x74
      return ERR_INPROGRESS;
 80092be:	f06f 0504 	mvn.w	r5, #4
}
 80092c2:	4628      	mov	r0, r5
 80092c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080092c8 <tcp_fasttmr>:
{
 80092c8:	b570      	push	{r4, r5, r6, lr}
  ++tcp_timer_ctr;
 80092ca:	4a1c      	ldr	r2, [pc, #112]	; (800933c <tcp_fasttmr+0x74>)
 80092cc:	7813      	ldrb	r3, [r2, #0]
 80092ce:	3301      	adds	r3, #1
 80092d0:	7013      	strb	r3, [r2, #0]
  pcb = tcp_active_pcbs;
 80092d2:	4b1b      	ldr	r3, [pc, #108]	; (8009340 <tcp_fasttmr+0x78>)
 80092d4:	681c      	ldr	r4, [r3, #0]
  while (pcb != NULL) {
 80092d6:	e013      	b.n	8009300 <tcp_fasttmr+0x38>
        tcp_ack_now(pcb);
 80092d8:	f043 0302 	orr.w	r3, r3, #2
 80092dc:	76a3      	strb	r3, [r4, #26]
        tcp_output(pcb);
 80092de:	4620      	mov	r0, r4
 80092e0:	f002 fb6e 	bl	800b9c0 <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 80092e4:	7ea3      	ldrb	r3, [r4, #26]
 80092e6:	f023 0303 	bic.w	r3, r3, #3
 80092ea:	76a3      	strb	r3, [r4, #26]
 80092ec:	e013      	b.n	8009316 <tcp_fasttmr+0x4e>
        pcb->flags &= ~(TF_CLOSEPEND);
 80092ee:	f023 0308 	bic.w	r3, r3, #8
 80092f2:	76a3      	strb	r3, [r4, #26]
        tcp_close_shutdown_fin(pcb);
 80092f4:	4620      	mov	r0, r4
 80092f6:	f7ff fa5f 	bl	80087b8 <tcp_close_shutdown_fin>
 80092fa:	e010      	b.n	800931e <tcp_fasttmr+0x56>
      pcb = pcb->next;
 80092fc:	68e5      	ldr	r5, [r4, #12]
{
 80092fe:	462c      	mov	r4, r5
  while (pcb != NULL) {
 8009300:	b1dc      	cbz	r4, 800933a <tcp_fasttmr+0x72>
    if (pcb->last_timer != tcp_timer_ctr) {
 8009302:	7f62      	ldrb	r2, [r4, #29]
 8009304:	4b0d      	ldr	r3, [pc, #52]	; (800933c <tcp_fasttmr+0x74>)
 8009306:	781b      	ldrb	r3, [r3, #0]
 8009308:	429a      	cmp	r2, r3
 800930a:	d0f7      	beq.n	80092fc <tcp_fasttmr+0x34>
      pcb->last_timer = tcp_timer_ctr;
 800930c:	7763      	strb	r3, [r4, #29]
      if (pcb->flags & TF_ACK_DELAY) {
 800930e:	7ea3      	ldrb	r3, [r4, #26]
 8009310:	f013 0f01 	tst.w	r3, #1
 8009314:	d1e0      	bne.n	80092d8 <tcp_fasttmr+0x10>
      if (pcb->flags & TF_CLOSEPEND) {
 8009316:	7ea3      	ldrb	r3, [r4, #26]
 8009318:	f013 0f08 	tst.w	r3, #8
 800931c:	d1e7      	bne.n	80092ee <tcp_fasttmr+0x26>
      next = pcb->next;
 800931e:	68e5      	ldr	r5, [r4, #12]
      if (pcb->refused_data != NULL) {
 8009320:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8009322:	2b00      	cmp	r3, #0
 8009324:	d0eb      	beq.n	80092fe <tcp_fasttmr+0x36>
        tcp_active_pcbs_changed = 0;
 8009326:	4e07      	ldr	r6, [pc, #28]	; (8009344 <tcp_fasttmr+0x7c>)
 8009328:	2300      	movs	r3, #0
 800932a:	7033      	strb	r3, [r6, #0]
        tcp_process_refused_data(pcb);
 800932c:	4620      	mov	r0, r4
 800932e:	f7ff ff93 	bl	8009258 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8009332:	7833      	ldrb	r3, [r6, #0]
 8009334:	2b00      	cmp	r3, #0
 8009336:	d0e2      	beq.n	80092fe <tcp_fasttmr+0x36>
 8009338:	e7cb      	b.n	80092d2 <tcp_fasttmr+0xa>
}
 800933a:	bd70      	pop	{r4, r5, r6, pc}
 800933c:	20003f86 	.word	0x20003f86
 8009340:	20007984 	.word	0x20007984
 8009344:	20007980 	.word	0x20007980

08009348 <tcp_tmr>:
{
 8009348:	b508      	push	{r3, lr}
  tcp_fasttmr();
 800934a:	f7ff ffbd 	bl	80092c8 <tcp_fasttmr>
  if (++tcp_timer & 1) {
 800934e:	4a06      	ldr	r2, [pc, #24]	; (8009368 <tcp_tmr+0x20>)
 8009350:	7813      	ldrb	r3, [r2, #0]
 8009352:	3301      	adds	r3, #1
 8009354:	b2db      	uxtb	r3, r3
 8009356:	7013      	strb	r3, [r2, #0]
 8009358:	f013 0f01 	tst.w	r3, #1
 800935c:	d100      	bne.n	8009360 <tcp_tmr+0x18>
 800935e:	bd08      	pop	{r3, pc}
    tcp_slowtmr();
 8009360:	f7ff fc5e 	bl	8008c20 <tcp_slowtmr>
}
 8009364:	e7fb      	b.n	800935e <tcp_tmr+0x16>
 8009366:	bf00      	nop
 8009368:	20003f85 	.word	0x20003f85

0800936c <tcp_shutdown>:
  if (pcb->state == LISTEN) {
 800936c:	7d03      	ldrb	r3, [r0, #20]
 800936e:	2b01      	cmp	r3, #1
 8009370:	d020      	beq.n	80093b4 <tcp_shutdown+0x48>
{
 8009372:	b570      	push	{r4, r5, r6, lr}
 8009374:	4616      	mov	r6, r2
 8009376:	460d      	mov	r5, r1
 8009378:	4604      	mov	r4, r0
  if (shut_rx) {
 800937a:	b151      	cbz	r1, 8009392 <tcp_shutdown+0x26>
    pcb->flags |= TF_RXCLOSED;
 800937c:	7e83      	ldrb	r3, [r0, #26]
 800937e:	f043 0310 	orr.w	r3, r3, #16
 8009382:	7683      	strb	r3, [r0, #26]
    if (shut_tx) {
 8009384:	b992      	cbnz	r2, 80093ac <tcp_shutdown+0x40>
    if (pcb->refused_data != NULL) {
 8009386:	6f40      	ldr	r0, [r0, #116]	; 0x74
 8009388:	b118      	cbz	r0, 8009392 <tcp_shutdown+0x26>
      pbuf_free(pcb->refused_data);
 800938a:	f7fe fe9f 	bl	80080cc <pbuf_free>
      pcb->refused_data = NULL;
 800938e:	2300      	movs	r3, #0
 8009390:	6763      	str	r3, [r4, #116]	; 0x74
  if (shut_tx) {
 8009392:	b196      	cbz	r6, 80093ba <tcp_shutdown+0x4e>
    switch (pcb->state) {
 8009394:	7d23      	ldrb	r3, [r4, #20]
 8009396:	2b03      	cmp	r3, #3
 8009398:	d311      	bcc.n	80093be <tcp_shutdown+0x52>
 800939a:	2b04      	cmp	r3, #4
 800939c:	d901      	bls.n	80093a2 <tcp_shutdown+0x36>
 800939e:	2b07      	cmp	r3, #7
 80093a0:	d10d      	bne.n	80093be <tcp_shutdown+0x52>
      return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 80093a2:	b2e9      	uxtb	r1, r5
 80093a4:	4620      	mov	r0, r4
 80093a6:	f7ff fe8f 	bl	80090c8 <tcp_close_shutdown>
 80093aa:	bd70      	pop	{r4, r5, r6, pc}
      return tcp_close_shutdown(pcb, 1);
 80093ac:	2101      	movs	r1, #1
 80093ae:	f7ff fe8b 	bl	80090c8 <tcp_close_shutdown>
 80093b2:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_CONN;
 80093b4:	f06f 000a 	mvn.w	r0, #10
 80093b8:	4770      	bx	lr
  return ERR_OK;
 80093ba:	2000      	movs	r0, #0
 80093bc:	bd70      	pop	{r4, r5, r6, pc}
      return ERR_CONN;
 80093be:	f06f 000a 	mvn.w	r0, #10
}
 80093c2:	bd70      	pop	{r4, r5, r6, pc}

080093c4 <tcp_abandon>:
{
 80093c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093c8:	b082      	sub	sp, #8
 80093ca:	4604      	mov	r4, r0
 80093cc:	460d      	mov	r5, r1
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80093ce:	7d03      	ldrb	r3, [r0, #20]
 80093d0:	2b01      	cmp	r3, #1
 80093d2:	d01a      	beq.n	800940a <tcp_abandon+0x46>
  if (pcb->state == TIME_WAIT) {
 80093d4:	7d23      	ldrb	r3, [r4, #20]
 80093d6:	2b0a      	cmp	r3, #10
 80093d8:	d01f      	beq.n	800941a <tcp_abandon+0x56>
    seqno = pcb->snd_nxt;
 80093da:	f8d4 804c 	ldr.w	r8, [r4, #76]	; 0x4c
    ackno = pcb->rcv_nxt;
 80093de:	f8d4 9024 	ldr.w	r9, [r4, #36]	; 0x24
    errf = pcb->errf;
 80093e2:	f8d4 608c 	ldr.w	r6, [r4, #140]	; 0x8c
    errf_arg = pcb->callback_arg;
 80093e6:	6927      	ldr	r7, [r4, #16]
    if (pcb->state == CLOSED) {
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d141      	bne.n	8009470 <tcp_abandon+0xac>
      if (pcb->local_port != 0) {
 80093ec:	f8b4 a016 	ldrh.w	sl, [r4, #22]
 80093f0:	f1ba 0f00 	cmp.w	sl, #0
 80093f4:	d046      	beq.n	8009484 <tcp_abandon+0xc0>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80093f6:	4b2a      	ldr	r3, [pc, #168]	; (80094a0 <tcp_abandon+0xdc>)
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	429c      	cmp	r4, r3
 80093fc:	d016      	beq.n	800942c <tcp_abandon+0x68>
 80093fe:	b1db      	cbz	r3, 8009438 <tcp_abandon+0x74>
 8009400:	68da      	ldr	r2, [r3, #12]
 8009402:	4294      	cmp	r4, r2
 8009404:	d016      	beq.n	8009434 <tcp_abandon+0x70>
 8009406:	4613      	mov	r3, r2
 8009408:	e7f9      	b.n	80093fe <tcp_abandon+0x3a>
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800940a:	4b26      	ldr	r3, [pc, #152]	; (80094a4 <tcp_abandon+0xe0>)
 800940c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8009410:	4925      	ldr	r1, [pc, #148]	; (80094a8 <tcp_abandon+0xe4>)
 8009412:	4826      	ldr	r0, [pc, #152]	; (80094ac <tcp_abandon+0xe8>)
 8009414:	f004 f8f1 	bl	800d5fa <iprintf>
 8009418:	e7dc      	b.n	80093d4 <tcp_abandon+0x10>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800941a:	4621      	mov	r1, r4
 800941c:	4824      	ldr	r0, [pc, #144]	; (80094b0 <tcp_abandon+0xec>)
 800941e:	f7ff fe01 	bl	8009024 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 8009422:	4621      	mov	r1, r4
 8009424:	2001      	movs	r0, #1
 8009426:	f7fe fc7b 	bl	8007d20 <memp_free>
 800942a:	e01e      	b.n	800946a <tcp_abandon+0xa6>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800942c:	68da      	ldr	r2, [r3, #12]
 800942e:	4b1c      	ldr	r3, [pc, #112]	; (80094a0 <tcp_abandon+0xdc>)
 8009430:	601a      	str	r2, [r3, #0]
 8009432:	e001      	b.n	8009438 <tcp_abandon+0x74>
 8009434:	68e2      	ldr	r2, [r4, #12]
 8009436:	60da      	str	r2, [r3, #12]
 8009438:	2500      	movs	r5, #0
 800943a:	60e5      	str	r5, [r4, #12]
    u16_t local_port = 0;
 800943c:	46aa      	mov	sl, r5
    if (pcb->unacked != NULL) {
 800943e:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8009440:	b108      	cbz	r0, 8009446 <tcp_abandon+0x82>
      tcp_segs_free(pcb->unacked);
 8009442:	f7ff fb3c 	bl	8008abe <tcp_segs_free>
    if (pcb->unsent != NULL) {
 8009446:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8009448:	b108      	cbz	r0, 800944e <tcp_abandon+0x8a>
      tcp_segs_free(pcb->unsent);
 800944a:	f7ff fb38 	bl	8008abe <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 800944e:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8009450:	b108      	cbz	r0, 8009456 <tcp_abandon+0x92>
      tcp_segs_free(pcb->ooseq);
 8009452:	f7ff fb34 	bl	8008abe <tcp_segs_free>
    if (send_rst) {
 8009456:	b9bd      	cbnz	r5, 8009488 <tcp_abandon+0xc4>
    memp_free(MEMP_TCP_PCB, pcb);
 8009458:	4621      	mov	r1, r4
 800945a:	2001      	movs	r0, #1
 800945c:	f7fe fc60 	bl	8007d20 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8009460:	b11e      	cbz	r6, 800946a <tcp_abandon+0xa6>
 8009462:	f06f 010c 	mvn.w	r1, #12
 8009466:	4638      	mov	r0, r7
 8009468:	47b0      	blx	r6
}
 800946a:	b002      	add	sp, #8
 800946c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      local_port = pcb->local_port;
 8009470:	f8b4 a016 	ldrh.w	sl, [r4, #22]
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8009474:	4621      	mov	r1, r4
 8009476:	480f      	ldr	r0, [pc, #60]	; (80094b4 <tcp_abandon+0xf0>)
 8009478:	f7ff fdd4 	bl	8009024 <tcp_pcb_remove>
 800947c:	2201      	movs	r2, #1
 800947e:	4b0e      	ldr	r3, [pc, #56]	; (80094b8 <tcp_abandon+0xf4>)
 8009480:	701a      	strb	r2, [r3, #0]
 8009482:	e7dc      	b.n	800943e <tcp_abandon+0x7a>
    int send_rst = 0;
 8009484:	2500      	movs	r5, #0
 8009486:	e7da      	b.n	800943e <tcp_abandon+0x7a>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8009488:	8b23      	ldrh	r3, [r4, #24]
 800948a:	9301      	str	r3, [sp, #4]
 800948c:	f8cd a000 	str.w	sl, [sp]
 8009490:	1d23      	adds	r3, r4, #4
 8009492:	4622      	mov	r2, r4
 8009494:	4649      	mov	r1, r9
 8009496:	4640      	mov	r0, r8
 8009498:	f002 fbee 	bl	800bc78 <tcp_rst>
 800949c:	e7dc      	b.n	8009458 <tcp_abandon+0x94>
 800949e:	bf00      	nop
 80094a0:	20007990 	.word	0x20007990
 80094a4:	0800f374 	.word	0x0800f374
 80094a8:	0800f2b4 	.word	0x0800f2b4
 80094ac:	0800de34 	.word	0x0800de34
 80094b0:	20007994 	.word	0x20007994
 80094b4:	20007984 	.word	0x20007984
 80094b8:	20007980 	.word	0x20007980

080094bc <tcp_abort>:
{
 80094bc:	b508      	push	{r3, lr}
  tcp_abandon(pcb, 1);
 80094be:	2101      	movs	r1, #1
 80094c0:	f7ff ff80 	bl	80093c4 <tcp_abandon>
 80094c4:	bd08      	pop	{r3, pc}

080094c6 <tcp_accept_null>:
{
 80094c6:	b508      	push	{r3, lr}
  tcp_abort(pcb);
 80094c8:	4608      	mov	r0, r1
 80094ca:	f7ff fff7 	bl	80094bc <tcp_abort>
}
 80094ce:	f06f 000c 	mvn.w	r0, #12
 80094d2:	bd08      	pop	{r3, pc}

080094d4 <tcp_kill_timewait>:
{
 80094d4:	b510      	push	{r4, lr}
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80094d6:	4b0a      	ldr	r3, [pc, #40]	; (8009500 <tcp_kill_timewait+0x2c>)
 80094d8:	681b      	ldr	r3, [r3, #0]
  inactivity = 0;
 80094da:	2400      	movs	r4, #0
  inactive = NULL;
 80094dc:	4620      	mov	r0, r4
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80094de:	e000      	b.n	80094e2 <tcp_kill_timewait+0xe>
 80094e0:	68db      	ldr	r3, [r3, #12]
 80094e2:	b143      	cbz	r3, 80094f6 <tcp_kill_timewait+0x22>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80094e4:	6a19      	ldr	r1, [r3, #32]
 80094e6:	4a07      	ldr	r2, [pc, #28]	; (8009504 <tcp_kill_timewait+0x30>)
 80094e8:	6812      	ldr	r2, [r2, #0]
 80094ea:	1a52      	subs	r2, r2, r1
 80094ec:	4294      	cmp	r4, r2
 80094ee:	d8f7      	bhi.n	80094e0 <tcp_kill_timewait+0xc>
      inactivity = tcp_ticks - pcb->tmr;
 80094f0:	4614      	mov	r4, r2
      inactive = pcb;
 80094f2:	4618      	mov	r0, r3
 80094f4:	e7f4      	b.n	80094e0 <tcp_kill_timewait+0xc>
  if (inactive != NULL) {
 80094f6:	b108      	cbz	r0, 80094fc <tcp_kill_timewait+0x28>
    tcp_abort(inactive);
 80094f8:	f7ff ffe0 	bl	80094bc <tcp_abort>
 80094fc:	bd10      	pop	{r4, pc}
 80094fe:	bf00      	nop
 8009500:	20007994 	.word	0x20007994
 8009504:	20007988 	.word	0x20007988

08009508 <tcp_kill_prio>:
{
 8009508:	b570      	push	{r4, r5, r6, lr}
 800950a:	4602      	mov	r2, r0
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800950c:	f010 0f80 	tst.w	r0, #128	; 0x80
 8009510:	d000      	beq.n	8009514 <tcp_kill_prio+0xc>
 8009512:	227f      	movs	r2, #127	; 0x7f
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009514:	4b0b      	ldr	r3, [pc, #44]	; (8009544 <tcp_kill_prio+0x3c>)
 8009516:	681b      	ldr	r3, [r3, #0]
  inactivity = 0;
 8009518:	2400      	movs	r4, #0
  inactive = NULL;
 800951a:	4620      	mov	r0, r4
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800951c:	b91b      	cbnz	r3, 8009526 <tcp_kill_prio+0x1e>
  if (inactive != NULL) {
 800951e:	b108      	cbz	r0, 8009524 <tcp_kill_prio+0x1c>
    tcp_abort(inactive);
 8009520:	f7ff ffcc 	bl	80094bc <tcp_abort>
 8009524:	bd70      	pop	{r4, r5, r6, pc}
    if (pcb->prio <= mprio &&
 8009526:	7d5d      	ldrb	r5, [r3, #21]
 8009528:	42aa      	cmp	r2, r5
 800952a:	d308      	bcc.n	800953e <tcp_kill_prio+0x36>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800952c:	6a1e      	ldr	r6, [r3, #32]
 800952e:	4906      	ldr	r1, [pc, #24]	; (8009548 <tcp_kill_prio+0x40>)
 8009530:	6809      	ldr	r1, [r1, #0]
 8009532:	1b89      	subs	r1, r1, r6
    if (pcb->prio <= mprio &&
 8009534:	428c      	cmp	r4, r1
 8009536:	d802      	bhi.n	800953e <tcp_kill_prio+0x36>
      mprio = pcb->prio;
 8009538:	462a      	mov	r2, r5
      inactivity = tcp_ticks - pcb->tmr;
 800953a:	460c      	mov	r4, r1
      inactive = pcb;
 800953c:	4618      	mov	r0, r3
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800953e:	68db      	ldr	r3, [r3, #12]
 8009540:	e7ec      	b.n	800951c <tcp_kill_prio+0x14>
 8009542:	bf00      	nop
 8009544:	20007984 	.word	0x20007984
 8009548:	20007988 	.word	0x20007988

0800954c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 800954c:	b538      	push	{r3, r4, r5, lr}
 800954e:	4604      	mov	r4, r0
 8009550:	4608      	mov	r0, r1
  struct tcp_pcb *pcb;
  pcb = pcb_list;
  while (pcb != NULL) {
 8009552:	e003      	b.n	800955c <tcp_netif_ip_addr_changed_pcblist+0x10>
      /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
      && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
      ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8009554:	68c5      	ldr	r5, [r0, #12]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8009556:	f7ff ffb1 	bl	80094bc <tcp_abort>
      pcb = next;
 800955a:	4628      	mov	r0, r5
  while (pcb != NULL) {
 800955c:	b128      	cbz	r0, 800956a <tcp_netif_ip_addr_changed_pcblist+0x1e>
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800955e:	6802      	ldr	r2, [r0, #0]
 8009560:	6823      	ldr	r3, [r4, #0]
 8009562:	429a      	cmp	r2, r3
 8009564:	d0f6      	beq.n	8009554 <tcp_netif_ip_addr_changed_pcblist+0x8>
    } else {
      pcb = pcb->next;
 8009566:	68c0      	ldr	r0, [r0, #12]
 8009568:	e7f8      	b.n	800955c <tcp_netif_ip_addr_changed_pcblist+0x10>
    }
  }
}
 800956a:	bd38      	pop	{r3, r4, r5, pc}

0800956c <tcp_kill_state>:
{
 800956c:	b538      	push	{r3, r4, r5, lr}
 800956e:	4604      	mov	r4, r0
  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8009570:	f1a0 0308 	sub.w	r3, r0, #8
 8009574:	b2db      	uxtb	r3, r3
 8009576:	2b01      	cmp	r3, #1
 8009578:	d906      	bls.n	8009588 <tcp_kill_state+0x1c>
 800957a:	4b0f      	ldr	r3, [pc, #60]	; (80095b8 <tcp_kill_state+0x4c>)
 800957c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8009580:	490e      	ldr	r1, [pc, #56]	; (80095bc <tcp_kill_state+0x50>)
 8009582:	480f      	ldr	r0, [pc, #60]	; (80095c0 <tcp_kill_state+0x54>)
 8009584:	f004 f839 	bl	800d5fa <iprintf>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009588:	4b0e      	ldr	r3, [pc, #56]	; (80095c4 <tcp_kill_state+0x58>)
 800958a:	681b      	ldr	r3, [r3, #0]
  inactivity = 0;
 800958c:	2100      	movs	r1, #0
  inactive = NULL;
 800958e:	4608      	mov	r0, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009590:	e000      	b.n	8009594 <tcp_kill_state+0x28>
 8009592:	68db      	ldr	r3, [r3, #12]
 8009594:	b15b      	cbz	r3, 80095ae <tcp_kill_state+0x42>
    if (pcb->state == state) {
 8009596:	7d1a      	ldrb	r2, [r3, #20]
 8009598:	4294      	cmp	r4, r2
 800959a:	d1fa      	bne.n	8009592 <tcp_kill_state+0x26>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800959c:	6a1d      	ldr	r5, [r3, #32]
 800959e:	4a0a      	ldr	r2, [pc, #40]	; (80095c8 <tcp_kill_state+0x5c>)
 80095a0:	6812      	ldr	r2, [r2, #0]
 80095a2:	1b52      	subs	r2, r2, r5
 80095a4:	4291      	cmp	r1, r2
 80095a6:	d8f4      	bhi.n	8009592 <tcp_kill_state+0x26>
        inactivity = tcp_ticks - pcb->tmr;
 80095a8:	4611      	mov	r1, r2
        inactive = pcb;
 80095aa:	4618      	mov	r0, r3
 80095ac:	e7f1      	b.n	8009592 <tcp_kill_state+0x26>
  if (inactive != NULL) {
 80095ae:	b110      	cbz	r0, 80095b6 <tcp_kill_state+0x4a>
    tcp_abandon(inactive, 0);
 80095b0:	2100      	movs	r1, #0
 80095b2:	f7ff ff07 	bl	80093c4 <tcp_abandon>
 80095b6:	bd38      	pop	{r3, r4, r5, pc}
 80095b8:	0800f374 	.word	0x0800f374
 80095bc:	0800f364 	.word	0x0800f364
 80095c0:	0800de34 	.word	0x0800de34
 80095c4:	20007984 	.word	0x20007984
 80095c8:	20007988 	.word	0x20007988

080095cc <tcp_alloc>:
{
 80095cc:	b538      	push	{r3, r4, r5, lr}
 80095ce:	4605      	mov	r5, r0
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80095d0:	2001      	movs	r0, #1
 80095d2:	f7fe fb8b 	bl	8007cec <memp_malloc>
  if (pcb == NULL) {
 80095d6:	4604      	mov	r4, r0
 80095d8:	b368      	cbz	r0, 8009636 <tcp_alloc+0x6a>
  if (pcb != NULL) {
 80095da:	b354      	cbz	r4, 8009632 <tcp_alloc+0x66>
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80095dc:	2298      	movs	r2, #152	; 0x98
 80095de:	2100      	movs	r1, #0
 80095e0:	4620      	mov	r0, r4
 80095e2:	f004 f981 	bl	800d8e8 <memset>
    pcb->prio = prio;
 80095e6:	7565      	strb	r5, [r4, #21]
    pcb->snd_buf = TCP_SND_BUF;
 80095e8:	f44f 6386 	mov.w	r3, #1072	; 0x430
 80095ec:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80095f0:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80095f4:	8562      	strh	r2, [r4, #42]	; 0x2a
 80095f6:	8522      	strh	r2, [r4, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 80095f8:	22ff      	movs	r2, #255	; 0xff
 80095fa:	72a2      	strb	r2, [r4, #10]
    pcb->mss = INITIAL_MSS;
 80095fc:	f44f 7206 	mov.w	r2, #536	; 0x218
 8009600:	8662      	strh	r2, [r4, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8009602:	2206      	movs	r2, #6
 8009604:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8009608:	87e2      	strh	r2, [r4, #62]	; 0x3e
    pcb->rtime = -1;
 800960a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800960e:	8622      	strh	r2, [r4, #48]	; 0x30
    pcb->cwnd = 1;
 8009610:	2201      	movs	r2, #1
 8009612:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8009616:	4a19      	ldr	r2, [pc, #100]	; (800967c <tcp_alloc+0xb0>)
 8009618:	6812      	ldr	r2, [r2, #0]
 800961a:	6222      	str	r2, [r4, #32]
    pcb->last_timer = tcp_timer_ctr;
 800961c:	4a18      	ldr	r2, [pc, #96]	; (8009680 <tcp_alloc+0xb4>)
 800961e:	7812      	ldrb	r2, [r2, #0]
 8009620:	7762      	strb	r2, [r4, #29]
    pcb->ssthresh = TCP_SND_BUF;
 8009622:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
    pcb->recv = tcp_recv_null;
 8009626:	4b17      	ldr	r3, [pc, #92]	; (8009684 <tcp_alloc+0xb8>)
 8009628:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800962c:	4b16      	ldr	r3, [pc, #88]	; (8009688 <tcp_alloc+0xbc>)
 800962e:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
}
 8009632:	4620      	mov	r0, r4
 8009634:	bd38      	pop	{r3, r4, r5, pc}
    tcp_kill_timewait();
 8009636:	f7ff ff4d 	bl	80094d4 <tcp_kill_timewait>
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800963a:	2001      	movs	r0, #1
 800963c:	f7fe fb56 	bl	8007cec <memp_malloc>
    if (pcb == NULL) {
 8009640:	4604      	mov	r4, r0
 8009642:	2800      	cmp	r0, #0
 8009644:	d1c9      	bne.n	80095da <tcp_alloc+0xe>
      tcp_kill_state(LAST_ACK);
 8009646:	2009      	movs	r0, #9
 8009648:	f7ff ff90 	bl	800956c <tcp_kill_state>
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800964c:	2001      	movs	r0, #1
 800964e:	f7fe fb4d 	bl	8007cec <memp_malloc>
      if (pcb == NULL) {
 8009652:	4604      	mov	r4, r0
 8009654:	2800      	cmp	r0, #0
 8009656:	d1c0      	bne.n	80095da <tcp_alloc+0xe>
        tcp_kill_state(CLOSING);
 8009658:	2008      	movs	r0, #8
 800965a:	f7ff ff87 	bl	800956c <tcp_kill_state>
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800965e:	2001      	movs	r0, #1
 8009660:	f7fe fb44 	bl	8007cec <memp_malloc>
        if (pcb == NULL) {
 8009664:	4604      	mov	r4, r0
 8009666:	2800      	cmp	r0, #0
 8009668:	d1b7      	bne.n	80095da <tcp_alloc+0xe>
          tcp_kill_prio(prio);
 800966a:	4628      	mov	r0, r5
 800966c:	f7ff ff4c 	bl	8009508 <tcp_kill_prio>
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009670:	2001      	movs	r0, #1
 8009672:	f7fe fb3b 	bl	8007cec <memp_malloc>
 8009676:	4604      	mov	r4, r0
 8009678:	e7af      	b.n	80095da <tcp_alloc+0xe>
 800967a:	bf00      	nop
 800967c:	20007988 	.word	0x20007988
 8009680:	20003f86 	.word	0x20003f86
 8009684:	08009235 	.word	0x08009235
 8009688:	006ddd00 	.word	0x006ddd00

0800968c <tcp_new_ip_type>:
{
 800968c:	b508      	push	{r3, lr}
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800968e:	2040      	movs	r0, #64	; 0x40
 8009690:	f7ff ff9c 	bl	80095cc <tcp_alloc>
}
 8009694:	bd08      	pop	{r3, pc}
	...

08009698 <tcp_next_iss>:
  iss += tcp_ticks;       /* XXX */
 8009698:	4b03      	ldr	r3, [pc, #12]	; (80096a8 <tcp_next_iss+0x10>)
 800969a:	6818      	ldr	r0, [r3, #0]
 800969c:	4a03      	ldr	r2, [pc, #12]	; (80096ac <tcp_next_iss+0x14>)
 800969e:	6812      	ldr	r2, [r2, #0]
 80096a0:	4410      	add	r0, r2
 80096a2:	6018      	str	r0, [r3, #0]
}
 80096a4:	4770      	bx	lr
 80096a6:	bf00      	nop
 80096a8:	20000008 	.word	0x20000008
 80096ac:	20007988 	.word	0x20007988

080096b0 <tcp_eff_send_mss_impl>:
{
 80096b0:	b510      	push	{r4, lr}
 80096b2:	4604      	mov	r4, r0
  outif = ip_route(src, dest);
 80096b4:	4608      	mov	r0, r1
 80096b6:	f7fd fa97 	bl	8006be8 <ip4_route>
    if (outif == NULL) {
 80096ba:	b138      	cbz	r0, 80096cc <tcp_eff_send_mss_impl+0x1c>
    mtu = outif->mtu;
 80096bc:	8c43      	ldrh	r3, [r0, #34]	; 0x22
  if (mtu != 0) {
 80096be:	b13b      	cbz	r3, 80096d0 <tcp_eff_send_mss_impl+0x20>
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 80096c0:	3b28      	subs	r3, #40	; 0x28
 80096c2:	b298      	uxth	r0, r3
    sendmss = LWIP_MIN(sendmss, mss_s);
 80096c4:	42a0      	cmp	r0, r4
 80096c6:	bf28      	it	cs
 80096c8:	4620      	movcs	r0, r4
 80096ca:	bd10      	pop	{r4, pc}
      return sendmss;
 80096cc:	4620      	mov	r0, r4
 80096ce:	bd10      	pop	{r4, pc}
 80096d0:	4620      	mov	r0, r4
}
 80096d2:	bd10      	pop	{r4, pc}

080096d4 <tcp_netif_ip_addr_changed>:
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 80096d4:	b308      	cbz	r0, 800971a <tcp_netif_ip_addr_changed+0x46>
{
 80096d6:	b570      	push	{r4, r5, r6, lr}
 80096d8:	4604      	mov	r4, r0
  if (!ip_addr_isany(old_addr)) {
 80096da:	6803      	ldr	r3, [r0, #0]
 80096dc:	b903      	cbnz	r3, 80096e0 <tcp_netif_ip_addr_changed+0xc>
 80096de:	bd70      	pop	{r4, r5, r6, pc}
 80096e0:	460e      	mov	r6, r1
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80096e2:	4b0e      	ldr	r3, [pc, #56]	; (800971c <tcp_netif_ip_addr_changed+0x48>)
 80096e4:	6819      	ldr	r1, [r3, #0]
 80096e6:	f7ff ff31 	bl	800954c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80096ea:	4b0d      	ldr	r3, [pc, #52]	; (8009720 <tcp_netif_ip_addr_changed+0x4c>)
 80096ec:	6819      	ldr	r1, [r3, #0]
 80096ee:	4620      	mov	r0, r4
 80096f0:	f7ff ff2c 	bl	800954c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 80096f4:	2e00      	cmp	r6, #0
 80096f6:	d0f2      	beq.n	80096de <tcp_netif_ip_addr_changed+0xa>
 80096f8:	6833      	ldr	r3, [r6, #0]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d0ef      	beq.n	80096de <tcp_netif_ip_addr_changed+0xa>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 80096fe:	4b09      	ldr	r3, [pc, #36]	; (8009724 <tcp_netif_ip_addr_changed+0x50>)
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	e000      	b.n	8009706 <tcp_netif_ip_addr_changed+0x32>
{
 8009704:	4613      	mov	r3, r2
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 8009706:	2b00      	cmp	r3, #0
 8009708:	d0e9      	beq.n	80096de <tcp_netif_ip_addr_changed+0xa>
        next = lpcb->next;
 800970a:	68da      	ldr	r2, [r3, #12]
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800970c:	681d      	ldr	r5, [r3, #0]
 800970e:	6820      	ldr	r0, [r4, #0]
 8009710:	4285      	cmp	r5, r0
 8009712:	d1f7      	bne.n	8009704 <tcp_netif_ip_addr_changed+0x30>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8009714:	6831      	ldr	r1, [r6, #0]
 8009716:	6019      	str	r1, [r3, #0]
 8009718:	e7f4      	b.n	8009704 <tcp_netif_ip_addr_changed+0x30>
 800971a:	4770      	bx	lr
 800971c:	20007984 	.word	0x20007984
 8009720:	20007990 	.word	0x20007990
 8009724:	2000798c 	.word	0x2000798c

08009728 <tcp_getoptbyte>:
}

static u8_t
tcp_getoptbyte(void)
{
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 8009728:	4b0e      	ldr	r3, [pc, #56]	; (8009764 <tcp_getoptbyte+0x3c>)
 800972a:	6819      	ldr	r1, [r3, #0]
 800972c:	b189      	cbz	r1, 8009752 <tcp_getoptbyte+0x2a>
 800972e:	4b0e      	ldr	r3, [pc, #56]	; (8009768 <tcp_getoptbyte+0x40>)
 8009730:	881b      	ldrh	r3, [r3, #0]
 8009732:	4a0e      	ldr	r2, [pc, #56]	; (800976c <tcp_getoptbyte+0x44>)
 8009734:	8812      	ldrh	r2, [r2, #0]
 8009736:	4293      	cmp	r3, r2
 8009738:	d30b      	bcc.n	8009752 <tcp_getoptbyte+0x2a>
{
 800973a:	b410      	push	{r4}
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
    return opts[tcp_optidx++];
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 800973c:	1c5c      	adds	r4, r3, #1
 800973e:	480a      	ldr	r0, [pc, #40]	; (8009768 <tcp_getoptbyte+0x40>)
 8009740:	8004      	strh	r4, [r0, #0]
 8009742:	b2db      	uxtb	r3, r3
 8009744:	b2d2      	uxtb	r2, r2
 8009746:	1a9b      	subs	r3, r3, r2
 8009748:	b2db      	uxtb	r3, r3
    return tcphdr_opt2[idx];
 800974a:	5cc8      	ldrb	r0, [r1, r3]
  }
}
 800974c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009750:	4770      	bx	lr
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 8009752:	4b07      	ldr	r3, [pc, #28]	; (8009770 <tcp_getoptbyte+0x48>)
 8009754:	681b      	ldr	r3, [r3, #0]
    return opts[tcp_optidx++];
 8009756:	4904      	ldr	r1, [pc, #16]	; (8009768 <tcp_getoptbyte+0x40>)
 8009758:	880a      	ldrh	r2, [r1, #0]
 800975a:	1c50      	adds	r0, r2, #1
 800975c:	8008      	strh	r0, [r1, #0]
 800975e:	4413      	add	r3, r2
 8009760:	7d18      	ldrb	r0, [r3, #20]
 8009762:	4770      	bx	lr
 8009764:	20003fbc 	.word	0x20003fbc
 8009768:	20003fb0 	.word	0x20003fb0
 800976c:	20003fb8 	.word	0x20003fb8
 8009770:	20003fb4 	.word	0x20003fb4

08009774 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8009774:	b538      	push	{r3, r4, r5, lr}
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8009776:	4b1f      	ldr	r3, [pc, #124]	; (80097f4 <tcp_parseopt+0x80>)
 8009778:	881b      	ldrh	r3, [r3, #0]
 800977a:	2b00      	cmp	r3, #0
 800977c:	d038      	beq.n	80097f0 <tcp_parseopt+0x7c>
 800977e:	4605      	mov	r5, r0
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8009780:	2200      	movs	r2, #0
 8009782:	4b1d      	ldr	r3, [pc, #116]	; (80097f8 <tcp_parseopt+0x84>)
 8009784:	801a      	strh	r2, [r3, #0]
 8009786:	4b1c      	ldr	r3, [pc, #112]	; (80097f8 <tcp_parseopt+0x84>)
 8009788:	881a      	ldrh	r2, [r3, #0]
 800978a:	4b1a      	ldr	r3, [pc, #104]	; (80097f4 <tcp_parseopt+0x80>)
 800978c:	881b      	ldrh	r3, [r3, #0]
 800978e:	429a      	cmp	r2, r3
 8009790:	d22e      	bcs.n	80097f0 <tcp_parseopt+0x7c>
      u8_t opt = tcp_getoptbyte();
 8009792:	f7ff ffc9 	bl	8009728 <tcp_getoptbyte>
      switch (opt) {
 8009796:	2801      	cmp	r0, #1
 8009798:	d0f5      	beq.n	8009786 <tcp_parseopt+0x12>
 800979a:	b348      	cbz	r0, 80097f0 <tcp_parseopt+0x7c>
 800979c:	2802      	cmp	r0, #2
 800979e:	d11d      	bne.n	80097dc <tcp_parseopt+0x68>
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80097a0:	f7ff ffc2 	bl	8009728 <tcp_getoptbyte>
 80097a4:	2804      	cmp	r0, #4
 80097a6:	d123      	bne.n	80097f0 <tcp_parseopt+0x7c>
 80097a8:	4b13      	ldr	r3, [pc, #76]	; (80097f8 <tcp_parseopt+0x84>)
 80097aa:	881b      	ldrh	r3, [r3, #0]
 80097ac:	3302      	adds	r3, #2
 80097ae:	4a11      	ldr	r2, [pc, #68]	; (80097f4 <tcp_parseopt+0x80>)
 80097b0:	8812      	ldrh	r2, [r2, #0]
 80097b2:	4293      	cmp	r3, r2
 80097b4:	dc1c      	bgt.n	80097f0 <tcp_parseopt+0x7c>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
 80097b6:	f7ff ffb7 	bl	8009728 <tcp_getoptbyte>
 80097ba:	b283      	uxth	r3, r0
 80097bc:	021b      	lsls	r3, r3, #8
 80097be:	b29c      	uxth	r4, r3
        mss |= tcp_getoptbyte();
 80097c0:	f7ff ffb2 	bl	8009728 <tcp_getoptbyte>
 80097c4:	b280      	uxth	r0, r0
 80097c6:	ea44 0300 	orr.w	r3, r4, r0
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80097ca:	1e5a      	subs	r2, r3, #1
 80097cc:	b292      	uxth	r2, r2
 80097ce:	f5b2 7f06 	cmp.w	r2, #536	; 0x218
 80097d2:	d301      	bcc.n	80097d8 <tcp_parseopt+0x64>
 80097d4:	f44f 7306 	mov.w	r3, #536	; 0x218
 80097d8:	866b      	strh	r3, [r5, #50]	; 0x32
        break;
 80097da:	e7d4      	b.n	8009786 <tcp_parseopt+0x12>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
 80097dc:	f7ff ffa4 	bl	8009728 <tcp_getoptbyte>
        if (data < 2) {
 80097e0:	2801      	cmp	r0, #1
 80097e2:	d905      	bls.n	80097f0 <tcp_parseopt+0x7c>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
 80097e4:	4b04      	ldr	r3, [pc, #16]	; (80097f8 <tcp_parseopt+0x84>)
 80097e6:	881a      	ldrh	r2, [r3, #0]
 80097e8:	4410      	add	r0, r2
 80097ea:	3802      	subs	r0, #2
 80097ec:	8018      	strh	r0, [r3, #0]
 80097ee:	e7ca      	b.n	8009786 <tcp_parseopt+0x12>
 80097f0:	bd38      	pop	{r3, r4, r5, pc}
 80097f2:	bf00      	nop
 80097f4:	20003fc0 	.word	0x20003fc0
 80097f8:	20003fb0 	.word	0x20003fb0

080097fc <tcp_input_delayed_close>:
  if (recv_flags & TF_CLOSED) {
 80097fc:	4b0e      	ldr	r3, [pc, #56]	; (8009838 <tcp_input_delayed_close+0x3c>)
 80097fe:	781b      	ldrb	r3, [r3, #0]
 8009800:	f013 0f10 	tst.w	r3, #16
 8009804:	d016      	beq.n	8009834 <tcp_input_delayed_close+0x38>
{
 8009806:	b510      	push	{r4, lr}
 8009808:	4604      	mov	r4, r0
    if (!(pcb->flags & TF_RXCLOSED)) {
 800980a:	7e83      	ldrb	r3, [r0, #26]
 800980c:	f013 0f10 	tst.w	r3, #16
 8009810:	d106      	bne.n	8009820 <tcp_input_delayed_close+0x24>
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8009812:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 8009816:	b11b      	cbz	r3, 8009820 <tcp_input_delayed_close+0x24>
 8009818:	f06f 010e 	mvn.w	r1, #14
 800981c:	6900      	ldr	r0, [r0, #16]
 800981e:	4798      	blx	r3
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8009820:	4621      	mov	r1, r4
 8009822:	4806      	ldr	r0, [pc, #24]	; (800983c <tcp_input_delayed_close+0x40>)
 8009824:	f7ff fbfe 	bl	8009024 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 8009828:	4621      	mov	r1, r4
 800982a:	2001      	movs	r0, #1
 800982c:	f7fe fa78 	bl	8007d20 <memp_free>
    return 1;
 8009830:	2001      	movs	r0, #1
 8009832:	bd10      	pop	{r4, pc}
  return 0;
 8009834:	2000      	movs	r0, #0
 8009836:	4770      	bx	lr
 8009838:	20003fa8 	.word	0x20003fa8
 800983c:	20007984 	.word	0x20007984

08009840 <tcp_timewait_input>:
  if (flags & TCP_RST) {
 8009840:	4b1c      	ldr	r3, [pc, #112]	; (80098b4 <tcp_timewait_input+0x74>)
 8009842:	781b      	ldrb	r3, [r3, #0]
 8009844:	f013 0f04 	tst.w	r3, #4
 8009848:	d132      	bne.n	80098b0 <tcp_timewait_input+0x70>
{
 800984a:	b510      	push	{r4, lr}
 800984c:	b082      	sub	sp, #8
  if (flags & TCP_SYN) {
 800984e:	f013 0f02 	tst.w	r3, #2
 8009852:	d01c      	beq.n	800988e <tcp_timewait_input+0x4e>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8009854:	4b18      	ldr	r3, [pc, #96]	; (80098b8 <tcp_timewait_input+0x78>)
 8009856:	6819      	ldr	r1, [r3, #0]
 8009858:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800985a:	1aca      	subs	r2, r1, r3
 800985c:	2a00      	cmp	r2, #0
 800985e:	db1c      	blt.n	800989a <tcp_timewait_input+0x5a>
 8009860:	8d02      	ldrh	r2, [r0, #40]	; 0x28
 8009862:	4413      	add	r3, r2
 8009864:	1acb      	subs	r3, r1, r3
 8009866:	2b00      	cmp	r3, #0
 8009868:	dc17      	bgt.n	800989a <tcp_timewait_input+0x5a>
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800986a:	4b14      	ldr	r3, [pc, #80]	; (80098bc <tcp_timewait_input+0x7c>)
 800986c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800986e:	4a14      	ldr	r2, [pc, #80]	; (80098c0 <tcp_timewait_input+0x80>)
 8009870:	4814      	ldr	r0, [pc, #80]	; (80098c4 <tcp_timewait_input+0x84>)
 8009872:	8800      	ldrh	r0, [r0, #0]
 8009874:	881c      	ldrh	r4, [r3, #0]
 8009876:	9401      	str	r4, [sp, #4]
 8009878:	885b      	ldrh	r3, [r3, #2]
 800987a:	9300      	str	r3, [sp, #0]
 800987c:	4613      	mov	r3, r2
 800987e:	3204      	adds	r2, #4
 8009880:	4401      	add	r1, r0
 8009882:	4811      	ldr	r0, [pc, #68]	; (80098c8 <tcp_timewait_input+0x88>)
 8009884:	6800      	ldr	r0, [r0, #0]
 8009886:	f002 f9f7 	bl	800bc78 <tcp_rst>
}
 800988a:	b002      	add	sp, #8
 800988c:	bd10      	pop	{r4, pc}
  } else if (flags & TCP_FIN) {
 800988e:	f013 0f01 	tst.w	r3, #1
 8009892:	d002      	beq.n	800989a <tcp_timewait_input+0x5a>
    pcb->tmr = tcp_ticks;
 8009894:	4b0d      	ldr	r3, [pc, #52]	; (80098cc <tcp_timewait_input+0x8c>)
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	6203      	str	r3, [r0, #32]
  if ((tcplen > 0)) {
 800989a:	4b0a      	ldr	r3, [pc, #40]	; (80098c4 <tcp_timewait_input+0x84>)
 800989c:	881b      	ldrh	r3, [r3, #0]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d0f3      	beq.n	800988a <tcp_timewait_input+0x4a>
    pcb->flags |= TF_ACK_NOW;
 80098a2:	7e83      	ldrb	r3, [r0, #26]
 80098a4:	f043 0302 	orr.w	r3, r3, #2
 80098a8:	7683      	strb	r3, [r0, #26]
    tcp_output(pcb);
 80098aa:	f002 f889 	bl	800b9c0 <tcp_output>
 80098ae:	e7ec      	b.n	800988a <tcp_timewait_input+0x4a>
 80098b0:	4770      	bx	lr
 80098b2:	bf00      	nop
 80098b4:	20003f8c 	.word	0x20003f8c
 80098b8:	20003fac 	.word	0x20003fac
 80098bc:	20003fb4 	.word	0x20003fb4
 80098c0:	20004284 	.word	0x20004284
 80098c4:	20003fc2 	.word	0x20003fc2
 80098c8:	20003f88 	.word	0x20003f88
 80098cc:	20007988 	.word	0x20007988

080098d0 <tcp_listen_input>:
  if (flags & TCP_RST) {
 80098d0:	4b3c      	ldr	r3, [pc, #240]	; (80099c4 <tcp_listen_input+0xf4>)
 80098d2:	781b      	ldrb	r3, [r3, #0]
 80098d4:	f013 0f04 	tst.w	r3, #4
 80098d8:	d173      	bne.n	80099c2 <tcp_listen_input+0xf2>
{
 80098da:	b5f0      	push	{r4, r5, r6, r7, lr}
 80098dc:	b083      	sub	sp, #12
 80098de:	4605      	mov	r5, r0
  if (flags & TCP_ACK) {
 80098e0:	f013 0f10 	tst.w	r3, #16
 80098e4:	d104      	bne.n	80098f0 <tcp_listen_input+0x20>
  } else if (flags & TCP_SYN) {
 80098e6:	f013 0f02 	tst.w	r3, #2
 80098ea:	d114      	bne.n	8009916 <tcp_listen_input+0x46>
}
 80098ec:	b003      	add	sp, #12
 80098ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80098f0:	4b35      	ldr	r3, [pc, #212]	; (80099c8 <tcp_listen_input+0xf8>)
 80098f2:	681b      	ldr	r3, [r3, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80098f4:	4a35      	ldr	r2, [pc, #212]	; (80099cc <tcp_listen_input+0xfc>)
 80098f6:	4936      	ldr	r1, [pc, #216]	; (80099d0 <tcp_listen_input+0x100>)
 80098f8:	880c      	ldrh	r4, [r1, #0]
 80098fa:	4936      	ldr	r1, [pc, #216]	; (80099d4 <tcp_listen_input+0x104>)
 80098fc:	6809      	ldr	r1, [r1, #0]
 80098fe:	4836      	ldr	r0, [pc, #216]	; (80099d8 <tcp_listen_input+0x108>)
 8009900:	6800      	ldr	r0, [r0, #0]
 8009902:	881d      	ldrh	r5, [r3, #0]
 8009904:	9501      	str	r5, [sp, #4]
 8009906:	885b      	ldrh	r3, [r3, #2]
 8009908:	9300      	str	r3, [sp, #0]
 800990a:	4613      	mov	r3, r2
 800990c:	3204      	adds	r2, #4
 800990e:	4421      	add	r1, r4
 8009910:	f002 f9b2 	bl	800bc78 <tcp_rst>
 8009914:	e7ea      	b.n	80098ec <tcp_listen_input+0x1c>
    npcb = tcp_alloc(pcb->prio);
 8009916:	7d40      	ldrb	r0, [r0, #21]
 8009918:	f7ff fe58 	bl	80095cc <tcp_alloc>
    if (npcb == NULL) {
 800991c:	4604      	mov	r4, r0
 800991e:	2800      	cmp	r0, #0
 8009920:	d041      	beq.n	80099a6 <tcp_listen_input+0xd6>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8009922:	4b2e      	ldr	r3, [pc, #184]	; (80099dc <tcp_listen_input+0x10c>)
 8009924:	695a      	ldr	r2, [r3, #20]
 8009926:	6002      	str	r2, [r0, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8009928:	691b      	ldr	r3, [r3, #16]
 800992a:	6043      	str	r3, [r0, #4]
    npcb->local_port = pcb->local_port;
 800992c:	8aeb      	ldrh	r3, [r5, #22]
 800992e:	82c3      	strh	r3, [r0, #22]
    npcb->remote_port = tcphdr->src;
 8009930:	4e25      	ldr	r6, [pc, #148]	; (80099c8 <tcp_listen_input+0xf8>)
 8009932:	6833      	ldr	r3, [r6, #0]
 8009934:	881b      	ldrh	r3, [r3, #0]
 8009936:	8303      	strh	r3, [r0, #24]
    npcb->state = SYN_RCVD;
 8009938:	2303      	movs	r3, #3
 800993a:	7503      	strb	r3, [r0, #20]
    npcb->rcv_nxt = seqno + 1;
 800993c:	4f25      	ldr	r7, [pc, #148]	; (80099d4 <tcp_listen_input+0x104>)
 800993e:	683b      	ldr	r3, [r7, #0]
 8009940:	3301      	adds	r3, #1
 8009942:	6243      	str	r3, [r0, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8009944:	62c3      	str	r3, [r0, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8009946:	f7ff fea7 	bl	8009698 <tcp_next_iss>
    npcb->snd_wl2 = iss;
 800994a:	6560      	str	r0, [r4, #84]	; 0x54
    npcb->snd_nxt = iss;
 800994c:	64e0      	str	r0, [r4, #76]	; 0x4c
    npcb->lastack = iss;
 800994e:	6460      	str	r0, [r4, #68]	; 0x44
    npcb->snd_lbb = iss;
 8009950:	65a0      	str	r0, [r4, #88]	; 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8009952:	683b      	ldr	r3, [r7, #0]
 8009954:	3b01      	subs	r3, #1
 8009956:	6523      	str	r3, [r4, #80]	; 0x50
    npcb->callback_arg = pcb->callback_arg;
 8009958:	692b      	ldr	r3, [r5, #16]
 800995a:	6123      	str	r3, [r4, #16]
    npcb->listener = pcb;
 800995c:	67a5      	str	r5, [r4, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800995e:	7a2b      	ldrb	r3, [r5, #8]
 8009960:	f003 030c 	and.w	r3, r3, #12
 8009964:	7223      	strb	r3, [r4, #8]
    TCP_REG_ACTIVE(npcb);
 8009966:	4b1e      	ldr	r3, [pc, #120]	; (80099e0 <tcp_listen_input+0x110>)
 8009968:	681a      	ldr	r2, [r3, #0]
 800996a:	60e2      	str	r2, [r4, #12]
 800996c:	601c      	str	r4, [r3, #0]
 800996e:	f002 fb91 	bl	800c094 <tcp_timer_needed>
 8009972:	2201      	movs	r2, #1
 8009974:	4b1b      	ldr	r3, [pc, #108]	; (80099e4 <tcp_listen_input+0x114>)
 8009976:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8009978:	4620      	mov	r0, r4
 800997a:	f7ff fefb 	bl	8009774 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800997e:	6833      	ldr	r3, [r6, #0]
 8009980:	89db      	ldrh	r3, [r3, #14]
 8009982:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
    npcb->snd_wnd_max = npcb->snd_wnd;
 8009986:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800998a:	1d21      	adds	r1, r4, #4
 800998c:	8e60      	ldrh	r0, [r4, #50]	; 0x32
 800998e:	f7ff fe8f 	bl	80096b0 <tcp_eff_send_mss_impl>
 8009992:	8660      	strh	r0, [r4, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8009994:	2112      	movs	r1, #18
 8009996:	4620      	mov	r0, r4
 8009998:	f001 ff02 	bl	800b7a0 <tcp_enqueue_flags>
    if (rc != ERR_OK) {
 800999c:	b960      	cbnz	r0, 80099b8 <tcp_listen_input+0xe8>
    tcp_output(npcb);
 800999e:	4620      	mov	r0, r4
 80099a0:	f002 f80e 	bl	800b9c0 <tcp_output>
 80099a4:	e7a2      	b.n	80098ec <tcp_listen_input+0x1c>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80099a6:	69ab      	ldr	r3, [r5, #24]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d09f      	beq.n	80098ec <tcp_listen_input+0x1c>
 80099ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80099b0:	2100      	movs	r1, #0
 80099b2:	6928      	ldr	r0, [r5, #16]
 80099b4:	4798      	blx	r3
 80099b6:	e799      	b.n	80098ec <tcp_listen_input+0x1c>
      tcp_abandon(npcb, 0);
 80099b8:	2100      	movs	r1, #0
 80099ba:	4620      	mov	r0, r4
 80099bc:	f7ff fd02 	bl	80093c4 <tcp_abandon>
      return;
 80099c0:	e794      	b.n	80098ec <tcp_listen_input+0x1c>
 80099c2:	4770      	bx	lr
 80099c4:	20003f8c 	.word	0x20003f8c
 80099c8:	20003fb4 	.word	0x20003fb4
 80099cc:	20004284 	.word	0x20004284
 80099d0:	20003fc2 	.word	0x20003fc2
 80099d4:	20003fac 	.word	0x20003fac
 80099d8:	20003f88 	.word	0x20003f88
 80099dc:	20004274 	.word	0x20004274
 80099e0:	20007984 	.word	0x20007984
 80099e4:	20007980 	.word	0x20007980

080099e8 <tcp_oos_insert_segment>:
{
 80099e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099ea:	4605      	mov	r5, r0
 80099ec:	460c      	mov	r4, r1
  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80099ee:	68c3      	ldr	r3, [r0, #12]
 80099f0:	8998      	ldrh	r0, [r3, #12]
 80099f2:	f7fc fb4f 	bl	8006094 <lwip_htons>
 80099f6:	f010 0f01 	tst.w	r0, #1
 80099fa:	d009      	beq.n	8009a10 <tcp_oos_insert_segment+0x28>
    tcp_segs_free(next);
 80099fc:	4620      	mov	r0, r4
 80099fe:	f7ff f85e 	bl	8008abe <tcp_segs_free>
    next = NULL;
 8009a02:	2400      	movs	r4, #0
 8009a04:	e02e      	b.n	8009a64 <tcp_oos_insert_segment+0x7c>
      next = next->next;
 8009a06:	6826      	ldr	r6, [r4, #0]
      tcp_seg_free(old_seg);
 8009a08:	4620      	mov	r0, r4
 8009a0a:	f7ff f84b 	bl	8008aa4 <tcp_seg_free>
      next = next->next;
 8009a0e:	4634      	mov	r4, r6
    while (next &&
 8009a10:	b1c4      	cbz	r4, 8009a44 <tcp_oos_insert_segment+0x5c>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8009a12:	892b      	ldrh	r3, [r5, #8]
 8009a14:	4a14      	ldr	r2, [pc, #80]	; (8009a68 <tcp_oos_insert_segment+0x80>)
 8009a16:	6812      	ldr	r2, [r2, #0]
 8009a18:	4413      	add	r3, r2
 8009a1a:	68e1      	ldr	r1, [r4, #12]
 8009a1c:	684a      	ldr	r2, [r1, #4]
 8009a1e:	8920      	ldrh	r0, [r4, #8]
 8009a20:	4402      	add	r2, r0
 8009a22:	1a9b      	subs	r3, r3, r2
    while (next &&
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	db0d      	blt.n	8009a44 <tcp_oos_insert_segment+0x5c>
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8009a28:	8988      	ldrh	r0, [r1, #12]
 8009a2a:	f7fc fb33 	bl	8006094 <lwip_htons>
 8009a2e:	f010 0f01 	tst.w	r0, #1
 8009a32:	d0e8      	beq.n	8009a06 <tcp_oos_insert_segment+0x1e>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8009a34:	68ef      	ldr	r7, [r5, #12]
 8009a36:	89be      	ldrh	r6, [r7, #12]
 8009a38:	2001      	movs	r0, #1
 8009a3a:	f7fc fb2b 	bl	8006094 <lwip_htons>
 8009a3e:	4330      	orrs	r0, r6
 8009a40:	81b8      	strh	r0, [r7, #12]
 8009a42:	e7e0      	b.n	8009a06 <tcp_oos_insert_segment+0x1e>
    if (next &&
 8009a44:	b174      	cbz	r4, 8009a64 <tcp_oos_insert_segment+0x7c>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8009a46:	892b      	ldrh	r3, [r5, #8]
 8009a48:	4a07      	ldr	r2, [pc, #28]	; (8009a68 <tcp_oos_insert_segment+0x80>)
 8009a4a:	6811      	ldr	r1, [r2, #0]
 8009a4c:	440b      	add	r3, r1
 8009a4e:	68e2      	ldr	r2, [r4, #12]
 8009a50:	6852      	ldr	r2, [r2, #4]
 8009a52:	1a9b      	subs	r3, r3, r2
    if (next &&
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	dd05      	ble.n	8009a64 <tcp_oos_insert_segment+0x7c>
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8009a58:	1a52      	subs	r2, r2, r1
 8009a5a:	b291      	uxth	r1, r2
 8009a5c:	8129      	strh	r1, [r5, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8009a5e:	6868      	ldr	r0, [r5, #4]
 8009a60:	f7fe fc88 	bl	8008374 <pbuf_realloc>
  cseg->next = next;
 8009a64:	602c      	str	r4, [r5, #0]
 8009a66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a68:	20003fac 	.word	0x20003fac

08009a6c <tcp_receive>:
{
 8009a6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a70:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8009a72:	7d03      	ldrb	r3, [r0, #20]
 8009a74:	2b03      	cmp	r3, #3
 8009a76:	d979      	bls.n	8009b6c <tcp_receive+0x100>
  if (flags & TCP_ACK) {
 8009a78:	4bae      	ldr	r3, [pc, #696]	; (8009d34 <tcp_receive+0x2c8>)
 8009a7a:	781b      	ldrb	r3, [r3, #0]
 8009a7c:	f013 0f10 	tst.w	r3, #16
 8009a80:	f000 81aa 	beq.w	8009dd8 <tcp_receive+0x36c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8009a84:	f8b4 005c 	ldrh.w	r0, [r4, #92]	; 0x5c
 8009a88:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8009a8a:	1886      	adds	r6, r0, r2
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8009a8c:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8009a8e:	4baa      	ldr	r3, [pc, #680]	; (8009d38 <tcp_receive+0x2cc>)
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	1acd      	subs	r5, r1, r3
 8009a94:	2d00      	cmp	r5, #0
 8009a96:	db7c      	blt.n	8009b92 <tcp_receive+0x126>
 8009a98:	4299      	cmp	r1, r3
 8009a9a:	d06f      	beq.n	8009b7c <tcp_receive+0x110>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8009a9c:	49a7      	ldr	r1, [pc, #668]	; (8009d3c <tcp_receive+0x2d0>)
 8009a9e:	6809      	ldr	r1, [r1, #0]
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009aa0:	428a      	cmp	r2, r1
 8009aa2:	d071      	beq.n	8009b88 <tcp_receive+0x11c>
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8009aa4:	4ba5      	ldr	r3, [pc, #660]	; (8009d3c <tcp_receive+0x2d0>)
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8009aaa:	1a5a      	subs	r2, r3, r1
 8009aac:	2a00      	cmp	r2, #0
 8009aae:	f340 8095 	ble.w	8009bdc <tcp_receive+0x170>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 8009ab2:	2a01      	cmp	r2, #1
 8009ab4:	d404      	bmi.n	8009ac0 <tcp_receive+0x54>
 8009ab6:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8009ab8:	1a9a      	subs	r2, r3, r2
 8009aba:	2a00      	cmp	r2, #0
 8009abc:	f340 80cc 	ble.w	8009c58 <tcp_receive+0x1ec>
      tcp_send_empty_ack(pcb);
 8009ac0:	4620      	mov	r0, r4
 8009ac2:	f001 ff43 	bl	800b94c <tcp_send_empty_ack>
    while (pcb->unsent != NULL &&
 8009ac6:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	f000 8176 	beq.w	8009dba <tcp_receive+0x34e>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8009ace:	4a9b      	ldr	r2, [pc, #620]	; (8009d3c <tcp_receive+0x2d0>)
 8009ad0:	6815      	ldr	r5, [r2, #0]
 8009ad2:	68db      	ldr	r3, [r3, #12]
 8009ad4:	6858      	ldr	r0, [r3, #4]
 8009ad6:	f7fc fae0 	bl	800609a <lwip_htonl>
 8009ada:	4606      	mov	r6, r0
 8009adc:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8009ade:	891f      	ldrh	r7, [r3, #8]
 8009ae0:	68db      	ldr	r3, [r3, #12]
 8009ae2:	8998      	ldrh	r0, [r3, #12]
 8009ae4:	f7fc fad6 	bl	8006094 <lwip_htons>
 8009ae8:	f010 0f03 	tst.w	r0, #3
 8009aec:	f000 8163 	beq.w	8009db6 <tcp_receive+0x34a>
 8009af0:	2301      	movs	r3, #1
 8009af2:	443b      	add	r3, r7
 8009af4:	441e      	add	r6, r3
 8009af6:	1bad      	subs	r5, r5, r6
    while (pcb->unsent != NULL &&
 8009af8:	2d00      	cmp	r5, #0
 8009afa:	f2c0 815e 	blt.w	8009dba <tcp_receive+0x34e>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8009afe:	4b8f      	ldr	r3, [pc, #572]	; (8009d3c <tcp_receive+0x2d0>)
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8009b04:	1a9b      	subs	r3, r3, r2
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	f300 8157 	bgt.w	8009dba <tcp_receive+0x34e>
      next = pcb->unsent;
 8009b0c:	6ea5      	ldr	r5, [r4, #104]	; 0x68
      pcb->unsent = pcb->unsent->next;
 8009b0e:	682b      	ldr	r3, [r5, #0]
 8009b10:	66a3      	str	r3, [r4, #104]	; 0x68
      if (pcb->unsent == NULL) {
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	f000 8144 	beq.w	8009da0 <tcp_receive+0x334>
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8009b18:	f8b4 6062 	ldrh.w	r6, [r4, #98]	; 0x62
 8009b1c:	6868      	ldr	r0, [r5, #4]
 8009b1e:	f7fe fc9b 	bl	8008458 <pbuf_clen>
 8009b22:	4286      	cmp	r6, r0
 8009b24:	f0c0 813f 	bcc.w	8009da6 <tcp_receive+0x33a>
      pcb->snd_queuelen -= pbuf_clen(next->p);
 8009b28:	6868      	ldr	r0, [r5, #4]
 8009b2a:	f7fe fc95 	bl	8008458 <pbuf_clen>
 8009b2e:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8009b32:	1a18      	subs	r0, r3, r0
 8009b34:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
      recv_acked += next->len;
 8009b38:	892b      	ldrh	r3, [r5, #8]
 8009b3a:	4a81      	ldr	r2, [pc, #516]	; (8009d40 <tcp_receive+0x2d4>)
 8009b3c:	8811      	ldrh	r1, [r2, #0]
 8009b3e:	440b      	add	r3, r1
 8009b40:	8013      	strh	r3, [r2, #0]
      tcp_seg_free(next);
 8009b42:	4628      	mov	r0, r5
 8009b44:	f7fe ffae 	bl	8008aa4 <tcp_seg_free>
      if (pcb->snd_queuelen != 0) {
 8009b48:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d0ba      	beq.n	8009ac6 <tcp_receive+0x5a>
        LWIP_ASSERT("tcp_receive: valid queue length",
 8009b50:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d1b7      	bne.n	8009ac6 <tcp_receive+0x5a>
 8009b56:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d1b4      	bne.n	8009ac6 <tcp_receive+0x5a>
 8009b5c:	4b79      	ldr	r3, [pc, #484]	; (8009d44 <tcp_receive+0x2d8>)
 8009b5e:	f240 42dd 	movw	r2, #1245	; 0x4dd
 8009b62:	4979      	ldr	r1, [pc, #484]	; (8009d48 <tcp_receive+0x2dc>)
 8009b64:	4879      	ldr	r0, [pc, #484]	; (8009d4c <tcp_receive+0x2e0>)
 8009b66:	f003 fd48 	bl	800d5fa <iprintf>
 8009b6a:	e7ac      	b.n	8009ac6 <tcp_receive+0x5a>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8009b6c:	4b75      	ldr	r3, [pc, #468]	; (8009d44 <tcp_receive+0x2d8>)
 8009b6e:	f44f 6281 	mov.w	r2, #1032	; 0x408
 8009b72:	4977      	ldr	r1, [pc, #476]	; (8009d50 <tcp_receive+0x2e4>)
 8009b74:	4875      	ldr	r0, [pc, #468]	; (8009d4c <tcp_receive+0x2e0>)
 8009b76:	f003 fd40 	bl	800d5fa <iprintf>
 8009b7a:	e77d      	b.n	8009a78 <tcp_receive+0xc>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009b7c:	496f      	ldr	r1, [pc, #444]	; (8009d3c <tcp_receive+0x2d0>)
 8009b7e:	6809      	ldr	r1, [r1, #0]
 8009b80:	1a51      	subs	r1, r2, r1
 8009b82:	2900      	cmp	r1, #0
 8009b84:	da8a      	bge.n	8009a9c <tcp_receive+0x30>
 8009b86:	e004      	b.n	8009b92 <tcp_receive+0x126>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8009b88:	4a72      	ldr	r2, [pc, #456]	; (8009d54 <tcp_receive+0x2e8>)
 8009b8a:	6812      	ldr	r2, [r2, #0]
 8009b8c:	89d2      	ldrh	r2, [r2, #14]
 8009b8e:	4290      	cmp	r0, r2
 8009b90:	d288      	bcs.n	8009aa4 <tcp_receive+0x38>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8009b92:	4a70      	ldr	r2, [pc, #448]	; (8009d54 <tcp_receive+0x2e8>)
 8009b94:	6812      	ldr	r2, [r2, #0]
 8009b96:	89d2      	ldrh	r2, [r2, #14]
 8009b98:	b291      	uxth	r1, r2
 8009b9a:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8009b9e:	f8b4 005e 	ldrh.w	r0, [r4, #94]	; 0x5e
 8009ba2:	4281      	cmp	r1, r0
 8009ba4:	d901      	bls.n	8009baa <tcp_receive+0x13e>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8009ba6:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
      pcb->snd_wl1 = seqno;
 8009baa:	6523      	str	r3, [r4, #80]	; 0x50
      pcb->snd_wl2 = ackno;
 8009bac:	4b63      	ldr	r3, [pc, #396]	; (8009d3c <tcp_receive+0x2d0>)
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	6563      	str	r3, [r4, #84]	; 0x54
      if (pcb->snd_wnd == 0) {
 8009bb2:	b951      	cbnz	r1, 8009bca <tcp_receive+0x15e>
        if (pcb->persist_backoff == 0) {
 8009bb4:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	f47f af73 	bne.w	8009aa4 <tcp_receive+0x38>
          pcb->persist_cnt = 0;
 8009bbe:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
          pcb->persist_backoff = 1;
 8009bc2:	2301      	movs	r3, #1
 8009bc4:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
 8009bc8:	e76c      	b.n	8009aa4 <tcp_receive+0x38>
      } else if (pcb->persist_backoff > 0) {
 8009bca:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	f43f af68 	beq.w	8009aa4 <tcp_receive+0x38>
          pcb->persist_backoff = 0;
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
 8009bda:	e763      	b.n	8009aa4 <tcp_receive+0x38>
      if (tcplen == 0) {
 8009bdc:	4a5e      	ldr	r2, [pc, #376]	; (8009d58 <tcp_receive+0x2ec>)
 8009bde:	8812      	ldrh	r2, [r2, #0]
 8009be0:	bb7a      	cbnz	r2, 8009c42 <tcp_receive+0x1d6>
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8009be2:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8009be4:	f8b4 005c 	ldrh.w	r0, [r4, #92]	; 0x5c
 8009be8:	4402      	add	r2, r0
 8009bea:	4296      	cmp	r6, r2
 8009bec:	d001      	beq.n	8009bf2 <tcp_receive+0x186>
  int found_dupack = 0;
 8009bee:	2300      	movs	r3, #0
 8009bf0:	e028      	b.n	8009c44 <tcp_receive+0x1d8>
          if (pcb->rtime >= 0) {
 8009bf2:	f9b4 2030 	ldrsh.w	r2, [r4, #48]	; 0x30
 8009bf6:	2a00      	cmp	r2, #0
 8009bf8:	db2a      	blt.n	8009c50 <tcp_receive+0x1e4>
            if (pcb->lastack == ackno) {
 8009bfa:	428b      	cmp	r3, r1
 8009bfc:	d001      	beq.n	8009c02 <tcp_receive+0x196>
  int found_dupack = 0;
 8009bfe:	2300      	movs	r3, #0
 8009c00:	e020      	b.n	8009c44 <tcp_receive+0x1d8>
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8009c02:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009c06:	1c53      	adds	r3, r2, #1
 8009c08:	b2db      	uxtb	r3, r3
 8009c0a:	429a      	cmp	r2, r3
 8009c0c:	d201      	bcs.n	8009c12 <tcp_receive+0x1a6>
                ++pcb->dupacks;
 8009c0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
              if (pcb->dupacks > 3) {
 8009c12:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8009c16:	2b03      	cmp	r3, #3
 8009c18:	d90a      	bls.n	8009c30 <tcp_receive+0x1c4>
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 8009c1a:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 8009c1e:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8009c20:	4413      	add	r3, r2
 8009c22:	b29b      	uxth	r3, r3
 8009c24:	429a      	cmp	r2, r3
 8009c26:	d215      	bcs.n	8009c54 <tcp_receive+0x1e8>
                  pcb->cwnd += pcb->mss;
 8009c28:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
              found_dupack = 1;
 8009c2c:	2301      	movs	r3, #1
 8009c2e:	e009      	b.n	8009c44 <tcp_receive+0x1d8>
              } else if (pcb->dupacks == 3) {
 8009c30:	2b03      	cmp	r3, #3
 8009c32:	d001      	beq.n	8009c38 <tcp_receive+0x1cc>
              found_dupack = 1;
 8009c34:	2301      	movs	r3, #1
 8009c36:	e005      	b.n	8009c44 <tcp_receive+0x1d8>
                tcp_rexmit_fast(pcb);
 8009c38:	4620      	mov	r0, r4
 8009c3a:	f002 f8b8 	bl	800bdae <tcp_rexmit_fast>
              found_dupack = 1;
 8009c3e:	2301      	movs	r3, #1
 8009c40:	e000      	b.n	8009c44 <tcp_receive+0x1d8>
  int found_dupack = 0;
 8009c42:	2300      	movs	r3, #0
      if (!found_dupack) {
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	f47f af3e 	bne.w	8009ac6 <tcp_receive+0x5a>
        pcb->dupacks = 0;
 8009c4a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c4e:	e73a      	b.n	8009ac6 <tcp_receive+0x5a>
  int found_dupack = 0;
 8009c50:	2300      	movs	r3, #0
 8009c52:	e7f7      	b.n	8009c44 <tcp_receive+0x1d8>
              found_dupack = 1;
 8009c54:	2301      	movs	r3, #1
 8009c56:	e7f5      	b.n	8009c44 <tcp_receive+0x1d8>
      if (pcb->flags & TF_INFR) {
 8009c58:	7ea2      	ldrb	r2, [r4, #26]
 8009c5a:	f012 0f04 	tst.w	r2, #4
 8009c5e:	d006      	beq.n	8009c6e <tcp_receive+0x202>
        pcb->flags &= ~TF_INFR;
 8009c60:	f022 0204 	bic.w	r2, r2, #4
 8009c64:	76a2      	strb	r2, [r4, #26]
        pcb->cwnd = pcb->ssthresh;
 8009c66:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
 8009c6a:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
      pcb->nrtx = 0;
 8009c6e:	2100      	movs	r1, #0
 8009c70:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8009c74:	f9b4 003c 	ldrsh.w	r0, [r4, #60]	; 0x3c
 8009c78:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8009c7a:	eb02 02e0 	add.w	r2, r2, r0, asr #3
 8009c7e:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
      pcb->dupacks = 0;
 8009c82:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
      pcb->lastack = ackno;
 8009c86:	6463      	str	r3, [r4, #68]	; 0x44
      if (pcb->state >= ESTABLISHED) {
 8009c88:	7d23      	ldrb	r3, [r4, #20]
 8009c8a:	2b03      	cmp	r3, #3
 8009c8c:	d90c      	bls.n	8009ca8 <tcp_receive+0x23c>
        if (pcb->cwnd < pcb->ssthresh) {
 8009c8e:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 8009c92:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
 8009c96:	429a      	cmp	r2, r3
 8009c98:	d260      	bcs.n	8009d5c <tcp_receive+0x2f0>
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 8009c9a:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8009c9c:	4413      	add	r3, r2
 8009c9e:	b29b      	uxth	r3, r3
 8009ca0:	429a      	cmp	r2, r3
 8009ca2:	d201      	bcs.n	8009ca8 <tcp_receive+0x23c>
            pcb->cwnd += pcb->mss;
 8009ca4:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      while (pcb->unacked != NULL &&
 8009ca8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d06d      	beq.n	8009d8a <tcp_receive+0x31e>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 8009cae:	68db      	ldr	r3, [r3, #12]
 8009cb0:	6858      	ldr	r0, [r3, #4]
 8009cb2:	f7fc f9f2 	bl	800609a <lwip_htonl>
 8009cb6:	4605      	mov	r5, r0
 8009cb8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8009cba:	891e      	ldrh	r6, [r3, #8]
 8009cbc:	68db      	ldr	r3, [r3, #12]
 8009cbe:	8998      	ldrh	r0, [r3, #12]
 8009cc0:	f7fc f9e8 	bl	8006094 <lwip_htons>
 8009cc4:	f010 0f03 	tst.w	r0, #3
 8009cc8:	d05d      	beq.n	8009d86 <tcp_receive+0x31a>
 8009cca:	2301      	movs	r3, #1
 8009ccc:	4433      	add	r3, r6
 8009cce:	441d      	add	r5, r3
 8009cd0:	4b1a      	ldr	r3, [pc, #104]	; (8009d3c <tcp_receive+0x2d0>)
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	1aed      	subs	r5, r5, r3
      while (pcb->unacked != NULL &&
 8009cd6:	2d00      	cmp	r5, #0
 8009cd8:	dc57      	bgt.n	8009d8a <tcp_receive+0x31e>
        next = pcb->unacked;
 8009cda:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
        pcb->unacked = pcb->unacked->next;
 8009cdc:	682b      	ldr	r3, [r5, #0]
 8009cde:	66e3      	str	r3, [r4, #108]	; 0x6c
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8009ce0:	f8b4 6062 	ldrh.w	r6, [r4, #98]	; 0x62
 8009ce4:	6868      	ldr	r0, [r5, #4]
 8009ce6:	f7fe fbb7 	bl	8008458 <pbuf_clen>
 8009cea:	4286      	cmp	r6, r0
 8009cec:	d343      	bcc.n	8009d76 <tcp_receive+0x30a>
        pcb->snd_queuelen -= pbuf_clen(next->p);
 8009cee:	6868      	ldr	r0, [r5, #4]
 8009cf0:	f7fe fbb2 	bl	8008458 <pbuf_clen>
 8009cf4:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8009cf8:	1a18      	subs	r0, r3, r0
 8009cfa:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
        recv_acked += next->len;
 8009cfe:	892b      	ldrh	r3, [r5, #8]
 8009d00:	4a0f      	ldr	r2, [pc, #60]	; (8009d40 <tcp_receive+0x2d4>)
 8009d02:	8811      	ldrh	r1, [r2, #0]
 8009d04:	440b      	add	r3, r1
 8009d06:	8013      	strh	r3, [r2, #0]
        tcp_seg_free(next);
 8009d08:	4628      	mov	r0, r5
 8009d0a:	f7fe fecb 	bl	8008aa4 <tcp_seg_free>
        if (pcb->snd_queuelen != 0) {
 8009d0e:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d0c8      	beq.n	8009ca8 <tcp_receive+0x23c>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 8009d16:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d1c5      	bne.n	8009ca8 <tcp_receive+0x23c>
 8009d1c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d1c2      	bne.n	8009ca8 <tcp_receive+0x23c>
 8009d22:	4b08      	ldr	r3, [pc, #32]	; (8009d44 <tcp_receive+0x2d8>)
 8009d24:	f240 42a7 	movw	r2, #1191	; 0x4a7
 8009d28:	4907      	ldr	r1, [pc, #28]	; (8009d48 <tcp_receive+0x2dc>)
 8009d2a:	4808      	ldr	r0, [pc, #32]	; (8009d4c <tcp_receive+0x2e0>)
 8009d2c:	f003 fc65 	bl	800d5fa <iprintf>
 8009d30:	e7ba      	b.n	8009ca8 <tcp_receive+0x23c>
 8009d32:	bf00      	nop
 8009d34:	20003f8c 	.word	0x20003f8c
 8009d38:	20003fac 	.word	0x20003fac
 8009d3c:	20003f88 	.word	0x20003f88
 8009d40:	20003fa0 	.word	0x20003fa0
 8009d44:	0800f850 	.word	0x0800f850
 8009d48:	0800f8c8 	.word	0x0800f8c8
 8009d4c:	0800de34 	.word	0x0800de34
 8009d50:	0800f884 	.word	0x0800f884
 8009d54:	20003fb4 	.word	0x20003fb4
 8009d58:	20003fc2 	.word	0x20003fc2
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 8009d5c:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8009d5e:	fb03 f303 	mul.w	r3, r3, r3
 8009d62:	fb93 f3f2 	sdiv	r3, r3, r2
 8009d66:	fa12 f383 	uxtah	r3, r2, r3
 8009d6a:	b29b      	uxth	r3, r3
          if (new_cwnd > pcb->cwnd) {
 8009d6c:	429a      	cmp	r2, r3
 8009d6e:	d29b      	bcs.n	8009ca8 <tcp_receive+0x23c>
            pcb->cwnd = new_cwnd;
 8009d70:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
 8009d74:	e798      	b.n	8009ca8 <tcp_receive+0x23c>
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8009d76:	4ba2      	ldr	r3, [pc, #648]	; (800a000 <tcp_receive+0x594>)
 8009d78:	f240 429e 	movw	r2, #1182	; 0x49e
 8009d7c:	49a1      	ldr	r1, [pc, #644]	; (800a004 <tcp_receive+0x598>)
 8009d7e:	48a2      	ldr	r0, [pc, #648]	; (800a008 <tcp_receive+0x59c>)
 8009d80:	f003 fc3b 	bl	800d5fa <iprintf>
 8009d84:	e7b3      	b.n	8009cee <tcp_receive+0x282>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 8009d86:	2300      	movs	r3, #0
 8009d88:	e7a0      	b.n	8009ccc <tcp_receive+0x260>
      if (pcb->unacked == NULL) {
 8009d8a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8009d8c:	b123      	cbz	r3, 8009d98 <tcp_receive+0x32c>
        pcb->rtime = 0;
 8009d8e:	2300      	movs	r3, #0
 8009d90:	8623      	strh	r3, [r4, #48]	; 0x30
      pcb->polltmr = 0;
 8009d92:	2300      	movs	r3, #0
 8009d94:	76e3      	strb	r3, [r4, #27]
 8009d96:	e696      	b.n	8009ac6 <tcp_receive+0x5a>
        pcb->rtime = -1;
 8009d98:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009d9c:	8623      	strh	r3, [r4, #48]	; 0x30
 8009d9e:	e7f8      	b.n	8009d92 <tcp_receive+0x326>
        pcb->unsent_oversize = 0;
 8009da0:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
 8009da4:	e6b8      	b.n	8009b18 <tcp_receive+0xac>
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8009da6:	4b96      	ldr	r3, [pc, #600]	; (800a000 <tcp_receive+0x594>)
 8009da8:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8009dac:	4995      	ldr	r1, [pc, #596]	; (800a004 <tcp_receive+0x598>)
 8009dae:	4896      	ldr	r0, [pc, #600]	; (800a008 <tcp_receive+0x59c>)
 8009db0:	f003 fc23 	bl	800d5fa <iprintf>
 8009db4:	e6b8      	b.n	8009b28 <tcp_receive+0xbc>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8009db6:	2300      	movs	r3, #0
 8009db8:	e69b      	b.n	8009af2 <tcp_receive+0x86>
    pcb->snd_buf += recv_acked;
 8009dba:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 8009dbe:	4a93      	ldr	r2, [pc, #588]	; (800a00c <tcp_receive+0x5a0>)
 8009dc0:	8812      	ldrh	r2, [r2, #0]
 8009dc2:	4413      	add	r3, r2
 8009dc4:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8009dc8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009dca:	b12b      	cbz	r3, 8009dd8 <tcp_receive+0x36c>
 8009dcc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8009dce:	4990      	ldr	r1, [pc, #576]	; (800a010 <tcp_receive+0x5a4>)
 8009dd0:	6809      	ldr	r1, [r1, #0]
 8009dd2:	1a52      	subs	r2, r2, r1
 8009dd4:	2a00      	cmp	r2, #0
 8009dd6:	db29      	blt.n	8009e2c <tcp_receive+0x3c0>
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8009dd8:	4b8e      	ldr	r3, [pc, #568]	; (800a014 <tcp_receive+0x5a8>)
 8009dda:	881b      	ldrh	r3, [r3, #0]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	f000 834b 	beq.w	800a478 <tcp_receive+0xa0c>
 8009de2:	7d22      	ldrb	r2, [r4, #20]
 8009de4:	2a06      	cmp	r2, #6
 8009de6:	f200 8347 	bhi.w	800a478 <tcp_receive+0xa0c>
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8009dea:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009dec:	4a8a      	ldr	r2, [pc, #552]	; (800a018 <tcp_receive+0x5ac>)
 8009dee:	6812      	ldr	r2, [r2, #0]
 8009df0:	1a8e      	subs	r6, r1, r2
 8009df2:	2e01      	cmp	r6, #1
 8009df4:	d404      	bmi.n	8009e00 <tcp_receive+0x394>
 8009df6:	4413      	add	r3, r2
 8009df8:	1acb      	subs	r3, r1, r3
 8009dfa:	3301      	adds	r3, #1
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	dd36      	ble.n	8009e6e <tcp_receive+0x402>
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8009e00:	1a52      	subs	r2, r2, r1
 8009e02:	2a00      	cmp	r2, #0
 8009e04:	f2c0 8093 	blt.w	8009f2e <tcp_receive+0x4c2>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8009e08:	4b83      	ldr	r3, [pc, #524]	; (800a018 <tcp_receive+0x5ac>)
 8009e0a:	6819      	ldr	r1, [r3, #0]
 8009e0c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8009e0e:	1a8b      	subs	r3, r1, r2
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	db06      	blt.n	8009e22 <tcp_receive+0x3b6>
 8009e14:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8009e16:	4413      	add	r3, r2
 8009e18:	1acb      	subs	r3, r1, r3
 8009e1a:	3301      	adds	r3, #1
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	f340 808b 	ble.w	8009f38 <tcp_receive+0x4cc>
      tcp_send_empty_ack(pcb);
 8009e22:	4620      	mov	r0, r4
 8009e24:	f001 fd92 	bl	800b94c <tcp_send_empty_ack>
 8009e28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8009e2c:	4a7b      	ldr	r2, [pc, #492]	; (800a01c <tcp_receive+0x5b0>)
 8009e2e:	6812      	ldr	r2, [r2, #0]
 8009e30:	1ad2      	subs	r2, r2, r3
 8009e32:	b292      	uxth	r2, r2
      m = m - (pcb->sa >> 3);
 8009e34:	f9b4 103c 	ldrsh.w	r1, [r4, #60]	; 0x3c
 8009e38:	eba2 02e1 	sub.w	r2, r2, r1, asr #3
 8009e3c:	b292      	uxth	r2, r2
 8009e3e:	b213      	sxth	r3, r2
      pcb->sa += m;
 8009e40:	4411      	add	r1, r2
 8009e42:	b209      	sxth	r1, r1
 8009e44:	87a1      	strh	r1, [r4, #60]	; 0x3c
      if (m < 0) {
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	db0e      	blt.n	8009e68 <tcp_receive+0x3fc>
      m = m - (pcb->sv >> 2);
 8009e4a:	f9b4 203e 	ldrsh.w	r2, [r4, #62]	; 0x3e
 8009e4e:	eba3 03a2 	sub.w	r3, r3, r2, asr #2
      pcb->sv += m;
 8009e52:	fa12 f383 	uxtah	r3, r2, r3
 8009e56:	b29b      	uxth	r3, r3
 8009e58:	87e3      	strh	r3, [r4, #62]	; 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8009e5a:	eb03 03e1 	add.w	r3, r3, r1, asr #3
 8009e5e:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
      pcb->rttest = 0;
 8009e62:	2300      	movs	r3, #0
 8009e64:	6363      	str	r3, [r4, #52]	; 0x34
 8009e66:	e7b7      	b.n	8009dd8 <tcp_receive+0x36c>
        m = -m;
 8009e68:	4253      	negs	r3, r2
 8009e6a:	b21b      	sxth	r3, r3
 8009e6c:	e7ed      	b.n	8009e4a <tcp_receive+0x3de>
      struct pbuf *p = inseg.p;
 8009e6e:	4b6c      	ldr	r3, [pc, #432]	; (800a020 <tcp_receive+0x5b4>)
 8009e70:	685d      	ldr	r5, [r3, #4]
      off = pcb->rcv_nxt - seqno;
 8009e72:	4637      	mov	r7, r6
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8009e74:	b195      	cbz	r5, 8009e9c <tcp_receive+0x430>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 8009e76:	f647 73fe 	movw	r3, #32766	; 0x7ffe
 8009e7a:	429e      	cmp	r6, r3
 8009e7c:	dc16      	bgt.n	8009eac <tcp_receive+0x440>
      if (inseg.p->len < off) {
 8009e7e:	4b68      	ldr	r3, [pc, #416]	; (800a020 <tcp_receive+0x5b4>)
 8009e80:	6858      	ldr	r0, [r3, #4]
 8009e82:	8943      	ldrh	r3, [r0, #10]
 8009e84:	429e      	cmp	r6, r3
 8009e86:	dd44      	ble.n	8009f12 <tcp_receive+0x4a6>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8009e88:	8903      	ldrh	r3, [r0, #8]
 8009e8a:	429e      	cmp	r6, r3
 8009e8c:	dc16      	bgt.n	8009ebc <tcp_receive+0x450>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8009e8e:	4b64      	ldr	r3, [pc, #400]	; (800a020 <tcp_receive+0x5b4>)
 8009e90:	685b      	ldr	r3, [r3, #4]
 8009e92:	891a      	ldrh	r2, [r3, #8]
 8009e94:	b2b6      	uxth	r6, r6
 8009e96:	1b92      	subs	r2, r2, r6
 8009e98:	b292      	uxth	r2, r2
        while (p->len < off) {
 8009e9a:	e01c      	b.n	8009ed6 <tcp_receive+0x46a>
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8009e9c:	4b58      	ldr	r3, [pc, #352]	; (800a000 <tcp_receive+0x594>)
 8009e9e:	f240 523c 	movw	r2, #1340	; 0x53c
 8009ea2:	4960      	ldr	r1, [pc, #384]	; (800a024 <tcp_receive+0x5b8>)
 8009ea4:	4858      	ldr	r0, [pc, #352]	; (800a008 <tcp_receive+0x59c>)
 8009ea6:	f003 fba8 	bl	800d5fa <iprintf>
 8009eaa:	e7e4      	b.n	8009e76 <tcp_receive+0x40a>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 8009eac:	4b54      	ldr	r3, [pc, #336]	; (800a000 <tcp_receive+0x594>)
 8009eae:	f240 523d 	movw	r2, #1341	; 0x53d
 8009eb2:	495d      	ldr	r1, [pc, #372]	; (800a028 <tcp_receive+0x5bc>)
 8009eb4:	4854      	ldr	r0, [pc, #336]	; (800a008 <tcp_receive+0x59c>)
 8009eb6:	f003 fba0 	bl	800d5fa <iprintf>
 8009eba:	e7e0      	b.n	8009e7e <tcp_receive+0x412>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8009ebc:	4b50      	ldr	r3, [pc, #320]	; (800a000 <tcp_receive+0x594>)
 8009ebe:	f240 523f 	movw	r2, #1343	; 0x53f
 8009ec2:	495a      	ldr	r1, [pc, #360]	; (800a02c <tcp_receive+0x5c0>)
 8009ec4:	4850      	ldr	r0, [pc, #320]	; (800a008 <tcp_receive+0x59c>)
 8009ec6:	f003 fb98 	bl	800d5fa <iprintf>
 8009eca:	e7e0      	b.n	8009e8e <tcp_receive+0x422>
          off -= p->len;
 8009ecc:	1aff      	subs	r7, r7, r3
          p->tot_len = new_tot_len;
 8009ece:	812a      	strh	r2, [r5, #8]
          p->len = 0;
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	816b      	strh	r3, [r5, #10]
          p = p->next;
 8009ed4:	682d      	ldr	r5, [r5, #0]
        while (p->len < off) {
 8009ed6:	896b      	ldrh	r3, [r5, #10]
 8009ed8:	429f      	cmp	r7, r3
 8009eda:	dcf7      	bgt.n	8009ecc <tcp_receive+0x460>
        if (pbuf_header(p, (s16_t)-off)) {
 8009edc:	4279      	negs	r1, r7
 8009ede:	b209      	sxth	r1, r1
 8009ee0:	4628      	mov	r0, r5
 8009ee2:	f7fe f8e9 	bl	80080b8 <pbuf_header>
 8009ee6:	b960      	cbnz	r0, 8009f02 <tcp_receive+0x496>
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 8009ee8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8009eea:	484b      	ldr	r0, [pc, #300]	; (800a018 <tcp_receive+0x5ac>)
 8009eec:	6803      	ldr	r3, [r0, #0]
 8009eee:	1a9b      	subs	r3, r3, r2
 8009ef0:	494b      	ldr	r1, [pc, #300]	; (800a020 <tcp_receive+0x5b4>)
 8009ef2:	890d      	ldrh	r5, [r1, #8]
 8009ef4:	fa15 f383 	uxtah	r3, r5, r3
 8009ef8:	810b      	strh	r3, [r1, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8009efa:	68cb      	ldr	r3, [r1, #12]
 8009efc:	6002      	str	r2, [r0, #0]
 8009efe:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8009f00:	e782      	b.n	8009e08 <tcp_receive+0x39c>
          LWIP_ASSERT("pbuf_header failed", 0);
 8009f02:	4b3f      	ldr	r3, [pc, #252]	; (800a000 <tcp_receive+0x594>)
 8009f04:	f240 524c 	movw	r2, #1356	; 0x54c
 8009f08:	4949      	ldr	r1, [pc, #292]	; (800a030 <tcp_receive+0x5c4>)
 8009f0a:	483f      	ldr	r0, [pc, #252]	; (800a008 <tcp_receive+0x59c>)
 8009f0c:	f003 fb75 	bl	800d5fa <iprintf>
 8009f10:	e7ea      	b.n	8009ee8 <tcp_receive+0x47c>
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 8009f12:	4271      	negs	r1, r6
 8009f14:	b209      	sxth	r1, r1
 8009f16:	f7fe f8cf 	bl	80080b8 <pbuf_header>
 8009f1a:	2800      	cmp	r0, #0
 8009f1c:	d0e4      	beq.n	8009ee8 <tcp_receive+0x47c>
          LWIP_ASSERT("pbuf_header failed", 0);
 8009f1e:	4b38      	ldr	r3, [pc, #224]	; (800a000 <tcp_receive+0x594>)
 8009f20:	f240 5251 	movw	r2, #1361	; 0x551
 8009f24:	4942      	ldr	r1, [pc, #264]	; (800a030 <tcp_receive+0x5c4>)
 8009f26:	4838      	ldr	r0, [pc, #224]	; (800a008 <tcp_receive+0x59c>)
 8009f28:	f003 fb67 	bl	800d5fa <iprintf>
 8009f2c:	e7dc      	b.n	8009ee8 <tcp_receive+0x47c>
        tcp_ack_now(pcb);
 8009f2e:	7ea3      	ldrb	r3, [r4, #26]
 8009f30:	f043 0302 	orr.w	r3, r3, #2
 8009f34:	76a3      	strb	r3, [r4, #26]
 8009f36:	e767      	b.n	8009e08 <tcp_receive+0x39c>
      if (pcb->rcv_nxt == seqno) {
 8009f38:	4291      	cmp	r1, r2
 8009f3a:	d008      	beq.n	8009f4e <tcp_receive+0x4e2>
        tcp_send_empty_ack(pcb);
 8009f3c:	4620      	mov	r0, r4
 8009f3e:	f001 fd05 	bl	800b94c <tcp_send_empty_ack>
        if (pcb->ooseq == NULL) {
 8009f42:	6f25      	ldr	r5, [r4, #112]	; 0x70
 8009f44:	2d00      	cmp	r5, #0
 8009f46:	f000 81ad 	beq.w	800a2a4 <tcp_receive+0x838>
 8009f4a:	2600      	movs	r6, #0
 8009f4c:	e1e4      	b.n	800a318 <tcp_receive+0x8ac>
        tcplen = TCP_TCPLEN(&inseg);
 8009f4e:	4b34      	ldr	r3, [pc, #208]	; (800a020 <tcp_receive+0x5b4>)
 8009f50:	891d      	ldrh	r5, [r3, #8]
 8009f52:	68db      	ldr	r3, [r3, #12]
 8009f54:	8998      	ldrh	r0, [r3, #12]
 8009f56:	f7fc f89d 	bl	8006094 <lwip_htons>
 8009f5a:	f010 0f03 	tst.w	r0, #3
 8009f5e:	d015      	beq.n	8009f8c <tcp_receive+0x520>
 8009f60:	2301      	movs	r3, #1
 8009f62:	442b      	add	r3, r5
 8009f64:	b29b      	uxth	r3, r3
 8009f66:	4a2b      	ldr	r2, [pc, #172]	; (800a014 <tcp_receive+0x5a8>)
 8009f68:	8013      	strh	r3, [r2, #0]
        if (tcplen > pcb->rcv_wnd) {
 8009f6a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8009f6c:	4293      	cmp	r3, r2
 8009f6e:	d80f      	bhi.n	8009f90 <tcp_receive+0x524>
        if (pcb->ooseq != NULL) {
 8009f70:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	f000 80ed 	beq.w	800a152 <tcp_receive+0x6e6>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009f78:	4b29      	ldr	r3, [pc, #164]	; (800a020 <tcp_receive+0x5b4>)
 8009f7a:	68db      	ldr	r3, [r3, #12]
 8009f7c:	8998      	ldrh	r0, [r3, #12]
 8009f7e:	f7fc f889 	bl	8006094 <lwip_htons>
 8009f82:	f010 0f01 	tst.w	r0, #1
 8009f86:	d168      	bne.n	800a05a <tcp_receive+0x5ee>
            next = pcb->ooseq;
 8009f88:	6f25      	ldr	r5, [r4, #112]	; 0x70
            while (next &&
 8009f8a:	e077      	b.n	800a07c <tcp_receive+0x610>
        tcplen = TCP_TCPLEN(&inseg);
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	e7e8      	b.n	8009f62 <tcp_receive+0x4f6>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009f90:	4b23      	ldr	r3, [pc, #140]	; (800a020 <tcp_receive+0x5b4>)
 8009f92:	68db      	ldr	r3, [r3, #12]
 8009f94:	8998      	ldrh	r0, [r3, #12]
 8009f96:	f7fc f87d 	bl	8006094 <lwip_htons>
 8009f9a:	f010 0f01 	tst.w	r0, #1
 8009f9e:	d14b      	bne.n	800a038 <tcp_receive+0x5cc>
          inseg.len = (u16_t)pcb->rcv_wnd;
 8009fa0:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8009fa2:	4b1f      	ldr	r3, [pc, #124]	; (800a020 <tcp_receive+0x5b4>)
 8009fa4:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8009fa6:	68db      	ldr	r3, [r3, #12]
 8009fa8:	8998      	ldrh	r0, [r3, #12]
 8009faa:	f7fc f873 	bl	8006094 <lwip_htons>
 8009fae:	f010 0f02 	tst.w	r0, #2
 8009fb2:	d003      	beq.n	8009fbc <tcp_receive+0x550>
            inseg.len -= 1;
 8009fb4:	4a1a      	ldr	r2, [pc, #104]	; (800a020 <tcp_receive+0x5b4>)
 8009fb6:	8913      	ldrh	r3, [r2, #8]
 8009fb8:	3b01      	subs	r3, #1
 8009fba:	8113      	strh	r3, [r2, #8]
          pbuf_realloc(inseg.p, inseg.len);
 8009fbc:	4d18      	ldr	r5, [pc, #96]	; (800a020 <tcp_receive+0x5b4>)
 8009fbe:	8929      	ldrh	r1, [r5, #8]
 8009fc0:	6868      	ldr	r0, [r5, #4]
 8009fc2:	f7fe f9d7 	bl	8008374 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8009fc6:	892e      	ldrh	r6, [r5, #8]
 8009fc8:	68eb      	ldr	r3, [r5, #12]
 8009fca:	8998      	ldrh	r0, [r3, #12]
 8009fcc:	f7fc f862 	bl	8006094 <lwip_htons>
 8009fd0:	f010 0f03 	tst.w	r0, #3
 8009fd4:	d03f      	beq.n	800a056 <tcp_receive+0x5ea>
 8009fd6:	2301      	movs	r3, #1
 8009fd8:	4433      	add	r3, r6
 8009fda:	b29b      	uxth	r3, r3
 8009fdc:	4a0d      	ldr	r2, [pc, #52]	; (800a014 <tcp_receive+0x5a8>)
 8009fde:	8013      	strh	r3, [r2, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8009fe0:	4a0d      	ldr	r2, [pc, #52]	; (800a018 <tcp_receive+0x5ac>)
 8009fe2:	6812      	ldr	r2, [r2, #0]
 8009fe4:	4413      	add	r3, r2
 8009fe6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8009fe8:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 8009fea:	440a      	add	r2, r1
 8009fec:	4293      	cmp	r3, r2
 8009fee:	d0bf      	beq.n	8009f70 <tcp_receive+0x504>
 8009ff0:	4b03      	ldr	r3, [pc, #12]	; (800a000 <tcp_receive+0x594>)
 8009ff2:	f240 527f 	movw	r2, #1407	; 0x57f
 8009ff6:	490f      	ldr	r1, [pc, #60]	; (800a034 <tcp_receive+0x5c8>)
 8009ff8:	4803      	ldr	r0, [pc, #12]	; (800a008 <tcp_receive+0x59c>)
 8009ffa:	f003 fafe 	bl	800d5fa <iprintf>
 8009ffe:	e7b7      	b.n	8009f70 <tcp_receive+0x504>
 800a000:	0800f850 	.word	0x0800f850
 800a004:	0800f8a0 	.word	0x0800f8a0
 800a008:	0800de34 	.word	0x0800de34
 800a00c:	20003fa0 	.word	0x20003fa0
 800a010:	20003f88 	.word	0x20003f88
 800a014:	20003fc2 	.word	0x20003fc2
 800a018:	20003fac 	.word	0x20003fac
 800a01c:	20007988 	.word	0x20007988
 800a020:	20003f90 	.word	0x20003f90
 800a024:	0800f8e8 	.word	0x0800f8e8
 800a028:	0800f8f8 	.word	0x0800f8f8
 800a02c:	0800f908 	.word	0x0800f908
 800a030:	0800f918 	.word	0x0800f918
 800a034:	0800f92c 	.word	0x0800f92c
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800a038:	4ba9      	ldr	r3, [pc, #676]	; (800a2e0 <tcp_receive+0x874>)
 800a03a:	68de      	ldr	r6, [r3, #12]
 800a03c:	89b0      	ldrh	r0, [r6, #12]
 800a03e:	f420 557c 	bic.w	r5, r0, #16128	; 0x3f00
 800a042:	b2ad      	uxth	r5, r5
 800a044:	f7fc f826 	bl	8006094 <lwip_htons>
 800a048:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 800a04c:	f7fc f822 	bl	8006094 <lwip_htons>
 800a050:	4328      	orrs	r0, r5
 800a052:	81b0      	strh	r0, [r6, #12]
 800a054:	e7a4      	b.n	8009fa0 <tcp_receive+0x534>
          tcplen = TCP_TCPLEN(&inseg);
 800a056:	2300      	movs	r3, #0
 800a058:	e7be      	b.n	8009fd8 <tcp_receive+0x56c>
            while (pcb->ooseq != NULL) {
 800a05a:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800a05c:	2800      	cmp	r0, #0
 800a05e:	d078      	beq.n	800a152 <tcp_receive+0x6e6>
              pcb->ooseq = pcb->ooseq->next;
 800a060:	6803      	ldr	r3, [r0, #0]
 800a062:	6723      	str	r3, [r4, #112]	; 0x70
              tcp_seg_free(old_ooseq);
 800a064:	f7fe fd1e 	bl	8008aa4 <tcp_seg_free>
 800a068:	e7f7      	b.n	800a05a <tcp_receive+0x5ee>
                tcplen = TCP_TCPLEN(&inseg);
 800a06a:	2300      	movs	r3, #0
 800a06c:	443b      	add	r3, r7
 800a06e:	4a9d      	ldr	r2, [pc, #628]	; (800a2e4 <tcp_receive+0x878>)
 800a070:	8013      	strh	r3, [r2, #0]
              next = next->next;
 800a072:	682e      	ldr	r6, [r5, #0]
              tcp_seg_free(prev);
 800a074:	4628      	mov	r0, r5
 800a076:	f7fe fd15 	bl	8008aa4 <tcp_seg_free>
              next = next->next;
 800a07a:	4635      	mov	r5, r6
            while (next &&
 800a07c:	b375      	cbz	r5, 800a0dc <tcp_receive+0x670>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800a07e:	4b99      	ldr	r3, [pc, #612]	; (800a2e4 <tcp_receive+0x878>)
 800a080:	881b      	ldrh	r3, [r3, #0]
 800a082:	4a99      	ldr	r2, [pc, #612]	; (800a2e8 <tcp_receive+0x87c>)
 800a084:	6812      	ldr	r2, [r2, #0]
 800a086:	4413      	add	r3, r2
 800a088:	68e9      	ldr	r1, [r5, #12]
 800a08a:	684a      	ldr	r2, [r1, #4]
 800a08c:	8928      	ldrh	r0, [r5, #8]
 800a08e:	4402      	add	r2, r0
 800a090:	1a9b      	subs	r3, r3, r2
            while (next &&
 800a092:	2b00      	cmp	r3, #0
 800a094:	db22      	blt.n	800a0dc <tcp_receive+0x670>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800a096:	8988      	ldrh	r0, [r1, #12]
 800a098:	f7fb fffc 	bl	8006094 <lwip_htons>
 800a09c:	f010 0f01 	tst.w	r0, #1
 800a0a0:	d0e7      	beq.n	800a072 <tcp_receive+0x606>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800a0a2:	4b8f      	ldr	r3, [pc, #572]	; (800a2e0 <tcp_receive+0x874>)
 800a0a4:	68db      	ldr	r3, [r3, #12]
 800a0a6:	8998      	ldrh	r0, [r3, #12]
 800a0a8:	f7fb fff4 	bl	8006094 <lwip_htons>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800a0ac:	f010 0f02 	tst.w	r0, #2
 800a0b0:	d1df      	bne.n	800a072 <tcp_receive+0x606>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800a0b2:	4e8b      	ldr	r6, [pc, #556]	; (800a2e0 <tcp_receive+0x874>)
 800a0b4:	f8d6 800c 	ldr.w	r8, [r6, #12]
 800a0b8:	f8b8 700c 	ldrh.w	r7, [r8, #12]
 800a0bc:	2001      	movs	r0, #1
 800a0be:	f7fb ffe9 	bl	8006094 <lwip_htons>
 800a0c2:	4338      	orrs	r0, r7
 800a0c4:	f8a8 000c 	strh.w	r0, [r8, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800a0c8:	8937      	ldrh	r7, [r6, #8]
 800a0ca:	68f3      	ldr	r3, [r6, #12]
 800a0cc:	8998      	ldrh	r0, [r3, #12]
 800a0ce:	f7fb ffe1 	bl	8006094 <lwip_htons>
 800a0d2:	f010 0f03 	tst.w	r0, #3
 800a0d6:	d0c8      	beq.n	800a06a <tcp_receive+0x5fe>
 800a0d8:	2301      	movs	r3, #1
 800a0da:	e7c7      	b.n	800a06c <tcp_receive+0x600>
            if (next &&
 800a0dc:	2d00      	cmp	r5, #0
 800a0de:	d037      	beq.n	800a150 <tcp_receive+0x6e4>
                TCP_SEQ_GT(seqno + tcplen,
 800a0e0:	4b81      	ldr	r3, [pc, #516]	; (800a2e8 <tcp_receive+0x87c>)
 800a0e2:	6819      	ldr	r1, [r3, #0]
 800a0e4:	4b7f      	ldr	r3, [pc, #508]	; (800a2e4 <tcp_receive+0x878>)
 800a0e6:	881b      	ldrh	r3, [r3, #0]
 800a0e8:	440b      	add	r3, r1
 800a0ea:	68ea      	ldr	r2, [r5, #12]
 800a0ec:	6852      	ldr	r2, [r2, #4]
 800a0ee:	1a9b      	subs	r3, r3, r2
            if (next &&
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	dd2d      	ble.n	800a150 <tcp_receive+0x6e4>
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800a0f4:	1a52      	subs	r2, r2, r1
 800a0f6:	4b7a      	ldr	r3, [pc, #488]	; (800a2e0 <tcp_receive+0x874>)
 800a0f8:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800a0fa:	68db      	ldr	r3, [r3, #12]
 800a0fc:	8998      	ldrh	r0, [r3, #12]
 800a0fe:	f7fb ffc9 	bl	8006094 <lwip_htons>
 800a102:	f010 0f02 	tst.w	r0, #2
 800a106:	d003      	beq.n	800a110 <tcp_receive+0x6a4>
                inseg.len -= 1;
 800a108:	4a75      	ldr	r2, [pc, #468]	; (800a2e0 <tcp_receive+0x874>)
 800a10a:	8913      	ldrh	r3, [r2, #8]
 800a10c:	3b01      	subs	r3, #1
 800a10e:	8113      	strh	r3, [r2, #8]
              pbuf_realloc(inseg.p, inseg.len);
 800a110:	4e73      	ldr	r6, [pc, #460]	; (800a2e0 <tcp_receive+0x874>)
 800a112:	8931      	ldrh	r1, [r6, #8]
 800a114:	6870      	ldr	r0, [r6, #4]
 800a116:	f7fe f92d 	bl	8008374 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800a11a:	8937      	ldrh	r7, [r6, #8]
 800a11c:	68f3      	ldr	r3, [r6, #12]
 800a11e:	8998      	ldrh	r0, [r3, #12]
 800a120:	f7fb ffb8 	bl	8006094 <lwip_htons>
 800a124:	f010 0f03 	tst.w	r0, #3
 800a128:	d03b      	beq.n	800a1a2 <tcp_receive+0x736>
 800a12a:	2301      	movs	r3, #1
 800a12c:	443b      	add	r3, r7
 800a12e:	b29b      	uxth	r3, r3
 800a130:	4a6c      	ldr	r2, [pc, #432]	; (800a2e4 <tcp_receive+0x878>)
 800a132:	8013      	strh	r3, [r2, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800a134:	4a6c      	ldr	r2, [pc, #432]	; (800a2e8 <tcp_receive+0x87c>)
 800a136:	6812      	ldr	r2, [r2, #0]
 800a138:	4413      	add	r3, r2
 800a13a:	68ea      	ldr	r2, [r5, #12]
 800a13c:	6852      	ldr	r2, [r2, #4]
 800a13e:	4293      	cmp	r3, r2
 800a140:	d006      	beq.n	800a150 <tcp_receive+0x6e4>
 800a142:	4b6a      	ldr	r3, [pc, #424]	; (800a2ec <tcp_receive+0x880>)
 800a144:	f240 52af 	movw	r2, #1455	; 0x5af
 800a148:	4969      	ldr	r1, [pc, #420]	; (800a2f0 <tcp_receive+0x884>)
 800a14a:	486a      	ldr	r0, [pc, #424]	; (800a2f4 <tcp_receive+0x888>)
 800a14c:	f003 fa55 	bl	800d5fa <iprintf>
            pcb->ooseq = next;
 800a150:	6725      	str	r5, [r4, #112]	; 0x70
        pcb->rcv_nxt = seqno + tcplen;
 800a152:	4b64      	ldr	r3, [pc, #400]	; (800a2e4 <tcp_receive+0x878>)
 800a154:	881a      	ldrh	r2, [r3, #0]
 800a156:	4b64      	ldr	r3, [pc, #400]	; (800a2e8 <tcp_receive+0x87c>)
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	4413      	add	r3, r2
 800a15c:	6263      	str	r3, [r4, #36]	; 0x24
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800a15e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800a160:	429a      	cmp	r2, r3
 800a162:	d820      	bhi.n	800a1a6 <tcp_receive+0x73a>
        pcb->rcv_wnd -= tcplen;
 800a164:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800a166:	4a5f      	ldr	r2, [pc, #380]	; (800a2e4 <tcp_receive+0x878>)
 800a168:	8812      	ldrh	r2, [r2, #0]
 800a16a:	1a9b      	subs	r3, r3, r2
 800a16c:	8523      	strh	r3, [r4, #40]	; 0x28
        tcp_update_rcv_ann_wnd(pcb);
 800a16e:	4620      	mov	r0, r4
 800a170:	f7fe fc26 	bl	80089c0 <tcp_update_rcv_ann_wnd>
        if (inseg.p->tot_len > 0) {
 800a174:	4b5a      	ldr	r3, [pc, #360]	; (800a2e0 <tcp_receive+0x874>)
 800a176:	685b      	ldr	r3, [r3, #4]
 800a178:	891a      	ldrh	r2, [r3, #8]
 800a17a:	b122      	cbz	r2, 800a186 <tcp_receive+0x71a>
          recv_data = inseg.p;
 800a17c:	4a5e      	ldr	r2, [pc, #376]	; (800a2f8 <tcp_receive+0x88c>)
 800a17e:	6013      	str	r3, [r2, #0]
          inseg.p = NULL;
 800a180:	2200      	movs	r2, #0
 800a182:	4b57      	ldr	r3, [pc, #348]	; (800a2e0 <tcp_receive+0x874>)
 800a184:	605a      	str	r2, [r3, #4]
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a186:	4b56      	ldr	r3, [pc, #344]	; (800a2e0 <tcp_receive+0x874>)
 800a188:	68db      	ldr	r3, [r3, #12]
 800a18a:	8998      	ldrh	r0, [r3, #12]
 800a18c:	f7fb ff82 	bl	8006094 <lwip_htons>
 800a190:	f010 0f01 	tst.w	r0, #1
 800a194:	d035      	beq.n	800a202 <tcp_receive+0x796>
          recv_flags |= TF_GOT_FIN;
 800a196:	4a59      	ldr	r2, [pc, #356]	; (800a2fc <tcp_receive+0x890>)
 800a198:	7813      	ldrb	r3, [r2, #0]
 800a19a:	f043 0320 	orr.w	r3, r3, #32
 800a19e:	7013      	strb	r3, [r2, #0]
 800a1a0:	e02f      	b.n	800a202 <tcp_receive+0x796>
              tcplen = TCP_TCPLEN(&inseg);
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	e7c2      	b.n	800a12c <tcp_receive+0x6c0>
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800a1a6:	4b51      	ldr	r3, [pc, #324]	; (800a2ec <tcp_receive+0x880>)
 800a1a8:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800a1ac:	4954      	ldr	r1, [pc, #336]	; (800a300 <tcp_receive+0x894>)
 800a1ae:	4851      	ldr	r0, [pc, #324]	; (800a2f4 <tcp_receive+0x888>)
 800a1b0:	f003 fa23 	bl	800d5fa <iprintf>
 800a1b4:	e7d6      	b.n	800a164 <tcp_receive+0x6f8>
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	e035      	b.n	800a226 <tcp_receive+0x7ba>
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	e041      	b.n	800a242 <tcp_receive+0x7d6>
 800a1be:	4b4b      	ldr	r3, [pc, #300]	; (800a2ec <tcp_receive+0x880>)
 800a1c0:	f240 52de 	movw	r2, #1502	; 0x5de
 800a1c4:	494f      	ldr	r1, [pc, #316]	; (800a304 <tcp_receive+0x898>)
 800a1c6:	484b      	ldr	r0, [pc, #300]	; (800a2f4 <tcp_receive+0x888>)
 800a1c8:	f003 fa17 	bl	800d5fa <iprintf>
 800a1cc:	e03c      	b.n	800a248 <tcp_receive+0x7dc>
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	e043      	b.n	800a25a <tcp_receive+0x7ee>
              recv_data = cseg->p;
 800a1d2:	4b49      	ldr	r3, [pc, #292]	; (800a2f8 <tcp_receive+0x88c>)
 800a1d4:	6019      	str	r1, [r3, #0]
            cseg->p = NULL;
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	606b      	str	r3, [r5, #4]
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800a1da:	68eb      	ldr	r3, [r5, #12]
 800a1dc:	8998      	ldrh	r0, [r3, #12]
 800a1de:	f7fb ff59 	bl	8006094 <lwip_htons>
 800a1e2:	f010 0f01 	tst.w	r0, #1
 800a1e6:	d007      	beq.n	800a1f8 <tcp_receive+0x78c>
            recv_flags |= TF_GOT_FIN;
 800a1e8:	4a44      	ldr	r2, [pc, #272]	; (800a2fc <tcp_receive+0x890>)
 800a1ea:	7813      	ldrb	r3, [r2, #0]
 800a1ec:	f043 0320 	orr.w	r3, r3, #32
 800a1f0:	7013      	strb	r3, [r2, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800a1f2:	7d23      	ldrb	r3, [r4, #20]
 800a1f4:	2b04      	cmp	r3, #4
 800a1f6:	d042      	beq.n	800a27e <tcp_receive+0x812>
          pcb->ooseq = cseg->next;
 800a1f8:	682b      	ldr	r3, [r5, #0]
 800a1fa:	6723      	str	r3, [r4, #112]	; 0x70
          tcp_seg_free(cseg);
 800a1fc:	4628      	mov	r0, r5
 800a1fe:	f7fe fc51 	bl	8008aa4 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800a202:	6f25      	ldr	r5, [r4, #112]	; 0x70
 800a204:	2d00      	cmp	r5, #0
 800a206:	d03d      	beq.n	800a284 <tcp_receive+0x818>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800a208:	68ea      	ldr	r2, [r5, #12]
 800a20a:	6853      	ldr	r3, [r2, #4]
 800a20c:	6a61      	ldr	r1, [r4, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800a20e:	428b      	cmp	r3, r1
 800a210:	d138      	bne.n	800a284 <tcp_receive+0x818>
          seqno = pcb->ooseq->tcphdr->seqno;
 800a212:	4935      	ldr	r1, [pc, #212]	; (800a2e8 <tcp_receive+0x87c>)
 800a214:	600b      	str	r3, [r1, #0]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800a216:	892e      	ldrh	r6, [r5, #8]
 800a218:	8990      	ldrh	r0, [r2, #12]
 800a21a:	f7fb ff3b 	bl	8006094 <lwip_htons>
 800a21e:	f010 0f03 	tst.w	r0, #3
 800a222:	d0c8      	beq.n	800a1b6 <tcp_receive+0x74a>
 800a224:	2301      	movs	r3, #1
 800a226:	199a      	adds	r2, r3, r6
 800a228:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a22a:	4413      	add	r3, r2
 800a22c:	6263      	str	r3, [r4, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800a22e:	8d26      	ldrh	r6, [r4, #40]	; 0x28
 800a230:	892f      	ldrh	r7, [r5, #8]
 800a232:	68eb      	ldr	r3, [r5, #12]
 800a234:	8998      	ldrh	r0, [r3, #12]
 800a236:	f7fb ff2d 	bl	8006094 <lwip_htons>
 800a23a:	f010 0f03 	tst.w	r0, #3
 800a23e:	d0bc      	beq.n	800a1ba <tcp_receive+0x74e>
 800a240:	2301      	movs	r3, #1
 800a242:	443b      	add	r3, r7
 800a244:	429e      	cmp	r6, r3
 800a246:	d3ba      	bcc.n	800a1be <tcp_receive+0x752>
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800a248:	892e      	ldrh	r6, [r5, #8]
 800a24a:	68eb      	ldr	r3, [r5, #12]
 800a24c:	8998      	ldrh	r0, [r3, #12]
 800a24e:	f7fb ff21 	bl	8006094 <lwip_htons>
 800a252:	f010 0f03 	tst.w	r0, #3
 800a256:	d0ba      	beq.n	800a1ce <tcp_receive+0x762>
 800a258:	2301      	movs	r3, #1
 800a25a:	199a      	adds	r2, r3, r6
 800a25c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800a25e:	1a9b      	subs	r3, r3, r2
 800a260:	8523      	strh	r3, [r4, #40]	; 0x28
          tcp_update_rcv_ann_wnd(pcb);
 800a262:	4620      	mov	r0, r4
 800a264:	f7fe fbac 	bl	80089c0 <tcp_update_rcv_ann_wnd>
          if (cseg->p->tot_len > 0) {
 800a268:	6869      	ldr	r1, [r5, #4]
 800a26a:	890b      	ldrh	r3, [r1, #8]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d0b4      	beq.n	800a1da <tcp_receive+0x76e>
            if (recv_data) {
 800a270:	4b21      	ldr	r3, [pc, #132]	; (800a2f8 <tcp_receive+0x88c>)
 800a272:	6818      	ldr	r0, [r3, #0]
 800a274:	2800      	cmp	r0, #0
 800a276:	d0ac      	beq.n	800a1d2 <tcp_receive+0x766>
              pbuf_cat(recv_data, cseg->p);
 800a278:	f7fe f914 	bl	80084a4 <pbuf_cat>
 800a27c:	e7ab      	b.n	800a1d6 <tcp_receive+0x76a>
              pcb->state = CLOSE_WAIT;
 800a27e:	2307      	movs	r3, #7
 800a280:	7523      	strb	r3, [r4, #20]
 800a282:	e7b9      	b.n	800a1f8 <tcp_receive+0x78c>
        tcp_ack(pcb);
 800a284:	7ea3      	ldrb	r3, [r4, #26]
 800a286:	f013 0f01 	tst.w	r3, #1
 800a28a:	d006      	beq.n	800a29a <tcp_receive+0x82e>
 800a28c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800a290:	f043 0302 	orr.w	r3, r3, #2
 800a294:	76a3      	strb	r3, [r4, #26]
 800a296:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a29a:	f043 0301 	orr.w	r3, r3, #1
 800a29e:	76a3      	strb	r3, [r4, #26]
 800a2a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          pcb->ooseq = tcp_seg_copy(&inseg);
 800a2a4:	480e      	ldr	r0, [pc, #56]	; (800a2e0 <tcp_receive+0x874>)
 800a2a6:	f7fe fc14 	bl	8008ad2 <tcp_seg_copy>
 800a2aa:	6720      	str	r0, [r4, #112]	; 0x70
 800a2ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
              if (inseg.len > next->len) {
 800a2b0:	4b0b      	ldr	r3, [pc, #44]	; (800a2e0 <tcp_receive+0x874>)
 800a2b2:	891a      	ldrh	r2, [r3, #8]
 800a2b4:	892b      	ldrh	r3, [r5, #8]
 800a2b6:	429a      	cmp	r2, r3
 800a2b8:	f240 80ee 	bls.w	800a498 <tcp_receive+0xa2c>
                cseg = tcp_seg_copy(&inseg);
 800a2bc:	4808      	ldr	r0, [pc, #32]	; (800a2e0 <tcp_receive+0x874>)
 800a2be:	f7fe fc08 	bl	8008ad2 <tcp_seg_copy>
                if (cseg != NULL) {
 800a2c2:	4603      	mov	r3, r0
 800a2c4:	2800      	cmp	r0, #0
 800a2c6:	f000 80e7 	beq.w	800a498 <tcp_receive+0xa2c>
                  if (prev != NULL) {
 800a2ca:	b136      	cbz	r6, 800a2da <tcp_receive+0x86e>
                    prev->next = cseg;
 800a2cc:	6030      	str	r0, [r6, #0]
                  tcp_oos_insert_segment(cseg, next);
 800a2ce:	4629      	mov	r1, r5
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	f7ff fb89 	bl	80099e8 <tcp_oos_insert_segment>
 800a2d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                    pcb->ooseq = cseg;
 800a2da:	6720      	str	r0, [r4, #112]	; 0x70
 800a2dc:	e7f7      	b.n	800a2ce <tcp_receive+0x862>
 800a2de:	bf00      	nop
 800a2e0:	20003f90 	.word	0x20003f90
 800a2e4:	20003fc2 	.word	0x20003fc2
 800a2e8:	20003fac 	.word	0x20003fac
 800a2ec:	0800f850 	.word	0x0800f850
 800a2f0:	0800f964 	.word	0x0800f964
 800a2f4:	0800de34 	.word	0x0800de34
 800a2f8:	20003fa4 	.word	0x20003fa4
 800a2fc:	20003fa8 	.word	0x20003fa8
 800a300:	0800f9a0 	.word	0x0800f9a0
 800a304:	0800f9c0 	.word	0x0800f9c0
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800a308:	1a5a      	subs	r2, r3, r1
 800a30a:	2a00      	cmp	r2, #0
 800a30c:	db35      	blt.n	800a37a <tcp_receive+0x90e>
              if (next->next == NULL &&
 800a30e:	682a      	ldr	r2, [r5, #0]
 800a310:	462e      	mov	r6, r5
 800a312:	2a00      	cmp	r2, #0
 800a314:	d03d      	beq.n	800a392 <tcp_receive+0x926>
 800a316:	4615      	mov	r5, r2
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800a318:	2d00      	cmp	r5, #0
 800a31a:	f000 80ab 	beq.w	800a474 <tcp_receive+0xa08>
            if (seqno == next->tcphdr->seqno) {
 800a31e:	68e8      	ldr	r0, [r5, #12]
 800a320:	6841      	ldr	r1, [r0, #4]
 800a322:	4b5e      	ldr	r3, [pc, #376]	; (800a49c <tcp_receive+0xa30>)
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	4299      	cmp	r1, r3
 800a328:	d0c2      	beq.n	800a2b0 <tcp_receive+0x844>
              if (prev == NULL) {
 800a32a:	2e00      	cmp	r6, #0
 800a32c:	d0ec      	beq.n	800a308 <tcp_receive+0x89c>
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 800a32e:	68f2      	ldr	r2, [r6, #12]
 800a330:	6852      	ldr	r2, [r2, #4]
 800a332:	1a9a      	subs	r2, r3, r2
 800a334:	2a01      	cmp	r2, #1
 800a336:	d4ea      	bmi.n	800a30e <tcp_receive+0x8a2>
 800a338:	1a5a      	subs	r2, r3, r1
 800a33a:	3201      	adds	r2, #1
 800a33c:	2a00      	cmp	r2, #0
 800a33e:	dce6      	bgt.n	800a30e <tcp_receive+0x8a2>
                  cseg = tcp_seg_copy(&inseg);
 800a340:	4857      	ldr	r0, [pc, #348]	; (800a4a0 <tcp_receive+0xa34>)
 800a342:	f7fe fbc6 	bl	8008ad2 <tcp_seg_copy>
                  if (cseg != NULL) {
 800a346:	4604      	mov	r4, r0
 800a348:	2800      	cmp	r0, #0
 800a34a:	f000 80a5 	beq.w	800a498 <tcp_receive+0xa2c>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800a34e:	68f3      	ldr	r3, [r6, #12]
 800a350:	6859      	ldr	r1, [r3, #4]
 800a352:	8932      	ldrh	r2, [r6, #8]
 800a354:	440a      	add	r2, r1
 800a356:	4b51      	ldr	r3, [pc, #324]	; (800a49c <tcp_receive+0xa30>)
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	1ad2      	subs	r2, r2, r3
 800a35c:	2a00      	cmp	r2, #0
 800a35e:	dd05      	ble.n	800a36c <tcp_receive+0x900>
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800a360:	1a5b      	subs	r3, r3, r1
 800a362:	b299      	uxth	r1, r3
 800a364:	8131      	strh	r1, [r6, #8]
                      pbuf_realloc(prev->p, prev->len);
 800a366:	6870      	ldr	r0, [r6, #4]
 800a368:	f7fe f804 	bl	8008374 <pbuf_realloc>
                    prev->next = cseg;
 800a36c:	6034      	str	r4, [r6, #0]
                    tcp_oos_insert_segment(cseg, next);
 800a36e:	4629      	mov	r1, r5
 800a370:	4620      	mov	r0, r4
 800a372:	f7ff fb39 	bl	80099e8 <tcp_oos_insert_segment>
 800a376:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                  cseg = tcp_seg_copy(&inseg);
 800a37a:	4849      	ldr	r0, [pc, #292]	; (800a4a0 <tcp_receive+0xa34>)
 800a37c:	f7fe fba9 	bl	8008ad2 <tcp_seg_copy>
                  if (cseg != NULL) {
 800a380:	2800      	cmp	r0, #0
 800a382:	f000 8089 	beq.w	800a498 <tcp_receive+0xa2c>
                    pcb->ooseq = cseg;
 800a386:	6720      	str	r0, [r4, #112]	; 0x70
                    tcp_oos_insert_segment(cseg, next);
 800a388:	4629      	mov	r1, r5
 800a38a:	f7ff fb2d 	bl	80099e8 <tcp_oos_insert_segment>
 800a38e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800a392:	1a5b      	subs	r3, r3, r1
              if (next->next == NULL &&
 800a394:	2b00      	cmp	r3, #0
 800a396:	dc01      	bgt.n	800a39c <tcp_receive+0x930>
 800a398:	4615      	mov	r5, r2
 800a39a:	e7bd      	b.n	800a318 <tcp_receive+0x8ac>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800a39c:	8980      	ldrh	r0, [r0, #12]
 800a39e:	f7fb fe79 	bl	8006094 <lwip_htons>
 800a3a2:	f010 0f01 	tst.w	r0, #1
 800a3a6:	d177      	bne.n	800a498 <tcp_receive+0xa2c>
                next->next = tcp_seg_copy(&inseg);
 800a3a8:	483d      	ldr	r0, [pc, #244]	; (800a4a0 <tcp_receive+0xa34>)
 800a3aa:	f7fe fb92 	bl	8008ad2 <tcp_seg_copy>
 800a3ae:	6028      	str	r0, [r5, #0]
                if (next->next != NULL) {
 800a3b0:	2800      	cmp	r0, #0
 800a3b2:	d071      	beq.n	800a498 <tcp_receive+0xa2c>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800a3b4:	68eb      	ldr	r3, [r5, #12]
 800a3b6:	6859      	ldr	r1, [r3, #4]
 800a3b8:	892a      	ldrh	r2, [r5, #8]
 800a3ba:	440a      	add	r2, r1
 800a3bc:	4b37      	ldr	r3, [pc, #220]	; (800a49c <tcp_receive+0xa30>)
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	1ad2      	subs	r2, r2, r3
 800a3c2:	2a00      	cmp	r2, #0
 800a3c4:	dd05      	ble.n	800a3d2 <tcp_receive+0x966>
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800a3c6:	1a5b      	subs	r3, r3, r1
 800a3c8:	b299      	uxth	r1, r3
 800a3ca:	8129      	strh	r1, [r5, #8]
                    pbuf_realloc(next->p, next->len);
 800a3cc:	6868      	ldr	r0, [r5, #4]
 800a3ce:	f7fd ffd1 	bl	8008374 <pbuf_realloc>
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800a3d2:	4b34      	ldr	r3, [pc, #208]	; (800a4a4 <tcp_receive+0xa38>)
 800a3d4:	881b      	ldrh	r3, [r3, #0]
 800a3d6:	4a31      	ldr	r2, [pc, #196]	; (800a49c <tcp_receive+0xa30>)
 800a3d8:	6812      	ldr	r2, [r2, #0]
 800a3da:	4413      	add	r3, r2
 800a3dc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800a3de:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 800a3e0:	440a      	add	r2, r1
 800a3e2:	1a9b      	subs	r3, r3, r2
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	dd57      	ble.n	800a498 <tcp_receive+0xa2c>
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800a3e8:	682b      	ldr	r3, [r5, #0]
 800a3ea:	68db      	ldr	r3, [r3, #12]
 800a3ec:	8998      	ldrh	r0, [r3, #12]
 800a3ee:	f7fb fe51 	bl	8006094 <lwip_htons>
 800a3f2:	f010 0f01 	tst.w	r0, #1
 800a3f6:	d12c      	bne.n	800a452 <tcp_receive+0x9e6>
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800a3f8:	682a      	ldr	r2, [r5, #0]
 800a3fa:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a3fc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800a3fe:	440b      	add	r3, r1
 800a400:	b29b      	uxth	r3, r3
 800a402:	4926      	ldr	r1, [pc, #152]	; (800a49c <tcp_receive+0xa30>)
 800a404:	6809      	ldr	r1, [r1, #0]
 800a406:	1a5b      	subs	r3, r3, r1
 800a408:	8113      	strh	r3, [r2, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800a40a:	682b      	ldr	r3, [r5, #0]
 800a40c:	8919      	ldrh	r1, [r3, #8]
 800a40e:	6858      	ldr	r0, [r3, #4]
 800a410:	f7fd ffb0 	bl	8008374 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800a414:	682b      	ldr	r3, [r5, #0]
 800a416:	891d      	ldrh	r5, [r3, #8]
 800a418:	68db      	ldr	r3, [r3, #12]
 800a41a:	8998      	ldrh	r0, [r3, #12]
 800a41c:	f7fb fe3a 	bl	8006094 <lwip_htons>
 800a420:	f010 0f03 	tst.w	r0, #3
 800a424:	d024      	beq.n	800a470 <tcp_receive+0xa04>
 800a426:	2301      	movs	r3, #1
 800a428:	442b      	add	r3, r5
 800a42a:	b29b      	uxth	r3, r3
 800a42c:	4a1d      	ldr	r2, [pc, #116]	; (800a4a4 <tcp_receive+0xa38>)
 800a42e:	8013      	strh	r3, [r2, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800a430:	4a1a      	ldr	r2, [pc, #104]	; (800a49c <tcp_receive+0xa30>)
 800a432:	6812      	ldr	r2, [r2, #0]
 800a434:	4413      	add	r3, r2
 800a436:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800a438:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 800a43a:	440a      	add	r2, r1
 800a43c:	4293      	cmp	r3, r2
 800a43e:	d02b      	beq.n	800a498 <tcp_receive+0xa2c>
 800a440:	4b19      	ldr	r3, [pc, #100]	; (800a4a8 <tcp_receive+0xa3c>)
 800a442:	f240 627b 	movw	r2, #1659	; 0x67b
 800a446:	4919      	ldr	r1, [pc, #100]	; (800a4ac <tcp_receive+0xa40>)
 800a448:	4819      	ldr	r0, [pc, #100]	; (800a4b0 <tcp_receive+0xa44>)
 800a44a:	f003 f8d6 	bl	800d5fa <iprintf>
 800a44e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800a452:	682b      	ldr	r3, [r5, #0]
 800a454:	68df      	ldr	r7, [r3, #12]
 800a456:	89b8      	ldrh	r0, [r7, #12]
 800a458:	f420 567c 	bic.w	r6, r0, #16128	; 0x3f00
 800a45c:	b2b6      	uxth	r6, r6
 800a45e:	f7fb fe19 	bl	8006094 <lwip_htons>
 800a462:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 800a466:	f7fb fe15 	bl	8006094 <lwip_htons>
 800a46a:	4330      	orrs	r0, r6
 800a46c:	81b8      	strh	r0, [r7, #12]
 800a46e:	e7c3      	b.n	800a3f8 <tcp_receive+0x98c>
                    tcplen = TCP_TCPLEN(next->next);
 800a470:	2300      	movs	r3, #0
 800a472:	e7d9      	b.n	800a428 <tcp_receive+0x9bc>
 800a474:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800a478:	4b08      	ldr	r3, [pc, #32]	; (800a49c <tcp_receive+0xa30>)
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800a47e:	1a99      	subs	r1, r3, r2
 800a480:	2900      	cmp	r1, #0
 800a482:	db05      	blt.n	800a490 <tcp_receive+0xa24>
 800a484:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 800a486:	440a      	add	r2, r1
 800a488:	1a9b      	subs	r3, r3, r2
 800a48a:	3301      	adds	r3, #1
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	dd03      	ble.n	800a498 <tcp_receive+0xa2c>
      tcp_ack_now(pcb);
 800a490:	7ea3      	ldrb	r3, [r4, #26]
 800a492:	f043 0302 	orr.w	r3, r3, #2
 800a496:	76a3      	strb	r3, [r4, #26]
 800a498:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a49c:	20003fac 	.word	0x20003fac
 800a4a0:	20003f90 	.word	0x20003f90
 800a4a4:	20003fc2 	.word	0x20003fc2
 800a4a8:	0800f850 	.word	0x0800f850
 800a4ac:	0800f92c 	.word	0x0800f92c
 800a4b0:	0800de34 	.word	0x0800de34

0800a4b4 <tcp_process>:
{
 800a4b4:	b570      	push	{r4, r5, r6, lr}
 800a4b6:	b082      	sub	sp, #8
 800a4b8:	4604      	mov	r4, r0
  if (flags & TCP_RST) {
 800a4ba:	4ba3      	ldr	r3, [pc, #652]	; (800a748 <tcp_process+0x294>)
 800a4bc:	781b      	ldrb	r3, [r3, #0]
 800a4be:	f013 0f04 	tst.w	r3, #4
 800a4c2:	d03d      	beq.n	800a540 <tcp_process+0x8c>
    if (pcb->state == SYN_SENT) {
 800a4c4:	7d01      	ldrb	r1, [r0, #20]
 800a4c6:	2902      	cmp	r1, #2
 800a4c8:	d012      	beq.n	800a4f0 <tcp_process+0x3c>
      if (seqno == pcb->rcv_nxt) {
 800a4ca:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800a4cc:	4b9f      	ldr	r3, [pc, #636]	; (800a74c <tcp_process+0x298>)
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	429a      	cmp	r2, r3
 800a4d2:	d01c      	beq.n	800a50e <tcp_process+0x5a>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a4d4:	1a98      	subs	r0, r3, r2
 800a4d6:	2800      	cmp	r0, #0
 800a4d8:	db1b      	blt.n	800a512 <tcp_process+0x5e>
 800a4da:	8d20      	ldrh	r0, [r4, #40]	; 0x28
 800a4dc:	4402      	add	r2, r0
 800a4de:	1a9b      	subs	r3, r3, r2
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	dd0c      	ble.n	800a4fe <tcp_process+0x4a>
  u8_t acceptable = 0;
 800a4e4:	2300      	movs	r3, #0
    if (acceptable) {
 800a4e6:	b9b3      	cbnz	r3, 800a516 <tcp_process+0x62>
      return ERR_OK;
 800a4e8:	2500      	movs	r5, #0
}
 800a4ea:	4628      	mov	r0, r5
 800a4ec:	b002      	add	sp, #8
 800a4ee:	bd70      	pop	{r4, r5, r6, pc}
      if (ackno == pcb->snd_nxt) {
 800a4f0:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 800a4f2:	4b97      	ldr	r3, [pc, #604]	; (800a750 <tcp_process+0x29c>)
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	429a      	cmp	r2, r3
 800a4f8:	d007      	beq.n	800a50a <tcp_process+0x56>
  u8_t acceptable = 0;
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	e7f3      	b.n	800a4e6 <tcp_process+0x32>
        tcp_ack_now(pcb);
 800a4fe:	7ea3      	ldrb	r3, [r4, #26]
 800a500:	f043 0302 	orr.w	r3, r3, #2
 800a504:	76a3      	strb	r3, [r4, #26]
  u8_t acceptable = 0;
 800a506:	2300      	movs	r3, #0
 800a508:	e7ed      	b.n	800a4e6 <tcp_process+0x32>
        acceptable = 1;
 800a50a:	2301      	movs	r3, #1
 800a50c:	e7eb      	b.n	800a4e6 <tcp_process+0x32>
        acceptable = 1;
 800a50e:	2301      	movs	r3, #1
 800a510:	e7e9      	b.n	800a4e6 <tcp_process+0x32>
  u8_t acceptable = 0;
 800a512:	2300      	movs	r3, #0
 800a514:	e7e7      	b.n	800a4e6 <tcp_process+0x32>
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800a516:	b159      	cbz	r1, 800a530 <tcp_process+0x7c>
      recv_flags |= TF_RESET;
 800a518:	4a8e      	ldr	r2, [pc, #568]	; (800a754 <tcp_process+0x2a0>)
 800a51a:	7813      	ldrb	r3, [r2, #0]
 800a51c:	f043 0308 	orr.w	r3, r3, #8
 800a520:	7013      	strb	r3, [r2, #0]
      pcb->flags &= ~TF_ACK_DELAY;
 800a522:	7ea3      	ldrb	r3, [r4, #26]
 800a524:	f023 0301 	bic.w	r3, r3, #1
 800a528:	76a3      	strb	r3, [r4, #26]
      return ERR_RST;
 800a52a:	f06f 050d 	mvn.w	r5, #13
 800a52e:	e7dc      	b.n	800a4ea <tcp_process+0x36>
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800a530:	4b89      	ldr	r3, [pc, #548]	; (800a758 <tcp_process+0x2a4>)
 800a532:	f240 22e7 	movw	r2, #743	; 0x2e7
 800a536:	4989      	ldr	r1, [pc, #548]	; (800a75c <tcp_process+0x2a8>)
 800a538:	4889      	ldr	r0, [pc, #548]	; (800a760 <tcp_process+0x2ac>)
 800a53a:	f003 f85e 	bl	800d5fa <iprintf>
 800a53e:	e7eb      	b.n	800a518 <tcp_process+0x64>
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800a540:	f013 0f02 	tst.w	r3, #2
 800a544:	d00a      	beq.n	800a55c <tcp_process+0xa8>
 800a546:	7d03      	ldrb	r3, [r0, #20]
 800a548:	3b02      	subs	r3, #2
 800a54a:	b2db      	uxtb	r3, r3
 800a54c:	2b01      	cmp	r3, #1
 800a54e:	d905      	bls.n	800a55c <tcp_process+0xa8>
    tcp_ack_now(pcb);
 800a550:	7e83      	ldrb	r3, [r0, #26]
 800a552:	f043 0302 	orr.w	r3, r3, #2
 800a556:	7683      	strb	r3, [r0, #26]
    return ERR_OK;
 800a558:	2500      	movs	r5, #0
 800a55a:	e7c6      	b.n	800a4ea <tcp_process+0x36>
  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800a55c:	7ea3      	ldrb	r3, [r4, #26]
 800a55e:	f013 0f10 	tst.w	r3, #16
 800a562:	d102      	bne.n	800a56a <tcp_process+0xb6>
    pcb->tmr = tcp_ticks;
 800a564:	4b7f      	ldr	r3, [pc, #508]	; (800a764 <tcp_process+0x2b0>)
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	6223      	str	r3, [r4, #32]
  pcb->keep_cnt_sent = 0;
 800a56a:	2300      	movs	r3, #0
 800a56c:	f884 3096 	strb.w	r3, [r4, #150]	; 0x96
  tcp_parseopt(pcb);
 800a570:	4620      	mov	r0, r4
 800a572:	f7ff f8ff 	bl	8009774 <tcp_parseopt>
  switch (pcb->state) {
 800a576:	7d23      	ldrb	r3, [r4, #20]
 800a578:	3b02      	subs	r3, #2
 800a57a:	2b07      	cmp	r3, #7
 800a57c:	f200 8219 	bhi.w	800a9b2 <tcp_process+0x4fe>
 800a580:	e8df f013 	tbh	[pc, r3, lsl #1]
 800a584:	009b0008 	.word	0x009b0008
 800a588:	01460135 	.word	0x01460135
 800a58c:	0135019c 	.word	0x0135019c
 800a590:	01fd01ca 	.word	0x01fd01ca
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800a594:	4b6c      	ldr	r3, [pc, #432]	; (800a748 <tcp_process+0x294>)
 800a596:	781b      	ldrb	r3, [r3, #0]
 800a598:	f003 0212 	and.w	r2, r3, #18
 800a59c:	2a12      	cmp	r2, #18
 800a59e:	d004      	beq.n	800a5aa <tcp_process+0xf6>
    else if (flags & TCP_ACK) {
 800a5a0:	f013 0f10 	tst.w	r3, #16
 800a5a4:	d16b      	bne.n	800a67e <tcp_process+0x1ca>
  return ERR_OK;
 800a5a6:	2500      	movs	r5, #0
 800a5a8:	e79f      	b.n	800a4ea <tcp_process+0x36>
        && (ackno == pcb->lastack + 1)) {
 800a5aa:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800a5ac:	3201      	adds	r2, #1
 800a5ae:	4968      	ldr	r1, [pc, #416]	; (800a750 <tcp_process+0x29c>)
 800a5b0:	6809      	ldr	r1, [r1, #0]
 800a5b2:	428a      	cmp	r2, r1
 800a5b4:	d1f4      	bne.n	800a5a0 <tcp_process+0xec>
      pcb->rcv_nxt = seqno + 1;
 800a5b6:	4b65      	ldr	r3, [pc, #404]	; (800a74c <tcp_process+0x298>)
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	1c5a      	adds	r2, r3, #1
 800a5bc:	6262      	str	r2, [r4, #36]	; 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800a5be:	62e2      	str	r2, [r4, #44]	; 0x2c
      pcb->lastack = ackno;
 800a5c0:	6461      	str	r1, [r4, #68]	; 0x44
      pcb->snd_wnd = tcphdr->wnd;
 800a5c2:	4a69      	ldr	r2, [pc, #420]	; (800a768 <tcp_process+0x2b4>)
 800a5c4:	6812      	ldr	r2, [r2, #0]
 800a5c6:	89d2      	ldrh	r2, [r2, #14]
 800a5c8:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 800a5cc:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800a5d0:	3b01      	subs	r3, #1
 800a5d2:	6523      	str	r3, [r4, #80]	; 0x50
      pcb->state = ESTABLISHED;
 800a5d4:	2304      	movs	r3, #4
 800a5d6:	7523      	strb	r3, [r4, #20]
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800a5d8:	18e1      	adds	r1, r4, r3
 800a5da:	8e60      	ldrh	r0, [r4, #50]	; 0x32
 800a5dc:	f7ff f868 	bl	80096b0 <tcp_eff_send_mss_impl>
 800a5e0:	8660      	strh	r0, [r4, #50]	; 0x32
      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800a5e2:	0043      	lsls	r3, r0, #1
 800a5e4:	f241 121c 	movw	r2, #4380	; 0x111c
 800a5e8:	4293      	cmp	r3, r2
 800a5ea:	bf38      	it	cc
 800a5ec:	4613      	movcc	r3, r2
 800a5ee:	0080      	lsls	r0, r0, #2
 800a5f0:	4283      	cmp	r3, r0
 800a5f2:	bf28      	it	cs
 800a5f4:	4603      	movcs	r3, r0
 800a5f6:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800a5fa:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800a5fe:	b31b      	cbz	r3, 800a648 <tcp_process+0x194>
      --pcb->snd_queuelen;
 800a600:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800a604:	3b01      	subs	r3, #1
 800a606:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
      rseg = pcb->unacked;
 800a60a:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
      if (rseg == NULL) {
 800a60c:	b325      	cbz	r5, 800a658 <tcp_process+0x1a4>
        pcb->unacked = rseg->next;
 800a60e:	682b      	ldr	r3, [r5, #0]
 800a610:	66e3      	str	r3, [r4, #108]	; 0x6c
      tcp_seg_free(rseg);
 800a612:	4628      	mov	r0, r5
 800a614:	f7fe fa46 	bl	8008aa4 <tcp_seg_free>
      if (pcb->unacked == NULL) {
 800a618:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800a61a:	b353      	cbz	r3, 800a672 <tcp_process+0x1be>
        pcb->rtime = 0;
 800a61c:	2300      	movs	r3, #0
 800a61e:	8623      	strh	r3, [r4, #48]	; 0x30
        pcb->nrtx = 0;
 800a620:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800a624:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800a628:	b33b      	cbz	r3, 800a67a <tcp_process+0x1c6>
 800a62a:	2200      	movs	r2, #0
 800a62c:	4621      	mov	r1, r4
 800a62e:	6920      	ldr	r0, [r4, #16]
 800a630:	4798      	blx	r3
 800a632:	4605      	mov	r5, r0
      if (err == ERR_ABRT) {
 800a634:	f115 0f0d 	cmn.w	r5, #13
 800a638:	f43f af57 	beq.w	800a4ea <tcp_process+0x36>
      tcp_ack_now(pcb);
 800a63c:	7ea3      	ldrb	r3, [r4, #26]
 800a63e:	f043 0302 	orr.w	r3, r3, #2
 800a642:	76a3      	strb	r3, [r4, #26]
  return ERR_OK;
 800a644:	2500      	movs	r5, #0
      tcp_ack_now(pcb);
 800a646:	e750      	b.n	800a4ea <tcp_process+0x36>
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800a648:	4b43      	ldr	r3, [pc, #268]	; (800a758 <tcp_process+0x2a4>)
 800a64a:	f240 321a 	movw	r2, #794	; 0x31a
 800a64e:	4947      	ldr	r1, [pc, #284]	; (800a76c <tcp_process+0x2b8>)
 800a650:	4843      	ldr	r0, [pc, #268]	; (800a760 <tcp_process+0x2ac>)
 800a652:	f002 ffd2 	bl	800d5fa <iprintf>
 800a656:	e7d3      	b.n	800a600 <tcp_process+0x14c>
        rseg = pcb->unsent;
 800a658:	6ea5      	ldr	r5, [r4, #104]	; 0x68
        LWIP_ASSERT("no segment to free", rseg != NULL);
 800a65a:	b115      	cbz	r5, 800a662 <tcp_process+0x1ae>
        pcb->unsent = rseg->next;
 800a65c:	682b      	ldr	r3, [r5, #0]
 800a65e:	66a3      	str	r3, [r4, #104]	; 0x68
 800a660:	e7d7      	b.n	800a612 <tcp_process+0x15e>
        LWIP_ASSERT("no segment to free", rseg != NULL);
 800a662:	4b3d      	ldr	r3, [pc, #244]	; (800a758 <tcp_process+0x2a4>)
 800a664:	f240 3222 	movw	r2, #802	; 0x322
 800a668:	4941      	ldr	r1, [pc, #260]	; (800a770 <tcp_process+0x2bc>)
 800a66a:	483d      	ldr	r0, [pc, #244]	; (800a760 <tcp_process+0x2ac>)
 800a66c:	f002 ffc5 	bl	800d5fa <iprintf>
 800a670:	e7f4      	b.n	800a65c <tcp_process+0x1a8>
        pcb->rtime = -1;
 800a672:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a676:	8623      	strh	r3, [r4, #48]	; 0x30
 800a678:	e7d4      	b.n	800a624 <tcp_process+0x170>
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800a67a:	2500      	movs	r5, #0
 800a67c:	e7da      	b.n	800a634 <tcp_process+0x180>
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a67e:	4b3a      	ldr	r3, [pc, #232]	; (800a768 <tcp_process+0x2b4>)
 800a680:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800a682:	4a3c      	ldr	r2, [pc, #240]	; (800a774 <tcp_process+0x2c0>)
 800a684:	493c      	ldr	r1, [pc, #240]	; (800a778 <tcp_process+0x2c4>)
 800a686:	880d      	ldrh	r5, [r1, #0]
 800a688:	4930      	ldr	r1, [pc, #192]	; (800a74c <tcp_process+0x298>)
 800a68a:	6809      	ldr	r1, [r1, #0]
 800a68c:	4830      	ldr	r0, [pc, #192]	; (800a750 <tcp_process+0x29c>)
 800a68e:	6800      	ldr	r0, [r0, #0]
 800a690:	881e      	ldrh	r6, [r3, #0]
 800a692:	9601      	str	r6, [sp, #4]
 800a694:	885b      	ldrh	r3, [r3, #2]
 800a696:	9300      	str	r3, [sp, #0]
 800a698:	4613      	mov	r3, r2
 800a69a:	3204      	adds	r2, #4
 800a69c:	4429      	add	r1, r5
 800a69e:	f001 faeb 	bl	800bc78 <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 800a6a2:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800a6a6:	2b05      	cmp	r3, #5
 800a6a8:	d901      	bls.n	800a6ae <tcp_process+0x1fa>
  return ERR_OK;
 800a6aa:	2500      	movs	r5, #0
 800a6ac:	e71d      	b.n	800a4ea <tcp_process+0x36>
        pcb->rtime = 0;
 800a6ae:	2500      	movs	r5, #0
 800a6b0:	8625      	strh	r5, [r4, #48]	; 0x30
        tcp_rexmit_rto(pcb);
 800a6b2:	4620      	mov	r0, r4
 800a6b4:	f001 fb36 	bl	800bd24 <tcp_rexmit_rto>
 800a6b8:	e717      	b.n	800a4ea <tcp_process+0x36>
    if (flags & TCP_ACK) {
 800a6ba:	4b23      	ldr	r3, [pc, #140]	; (800a748 <tcp_process+0x294>)
 800a6bc:	781b      	ldrb	r3, [r3, #0]
 800a6be:	f013 0f10 	tst.w	r3, #16
 800a6c2:	f000 8083 	beq.w	800a7cc <tcp_process+0x318>
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 800a6c6:	4b22      	ldr	r3, [pc, #136]	; (800a750 <tcp_process+0x29c>)
 800a6c8:	6818      	ldr	r0, [r3, #0]
 800a6ca:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800a6cc:	1ac3      	subs	r3, r0, r3
 800a6ce:	2b01      	cmp	r3, #1
 800a6d0:	d403      	bmi.n	800a6da <tcp_process+0x226>
 800a6d2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800a6d4:	1ac3      	subs	r3, r0, r3
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	dd11      	ble.n	800a6fe <tcp_process+0x24a>
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a6da:	4b23      	ldr	r3, [pc, #140]	; (800a768 <tcp_process+0x2b4>)
 800a6dc:	681b      	ldr	r3, [r3, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800a6de:	4a25      	ldr	r2, [pc, #148]	; (800a774 <tcp_process+0x2c0>)
 800a6e0:	4925      	ldr	r1, [pc, #148]	; (800a778 <tcp_process+0x2c4>)
 800a6e2:	880c      	ldrh	r4, [r1, #0]
 800a6e4:	4919      	ldr	r1, [pc, #100]	; (800a74c <tcp_process+0x298>)
 800a6e6:	6809      	ldr	r1, [r1, #0]
 800a6e8:	881d      	ldrh	r5, [r3, #0]
 800a6ea:	9501      	str	r5, [sp, #4]
 800a6ec:	885b      	ldrh	r3, [r3, #2]
 800a6ee:	9300      	str	r3, [sp, #0]
 800a6f0:	4613      	mov	r3, r2
 800a6f2:	3204      	adds	r2, #4
 800a6f4:	4421      	add	r1, r4
 800a6f6:	f001 fabf 	bl	800bc78 <tcp_rst>
  return ERR_OK;
 800a6fa:	2500      	movs	r5, #0
 800a6fc:	e6f5      	b.n	800a4ea <tcp_process+0x36>
        pcb->state = ESTABLISHED;
 800a6fe:	2304      	movs	r3, #4
 800a700:	7523      	strb	r3, [r4, #20]
        LWIP_ASSERT("pcb->listener->accept != NULL",
 800a702:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800a704:	b10b      	cbz	r3, 800a70a <tcp_process+0x256>
 800a706:	699b      	ldr	r3, [r3, #24]
 800a708:	b19b      	cbz	r3, 800a732 <tcp_process+0x27e>
        if (pcb->listener == NULL) {
 800a70a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800a70c:	b1cb      	cbz	r3, 800a742 <tcp_process+0x28e>
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800a70e:	699b      	ldr	r3, [r3, #24]
 800a710:	b3b3      	cbz	r3, 800a780 <tcp_process+0x2cc>
 800a712:	2200      	movs	r2, #0
 800a714:	4621      	mov	r1, r4
 800a716:	6920      	ldr	r0, [r4, #16]
 800a718:	4798      	blx	r3
 800a71a:	4605      	mov	r5, r0
        if (err != ERR_OK) {
 800a71c:	b39d      	cbz	r5, 800a786 <tcp_process+0x2d2>
          if (err != ERR_ABRT) {
 800a71e:	f115 0f0d 	cmn.w	r5, #13
 800a722:	f43f aee2 	beq.w	800a4ea <tcp_process+0x36>
            tcp_abort(pcb);
 800a726:	4620      	mov	r0, r4
 800a728:	f7fe fec8 	bl	80094bc <tcp_abort>
          return ERR_ABRT;
 800a72c:	f06f 050c 	mvn.w	r5, #12
 800a730:	e6db      	b.n	800a4ea <tcp_process+0x36>
        LWIP_ASSERT("pcb->listener->accept != NULL",
 800a732:	4b09      	ldr	r3, [pc, #36]	; (800a758 <tcp_process+0x2a4>)
 800a734:	f240 3251 	movw	r2, #849	; 0x351
 800a738:	4910      	ldr	r1, [pc, #64]	; (800a77c <tcp_process+0x2c8>)
 800a73a:	4809      	ldr	r0, [pc, #36]	; (800a760 <tcp_process+0x2ac>)
 800a73c:	f002 ff5d 	bl	800d5fa <iprintf>
 800a740:	e7e3      	b.n	800a70a <tcp_process+0x256>
          err = ERR_VAL;
 800a742:	f06f 0505 	mvn.w	r5, #5
 800a746:	e7e9      	b.n	800a71c <tcp_process+0x268>
 800a748:	20003f8c 	.word	0x20003f8c
 800a74c:	20003fac 	.word	0x20003fac
 800a750:	20003f88 	.word	0x20003f88
 800a754:	20003fa8 	.word	0x20003fa8
 800a758:	0800f850 	.word	0x0800f850
 800a75c:	0800f7e4 	.word	0x0800f7e4
 800a760:	0800de34 	.word	0x0800de34
 800a764:	20007988 	.word	0x20007988
 800a768:	20003fb4 	.word	0x20003fb4
 800a76c:	0800f804 	.word	0x0800f804
 800a770:	0800f81c 	.word	0x0800f81c
 800a774:	20004284 	.word	0x20004284
 800a778:	20003fc2 	.word	0x20003fc2
 800a77c:	0800f830 	.word	0x0800f830
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800a780:	f06f 050f 	mvn.w	r5, #15
 800a784:	e7ca      	b.n	800a71c <tcp_process+0x268>
        tcp_receive(pcb);
 800a786:	4620      	mov	r0, r4
 800a788:	f7ff f970 	bl	8009a6c <tcp_receive>
        if (recv_acked != 0) {
 800a78c:	4b8f      	ldr	r3, [pc, #572]	; (800a9cc <tcp_process+0x518>)
 800a78e:	881b      	ldrh	r3, [r3, #0]
 800a790:	b113      	cbz	r3, 800a798 <tcp_process+0x2e4>
          recv_acked--;
 800a792:	3b01      	subs	r3, #1
 800a794:	4a8d      	ldr	r2, [pc, #564]	; (800a9cc <tcp_process+0x518>)
 800a796:	8013      	strh	r3, [r2, #0]
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800a798:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 800a79a:	0053      	lsls	r3, r2, #1
 800a79c:	f241 111c 	movw	r1, #4380	; 0x111c
 800a7a0:	428b      	cmp	r3, r1
 800a7a2:	bf38      	it	cc
 800a7a4:	460b      	movcc	r3, r1
 800a7a6:	0092      	lsls	r2, r2, #2
 800a7a8:	4293      	cmp	r3, r2
 800a7aa:	bf28      	it	cs
 800a7ac:	4613      	movcs	r3, r2
 800a7ae:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
        if (recv_flags & TF_GOT_FIN) {
 800a7b2:	4b87      	ldr	r3, [pc, #540]	; (800a9d0 <tcp_process+0x51c>)
 800a7b4:	781b      	ldrb	r3, [r3, #0]
 800a7b6:	f013 0f20 	tst.w	r3, #32
 800a7ba:	f43f ae96 	beq.w	800a4ea <tcp_process+0x36>
          tcp_ack_now(pcb);
 800a7be:	7ea3      	ldrb	r3, [r4, #26]
 800a7c0:	f043 0302 	orr.w	r3, r3, #2
 800a7c4:	76a3      	strb	r3, [r4, #26]
          pcb->state = CLOSE_WAIT;
 800a7c6:	2307      	movs	r3, #7
 800a7c8:	7523      	strb	r3, [r4, #20]
 800a7ca:	e68e      	b.n	800a4ea <tcp_process+0x36>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800a7cc:	f013 0f02 	tst.w	r3, #2
 800a7d0:	f000 80f1 	beq.w	800a9b6 <tcp_process+0x502>
 800a7d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a7d6:	3b01      	subs	r3, #1
 800a7d8:	4a7e      	ldr	r2, [pc, #504]	; (800a9d4 <tcp_process+0x520>)
 800a7da:	6812      	ldr	r2, [r2, #0]
 800a7dc:	4293      	cmp	r3, r2
 800a7de:	d001      	beq.n	800a7e4 <tcp_process+0x330>
  return ERR_OK;
 800a7e0:	2500      	movs	r5, #0
 800a7e2:	e682      	b.n	800a4ea <tcp_process+0x36>
      tcp_rexmit(pcb);
 800a7e4:	4620      	mov	r0, r4
 800a7e6:	f001 fab8 	bl	800bd5a <tcp_rexmit>
  return ERR_OK;
 800a7ea:	2500      	movs	r5, #0
 800a7ec:	e67d      	b.n	800a4ea <tcp_process+0x36>
    tcp_receive(pcb);
 800a7ee:	4620      	mov	r0, r4
 800a7f0:	f7ff f93c 	bl	8009a6c <tcp_receive>
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 800a7f4:	4b76      	ldr	r3, [pc, #472]	; (800a9d0 <tcp_process+0x51c>)
 800a7f6:	781b      	ldrb	r3, [r3, #0]
 800a7f8:	f013 0f20 	tst.w	r3, #32
 800a7fc:	f000 80dd 	beq.w	800a9ba <tcp_process+0x506>
      tcp_ack_now(pcb);
 800a800:	7ea3      	ldrb	r3, [r4, #26]
 800a802:	f043 0302 	orr.w	r3, r3, #2
 800a806:	76a3      	strb	r3, [r4, #26]
      pcb->state = CLOSE_WAIT;
 800a808:	2307      	movs	r3, #7
 800a80a:	7523      	strb	r3, [r4, #20]
  return ERR_OK;
 800a80c:	2500      	movs	r5, #0
 800a80e:	e66c      	b.n	800a4ea <tcp_process+0x36>
    tcp_receive(pcb);
 800a810:	4620      	mov	r0, r4
 800a812:	f7ff f92b 	bl	8009a6c <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 800a816:	4b6e      	ldr	r3, [pc, #440]	; (800a9d0 <tcp_process+0x51c>)
 800a818:	781b      	ldrb	r3, [r3, #0]
 800a81a:	f013 0f20 	tst.w	r3, #32
 800a81e:	d038      	beq.n	800a892 <tcp_process+0x3de>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a820:	4b6d      	ldr	r3, [pc, #436]	; (800a9d8 <tcp_process+0x524>)
 800a822:	781b      	ldrb	r3, [r3, #0]
 800a824:	f013 0f10 	tst.w	r3, #16
 800a828:	d004      	beq.n	800a834 <tcp_process+0x380>
 800a82a:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800a82c:	4b6b      	ldr	r3, [pc, #428]	; (800a9dc <tcp_process+0x528>)
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	429a      	cmp	r2, r3
 800a832:	d007      	beq.n	800a844 <tcp_process+0x390>
        tcp_ack_now(pcb);
 800a834:	7ea3      	ldrb	r3, [r4, #26]
 800a836:	f043 0302 	orr.w	r3, r3, #2
 800a83a:	76a3      	strb	r3, [r4, #26]
        pcb->state = CLOSING;
 800a83c:	2308      	movs	r3, #8
 800a83e:	7523      	strb	r3, [r4, #20]
  return ERR_OK;
 800a840:	2500      	movs	r5, #0
 800a842:	e652      	b.n	800a4ea <tcp_process+0x36>
          pcb->unsent == NULL) {
 800a844:	6ea3      	ldr	r3, [r4, #104]	; 0x68
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a846:	2b00      	cmp	r3, #0
 800a848:	d1f4      	bne.n	800a834 <tcp_process+0x380>
        tcp_ack_now(pcb);
 800a84a:	7ea3      	ldrb	r3, [r4, #26]
 800a84c:	f043 0302 	orr.w	r3, r3, #2
 800a850:	76a3      	strb	r3, [r4, #26]
        tcp_pcb_purge(pcb);
 800a852:	4620      	mov	r0, r4
 800a854:	f7fe f9c2 	bl	8008bdc <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800a858:	4b61      	ldr	r3, [pc, #388]	; (800a9e0 <tcp_process+0x52c>)
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	429c      	cmp	r4, r3
 800a85e:	d005      	beq.n	800a86c <tcp_process+0x3b8>
 800a860:	b153      	cbz	r3, 800a878 <tcp_process+0x3c4>
 800a862:	68da      	ldr	r2, [r3, #12]
 800a864:	4294      	cmp	r4, r2
 800a866:	d005      	beq.n	800a874 <tcp_process+0x3c0>
 800a868:	4613      	mov	r3, r2
 800a86a:	e7f9      	b.n	800a860 <tcp_process+0x3ac>
 800a86c:	68da      	ldr	r2, [r3, #12]
 800a86e:	4b5c      	ldr	r3, [pc, #368]	; (800a9e0 <tcp_process+0x52c>)
 800a870:	601a      	str	r2, [r3, #0]
 800a872:	e001      	b.n	800a878 <tcp_process+0x3c4>
 800a874:	68e2      	ldr	r2, [r4, #12]
 800a876:	60da      	str	r2, [r3, #12]
 800a878:	2201      	movs	r2, #1
 800a87a:	4b5a      	ldr	r3, [pc, #360]	; (800a9e4 <tcp_process+0x530>)
 800a87c:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800a87e:	230a      	movs	r3, #10
 800a880:	7523      	strb	r3, [r4, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800a882:	4b59      	ldr	r3, [pc, #356]	; (800a9e8 <tcp_process+0x534>)
 800a884:	681a      	ldr	r2, [r3, #0]
 800a886:	60e2      	str	r2, [r4, #12]
 800a888:	601c      	str	r4, [r3, #0]
 800a88a:	f001 fc03 	bl	800c094 <tcp_timer_needed>
  return ERR_OK;
 800a88e:	2500      	movs	r5, #0
        TCP_REG(&tcp_tw_pcbs, pcb);
 800a890:	e62b      	b.n	800a4ea <tcp_process+0x36>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a892:	4b51      	ldr	r3, [pc, #324]	; (800a9d8 <tcp_process+0x524>)
 800a894:	781b      	ldrb	r3, [r3, #0]
 800a896:	f013 0f10 	tst.w	r3, #16
 800a89a:	f000 8090 	beq.w	800a9be <tcp_process+0x50a>
 800a89e:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800a8a0:	4b4e      	ldr	r3, [pc, #312]	; (800a9dc <tcp_process+0x528>)
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	429a      	cmp	r2, r3
 800a8a6:	d001      	beq.n	800a8ac <tcp_process+0x3f8>
  return ERR_OK;
 800a8a8:	2500      	movs	r5, #0
 800a8aa:	e61e      	b.n	800a4ea <tcp_process+0x36>
               pcb->unsent == NULL) {
 800a8ac:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a8ae:	b10b      	cbz	r3, 800a8b4 <tcp_process+0x400>
  return ERR_OK;
 800a8b0:	2500      	movs	r5, #0
 800a8b2:	e61a      	b.n	800a4ea <tcp_process+0x36>
      pcb->state = FIN_WAIT_2;
 800a8b4:	2306      	movs	r3, #6
 800a8b6:	7523      	strb	r3, [r4, #20]
  return ERR_OK;
 800a8b8:	2500      	movs	r5, #0
 800a8ba:	e616      	b.n	800a4ea <tcp_process+0x36>
    tcp_receive(pcb);
 800a8bc:	4620      	mov	r0, r4
 800a8be:	f7ff f8d5 	bl	8009a6c <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 800a8c2:	4b43      	ldr	r3, [pc, #268]	; (800a9d0 <tcp_process+0x51c>)
 800a8c4:	781b      	ldrb	r3, [r3, #0]
 800a8c6:	f013 0f20 	tst.w	r3, #32
 800a8ca:	d101      	bne.n	800a8d0 <tcp_process+0x41c>
  return ERR_OK;
 800a8cc:	2500      	movs	r5, #0
 800a8ce:	e60c      	b.n	800a4ea <tcp_process+0x36>
      tcp_ack_now(pcb);
 800a8d0:	7ea3      	ldrb	r3, [r4, #26]
 800a8d2:	f043 0302 	orr.w	r3, r3, #2
 800a8d6:	76a3      	strb	r3, [r4, #26]
      tcp_pcb_purge(pcb);
 800a8d8:	4620      	mov	r0, r4
 800a8da:	f7fe f97f 	bl	8008bdc <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800a8de:	4b40      	ldr	r3, [pc, #256]	; (800a9e0 <tcp_process+0x52c>)
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	429c      	cmp	r4, r3
 800a8e4:	d005      	beq.n	800a8f2 <tcp_process+0x43e>
 800a8e6:	b153      	cbz	r3, 800a8fe <tcp_process+0x44a>
 800a8e8:	68da      	ldr	r2, [r3, #12]
 800a8ea:	4294      	cmp	r4, r2
 800a8ec:	d005      	beq.n	800a8fa <tcp_process+0x446>
 800a8ee:	4613      	mov	r3, r2
 800a8f0:	e7f9      	b.n	800a8e6 <tcp_process+0x432>
 800a8f2:	68da      	ldr	r2, [r3, #12]
 800a8f4:	4b3a      	ldr	r3, [pc, #232]	; (800a9e0 <tcp_process+0x52c>)
 800a8f6:	601a      	str	r2, [r3, #0]
 800a8f8:	e001      	b.n	800a8fe <tcp_process+0x44a>
 800a8fa:	68e2      	ldr	r2, [r4, #12]
 800a8fc:	60da      	str	r2, [r3, #12]
 800a8fe:	2201      	movs	r2, #1
 800a900:	4b38      	ldr	r3, [pc, #224]	; (800a9e4 <tcp_process+0x530>)
 800a902:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 800a904:	230a      	movs	r3, #10
 800a906:	7523      	strb	r3, [r4, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 800a908:	4b37      	ldr	r3, [pc, #220]	; (800a9e8 <tcp_process+0x534>)
 800a90a:	681a      	ldr	r2, [r3, #0]
 800a90c:	60e2      	str	r2, [r4, #12]
 800a90e:	601c      	str	r4, [r3, #0]
 800a910:	f001 fbc0 	bl	800c094 <tcp_timer_needed>
  return ERR_OK;
 800a914:	2500      	movs	r5, #0
 800a916:	e5e8      	b.n	800a4ea <tcp_process+0x36>
    tcp_receive(pcb);
 800a918:	4620      	mov	r0, r4
 800a91a:	f7ff f8a7 	bl	8009a6c <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800a91e:	4b2e      	ldr	r3, [pc, #184]	; (800a9d8 <tcp_process+0x524>)
 800a920:	781b      	ldrb	r3, [r3, #0]
 800a922:	f013 0f10 	tst.w	r3, #16
 800a926:	d04c      	beq.n	800a9c2 <tcp_process+0x50e>
 800a928:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800a92a:	4b2c      	ldr	r3, [pc, #176]	; (800a9dc <tcp_process+0x528>)
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	429a      	cmp	r2, r3
 800a930:	d001      	beq.n	800a936 <tcp_process+0x482>
  return ERR_OK;
 800a932:	2500      	movs	r5, #0
 800a934:	e5d9      	b.n	800a4ea <tcp_process+0x36>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800a936:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800a938:	b10b      	cbz	r3, 800a93e <tcp_process+0x48a>
  return ERR_OK;
 800a93a:	2500      	movs	r5, #0
 800a93c:	e5d5      	b.n	800a4ea <tcp_process+0x36>
      tcp_pcb_purge(pcb);
 800a93e:	4620      	mov	r0, r4
 800a940:	f7fe f94c 	bl	8008bdc <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800a944:	4b26      	ldr	r3, [pc, #152]	; (800a9e0 <tcp_process+0x52c>)
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	429c      	cmp	r4, r3
 800a94a:	d005      	beq.n	800a958 <tcp_process+0x4a4>
 800a94c:	b153      	cbz	r3, 800a964 <tcp_process+0x4b0>
 800a94e:	68da      	ldr	r2, [r3, #12]
 800a950:	4294      	cmp	r4, r2
 800a952:	d005      	beq.n	800a960 <tcp_process+0x4ac>
 800a954:	4613      	mov	r3, r2
 800a956:	e7f9      	b.n	800a94c <tcp_process+0x498>
 800a958:	68da      	ldr	r2, [r3, #12]
 800a95a:	4b21      	ldr	r3, [pc, #132]	; (800a9e0 <tcp_process+0x52c>)
 800a95c:	601a      	str	r2, [r3, #0]
 800a95e:	e001      	b.n	800a964 <tcp_process+0x4b0>
 800a960:	68e2      	ldr	r2, [r4, #12]
 800a962:	60da      	str	r2, [r3, #12]
 800a964:	2201      	movs	r2, #1
 800a966:	4b1f      	ldr	r3, [pc, #124]	; (800a9e4 <tcp_process+0x530>)
 800a968:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 800a96a:	230a      	movs	r3, #10
 800a96c:	7523      	strb	r3, [r4, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 800a96e:	4b1e      	ldr	r3, [pc, #120]	; (800a9e8 <tcp_process+0x534>)
 800a970:	681a      	ldr	r2, [r3, #0]
 800a972:	60e2      	str	r2, [r4, #12]
 800a974:	601c      	str	r4, [r3, #0]
 800a976:	f001 fb8d 	bl	800c094 <tcp_timer_needed>
  return ERR_OK;
 800a97a:	2500      	movs	r5, #0
 800a97c:	e5b5      	b.n	800a4ea <tcp_process+0x36>
    tcp_receive(pcb);
 800a97e:	4620      	mov	r0, r4
 800a980:	f7ff f874 	bl	8009a6c <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800a984:	4b14      	ldr	r3, [pc, #80]	; (800a9d8 <tcp_process+0x524>)
 800a986:	781b      	ldrb	r3, [r3, #0]
 800a988:	f013 0f10 	tst.w	r3, #16
 800a98c:	d01b      	beq.n	800a9c6 <tcp_process+0x512>
 800a98e:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800a990:	4b12      	ldr	r3, [pc, #72]	; (800a9dc <tcp_process+0x528>)
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	429a      	cmp	r2, r3
 800a996:	d001      	beq.n	800a99c <tcp_process+0x4e8>
  return ERR_OK;
 800a998:	2500      	movs	r5, #0
 800a99a:	e5a6      	b.n	800a4ea <tcp_process+0x36>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800a99c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800a99e:	b10b      	cbz	r3, 800a9a4 <tcp_process+0x4f0>
  return ERR_OK;
 800a9a0:	2500      	movs	r5, #0
 800a9a2:	e5a2      	b.n	800a4ea <tcp_process+0x36>
      recv_flags |= TF_CLOSED;
 800a9a4:	4a0a      	ldr	r2, [pc, #40]	; (800a9d0 <tcp_process+0x51c>)
 800a9a6:	7813      	ldrb	r3, [r2, #0]
 800a9a8:	f043 0310 	orr.w	r3, r3, #16
 800a9ac:	7013      	strb	r3, [r2, #0]
  return ERR_OK;
 800a9ae:	2500      	movs	r5, #0
 800a9b0:	e59b      	b.n	800a4ea <tcp_process+0x36>
 800a9b2:	2500      	movs	r5, #0
 800a9b4:	e599      	b.n	800a4ea <tcp_process+0x36>
 800a9b6:	2500      	movs	r5, #0
 800a9b8:	e597      	b.n	800a4ea <tcp_process+0x36>
 800a9ba:	2500      	movs	r5, #0
 800a9bc:	e595      	b.n	800a4ea <tcp_process+0x36>
 800a9be:	2500      	movs	r5, #0
 800a9c0:	e593      	b.n	800a4ea <tcp_process+0x36>
 800a9c2:	2500      	movs	r5, #0
 800a9c4:	e591      	b.n	800a4ea <tcp_process+0x36>
 800a9c6:	2500      	movs	r5, #0
 800a9c8:	e58f      	b.n	800a4ea <tcp_process+0x36>
 800a9ca:	bf00      	nop
 800a9cc:	20003fa0 	.word	0x20003fa0
 800a9d0:	20003fa8 	.word	0x20003fa8
 800a9d4:	20003fac 	.word	0x20003fac
 800a9d8:	20003f8c 	.word	0x20003f8c
 800a9dc:	20003f88 	.word	0x20003f88
 800a9e0:	20007984 	.word	0x20007984
 800a9e4:	20007980 	.word	0x20007980
 800a9e8:	20007994 	.word	0x20007994

0800a9ec <tcp_input>:
{
 800a9ec:	b570      	push	{r4, r5, r6, lr}
 800a9ee:	b082      	sub	sp, #8
 800a9f0:	4604      	mov	r4, r0
  tcphdr = (struct tcp_hdr *)p->payload;
 800a9f2:	6842      	ldr	r2, [r0, #4]
 800a9f4:	4b9f      	ldr	r3, [pc, #636]	; (800ac74 <tcp_input+0x288>)
 800a9f6:	601a      	str	r2, [r3, #0]
  if (p->len < TCP_HLEN) {
 800a9f8:	8943      	ldrh	r3, [r0, #10]
 800a9fa:	2b13      	cmp	r3, #19
 800a9fc:	d93e      	bls.n	800aa7c <tcp_input+0x90>
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800a9fe:	4b9e      	ldr	r3, [pc, #632]	; (800ac78 <tcp_input+0x28c>)
 800aa00:	6819      	ldr	r1, [r3, #0]
 800aa02:	6958      	ldr	r0, [r3, #20]
 800aa04:	f7fc faab 	bl	8006f5e <ip4_addr_isbroadcast_u32>
 800aa08:	2800      	cmp	r0, #0
 800aa0a:	d137      	bne.n	800aa7c <tcp_input+0x90>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800aa0c:	4b9a      	ldr	r3, [pc, #616]	; (800ac78 <tcp_input+0x28c>)
 800aa0e:	695b      	ldr	r3, [r3, #20]
 800aa10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800aa14:	2be0      	cmp	r3, #224	; 0xe0
 800aa16:	d031      	beq.n	800aa7c <tcp_input+0x90>
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 800aa18:	4b96      	ldr	r3, [pc, #600]	; (800ac74 <tcp_input+0x288>)
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	8998      	ldrh	r0, [r3, #12]
 800aa1e:	f7fb fb39 	bl	8006094 <lwip_htons>
 800aa22:	f3c0 310f 	ubfx	r1, r0, #12, #16
 800aa26:	0089      	lsls	r1, r1, #2
 800aa28:	b2c9      	uxtb	r1, r1
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800aa2a:	2913      	cmp	r1, #19
 800aa2c:	d926      	bls.n	800aa7c <tcp_input+0x90>
 800aa2e:	b289      	uxth	r1, r1
 800aa30:	8923      	ldrh	r3, [r4, #8]
 800aa32:	4299      	cmp	r1, r3
 800aa34:	d822      	bhi.n	800aa7c <tcp_input+0x90>
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 800aa36:	f1a1 0314 	sub.w	r3, r1, #20
 800aa3a:	b29b      	uxth	r3, r3
 800aa3c:	4a8f      	ldr	r2, [pc, #572]	; (800ac7c <tcp_input+0x290>)
 800aa3e:	8013      	strh	r3, [r2, #0]
  tcphdr_opt2 = NULL;
 800aa40:	2000      	movs	r0, #0
 800aa42:	4a8f      	ldr	r2, [pc, #572]	; (800ac80 <tcp_input+0x294>)
 800aa44:	6010      	str	r0, [r2, #0]
  if (p->len >= hdrlen_bytes) {
 800aa46:	8962      	ldrh	r2, [r4, #10]
 800aa48:	4291      	cmp	r1, r2
 800aa4a:	d91c      	bls.n	800aa86 <tcp_input+0x9a>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800aa4c:	6823      	ldr	r3, [r4, #0]
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d051      	beq.n	800aaf6 <tcp_input+0x10a>
    pbuf_header(p, -TCP_HLEN);
 800aa52:	f06f 0113 	mvn.w	r1, #19
 800aa56:	4620      	mov	r0, r4
 800aa58:	f7fd fb2e 	bl	80080b8 <pbuf_header>
    tcphdr_opt1len = p->len;
 800aa5c:	8961      	ldrh	r1, [r4, #10]
 800aa5e:	4b89      	ldr	r3, [pc, #548]	; (800ac84 <tcp_input+0x298>)
 800aa60:	8019      	strh	r1, [r3, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 800aa62:	4b86      	ldr	r3, [pc, #536]	; (800ac7c <tcp_input+0x290>)
 800aa64:	881d      	ldrh	r5, [r3, #0]
 800aa66:	1a6d      	subs	r5, r5, r1
 800aa68:	b2ad      	uxth	r5, r5
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 800aa6a:	4249      	negs	r1, r1
 800aa6c:	b209      	sxth	r1, r1
 800aa6e:	4620      	mov	r0, r4
 800aa70:	f7fd fb22 	bl	80080b8 <pbuf_header>
    if (opt2len > p->next->len) {
 800aa74:	6820      	ldr	r0, [r4, #0]
 800aa76:	8943      	ldrh	r3, [r0, #10]
 800aa78:	429d      	cmp	r5, r3
 800aa7a:	d943      	bls.n	800ab04 <tcp_input+0x118>
  pbuf_free(p);
 800aa7c:	4620      	mov	r0, r4
 800aa7e:	f7fd fb25 	bl	80080cc <pbuf_free>
}
 800aa82:	b002      	add	sp, #8
 800aa84:	bd70      	pop	{r4, r5, r6, pc}
    tcphdr_opt1len = tcphdr_optlen;
 800aa86:	4a7f      	ldr	r2, [pc, #508]	; (800ac84 <tcp_input+0x298>)
 800aa88:	8013      	strh	r3, [r2, #0]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 800aa8a:	4249      	negs	r1, r1
 800aa8c:	4620      	mov	r0, r4
 800aa8e:	f7fd fb13 	bl	80080b8 <pbuf_header>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800aa92:	4d78      	ldr	r5, [pc, #480]	; (800ac74 <tcp_input+0x288>)
 800aa94:	682e      	ldr	r6, [r5, #0]
 800aa96:	8830      	ldrh	r0, [r6, #0]
 800aa98:	f7fb fafc 	bl	8006094 <lwip_htons>
 800aa9c:	8030      	strh	r0, [r6, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800aa9e:	682e      	ldr	r6, [r5, #0]
 800aaa0:	8870      	ldrh	r0, [r6, #2]
 800aaa2:	f7fb faf7 	bl	8006094 <lwip_htons>
 800aaa6:	8070      	strh	r0, [r6, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800aaa8:	682e      	ldr	r6, [r5, #0]
 800aaaa:	6870      	ldr	r0, [r6, #4]
 800aaac:	f7fb faf5 	bl	800609a <lwip_htonl>
 800aab0:	6070      	str	r0, [r6, #4]
 800aab2:	4b75      	ldr	r3, [pc, #468]	; (800ac88 <tcp_input+0x29c>)
 800aab4:	6018      	str	r0, [r3, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800aab6:	682e      	ldr	r6, [r5, #0]
 800aab8:	68b0      	ldr	r0, [r6, #8]
 800aaba:	f7fb faee 	bl	800609a <lwip_htonl>
 800aabe:	60b0      	str	r0, [r6, #8]
 800aac0:	4b72      	ldr	r3, [pc, #456]	; (800ac8c <tcp_input+0x2a0>)
 800aac2:	6018      	str	r0, [r3, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800aac4:	682e      	ldr	r6, [r5, #0]
 800aac6:	89f0      	ldrh	r0, [r6, #14]
 800aac8:	f7fb fae4 	bl	8006094 <lwip_htons>
 800aacc:	81f0      	strh	r0, [r6, #14]
  flags = TCPH_FLAGS(tcphdr);
 800aace:	682b      	ldr	r3, [r5, #0]
 800aad0:	8998      	ldrh	r0, [r3, #12]
 800aad2:	f7fb fadf 	bl	8006094 <lwip_htons>
 800aad6:	f000 033f 	and.w	r3, r0, #63	; 0x3f
 800aada:	4a6d      	ldr	r2, [pc, #436]	; (800ac90 <tcp_input+0x2a4>)
 800aadc:	7013      	strb	r3, [r2, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 800aade:	8922      	ldrh	r2, [r4, #8]
 800aae0:	f013 0303 	ands.w	r3, r3, #3
 800aae4:	bf18      	it	ne
 800aae6:	2301      	movne	r3, #1
 800aae8:	4413      	add	r3, r2
 800aaea:	4a6a      	ldr	r2, [pc, #424]	; (800ac94 <tcp_input+0x2a8>)
 800aaec:	8013      	strh	r3, [r2, #0]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800aaee:	4b6a      	ldr	r3, [pc, #424]	; (800ac98 <tcp_input+0x2ac>)
 800aaf0:	681d      	ldr	r5, [r3, #0]
  prev = NULL;
 800aaf2:	2600      	movs	r6, #0
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800aaf4:	e033      	b.n	800ab5e <tcp_input+0x172>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800aaf6:	4b69      	ldr	r3, [pc, #420]	; (800ac9c <tcp_input+0x2b0>)
 800aaf8:	22b2      	movs	r2, #178	; 0xb2
 800aafa:	4969      	ldr	r1, [pc, #420]	; (800aca0 <tcp_input+0x2b4>)
 800aafc:	4869      	ldr	r0, [pc, #420]	; (800aca4 <tcp_input+0x2b8>)
 800aafe:	f002 fd7c 	bl	800d5fa <iprintf>
 800ab02:	e7a6      	b.n	800aa52 <tcp_input+0x66>
    tcphdr_opt2 = (u8_t*)p->next->payload;
 800ab04:	6842      	ldr	r2, [r0, #4]
 800ab06:	4b5e      	ldr	r3, [pc, #376]	; (800ac80 <tcp_input+0x294>)
 800ab08:	601a      	str	r2, [r3, #0]
    pbuf_header(p->next, -(s16_t)opt2len);
 800ab0a:	4269      	negs	r1, r5
 800ab0c:	b209      	sxth	r1, r1
 800ab0e:	f7fd fad3 	bl	80080b8 <pbuf_header>
    p->tot_len -= opt2len;
 800ab12:	8923      	ldrh	r3, [r4, #8]
 800ab14:	1b5d      	subs	r5, r3, r5
 800ab16:	8125      	strh	r5, [r4, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 800ab18:	8963      	ldrh	r3, [r4, #10]
 800ab1a:	b95b      	cbnz	r3, 800ab34 <tcp_input+0x148>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800ab1c:	8922      	ldrh	r2, [r4, #8]
 800ab1e:	6823      	ldr	r3, [r4, #0]
 800ab20:	891b      	ldrh	r3, [r3, #8]
 800ab22:	429a      	cmp	r2, r3
 800ab24:	d0b5      	beq.n	800aa92 <tcp_input+0xa6>
 800ab26:	4b5d      	ldr	r3, [pc, #372]	; (800ac9c <tcp_input+0x2b0>)
 800ab28:	22d0      	movs	r2, #208	; 0xd0
 800ab2a:	495f      	ldr	r1, [pc, #380]	; (800aca8 <tcp_input+0x2bc>)
 800ab2c:	485d      	ldr	r0, [pc, #372]	; (800aca4 <tcp_input+0x2b8>)
 800ab2e:	f002 fd64 	bl	800d5fa <iprintf>
 800ab32:	e7ae      	b.n	800aa92 <tcp_input+0xa6>
    LWIP_ASSERT("p->len == 0", p->len == 0);
 800ab34:	4b59      	ldr	r3, [pc, #356]	; (800ac9c <tcp_input+0x2b0>)
 800ab36:	22cf      	movs	r2, #207	; 0xcf
 800ab38:	495c      	ldr	r1, [pc, #368]	; (800acac <tcp_input+0x2c0>)
 800ab3a:	485a      	ldr	r0, [pc, #360]	; (800aca4 <tcp_input+0x2b8>)
 800ab3c:	f002 fd5d 	bl	800d5fa <iprintf>
 800ab40:	e7ec      	b.n	800ab1c <tcp_input+0x130>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800ab42:	7d2b      	ldrb	r3, [r5, #20]
 800ab44:	2b0a      	cmp	r3, #10
 800ab46:	d016      	beq.n	800ab76 <tcp_input+0x18a>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800ab48:	7d2b      	ldrb	r3, [r5, #20]
 800ab4a:	2b01      	cmp	r3, #1
 800ab4c:	d01a      	beq.n	800ab84 <tcp_input+0x198>
    if (pcb->remote_port == tcphdr->src &&
 800ab4e:	8b29      	ldrh	r1, [r5, #24]
 800ab50:	4b48      	ldr	r3, [pc, #288]	; (800ac74 <tcp_input+0x288>)
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	881a      	ldrh	r2, [r3, #0]
 800ab56:	4291      	cmp	r1, r2
 800ab58:	d01b      	beq.n	800ab92 <tcp_input+0x1a6>
    prev = pcb;
 800ab5a:	462e      	mov	r6, r5
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ab5c:	68ed      	ldr	r5, [r5, #12]
 800ab5e:	2d00      	cmp	r5, #0
 800ab60:	d032      	beq.n	800abc8 <tcp_input+0x1dc>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800ab62:	7d2b      	ldrb	r3, [r5, #20]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d1ec      	bne.n	800ab42 <tcp_input+0x156>
 800ab68:	4b4c      	ldr	r3, [pc, #304]	; (800ac9c <tcp_input+0x2b0>)
 800ab6a:	22e2      	movs	r2, #226	; 0xe2
 800ab6c:	4950      	ldr	r1, [pc, #320]	; (800acb0 <tcp_input+0x2c4>)
 800ab6e:	484d      	ldr	r0, [pc, #308]	; (800aca4 <tcp_input+0x2b8>)
 800ab70:	f002 fd43 	bl	800d5fa <iprintf>
 800ab74:	e7e5      	b.n	800ab42 <tcp_input+0x156>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800ab76:	4b49      	ldr	r3, [pc, #292]	; (800ac9c <tcp_input+0x2b0>)
 800ab78:	22e3      	movs	r2, #227	; 0xe3
 800ab7a:	494e      	ldr	r1, [pc, #312]	; (800acb4 <tcp_input+0x2c8>)
 800ab7c:	4849      	ldr	r0, [pc, #292]	; (800aca4 <tcp_input+0x2b8>)
 800ab7e:	f002 fd3c 	bl	800d5fa <iprintf>
 800ab82:	e7e1      	b.n	800ab48 <tcp_input+0x15c>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800ab84:	4b45      	ldr	r3, [pc, #276]	; (800ac9c <tcp_input+0x2b0>)
 800ab86:	22e4      	movs	r2, #228	; 0xe4
 800ab88:	494b      	ldr	r1, [pc, #300]	; (800acb8 <tcp_input+0x2cc>)
 800ab8a:	4846      	ldr	r0, [pc, #280]	; (800aca4 <tcp_input+0x2b8>)
 800ab8c:	f002 fd35 	bl	800d5fa <iprintf>
 800ab90:	e7dd      	b.n	800ab4e <tcp_input+0x162>
        pcb->local_port == tcphdr->dest &&
 800ab92:	8aea      	ldrh	r2, [r5, #22]
 800ab94:	885b      	ldrh	r3, [r3, #2]
    if (pcb->remote_port == tcphdr->src &&
 800ab96:	429a      	cmp	r2, r3
 800ab98:	d1df      	bne.n	800ab5a <tcp_input+0x16e>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ab9a:	686a      	ldr	r2, [r5, #4]
 800ab9c:	4b36      	ldr	r3, [pc, #216]	; (800ac78 <tcp_input+0x28c>)
 800ab9e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800aba0:	429a      	cmp	r2, r3
 800aba2:	d1da      	bne.n	800ab5a <tcp_input+0x16e>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800aba4:	682a      	ldr	r2, [r5, #0]
 800aba6:	4b34      	ldr	r3, [pc, #208]	; (800ac78 <tcp_input+0x28c>)
 800aba8:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800abaa:	429a      	cmp	r2, r3
 800abac:	d1d5      	bne.n	800ab5a <tcp_input+0x16e>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800abae:	68eb      	ldr	r3, [r5, #12]
 800abb0:	429d      	cmp	r5, r3
 800abb2:	d04d      	beq.n	800ac50 <tcp_input+0x264>
      if (prev != NULL) {
 800abb4:	b12e      	cbz	r6, 800abc2 <tcp_input+0x1d6>
        prev->next = pcb->next;
 800abb6:	68eb      	ldr	r3, [r5, #12]
 800abb8:	60f3      	str	r3, [r6, #12]
        pcb->next = tcp_active_pcbs;
 800abba:	4b37      	ldr	r3, [pc, #220]	; (800ac98 <tcp_input+0x2ac>)
 800abbc:	681a      	ldr	r2, [r3, #0]
 800abbe:	60ea      	str	r2, [r5, #12]
        tcp_active_pcbs = pcb;
 800abc0:	601d      	str	r5, [r3, #0]
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800abc2:	68eb      	ldr	r3, [r5, #12]
 800abc4:	429d      	cmp	r5, r3
 800abc6:	d04a      	beq.n	800ac5e <tcp_input+0x272>
  if (pcb == NULL) {
 800abc8:	2d00      	cmp	r5, #0
 800abca:	d04f      	beq.n	800ac6c <tcp_input+0x280>
  if (pcb != NULL) {
 800abcc:	2d00      	cmp	r5, #0
 800abce:	f000 8168 	beq.w	800aea2 <tcp_input+0x4b6>
    inseg.next = NULL;
 800abd2:	4a3a      	ldr	r2, [pc, #232]	; (800acbc <tcp_input+0x2d0>)
 800abd4:	2300      	movs	r3, #0
 800abd6:	6013      	str	r3, [r2, #0]
    inseg.len = p->tot_len;
 800abd8:	8921      	ldrh	r1, [r4, #8]
 800abda:	8111      	strh	r1, [r2, #8]
    inseg.p = p;
 800abdc:	6054      	str	r4, [r2, #4]
    inseg.tcphdr = tcphdr;
 800abde:	4925      	ldr	r1, [pc, #148]	; (800ac74 <tcp_input+0x288>)
 800abe0:	6809      	ldr	r1, [r1, #0]
 800abe2:	60d1      	str	r1, [r2, #12]
    recv_data = NULL;
 800abe4:	4a36      	ldr	r2, [pc, #216]	; (800acc0 <tcp_input+0x2d4>)
 800abe6:	6013      	str	r3, [r2, #0]
    recv_flags = 0;
 800abe8:	4a36      	ldr	r2, [pc, #216]	; (800acc4 <tcp_input+0x2d8>)
 800abea:	7013      	strb	r3, [r2, #0]
    recv_acked = 0;
 800abec:	4a36      	ldr	r2, [pc, #216]	; (800acc8 <tcp_input+0x2dc>)
 800abee:	8013      	strh	r3, [r2, #0]
    if (flags & TCP_PSH) {
 800abf0:	4b27      	ldr	r3, [pc, #156]	; (800ac90 <tcp_input+0x2a4>)
 800abf2:	781b      	ldrb	r3, [r3, #0]
 800abf4:	f013 0f08 	tst.w	r3, #8
 800abf8:	d003      	beq.n	800ac02 <tcp_input+0x216>
      p->flags |= PBUF_FLAG_PUSH;
 800abfa:	7b63      	ldrb	r3, [r4, #13]
 800abfc:	f043 0301 	orr.w	r3, r3, #1
 800ac00:	7363      	strb	r3, [r4, #13]
    if (pcb->refused_data != NULL) {
 800ac02:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	f000 80b9 	beq.w	800ad7c <tcp_input+0x390>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800ac0a:	4628      	mov	r0, r5
 800ac0c:	f7fe fb24 	bl	8009258 <tcp_process_refused_data>
 800ac10:	f110 0f0d 	cmn.w	r0, #13
 800ac14:	d008      	beq.n	800ac28 <tcp_input+0x23c>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800ac16:	6f6b      	ldr	r3, [r5, #116]	; 0x74
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	f000 80af 	beq.w	800ad7c <tcp_input+0x390>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800ac1e:	4b1d      	ldr	r3, [pc, #116]	; (800ac94 <tcp_input+0x2a8>)
 800ac20:	881b      	ldrh	r3, [r3, #0]
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	f000 80aa 	beq.w	800ad7c <tcp_input+0x390>
        if (pcb->rcv_ann_wnd == 0) {
 800ac28:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	f000 80a2 	beq.w	800ad74 <tcp_input+0x388>
    tcp_input_pcb = NULL;
 800ac30:	2300      	movs	r3, #0
 800ac32:	4a26      	ldr	r2, [pc, #152]	; (800accc <tcp_input+0x2e0>)
 800ac34:	6013      	str	r3, [r2, #0]
    recv_data = NULL;
 800ac36:	4a22      	ldr	r2, [pc, #136]	; (800acc0 <tcp_input+0x2d4>)
 800ac38:	6013      	str	r3, [r2, #0]
    if (inseg.p != NULL)
 800ac3a:	4b20      	ldr	r3, [pc, #128]	; (800acbc <tcp_input+0x2d0>)
 800ac3c:	6858      	ldr	r0, [r3, #4]
 800ac3e:	2800      	cmp	r0, #0
 800ac40:	f43f af1f 	beq.w	800aa82 <tcp_input+0x96>
      pbuf_free(inseg.p);
 800ac44:	f7fd fa42 	bl	80080cc <pbuf_free>
      inseg.p = NULL;
 800ac48:	2200      	movs	r2, #0
 800ac4a:	4b1c      	ldr	r3, [pc, #112]	; (800acbc <tcp_input+0x2d0>)
 800ac4c:	605a      	str	r2, [r3, #4]
 800ac4e:	e718      	b.n	800aa82 <tcp_input+0x96>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800ac50:	4b12      	ldr	r3, [pc, #72]	; (800ac9c <tcp_input+0x2b0>)
 800ac52:	22ec      	movs	r2, #236	; 0xec
 800ac54:	491e      	ldr	r1, [pc, #120]	; (800acd0 <tcp_input+0x2e4>)
 800ac56:	4813      	ldr	r0, [pc, #76]	; (800aca4 <tcp_input+0x2b8>)
 800ac58:	f002 fccf 	bl	800d5fa <iprintf>
 800ac5c:	e7aa      	b.n	800abb4 <tcp_input+0x1c8>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800ac5e:	4b0f      	ldr	r3, [pc, #60]	; (800ac9c <tcp_input+0x2b0>)
 800ac60:	22f4      	movs	r2, #244	; 0xf4
 800ac62:	491c      	ldr	r1, [pc, #112]	; (800acd4 <tcp_input+0x2e8>)
 800ac64:	480f      	ldr	r0, [pc, #60]	; (800aca4 <tcp_input+0x2b8>)
 800ac66:	f002 fcc8 	bl	800d5fa <iprintf>
 800ac6a:	e7ad      	b.n	800abc8 <tcp_input+0x1dc>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ac6c:	4b1a      	ldr	r3, [pc, #104]	; (800acd8 <tcp_input+0x2ec>)
 800ac6e:	681d      	ldr	r5, [r3, #0]
 800ac70:	e03b      	b.n	800acea <tcp_input+0x2fe>
 800ac72:	bf00      	nop
 800ac74:	20003fb4 	.word	0x20003fb4
 800ac78:	20004274 	.word	0x20004274
 800ac7c:	20003fc0 	.word	0x20003fc0
 800ac80:	20003fbc 	.word	0x20003fbc
 800ac84:	20003fb8 	.word	0x20003fb8
 800ac88:	20003fac 	.word	0x20003fac
 800ac8c:	20003f88 	.word	0x20003f88
 800ac90:	20003f8c 	.word	0x20003f8c
 800ac94:	20003fc2 	.word	0x20003fc2
 800ac98:	20007984 	.word	0x20007984
 800ac9c:	0800f850 	.word	0x0800f850
 800aca0:	0800f688 	.word	0x0800f688
 800aca4:	0800de34 	.word	0x0800de34
 800aca8:	0800f6a4 	.word	0x0800f6a4
 800acac:	0800f698 	.word	0x0800f698
 800acb0:	0800f6c4 	.word	0x0800f6c4
 800acb4:	0800f6ec 	.word	0x0800f6ec
 800acb8:	0800f718 	.word	0x0800f718
 800acbc:	20003f90 	.word	0x20003f90
 800acc0:	20003fa4 	.word	0x20003fa4
 800acc4:	20003fa8 	.word	0x20003fa8
 800acc8:	20003fa0 	.word	0x20003fa0
 800accc:	20007998 	.word	0x20007998
 800acd0:	0800f740 	.word	0x0800f740
 800acd4:	0800f76c 	.word	0x0800f76c
 800acd8:	20007994 	.word	0x20007994
      if (pcb->remote_port == tcphdr->src &&
 800acdc:	8b29      	ldrh	r1, [r5, #24]
 800acde:	4b80      	ldr	r3, [pc, #512]	; (800aee0 <tcp_input+0x4f4>)
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	881a      	ldrh	r2, [r3, #0]
 800ace4:	4291      	cmp	r1, r2
 800ace6:	d00b      	beq.n	800ad00 <tcp_input+0x314>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ace8:	68ed      	ldr	r5, [r5, #12]
 800acea:	b1f5      	cbz	r5, 800ad2a <tcp_input+0x33e>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800acec:	7d2b      	ldrb	r3, [r5, #20]
 800acee:	2b0a      	cmp	r3, #10
 800acf0:	d0f4      	beq.n	800acdc <tcp_input+0x2f0>
 800acf2:	4b7c      	ldr	r3, [pc, #496]	; (800aee4 <tcp_input+0x4f8>)
 800acf4:	22fe      	movs	r2, #254	; 0xfe
 800acf6:	497c      	ldr	r1, [pc, #496]	; (800aee8 <tcp_input+0x4fc>)
 800acf8:	487c      	ldr	r0, [pc, #496]	; (800aeec <tcp_input+0x500>)
 800acfa:	f002 fc7e 	bl	800d5fa <iprintf>
 800acfe:	e7ed      	b.n	800acdc <tcp_input+0x2f0>
          pcb->local_port == tcphdr->dest &&
 800ad00:	8aea      	ldrh	r2, [r5, #22]
 800ad02:	885b      	ldrh	r3, [r3, #2]
      if (pcb->remote_port == tcphdr->src &&
 800ad04:	429a      	cmp	r2, r3
 800ad06:	d1ef      	bne.n	800ace8 <tcp_input+0x2fc>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ad08:	686a      	ldr	r2, [r5, #4]
 800ad0a:	4b79      	ldr	r3, [pc, #484]	; (800aef0 <tcp_input+0x504>)
 800ad0c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800ad0e:	429a      	cmp	r2, r3
 800ad10:	d1ea      	bne.n	800ace8 <tcp_input+0x2fc>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800ad12:	682a      	ldr	r2, [r5, #0]
 800ad14:	4b76      	ldr	r3, [pc, #472]	; (800aef0 <tcp_input+0x504>)
 800ad16:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ad18:	429a      	cmp	r2, r3
 800ad1a:	d1e5      	bne.n	800ace8 <tcp_input+0x2fc>
        tcp_timewait_input(pcb);
 800ad1c:	4628      	mov	r0, r5
 800ad1e:	f7fe fd8f 	bl	8009840 <tcp_timewait_input>
        pbuf_free(p);
 800ad22:	4620      	mov	r0, r4
 800ad24:	f7fd f9d2 	bl	80080cc <pbuf_free>
        return;
 800ad28:	e6ab      	b.n	800aa82 <tcp_input+0x96>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ad2a:	4b72      	ldr	r3, [pc, #456]	; (800aef4 <tcp_input+0x508>)
 800ad2c:	681e      	ldr	r6, [r3, #0]
 800ad2e:	4630      	mov	r0, r6
    prev = NULL;
 800ad30:	4629      	mov	r1, r5
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ad32:	e001      	b.n	800ad38 <tcp_input+0x34c>
      prev = (struct tcp_pcb *)lpcb;
 800ad34:	4601      	mov	r1, r0
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ad36:	68c0      	ldr	r0, [r0, #12]
 800ad38:	b168      	cbz	r0, 800ad56 <tcp_input+0x36a>
      if (lpcb->local_port == tcphdr->dest) {
 800ad3a:	8ac2      	ldrh	r2, [r0, #22]
 800ad3c:	4b68      	ldr	r3, [pc, #416]	; (800aee0 <tcp_input+0x4f4>)
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	885b      	ldrh	r3, [r3, #2]
 800ad42:	429a      	cmp	r2, r3
 800ad44:	d1f6      	bne.n	800ad34 <tcp_input+0x348>
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800ad46:	6803      	ldr	r3, [r0, #0]
 800ad48:	4a69      	ldr	r2, [pc, #420]	; (800aef0 <tcp_input+0x504>)
 800ad4a:	6952      	ldr	r2, [r2, #20]
 800ad4c:	4293      	cmp	r3, r2
 800ad4e:	d002      	beq.n	800ad56 <tcp_input+0x36a>
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800ad50:	b108      	cbz	r0, 800ad56 <tcp_input+0x36a>
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d1ee      	bne.n	800ad34 <tcp_input+0x348>
    if (lpcb != NULL) {
 800ad56:	2800      	cmp	r0, #0
 800ad58:	f43f af38 	beq.w	800abcc <tcp_input+0x1e0>
      if (prev != NULL) {
 800ad5c:	b121      	cbz	r1, 800ad68 <tcp_input+0x37c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800ad5e:	68c3      	ldr	r3, [r0, #12]
 800ad60:	60cb      	str	r3, [r1, #12]
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800ad62:	60c6      	str	r6, [r0, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800ad64:	4b63      	ldr	r3, [pc, #396]	; (800aef4 <tcp_input+0x508>)
 800ad66:	6018      	str	r0, [r3, #0]
      tcp_listen_input(lpcb);
 800ad68:	f7fe fdb2 	bl	80098d0 <tcp_listen_input>
      pbuf_free(p);
 800ad6c:	4620      	mov	r0, r4
 800ad6e:	f7fd f9ad 	bl	80080cc <pbuf_free>
      return;
 800ad72:	e686      	b.n	800aa82 <tcp_input+0x96>
          tcp_send_empty_ack(pcb);
 800ad74:	4628      	mov	r0, r5
 800ad76:	f000 fde9 	bl	800b94c <tcp_send_empty_ack>
 800ad7a:	e759      	b.n	800ac30 <tcp_input+0x244>
    tcp_input_pcb = pcb;
 800ad7c:	4b5e      	ldr	r3, [pc, #376]	; (800aef8 <tcp_input+0x50c>)
 800ad7e:	601d      	str	r5, [r3, #0]
    err = tcp_process(pcb);
 800ad80:	4628      	mov	r0, r5
 800ad82:	f7ff fb97 	bl	800a4b4 <tcp_process>
    if (err != ERR_ABRT) {
 800ad86:	f110 0f0d 	cmn.w	r0, #13
 800ad8a:	f43f af51 	beq.w	800ac30 <tcp_input+0x244>
      if (recv_flags & TF_RESET) {
 800ad8e:	4b5b      	ldr	r3, [pc, #364]	; (800aefc <tcp_input+0x510>)
 800ad90:	781b      	ldrb	r3, [r3, #0]
 800ad92:	f013 0f08 	tst.w	r3, #8
 800ad96:	d00f      	beq.n	800adb8 <tcp_input+0x3cc>
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800ad98:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 800ad9c:	b11b      	cbz	r3, 800ada6 <tcp_input+0x3ba>
 800ad9e:	f06f 010d 	mvn.w	r1, #13
 800ada2:	6928      	ldr	r0, [r5, #16]
 800ada4:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800ada6:	4629      	mov	r1, r5
 800ada8:	4855      	ldr	r0, [pc, #340]	; (800af00 <tcp_input+0x514>)
 800adaa:	f7fe f93b 	bl	8009024 <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 800adae:	4629      	mov	r1, r5
 800adb0:	2001      	movs	r0, #1
 800adb2:	f7fc ffb5 	bl	8007d20 <memp_free>
 800adb6:	e73b      	b.n	800ac30 <tcp_input+0x244>
        if (recv_acked > 0) {
 800adb8:	4b52      	ldr	r3, [pc, #328]	; (800af04 <tcp_input+0x518>)
 800adba:	881a      	ldrh	r2, [r3, #0]
 800adbc:	b162      	cbz	r2, 800add8 <tcp_input+0x3ec>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800adbe:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d048      	beq.n	800ae56 <tcp_input+0x46a>
 800adc4:	4629      	mov	r1, r5
 800adc6:	6928      	ldr	r0, [r5, #16]
 800adc8:	4798      	blx	r3
            if (err == ERR_ABRT) {
 800adca:	f110 0f0d 	cmn.w	r0, #13
 800adce:	f43f af2f 	beq.w	800ac30 <tcp_input+0x244>
          recv_acked = 0;
 800add2:	2200      	movs	r2, #0
 800add4:	4b4b      	ldr	r3, [pc, #300]	; (800af04 <tcp_input+0x518>)
 800add6:	801a      	strh	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800add8:	4628      	mov	r0, r5
 800adda:	f7fe fd0f 	bl	80097fc <tcp_input_delayed_close>
 800adde:	2800      	cmp	r0, #0
 800ade0:	f47f af26 	bne.w	800ac30 <tcp_input+0x244>
        if (recv_data != NULL) {
 800ade4:	4b48      	ldr	r3, [pc, #288]	; (800af08 <tcp_input+0x51c>)
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	b1eb      	cbz	r3, 800ae26 <tcp_input+0x43a>
          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800adea:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800adec:	b133      	cbz	r3, 800adfc <tcp_input+0x410>
 800adee:	4b3d      	ldr	r3, [pc, #244]	; (800aee4 <tcp_input+0x4f8>)
 800adf0:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 800adf4:	4945      	ldr	r1, [pc, #276]	; (800af0c <tcp_input+0x520>)
 800adf6:	483d      	ldr	r0, [pc, #244]	; (800aeec <tcp_input+0x500>)
 800adf8:	f002 fbff 	bl	800d5fa <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800adfc:	7eab      	ldrb	r3, [r5, #26]
 800adfe:	f013 0f10 	tst.w	r3, #16
 800ae02:	d12a      	bne.n	800ae5a <tcp_input+0x46e>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800ae04:	f8d5 4080 	ldr.w	r4, [r5, #128]	; 0x80
 800ae08:	b37c      	cbz	r4, 800ae6a <tcp_input+0x47e>
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	4a3e      	ldr	r2, [pc, #248]	; (800af08 <tcp_input+0x51c>)
 800ae0e:	6812      	ldr	r2, [r2, #0]
 800ae10:	4629      	mov	r1, r5
 800ae12:	6928      	ldr	r0, [r5, #16]
 800ae14:	47a0      	blx	r4
          if (err == ERR_ABRT) {
 800ae16:	f110 0f0d 	cmn.w	r0, #13
 800ae1a:	f43f af09 	beq.w	800ac30 <tcp_input+0x244>
          if (err != ERR_OK) {
 800ae1e:	b110      	cbz	r0, 800ae26 <tcp_input+0x43a>
            pcb->refused_data = recv_data;
 800ae20:	4b39      	ldr	r3, [pc, #228]	; (800af08 <tcp_input+0x51c>)
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	676b      	str	r3, [r5, #116]	; 0x74
        if (recv_flags & TF_GOT_FIN) {
 800ae26:	4b35      	ldr	r3, [pc, #212]	; (800aefc <tcp_input+0x510>)
 800ae28:	781b      	ldrb	r3, [r3, #0]
 800ae2a:	f013 0f20 	tst.w	r3, #32
 800ae2e:	d005      	beq.n	800ae3c <tcp_input+0x450>
          if (pcb->refused_data != NULL) {
 800ae30:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800ae32:	b313      	cbz	r3, 800ae7a <tcp_input+0x48e>
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800ae34:	7b5a      	ldrb	r2, [r3, #13]
 800ae36:	f042 0220 	orr.w	r2, r2, #32
 800ae3a:	735a      	strb	r2, [r3, #13]
        tcp_input_pcb = NULL;
 800ae3c:	2200      	movs	r2, #0
 800ae3e:	4b2e      	ldr	r3, [pc, #184]	; (800aef8 <tcp_input+0x50c>)
 800ae40:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800ae42:	4628      	mov	r0, r5
 800ae44:	f7fe fcda 	bl	80097fc <tcp_input_delayed_close>
 800ae48:	2800      	cmp	r0, #0
 800ae4a:	f47f aef1 	bne.w	800ac30 <tcp_input+0x244>
        tcp_output(pcb);
 800ae4e:	4628      	mov	r0, r5
 800ae50:	f000 fdb6 	bl	800b9c0 <tcp_output>
 800ae54:	e6ec      	b.n	800ac30 <tcp_input+0x244>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800ae56:	2000      	movs	r0, #0
 800ae58:	e7b7      	b.n	800adca <tcp_input+0x3de>
            pbuf_free(recv_data);
 800ae5a:	4b2b      	ldr	r3, [pc, #172]	; (800af08 <tcp_input+0x51c>)
 800ae5c:	6818      	ldr	r0, [r3, #0]
 800ae5e:	f7fd f935 	bl	80080cc <pbuf_free>
            tcp_abort(pcb);
 800ae62:	4628      	mov	r0, r5
 800ae64:	f7fe fb2a 	bl	80094bc <tcp_abort>
            goto aborted;
 800ae68:	e6e2      	b.n	800ac30 <tcp_input+0x244>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	4a26      	ldr	r2, [pc, #152]	; (800af08 <tcp_input+0x51c>)
 800ae6e:	6812      	ldr	r2, [r2, #0]
 800ae70:	4629      	mov	r1, r5
 800ae72:	4618      	mov	r0, r3
 800ae74:	f7fe f9de 	bl	8009234 <tcp_recv_null>
 800ae78:	e7cd      	b.n	800ae16 <tcp_input+0x42a>
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800ae7a:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 800ae7c:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800ae80:	d001      	beq.n	800ae86 <tcp_input+0x49a>
              pcb->rcv_wnd++;
 800ae82:	3301      	adds	r3, #1
 800ae84:	852b      	strh	r3, [r5, #40]	; 0x28
            TCP_EVENT_CLOSED(pcb, err);
 800ae86:	f8d5 4080 	ldr.w	r4, [r5, #128]	; 0x80
 800ae8a:	b144      	cbz	r4, 800ae9e <tcp_input+0x4b2>
 800ae8c:	2300      	movs	r3, #0
 800ae8e:	461a      	mov	r2, r3
 800ae90:	4629      	mov	r1, r5
 800ae92:	6928      	ldr	r0, [r5, #16]
 800ae94:	47a0      	blx	r4
            if (err == ERR_ABRT) {
 800ae96:	f110 0f0d 	cmn.w	r0, #13
 800ae9a:	d1cf      	bne.n	800ae3c <tcp_input+0x450>
 800ae9c:	e6c8      	b.n	800ac30 <tcp_input+0x244>
            TCP_EVENT_CLOSED(pcb, err);
 800ae9e:	2000      	movs	r0, #0
 800aea0:	e7f9      	b.n	800ae96 <tcp_input+0x4aa>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800aea2:	4b0f      	ldr	r3, [pc, #60]	; (800aee0 <tcp_input+0x4f4>)
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	8998      	ldrh	r0, [r3, #12]
 800aea8:	f7fb f8f4 	bl	8006094 <lwip_htons>
 800aeac:	f010 0f04 	tst.w	r0, #4
 800aeb0:	d003      	beq.n	800aeba <tcp_input+0x4ce>
    pbuf_free(p);
 800aeb2:	4620      	mov	r0, r4
 800aeb4:	f7fd f90a 	bl	80080cc <pbuf_free>
 800aeb8:	e5e3      	b.n	800aa82 <tcp_input+0x96>
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800aeba:	4b09      	ldr	r3, [pc, #36]	; (800aee0 <tcp_input+0x4f4>)
 800aebc:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800aebe:	4a14      	ldr	r2, [pc, #80]	; (800af10 <tcp_input+0x524>)
 800aec0:	4914      	ldr	r1, [pc, #80]	; (800af14 <tcp_input+0x528>)
 800aec2:	8808      	ldrh	r0, [r1, #0]
 800aec4:	4914      	ldr	r1, [pc, #80]	; (800af18 <tcp_input+0x52c>)
 800aec6:	6809      	ldr	r1, [r1, #0]
 800aec8:	881d      	ldrh	r5, [r3, #0]
 800aeca:	9501      	str	r5, [sp, #4]
 800aecc:	885b      	ldrh	r3, [r3, #2]
 800aece:	9300      	str	r3, [sp, #0]
 800aed0:	4613      	mov	r3, r2
 800aed2:	3204      	adds	r2, #4
 800aed4:	4401      	add	r1, r0
 800aed6:	4811      	ldr	r0, [pc, #68]	; (800af1c <tcp_input+0x530>)
 800aed8:	6800      	ldr	r0, [r0, #0]
 800aeda:	f000 fecd 	bl	800bc78 <tcp_rst>
 800aede:	e7e8      	b.n	800aeb2 <tcp_input+0x4c6>
 800aee0:	20003fb4 	.word	0x20003fb4
 800aee4:	0800f850 	.word	0x0800f850
 800aee8:	0800f798 	.word	0x0800f798
 800aeec:	0800de34 	.word	0x0800de34
 800aef0:	20004274 	.word	0x20004274
 800aef4:	2000798c 	.word	0x2000798c
 800aef8:	20007998 	.word	0x20007998
 800aefc:	20003fa8 	.word	0x20003fa8
 800af00:	20007984 	.word	0x20007984
 800af04:	20003fa0 	.word	0x20003fa0
 800af08:	20003fa4 	.word	0x20003fa4
 800af0c:	0800f7c8 	.word	0x0800f7c8
 800af10:	20004284 	.word	0x20004284
 800af14:	20003fc2 	.word	0x20003fc2
 800af18:	20003fac 	.word	0x20003fac
 800af1c:	20003f88 	.word	0x20003f88

0800af20 <tcp_trigger_input_pcb_close>:
}

void
tcp_trigger_input_pcb_close(void)
{
  recv_flags |= TF_CLOSED;
 800af20:	4a02      	ldr	r2, [pc, #8]	; (800af2c <tcp_trigger_input_pcb_close+0xc>)
 800af22:	7813      	ldrb	r3, [r2, #0]
 800af24:	f043 0310 	orr.w	r3, r3, #16
 800af28:	7013      	strb	r3, [r2, #0]
 800af2a:	4770      	bx	lr
 800af2c:	20003fa8 	.word	0x20003fa8

0800af30 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800af30:	b508      	push	{r3, lr}
  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800af32:	7d03      	ldrb	r3, [r0, #20]
 800af34:	2b04      	cmp	r3, #4
 800af36:	d005      	beq.n	800af44 <tcp_write_checks+0x14>
 800af38:	2b07      	cmp	r3, #7
 800af3a:	d003      	beq.n	800af44 <tcp_write_checks+0x14>
      (pcb->state != CLOSE_WAIT) &&
 800af3c:	2b02      	cmp	r3, #2
 800af3e:	d001      	beq.n	800af44 <tcp_write_checks+0x14>
      (pcb->state != SYN_SENT) &&
 800af40:	2b03      	cmp	r3, #3
 800af42:	d139      	bne.n	800afb8 <tcp_write_checks+0x88>
      (pcb->state != SYN_RCVD)) {
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
  } else if (len == 0) {
 800af44:	2900      	cmp	r1, #0
 800af46:	d03a      	beq.n	800afbe <tcp_write_checks+0x8e>
    return ERR_OK;
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800af48:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 800af4c:	4299      	cmp	r1, r3
 800af4e:	d808      	bhi.n	800af62 <tcp_write_checks+0x32>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 800af50:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800af54:	2b08      	cmp	r3, #8
 800af56:	d80b      	bhi.n	800af70 <tcp_write_checks+0x40>
      pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
    return ERR_MEM;
  }
  if (pcb->snd_queuelen != 0) {
 800af58:	b1f3      	cbz	r3, 800af98 <tcp_write_checks+0x68>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800af5a:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800af5c:	b17b      	cbz	r3, 800af7e <tcp_write_checks+0x4e>
      pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
      pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800af5e:	2000      	movs	r0, #0
 800af60:	bd08      	pop	{r3, pc}
    pcb->flags |= TF_NAGLEMEMERR;
 800af62:	7e83      	ldrb	r3, [r0, #26]
 800af64:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800af68:	7683      	strb	r3, [r0, #26]
    return ERR_MEM;
 800af6a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800af6e:	bd08      	pop	{r3, pc}
    pcb->flags |= TF_NAGLEMEMERR;
 800af70:	7e83      	ldrb	r3, [r0, #26]
 800af72:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800af76:	7683      	strb	r3, [r0, #26]
    return ERR_MEM;
 800af78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800af7c:	bd08      	pop	{r3, pc}
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800af7e:	6e83      	ldr	r3, [r0, #104]	; 0x68
 800af80:	b10b      	cbz	r3, 800af86 <tcp_write_checks+0x56>
  return ERR_OK;
 800af82:	2000      	movs	r0, #0
 800af84:	bd08      	pop	{r3, pc}
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800af86:	4b0f      	ldr	r3, [pc, #60]	; (800afc4 <tcp_write_checks+0x94>)
 800af88:	f44f 72ab 	mov.w	r2, #342	; 0x156
 800af8c:	490e      	ldr	r1, [pc, #56]	; (800afc8 <tcp_write_checks+0x98>)
 800af8e:	480f      	ldr	r0, [pc, #60]	; (800afcc <tcp_write_checks+0x9c>)
 800af90:	f002 fb33 	bl	800d5fa <iprintf>
  return ERR_OK;
 800af94:	2000      	movs	r0, #0
 800af96:	bd08      	pop	{r3, pc}
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800af98:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800af9a:	b143      	cbz	r3, 800afae <tcp_write_checks+0x7e>
 800af9c:	4b09      	ldr	r3, [pc, #36]	; (800afc4 <tcp_write_checks+0x94>)
 800af9e:	f240 1259 	movw	r2, #345	; 0x159
 800afa2:	490b      	ldr	r1, [pc, #44]	; (800afd0 <tcp_write_checks+0xa0>)
 800afa4:	4809      	ldr	r0, [pc, #36]	; (800afcc <tcp_write_checks+0x9c>)
 800afa6:	f002 fb28 	bl	800d5fa <iprintf>
  return ERR_OK;
 800afaa:	2000      	movs	r0, #0
 800afac:	bd08      	pop	{r3, pc}
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800afae:	6e83      	ldr	r3, [r0, #104]	; 0x68
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d1f3      	bne.n	800af9c <tcp_write_checks+0x6c>
  return ERR_OK;
 800afb4:	2000      	movs	r0, #0
}
 800afb6:	bd08      	pop	{r3, pc}
    return ERR_CONN;
 800afb8:	f06f 000a 	mvn.w	r0, #10
 800afbc:	bd08      	pop	{r3, pc}
    return ERR_OK;
 800afbe:	2000      	movs	r0, #0
 800afc0:	bd08      	pop	{r3, pc}
 800afc2:	bf00      	nop
 800afc4:	0800fd60 	.word	0x0800fd60
 800afc8:	0800fd94 	.word	0x0800fd94
 800afcc:	0800de34 	.word	0x0800de34
 800afd0:	0800fdd0 	.word	0x0800fdd0

0800afd4 <tcp_pbuf_prealloc>:
{
 800afd4:	b570      	push	{r4, r5, r6, lr}
 800afd6:	460c      	mov	r4, r1
 800afd8:	461e      	mov	r6, r3
 800afda:	f89d 3018 	ldrb.w	r3, [sp, #24]
  if (length < max_length) {
 800afde:	4291      	cmp	r1, r2
 800afe0:	d215      	bcs.n	800b00e <tcp_pbuf_prealloc+0x3a>
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800afe2:	f89d 1014 	ldrb.w	r1, [sp, #20]
 800afe6:	f011 0f02 	tst.w	r1, #2
 800afea:	d108      	bne.n	800affe <tcp_pbuf_prealloc+0x2a>
        (!(pcb->flags & TF_NODELAY) &&
 800afec:	9904      	ldr	r1, [sp, #16]
 800afee:	7e89      	ldrb	r1, [r1, #26]
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800aff0:	f011 0f40 	tst.w	r1, #64	; 0x40
 800aff4:	d126      	bne.n	800b044 <tcp_pbuf_prealloc+0x70>
        (!(pcb->flags & TF_NODELAY) &&
 800aff6:	b113      	cbz	r3, 800affe <tcp_pbuf_prealloc+0x2a>
          pcb->unsent != NULL ||
 800aff8:	9b04      	ldr	r3, [sp, #16]
 800affa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
         (!first_seg ||
 800affc:	b1e3      	cbz	r3, 800b038 <tcp_pbuf_prealloc+0x64>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800affe:	f204 211b 	addw	r1, r4, #539	; 0x21b
 800b002:	f021 0103 	bic.w	r1, r1, #3
 800b006:	428a      	cmp	r2, r1
 800b008:	bf28      	it	cs
 800b00a:	460a      	movcs	r2, r1
 800b00c:	b291      	uxth	r1, r2
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800b00e:	2200      	movs	r2, #0
 800b010:	f7fd f8c8 	bl	80081a4 <pbuf_alloc>
  if (p == NULL) {
 800b014:	4605      	mov	r5, r0
 800b016:	b168      	cbz	r0, 800b034 <tcp_pbuf_prealloc+0x60>
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800b018:	6803      	ldr	r3, [r0, #0]
 800b01a:	b133      	cbz	r3, 800b02a <tcp_pbuf_prealloc+0x56>
 800b01c:	4b0a      	ldr	r3, [pc, #40]	; (800b048 <tcp_pbuf_prealloc+0x74>)
 800b01e:	f44f 7288 	mov.w	r2, #272	; 0x110
 800b022:	490a      	ldr	r1, [pc, #40]	; (800b04c <tcp_pbuf_prealloc+0x78>)
 800b024:	480a      	ldr	r0, [pc, #40]	; (800b050 <tcp_pbuf_prealloc+0x7c>)
 800b026:	f002 fae8 	bl	800d5fa <iprintf>
  *oversize = p->len - length;
 800b02a:	896b      	ldrh	r3, [r5, #10]
 800b02c:	1b1b      	subs	r3, r3, r4
 800b02e:	8033      	strh	r3, [r6, #0]
  p->len = p->tot_len = length;
 800b030:	812c      	strh	r4, [r5, #8]
 800b032:	816c      	strh	r4, [r5, #10]
}
 800b034:	4628      	mov	r0, r5
 800b036:	bd70      	pop	{r4, r5, r6, pc}
          pcb->unacked != NULL))) {
 800b038:	9b04      	ldr	r3, [sp, #16]
 800b03a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
          pcb->unsent != NULL ||
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d1de      	bne.n	800affe <tcp_pbuf_prealloc+0x2a>
  u16_t alloc = length;
 800b040:	4621      	mov	r1, r4
 800b042:	e7e4      	b.n	800b00e <tcp_pbuf_prealloc+0x3a>
 800b044:	4621      	mov	r1, r4
 800b046:	e7e2      	b.n	800b00e <tcp_pbuf_prealloc+0x3a>
 800b048:	0800fd60 	.word	0x0800fd60
 800b04c:	0800fb70 	.word	0x0800fb70
 800b050:	0800de34 	.word	0x0800de34

0800b054 <tcp_create_segment>:
{
 800b054:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b058:	4680      	mov	r8, r0
 800b05a:	460e      	mov	r6, r1
 800b05c:	4617      	mov	r7, r2
 800b05e:	4699      	mov	r9, r3
 800b060:	f89d a020 	ldrb.w	sl, [sp, #32]
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800b064:	f01a 0f01 	tst.w	sl, #1
 800b068:	d03c      	beq.n	800b0e4 <tcp_create_segment+0x90>
 800b06a:	2504      	movs	r5, #4
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800b06c:	2003      	movs	r0, #3
 800b06e:	f7fc fe3d 	bl	8007cec <memp_malloc>
 800b072:	4604      	mov	r4, r0
 800b074:	2800      	cmp	r0, #0
 800b076:	d037      	beq.n	800b0e8 <tcp_create_segment+0x94>
  seg->flags = optflags;
 800b078:	f880 a00a 	strb.w	sl, [r0, #10]
  seg->next = NULL;
 800b07c:	2300      	movs	r3, #0
 800b07e:	6003      	str	r3, [r0, #0]
  seg->p = p;
 800b080:	6046      	str	r6, [r0, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800b082:	8933      	ldrh	r3, [r6, #8]
 800b084:	fa1f fa85 	uxth.w	sl, r5
 800b088:	4553      	cmp	r3, sl
 800b08a:	d331      	bcc.n	800b0f0 <tcp_create_segment+0x9c>
  seg->len = p->tot_len - optlen;
 800b08c:	8933      	ldrh	r3, [r6, #8]
 800b08e:	eba3 030a 	sub.w	r3, r3, sl
 800b092:	8123      	strh	r3, [r4, #8]
  if (pbuf_header(p, TCP_HLEN)) {
 800b094:	2114      	movs	r1, #20
 800b096:	4630      	mov	r0, r6
 800b098:	f7fd f80e 	bl	80080b8 <pbuf_header>
 800b09c:	bb78      	cbnz	r0, 800b0fe <tcp_create_segment+0xaa>
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800b09e:	6863      	ldr	r3, [r4, #4]
 800b0a0:	685e      	ldr	r6, [r3, #4]
 800b0a2:	60e6      	str	r6, [r4, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800b0a4:	f8b8 0016 	ldrh.w	r0, [r8, #22]
 800b0a8:	f7fa fff4 	bl	8006094 <lwip_htons>
 800b0ac:	8030      	strh	r0, [r6, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800b0ae:	68e6      	ldr	r6, [r4, #12]
 800b0b0:	f8b8 0018 	ldrh.w	r0, [r8, #24]
 800b0b4:	f7fa ffee 	bl	8006094 <lwip_htons>
 800b0b8:	8070      	strh	r0, [r6, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800b0ba:	68e6      	ldr	r6, [r4, #12]
 800b0bc:	4648      	mov	r0, r9
 800b0be:	f7fa ffec 	bl	800609a <lwip_htonl>
 800b0c2:	6070      	str	r0, [r6, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 800b0c4:	68e6      	ldr	r6, [r4, #12]
 800b0c6:	08a8      	lsrs	r0, r5, #2
 800b0c8:	3005      	adds	r0, #5
 800b0ca:	0300      	lsls	r0, r0, #12
 800b0cc:	b280      	uxth	r0, r0
 800b0ce:	4338      	orrs	r0, r7
 800b0d0:	f7fa ffe0 	bl	8006094 <lwip_htons>
 800b0d4:	81b0      	strh	r0, [r6, #12]
  seg->tcphdr->urgp = 0;
 800b0d6:	68e3      	ldr	r3, [r4, #12]
 800b0d8:	2200      	movs	r2, #0
 800b0da:	749a      	strb	r2, [r3, #18]
 800b0dc:	74da      	strb	r2, [r3, #19]
}
 800b0de:	4620      	mov	r0, r4
 800b0e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800b0e4:	2500      	movs	r5, #0
 800b0e6:	e7c1      	b.n	800b06c <tcp_create_segment+0x18>
    pbuf_free(p);
 800b0e8:	4630      	mov	r0, r6
 800b0ea:	f7fc ffef 	bl	80080cc <pbuf_free>
    return NULL;
 800b0ee:	e7f6      	b.n	800b0de <tcp_create_segment+0x8a>
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800b0f0:	4b05      	ldr	r3, [pc, #20]	; (800b108 <tcp_create_segment+0xb4>)
 800b0f2:	22ba      	movs	r2, #186	; 0xba
 800b0f4:	4905      	ldr	r1, [pc, #20]	; (800b10c <tcp_create_segment+0xb8>)
 800b0f6:	4806      	ldr	r0, [pc, #24]	; (800b110 <tcp_create_segment+0xbc>)
 800b0f8:	f002 fa7f 	bl	800d5fa <iprintf>
 800b0fc:	e7c6      	b.n	800b08c <tcp_create_segment+0x38>
    tcp_seg_free(seg);
 800b0fe:	4620      	mov	r0, r4
 800b100:	f7fd fcd0 	bl	8008aa4 <tcp_seg_free>
    return NULL;
 800b104:	2400      	movs	r4, #0
 800b106:	e7ea      	b.n	800b0de <tcp_create_segment+0x8a>
 800b108:	0800fd60 	.word	0x0800fd60
 800b10c:	0800f9e8 	.word	0x0800f9e8
 800b110:	0800de34 	.word	0x0800de34

0800b114 <tcp_output_alloc_header>:
{
 800b114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b118:	4606      	mov	r6, r0
 800b11a:	460c      	mov	r4, r1
 800b11c:	4698      	mov	r8, r3
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800b11e:	4411      	add	r1, r2
 800b120:	b289      	uxth	r1, r1
 800b122:	3114      	adds	r1, #20
 800b124:	2200      	movs	r2, #0
 800b126:	b289      	uxth	r1, r1
 800b128:	2001      	movs	r0, #1
 800b12a:	f7fd f83b 	bl	80081a4 <pbuf_alloc>
  if (p != NULL) {
 800b12e:	4607      	mov	r7, r0
 800b130:	b348      	cbz	r0, 800b186 <tcp_output_alloc_header+0x72>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800b132:	8942      	ldrh	r2, [r0, #10]
 800b134:	f104 0314 	add.w	r3, r4, #20
 800b138:	429a      	cmp	r2, r3
 800b13a:	db27      	blt.n	800b18c <tcp_output_alloc_header+0x78>
    tcphdr = (struct tcp_hdr *)p->payload;
 800b13c:	687d      	ldr	r5, [r7, #4]
    tcphdr->src = lwip_htons(pcb->local_port);
 800b13e:	8af0      	ldrh	r0, [r6, #22]
 800b140:	f7fa ffa8 	bl	8006094 <lwip_htons>
 800b144:	8028      	strh	r0, [r5, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 800b146:	8b30      	ldrh	r0, [r6, #24]
 800b148:	f7fa ffa4 	bl	8006094 <lwip_htons>
 800b14c:	8068      	strh	r0, [r5, #2]
    tcphdr->seqno = seqno_be;
 800b14e:	f8c5 8004 	str.w	r8, [r5, #4]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800b152:	6a70      	ldr	r0, [r6, #36]	; 0x24
 800b154:	f7fa ffa1 	bl	800609a <lwip_htonl>
 800b158:	60a8      	str	r0, [r5, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 800b15a:	08a0      	lsrs	r0, r4, #2
 800b15c:	3005      	adds	r0, #5
 800b15e:	0300      	lsls	r0, r0, #12
 800b160:	b280      	uxth	r0, r0
 800b162:	f040 0010 	orr.w	r0, r0, #16
 800b166:	f7fa ff95 	bl	8006094 <lwip_htons>
 800b16a:	81a8      	strh	r0, [r5, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800b16c:	8d70      	ldrh	r0, [r6, #42]	; 0x2a
 800b16e:	f7fa ff91 	bl	8006094 <lwip_htons>
 800b172:	81e8      	strh	r0, [r5, #14]
    tcphdr->chksum = 0;
 800b174:	2300      	movs	r3, #0
 800b176:	742b      	strb	r3, [r5, #16]
 800b178:	746b      	strb	r3, [r5, #17]
    tcphdr->urgp = 0;
 800b17a:	74ab      	strb	r3, [r5, #18]
 800b17c:	74eb      	strb	r3, [r5, #19]
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800b17e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800b180:	8d72      	ldrh	r2, [r6, #42]	; 0x2a
 800b182:	4413      	add	r3, r2
 800b184:	62f3      	str	r3, [r6, #44]	; 0x2c
}
 800b186:	4638      	mov	r0, r7
 800b188:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800b18c:	4b03      	ldr	r3, [pc, #12]	; (800b19c <tcp_output_alloc_header+0x88>)
 800b18e:	2273      	movs	r2, #115	; 0x73
 800b190:	4903      	ldr	r1, [pc, #12]	; (800b1a0 <tcp_output_alloc_header+0x8c>)
 800b192:	4804      	ldr	r0, [pc, #16]	; (800b1a4 <tcp_output_alloc_header+0x90>)
 800b194:	f002 fa31 	bl	800d5fa <iprintf>
 800b198:	e7d0      	b.n	800b13c <tcp_output_alloc_header+0x28>
 800b19a:	bf00      	nop
 800b19c:	0800fd60 	.word	0x0800fd60
 800b1a0:	0800fb40 	.word	0x0800fb40
 800b1a4:	0800de34 	.word	0x0800de34

0800b1a8 <tcp_output_segment>:
{
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 800b1a8:	6843      	ldr	r3, [r0, #4]
 800b1aa:	89db      	ldrh	r3, [r3, #14]
 800b1ac:	2b01      	cmp	r3, #1
 800b1ae:	d001      	beq.n	800b1b4 <tcp_output_segment+0xc>
    /* This can happen if the pbuf of this segment is still referenced by the
       netif driver due to deferred transmission. Since this function modifies
       p->len, we must not continue in this case. */
    return ERR_OK;
 800b1b0:	2000      	movs	r0, #0
 800b1b2:	4770      	bx	lr
{
 800b1b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b1b6:	b085      	sub	sp, #20
 800b1b8:	4616      	mov	r6, r2
 800b1ba:	460d      	mov	r5, r1
 800b1bc:	4604      	mov	r4, r0
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800b1be:	68c7      	ldr	r7, [r0, #12]
 800b1c0:	6a48      	ldr	r0, [r1, #36]	; 0x24
 800b1c2:	f7fa ff6a 	bl	800609a <lwip_htonl>
 800b1c6:	60b8      	str	r0, [r7, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800b1c8:	68e7      	ldr	r7, [r4, #12]
 800b1ca:	8d68      	ldrh	r0, [r5, #42]	; 0x2a
 800b1cc:	f7fa ff62 	bl	8006094 <lwip_htons>
 800b1d0:	81f8      	strh	r0, [r7, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800b1d2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b1d4:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
 800b1d6:	4413      	add	r3, r2
 800b1d8:	62eb      	str	r3, [r5, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800b1da:	68e7      	ldr	r7, [r4, #12]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800b1dc:	7aa3      	ldrb	r3, [r4, #10]
 800b1de:	f013 0f01 	tst.w	r3, #1
 800b1e2:	d126      	bne.n	800b232 <tcp_output_segment+0x8a>
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800b1e4:	f9b5 3030 	ldrsh.w	r3, [r5, #48]	; 0x30
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	db2d      	blt.n	800b248 <tcp_output_segment+0xa0>
    pcb->rtime = 0;
  }

  if (pcb->rttest == 0) {
 800b1ec:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d02d      	beq.n	800b24e <tcp_output_segment+0xa6>
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800b1f2:	68e3      	ldr	r3, [r4, #12]
 800b1f4:	6862      	ldr	r2, [r4, #4]
 800b1f6:	6851      	ldr	r1, [r2, #4]
 800b1f8:	1a5b      	subs	r3, r3, r1
 800b1fa:	b29b      	uxth	r3, r3
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800b1fc:	8951      	ldrh	r1, [r2, #10]
 800b1fe:	1ac9      	subs	r1, r1, r3
 800b200:	8151      	strh	r1, [r2, #10]
  seg->p->tot_len -= len;
 800b202:	6861      	ldr	r1, [r4, #4]
 800b204:	890a      	ldrh	r2, [r1, #8]
 800b206:	1ad3      	subs	r3, r2, r3
 800b208:	810b      	strh	r3, [r1, #8]

  seg->p->payload = seg->tcphdr;
 800b20a:	6863      	ldr	r3, [r4, #4]
 800b20c:	68e2      	ldr	r2, [r4, #12]
 800b20e:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800b210:	68e3      	ldr	r3, [r4, #12]
 800b212:	2200      	movs	r2, #0
 800b214:	741a      	strb	r2, [r3, #16]
 800b216:	745a      	strb	r2, [r3, #17]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800b218:	6860      	ldr	r0, [r4, #4]
 800b21a:	7aab      	ldrb	r3, [r5, #10]
 800b21c:	7a6a      	ldrb	r2, [r5, #9]
 800b21e:	9602      	str	r6, [sp, #8]
 800b220:	2106      	movs	r1, #6
 800b222:	9101      	str	r1, [sp, #4]
 800b224:	9200      	str	r2, [sp, #0]
 800b226:	1d2a      	adds	r2, r5, #4
 800b228:	4629      	mov	r1, r5
 800b22a:	f7fb fe83 	bl	8006f34 <ip4_output_if>
    pcb->tos, IP_PROTO_TCP, netif);
  NETIF_SET_HWADDRHINT(netif, NULL);
  return err;
}
 800b22e:	b005      	add	sp, #20
 800b230:	bdf0      	pop	{r4, r5, r6, r7, pc}
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 800b232:	1d29      	adds	r1, r5, #4
 800b234:	f44f 7006 	mov.w	r0, #536	; 0x218
 800b238:	f7fe fa3a 	bl	80096b0 <tcp_eff_send_mss_impl>
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800b23c:	f040 7001 	orr.w	r0, r0, #33816576	; 0x2040000
 800b240:	f7fa ff2b 	bl	800609a <lwip_htonl>
 800b244:	6178      	str	r0, [r7, #20]
 800b246:	e7cd      	b.n	800b1e4 <tcp_output_segment+0x3c>
    pcb->rtime = 0;
 800b248:	2300      	movs	r3, #0
 800b24a:	862b      	strh	r3, [r5, #48]	; 0x30
 800b24c:	e7ce      	b.n	800b1ec <tcp_output_segment+0x44>
    pcb->rttest = tcp_ticks;
 800b24e:	4b04      	ldr	r3, [pc, #16]	; (800b260 <tcp_output_segment+0xb8>)
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	636b      	str	r3, [r5, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800b254:	68e3      	ldr	r3, [r4, #12]
 800b256:	6858      	ldr	r0, [r3, #4]
 800b258:	f7fa ff1f 	bl	800609a <lwip_htonl>
 800b25c:	63a8      	str	r0, [r5, #56]	; 0x38
 800b25e:	e7c8      	b.n	800b1f2 <tcp_output_segment+0x4a>
 800b260:	20007988 	.word	0x20007988

0800b264 <tcp_write>:
{
 800b264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b268:	b091      	sub	sp, #68	; 0x44
 800b26a:	4681      	mov	r9, r0
 800b26c:	9108      	str	r1, [sp, #32]
 800b26e:	4692      	mov	sl, r2
 800b270:	9306      	str	r3, [sp, #24]
  u16_t oversize = 0;
 800b272:	2300      	movs	r3, #0
 800b274:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
 800b278:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 800b27c:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 800b27e:	9205      	str	r2, [sp, #20]
 800b280:	085b      	lsrs	r3, r3, #1
 800b282:	4293      	cmp	r3, r2
 800b284:	bf28      	it	cs
 800b286:	4613      	movcs	r3, r2
  mss_local = mss_local ? mss_local : pcb->mss;
 800b288:	b103      	cbz	r3, 800b28c <tcp_write+0x28>
 800b28a:	9305      	str	r3, [sp, #20]
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800b28c:	9b08      	ldr	r3, [sp, #32]
 800b28e:	b1cb      	cbz	r3, 800b2c4 <tcp_write+0x60>
  err = tcp_write_checks(pcb, len);
 800b290:	4651      	mov	r1, sl
 800b292:	4648      	mov	r0, r9
 800b294:	f7ff fe4c 	bl	800af30 <tcp_write_checks>
  if (err != ERR_OK) {
 800b298:	9009      	str	r0, [sp, #36]	; 0x24
 800b29a:	2800      	cmp	r0, #0
 800b29c:	f040 81b2 	bne.w	800b604 <tcp_write+0x3a0>
  queuelen = pcb->snd_queuelen;
 800b2a0:	f8b9 6062 	ldrh.w	r6, [r9, #98]	; 0x62
  if (pcb->unsent != NULL) {
 800b2a4:	f8d9 b068 	ldr.w	fp, [r9, #104]	; 0x68
 800b2a8:	f1bb 0f00 	cmp.w	fp, #0
 800b2ac:	d116      	bne.n	800b2dc <tcp_write+0x78>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800b2ae:	f8b9 4064 	ldrh.w	r4, [r9, #100]	; 0x64
 800b2b2:	2c00      	cmp	r4, #0
 800b2b4:	f040 80d8 	bne.w	800b468 <tcp_write+0x204>
  u16_t extendlen = 0;
 800b2b8:	940b      	str	r4, [sp, #44]	; 0x2c
  u16_t oversize_used = 0;
 800b2ba:	940a      	str	r4, [sp, #40]	; 0x28
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800b2bc:	46d8      	mov	r8, fp
  struct pbuf *concat_p = NULL;
 800b2be:	2300      	movs	r3, #0
 800b2c0:	930c      	str	r3, [sp, #48]	; 0x30
 800b2c2:	e0e3      	b.n	800b48c <tcp_write+0x228>
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800b2c4:	4bb1      	ldr	r3, [pc, #708]	; (800b58c <tcp_write+0x328>)
 800b2c6:	f44f 72c9 	mov.w	r2, #402	; 0x192
 800b2ca:	49b1      	ldr	r1, [pc, #708]	; (800b590 <tcp_write+0x32c>)
 800b2cc:	48b1      	ldr	r0, [pc, #708]	; (800b594 <tcp_write+0x330>)
 800b2ce:	f002 f994 	bl	800d5fa <iprintf>
 800b2d2:	f06f 030f 	mvn.w	r3, #15
 800b2d6:	9309      	str	r3, [sp, #36]	; 0x24
 800b2d8:	e194      	b.n	800b604 <tcp_write+0x3a0>
         last_unsent = last_unsent->next);
 800b2da:	46bb      	mov	fp, r7
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800b2dc:	f8db 7000 	ldr.w	r7, [fp]
 800b2e0:	2f00      	cmp	r7, #0
 800b2e2:	d1fa      	bne.n	800b2da <tcp_write+0x76>
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 800b2e4:	f89b 300a 	ldrb.w	r3, [fp, #10]
 800b2e8:	f013 0f01 	tst.w	r3, #1
 800b2ec:	d051      	beq.n	800b392 <tcp_write+0x12e>
 800b2ee:	2404      	movs	r4, #4
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800b2f0:	f8bb 3008 	ldrh.w	r3, [fp, #8]
 800b2f4:	4423      	add	r3, r4
 800b2f6:	9a05      	ldr	r2, [sp, #20]
 800b2f8:	429a      	cmp	r2, r3
 800b2fa:	db4c      	blt.n	800b396 <tcp_write+0x132>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800b2fc:	f8bb 3008 	ldrh.w	r3, [fp, #8]
 800b300:	441c      	add	r4, r3
 800b302:	b2a4      	uxth	r4, r4
 800b304:	9b05      	ldr	r3, [sp, #20]
 800b306:	1b1c      	subs	r4, r3, r4
 800b308:	b2a3      	uxth	r3, r4
 800b30a:	461a      	mov	r2, r3
 800b30c:	930b      	str	r3, [sp, #44]	; 0x2c
    oversize = pcb->unsent_oversize;
 800b30e:	f8b9 3064 	ldrh.w	r3, [r9, #100]	; 0x64
 800b312:	930a      	str	r3, [sp, #40]	; 0x28
 800b314:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
    if (oversize > 0) {
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d04e      	beq.n	800b3ba <tcp_write+0x156>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800b31c:	429a      	cmp	r2, r3
 800b31e:	d342      	bcc.n	800b3a6 <tcp_write+0x142>
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800b320:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800b324:	459a      	cmp	sl, r3
 800b326:	d946      	bls.n	800b3b6 <tcp_write+0x152>
 800b328:	461a      	mov	r2, r3
 800b32a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800b32c:	4282      	cmp	r2, r0
 800b32e:	bfa8      	it	ge
 800b330:	4602      	movge	r2, r0
 800b332:	b292      	uxth	r2, r2
 800b334:	920a      	str	r2, [sp, #40]	; 0x28
      oversize -= oversize_used;
 800b336:	1a9b      	subs	r3, r3, r2
 800b338:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
      space -= oversize_used;
 800b33c:	1a83      	subs	r3, r0, r2
 800b33e:	b29b      	uxth	r3, r3
 800b340:	930b      	str	r3, [sp, #44]	; 0x2c
      seg = last_unsent;
 800b342:	46d8      	mov	r8, fp
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800b344:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800b348:	b14b      	cbz	r3, 800b35e <tcp_write+0xfa>
 800b34a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b34c:	4553      	cmp	r3, sl
 800b34e:	d006      	beq.n	800b35e <tcp_write+0xfa>
 800b350:	4b8e      	ldr	r3, [pc, #568]	; (800b58c <tcp_write+0x328>)
 800b352:	f240 12e1 	movw	r2, #481	; 0x1e1
 800b356:	4990      	ldr	r1, [pc, #576]	; (800b598 <tcp_write+0x334>)
 800b358:	488e      	ldr	r0, [pc, #568]	; (800b594 <tcp_write+0x330>)
 800b35a:	f002 f94e 	bl	800d5fa <iprintf>
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800b35e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b360:	4552      	cmp	r2, sl
 800b362:	f080 808f 	bcs.w	800b484 <tcp_write+0x220>
 800b366:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b368:	2900      	cmp	r1, #0
 800b36a:	f000 8094 	beq.w	800b496 <tcp_write+0x232>
 800b36e:	f8bb 3008 	ldrh.w	r3, [fp, #8]
 800b372:	2b00      	cmp	r3, #0
 800b374:	f000 8093 	beq.w	800b49e <tcp_write+0x23a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800b378:	ebaa 0502 	sub.w	r5, sl, r2
 800b37c:	428d      	cmp	r5, r1
 800b37e:	bfa8      	it	ge
 800b380:	460d      	movge	r5, r1
 800b382:	b2ac      	uxth	r4, r5
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800b384:	9b06      	ldr	r3, [sp, #24]
 800b386:	f013 0f01 	tst.w	r3, #1
 800b38a:	d118      	bne.n	800b3be <tcp_write+0x15a>
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800b38c:	f8db 3004 	ldr.w	r3, [fp, #4]
 800b390:	e038      	b.n	800b404 <tcp_write+0x1a0>
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 800b392:	2400      	movs	r4, #0
 800b394:	e7ac      	b.n	800b2f0 <tcp_write+0x8c>
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800b396:	4b7d      	ldr	r3, [pc, #500]	; (800b58c <tcp_write+0x328>)
 800b398:	f240 12c7 	movw	r2, #455	; 0x1c7
 800b39c:	497f      	ldr	r1, [pc, #508]	; (800b59c <tcp_write+0x338>)
 800b39e:	487d      	ldr	r0, [pc, #500]	; (800b594 <tcp_write+0x330>)
 800b3a0:	f002 f92b 	bl	800d5fa <iprintf>
 800b3a4:	e7aa      	b.n	800b2fc <tcp_write+0x98>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800b3a6:	4b79      	ldr	r3, [pc, #484]	; (800b58c <tcp_write+0x328>)
 800b3a8:	f240 12d9 	movw	r2, #473	; 0x1d9
 800b3ac:	497c      	ldr	r1, [pc, #496]	; (800b5a0 <tcp_write+0x33c>)
 800b3ae:	4879      	ldr	r0, [pc, #484]	; (800b594 <tcp_write+0x330>)
 800b3b0:	f002 f923 	bl	800d5fa <iprintf>
 800b3b4:	e7b4      	b.n	800b320 <tcp_write+0xbc>
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800b3b6:	4652      	mov	r2, sl
 800b3b8:	e7b7      	b.n	800b32a <tcp_write+0xc6>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800b3ba:	46b8      	mov	r8, r7
 800b3bc:	e7c2      	b.n	800b344 <tcp_write+0xe0>
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800b3be:	2301      	movs	r3, #1
 800b3c0:	9302      	str	r3, [sp, #8]
 800b3c2:	9b06      	ldr	r3, [sp, #24]
 800b3c4:	9301      	str	r3, [sp, #4]
 800b3c6:	f8cd 9000 	str.w	r9, [sp]
 800b3ca:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 800b3ce:	460a      	mov	r2, r1
 800b3d0:	4621      	mov	r1, r4
 800b3d2:	2004      	movs	r0, #4
 800b3d4:	f7ff fdfe 	bl	800afd4 <tcp_pbuf_prealloc>
 800b3d8:	4603      	mov	r3, r0
 800b3da:	900c      	str	r0, [sp, #48]	; 0x30
 800b3dc:	2800      	cmp	r0, #0
 800b3de:	f000 80f0 	beq.w	800b5c2 <tcp_write+0x35e>
        TCP_DATA_COPY2(concat_p->payload, (const u8_t*)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800b3e2:	4622      	mov	r2, r4
 800b3e4:	9908      	ldr	r1, [sp, #32]
 800b3e6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b3e8:	4401      	add	r1, r0
 800b3ea:	461d      	mov	r5, r3
 800b3ec:	6858      	ldr	r0, [r3, #4]
 800b3ee:	f002 fa70 	bl	800d8d2 <memcpy>
        queuelen += pbuf_clen(concat_p);
 800b3f2:	4628      	mov	r0, r5
 800b3f4:	f7fd f830 	bl	8008458 <pbuf_clen>
 800b3f8:	4406      	add	r6, r0
 800b3fa:	b2b6      	uxth	r6, r6
  u16_t extendlen = 0;
 800b3fc:	2300      	movs	r3, #0
 800b3fe:	930b      	str	r3, [sp, #44]	; 0x2c
 800b400:	e01a      	b.n	800b438 <tcp_write+0x1d4>
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800b402:	4613      	mov	r3, r2
 800b404:	681a      	ldr	r2, [r3, #0]
 800b406:	2a00      	cmp	r2, #0
 800b408:	d1fb      	bne.n	800b402 <tcp_write+0x19e>
 800b40a:	920c      	str	r2, [sp, #48]	; 0x30
        if (p->type == PBUF_ROM && (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800b40c:	7b1a      	ldrb	r2, [r3, #12]
 800b40e:	2a01      	cmp	r2, #1
 800b410:	d017      	beq.n	800b442 <tcp_write+0x1de>
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800b412:	2201      	movs	r2, #1
 800b414:	4621      	mov	r1, r4
 800b416:	2004      	movs	r0, #4
 800b418:	f7fc fec4 	bl	80081a4 <pbuf_alloc>
 800b41c:	900c      	str	r0, [sp, #48]	; 0x30
 800b41e:	2800      	cmp	r0, #0
 800b420:	f000 80cf 	beq.w	800b5c2 <tcp_write+0x35e>
          ((struct pbuf_rom*)concat_p)->payload = (const u8_t*)arg + pos;
 800b424:	9b08      	ldr	r3, [sp, #32]
 800b426:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b428:	440b      	add	r3, r1
 800b42a:	6043      	str	r3, [r0, #4]
          queuelen += pbuf_clen(concat_p);
 800b42c:	f7fd f814 	bl	8008458 <pbuf_clen>
 800b430:	4406      	add	r6, r0
 800b432:	b2b6      	uxth	r6, r6
  u16_t extendlen = 0;
 800b434:	2300      	movs	r3, #0
 800b436:	930b      	str	r3, [sp, #44]	; 0x2c
      pos += seglen;
 800b438:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b43a:	441c      	add	r4, r3
 800b43c:	b2a4      	uxth	r4, r4
      seg = last_unsent;
 800b43e:	46d8      	mov	r8, fp
 800b440:	e024      	b.n	800b48c <tcp_write+0x228>
        if (p->type == PBUF_ROM && (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800b442:	685a      	ldr	r2, [r3, #4]
 800b444:	895b      	ldrh	r3, [r3, #10]
 800b446:	4413      	add	r3, r2
 800b448:	9a08      	ldr	r2, [sp, #32]
 800b44a:	429a      	cmp	r2, r3
 800b44c:	d1e1      	bne.n	800b412 <tcp_write+0x1ae>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800b44e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b450:	b90b      	cbnz	r3, 800b456 <tcp_write+0x1f2>
          extendlen = seglen;
 800b452:	940b      	str	r4, [sp, #44]	; 0x2c
 800b454:	e7f0      	b.n	800b438 <tcp_write+0x1d4>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800b456:	4b4d      	ldr	r3, [pc, #308]	; (800b58c <tcp_write+0x328>)
 800b458:	f44f 7203 	mov.w	r2, #524	; 0x20c
 800b45c:	4951      	ldr	r1, [pc, #324]	; (800b5a4 <tcp_write+0x340>)
 800b45e:	484d      	ldr	r0, [pc, #308]	; (800b594 <tcp_write+0x330>)
 800b460:	f002 f8cb 	bl	800d5fa <iprintf>
          extendlen = seglen;
 800b464:	940b      	str	r4, [sp, #44]	; 0x2c
 800b466:	e7e7      	b.n	800b438 <tcp_write+0x1d4>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800b468:	4b48      	ldr	r3, [pc, #288]	; (800b58c <tcp_write+0x328>)
 800b46a:	f240 2225 	movw	r2, #549	; 0x225
 800b46e:	494e      	ldr	r1, [pc, #312]	; (800b5a8 <tcp_write+0x344>)
 800b470:	4848      	ldr	r0, [pc, #288]	; (800b594 <tcp_write+0x330>)
 800b472:	f002 f8c2 	bl	800d5fa <iprintf>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800b476:	46d8      	mov	r8, fp
  u16_t extendlen = 0;
 800b478:	2300      	movs	r3, #0
 800b47a:	930b      	str	r3, [sp, #44]	; 0x2c
  u16_t oversize_used = 0;
 800b47c:	930a      	str	r3, [sp, #40]	; 0x28
  u16_t pos = 0; /* position in 'arg' data */
 800b47e:	461c      	mov	r4, r3
  struct pbuf *concat_p = NULL;
 800b480:	930c      	str	r3, [sp, #48]	; 0x30
 800b482:	e003      	b.n	800b48c <tcp_write+0x228>
 800b484:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  u16_t extendlen = 0;
 800b486:	2300      	movs	r3, #0
 800b488:	930b      	str	r3, [sp, #44]	; 0x2c
  struct pbuf *concat_p = NULL;
 800b48a:	930c      	str	r3, [sp, #48]	; 0x30
      queue = seg;
 800b48c:	2700      	movs	r7, #0
 800b48e:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 800b492:	46bb      	mov	fp, r7
 800b494:	e060      	b.n	800b558 <tcp_write+0x2f4>
 800b496:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  struct pbuf *concat_p = NULL;
 800b498:	2300      	movs	r3, #0
 800b49a:	930c      	str	r3, [sp, #48]	; 0x30
 800b49c:	e7f6      	b.n	800b48c <tcp_write+0x228>
  u16_t extendlen = 0;
 800b49e:	930b      	str	r3, [sp, #44]	; 0x2c
 800b4a0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  struct pbuf *concat_p = NULL;
 800b4a2:	2300      	movs	r3, #0
 800b4a4:	930c      	str	r3, [sp, #48]	; 0x30
 800b4a6:	e7f1      	b.n	800b48c <tcp_write+0x228>
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800b4a8:	fab7 f387 	clz	r3, r7
 800b4ac:	095b      	lsrs	r3, r3, #5
 800b4ae:	9302      	str	r3, [sp, #8]
 800b4b0:	9b06      	ldr	r3, [sp, #24]
 800b4b2:	9301      	str	r3, [sp, #4]
 800b4b4:	f8cd 9000 	str.w	r9, [sp]
 800b4b8:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 800b4bc:	9a05      	ldr	r2, [sp, #20]
 800b4be:	4629      	mov	r1, r5
 800b4c0:	2000      	movs	r0, #0
 800b4c2:	f7ff fd87 	bl	800afd4 <tcp_pbuf_prealloc>
 800b4c6:	4680      	mov	r8, r0
 800b4c8:	2800      	cmp	r0, #0
 800b4ca:	d07a      	beq.n	800b5c2 <tcp_write+0x35e>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800b4cc:	8943      	ldrh	r3, [r0, #10]
 800b4ce:	429d      	cmp	r5, r3
 800b4d0:	d807      	bhi.n	800b4e2 <tcp_write+0x27e>
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t*)arg + pos, seglen, &chksum, &chksum_swapped);
 800b4d2:	462a      	mov	r2, r5
 800b4d4:	9b08      	ldr	r3, [sp, #32]
 800b4d6:	1919      	adds	r1, r3, r4
 800b4d8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b4dc:	f002 f9f9 	bl	800d8d2 <memcpy>
 800b4e0:	e01d      	b.n	800b51e <tcp_write+0x2ba>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800b4e2:	4b2a      	ldr	r3, [pc, #168]	; (800b58c <tcp_write+0x328>)
 800b4e4:	f240 2241 	movw	r2, #577	; 0x241
 800b4e8:	4930      	ldr	r1, [pc, #192]	; (800b5ac <tcp_write+0x348>)
 800b4ea:	482a      	ldr	r0, [pc, #168]	; (800b594 <tcp_write+0x330>)
 800b4ec:	f002 f885 	bl	800d5fa <iprintf>
 800b4f0:	e7ef      	b.n	800b4d2 <tcp_write+0x26e>
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800b4f2:	2201      	movs	r2, #1
 800b4f4:	4629      	mov	r1, r5
 800b4f6:	2000      	movs	r0, #0
 800b4f8:	f7fc fe54 	bl	80081a4 <pbuf_alloc>
 800b4fc:	9007      	str	r0, [sp, #28]
 800b4fe:	2800      	cmp	r0, #0
 800b500:	d05f      	beq.n	800b5c2 <tcp_write+0x35e>
      ((struct pbuf_rom*)p2)->payload = (const u8_t*)arg + pos;
 800b502:	9b08      	ldr	r3, [sp, #32]
 800b504:	4423      	add	r3, r4
 800b506:	6043      	str	r3, [r0, #4]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800b508:	2200      	movs	r2, #0
 800b50a:	4611      	mov	r1, r2
 800b50c:	4610      	mov	r0, r2
 800b50e:	f7fc fe49 	bl	80081a4 <pbuf_alloc>
 800b512:	4680      	mov	r8, r0
 800b514:	2800      	cmp	r0, #0
 800b516:	d04d      	beq.n	800b5b4 <tcp_write+0x350>
      pbuf_cat(p/*header*/, p2/*data*/);
 800b518:	9907      	ldr	r1, [sp, #28]
 800b51a:	f7fc ffc3 	bl	80084a4 <pbuf_cat>
    queuelen += pbuf_clen(p);
 800b51e:	4640      	mov	r0, r8
 800b520:	f7fc ff9a 	bl	8008458 <pbuf_clen>
 800b524:	4406      	add	r6, r0
 800b526:	b2b6      	uxth	r6, r6
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 800b528:	2e09      	cmp	r6, #9
 800b52a:	d847      	bhi.n	800b5bc <tcp_write+0x358>
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800b52c:	f8d9 3058 	ldr.w	r3, [r9, #88]	; 0x58
 800b530:	2200      	movs	r2, #0
 800b532:	9200      	str	r2, [sp, #0]
 800b534:	4423      	add	r3, r4
 800b536:	4641      	mov	r1, r8
 800b538:	4648      	mov	r0, r9
 800b53a:	f7ff fd8b 	bl	800b054 <tcp_create_segment>
 800b53e:	4680      	mov	r8, r0
 800b540:	2800      	cmp	r0, #0
 800b542:	d03e      	beq.n	800b5c2 <tcp_write+0x35e>
    if (queue == NULL) {
 800b544:	2f00      	cmp	r7, #0
 800b546:	d069      	beq.n	800b61c <tcp_write+0x3b8>
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800b548:	f1bb 0f00 	cmp.w	fp, #0
 800b54c:	d05e      	beq.n	800b60c <tcp_write+0x3a8>
      prev_seg->next = seg;
 800b54e:	f8cb 8000 	str.w	r8, [fp]
    pos += seglen;
 800b552:	442c      	add	r4, r5
 800b554:	b2a4      	uxth	r4, r4
    prev_seg = seg;
 800b556:	46c3      	mov	fp, r8
  while (pos < len) {
 800b558:	4554      	cmp	r4, sl
 800b55a:	d261      	bcs.n	800b620 <tcp_write+0x3bc>
    u16_t left = len - pos;
 800b55c:	ebaa 0504 	sub.w	r5, sl, r4
 800b560:	b2ad      	uxth	r5, r5
    u16_t seglen = LWIP_MIN(left, max_len);
 800b562:	9b05      	ldr	r3, [sp, #20]
 800b564:	429d      	cmp	r5, r3
 800b566:	bf28      	it	cs
 800b568:	461d      	movcs	r5, r3
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800b56a:	9b06      	ldr	r3, [sp, #24]
 800b56c:	f013 0f01 	tst.w	r3, #1
 800b570:	d19a      	bne.n	800b4a8 <tcp_write+0x244>
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800b572:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800b576:	2b00      	cmp	r3, #0
 800b578:	d0bb      	beq.n	800b4f2 <tcp_write+0x28e>
 800b57a:	4b04      	ldr	r3, [pc, #16]	; (800b58c <tcp_write+0x328>)
 800b57c:	f240 224b 	movw	r2, #587	; 0x24b
 800b580:	490b      	ldr	r1, [pc, #44]	; (800b5b0 <tcp_write+0x34c>)
 800b582:	4804      	ldr	r0, [pc, #16]	; (800b594 <tcp_write+0x330>)
 800b584:	f002 f839 	bl	800d5fa <iprintf>
 800b588:	e7b3      	b.n	800b4f2 <tcp_write+0x28e>
 800b58a:	bf00      	nop
 800b58c:	0800fd60 	.word	0x0800fd60
 800b590:	0800fb84 	.word	0x0800fb84
 800b594:	0800de34 	.word	0x0800de34
 800b598:	0800fbf0 	.word	0x0800fbf0
 800b59c:	0800fbb8 	.word	0x0800fbb8
 800b5a0:	0800fbd0 	.word	0x0800fbd0
 800b5a4:	0800fc10 	.word	0x0800fc10
 800b5a8:	0800fc3c 	.word	0x0800fc3c
 800b5ac:	0800fc6c 	.word	0x0800fc6c
 800b5b0:	0800fcac 	.word	0x0800fcac
        pbuf_free(p2);
 800b5b4:	9807      	ldr	r0, [sp, #28]
 800b5b6:	f7fc fd89 	bl	80080cc <pbuf_free>
        goto memerr;
 800b5ba:	e002      	b.n	800b5c2 <tcp_write+0x35e>
      pbuf_free(p);
 800b5bc:	4640      	mov	r0, r8
 800b5be:	f7fc fd85 	bl	80080cc <pbuf_free>
  pcb->flags |= TF_NAGLEMEMERR;
 800b5c2:	f899 301a 	ldrb.w	r3, [r9, #26]
 800b5c6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b5ca:	f889 301a 	strb.w	r3, [r9, #26]
  if (concat_p != NULL) {
 800b5ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b5d0:	b113      	cbz	r3, 800b5d8 <tcp_write+0x374>
    pbuf_free(concat_p);
 800b5d2:	4618      	mov	r0, r3
 800b5d4:	f7fc fd7a 	bl	80080cc <pbuf_free>
  if (queue != NULL) {
 800b5d8:	b117      	cbz	r7, 800b5e0 <tcp_write+0x37c>
    tcp_segs_free(queue);
 800b5da:	4638      	mov	r0, r7
 800b5dc:	f7fd fa6f 	bl	8008abe <tcp_segs_free>
  if (pcb->snd_queuelen != 0) {
 800b5e0:	f8b9 3062 	ldrh.w	r3, [r9, #98]	; 0x62
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	f000 80c6 	beq.w	800b776 <tcp_write+0x512>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800b5ea:	f8d9 306c 	ldr.w	r3, [r9, #108]	; 0x6c
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	f040 80c5 	bne.w	800b77e <tcp_write+0x51a>
 800b5f4:	f8d9 3068 	ldr.w	r3, [r9, #104]	; 0x68
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	f000 80b1 	beq.w	800b760 <tcp_write+0x4fc>
  return ERR_MEM;
 800b5fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b602:	9309      	str	r3, [sp, #36]	; 0x24
}
 800b604:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b606:	b011      	add	sp, #68	; 0x44
 800b608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800b60c:	4b5e      	ldr	r3, [pc, #376]	; (800b788 <tcp_write+0x524>)
 800b60e:	f240 2285 	movw	r2, #645	; 0x285
 800b612:	495e      	ldr	r1, [pc, #376]	; (800b78c <tcp_write+0x528>)
 800b614:	485e      	ldr	r0, [pc, #376]	; (800b790 <tcp_write+0x52c>)
 800b616:	f001 fff0 	bl	800d5fa <iprintf>
 800b61a:	e798      	b.n	800b54e <tcp_write+0x2ea>
      queue = seg;
 800b61c:	4607      	mov	r7, r0
 800b61e:	e798      	b.n	800b552 <tcp_write+0x2ee>
 800b620:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
  if (oversize_used > 0) {
 800b624:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b626:	b1e3      	cbz	r3, 800b662 <tcp_write+0x3fe>
    for (p = last_unsent->p; p; p = p->next) {
 800b628:	f8db 4004 	ldr.w	r4, [fp, #4]
 800b62c:	461d      	mov	r5, r3
 800b62e:	e000      	b.n	800b632 <tcp_write+0x3ce>
 800b630:	6824      	ldr	r4, [r4, #0]
 800b632:	b184      	cbz	r4, 800b656 <tcp_write+0x3f2>
      p->tot_len += oversize_used;
 800b634:	8923      	ldrh	r3, [r4, #8]
 800b636:	442b      	add	r3, r5
 800b638:	8123      	strh	r3, [r4, #8]
      if (p->next == NULL) {
 800b63a:	6823      	ldr	r3, [r4, #0]
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d1f7      	bne.n	800b630 <tcp_write+0x3cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800b640:	6860      	ldr	r0, [r4, #4]
 800b642:	8963      	ldrh	r3, [r4, #10]
 800b644:	462a      	mov	r2, r5
 800b646:	9908      	ldr	r1, [sp, #32]
 800b648:	4418      	add	r0, r3
 800b64a:	f002 f942 	bl	800d8d2 <memcpy>
        p->len += oversize_used;
 800b64e:	8963      	ldrh	r3, [r4, #10]
 800b650:	442b      	add	r3, r5
 800b652:	8163      	strh	r3, [r4, #10]
 800b654:	e7ec      	b.n	800b630 <tcp_write+0x3cc>
    last_unsent->len += oversize_used;
 800b656:	f8bb 3008 	ldrh.w	r3, [fp, #8]
 800b65a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b65c:	441a      	add	r2, r3
 800b65e:	f8ab 2008 	strh.w	r2, [fp, #8]
  pcb->unsent_oversize = oversize;
 800b662:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800b666:	f8a9 3064 	strh.w	r3, [r9, #100]	; 0x64
  if (concat_p != NULL) {
 800b66a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d03f      	beq.n	800b6f0 <tcp_write+0x48c>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800b670:	f1bb 0f00 	cmp.w	fp, #0
 800b674:	d034      	beq.n	800b6e0 <tcp_write+0x47c>
    pbuf_cat(last_unsent->p, concat_p);
 800b676:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800b678:	4621      	mov	r1, r4
 800b67a:	f8db 0004 	ldr.w	r0, [fp, #4]
 800b67e:	f7fc ff11 	bl	80084a4 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800b682:	8923      	ldrh	r3, [r4, #8]
 800b684:	f8bb 2008 	ldrh.w	r2, [fp, #8]
 800b688:	4413      	add	r3, r2
 800b68a:	f8ab 3008 	strh.w	r3, [fp, #8]
  if (last_unsent == NULL) {
 800b68e:	f1bb 0f00 	cmp.w	fp, #0
 800b692:	d056      	beq.n	800b742 <tcp_write+0x4de>
    last_unsent->next = queue;
 800b694:	f8cb 7000 	str.w	r7, [fp]
  pcb->snd_lbb += len;
 800b698:	f8d9 3058 	ldr.w	r3, [r9, #88]	; 0x58
 800b69c:	4453      	add	r3, sl
 800b69e:	f8c9 3058 	str.w	r3, [r9, #88]	; 0x58
  pcb->snd_buf -= len;
 800b6a2:	f8b9 3060 	ldrh.w	r3, [r9, #96]	; 0x60
 800b6a6:	eba3 0a0a 	sub.w	sl, r3, sl
 800b6aa:	f8a9 a060 	strh.w	sl, [r9, #96]	; 0x60
  pcb->snd_queuelen = queuelen;
 800b6ae:	f8a9 6062 	strh.w	r6, [r9, #98]	; 0x62
  if (pcb->snd_queuelen != 0) {
 800b6b2:	b11e      	cbz	r6, 800b6bc <tcp_write+0x458>
    LWIP_ASSERT("tcp_write: valid queue length",
 800b6b4:	f8d9 306c 	ldr.w	r3, [r9, #108]	; 0x6c
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d045      	beq.n	800b748 <tcp_write+0x4e4>
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE)==0)) {
 800b6bc:	f1b8 0f00 	cmp.w	r8, #0
 800b6c0:	d0a0      	beq.n	800b604 <tcp_write+0x3a0>
 800b6c2:	f8d8 400c 	ldr.w	r4, [r8, #12]
 800b6c6:	2c00      	cmp	r4, #0
 800b6c8:	d09c      	beq.n	800b604 <tcp_write+0x3a0>
 800b6ca:	9b06      	ldr	r3, [sp, #24]
 800b6cc:	f013 0f02 	tst.w	r3, #2
 800b6d0:	d198      	bne.n	800b604 <tcp_write+0x3a0>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800b6d2:	89a5      	ldrh	r5, [r4, #12]
 800b6d4:	2008      	movs	r0, #8
 800b6d6:	f7fa fcdd 	bl	8006094 <lwip_htons>
 800b6da:	4328      	orrs	r0, r5
 800b6dc:	81a0      	strh	r0, [r4, #12]
 800b6de:	e791      	b.n	800b604 <tcp_write+0x3a0>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800b6e0:	4b29      	ldr	r3, [pc, #164]	; (800b788 <tcp_write+0x524>)
 800b6e2:	f240 22bb 	movw	r2, #699	; 0x2bb
 800b6e6:	492b      	ldr	r1, [pc, #172]	; (800b794 <tcp_write+0x530>)
 800b6e8:	4829      	ldr	r0, [pc, #164]	; (800b790 <tcp_write+0x52c>)
 800b6ea:	f001 ff86 	bl	800d5fa <iprintf>
 800b6ee:	e7c2      	b.n	800b676 <tcp_write+0x412>
  } else if (extendlen > 0) {
 800b6f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d0cb      	beq.n	800b68e <tcp_write+0x42a>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800b6f6:	f1bb 0f00 	cmp.w	fp, #0
 800b6fa:	d006      	beq.n	800b70a <tcp_write+0x4a6>
 800b6fc:	f8db 3004 	ldr.w	r3, [fp, #4]
 800b700:	b11b      	cbz	r3, 800b70a <tcp_write+0x4a6>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800b702:	f8db 3004 	ldr.w	r3, [fp, #4]
 800b706:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800b708:	e00b      	b.n	800b722 <tcp_write+0x4be>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800b70a:	4b1f      	ldr	r3, [pc, #124]	; (800b788 <tcp_write+0x524>)
 800b70c:	f240 22c1 	movw	r2, #705	; 0x2c1
 800b710:	4921      	ldr	r1, [pc, #132]	; (800b798 <tcp_write+0x534>)
 800b712:	481f      	ldr	r0, [pc, #124]	; (800b790 <tcp_write+0x52c>)
 800b714:	f001 ff71 	bl	800d5fa <iprintf>
 800b718:	e7f3      	b.n	800b702 <tcp_write+0x49e>
      p->tot_len += extendlen;
 800b71a:	891a      	ldrh	r2, [r3, #8]
 800b71c:	4402      	add	r2, r0
 800b71e:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800b720:	460b      	mov	r3, r1
 800b722:	6819      	ldr	r1, [r3, #0]
 800b724:	2900      	cmp	r1, #0
 800b726:	d1f8      	bne.n	800b71a <tcp_write+0x4b6>
    p->tot_len += extendlen;
 800b728:	891a      	ldrh	r2, [r3, #8]
 800b72a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800b72c:	4402      	add	r2, r0
 800b72e:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800b730:	895a      	ldrh	r2, [r3, #10]
 800b732:	4402      	add	r2, r0
 800b734:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800b736:	f8bb 3008 	ldrh.w	r3, [fp, #8]
 800b73a:	4403      	add	r3, r0
 800b73c:	f8ab 3008 	strh.w	r3, [fp, #8]
 800b740:	e7a5      	b.n	800b68e <tcp_write+0x42a>
    pcb->unsent = queue;
 800b742:	f8c9 7068 	str.w	r7, [r9, #104]	; 0x68
 800b746:	e7a7      	b.n	800b698 <tcp_write+0x434>
    LWIP_ASSERT("tcp_write: valid queue length",
 800b748:	f8d9 3068 	ldr.w	r3, [r9, #104]	; 0x68
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d1b5      	bne.n	800b6bc <tcp_write+0x458>
 800b750:	4b0d      	ldr	r3, [pc, #52]	; (800b788 <tcp_write+0x524>)
 800b752:	f240 22ed 	movw	r2, #749	; 0x2ed
 800b756:	4911      	ldr	r1, [pc, #68]	; (800b79c <tcp_write+0x538>)
 800b758:	480d      	ldr	r0, [pc, #52]	; (800b790 <tcp_write+0x52c>)
 800b75a:	f001 ff4e 	bl	800d5fa <iprintf>
 800b75e:	e7ad      	b.n	800b6bc <tcp_write+0x458>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800b760:	4b09      	ldr	r3, [pc, #36]	; (800b788 <tcp_write+0x524>)
 800b762:	f240 3202 	movw	r2, #770	; 0x302
 800b766:	490d      	ldr	r1, [pc, #52]	; (800b79c <tcp_write+0x538>)
 800b768:	4809      	ldr	r0, [pc, #36]	; (800b790 <tcp_write+0x52c>)
 800b76a:	f001 ff46 	bl	800d5fa <iprintf>
  return ERR_MEM;
 800b76e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b772:	9309      	str	r3, [sp, #36]	; 0x24
 800b774:	e746      	b.n	800b604 <tcp_write+0x3a0>
 800b776:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b77a:	9309      	str	r3, [sp, #36]	; 0x24
 800b77c:	e742      	b.n	800b604 <tcp_write+0x3a0>
 800b77e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b782:	9309      	str	r3, [sp, #36]	; 0x24
 800b784:	e73e      	b.n	800b604 <tcp_write+0x3a0>
 800b786:	bf00      	nop
 800b788:	0800fd60 	.word	0x0800fd60
 800b78c:	0800fcbc 	.word	0x0800fcbc
 800b790:	0800de34 	.word	0x0800de34
 800b794:	0800fcd0 	.word	0x0800fcd0
 800b798:	0800fd08 	.word	0x0800fd08
 800b79c:	0800fd40 	.word	0x0800fd40

0800b7a0 <tcp_enqueue_flags>:
{
 800b7a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b7a4:	b083      	sub	sp, #12
 800b7a6:	4604      	mov	r4, r0
 800b7a8:	460d      	mov	r5, r1
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800b7aa:	f011 0703 	ands.w	r7, r1, #3
 800b7ae:	d030      	beq.n	800b812 <tcp_enqueue_flags+0x72>
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 800b7b0:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800b7b4:	2b08      	cmp	r3, #8
 800b7b6:	d902      	bls.n	800b7be <tcp_enqueue_flags+0x1e>
 800b7b8:	f015 0f01 	tst.w	r5, #1
 800b7bc:	d031      	beq.n	800b822 <tcp_enqueue_flags+0x82>
  if (flags & TCP_SYN) {
 800b7be:	f015 0f02 	tst.w	r5, #2
 800b7c2:	d135      	bne.n	800b830 <tcp_enqueue_flags+0x90>
  u8_t optflags = 0;
 800b7c4:	f04f 0900 	mov.w	r9, #0
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800b7c8:	f1b9 0f00 	cmp.w	r9, #0
 800b7cc:	d033      	beq.n	800b836 <tcp_enqueue_flags+0x96>
 800b7ce:	2604      	movs	r6, #4
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800b7d0:	b2b6      	uxth	r6, r6
 800b7d2:	2200      	movs	r2, #0
 800b7d4:	4631      	mov	r1, r6
 800b7d6:	4610      	mov	r0, r2
 800b7d8:	f7fc fce4 	bl	80081a4 <pbuf_alloc>
 800b7dc:	4680      	mov	r8, r0
 800b7de:	b360      	cbz	r0, 800b83a <tcp_enqueue_flags+0x9a>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800b7e0:	8943      	ldrh	r3, [r0, #10]
 800b7e2:	429e      	cmp	r6, r3
 800b7e4:	d830      	bhi.n	800b848 <tcp_enqueue_flags+0xa8>
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800b7e6:	f8cd 9000 	str.w	r9, [sp]
 800b7ea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b7ec:	462a      	mov	r2, r5
 800b7ee:	4641      	mov	r1, r8
 800b7f0:	4620      	mov	r0, r4
 800b7f2:	f7ff fc2f 	bl	800b054 <tcp_create_segment>
 800b7f6:	4606      	mov	r6, r0
 800b7f8:	b370      	cbz	r0, 800b858 <tcp_enqueue_flags+0xb8>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800b7fa:	68c3      	ldr	r3, [r0, #12]
 800b7fc:	f013 0f03 	tst.w	r3, #3
 800b800:	d131      	bne.n	800b866 <tcp_enqueue_flags+0xc6>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800b802:	8933      	ldrh	r3, [r6, #8]
 800b804:	2b00      	cmp	r3, #0
 800b806:	d136      	bne.n	800b876 <tcp_enqueue_flags+0xd6>
  if (pcb->unsent == NULL) {
 800b808:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 800b80a:	2a00      	cmp	r2, #0
 800b80c:	d13c      	bne.n	800b888 <tcp_enqueue_flags+0xe8>
    pcb->unsent = seg;
 800b80e:	66a6      	str	r6, [r4, #104]	; 0x68
 800b810:	e03e      	b.n	800b890 <tcp_enqueue_flags+0xf0>
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800b812:	4b36      	ldr	r3, [pc, #216]	; (800b8ec <tcp_enqueue_flags+0x14c>)
 800b814:	f240 321b 	movw	r2, #795	; 0x31b
 800b818:	4935      	ldr	r1, [pc, #212]	; (800b8f0 <tcp_enqueue_flags+0x150>)
 800b81a:	4836      	ldr	r0, [pc, #216]	; (800b8f4 <tcp_enqueue_flags+0x154>)
 800b81c:	f001 feed 	bl	800d5fa <iprintf>
 800b820:	e7c6      	b.n	800b7b0 <tcp_enqueue_flags+0x10>
    pcb->flags |= TF_NAGLEMEMERR;
 800b822:	7ea3      	ldrb	r3, [r4, #26]
 800b824:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b828:	76a3      	strb	r3, [r4, #26]
    return ERR_MEM;
 800b82a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b82e:	e04a      	b.n	800b8c6 <tcp_enqueue_flags+0x126>
    optflags = TF_SEG_OPTS_MSS;
 800b830:	f04f 0901 	mov.w	r9, #1
 800b834:	e7c8      	b.n	800b7c8 <tcp_enqueue_flags+0x28>
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800b836:	2600      	movs	r6, #0
 800b838:	e7ca      	b.n	800b7d0 <tcp_enqueue_flags+0x30>
    pcb->flags |= TF_NAGLEMEMERR;
 800b83a:	7ea3      	ldrb	r3, [r4, #26]
 800b83c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b840:	76a3      	strb	r3, [r4, #26]
    return ERR_MEM;
 800b842:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b846:	e03e      	b.n	800b8c6 <tcp_enqueue_flags+0x126>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800b848:	4b28      	ldr	r3, [pc, #160]	; (800b8ec <tcp_enqueue_flags+0x14c>)
 800b84a:	f240 3241 	movw	r2, #833	; 0x341
 800b84e:	492a      	ldr	r1, [pc, #168]	; (800b8f8 <tcp_enqueue_flags+0x158>)
 800b850:	4828      	ldr	r0, [pc, #160]	; (800b8f4 <tcp_enqueue_flags+0x154>)
 800b852:	f001 fed2 	bl	800d5fa <iprintf>
 800b856:	e7c6      	b.n	800b7e6 <tcp_enqueue_flags+0x46>
    pcb->flags |= TF_NAGLEMEMERR;
 800b858:	7ea3      	ldrb	r3, [r4, #26]
 800b85a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b85e:	76a3      	strb	r3, [r4, #26]
    return ERR_MEM;
 800b860:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b864:	e02f      	b.n	800b8c6 <tcp_enqueue_flags+0x126>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800b866:	4b21      	ldr	r3, [pc, #132]	; (800b8ec <tcp_enqueue_flags+0x14c>)
 800b868:	f240 3249 	movw	r2, #841	; 0x349
 800b86c:	4923      	ldr	r1, [pc, #140]	; (800b8fc <tcp_enqueue_flags+0x15c>)
 800b86e:	4821      	ldr	r0, [pc, #132]	; (800b8f4 <tcp_enqueue_flags+0x154>)
 800b870:	f001 fec3 	bl	800d5fa <iprintf>
 800b874:	e7c5      	b.n	800b802 <tcp_enqueue_flags+0x62>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800b876:	4b1d      	ldr	r3, [pc, #116]	; (800b8ec <tcp_enqueue_flags+0x14c>)
 800b878:	f240 324a 	movw	r2, #842	; 0x34a
 800b87c:	4920      	ldr	r1, [pc, #128]	; (800b900 <tcp_enqueue_flags+0x160>)
 800b87e:	481d      	ldr	r0, [pc, #116]	; (800b8f4 <tcp_enqueue_flags+0x154>)
 800b880:	f001 febb 	bl	800d5fa <iprintf>
 800b884:	e7c0      	b.n	800b808 <tcp_enqueue_flags+0x68>
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800b886:	461a      	mov	r2, r3
 800b888:	6813      	ldr	r3, [r2, #0]
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d1fb      	bne.n	800b886 <tcp_enqueue_flags+0xe6>
    useg->next = seg;
 800b88e:	6016      	str	r6, [r2, #0]
  pcb->unsent_oversize = 0;
 800b890:	2300      	movs	r3, #0
 800b892:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800b896:	b117      	cbz	r7, 800b89e <tcp_enqueue_flags+0xfe>
    pcb->snd_lbb++;
 800b898:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b89a:	3301      	adds	r3, #1
 800b89c:	65a3      	str	r3, [r4, #88]	; 0x58
  if (flags & TCP_FIN) {
 800b89e:	f015 0f01 	tst.w	r5, #1
 800b8a2:	d003      	beq.n	800b8ac <tcp_enqueue_flags+0x10c>
    pcb->flags |= TF_FIN;
 800b8a4:	7ea3      	ldrb	r3, [r4, #26]
 800b8a6:	f043 0320 	orr.w	r3, r3, #32
 800b8aa:	76a3      	strb	r3, [r4, #26]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800b8ac:	6870      	ldr	r0, [r6, #4]
 800b8ae:	f7fc fdd3 	bl	8008458 <pbuf_clen>
 800b8b2:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800b8b6:	4418      	add	r0, r3
 800b8b8:	b280      	uxth	r0, r0
 800b8ba:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
  if (pcb->snd_queuelen != 0) {
 800b8be:	b190      	cbz	r0, 800b8e6 <tcp_enqueue_flags+0x146>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800b8c0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800b8c2:	b11b      	cbz	r3, 800b8cc <tcp_enqueue_flags+0x12c>
  return ERR_OK;
 800b8c4:	2000      	movs	r0, #0
}
 800b8c6:	b003      	add	sp, #12
 800b8c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800b8cc:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800b8ce:	b10b      	cbz	r3, 800b8d4 <tcp_enqueue_flags+0x134>
  return ERR_OK;
 800b8d0:	2000      	movs	r0, #0
 800b8d2:	e7f8      	b.n	800b8c6 <tcp_enqueue_flags+0x126>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800b8d4:	4b05      	ldr	r3, [pc, #20]	; (800b8ec <tcp_enqueue_flags+0x14c>)
 800b8d6:	f240 326d 	movw	r2, #877	; 0x36d
 800b8da:	490a      	ldr	r1, [pc, #40]	; (800b904 <tcp_enqueue_flags+0x164>)
 800b8dc:	4805      	ldr	r0, [pc, #20]	; (800b8f4 <tcp_enqueue_flags+0x154>)
 800b8de:	f001 fe8c 	bl	800d5fa <iprintf>
  return ERR_OK;
 800b8e2:	2000      	movs	r0, #0
 800b8e4:	e7ef      	b.n	800b8c6 <tcp_enqueue_flags+0x126>
 800b8e6:	2000      	movs	r0, #0
 800b8e8:	e7ed      	b.n	800b8c6 <tcp_enqueue_flags+0x126>
 800b8ea:	bf00      	nop
 800b8ec:	0800fd60 	.word	0x0800fd60
 800b8f0:	0800fa00 	.word	0x0800fa00
 800b8f4:	0800de34 	.word	0x0800de34
 800b8f8:	0800fa58 	.word	0x0800fa58
 800b8fc:	0800fa94 	.word	0x0800fa94
 800b900:	0800faac 	.word	0x0800faac
 800b904:	0800fad8 	.word	0x0800fad8

0800b908 <tcp_send_fin>:
{
 800b908:	b570      	push	{r4, r5, r6, lr}
 800b90a:	4605      	mov	r5, r0
  if (pcb->unsent != NULL) {
 800b90c:	6e84      	ldr	r4, [r0, #104]	; 0x68
 800b90e:	b90c      	cbnz	r4, 800b914 <tcp_send_fin+0xc>
 800b910:	e00a      	b.n	800b928 <tcp_send_fin+0x20>
         last_unsent = last_unsent->next);
 800b912:	461c      	mov	r4, r3
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800b914:	6823      	ldr	r3, [r4, #0]
 800b916:	2b00      	cmp	r3, #0
 800b918:	d1fb      	bne.n	800b912 <tcp_send_fin+0xa>
    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800b91a:	68e3      	ldr	r3, [r4, #12]
 800b91c:	8998      	ldrh	r0, [r3, #12]
 800b91e:	f7fa fbb9 	bl	8006094 <lwip_htons>
 800b922:	f010 0f07 	tst.w	r0, #7
 800b926:	d004      	beq.n	800b932 <tcp_send_fin+0x2a>
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800b928:	2101      	movs	r1, #1
 800b92a:	4628      	mov	r0, r5
 800b92c:	f7ff ff38 	bl	800b7a0 <tcp_enqueue_flags>
}
 800b930:	bd70      	pop	{r4, r5, r6, pc}
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800b932:	68e6      	ldr	r6, [r4, #12]
 800b934:	89b4      	ldrh	r4, [r6, #12]
 800b936:	2001      	movs	r0, #1
 800b938:	f7fa fbac 	bl	8006094 <lwip_htons>
 800b93c:	4320      	orrs	r0, r4
 800b93e:	81b0      	strh	r0, [r6, #12]
      pcb->flags |= TF_FIN;
 800b940:	7eab      	ldrb	r3, [r5, #26]
 800b942:	f043 0320 	orr.w	r3, r3, #32
 800b946:	76ab      	strb	r3, [r5, #26]
      return ERR_OK;
 800b948:	2000      	movs	r0, #0
 800b94a:	bd70      	pop	{r4, r5, r6, pc}

0800b94c <tcp_send_empty_ack>:
{
 800b94c:	b570      	push	{r4, r5, r6, lr}
 800b94e:	b084      	sub	sp, #16
 800b950:	4604      	mov	r4, r0
  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800b952:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 800b954:	f7fa fba1 	bl	800609a <lwip_htonl>
 800b958:	4603      	mov	r3, r0
 800b95a:	2200      	movs	r2, #0
 800b95c:	4611      	mov	r1, r2
 800b95e:	4620      	mov	r0, r4
 800b960:	f7ff fbd8 	bl	800b114 <tcp_output_alloc_header>
  if (p == NULL) {
 800b964:	b1e0      	cbz	r0, 800b9a0 <tcp_send_empty_ack+0x54>
 800b966:	4606      	mov	r6, r0
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800b968:	1d25      	adds	r5, r4, #4
 800b96a:	4628      	mov	r0, r5
 800b96c:	f7fb f93c 	bl	8006be8 <ip4_route>
  if (netif == NULL) {
 800b970:	b1e8      	cbz	r0, 800b9ae <tcp_send_empty_ack+0x62>
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 800b972:	7aa3      	ldrb	r3, [r4, #10]
 800b974:	7a61      	ldrb	r1, [r4, #9]
 800b976:	9002      	str	r0, [sp, #8]
 800b978:	2206      	movs	r2, #6
 800b97a:	9201      	str	r2, [sp, #4]
 800b97c:	9100      	str	r1, [sp, #0]
 800b97e:	462a      	mov	r2, r5
 800b980:	4621      	mov	r1, r4
 800b982:	4630      	mov	r0, r6
 800b984:	f7fb fad6 	bl	8006f34 <ip4_output_if>
 800b988:	4605      	mov	r5, r0
  pbuf_free(p);
 800b98a:	4630      	mov	r0, r6
 800b98c:	f7fc fb9e 	bl	80080cc <pbuf_free>
  if (err != ERR_OK) {
 800b990:	b985      	cbnz	r5, 800b9b4 <tcp_send_empty_ack+0x68>
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800b992:	7ea3      	ldrb	r3, [r4, #26]
 800b994:	f023 0303 	bic.w	r3, r3, #3
 800b998:	76a3      	strb	r3, [r4, #26]
}
 800b99a:	4628      	mov	r0, r5
 800b99c:	b004      	add	sp, #16
 800b99e:	bd70      	pop	{r4, r5, r6, pc}
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 800b9a0:	7ea3      	ldrb	r3, [r4, #26]
 800b9a2:	f043 0303 	orr.w	r3, r3, #3
 800b9a6:	76a3      	strb	r3, [r4, #26]
    return ERR_BUF;
 800b9a8:	f06f 0501 	mvn.w	r5, #1
 800b9ac:	e7f5      	b.n	800b99a <tcp_send_empty_ack+0x4e>
    err = ERR_RTE;
 800b9ae:	f06f 0503 	mvn.w	r5, #3
 800b9b2:	e7ea      	b.n	800b98a <tcp_send_empty_ack+0x3e>
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 800b9b4:	7ea3      	ldrb	r3, [r4, #26]
 800b9b6:	f043 0303 	orr.w	r3, r3, #3
 800b9ba:	76a3      	strb	r3, [r4, #26]
 800b9bc:	e7ed      	b.n	800b99a <tcp_send_empty_ack+0x4e>
	...

0800b9c0 <tcp_output>:
{
 800b9c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b9c4:	4605      	mov	r5, r0
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800b9c6:	7d03      	ldrb	r3, [r0, #20]
 800b9c8:	2b01      	cmp	r3, #1
 800b9ca:	d01e      	beq.n	800ba0a <tcp_output+0x4a>
  if (tcp_input_pcb == pcb) {
 800b9cc:	4ba5      	ldr	r3, [pc, #660]	; (800bc64 <tcp_output+0x2a4>)
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	429d      	cmp	r5, r3
 800b9d2:	f000 813e 	beq.w	800bc52 <tcp_output+0x292>
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800b9d6:	f8b5 305c 	ldrh.w	r3, [r5, #92]	; 0x5c
 800b9da:	f8b5 7048 	ldrh.w	r7, [r5, #72]	; 0x48
 800b9de:	42bb      	cmp	r3, r7
 800b9e0:	d200      	bcs.n	800b9e4 <tcp_output+0x24>
 800b9e2:	461f      	mov	r7, r3
  seg = pcb->unsent;
 800b9e4:	6eac      	ldr	r4, [r5, #104]	; 0x68
  if (pcb->flags & TF_ACK_NOW &&
 800b9e6:	7eab      	ldrb	r3, [r5, #26]
 800b9e8:	f013 0f02 	tst.w	r3, #2
 800b9ec:	d00a      	beq.n	800ba04 <tcp_output+0x44>
 800b9ee:	b1a4      	cbz	r4, 800ba1a <tcp_output+0x5a>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 800b9f0:	68e3      	ldr	r3, [r4, #12]
 800b9f2:	6858      	ldr	r0, [r3, #4]
 800b9f4:	f7fa fb51 	bl	800609a <lwip_htonl>
 800b9f8:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800b9fa:	1ac3      	subs	r3, r0, r3
 800b9fc:	8920      	ldrh	r0, [r4, #8]
 800b9fe:	4403      	add	r3, r0
     (seg == NULL ||
 800ba00:	429f      	cmp	r7, r3
 800ba02:	d30a      	bcc.n	800ba1a <tcp_output+0x5a>
  useg = pcb->unacked;
 800ba04:	6eee      	ldr	r6, [r5, #108]	; 0x6c
  if (useg != NULL) {
 800ba06:	b976      	cbnz	r6, 800ba26 <tcp_output+0x66>
 800ba08:	e010      	b.n	800ba2c <tcp_output+0x6c>
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800ba0a:	4b97      	ldr	r3, [pc, #604]	; (800bc68 <tcp_output+0x2a8>)
 800ba0c:	f240 32ed 	movw	r2, #1005	; 0x3ed
 800ba10:	4996      	ldr	r1, [pc, #600]	; (800bc6c <tcp_output+0x2ac>)
 800ba12:	4897      	ldr	r0, [pc, #604]	; (800bc70 <tcp_output+0x2b0>)
 800ba14:	f001 fdf1 	bl	800d5fa <iprintf>
 800ba18:	e7d8      	b.n	800b9cc <tcp_output+0xc>
     return tcp_send_empty_ack(pcb);
 800ba1a:	4628      	mov	r0, r5
 800ba1c:	f7ff ff96 	bl	800b94c <tcp_send_empty_ack>
 800ba20:	4603      	mov	r3, r0
 800ba22:	e03f      	b.n	800baa4 <tcp_output+0xe4>
    for (; useg->next != NULL; useg = useg->next);
 800ba24:	461e      	mov	r6, r3
 800ba26:	6833      	ldr	r3, [r6, #0]
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d1fb      	bne.n	800ba24 <tcp_output+0x64>
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800ba2c:	1d28      	adds	r0, r5, #4
 800ba2e:	f7fb f8db 	bl	8006be8 <ip4_route>
  if (netif == NULL) {
 800ba32:	4680      	mov	r8, r0
 800ba34:	2800      	cmp	r0, #0
 800ba36:	f000 810e 	beq.w	800bc56 <tcp_output+0x296>
  if (ip_addr_isany(&pcb->local_ip)) {
 800ba3a:	b10d      	cbz	r5, 800ba40 <tcp_output+0x80>
 800ba3c:	682b      	ldr	r3, [r5, #0]
 800ba3e:	b933      	cbnz	r3, 800ba4e <tcp_output+0x8e>
    if (local_ip == NULL) {
 800ba40:	f118 0f04 	cmn.w	r8, #4
 800ba44:	f000 810a 	beq.w	800bc5c <tcp_output+0x29c>
    ip_addr_copy(pcb->local_ip, *local_ip);
 800ba48:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ba4c:	602b      	str	r3, [r5, #0]
  if (seg != NULL &&
 800ba4e:	2c00      	cmp	r4, #0
 800ba50:	f000 80a2 	beq.w	800bb98 <tcp_output+0x1d8>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 800ba54:	68e3      	ldr	r3, [r4, #12]
 800ba56:	6858      	ldr	r0, [r3, #4]
 800ba58:	f7fa fb1f 	bl	800609a <lwip_htonl>
 800ba5c:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800ba5e:	1ac3      	subs	r3, r0, r3
 800ba60:	8920      	ldrh	r0, [r4, #8]
 800ba62:	4403      	add	r3, r0
  if (seg != NULL &&
 800ba64:	429f      	cmp	r7, r3
 800ba66:	f080 8097 	bcs.w	800bb98 <tcp_output+0x1d8>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 800ba6a:	2f00      	cmp	r7, #0
 800ba6c:	f000 8094 	beq.w	800bb98 <tcp_output+0x1d8>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 800ba70:	f8b5 305c 	ldrh.w	r3, [r5, #92]	; 0x5c
 800ba74:	429f      	cmp	r7, r3
 800ba76:	f040 808f 	bne.w	800bb98 <tcp_output+0x1d8>
 800ba7a:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	f040 808b 	bne.w	800bb98 <tcp_output+0x1d8>
    if (pcb->persist_backoff == 0) {
 800ba82:	f895 3095 	ldrb.w	r3, [r5, #149]	; 0x95
 800ba86:	b923      	cbnz	r3, 800ba92 <tcp_output+0xd2>
      pcb->persist_cnt = 0;
 800ba88:	f885 3094 	strb.w	r3, [r5, #148]	; 0x94
      pcb->persist_backoff = 1;
 800ba8c:	2301      	movs	r3, #1
 800ba8e:	f885 3095 	strb.w	r3, [r5, #149]	; 0x95
  if (pcb->unsent == NULL) {
 800ba92:	6eab      	ldr	r3, [r5, #104]	; 0x68
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	f000 80d9 	beq.w	800bc4c <tcp_output+0x28c>
  pcb->flags &= ~TF_NAGLEMEMERR;
 800ba9a:	7eab      	ldrb	r3, [r5, #26]
 800ba9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800baa0:	76ab      	strb	r3, [r5, #26]
  return ERR_OK;
 800baa2:	2300      	movs	r3, #0
}
 800baa4:	4618      	mov	r0, r3
 800baa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    LWIP_ASSERT("RST not expected here!",
 800baaa:	4b6f      	ldr	r3, [pc, #444]	; (800bc68 <tcp_output+0x2a8>)
 800baac:	f240 4246 	movw	r2, #1094	; 0x446
 800bab0:	4970      	ldr	r1, [pc, #448]	; (800bc74 <tcp_output+0x2b4>)
 800bab2:	486f      	ldr	r0, [pc, #444]	; (800bc70 <tcp_output+0x2b0>)
 800bab4:	f001 fda1 	bl	800d5fa <iprintf>
 800bab8:	e084      	b.n	800bbc4 <tcp_output+0x204>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800baba:	891a      	ldrh	r2, [r3, #8]
 800babc:	8e6b      	ldrh	r3, [r5, #50]	; 0x32
 800babe:	429a      	cmp	r2, r3
 800bac0:	f080 8091 	bcs.w	800bbe6 <tcp_output+0x226>
 800bac4:	f8b5 3060 	ldrh.w	r3, [r5, #96]	; 0x60
 800bac8:	2b00      	cmp	r3, #0
 800baca:	f000 808e 	beq.w	800bbea <tcp_output+0x22a>
 800bace:	f8b5 3062 	ldrh.w	r3, [r5, #98]	; 0x62
 800bad2:	2b08      	cmp	r3, #8
 800bad4:	f240 808b 	bls.w	800bbee <tcp_output+0x22e>
 800bad8:	2301      	movs	r3, #1
 800bada:	e002      	b.n	800bae2 <tcp_output+0x122>
 800badc:	2301      	movs	r3, #1
 800bade:	e000      	b.n	800bae2 <tcp_output+0x122>
 800bae0:	2301      	movs	r3, #1
 800bae2:	b91b      	cbnz	r3, 800baec <tcp_output+0x12c>
      ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800bae4:	7eab      	ldrb	r3, [r5, #26]
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800bae6:	f013 0fa0 	tst.w	r3, #160	; 0xa0
 800baea:	d0d2      	beq.n	800ba92 <tcp_output+0xd2>
    if (pcb->state != SYN_SENT) {
 800baec:	7d2b      	ldrb	r3, [r5, #20]
 800baee:	2b02      	cmp	r3, #2
 800baf0:	d00a      	beq.n	800bb08 <tcp_output+0x148>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800baf2:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 800baf6:	f8ba 900c 	ldrh.w	r9, [sl, #12]
 800bafa:	2010      	movs	r0, #16
 800bafc:	f7fa faca 	bl	8006094 <lwip_htons>
 800bb00:	ea49 0000 	orr.w	r0, r9, r0
 800bb04:	f8aa 000c 	strh.w	r0, [sl, #12]
    err = tcp_output_segment(seg, pcb, netif);
 800bb08:	4642      	mov	r2, r8
 800bb0a:	4629      	mov	r1, r5
 800bb0c:	4620      	mov	r0, r4
 800bb0e:	f7ff fb4b 	bl	800b1a8 <tcp_output_segment>
    if (err != ERR_OK) {
 800bb12:	4603      	mov	r3, r0
 800bb14:	2800      	cmp	r0, #0
 800bb16:	d16c      	bne.n	800bbf2 <tcp_output+0x232>
    pcb->unsent = seg->next;
 800bb18:	6823      	ldr	r3, [r4, #0]
 800bb1a:	66ab      	str	r3, [r5, #104]	; 0x68
    if (pcb->state != SYN_SENT) {
 800bb1c:	7d2b      	ldrb	r3, [r5, #20]
 800bb1e:	2b02      	cmp	r3, #2
 800bb20:	d003      	beq.n	800bb2a <tcp_output+0x16a>
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800bb22:	7eab      	ldrb	r3, [r5, #26]
 800bb24:	f023 0303 	bic.w	r3, r3, #3
 800bb28:	76ab      	strb	r3, [r5, #26]
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800bb2a:	68e3      	ldr	r3, [r4, #12]
 800bb2c:	6858      	ldr	r0, [r3, #4]
 800bb2e:	f7fa fab4 	bl	800609a <lwip_htonl>
 800bb32:	4681      	mov	r9, r0
 800bb34:	f8b4 a008 	ldrh.w	sl, [r4, #8]
 800bb38:	68e3      	ldr	r3, [r4, #12]
 800bb3a:	8998      	ldrh	r0, [r3, #12]
 800bb3c:	f7fa faaa 	bl	8006094 <lwip_htons>
 800bb40:	f010 0f03 	tst.w	r0, #3
 800bb44:	d05a      	beq.n	800bbfc <tcp_output+0x23c>
 800bb46:	2001      	movs	r0, #1
 800bb48:	4450      	add	r0, sl
 800bb4a:	4448      	add	r0, r9
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800bb4c:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800bb4e:	1a1b      	subs	r3, r3, r0
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	db55      	blt.n	800bc00 <tcp_output+0x240>
    if (TCP_TCPLEN(seg) > 0) {
 800bb54:	f8b4 9008 	ldrh.w	r9, [r4, #8]
 800bb58:	68e3      	ldr	r3, [r4, #12]
 800bb5a:	8998      	ldrh	r0, [r3, #12]
 800bb5c:	f7fa fa9a 	bl	8006094 <lwip_htons>
 800bb60:	f010 0f03 	tst.w	r0, #3
 800bb64:	d04e      	beq.n	800bc04 <tcp_output+0x244>
 800bb66:	2301      	movs	r3, #1
 800bb68:	eb13 0f09 	cmn.w	r3, r9
 800bb6c:	d06a      	beq.n	800bc44 <tcp_output+0x284>
      seg->next = NULL;
 800bb6e:	2300      	movs	r3, #0
 800bb70:	6023      	str	r3, [r4, #0]
      if (pcb->unacked == NULL) {
 800bb72:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d047      	beq.n	800bc08 <tcp_output+0x248>
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800bb78:	68e3      	ldr	r3, [r4, #12]
 800bb7a:	6858      	ldr	r0, [r3, #4]
 800bb7c:	f7fa fa8d 	bl	800609a <lwip_htonl>
 800bb80:	4681      	mov	r9, r0
 800bb82:	68f3      	ldr	r3, [r6, #12]
 800bb84:	6858      	ldr	r0, [r3, #4]
 800bb86:	f7fa fa88 	bl	800609a <lwip_htonl>
 800bb8a:	eba9 0000 	sub.w	r0, r9, r0
 800bb8e:	2800      	cmp	r0, #0
 800bb90:	db3d      	blt.n	800bc0e <tcp_output+0x24e>
          useg->next = seg;
 800bb92:	6034      	str	r4, [r6, #0]
          useg = useg->next;
 800bb94:	4626      	mov	r6, r4
    seg = pcb->unsent;
 800bb96:	6eac      	ldr	r4, [r5, #104]	; 0x68
  while (seg != NULL &&
 800bb98:	2c00      	cmp	r4, #0
 800bb9a:	f43f af7a 	beq.w	800ba92 <tcp_output+0xd2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800bb9e:	68e3      	ldr	r3, [r4, #12]
 800bba0:	6858      	ldr	r0, [r3, #4]
 800bba2:	f7fa fa7a 	bl	800609a <lwip_htonl>
 800bba6:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800bba8:	1ac0      	subs	r0, r0, r3
 800bbaa:	8923      	ldrh	r3, [r4, #8]
 800bbac:	4418      	add	r0, r3
  while (seg != NULL &&
 800bbae:	4287      	cmp	r7, r0
 800bbb0:	f4ff af6f 	bcc.w	800ba92 <tcp_output+0xd2>
    LWIP_ASSERT("RST not expected here!",
 800bbb4:	68e3      	ldr	r3, [r4, #12]
 800bbb6:	8998      	ldrh	r0, [r3, #12]
 800bbb8:	f7fa fa6c 	bl	8006094 <lwip_htons>
 800bbbc:	f010 0f04 	tst.w	r0, #4
 800bbc0:	f47f af73 	bne.w	800baaa <tcp_output+0xea>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800bbc4:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d088      	beq.n	800badc <tcp_output+0x11c>
 800bbca:	7eab      	ldrb	r3, [r5, #26]
 800bbcc:	f013 0f44 	tst.w	r3, #68	; 0x44
 800bbd0:	d186      	bne.n	800bae0 <tcp_output+0x120>
 800bbd2:	6eab      	ldr	r3, [r5, #104]	; 0x68
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	f43f af75 	beq.w	800bac4 <tcp_output+0x104>
 800bbda:	681a      	ldr	r2, [r3, #0]
 800bbdc:	2a00      	cmp	r2, #0
 800bbde:	f43f af6c 	beq.w	800baba <tcp_output+0xfa>
 800bbe2:	2301      	movs	r3, #1
 800bbe4:	e77d      	b.n	800bae2 <tcp_output+0x122>
 800bbe6:	2301      	movs	r3, #1
 800bbe8:	e77b      	b.n	800bae2 <tcp_output+0x122>
 800bbea:	2301      	movs	r3, #1
 800bbec:	e779      	b.n	800bae2 <tcp_output+0x122>
 800bbee:	2300      	movs	r3, #0
 800bbf0:	e777      	b.n	800bae2 <tcp_output+0x122>
      pcb->flags |= TF_NAGLEMEMERR;
 800bbf2:	7eaa      	ldrb	r2, [r5, #26]
 800bbf4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800bbf8:	76aa      	strb	r2, [r5, #26]
      return err;
 800bbfa:	e753      	b.n	800baa4 <tcp_output+0xe4>
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800bbfc:	2000      	movs	r0, #0
 800bbfe:	e7a3      	b.n	800bb48 <tcp_output+0x188>
      pcb->snd_nxt = snd_nxt;
 800bc00:	64e8      	str	r0, [r5, #76]	; 0x4c
 800bc02:	e7a7      	b.n	800bb54 <tcp_output+0x194>
    if (TCP_TCPLEN(seg) > 0) {
 800bc04:	2300      	movs	r3, #0
 800bc06:	e7af      	b.n	800bb68 <tcp_output+0x1a8>
        pcb->unacked = seg;
 800bc08:	66ec      	str	r4, [r5, #108]	; 0x6c
        useg = seg;
 800bc0a:	4626      	mov	r6, r4
 800bc0c:	e7c3      	b.n	800bb96 <tcp_output+0x1d6>
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800bc0e:	f105 0a6c 	add.w	sl, r5, #108	; 0x6c
          while (*cur_seg &&
 800bc12:	e001      	b.n	800bc18 <tcp_output+0x258>
              cur_seg = &((*cur_seg)->next );
 800bc14:	f8da a000 	ldr.w	sl, [sl]
          while (*cur_seg &&
 800bc18:	f8da 3000 	ldr.w	r3, [sl]
 800bc1c:	b163      	cbz	r3, 800bc38 <tcp_output+0x278>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800bc1e:	68db      	ldr	r3, [r3, #12]
 800bc20:	6858      	ldr	r0, [r3, #4]
 800bc22:	f7fa fa3a 	bl	800609a <lwip_htonl>
 800bc26:	4681      	mov	r9, r0
 800bc28:	68e3      	ldr	r3, [r4, #12]
 800bc2a:	6858      	ldr	r0, [r3, #4]
 800bc2c:	f7fa fa35 	bl	800609a <lwip_htonl>
 800bc30:	eba9 0000 	sub.w	r0, r9, r0
          while (*cur_seg &&
 800bc34:	2800      	cmp	r0, #0
 800bc36:	dbed      	blt.n	800bc14 <tcp_output+0x254>
          seg->next = (*cur_seg);
 800bc38:	f8da 3000 	ldr.w	r3, [sl]
 800bc3c:	6023      	str	r3, [r4, #0]
          (*cur_seg) = seg;
 800bc3e:	f8ca 4000 	str.w	r4, [sl]
 800bc42:	e7a8      	b.n	800bb96 <tcp_output+0x1d6>
      tcp_seg_free(seg);
 800bc44:	4620      	mov	r0, r4
 800bc46:	f7fc ff2d 	bl	8008aa4 <tcp_seg_free>
 800bc4a:	e7a4      	b.n	800bb96 <tcp_output+0x1d6>
    pcb->unsent_oversize = 0;
 800bc4c:	f8a5 3064 	strh.w	r3, [r5, #100]	; 0x64
 800bc50:	e723      	b.n	800ba9a <tcp_output+0xda>
    return ERR_OK;
 800bc52:	2300      	movs	r3, #0
 800bc54:	e726      	b.n	800baa4 <tcp_output+0xe4>
    return ERR_RTE;
 800bc56:	f06f 0303 	mvn.w	r3, #3
 800bc5a:	e723      	b.n	800baa4 <tcp_output+0xe4>
      return ERR_RTE;
 800bc5c:	f06f 0303 	mvn.w	r3, #3
 800bc60:	e720      	b.n	800baa4 <tcp_output+0xe4>
 800bc62:	bf00      	nop
 800bc64:	20007998 	.word	0x20007998
 800bc68:	0800fd60 	.word	0x0800fd60
 800bc6c:	0800fb00 	.word	0x0800fb00
 800bc70:	0800de34 	.word	0x0800de34
 800bc74:	0800fb28 	.word	0x0800fb28

0800bc78 <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 800bc78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bc7c:	b085      	sub	sp, #20
 800bc7e:	4680      	mov	r8, r0
 800bc80:	460f      	mov	r7, r1
 800bc82:	4691      	mov	r9, r2
 800bc84:	461e      	mov	r6, r3
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 800bc86:	2200      	movs	r2, #0
 800bc88:	2114      	movs	r1, #20
 800bc8a:	2001      	movs	r0, #1
 800bc8c:	f7fc fa8a 	bl	80081a4 <pbuf_alloc>
  if (p == NULL) {
 800bc90:	b3b0      	cbz	r0, 800bd00 <tcp_rst+0x88>
 800bc92:	4605      	mov	r5, r0
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800bc94:	8943      	ldrh	r3, [r0, #10]
 800bc96:	2b13      	cmp	r3, #19
 800bc98:	d935      	bls.n	800bd06 <tcp_rst+0x8e>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
 800bc9a:	686c      	ldr	r4, [r5, #4]
  tcphdr->src = lwip_htons(local_port);
 800bc9c:	f8bd 0030 	ldrh.w	r0, [sp, #48]	; 0x30
 800bca0:	f7fa f9f8 	bl	8006094 <lwip_htons>
 800bca4:	8020      	strh	r0, [r4, #0]
  tcphdr->dest = lwip_htons(remote_port);
 800bca6:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 800bcaa:	f7fa f9f3 	bl	8006094 <lwip_htons>
 800bcae:	8060      	strh	r0, [r4, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 800bcb0:	4640      	mov	r0, r8
 800bcb2:	f7fa f9f2 	bl	800609a <lwip_htonl>
 800bcb6:	6060      	str	r0, [r4, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 800bcb8:	4638      	mov	r0, r7
 800bcba:	f7fa f9ee 	bl	800609a <lwip_htonl>
 800bcbe:	60a0      	str	r0, [r4, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 800bcc0:	f245 0014 	movw	r0, #20500	; 0x5014
 800bcc4:	f7fa f9e6 	bl	8006094 <lwip_htons>
 800bcc8:	81a0      	strh	r0, [r4, #12]
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 800bcca:	2300      	movs	r3, #0
 800bccc:	2208      	movs	r2, #8
 800bcce:	73a2      	strb	r2, [r4, #14]
 800bcd0:	2260      	movs	r2, #96	; 0x60
 800bcd2:	73e2      	strb	r2, [r4, #15]
#endif
  tcphdr->chksum = 0;
 800bcd4:	7423      	strb	r3, [r4, #16]
 800bcd6:	7463      	strb	r3, [r4, #17]
  tcphdr->urgp = 0;
 800bcd8:	74a3      	strb	r3, [r4, #18]
 800bcda:	74e3      	strb	r3, [r4, #19]

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 800bcdc:	4630      	mov	r0, r6
 800bcde:	f7fa ff83 	bl	8006be8 <ip4_route>
  if (netif != NULL) {
 800bce2:	b150      	cbz	r0, 800bcfa <tcp_rst+0x82>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 800bce4:	9002      	str	r0, [sp, #8]
 800bce6:	2306      	movs	r3, #6
 800bce8:	9301      	str	r3, [sp, #4]
 800bcea:	2300      	movs	r3, #0
 800bcec:	9300      	str	r3, [sp, #0]
 800bcee:	23ff      	movs	r3, #255	; 0xff
 800bcf0:	4632      	mov	r2, r6
 800bcf2:	4649      	mov	r1, r9
 800bcf4:	4628      	mov	r0, r5
 800bcf6:	f7fb f91d 	bl	8006f34 <ip4_output_if>
  }
  pbuf_free(p);
 800bcfa:	4628      	mov	r0, r5
 800bcfc:	f7fc f9e6 	bl	80080cc <pbuf_free>
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800bd00:	b005      	add	sp, #20
 800bd02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800bd06:	4b04      	ldr	r3, [pc, #16]	; (800bd18 <tcp_rst+0xa0>)
 800bd08:	f240 524d 	movw	r2, #1357	; 0x54d
 800bd0c:	4903      	ldr	r1, [pc, #12]	; (800bd1c <tcp_rst+0xa4>)
 800bd0e:	4804      	ldr	r0, [pc, #16]	; (800bd20 <tcp_rst+0xa8>)
 800bd10:	f001 fc73 	bl	800d5fa <iprintf>
 800bd14:	e7c1      	b.n	800bc9a <tcp_rst+0x22>
 800bd16:	bf00      	nop
 800bd18:	0800fd60 	.word	0x0800fd60
 800bd1c:	0800fb40 	.word	0x0800fb40
 800bd20:	0800de34 	.word	0x0800de34

0800bd24 <tcp_rexmit_rto>:
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 800bd24:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 800bd26:	b10a      	cbz	r2, 800bd2c <tcp_rexmit_rto+0x8>
{
 800bd28:	b508      	push	{r3, lr}
 800bd2a:	e001      	b.n	800bd30 <tcp_rexmit_rto+0xc>
 800bd2c:	4770      	bx	lr
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 800bd2e:	461a      	mov	r2, r3
 800bd30:	6813      	ldr	r3, [r2, #0]
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d1fb      	bne.n	800bd2e <tcp_rexmit_rto+0xa>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800bd36:	6e83      	ldr	r3, [r0, #104]	; 0x68
 800bd38:	6013      	str	r3, [r2, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800bd3a:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800bd3c:	6683      	str	r3, [r0, #104]	; 0x68
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800bd3e:	2300      	movs	r3, #0
 800bd40:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800bd42:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 800bd46:	2bff      	cmp	r3, #255	; 0xff
 800bd48:	d002      	beq.n	800bd50 <tcp_rexmit_rto+0x2c>
    ++pcb->nrtx;
 800bd4a:	3301      	adds	r3, #1
 800bd4c:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800bd50:	2300      	movs	r3, #0
 800bd52:	6343      	str	r3, [r0, #52]	; 0x34

  /* Do the actual retransmission */
  tcp_output(pcb);
 800bd54:	f7ff fe34 	bl	800b9c0 <tcp_output>
 800bd58:	bd08      	pop	{r3, pc}

0800bd5a <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 800bd5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 800bd5c:	6ec6      	ldr	r6, [r0, #108]	; 0x6c
 800bd5e:	b316      	cbz	r6, 800bda6 <tcp_rexmit+0x4c>
 800bd60:	4607      	mov	r7, r0
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
  pcb->unacked = seg->next;
 800bd62:	6833      	ldr	r3, [r6, #0]
 800bd64:	66c3      	str	r3, [r0, #108]	; 0x6c

  cur_seg = &(pcb->unsent);
 800bd66:	f100 0568 	add.w	r5, r0, #104	; 0x68
  while (*cur_seg &&
 800bd6a:	e000      	b.n	800bd6e <tcp_rexmit+0x14>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
 800bd6c:	682d      	ldr	r5, [r5, #0]
  while (*cur_seg &&
 800bd6e:	682b      	ldr	r3, [r5, #0]
 800bd70:	b15b      	cbz	r3, 800bd8a <tcp_rexmit+0x30>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800bd72:	68db      	ldr	r3, [r3, #12]
 800bd74:	6858      	ldr	r0, [r3, #4]
 800bd76:	f7fa f990 	bl	800609a <lwip_htonl>
 800bd7a:	4604      	mov	r4, r0
 800bd7c:	68f3      	ldr	r3, [r6, #12]
 800bd7e:	6858      	ldr	r0, [r3, #4]
 800bd80:	f7fa f98b 	bl	800609a <lwip_htonl>
 800bd84:	1a20      	subs	r0, r4, r0
  while (*cur_seg &&
 800bd86:	2800      	cmp	r0, #0
 800bd88:	dbf0      	blt.n	800bd6c <tcp_rexmit+0x12>
  }
  seg->next = *cur_seg;
 800bd8a:	682b      	ldr	r3, [r5, #0]
 800bd8c:	6033      	str	r3, [r6, #0]
  *cur_seg = seg;
 800bd8e:	602e      	str	r6, [r5, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800bd90:	6833      	ldr	r3, [r6, #0]
 800bd92:	b14b      	cbz	r3, 800bda8 <tcp_rexmit+0x4e>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800bd94:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800bd98:	2bff      	cmp	r3, #255	; 0xff
 800bd9a:	d002      	beq.n	800bda2 <tcp_rexmit+0x48>
    ++pcb->nrtx;
 800bd9c:	3301      	adds	r3, #1
 800bd9e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800bda2:	2300      	movs	r3, #0
 800bda4:	637b      	str	r3, [r7, #52]	; 0x34
 800bda6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    pcb->unsent_oversize = 0;
 800bda8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800bdac:	e7f2      	b.n	800bd94 <tcp_rexmit+0x3a>

0800bdae <tcp_rexmit_fast>:
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800bdae:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800bdb0:	b11b      	cbz	r3, 800bdba <tcp_rexmit_fast+0xc>
 800bdb2:	7e83      	ldrb	r3, [r0, #26]
 800bdb4:	f013 0f04 	tst.w	r3, #4
 800bdb8:	d000      	beq.n	800bdbc <tcp_rexmit_fast+0xe>
 800bdba:	4770      	bx	lr
{
 800bdbc:	b510      	push	{r4, lr}
 800bdbe:	4604      	mov	r4, r0
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 800bdc0:	f7ff ffcb 	bl	800bd5a <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800bdc4:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 800bdc8:	f8b4 205c 	ldrh.w	r2, [r4, #92]	; 0x5c
 800bdcc:	4293      	cmp	r3, r2
 800bdce:	d218      	bcs.n	800be02 <tcp_rexmit_fast+0x54>
 800bdd0:	085a      	lsrs	r2, r3, #1
 800bdd2:	f8a4 204a 	strh.w	r2, [r4, #74]	; 0x4a

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 800bdd6:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800bdd8:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 800bddc:	d202      	bcs.n	800bde4 <tcp_rexmit_fast+0x36>
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
 800bdde:	005a      	lsls	r2, r3, #1
 800bde0:	f8a4 204a 	strh.w	r2, [r4, #74]	; 0x4a
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800bde4:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
 800bde8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800bdec:	fa12 f383 	uxtah	r3, r2, r3
 800bdf0:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
    pcb->flags |= TF_INFR;
 800bdf4:	7ea3      	ldrb	r3, [r4, #26]
 800bdf6:	f043 0304 	orr.w	r3, r3, #4
 800bdfa:	76a3      	strb	r3, [r4, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 800bdfc:	2300      	movs	r3, #0
 800bdfe:	8623      	strh	r3, [r4, #48]	; 0x30
 800be00:	bd10      	pop	{r4, pc}
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800be02:	0852      	lsrs	r2, r2, #1
 800be04:	e7e5      	b.n	800bdd2 <tcp_rexmit_fast+0x24>

0800be06 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800be06:	b570      	push	{r4, r5, r6, lr}
 800be08:	b084      	sub	sp, #16
 800be0a:	4604      	mov	r4, r0
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 800be0c:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 800be0e:	3801      	subs	r0, #1
 800be10:	f7fa f943 	bl	800609a <lwip_htonl>
 800be14:	4603      	mov	r3, r0
 800be16:	2200      	movs	r2, #0
 800be18:	4611      	mov	r1, r2
 800be1a:	4620      	mov	r0, r4
 800be1c:	f7ff f97a 	bl	800b114 <tcp_output_alloc_header>
  if (p == NULL) {
 800be20:	b1d0      	cbz	r0, 800be58 <tcp_keepalive+0x52>
 800be22:	4605      	mov	r5, r0
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800be24:	1d26      	adds	r6, r4, #4
 800be26:	4630      	mov	r0, r6
 800be28:	f7fa fede 	bl	8006be8 <ip4_route>
  if (netif == NULL) {
 800be2c:	b188      	cbz	r0, 800be52 <tcp_keepalive+0x4c>
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 800be2e:	7aa3      	ldrb	r3, [r4, #10]
 800be30:	9002      	str	r0, [sp, #8]
 800be32:	2206      	movs	r2, #6
 800be34:	9201      	str	r2, [sp, #4]
 800be36:	2200      	movs	r2, #0
 800be38:	9200      	str	r2, [sp, #0]
 800be3a:	4632      	mov	r2, r6
 800be3c:	4621      	mov	r1, r4
 800be3e:	4628      	mov	r0, r5
 800be40:	f7fb f878 	bl	8006f34 <ip4_output_if>
 800be44:	4604      	mov	r4, r0
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 800be46:	4628      	mov	r0, r5
 800be48:	f7fc f940 	bl	80080cc <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 800be4c:	4620      	mov	r0, r4
 800be4e:	b004      	add	sp, #16
 800be50:	bd70      	pop	{r4, r5, r6, pc}
    err = ERR_RTE;
 800be52:	f06f 0403 	mvn.w	r4, #3
 800be56:	e7f6      	b.n	800be46 <tcp_keepalive+0x40>
    return ERR_MEM;
 800be58:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800be5c:	e7f6      	b.n	800be4c <tcp_keepalive+0x46>

0800be5e <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800be5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be62:	b084      	sub	sp, #16
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 800be64:	6ec5      	ldr	r5, [r0, #108]	; 0x6c

  if (seg == NULL) {
 800be66:	b175      	cbz	r5, 800be86 <tcp_zero_window_probe+0x28>
    seg = pcb->unsent;
  }
  if (seg == NULL) {
 800be68:	2d00      	cmp	r5, #0
 800be6a:	d05d      	beq.n	800bf28 <tcp_zero_window_probe+0xca>
 800be6c:	4604      	mov	r4, r0
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800be6e:	68eb      	ldr	r3, [r5, #12]
 800be70:	8998      	ldrh	r0, [r3, #12]
 800be72:	f7fa f90f 	bl	8006094 <lwip_htons>
 800be76:	f010 0f01 	tst.w	r0, #1
 800be7a:	d006      	beq.n	800be8a <tcp_zero_window_probe+0x2c>
 800be7c:	892b      	ldrh	r3, [r5, #8]
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d040      	beq.n	800bf04 <tcp_zero_window_probe+0xa6>
 800be82:	2200      	movs	r2, #0
 800be84:	e002      	b.n	800be8c <tcp_zero_window_probe+0x2e>
    seg = pcb->unsent;
 800be86:	6e85      	ldr	r5, [r0, #104]	; 0x68
 800be88:	e7ee      	b.n	800be68 <tcp_zero_window_probe+0xa>
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800be8a:	2200      	movs	r2, #0
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800be8c:	f002 06ff 	and.w	r6, r2, #255	; 0xff

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 800be90:	68eb      	ldr	r3, [r5, #12]
 800be92:	685b      	ldr	r3, [r3, #4]
 800be94:	f082 0201 	eor.w	r2, r2, #1
 800be98:	2100      	movs	r1, #0
 800be9a:	4620      	mov	r0, r4
 800be9c:	f7ff f93a 	bl	800b114 <tcp_output_alloc_header>
  if (p == NULL) {
 800bea0:	4607      	mov	r7, r0
 800bea2:	2800      	cmp	r0, #0
 800bea4:	d042      	beq.n	800bf2c <tcp_zero_window_probe+0xce>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800bea6:	f8d0 8004 	ldr.w	r8, [r0, #4]

  if (is_fin) {
 800beaa:	b36e      	cbz	r6, 800bf08 <tcp_zero_window_probe+0xaa>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800beac:	f8b8 600c 	ldrh.w	r6, [r8, #12]
 800beb0:	f426 567c 	bic.w	r6, r6, #16128	; 0x3f00
 800beb4:	b2b6      	uxth	r6, r6
 800beb6:	2011      	movs	r0, #17
 800beb8:	f7fa f8ec 	bl	8006094 <lwip_htons>
 800bebc:	4330      	orrs	r0, r6
 800bebe:	f8a8 000c 	strh.w	r0, [r8, #12]
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800bec2:	68eb      	ldr	r3, [r5, #12]
 800bec4:	6858      	ldr	r0, [r3, #4]
 800bec6:	f7fa f8e8 	bl	800609a <lwip_htonl>
 800beca:	3001      	adds	r0, #1
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800becc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800bece:	1a1b      	subs	r3, r3, r0
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	db24      	blt.n	800bf1e <tcp_zero_window_probe+0xc0>
    pcb->snd_nxt = snd_nxt;
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800bed4:	1d25      	adds	r5, r4, #4
 800bed6:	4628      	mov	r0, r5
 800bed8:	f7fa fe86 	bl	8006be8 <ip4_route>
  if (netif == NULL) {
 800bedc:	b308      	cbz	r0, 800bf22 <tcp_zero_window_probe+0xc4>
#endif
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800bede:	7aa3      	ldrb	r3, [r4, #10]
 800bee0:	9002      	str	r0, [sp, #8]
 800bee2:	2206      	movs	r2, #6
 800bee4:	9201      	str	r2, [sp, #4]
 800bee6:	2200      	movs	r2, #0
 800bee8:	9200      	str	r2, [sp, #0]
 800beea:	462a      	mov	r2, r5
 800beec:	4621      	mov	r1, r4
 800beee:	4638      	mov	r0, r7
 800bef0:	f7fb f820 	bl	8006f34 <ip4_output_if>
 800bef4:	4604      	mov	r4, r0
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 800bef6:	4638      	mov	r0, r7
 800bef8:	f7fc f8e8 	bl	80080cc <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 800befc:	4620      	mov	r0, r4
 800befe:	b004      	add	sp, #16
 800bf00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800bf04:	2201      	movs	r2, #1
 800bf06:	e7c1      	b.n	800be8c <tcp_zero_window_probe+0x2e>
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800bf08:	6868      	ldr	r0, [r5, #4]
 800bf0a:	8903      	ldrh	r3, [r0, #8]
 800bf0c:	892a      	ldrh	r2, [r5, #8]
 800bf0e:	1a9b      	subs	r3, r3, r2
 800bf10:	b29b      	uxth	r3, r3
 800bf12:	2201      	movs	r2, #1
 800bf14:	f108 0114 	add.w	r1, r8, #20
 800bf18:	f7fc fba2 	bl	8008660 <pbuf_copy_partial>
 800bf1c:	e7d1      	b.n	800bec2 <tcp_zero_window_probe+0x64>
    pcb->snd_nxt = snd_nxt;
 800bf1e:	64e0      	str	r0, [r4, #76]	; 0x4c
 800bf20:	e7d8      	b.n	800bed4 <tcp_zero_window_probe+0x76>
    err = ERR_RTE;
 800bf22:	f06f 0403 	mvn.w	r4, #3
 800bf26:	e7e6      	b.n	800bef6 <tcp_zero_window_probe+0x98>
    return ERR_OK;
 800bf28:	2400      	movs	r4, #0
 800bf2a:	e7e7      	b.n	800befc <tcp_zero_window_probe+0x9e>
    return ERR_MEM;
 800bf2c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800bf30:	e7e4      	b.n	800befc <tcp_zero_window_probe+0x9e>
	...

0800bf34 <sys_timeouts_sleeptime>:
#if !NO_SYS
static
#endif /* !NO_SYS */
u32_t
sys_timeouts_sleeptime(void)
{
 800bf34:	b508      	push	{r3, lr}
  u32_t diff;
  if (next_timeout == NULL) {
 800bf36:	4b0a      	ldr	r3, [pc, #40]	; (800bf60 <sys_timeouts_sleeptime+0x2c>)
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	b15b      	cbz	r3, 800bf54 <sys_timeouts_sleeptime+0x20>
    return 0xffffffff;
  }
  diff = sys_now() - timeouts_last_time;
 800bf3c:	f000 ff34 	bl	800cda8 <sys_now>
 800bf40:	4b08      	ldr	r3, [pc, #32]	; (800bf64 <sys_timeouts_sleeptime+0x30>)
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	1ac0      	subs	r0, r0, r3
  if (diff > next_timeout->time) {
 800bf46:	4b06      	ldr	r3, [pc, #24]	; (800bf60 <sys_timeouts_sleeptime+0x2c>)
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	685b      	ldr	r3, [r3, #4]
 800bf4c:	4298      	cmp	r0, r3
 800bf4e:	d804      	bhi.n	800bf5a <sys_timeouts_sleeptime+0x26>
    return 0;
  } else {
    return next_timeout->time - diff;
 800bf50:	1a18      	subs	r0, r3, r0
 800bf52:	bd08      	pop	{r3, pc}
    return 0xffffffff;
 800bf54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bf58:	bd08      	pop	{r3, pc}
    return 0;
 800bf5a:	2000      	movs	r0, #0
  }
}
 800bf5c:	bd08      	pop	{r3, pc}
 800bf5e:	bf00      	nop
 800bf60:	20003fc4 	.word	0x20003fc4
 800bf64:	20003fcc 	.word	0x20003fcc

0800bf68 <sys_check_timeouts>:
{
 800bf68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (next_timeout) {
 800bf6a:	4b18      	ldr	r3, [pc, #96]	; (800bfcc <sys_check_timeouts+0x64>)
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	b363      	cbz	r3, 800bfca <sys_check_timeouts+0x62>
    now = sys_now();
 800bf70:	f000 ff1a 	bl	800cda8 <sys_now>
    diff = now - timeouts_last_time;
 800bf74:	4b16      	ldr	r3, [pc, #88]	; (800bfd0 <sys_check_timeouts+0x68>)
 800bf76:	681c      	ldr	r4, [r3, #0]
 800bf78:	1b04      	subs	r4, r0, r4
 800bf7a:	e005      	b.n	800bf88 <sys_check_timeouts+0x20>
      had_one = 0;
 800bf7c:	2300      	movs	r3, #0
 800bf7e:	e002      	b.n	800bf86 <sys_check_timeouts+0x1e>
 800bf80:	2300      	movs	r3, #0
 800bf82:	e000      	b.n	800bf86 <sys_check_timeouts+0x1e>
        had_one = 1;
 800bf84:	2301      	movs	r3, #1
    } while (had_one);
 800bf86:	b303      	cbz	r3, 800bfca <sys_check_timeouts+0x62>
      tmptimeout = next_timeout;
 800bf88:	4b10      	ldr	r3, [pc, #64]	; (800bfcc <sys_check_timeouts+0x64>)
 800bf8a:	6819      	ldr	r1, [r3, #0]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 800bf8c:	2900      	cmp	r1, #0
 800bf8e:	d0f5      	beq.n	800bf7c <sys_check_timeouts+0x14>
 800bf90:	684b      	ldr	r3, [r1, #4]
 800bf92:	429c      	cmp	r4, r3
 800bf94:	d3f4      	bcc.n	800bf80 <sys_check_timeouts+0x18>
        timeouts_last_time += tmptimeout->time;
 800bf96:	480e      	ldr	r0, [pc, #56]	; (800bfd0 <sys_check_timeouts+0x68>)
 800bf98:	6802      	ldr	r2, [r0, #0]
 800bf9a:	441a      	add	r2, r3
 800bf9c:	6002      	str	r2, [r0, #0]
        diff -= tmptimeout->time;
 800bf9e:	1ae4      	subs	r4, r4, r3
        next_timeout = tmptimeout->next;
 800bfa0:	680a      	ldr	r2, [r1, #0]
 800bfa2:	4b0a      	ldr	r3, [pc, #40]	; (800bfcc <sys_check_timeouts+0x64>)
 800bfa4:	601a      	str	r2, [r3, #0]
        handler = tmptimeout->h;
 800bfa6:	688d      	ldr	r5, [r1, #8]
        arg = tmptimeout->arg;
 800bfa8:	68cf      	ldr	r7, [r1, #12]
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800bfaa:	200a      	movs	r0, #10
 800bfac:	f7fb feb8 	bl	8007d20 <memp_free>
        if (handler != NULL) {
 800bfb0:	2d00      	cmp	r5, #0
 800bfb2:	d0e7      	beq.n	800bf84 <sys_check_timeouts+0x1c>
          LOCK_TCPIP_CORE();
 800bfb4:	4e07      	ldr	r6, [pc, #28]	; (800bfd4 <sys_check_timeouts+0x6c>)
 800bfb6:	4630      	mov	r0, r6
 800bfb8:	f000 fc8b 	bl	800c8d2 <sys_mutex_lock>
          handler(arg);
 800bfbc:	4638      	mov	r0, r7
 800bfbe:	47a8      	blx	r5
          UNLOCK_TCPIP_CORE();
 800bfc0:	4630      	mov	r0, r6
 800bfc2:	f000 fc8d 	bl	800c8e0 <sys_mutex_unlock>
        had_one = 1;
 800bfc6:	2301      	movs	r3, #1
 800bfc8:	e7dd      	b.n	800bf86 <sys_check_timeouts+0x1e>
 800bfca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bfcc:	20003fc4 	.word	0x20003fc4
 800bfd0:	20003fcc 	.word	0x20003fcc
 800bfd4:	20004270 	.word	0x20004270

0800bfd8 <sys_timeout>:
{
 800bfd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfdc:	4605      	mov	r5, r0
 800bfde:	4688      	mov	r8, r1
 800bfe0:	4617      	mov	r7, r2
  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800bfe2:	200a      	movs	r0, #10
 800bfe4:	f7fb fe82 	bl	8007cec <memp_malloc>
  if (timeout == NULL) {
 800bfe8:	b308      	cbz	r0, 800c02e <sys_timeout+0x56>
 800bfea:	4604      	mov	r4, r0
  now = sys_now();
 800bfec:	f000 fedc 	bl	800cda8 <sys_now>
  if (next_timeout == NULL) {
 800bff0:	4b23      	ldr	r3, [pc, #140]	; (800c080 <sys_timeout+0xa8>)
 800bff2:	681e      	ldr	r6, [r3, #0]
 800bff4:	b31e      	cbz	r6, 800c03e <sys_timeout+0x66>
    diff = now - timeouts_last_time;
 800bff6:	4b23      	ldr	r3, [pc, #140]	; (800c084 <sys_timeout+0xac>)
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	1ac0      	subs	r0, r0, r3
  timeout->next = NULL;
 800bffc:	2300      	movs	r3, #0
 800bffe:	6023      	str	r3, [r4, #0]
  timeout->h = handler;
 800c000:	f8c4 8008 	str.w	r8, [r4, #8]
  timeout->arg = arg;
 800c004:	60e7      	str	r7, [r4, #12]
  timeout->time = msecs + diff;
 800c006:	4428      	add	r0, r5
 800c008:	6060      	str	r0, [r4, #4]
  if (next_timeout == NULL) {
 800c00a:	b1e6      	cbz	r6, 800c046 <sys_timeout+0x6e>
  if (next_timeout->time > msecs) {
 800c00c:	6873      	ldr	r3, [r6, #4]
 800c00e:	429d      	cmp	r5, r3
 800c010:	d31d      	bcc.n	800c04e <sys_timeout+0x76>
 800c012:	4632      	mov	r2, r6
    for (t = next_timeout; t != NULL; t = t->next) {
 800c014:	2a00      	cmp	r2, #0
 800c016:	d030      	beq.n	800c07a <sys_timeout+0xa2>
      timeout->time -= t->time;
 800c018:	6851      	ldr	r1, [r2, #4]
 800c01a:	6863      	ldr	r3, [r4, #4]
 800c01c:	1a5b      	subs	r3, r3, r1
 800c01e:	6063      	str	r3, [r4, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 800c020:	6811      	ldr	r1, [r2, #0]
 800c022:	b1d9      	cbz	r1, 800c05c <sys_timeout+0x84>
 800c024:	6848      	ldr	r0, [r1, #4]
 800c026:	4283      	cmp	r3, r0
 800c028:	d318      	bcc.n	800c05c <sys_timeout+0x84>
    for (t = next_timeout; t != NULL; t = t->next) {
 800c02a:	460a      	mov	r2, r1
 800c02c:	e7f2      	b.n	800c014 <sys_timeout+0x3c>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800c02e:	4b16      	ldr	r3, [pc, #88]	; (800c088 <sys_timeout+0xb0>)
 800c030:	22d4      	movs	r2, #212	; 0xd4
 800c032:	4916      	ldr	r1, [pc, #88]	; (800c08c <sys_timeout+0xb4>)
 800c034:	4816      	ldr	r0, [pc, #88]	; (800c090 <sys_timeout+0xb8>)
 800c036:	f001 fae0 	bl	800d5fa <iprintf>
 800c03a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    timeouts_last_time = now;
 800c03e:	4b11      	ldr	r3, [pc, #68]	; (800c084 <sys_timeout+0xac>)
 800c040:	6018      	str	r0, [r3, #0]
    diff = 0;
 800c042:	2000      	movs	r0, #0
 800c044:	e7da      	b.n	800bffc <sys_timeout+0x24>
    next_timeout = timeout;
 800c046:	4b0e      	ldr	r3, [pc, #56]	; (800c080 <sys_timeout+0xa8>)
 800c048:	601c      	str	r4, [r3, #0]
    return;
 800c04a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    next_timeout->time -= msecs;
 800c04e:	1b5d      	subs	r5, r3, r5
 800c050:	6075      	str	r5, [r6, #4]
    timeout->next = next_timeout;
 800c052:	6026      	str	r6, [r4, #0]
    next_timeout = timeout;
 800c054:	4b0a      	ldr	r3, [pc, #40]	; (800c080 <sys_timeout+0xa8>)
 800c056:	601c      	str	r4, [r3, #0]
 800c058:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (t->next != NULL) {
 800c05c:	b139      	cbz	r1, 800c06e <sys_timeout+0x96>
          t->next->time -= timeout->time;
 800c05e:	6848      	ldr	r0, [r1, #4]
 800c060:	1ac3      	subs	r3, r0, r3
 800c062:	604b      	str	r3, [r1, #4]
        timeout->next = t->next;
 800c064:	6813      	ldr	r3, [r2, #0]
 800c066:	6023      	str	r3, [r4, #0]
        t->next = timeout;
 800c068:	6014      	str	r4, [r2, #0]
        break;
 800c06a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        } else if (timeout->time > msecs) {
 800c06e:	429d      	cmp	r5, r3
 800c070:	d2f8      	bcs.n	800c064 <sys_timeout+0x8c>
          timeout->time = msecs + next_timeout->time;
 800c072:	6873      	ldr	r3, [r6, #4]
 800c074:	441d      	add	r5, r3
 800c076:	6065      	str	r5, [r4, #4]
 800c078:	e7f4      	b.n	800c064 <sys_timeout+0x8c>
 800c07a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c07e:	bf00      	nop
 800c080:	20003fc4 	.word	0x20003fc4
 800c084:	20003fcc 	.word	0x20003fcc
 800c088:	0800fe1c 	.word	0x0800fe1c
 800c08c:	0800fe50 	.word	0x0800fe50
 800c090:	0800de34 	.word	0x0800de34

0800c094 <tcp_timer_needed>:
{
 800c094:	b508      	push	{r3, lr}
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800c096:	4b0a      	ldr	r3, [pc, #40]	; (800c0c0 <tcp_timer_needed+0x2c>)
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	b953      	cbnz	r3, 800c0b2 <tcp_timer_needed+0x1e>
 800c09c:	4b09      	ldr	r3, [pc, #36]	; (800c0c4 <tcp_timer_needed+0x30>)
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	b143      	cbz	r3, 800c0b4 <tcp_timer_needed+0x20>
    tcpip_tcp_timer_active = 1;
 800c0a2:	2201      	movs	r2, #1
 800c0a4:	4b06      	ldr	r3, [pc, #24]	; (800c0c0 <tcp_timer_needed+0x2c>)
 800c0a6:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800c0a8:	2200      	movs	r2, #0
 800c0aa:	4907      	ldr	r1, [pc, #28]	; (800c0c8 <tcp_timer_needed+0x34>)
 800c0ac:	20fa      	movs	r0, #250	; 0xfa
 800c0ae:	f7ff ff93 	bl	800bfd8 <sys_timeout>
 800c0b2:	bd08      	pop	{r3, pc}
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800c0b4:	4b05      	ldr	r3, [pc, #20]	; (800c0cc <tcp_timer_needed+0x38>)
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d1f2      	bne.n	800c0a2 <tcp_timer_needed+0xe>
 800c0bc:	e7f9      	b.n	800c0b2 <tcp_timer_needed+0x1e>
 800c0be:	bf00      	nop
 800c0c0:	20003fc8 	.word	0x20003fc8
 800c0c4:	20007984 	.word	0x20007984
 800c0c8:	0800c0d1 	.word	0x0800c0d1
 800c0cc:	20007994 	.word	0x20007994

0800c0d0 <tcpip_tcp_timer>:
{
 800c0d0:	b508      	push	{r3, lr}
  tcp_tmr();
 800c0d2:	f7fd f939 	bl	8009348 <tcp_tmr>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800c0d6:	4b08      	ldr	r3, [pc, #32]	; (800c0f8 <tcpip_tcp_timer+0x28>)
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	b12b      	cbz	r3, 800c0e8 <tcpip_tcp_timer+0x18>
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800c0dc:	2200      	movs	r2, #0
 800c0de:	4907      	ldr	r1, [pc, #28]	; (800c0fc <tcpip_tcp_timer+0x2c>)
 800c0e0:	20fa      	movs	r0, #250	; 0xfa
 800c0e2:	f7ff ff79 	bl	800bfd8 <sys_timeout>
 800c0e6:	bd08      	pop	{r3, pc}
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800c0e8:	4b05      	ldr	r3, [pc, #20]	; (800c100 <tcpip_tcp_timer+0x30>)
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d1f5      	bne.n	800c0dc <tcpip_tcp_timer+0xc>
    tcpip_tcp_timer_active = 0;
 800c0f0:	2200      	movs	r2, #0
 800c0f2:	4b04      	ldr	r3, [pc, #16]	; (800c104 <tcpip_tcp_timer+0x34>)
 800c0f4:	601a      	str	r2, [r3, #0]
 800c0f6:	bd08      	pop	{r3, pc}
 800c0f8:	20007984 	.word	0x20007984
 800c0fc:	0800c0d1 	.word	0x0800c0d1
 800c100:	20007994 	.word	0x20007994
 800c104:	20003fc8 	.word	0x20003fc8

0800c108 <sys_timeouts_init>:
{
 800c108:	b510      	push	{r4, lr}
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800c10a:	2401      	movs	r4, #1
 800c10c:	e008      	b.n	800c120 <sys_timeouts_init+0x18>
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 800c10e:	4b08      	ldr	r3, [pc, #32]	; (800c130 <sys_timeouts_init+0x28>)
 800c110:	eb03 02c4 	add.w	r2, r3, r4, lsl #3
 800c114:	4907      	ldr	r1, [pc, #28]	; (800c134 <sys_timeouts_init+0x2c>)
 800c116:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
 800c11a:	f7ff ff5d 	bl	800bfd8 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800c11e:	3401      	adds	r4, #1
 800c120:	2c02      	cmp	r4, #2
 800c122:	d9f4      	bls.n	800c10e <sys_timeouts_init+0x6>
  timeouts_last_time = sys_now();
 800c124:	f000 fe40 	bl	800cda8 <sys_now>
 800c128:	4b03      	ldr	r3, [pc, #12]	; (800c138 <sys_timeouts_init+0x30>)
 800c12a:	6018      	str	r0, [r3, #0]
 800c12c:	bd10      	pop	{r4, pc}
 800c12e:	bf00      	nop
 800c130:	0800fe04 	.word	0x0800fe04
 800c134:	0800c13d 	.word	0x0800c13d
 800c138:	20003fcc 	.word	0x20003fcc

0800c13c <cyclic_timer>:
{
 800c13c:	b510      	push	{r4, lr}
 800c13e:	4604      	mov	r4, r0
  cyclic->handler();
 800c140:	6843      	ldr	r3, [r0, #4]
 800c142:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 800c144:	4622      	mov	r2, r4
 800c146:	4902      	ldr	r1, [pc, #8]	; (800c150 <cyclic_timer+0x14>)
 800c148:	6820      	ldr	r0, [r4, #0]
 800c14a:	f7ff ff45 	bl	800bfd8 <sys_timeout>
 800c14e:	bd10      	pop	{r4, pc}
 800c150:	0800c13d 	.word	0x0800c13d

0800c154 <sys_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
void
sys_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800c154:	b538      	push	{r3, r4, r5, lr}
 800c156:	4604      	mov	r4, r0
 800c158:	460d      	mov	r5, r1
 800c15a:	e007      	b.n	800c16c <sys_timeouts_mbox_fetch+0x18>
  u32_t sleeptime;

again:
  if (!next_timeout) {
    sys_arch_mbox_fetch(mbox, msg, 0);
 800c15c:	2200      	movs	r2, #0
 800c15e:	4629      	mov	r1, r5
 800c160:	4620      	mov	r0, r4
 800c162:	f000 fb06 	bl	800c772 <sys_arch_mbox_fetch>
    return;
 800c166:	bd38      	pop	{r3, r4, r5, pc}

  sleeptime = sys_timeouts_sleeptime();
  if (sleeptime == 0 || sys_arch_mbox_fetch(mbox, msg, sleeptime) == SYS_ARCH_TIMEOUT) {
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800c168:	f7ff fefe 	bl	800bf68 <sys_check_timeouts>
  if (!next_timeout) {
 800c16c:	4b08      	ldr	r3, [pc, #32]	; (800c190 <sys_timeouts_mbox_fetch+0x3c>)
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	2b00      	cmp	r3, #0
 800c172:	d0f3      	beq.n	800c15c <sys_timeouts_mbox_fetch+0x8>
  sleeptime = sys_timeouts_sleeptime();
 800c174:	f7ff fede 	bl	800bf34 <sys_timeouts_sleeptime>
  if (sleeptime == 0 || sys_arch_mbox_fetch(mbox, msg, sleeptime) == SYS_ARCH_TIMEOUT) {
 800c178:	4602      	mov	r2, r0
 800c17a:	2800      	cmp	r0, #0
 800c17c:	d0f4      	beq.n	800c168 <sys_timeouts_mbox_fetch+0x14>
 800c17e:	4629      	mov	r1, r5
 800c180:	4620      	mov	r0, r4
 800c182:	f000 faf6 	bl	800c772 <sys_arch_mbox_fetch>
 800c186:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800c18a:	d0ed      	beq.n	800c168 <sys_timeouts_mbox_fetch+0x14>
 800c18c:	bd38      	pop	{r3, r4, r5, pc}
 800c18e:	bf00      	nop
 800c190:	20003fc4 	.word	0x20003fc4

0800c194 <udp_new_port>:
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
  u16_t n = 0;
 800c194:	2000      	movs	r0, #0
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800c196:	4a10      	ldr	r2, [pc, #64]	; (800c1d8 <udp_new_port+0x44>)
 800c198:	8813      	ldrh	r3, [r2, #0]
 800c19a:	1c59      	adds	r1, r3, #1
 800c19c:	8011      	strh	r1, [r2, #0]
 800c19e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c1a2:	4293      	cmp	r3, r2
 800c1a4:	d009      	beq.n	800c1ba <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c1a6:	4b0d      	ldr	r3, [pc, #52]	; (800c1dc <udp_new_port+0x48>)
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	b193      	cbz	r3, 800c1d2 <udp_new_port+0x3e>
    if (pcb->local_port == udp_port) {
 800c1ac:	8a59      	ldrh	r1, [r3, #18]
 800c1ae:	4a0a      	ldr	r2, [pc, #40]	; (800c1d8 <udp_new_port+0x44>)
 800c1b0:	8812      	ldrh	r2, [r2, #0]
 800c1b2:	4291      	cmp	r1, r2
 800c1b4:	d006      	beq.n	800c1c4 <udp_new_port+0x30>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c1b6:	68db      	ldr	r3, [r3, #12]
 800c1b8:	e7f7      	b.n	800c1aa <udp_new_port+0x16>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800c1ba:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800c1be:	4b06      	ldr	r3, [pc, #24]	; (800c1d8 <udp_new_port+0x44>)
 800c1c0:	801a      	strh	r2, [r3, #0]
 800c1c2:	e7f0      	b.n	800c1a6 <udp_new_port+0x12>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800c1c4:	3001      	adds	r0, #1
 800c1c6:	b280      	uxth	r0, r0
 800c1c8:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 800c1cc:	d3e3      	bcc.n	800c196 <udp_new_port+0x2>
        return 0;
 800c1ce:	2000      	movs	r0, #0
      }
      goto again;
    }
  }
  return udp_port;
}
 800c1d0:	4770      	bx	lr
  return udp_port;
 800c1d2:	4b01      	ldr	r3, [pc, #4]	; (800c1d8 <udp_new_port+0x44>)
 800c1d4:	8818      	ldrh	r0, [r3, #0]
 800c1d6:	4770      	bx	lr
 800c1d8:	2000000e 	.word	0x2000000e
 800c1dc:	2000799c 	.word	0x2000799c

0800c1e0 <udp_input_local_match>:
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800c1e0:	b16a      	cbz	r2, 800c1fe <udp_input_local_match+0x1e>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c1e2:	b1a8      	cbz	r0, 800c210 <udp_input_local_match+0x30>
 800c1e4:	6803      	ldr	r3, [r0, #0]
 800c1e6:	b1ab      	cbz	r3, 800c214 <udp_input_local_match+0x34>
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800c1e8:	4a10      	ldr	r2, [pc, #64]	; (800c22c <udp_input_local_match+0x4c>)
 800c1ea:	6952      	ldr	r2, [r2, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c1ec:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800c1f0:	d012      	beq.n	800c218 <udp_input_local_match+0x38>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800c1f2:	6889      	ldr	r1, [r1, #8]
 800c1f4:	4053      	eors	r3, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800c1f6:	420b      	tst	r3, r1
 800c1f8:	d010      	beq.n	800c21c <udp_input_local_match+0x3c>
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
      return 1;
    }
  }

  return 0;
 800c1fa:	2000      	movs	r0, #0
 800c1fc:	4770      	bx	lr
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800c1fe:	b178      	cbz	r0, 800c220 <udp_input_local_match+0x40>
 800c200:	6803      	ldr	r3, [r0, #0]
 800c202:	b17b      	cbz	r3, 800c224 <udp_input_local_match+0x44>
 800c204:	4a09      	ldr	r2, [pc, #36]	; (800c22c <udp_input_local_match+0x4c>)
 800c206:	6952      	ldr	r2, [r2, #20]
 800c208:	4293      	cmp	r3, r2
 800c20a:	d00d      	beq.n	800c228 <udp_input_local_match+0x48>
  return 0;
 800c20c:	2000      	movs	r0, #0
 800c20e:	4770      	bx	lr
          return 1;
 800c210:	2001      	movs	r0, #1
 800c212:	4770      	bx	lr
 800c214:	2001      	movs	r0, #1
 800c216:	4770      	bx	lr
 800c218:	2001      	movs	r0, #1
 800c21a:	4770      	bx	lr
 800c21c:	2001      	movs	r0, #1
 800c21e:	4770      	bx	lr
      return 1;
 800c220:	2001      	movs	r0, #1
 800c222:	4770      	bx	lr
 800c224:	2001      	movs	r0, #1
 800c226:	4770      	bx	lr
 800c228:	2001      	movs	r0, #1
}
 800c22a:	4770      	bx	lr
 800c22c:	20004274 	.word	0x20004274

0800c230 <udp_init>:
{
 800c230:	4770      	bx	lr
	...

0800c234 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800c234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c238:	b085      	sub	sp, #20
 800c23a:	4681      	mov	r9, r0
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800c23c:	8943      	ldrh	r3, [r0, #10]
 800c23e:	2b07      	cmp	r3, #7
 800c240:	d917      	bls.n	800c272 <udp_input+0x3e>
 800c242:	460f      	mov	r7, r1
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
    goto end;
  }

  udphdr = (struct udp_hdr *)p->payload;
 800c244:	6844      	ldr	r4, [r0, #4]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800c246:	4b46      	ldr	r3, [pc, #280]	; (800c360 <udp_input+0x12c>)
 800c248:	6819      	ldr	r1, [r3, #0]
 800c24a:	6958      	ldr	r0, [r3, #20]
 800c24c:	f7fa fe87 	bl	8006f5e <ip4_addr_isbroadcast_u32>
 800c250:	4680      	mov	r8, r0

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800c252:	8820      	ldrh	r0, [r4, #0]
 800c254:	f7f9 ff1e 	bl	8006094 <lwip_htons>
 800c258:	4682      	mov	sl, r0
  dest = lwip_ntohs(udphdr->dest);
 800c25a:	8860      	ldrh	r0, [r4, #2]
 800c25c:	f7f9 ff1a 	bl	8006094 <lwip_htons>
 800c260:	4606      	mov	r6, r0
  uncon_pcb = NULL;
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c262:	4b40      	ldr	r3, [pc, #256]	; (800c364 <udp_input+0x130>)
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	9303      	str	r3, [sp, #12]
 800c268:	461c      	mov	r4, r3
  uncon_pcb = NULL;
 800c26a:	f04f 0b00 	mov.w	fp, #0
  prev = NULL;
 800c26e:	465d      	mov	r5, fp
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c270:	e009      	b.n	800c286 <udp_input+0x52>
    pbuf_free(p);
 800c272:	f7fb ff2b 	bl	80080cc <pbuf_free>
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800c276:	b005      	add	sp, #20
 800c278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if ((pcb->remote_port == src) &&
 800c27c:	8aa3      	ldrh	r3, [r4, #20]
 800c27e:	459a      	cmp	sl, r3
 800c280:	d015      	beq.n	800c2ae <udp_input+0x7a>
    prev = pcb;
 800c282:	4625      	mov	r5, r4
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c284:	68e4      	ldr	r4, [r4, #12]
 800c286:	b1fc      	cbz	r4, 800c2c8 <udp_input+0x94>
    if ((pcb->local_port == dest) &&
 800c288:	8a63      	ldrh	r3, [r4, #18]
 800c28a:	429e      	cmp	r6, r3
 800c28c:	d1f9      	bne.n	800c282 <udp_input+0x4e>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800c28e:	4642      	mov	r2, r8
 800c290:	4639      	mov	r1, r7
 800c292:	4620      	mov	r0, r4
 800c294:	f7ff ffa4 	bl	800c1e0 <udp_input_local_match>
    if ((pcb->local_port == dest) &&
 800c298:	2800      	cmp	r0, #0
 800c29a:	d0f2      	beq.n	800c282 <udp_input+0x4e>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 800c29c:	7c23      	ldrb	r3, [r4, #16]
 800c29e:	f013 0f04 	tst.w	r3, #4
 800c2a2:	d1eb      	bne.n	800c27c <udp_input+0x48>
 800c2a4:	f1bb 0f00 	cmp.w	fp, #0
 800c2a8:	d1e8      	bne.n	800c27c <udp_input+0x48>
        uncon_pcb = pcb;
 800c2aa:	46a3      	mov	fp, r4
 800c2ac:	e7e6      	b.n	800c27c <udp_input+0x48>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800c2ae:	6863      	ldr	r3, [r4, #4]
      if ((pcb->remote_port == src) &&
 800c2b0:	b11b      	cbz	r3, 800c2ba <udp_input+0x86>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800c2b2:	4a2b      	ldr	r2, [pc, #172]	; (800c360 <udp_input+0x12c>)
 800c2b4:	6912      	ldr	r2, [r2, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800c2b6:	4293      	cmp	r3, r2
 800c2b8:	d1e3      	bne.n	800c282 <udp_input+0x4e>
        if (prev != NULL) {
 800c2ba:	b12d      	cbz	r5, 800c2c8 <udp_input+0x94>
          prev->next = pcb->next;
 800c2bc:	68e3      	ldr	r3, [r4, #12]
 800c2be:	60eb      	str	r3, [r5, #12]
          pcb->next = udp_pcbs;
 800c2c0:	9b03      	ldr	r3, [sp, #12]
 800c2c2:	60e3      	str	r3, [r4, #12]
          udp_pcbs = pcb;
 800c2c4:	4b27      	ldr	r3, [pc, #156]	; (800c364 <udp_input+0x130>)
 800c2c6:	601c      	str	r4, [r3, #0]
  if (pcb == NULL) {
 800c2c8:	b1a4      	cbz	r4, 800c2f4 <udp_input+0xc0>
  if (pcb != NULL) {
 800c2ca:	b1ac      	cbz	r4, 800c2f8 <udp_input+0xc4>
    for_us = 1;
 800c2cc:	2301      	movs	r3, #1
  if (for_us) {
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d041      	beq.n	800c356 <udp_input+0x122>
    if (pbuf_header(p, -UDP_HLEN)) {
 800c2d2:	f06f 0107 	mvn.w	r1, #7
 800c2d6:	4648      	mov	r0, r9
 800c2d8:	f7fb feee 	bl	80080b8 <pbuf_header>
 800c2dc:	b9a0      	cbnz	r0, 800c308 <udp_input+0xd4>
    if (pcb != NULL) {
 800c2de:	b314      	cbz	r4, 800c326 <udp_input+0xf2>
      if (pcb->recv != NULL) {
 800c2e0:	69a5      	ldr	r5, [r4, #24]
 800c2e2:	b1e5      	cbz	r5, 800c31e <udp_input+0xea>
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800c2e4:	69e0      	ldr	r0, [r4, #28]
 800c2e6:	f8cd a000 	str.w	sl, [sp]
 800c2ea:	4b1f      	ldr	r3, [pc, #124]	; (800c368 <udp_input+0x134>)
 800c2ec:	464a      	mov	r2, r9
 800c2ee:	4621      	mov	r1, r4
 800c2f0:	47a8      	blx	r5
 800c2f2:	e7c0      	b.n	800c276 <udp_input+0x42>
    pcb = uncon_pcb;
 800c2f4:	465c      	mov	r4, fp
 800c2f6:	e7e8      	b.n	800c2ca <udp_input+0x96>
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	4a19      	ldr	r2, [pc, #100]	; (800c360 <udp_input+0x12c>)
 800c2fc:	6952      	ldr	r2, [r2, #20]
 800c2fe:	4293      	cmp	r3, r2
 800c300:	bf14      	ite	ne
 800c302:	2300      	movne	r3, #0
 800c304:	2301      	moveq	r3, #1
 800c306:	e7e2      	b.n	800c2ce <udp_input+0x9a>
      LWIP_ASSERT("pbuf_header failed\n", 0);
 800c308:	4b18      	ldr	r3, [pc, #96]	; (800c36c <udp_input+0x138>)
 800c30a:	f240 1255 	movw	r2, #341	; 0x155
 800c30e:	4918      	ldr	r1, [pc, #96]	; (800c370 <udp_input+0x13c>)
 800c310:	4818      	ldr	r0, [pc, #96]	; (800c374 <udp_input+0x140>)
 800c312:	f001 f972 	bl	800d5fa <iprintf>
      pbuf_free(p);
 800c316:	4648      	mov	r0, r9
 800c318:	f7fb fed8 	bl	80080cc <pbuf_free>
      goto end;
 800c31c:	e7ab      	b.n	800c276 <udp_input+0x42>
        pbuf_free(p);
 800c31e:	4648      	mov	r0, r9
 800c320:	f7fb fed4 	bl	80080cc <pbuf_free>
        goto end;
 800c324:	e7a7      	b.n	800c276 <udp_input+0x42>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800c326:	f1b8 0f00 	cmp.w	r8, #0
 800c32a:	d110      	bne.n	800c34e <udp_input+0x11a>
 800c32c:	4b0c      	ldr	r3, [pc, #48]	; (800c360 <udp_input+0x12c>)
 800c32e:	695b      	ldr	r3, [r3, #20]
 800c330:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c334:	2be0      	cmp	r3, #224	; 0xe0
 800c336:	d00a      	beq.n	800c34e <udp_input+0x11a>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800c338:	4b09      	ldr	r3, [pc, #36]	; (800c360 <udp_input+0x12c>)
 800c33a:	8999      	ldrh	r1, [r3, #12]
 800c33c:	3108      	adds	r1, #8
 800c33e:	b209      	sxth	r1, r1
 800c340:	4648      	mov	r0, r9
 800c342:	f7fb febe 	bl	80080c2 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800c346:	2103      	movs	r1, #3
 800c348:	4648      	mov	r0, r9
 800c34a:	f7fa fc41 	bl	8006bd0 <icmp_dest_unreach>
      pbuf_free(p);
 800c34e:	4648      	mov	r0, r9
 800c350:	f7fb febc 	bl	80080cc <pbuf_free>
 800c354:	e78f      	b.n	800c276 <udp_input+0x42>
    pbuf_free(p);
 800c356:	4648      	mov	r0, r9
 800c358:	f7fb feb8 	bl	80080cc <pbuf_free>
  return;
 800c35c:	e78b      	b.n	800c276 <udp_input+0x42>
 800c35e:	bf00      	nop
 800c360:	20004274 	.word	0x20004274
 800c364:	2000799c 	.word	0x2000799c
 800c368:	20004284 	.word	0x20004284
 800c36c:	0800fe90 	.word	0x0800fe90
 800c370:	0800fec0 	.word	0x0800fec0
 800c374:	0800de34 	.word	0x0800de34

0800c378 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800c378:	b570      	push	{r4, r5, r6, lr}
 800c37a:	4604      	mov	r4, r0
  struct udp_pcb *ipcb;
  u8_t rebind;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800c37c:	460d      	mov	r5, r1
 800c37e:	b159      	cbz	r1, 800c398 <udp_bind+0x20>
    ipaddr = IP4_ADDR_ANY;
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 800c380:	2c00      	cmp	r4, #0
 800c382:	d02c      	beq.n	800c3de <udp_bind+0x66>
 800c384:	2d00      	cmp	r5, #0
 800c386:	d02d      	beq.n	800c3e4 <udp_bind+0x6c>
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c388:	4b1a      	ldr	r3, [pc, #104]	; (800c3f4 <udp_bind+0x7c>)
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	4619      	mov	r1, r3
 800c38e:	b129      	cbz	r1, 800c39c <udp_bind+0x24>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800c390:	42a1      	cmp	r1, r4
 800c392:	d013      	beq.n	800c3bc <udp_bind+0x44>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c394:	68c9      	ldr	r1, [r1, #12]
 800c396:	e7fa      	b.n	800c38e <udp_bind+0x16>
    ipaddr = IP4_ADDR_ANY;
 800c398:	4d17      	ldr	r5, [pc, #92]	; (800c3f8 <udp_bind+0x80>)
 800c39a:	e7f1      	b.n	800c380 <udp_bind+0x8>
  rebind = 0;
 800c39c:	2600      	movs	r6, #0
      break;
    }
  }

  /* no port specified? */
  if (port == 0) {
 800c39e:	b982      	cbnz	r2, 800c3c2 <udp_bind+0x4a>
    port = udp_new_port();
 800c3a0:	f7ff fef8 	bl	800c194 <udp_new_port>
    if (port == 0) {
 800c3a4:	4602      	mov	r2, r0
 800c3a6:	b300      	cbz	r0, 800c3ea <udp_bind+0x72>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800c3a8:	682b      	ldr	r3, [r5, #0]
 800c3aa:	6023      	str	r3, [r4, #0]

  pcb->local_port = port;
 800c3ac:	8262      	strh	r2, [r4, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800c3ae:	b9fe      	cbnz	r6, 800c3f0 <udp_bind+0x78>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800c3b0:	4b10      	ldr	r3, [pc, #64]	; (800c3f4 <udp_bind+0x7c>)
 800c3b2:	681a      	ldr	r2, [r3, #0]
 800c3b4:	60e2      	str	r2, [r4, #12]
    udp_pcbs = pcb;
 800c3b6:	601c      	str	r4, [r3, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, &pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800c3b8:	2000      	movs	r0, #0
 800c3ba:	bd70      	pop	{r4, r5, r6, pc}
      rebind = 1;
 800c3bc:	2601      	movs	r6, #1
 800c3be:	e7ee      	b.n	800c39e <udp_bind+0x26>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c3c0:	68db      	ldr	r3, [r3, #12]
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d0f0      	beq.n	800c3a8 <udp_bind+0x30>
      if (pcb != ipcb) {
 800c3c6:	42a3      	cmp	r3, r4
 800c3c8:	d0fa      	beq.n	800c3c0 <udp_bind+0x48>
          if ((ipcb->local_port == port) &&
 800c3ca:	8a59      	ldrh	r1, [r3, #18]
 800c3cc:	428a      	cmp	r2, r1
 800c3ce:	d1f7      	bne.n	800c3c0 <udp_bind+0x48>
              ip_addr_cmp(&ipcb->local_ip, ipaddr)) {
 800c3d0:	6818      	ldr	r0, [r3, #0]
 800c3d2:	6829      	ldr	r1, [r5, #0]
          if ((ipcb->local_port == port) &&
 800c3d4:	4288      	cmp	r0, r1
 800c3d6:	d1f3      	bne.n	800c3c0 <udp_bind+0x48>
            return ERR_USE;
 800c3d8:	f06f 0007 	mvn.w	r0, #7
 800c3dc:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_VAL;
 800c3de:	f06f 0005 	mvn.w	r0, #5
 800c3e2:	bd70      	pop	{r4, r5, r6, pc}
 800c3e4:	f06f 0005 	mvn.w	r0, #5
 800c3e8:	bd70      	pop	{r4, r5, r6, pc}
      return ERR_USE;
 800c3ea:	f06f 0007 	mvn.w	r0, #7
 800c3ee:	bd70      	pop	{r4, r5, r6, pc}
  return ERR_OK;
 800c3f0:	2000      	movs	r0, #0
}
 800c3f2:	bd70      	pop	{r4, r5, r6, pc}
 800c3f4:	2000799c 	.word	0x2000799c
 800c3f8:	0800e99c 	.word	0x0800e99c

0800c3fc <udp_sendto_if_src>:
{
 800c3fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c400:	b085      	sub	sp, #20
  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, src_ip) ||
 800c402:	2800      	cmp	r0, #0
 800c404:	d051      	beq.n	800c4aa <udp_sendto_if_src+0xae>
 800c406:	4604      	mov	r4, r0
 800c408:	2a00      	cmp	r2, #0
 800c40a:	d051      	beq.n	800c4b0 <udp_sendto_if_src+0xb4>
 800c40c:	4699      	mov	r9, r3
 800c40e:	4690      	mov	r8, r2
 800c410:	460e      	mov	r6, r1
  if (pcb->local_port == 0) {
 800c412:	8a42      	ldrh	r2, [r0, #18]
 800c414:	b922      	cbnz	r2, 800c420 <udp_sendto_if_src+0x24>
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800c416:	4601      	mov	r1, r0
 800c418:	f7ff ffae 	bl	800c378 <udp_bind>
    if (err != ERR_OK) {
 800c41c:	4607      	mov	r7, r0
 800c41e:	bb50      	cbnz	r0, 800c476 <udp_sendto_if_src+0x7a>
  if (pbuf_header(p, UDP_HLEN)) {
 800c420:	2108      	movs	r1, #8
 800c422:	4630      	mov	r0, r6
 800c424:	f7fb fe48 	bl	80080b8 <pbuf_header>
 800c428:	bb48      	cbnz	r0, 800c47e <udp_sendto_if_src+0x82>
    q = p;
 800c42a:	4635      	mov	r5, r6
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800c42c:	896b      	ldrh	r3, [r5, #10]
 800c42e:	2b07      	cmp	r3, #7
 800c430:	d933      	bls.n	800c49a <udp_sendto_if_src+0x9e>
  udphdr = (struct udp_hdr *)q->payload;
 800c432:	686f      	ldr	r7, [r5, #4]
  udphdr->src = lwip_htons(pcb->local_port);
 800c434:	8a60      	ldrh	r0, [r4, #18]
 800c436:	f7f9 fe2d 	bl	8006094 <lwip_htons>
 800c43a:	8038      	strh	r0, [r7, #0]
  udphdr->dest = lwip_htons(dst_port);
 800c43c:	4648      	mov	r0, r9
 800c43e:	f7f9 fe29 	bl	8006094 <lwip_htons>
 800c442:	8078      	strh	r0, [r7, #2]
  udphdr->chksum = 0x0000;
 800c444:	2300      	movs	r3, #0
 800c446:	71bb      	strb	r3, [r7, #6]
 800c448:	71fb      	strb	r3, [r7, #7]
    udphdr->len = lwip_htons(q->tot_len);
 800c44a:	8928      	ldrh	r0, [r5, #8]
 800c44c:	f7f9 fe22 	bl	8006094 <lwip_htons>
 800c450:	80b8      	strh	r0, [r7, #4]
  ttl = pcb->ttl;
 800c452:	7aa3      	ldrb	r3, [r4, #10]
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800c454:	7a62      	ldrb	r2, [r4, #9]
 800c456:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c458:	9102      	str	r1, [sp, #8]
 800c45a:	2111      	movs	r1, #17
 800c45c:	9101      	str	r1, [sp, #4]
 800c45e:	9200      	str	r2, [sp, #0]
 800c460:	4642      	mov	r2, r8
 800c462:	990d      	ldr	r1, [sp, #52]	; 0x34
 800c464:	4628      	mov	r0, r5
 800c466:	f7fa fceb 	bl	8006e40 <ip4_output_if_src>
 800c46a:	4607      	mov	r7, r0
  if (q != p) {
 800c46c:	42b5      	cmp	r5, r6
 800c46e:	d002      	beq.n	800c476 <udp_sendto_if_src+0x7a>
    pbuf_free(q);
 800c470:	4628      	mov	r0, r5
 800c472:	f7fb fe2b 	bl	80080cc <pbuf_free>
}
 800c476:	4638      	mov	r0, r7
 800c478:	b005      	add	sp, #20
 800c47a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800c47e:	2200      	movs	r2, #0
 800c480:	2108      	movs	r1, #8
 800c482:	2001      	movs	r0, #1
 800c484:	f7fb fe8e 	bl	80081a4 <pbuf_alloc>
    if (q == NULL) {
 800c488:	4605      	mov	r5, r0
 800c48a:	b1a0      	cbz	r0, 800c4b6 <udp_sendto_if_src+0xba>
    if (p->tot_len != 0) {
 800c48c:	8933      	ldrh	r3, [r6, #8]
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d0cc      	beq.n	800c42c <udp_sendto_if_src+0x30>
      pbuf_chain(q, p);
 800c492:	4631      	mov	r1, r6
 800c494:	f7fc f840 	bl	8008518 <pbuf_chain>
 800c498:	e7c8      	b.n	800c42c <udp_sendto_if_src+0x30>
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800c49a:	4b08      	ldr	r3, [pc, #32]	; (800c4bc <udp_sendto_if_src+0xc0>)
 800c49c:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800c4a0:	4907      	ldr	r1, [pc, #28]	; (800c4c0 <udp_sendto_if_src+0xc4>)
 800c4a2:	4808      	ldr	r0, [pc, #32]	; (800c4c4 <udp_sendto_if_src+0xc8>)
 800c4a4:	f001 f8a9 	bl	800d5fa <iprintf>
 800c4a8:	e7c3      	b.n	800c432 <udp_sendto_if_src+0x36>
    return ERR_VAL;
 800c4aa:	f06f 0705 	mvn.w	r7, #5
 800c4ae:	e7e2      	b.n	800c476 <udp_sendto_if_src+0x7a>
 800c4b0:	f06f 0705 	mvn.w	r7, #5
 800c4b4:	e7df      	b.n	800c476 <udp_sendto_if_src+0x7a>
      return ERR_MEM;
 800c4b6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800c4ba:	e7dc      	b.n	800c476 <udp_sendto_if_src+0x7a>
 800c4bc:	0800fe90 	.word	0x0800fe90
 800c4c0:	0800fed4 	.word	0x0800fed4
 800c4c4:	0800de34 	.word	0x0800de34

0800c4c8 <udp_sendto_if>:
{
 800c4c8:	b570      	push	{r4, r5, r6, lr}
 800c4ca:	b082      	sub	sp, #8
 800c4cc:	9d06      	ldr	r5, [sp, #24]
  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 800c4ce:	b1a8      	cbz	r0, 800c4fc <udp_sendto_if+0x34>
 800c4d0:	4604      	mov	r4, r0
 800c4d2:	b1b2      	cbz	r2, 800c502 <udp_sendto_if+0x3a>
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c4d4:	b150      	cbz	r0, 800c4ec <udp_sendto_if+0x24>
 800c4d6:	6800      	ldr	r0, [r0, #0]
 800c4d8:	b140      	cbz	r0, 800c4ec <udp_sendto_if+0x24>
      ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800c4da:	f000 06f0 	and.w	r6, r0, #240	; 0xf0
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c4de:	2ee0      	cmp	r6, #224	; 0xe0
 800c4e0:	d004      	beq.n	800c4ec <udp_sendto_if+0x24>
    if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800c4e2:	686e      	ldr	r6, [r5, #4]
 800c4e4:	42b0      	cmp	r0, r6
 800c4e6:	d10f      	bne.n	800c508 <udp_sendto_if+0x40>
    src_ip = &pcb->local_ip;
 800c4e8:	4626      	mov	r6, r4
 800c4ea:	e000      	b.n	800c4ee <udp_sendto_if+0x26>
    src_ip = netif_ip_addr4(netif);
 800c4ec:	1d2e      	adds	r6, r5, #4
 800c4ee:	4620      	mov	r0, r4
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800c4f0:	9601      	str	r6, [sp, #4]
 800c4f2:	9500      	str	r5, [sp, #0]
 800c4f4:	f7ff ff82 	bl	800c3fc <udp_sendto_if_src>
}
 800c4f8:	b002      	add	sp, #8
 800c4fa:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_VAL;
 800c4fc:	f06f 0005 	mvn.w	r0, #5
 800c500:	e7fa      	b.n	800c4f8 <udp_sendto_if+0x30>
 800c502:	f06f 0005 	mvn.w	r0, #5
 800c506:	e7f7      	b.n	800c4f8 <udp_sendto_if+0x30>
      return ERR_RTE;
 800c508:	f06f 0003 	mvn.w	r0, #3
 800c50c:	e7f4      	b.n	800c4f8 <udp_sendto_if+0x30>

0800c50e <udp_sendto>:
  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 800c50e:	b198      	cbz	r0, 800c538 <udp_sendto+0x2a>
{
 800c510:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c512:	b083      	sub	sp, #12
 800c514:	4605      	mov	r5, r0
  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 800c516:	b192      	cbz	r2, 800c53e <udp_sendto+0x30>
 800c518:	461f      	mov	r7, r3
 800c51a:	4614      	mov	r4, r2
 800c51c:	460e      	mov	r6, r1
    netif = ip_route(&pcb->local_ip, dst_ip_route);
 800c51e:	4610      	mov	r0, r2
 800c520:	f7fa fb62 	bl	8006be8 <ip4_route>
  if (netif == NULL) {
 800c524:	b170      	cbz	r0, 800c544 <udp_sendto+0x36>
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 800c526:	9000      	str	r0, [sp, #0]
 800c528:	463b      	mov	r3, r7
 800c52a:	4622      	mov	r2, r4
 800c52c:	4631      	mov	r1, r6
 800c52e:	4628      	mov	r0, r5
 800c530:	f7ff ffca 	bl	800c4c8 <udp_sendto_if>
}
 800c534:	b003      	add	sp, #12
 800c536:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return ERR_VAL;
 800c538:	f06f 0005 	mvn.w	r0, #5
 800c53c:	4770      	bx	lr
 800c53e:	f06f 0005 	mvn.w	r0, #5
 800c542:	e7f7      	b.n	800c534 <udp_sendto+0x26>
    return ERR_RTE;
 800c544:	f06f 0003 	mvn.w	r0, #3
 800c548:	e7f4      	b.n	800c534 <udp_sendto+0x26>

0800c54a <udp_send>:
  if ((pcb == NULL) || IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
 800c54a:	b128      	cbz	r0, 800c558 <udp_send+0xe>
{
 800c54c:	b508      	push	{r3, lr}
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 800c54e:	8a83      	ldrh	r3, [r0, #20]
 800c550:	1d02      	adds	r2, r0, #4
 800c552:	f7ff ffdc 	bl	800c50e <udp_sendto>
 800c556:	bd08      	pop	{r3, pc}
    return ERR_VAL;
 800c558:	f06f 0005 	mvn.w	r0, #5
 800c55c:	4770      	bx	lr

0800c55e <udp_recv>:
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
  /* remember recv() callback and user data */
  pcb->recv = recv;
 800c55e:	6181      	str	r1, [r0, #24]
  pcb->recv_arg = recv_arg;
 800c560:	61c2      	str	r2, [r0, #28]
 800c562:	4770      	bx	lr

0800c564 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 800c564:	b508      	push	{r3, lr}
 800c566:	4601      	mov	r1, r0
  struct udp_pcb *pcb2;

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800c568:	4b0b      	ldr	r3, [pc, #44]	; (800c598 <udp_remove+0x34>)
 800c56a:	681a      	ldr	r2, [r3, #0]
 800c56c:	4282      	cmp	r2, r0
 800c56e:	d109      	bne.n	800c584 <udp_remove+0x20>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800c570:	68d2      	ldr	r2, [r2, #12]
 800c572:	601a      	str	r2, [r3, #0]
 800c574:	e001      	b.n	800c57a <udp_remove+0x16>
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
        /* remove pcb from list */
        pcb2->next = pcb->next;
 800c576:	68cb      	ldr	r3, [r1, #12]
 800c578:	60d3      	str	r3, [r2, #12]
        break;
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800c57a:	2000      	movs	r0, #0
 800c57c:	f7fb fbd0 	bl	8007d20 <memp_free>
 800c580:	bd08      	pop	{r3, pc}
 800c582:	461a      	mov	r2, r3
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800c584:	2a00      	cmp	r2, #0
 800c586:	d0f8      	beq.n	800c57a <udp_remove+0x16>
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800c588:	68d3      	ldr	r3, [r2, #12]
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d0f9      	beq.n	800c582 <udp_remove+0x1e>
 800c58e:	4299      	cmp	r1, r3
 800c590:	d0f1      	beq.n	800c576 <udp_remove+0x12>
 800c592:	461a      	mov	r2, r3
 800c594:	e7f6      	b.n	800c584 <udp_remove+0x20>
 800c596:	bf00      	nop
 800c598:	2000799c 	.word	0x2000799c

0800c59c <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800c59c:	b510      	push	{r4, lr}
  struct udp_pcb *pcb;
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800c59e:	2000      	movs	r0, #0
 800c5a0:	f7fb fba4 	bl	8007cec <memp_malloc>
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800c5a4:	4604      	mov	r4, r0
 800c5a6:	b128      	cbz	r0, 800c5b4 <udp_new+0x18>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800c5a8:	2220      	movs	r2, #32
 800c5aa:	2100      	movs	r1, #0
 800c5ac:	f001 f99c 	bl	800d8e8 <memset>
    pcb->ttl = UDP_TTL;
 800c5b0:	23ff      	movs	r3, #255	; 0xff
 800c5b2:	72a3      	strb	r3, [r4, #10]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
}
 800c5b4:	4620      	mov	r0, r4
 800c5b6:	bd10      	pop	{r4, pc}

0800c5b8 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 800c5b8:	b508      	push	{r3, lr}
  struct udp_pcb *pcb;
  pcb = udp_new();
 800c5ba:	f7ff ffef 	bl	800c59c <udp_new>
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
}
 800c5be:	bd08      	pop	{r3, pc}

0800c5c0 <udp_netif_ip_addr_changed>:
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800c5c0:	b1a0      	cbz	r0, 800c5ec <udp_netif_ip_addr_changed+0x2c>
{
 800c5c2:	b410      	push	{r4}
 800c5c4:	4604      	mov	r4, r0
  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800c5c6:	6803      	ldr	r3, [r0, #0]
 800c5c8:	b173      	cbz	r3, 800c5e8 <udp_netif_ip_addr_changed+0x28>
 800c5ca:	b169      	cbz	r1, 800c5e8 <udp_netif_ip_addr_changed+0x28>
 800c5cc:	680b      	ldr	r3, [r1, #0]
 800c5ce:	b15b      	cbz	r3, 800c5e8 <udp_netif_ip_addr_changed+0x28>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800c5d0:	4b07      	ldr	r3, [pc, #28]	; (800c5f0 <udp_netif_ip_addr_changed+0x30>)
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	e000      	b.n	800c5d8 <udp_netif_ip_addr_changed+0x18>
 800c5d6:	68db      	ldr	r3, [r3, #12]
 800c5d8:	b133      	cbz	r3, 800c5e8 <udp_netif_ip_addr_changed+0x28>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800c5da:	6818      	ldr	r0, [r3, #0]
 800c5dc:	6822      	ldr	r2, [r4, #0]
 800c5de:	4290      	cmp	r0, r2
 800c5e0:	d1f9      	bne.n	800c5d6 <udp_netif_ip_addr_changed+0x16>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800c5e2:	680a      	ldr	r2, [r1, #0]
 800c5e4:	601a      	str	r2, [r3, #0]
 800c5e6:	e7f6      	b.n	800c5d6 <udp_netif_ip_addr_changed+0x16>
      }
    }
  }
}
 800c5e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c5ec:	4770      	bx	lr
 800c5ee:	bf00      	nop
 800c5f0:	2000799c 	.word	0x2000799c

0800c5f4 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800c5f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5f6:	4604      	mov	r4, r0
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 800c5f8:	8945      	ldrh	r5, [r0, #10]
 800c5fa:	2d0e      	cmp	r5, #14
 800c5fc:	d916      	bls.n	800c62c <ethernet_input+0x38>
 800c5fe:	460f      	mov	r7, r1
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800c600:	6840      	ldr	r0, [r0, #4]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0],  (unsigned)ethhdr->src.addr[1],  (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3],  (unsigned)ethhdr->src.addr[4],  (unsigned)ethhdr->src.addr[5],
     lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800c602:	8986      	ldrh	r6, [r0, #12]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800c604:	7803      	ldrb	r3, [r0, #0]
 800c606:	f013 0f01 	tst.w	r3, #1
 800c60a:	d00a      	beq.n	800c622 <ethernet_input+0x2e>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800c60c:	2b01      	cmp	r3, #1
 800c60e:	d012      	beq.n	800c636 <ethernet_input+0x42>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800c610:	2206      	movs	r2, #6
 800c612:	4921      	ldr	r1, [pc, #132]	; (800c698 <ethernet_input+0xa4>)
 800c614:	f001 f94e 	bl	800d8b4 <memcmp>
 800c618:	b918      	cbnz	r0, 800c622 <ethernet_input+0x2e>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800c61a:	7b63      	ldrb	r3, [r4, #13]
 800c61c:	f043 0308 	orr.w	r3, r3, #8
 800c620:	7363      	strb	r3, [r4, #13]
    }
  }

  switch (type) {
 800c622:	2e08      	cmp	r6, #8
 800c624:	d012      	beq.n	800c64c <ethernet_input+0x58>
 800c626:	f5b6 6fc1 	cmp.w	r6, #1544	; 0x608
 800c62a:	d022      	beq.n	800c672 <ethernet_input+0x7e>
  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;

free_and_return:
  pbuf_free(p);
 800c62c:	4620      	mov	r0, r4
 800c62e:	f7fb fd4d 	bl	80080cc <pbuf_free>
  return ERR_OK;
}
 800c632:	2000      	movs	r0, #0
 800c634:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800c636:	7843      	ldrb	r3, [r0, #1]
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d1f2      	bne.n	800c622 <ethernet_input+0x2e>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800c63c:	7883      	ldrb	r3, [r0, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800c63e:	2b5e      	cmp	r3, #94	; 0x5e
 800c640:	d1ef      	bne.n	800c622 <ethernet_input+0x2e>
        p->flags |= PBUF_FLAG_LLMCAST;
 800c642:	7b63      	ldrb	r3, [r4, #13]
 800c644:	f043 0310 	orr.w	r3, r3, #16
 800c648:	7363      	strb	r3, [r4, #13]
 800c64a:	e7ea      	b.n	800c622 <ethernet_input+0x2e>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800c64c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c650:	f013 0f08 	tst.w	r3, #8
 800c654:	d0ea      	beq.n	800c62c <ethernet_input+0x38>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 800c656:	2d0d      	cmp	r5, #13
 800c658:	dde8      	ble.n	800c62c <ethernet_input+0x38>
 800c65a:	f06f 010d 	mvn.w	r1, #13
 800c65e:	4620      	mov	r0, r4
 800c660:	f7fb fd2a 	bl	80080b8 <pbuf_header>
 800c664:	2800      	cmp	r0, #0
 800c666:	d1e1      	bne.n	800c62c <ethernet_input+0x38>
        ip4_input(p, netif);
 800c668:	4639      	mov	r1, r7
 800c66a:	4620      	mov	r0, r4
 800c66c:	f7fa fb0c 	bl	8006c88 <ip4_input>
      break;
 800c670:	e7df      	b.n	800c632 <ethernet_input+0x3e>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800c672:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c676:	f013 0f08 	tst.w	r3, #8
 800c67a:	d0d7      	beq.n	800c62c <ethernet_input+0x38>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 800c67c:	2d0d      	cmp	r5, #13
 800c67e:	ddd5      	ble.n	800c62c <ethernet_input+0x38>
 800c680:	f06f 010d 	mvn.w	r1, #13
 800c684:	4620      	mov	r0, r4
 800c686:	f7fb fd17 	bl	80080b8 <pbuf_header>
 800c68a:	2800      	cmp	r0, #0
 800c68c:	d1ce      	bne.n	800c62c <ethernet_input+0x38>
        etharp_input(p, netif);
 800c68e:	4639      	mov	r1, r7
 800c690:	4620      	mov	r0, r4
 800c692:	f7f9 ff13 	bl	80064bc <etharp_input>
      break;
 800c696:	e7cc      	b.n	800c632 <ethernet_input+0x3e>
 800c698:	0800ff04 	.word	0x0800ff04

0800c69c <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 800c69c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6a0:	4605      	mov	r5, r0
 800c6a2:	460c      	mov	r4, r1
 800c6a4:	4616      	mov	r6, r2
 800c6a6:	461f      	mov	r7, r3
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800c6a8:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 800c6ac:	f7f9 fcf2 	bl	8006094 <lwip_htons>
 800c6b0:	4680      	mov	r8, r0

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 800c6b2:	210e      	movs	r1, #14
 800c6b4:	4620      	mov	r0, r4
 800c6b6:	f7fb fcff 	bl	80080b8 <pbuf_header>
 800c6ba:	b9e0      	cbnz	r0, 800c6f6 <ethernet_output+0x5a>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 800c6bc:	6863      	ldr	r3, [r4, #4]
  ethhdr->type = eth_type_be;
 800c6be:	f8a3 800c 	strh.w	r8, [r3, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 800c6c2:	683a      	ldr	r2, [r7, #0]
 800c6c4:	601a      	str	r2, [r3, #0]
 800c6c6:	88ba      	ldrh	r2, [r7, #4]
 800c6c8:	809a      	strh	r2, [r3, #4]
  ETHADDR16_COPY(&ethhdr->src,  src);
 800c6ca:	6832      	ldr	r2, [r6, #0]
 800c6cc:	f8c3 2006 	str.w	r2, [r3, #6]
 800c6d0:	88b2      	ldrh	r2, [r6, #4]
 800c6d2:	815a      	strh	r2, [r3, #10]

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800c6d4:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 800c6d8:	2b06      	cmp	r3, #6
 800c6da:	d006      	beq.n	800c6ea <ethernet_output+0x4e>
 800c6dc:	4b08      	ldr	r3, [pc, #32]	; (800c700 <ethernet_output+0x64>)
 800c6de:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800c6e2:	4908      	ldr	r1, [pc, #32]	; (800c704 <ethernet_output+0x68>)
 800c6e4:	4808      	ldr	r0, [pc, #32]	; (800c708 <ethernet_output+0x6c>)
 800c6e6:	f000 ff88 	bl	800d5fa <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800c6ea:	69ab      	ldr	r3, [r5, #24]
 800c6ec:	4621      	mov	r1, r4
 800c6ee:	4628      	mov	r0, r5
 800c6f0:	4798      	blx	r3
 800c6f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800c6f6:	f06f 0001 	mvn.w	r0, #1
}
 800c6fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c6fe:	bf00      	nop
 800c700:	0800ff0c 	.word	0x0800ff0c
 800c704:	0800ff44 	.word	0x0800ff44
 800c708:	0800de34 	.word	0x0800de34

0800c70c <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 800c70c:	b510      	push	{r4, lr}
 800c70e:	b084      	sub	sp, #16
 800c710:	4604      	mov	r4, r0
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 800c712:	9100      	str	r1, [sp, #0]
 800c714:	2304      	movs	r3, #4
 800c716:	9301      	str	r3, [sp, #4]
 800c718:	2100      	movs	r1, #0
 800c71a:	9102      	str	r1, [sp, #8]
 800c71c:	9103      	str	r1, [sp, #12]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 800c71e:	4668      	mov	r0, sp
 800c720:	f7f5 feb4 	bl	800248c <osMessageCreate>
 800c724:	6020      	str	r0, [r4, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 800c726:	b110      	cbz	r0, 800c72e <sys_mbox_new+0x22>
    return ERR_MEM;

  return ERR_OK;
 800c728:	2000      	movs	r0, #0
}
 800c72a:	b004      	add	sp, #16
 800c72c:	bd10      	pop	{r4, pc}
    return ERR_MEM;
 800c72e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c732:	e7fa      	b.n	800c72a <sys_mbox_new+0x1e>

0800c734 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 800c734:	b510      	push	{r4, lr}
 800c736:	4604      	mov	r4, r0
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 800c738:	6800      	ldr	r0, [r0, #0]
 800c73a:	f7f5 ff3d 	bl	80025b8 <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 800c73e:	6820      	ldr	r0, [r4, #0]
 800c740:	f7f5 ff47 	bl	80025d2 <osMessageDelete>
 800c744:	bd10      	pop	{r4, pc}

0800c746 <sys_mbox_post>:
}

/*-----------------------------------------------------------------------------------*/
//   Posts the "msg" to the mailbox.
void sys_mbox_post(sys_mbox_t *mbox, void *data)
{
 800c746:	b538      	push	{r3, r4, r5, lr}
 800c748:	4605      	mov	r5, r0
 800c74a:	460c      	mov	r4, r1
#if (osCMSIS < 0x20000U)
  while(osMessagePut(*mbox, (uint32_t)data, osWaitForever) != osOK);
 800c74c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c750:	4621      	mov	r1, r4
 800c752:	6828      	ldr	r0, [r5, #0]
 800c754:	f7f5 feae 	bl	80024b4 <osMessagePut>
 800c758:	2800      	cmp	r0, #0
 800c75a:	d1f7      	bne.n	800c74c <sys_mbox_post+0x6>
#else
  while(osMessageQueuePut(*mbox, &data, 0, osWaitForever) != osOK);
#endif
}
 800c75c:	bd38      	pop	{r3, r4, r5, pc}

0800c75e <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 800c75e:	b508      	push	{r3, lr}
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 800c760:	2200      	movs	r2, #0
 800c762:	6800      	ldr	r0, [r0, #0]
 800c764:	f7f5 fea6 	bl	80024b4 <osMessagePut>
 800c768:	b900      	cbnz	r0, 800c76c <sys_mbox_trypost+0xe>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
}
 800c76a:	bd08      	pop	{r3, pc}
    result = ERR_MEM;
 800c76c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c770:	e7fb      	b.n	800c76a <sys_mbox_trypost+0xc>

0800c772 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 800c772:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c774:	b089      	sub	sp, #36	; 0x24
 800c776:	4606      	mov	r6, r0
 800c778:	460f      	mov	r7, r1
 800c77a:	4615      	mov	r5, r2
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 800c77c:	f7f5 fd35 	bl	80021ea <osKernelSysTick>
 800c780:	4604      	mov	r4, r0
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 800c782:	b185      	cbz	r5, 800c7a6 <sys_arch_mbox_fetch+0x34>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 800c784:	462a      	mov	r2, r5
 800c786:	6831      	ldr	r1, [r6, #0]
 800c788:	a805      	add	r0, sp, #20
 800c78a:	f7f5 fec7 	bl	800251c <osMessageGet>

    if(event.status == osEventMessage)
 800c78e:	9b05      	ldr	r3, [sp, #20]
 800c790:	2b10      	cmp	r3, #16
 800c792:	d002      	beq.n	800c79a <sys_arch_mbox_fetch+0x28>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 800c794:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c798:	e015      	b.n	800c7c6 <sys_arch_mbox_fetch+0x54>
      *msg = (void *)event.value.v;
 800c79a:	9b06      	ldr	r3, [sp, #24]
 800c79c:	603b      	str	r3, [r7, #0]
      return (osKernelSysTick() - starttime);
 800c79e:	f7f5 fd24 	bl	80021ea <osKernelSysTick>
 800c7a2:	1b00      	subs	r0, r0, r4
 800c7a4:	e00f      	b.n	800c7c6 <sys_arch_mbox_fetch+0x54>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 800c7a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c7aa:	6831      	ldr	r1, [r6, #0]
 800c7ac:	4668      	mov	r0, sp
 800c7ae:	f7f5 feb5 	bl	800251c <osMessageGet>
 800c7b2:	e89d 0007 	ldmia.w	sp, {r0, r1, r2}
 800c7b6:	ab08      	add	r3, sp, #32
 800c7b8:	e903 0007 	stmdb	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 800c7bc:	9b06      	ldr	r3, [sp, #24]
 800c7be:	603b      	str	r3, [r7, #0]
    return (osKernelSysTick() - starttime);
 800c7c0:	f7f5 fd13 	bl	80021ea <osKernelSysTick>
 800c7c4:	1b00      	subs	r0, r0, r4
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 800c7c6:	b009      	add	sp, #36	; 0x24
 800c7c8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c7ca <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 800c7ca:	b510      	push	{r4, lr}
 800c7cc:	b084      	sub	sp, #16
 800c7ce:	460c      	mov	r4, r1
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 800c7d0:	2200      	movs	r2, #0
 800c7d2:	6801      	ldr	r1, [r0, #0]
 800c7d4:	a801      	add	r0, sp, #4
 800c7d6:	f7f5 fea1 	bl	800251c <osMessageGet>

  if(event.status == osEventMessage)
 800c7da:	9b01      	ldr	r3, [sp, #4]
 800c7dc:	2b10      	cmp	r3, #16
 800c7de:	d003      	beq.n	800c7e8 <sys_arch_mbox_tryfetch+0x1e>
#endif
    return ERR_OK;
  }
  else
  {
    return SYS_MBOX_EMPTY;
 800c7e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  }
}
 800c7e4:	b004      	add	sp, #16
 800c7e6:	bd10      	pop	{r4, pc}
    *msg = (void *)event.value.v;
 800c7e8:	9b02      	ldr	r3, [sp, #8]
 800c7ea:	6023      	str	r3, [r4, #0]
    return ERR_OK;
 800c7ec:	2000      	movs	r0, #0
 800c7ee:	e7f9      	b.n	800c7e4 <sys_arch_mbox_tryfetch+0x1a>

0800c7f0 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
  if (*mbox == SYS_MBOX_NULL)
 800c7f0:	6803      	ldr	r3, [r0, #0]
 800c7f2:	b10b      	cbz	r3, 800c7f8 <sys_mbox_valid+0x8>
    return 0;
  else
    return 1;
 800c7f4:	2001      	movs	r0, #1
}
 800c7f6:	4770      	bx	lr
    return 0;
 800c7f8:	2000      	movs	r0, #0
 800c7fa:	4770      	bx	lr

0800c7fc <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
  *mbox = SYS_MBOX_NULL;
 800c7fc:	2300      	movs	r3, #0
 800c7fe:	6003      	str	r3, [r0, #0]
 800c800:	4770      	bx	lr

0800c802 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 800c802:	b530      	push	{r4, r5, lr}
 800c804:	b083      	sub	sp, #12
 800c806:	4604      	mov	r4, r0
 800c808:	460d      	mov	r5, r1
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 800c80a:	2300      	movs	r3, #0
 800c80c:	9300      	str	r3, [sp, #0]
 800c80e:	9301      	str	r3, [sp, #4]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 800c810:	2101      	movs	r1, #1
 800c812:	4668      	mov	r0, sp
 800c814:	f7f5 fda2 	bl	800235c <osSemaphoreCreate>
 800c818:	6020      	str	r0, [r4, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 800c81a:	b140      	cbz	r0, 800c82e <sys_sem_new+0x2c>
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
  }

  if(count == 0)	// Means it can't be taken
 800c81c:	b115      	cbz	r5, 800c824 <sys_sem_new+0x22>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 800c81e:	2000      	movs	r0, #0
}
 800c820:	b003      	add	sp, #12
 800c822:	bd30      	pop	{r4, r5, pc}
    osSemaphoreWait(*sem, 0);
 800c824:	2100      	movs	r1, #0
 800c826:	f7f5 fdbf 	bl	80023a8 <osSemaphoreWait>
  return ERR_OK;
 800c82a:	2000      	movs	r0, #0
 800c82c:	e7f8      	b.n	800c820 <sys_sem_new+0x1e>
    return ERR_MEM;
 800c82e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c832:	e7f5      	b.n	800c820 <sys_sem_new+0x1e>

0800c834 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 800c834:	b570      	push	{r4, r5, r6, lr}
 800c836:	4604      	mov	r4, r0
 800c838:	460e      	mov	r6, r1
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 800c83a:	f7f5 fcd6 	bl	80021ea <osKernelSysTick>
 800c83e:	4605      	mov	r5, r0
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 800c840:	b956      	cbnz	r6, 800c858 <sys_arch_sem_wait+0x24>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 800c842:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800c846:	6820      	ldr	r0, [r4, #0]
 800c848:	f7f5 fdae 	bl	80023a8 <osSemaphoreWait>
 800c84c:	2800      	cmp	r0, #0
 800c84e:	d1f8      	bne.n	800c842 <sys_arch_sem_wait+0xe>
    return (osKernelSysTick() - starttime);
 800c850:	f7f5 fccb 	bl	80021ea <osKernelSysTick>
 800c854:	1b40      	subs	r0, r0, r5
 800c856:	bd70      	pop	{r4, r5, r6, pc}
    if(osSemaphoreWait (*sem, timeout) == osOK)
 800c858:	4631      	mov	r1, r6
 800c85a:	6820      	ldr	r0, [r4, #0]
 800c85c:	f7f5 fda4 	bl	80023a8 <osSemaphoreWait>
 800c860:	b110      	cbz	r0, 800c868 <sys_arch_sem_wait+0x34>
      return SYS_ARCH_TIMEOUT;
 800c862:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 800c866:	bd70      	pop	{r4, r5, r6, pc}
      return (osKernelSysTick() - starttime);
 800c868:	f7f5 fcbf 	bl	80021ea <osKernelSysTick>
 800c86c:	1b40      	subs	r0, r0, r5
 800c86e:	bd70      	pop	{r4, r5, r6, pc}

0800c870 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 800c870:	b508      	push	{r3, lr}
  osSemaphoreRelease(*sem);
 800c872:	6800      	ldr	r0, [r0, #0]
 800c874:	f7f5 fdd0 	bl	8002418 <osSemaphoreRelease>
 800c878:	bd08      	pop	{r3, pc}

0800c87a <sys_sem_free>:
}

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 800c87a:	b508      	push	{r3, lr}
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 800c87c:	6800      	ldr	r0, [r0, #0]
 800c87e:	f7f5 fdf9 	bl	8002474 <osSemaphoreDelete>
 800c882:	bd08      	pop	{r3, pc}

0800c884 <sys_sem_valid>:
}
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
  if (*sem == SYS_SEM_NULL)
 800c884:	6803      	ldr	r3, [r0, #0]
 800c886:	b10b      	cbz	r3, 800c88c <sys_sem_valid+0x8>
    return 0;
  else
    return 1;
 800c888:	2001      	movs	r0, #1
}
 800c88a:	4770      	bx	lr
    return 0;
 800c88c:	2000      	movs	r0, #0
 800c88e:	4770      	bx	lr

0800c890 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
  *sem = SYS_SEM_NULL;
 800c890:	2300      	movs	r3, #0
 800c892:	6003      	str	r3, [r0, #0]
 800c894:	4770      	bx	lr
	...

0800c898 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 800c898:	b508      	push	{r3, lr}
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 800c89a:	4803      	ldr	r0, [pc, #12]	; (800c8a8 <sys_init+0x10>)
 800c89c:	f7f5 fced 	bl	800227a <osMutexCreate>
 800c8a0:	4b02      	ldr	r3, [pc, #8]	; (800c8ac <sys_init+0x14>)
 800c8a2:	6018      	str	r0, [r3, #0]
 800c8a4:	bd08      	pop	{r3, pc}
 800c8a6:	bf00      	nop
 800c8a8:	0800ff80 	.word	0x0800ff80
 800c8ac:	200079a4 	.word	0x200079a4

0800c8b0 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 800c8b0:	b510      	push	{r4, lr}
 800c8b2:	b082      	sub	sp, #8
 800c8b4:	4604      	mov	r4, r0

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 800c8b6:	2300      	movs	r3, #0
 800c8b8:	9300      	str	r3, [sp, #0]
 800c8ba:	9301      	str	r3, [sp, #4]
  *mutex = osMutexCreate(osMutex(MUTEX));
 800c8bc:	4668      	mov	r0, sp
 800c8be:	f7f5 fcdc 	bl	800227a <osMutexCreate>
 800c8c2:	6020      	str	r0, [r4, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 800c8c4:	b110      	cbz	r0, 800c8cc <sys_mutex_new+0x1c>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 800c8c6:	2000      	movs	r0, #0
}
 800c8c8:	b002      	add	sp, #8
 800c8ca:	bd10      	pop	{r4, pc}
    return ERR_MEM;
 800c8cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c8d0:	e7fa      	b.n	800c8c8 <sys_mutex_new+0x18>

0800c8d2 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 800c8d2:	b508      	push	{r3, lr}
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 800c8d4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800c8d8:	6800      	ldr	r0, [r0, #0]
 800c8da:	f7f5 fcd9 	bl	8002290 <osMutexWait>
 800c8de:	bd08      	pop	{r3, pc}

0800c8e0 <sys_mutex_unlock>:
}

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 800c8e0:	b508      	push	{r3, lr}
  osMutexRelease(*mutex);
 800c8e2:	6800      	ldr	r0, [r0, #0]
 800c8e4:	f7f5 fd0c 	bl	8002300 <osMutexRelease>
 800c8e8:	bd08      	pop	{r3, pc}

0800c8ea <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 800c8ea:	b510      	push	{r4, lr}
 800c8ec:	b088      	sub	sp, #32
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 800c8ee:	2400      	movs	r4, #0
 800c8f0:	9403      	str	r4, [sp, #12]
 800c8f2:	9404      	str	r4, [sp, #16]
 800c8f4:	9406      	str	r4, [sp, #24]
 800c8f6:	9407      	str	r4, [sp, #28]
 800c8f8:	9001      	str	r0, [sp, #4]
 800c8fa:	9102      	str	r1, [sp, #8]
 800c8fc:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 800c900:	f8ad 100c 	strh.w	r1, [sp, #12]
 800c904:	9305      	str	r3, [sp, #20]
  return osThreadCreate(&os_thread_def, arg);
 800c906:	4611      	mov	r1, r2
 800c908:	a801      	add	r0, sp, #4
 800c90a:	f7f5 fc78 	bl	80021fe <osThreadCreate>
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 800c90e:	b008      	add	sp, #32
 800c910:	bd10      	pop	{r4, pc}
	...

0800c914 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 800c914:	b508      	push	{r3, lr}
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 800c916:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800c91a:	4b03      	ldr	r3, [pc, #12]	; (800c928 <sys_arch_protect+0x14>)
 800c91c:	6818      	ldr	r0, [r3, #0]
 800c91e:	f7f5 fcb7 	bl	8002290 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
}
 800c922:	2001      	movs	r0, #1
 800c924:	bd08      	pop	{r3, pc}
 800c926:	bf00      	nop
 800c928:	200079a4 	.word	0x200079a4

0800c92c <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 800c92c:	b508      	push	{r3, lr}
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 800c92e:	4b02      	ldr	r3, [pc, #8]	; (800c938 <sys_arch_unprotect+0xc>)
 800c930:	6818      	ldr	r0, [r3, #0]
 800c932:	f7f5 fce5 	bl	8002300 <osMutexRelease>
 800c936:	bd08      	pop	{r3, pc}
 800c938:	200079a4 	.word	0x200079a4

0800c93c <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800c93c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t byteslefttocopy = 0;
  uint32_t i=0;
  

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 800c940:	4834      	ldr	r0, [pc, #208]	; (800ca14 <low_level_input+0xd8>)
 800c942:	f7f4 f885 	bl	8000a50 <HAL_ETH_GetReceivedFrame_IT>
 800c946:	2800      	cmp	r0, #0
 800c948:	d160      	bne.n	800ca0c <low_level_input+0xd0>
    return NULL;
  
  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 800c94a:	4b32      	ldr	r3, [pc, #200]	; (800ca14 <low_level_input+0xd8>)
 800c94c:	8f99      	ldrh	r1, [r3, #60]	; 0x3c
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800c94e:	f8d3 8040 	ldr.w	r8, [r3, #64]	; 0x40
  
  if (len > 0)
 800c952:	b949      	cbnz	r1, 800c968 <low_level_input+0x2c>
  struct pbuf *p = NULL;
 800c954:	f04f 0a00 	mov.w	sl, #0
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
  }
  
  if (p != NULL)
 800c958:	f1ba 0f00 	cmp.w	sl, #0
 800c95c:	d033      	beq.n	800c9c6 <low_level_input+0x8a>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800c95e:	4b2d      	ldr	r3, [pc, #180]	; (800ca14 <low_level_input+0xd8>)
 800c960:	6b1f      	ldr	r7, [r3, #48]	; 0x30
    bufferoffset = 0;
    for(q = p; q != NULL; q = q->next)
 800c962:	46d1      	mov	r9, sl
    bufferoffset = 0;
 800c964:	2400      	movs	r4, #0
    for(q = p; q != NULL; q = q->next)
 800c966:	e027      	b.n	800c9b8 <low_level_input+0x7c>
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800c968:	2203      	movs	r2, #3
 800c96a:	2004      	movs	r0, #4
 800c96c:	f7fb fc1a 	bl	80081a4 <pbuf_alloc>
 800c970:	4682      	mov	sl, r0
 800c972:	e7f1      	b.n	800c958 <low_level_input+0x1c>
      
      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 800c974:	f8d9 0004 	ldr.w	r0, [r9, #4]
 800c978:	f5c4 62be 	rsb	r2, r4, #1520	; 0x5f0
 800c97c:	3204      	adds	r2, #4
 800c97e:	eb08 0104 	add.w	r1, r8, r4
 800c982:	4430      	add	r0, r6
 800c984:	f000 ffa5 	bl	800d8d2 <memcpy>
        
        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800c988:	68ff      	ldr	r7, [r7, #12]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 800c98a:	f8d7 8008 	ldr.w	r8, [r7, #8]
        
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 800c98e:	f2a5 52f4 	subw	r2, r5, #1524	; 0x5f4
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 800c992:	1b36      	subs	r6, r6, r4
 800c994:	f206 56f4 	addw	r6, r6, #1524	; 0x5f4
        bufferoffset = 0;
 800c998:	2400      	movs	r4, #0
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800c99a:	18a5      	adds	r5, r4, r2
 800c99c:	f240 53f4 	movw	r3, #1524	; 0x5f4
 800c9a0:	429d      	cmp	r5, r3
 800c9a2:	d8e7      	bhi.n	800c974 <low_level_input+0x38>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 800c9a4:	f8d9 0004 	ldr.w	r0, [r9, #4]
 800c9a8:	eb08 0104 	add.w	r1, r8, r4
 800c9ac:	4430      	add	r0, r6
 800c9ae:	f000 ff90 	bl	800d8d2 <memcpy>
    for(q = p; q != NULL; q = q->next)
 800c9b2:	f8d9 9000 	ldr.w	r9, [r9]
      bufferoffset = bufferoffset + byteslefttocopy;
 800c9b6:	462c      	mov	r4, r5
    for(q = p; q != NULL; q = q->next)
 800c9b8:	f1b9 0f00 	cmp.w	r9, #0
 800c9bc:	d003      	beq.n	800c9c6 <low_level_input+0x8a>
      byteslefttocopy = q->len;
 800c9be:	f8b9 200a 	ldrh.w	r2, [r9, #10]
      payloadoffset = 0;
 800c9c2:	2600      	movs	r6, #0
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800c9c4:	e7e9      	b.n	800c99a <low_level_input+0x5e>
    }
  }  
  
    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800c9c6:	4b13      	ldr	r3, [pc, #76]	; (800ca14 <low_level_input+0xd8>)
 800c9c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800c9ca:	2100      	movs	r1, #0
 800c9cc:	e005      	b.n	800c9da <low_level_input+0x9e>
    {  
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 800c9ce:	681a      	ldr	r2, [r3, #0]
 800c9d0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800c9d4:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800c9d6:	68db      	ldr	r3, [r3, #12]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800c9d8:	3101      	adds	r1, #1
 800c9da:	4a0e      	ldr	r2, [pc, #56]	; (800ca14 <low_level_input+0xd8>)
 800c9dc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800c9de:	4291      	cmp	r1, r2
 800c9e0:	d3f5      	bcc.n	800c9ce <low_level_input+0x92>
    }
    
    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;  
 800c9e2:	4b0c      	ldr	r3, [pc, #48]	; (800ca14 <low_level_input+0xd8>)
 800c9e4:	2200      	movs	r2, #0
 800c9e6:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	f241 0214 	movw	r2, #4116	; 0x1014
 800c9ee:	589a      	ldr	r2, [r3, r2]
 800c9f0:	f012 0f80 	tst.w	r2, #128	; 0x80
 800c9f4:	d007      	beq.n	800ca06 <low_level_input+0xca>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 800c9f6:	2180      	movs	r1, #128	; 0x80
 800c9f8:	f241 0214 	movw	r2, #4116	; 0x1014
 800c9fc:	5099      	str	r1, [r3, r2]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 800c9fe:	2100      	movs	r1, #0
 800ca00:	f241 0208 	movw	r2, #4104	; 0x1008
 800ca04:	5099      	str	r1, [r3, r2]
  }
  return p;
}
 800ca06:	4650      	mov	r0, sl
 800ca08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return NULL;
 800ca0c:	f04f 0a00 	mov.w	sl, #0
 800ca10:	e7f9      	b.n	800ca06 <low_level_input+0xca>
 800ca12:	bf00      	nop
 800ca14:	20009278 	.word	0x20009278

0800ca18 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input( void const * argument ) 
{
 800ca18:	b538      	push	{r3, r4, r5, lr}
 800ca1a:	4605      	mov	r5, r0
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
  
  for( ;; )
  {
    if (osSemaphoreWait( s_xSemaphore, TIME_WAITING_FOR_INPUT)==osOK)
 800ca1c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800ca20:	4b0b      	ldr	r3, [pc, #44]	; (800ca50 <ethernetif_input+0x38>)
 800ca22:	6818      	ldr	r0, [r3, #0]
 800ca24:	f7f5 fcc0 	bl	80023a8 <osSemaphoreWait>
 800ca28:	2800      	cmp	r0, #0
 800ca2a:	d1f7      	bne.n	800ca1c <ethernetif_input+0x4>
 800ca2c:	e001      	b.n	800ca32 <ethernetif_input+0x1a>
          if (netif->input( p, netif) != ERR_OK )
          {
            pbuf_free(p);
          }
        }
      } while(p!=NULL);
 800ca2e:	2c00      	cmp	r4, #0
 800ca30:	d0f4      	beq.n	800ca1c <ethernetif_input+0x4>
        p = low_level_input( netif );
 800ca32:	4628      	mov	r0, r5
 800ca34:	f7ff ff82 	bl	800c93c <low_level_input>
        if   (p != NULL)
 800ca38:	4604      	mov	r4, r0
 800ca3a:	2800      	cmp	r0, #0
 800ca3c:	d0f7      	beq.n	800ca2e <ethernetif_input+0x16>
          if (netif->input( p, netif) != ERR_OK )
 800ca3e:	692b      	ldr	r3, [r5, #16]
 800ca40:	4629      	mov	r1, r5
 800ca42:	4798      	blx	r3
 800ca44:	2800      	cmp	r0, #0
 800ca46:	d0f2      	beq.n	800ca2e <ethernetif_input+0x16>
            pbuf_free(p);
 800ca48:	4620      	mov	r0, r4
 800ca4a:	f7fb fb3f 	bl	80080cc <pbuf_free>
 800ca4e:	e7ee      	b.n	800ca2e <ethernetif_input+0x16>
 800ca50:	20003fd0 	.word	0x20003fd0

0800ca54 <low_level_output>:
{
 800ca54:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca58:	468b      	mov	fp, r1
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800ca5a:	4b2c      	ldr	r3, [pc, #176]	; (800cb0c <low_level_output+0xb8>)
 800ca5c:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 800ca5e:	f8d6 a008 	ldr.w	sl, [r6, #8]
  bufferoffset = 0;
 800ca62:	2400      	movs	r4, #0
  uint32_t framelength = 0;
 800ca64:	4627      	mov	r7, r4
  for(q = p; q != NULL; q = q->next)
 800ca66:	f1bb 0f00 	cmp.w	fp, #0
 800ca6a:	d032      	beq.n	800cad2 <low_level_output+0x7e>
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800ca6c:	6833      	ldr	r3, [r6, #0]
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	db35      	blt.n	800cade <low_level_output+0x8a>
      byteslefttocopy = q->len;
 800ca72:	f8bb 900a 	ldrh.w	r9, [fp, #10]
      payloadoffset = 0;
 800ca76:	2500      	movs	r5, #0
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800ca78:	eb04 0809 	add.w	r8, r4, r9
 800ca7c:	f240 53f4 	movw	r3, #1524	; 0x5f4
 800ca80:	4598      	cmp	r8, r3
 800ca82:	d919      	bls.n	800cab8 <low_level_output+0x64>
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800ca84:	f8db 1004 	ldr.w	r1, [fp, #4]
 800ca88:	f5c4 62be 	rsb	r2, r4, #1520	; 0x5f0
 800ca8c:	3204      	adds	r2, #4
 800ca8e:	4429      	add	r1, r5
 800ca90:	eb0a 0004 	add.w	r0, sl, r4
 800ca94:	f000 ff1d 	bl	800d8d2 <memcpy>
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800ca98:	68f6      	ldr	r6, [r6, #12]
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800ca9a:	6833      	ldr	r3, [r6, #0]
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	db21      	blt.n	800cae4 <low_level_output+0x90>
        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 800caa0:	f8d6 a008 	ldr.w	sl, [r6, #8]
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800caa4:	f2a8 59f4 	subw	r9, r8, #1524	; 0x5f4
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800caa8:	1b2d      	subs	r5, r5, r4
 800caaa:	f205 55f4 	addw	r5, r5, #1524	; 0x5f4
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800caae:	1b3f      	subs	r7, r7, r4
 800cab0:	f207 57f4 	addw	r7, r7, #1524	; 0x5f4
        bufferoffset = 0;
 800cab4:	2400      	movs	r4, #0
 800cab6:	e7df      	b.n	800ca78 <low_level_output+0x24>
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 800cab8:	f8db 1004 	ldr.w	r1, [fp, #4]
 800cabc:	464a      	mov	r2, r9
 800cabe:	4429      	add	r1, r5
 800cac0:	eb0a 0004 	add.w	r0, sl, r4
 800cac4:	f000 ff05 	bl	800d8d2 <memcpy>
      framelength = framelength + byteslefttocopy;
 800cac8:	444f      	add	r7, r9
  for(q = p; q != NULL; q = q->next)
 800caca:	f8db b000 	ldr.w	fp, [fp]
      bufferoffset = bufferoffset + byteslefttocopy;
 800cace:	4644      	mov	r4, r8
 800cad0:	e7c9      	b.n	800ca66 <low_level_output+0x12>
  HAL_ETH_TransmitFrame(&heth, framelength);
 800cad2:	4639      	mov	r1, r7
 800cad4:	480d      	ldr	r0, [pc, #52]	; (800cb0c <low_level_output+0xb8>)
 800cad6:	f7f3 ff29 	bl	800092c <HAL_ETH_TransmitFrame>
  errval = ERR_OK;
 800cada:	2000      	movs	r0, #0
 800cadc:	e004      	b.n	800cae8 <low_level_output+0x94>
        errval = ERR_USE;
 800cade:	f06f 0007 	mvn.w	r0, #7
 800cae2:	e001      	b.n	800cae8 <low_level_output+0x94>
          errval = ERR_USE;
 800cae4:	f06f 0007 	mvn.w	r0, #7
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 800cae8:	4b08      	ldr	r3, [pc, #32]	; (800cb0c <low_level_output+0xb8>)
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	f241 0214 	movw	r2, #4116	; 0x1014
 800caf0:	589a      	ldr	r2, [r3, r2]
 800caf2:	f012 0f20 	tst.w	r2, #32
 800caf6:	d007      	beq.n	800cb08 <low_level_output+0xb4>
    heth.Instance->DMASR = ETH_DMASR_TUS;
 800caf8:	2120      	movs	r1, #32
 800cafa:	f241 0214 	movw	r2, #4116	; 0x1014
 800cafe:	5099      	str	r1, [r3, r2]
    heth.Instance->DMATPDR = 0;
 800cb00:	2100      	movs	r1, #0
 800cb02:	f241 0204 	movw	r2, #4100	; 0x1004
 800cb06:	5099      	str	r1, [r3, r2]
}
 800cb08:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb0c:	20009278 	.word	0x20009278

0800cb10 <low_level_init>:
{ 
 800cb10:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cb12:	b08d      	sub	sp, #52	; 0x34
 800cb14:	4604      	mov	r4, r0
  uint32_t regvalue = 0;
 800cb16:	2300      	movs	r3, #0
 800cb18:	930b      	str	r3, [sp, #44]	; 0x2c
  heth.Instance = ETH;
 800cb1a:	483e      	ldr	r0, [pc, #248]	; (800cc14 <low_level_init+0x104>)
 800cb1c:	4a3e      	ldr	r2, [pc, #248]	; (800cc18 <low_level_init+0x108>)
 800cb1e:	6002      	str	r2, [r0, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800cb20:	2201      	movs	r2, #1
 800cb22:	6042      	str	r2, [r0, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 800cb24:	8203      	strh	r3, [r0, #16]
  MACAddr[0] = 0x00;
 800cb26:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  MACAddr[1] = 0x80;
 800cb2a:	2180      	movs	r1, #128	; 0x80
 800cb2c:	f88d 1025 	strb.w	r1, [sp, #37]	; 0x25
  MACAddr[2] = 0xE1;
 800cb30:	21e1      	movs	r1, #225	; 0xe1
 800cb32:	f88d 1026 	strb.w	r1, [sp, #38]	; 0x26
  MACAddr[3] = 0x00;
 800cb36:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
  MACAddr[4] = 0x00;
 800cb3a:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
  MACAddr[5] = 0x00;
 800cb3e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
  heth.Init.MACAddr = &MACAddr[0];
 800cb42:	a909      	add	r1, sp, #36	; 0x24
 800cb44:	6141      	str	r1, [r0, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 800cb46:	6182      	str	r2, [r0, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800cb48:	61c3      	str	r3, [r0, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800cb4a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800cb4e:	6203      	str	r3, [r0, #32]
  hal_eth_init_status = HAL_ETH_Init(&heth);
 800cb50:	f7f4 f888 	bl	8000c64 <HAL_ETH_Init>
  if (hal_eth_init_status == HAL_OK)
 800cb54:	b928      	cbnz	r0, 800cb62 <low_level_init+0x52>
    netif->flags |= NETIF_FLAG_LINK_UP;
 800cb56:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 800cb5a:	f043 0304 	orr.w	r3, r3, #4
 800cb5e:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800cb62:	4f2c      	ldr	r7, [pc, #176]	; (800cc14 <low_level_init+0x104>)
 800cb64:	2304      	movs	r3, #4
 800cb66:	4a2d      	ldr	r2, [pc, #180]	; (800cc1c <low_level_init+0x10c>)
 800cb68:	492d      	ldr	r1, [pc, #180]	; (800cc20 <low_level_init+0x110>)
 800cb6a:	4638      	mov	r0, r7
 800cb6c:	f7f3 fe6e 	bl	800084c <HAL_ETH_DMATxDescListInit>
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 800cb70:	2304      	movs	r3, #4
 800cb72:	4a2c      	ldr	r2, [pc, #176]	; (800cc24 <low_level_init+0x114>)
 800cb74:	492c      	ldr	r1, [pc, #176]	; (800cc28 <low_level_init+0x118>)
 800cb76:	4638      	mov	r0, r7
 800cb78:	f7f3 fea1 	bl	80008be <HAL_ETH_DMARxDescListInit>
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800cb7c:	2306      	movs	r3, #6
 800cb7e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800cb82:	697b      	ldr	r3, [r7, #20]
 800cb84:	781a      	ldrb	r2, [r3, #0]
 800cb86:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800cb8a:	785a      	ldrb	r2, [r3, #1]
 800cb8c:	f884 2026 	strb.w	r2, [r4, #38]	; 0x26
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800cb90:	789a      	ldrb	r2, [r3, #2]
 800cb92:	f884 2027 	strb.w	r2, [r4, #39]	; 0x27
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800cb96:	78da      	ldrb	r2, [r3, #3]
 800cb98:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800cb9c:	791a      	ldrb	r2, [r3, #4]
 800cb9e:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800cba2:	795b      	ldrb	r3, [r3, #5]
 800cba4:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
  netif->mtu = 1500;
 800cba8:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800cbac:	8463      	strh	r3, [r4, #34]	; 0x22
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800cbae:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 800cbb2:	f043 030a 	orr.w	r3, r3, #10
 800cbb6:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
  osSemaphoreDef(SEM);
 800cbba:	2300      	movs	r3, #0
 800cbbc:	9307      	str	r3, [sp, #28]
 800cbbe:	9308      	str	r3, [sp, #32]
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM) , 1 );
 800cbc0:	2101      	movs	r1, #1
 800cbc2:	a807      	add	r0, sp, #28
 800cbc4:	f7f5 fbca 	bl	800235c <osSemaphoreCreate>
 800cbc8:	4b18      	ldr	r3, [pc, #96]	; (800cc2c <low_level_init+0x11c>)
 800cbca:	6018      	str	r0, [r3, #0]
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800cbcc:	466d      	mov	r5, sp
 800cbce:	4e18      	ldr	r6, [pc, #96]	; (800cc30 <low_level_init+0x120>)
 800cbd0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800cbd2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800cbd4:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800cbd8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 800cbdc:	4621      	mov	r1, r4
 800cbde:	4668      	mov	r0, sp
 800cbe0:	f7f5 fb0d 	bl	80021fe <osThreadCreate>
  HAL_ETH_Start(&heth);
 800cbe4:	4638      	mov	r0, r7
 800cbe6:	f7f4 f969 	bl	8000ebc <HAL_ETH_Start>
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 800cbea:	aa0b      	add	r2, sp, #44	; 0x2c
 800cbec:	211d      	movs	r1, #29
 800cbee:	4638      	mov	r0, r7
 800cbf0:	f7f3 ffc2 	bl	8000b78 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 800cbf4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800cbf6:	f042 020b 	orr.w	r2, r2, #11
 800cbfa:	920b      	str	r2, [sp, #44]	; 0x2c
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 800cbfc:	211d      	movs	r1, #29
 800cbfe:	4638      	mov	r0, r7
 800cc00:	f7f3 fff6 	bl	8000bf0 <HAL_ETH_WritePHYRegister>
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 800cc04:	aa0b      	add	r2, sp, #44	; 0x2c
 800cc06:	211d      	movs	r1, #29
 800cc08:	4638      	mov	r0, r7
 800cc0a:	f7f3 ffb5 	bl	8000b78 <HAL_ETH_ReadPHYRegister>
}
 800cc0e:	b00d      	add	sp, #52	; 0x34
 800cc10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cc12:	bf00      	nop
 800cc14:	20009278 	.word	0x20009278
 800cc18:	40028000 	.word	0x40028000
 800cc1c:	200092c0 	.word	0x200092c0
 800cc20:	200079a8 	.word	0x200079a8
 800cc24:	20007a28 	.word	0x20007a28
 800cc28:	200091f8 	.word	0x200091f8
 800cc2c:	20003fd0 	.word	0x20003fd0
 800cc30:	0800dcf4 	.word	0x0800dcf4

0800cc34 <HAL_ETH_MspInit>:
{
 800cc34:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc36:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cc38:	2300      	movs	r3, #0
 800cc3a:	9307      	str	r3, [sp, #28]
 800cc3c:	9308      	str	r3, [sp, #32]
 800cc3e:	9309      	str	r3, [sp, #36]	; 0x24
 800cc40:	930a      	str	r3, [sp, #40]	; 0x28
 800cc42:	930b      	str	r3, [sp, #44]	; 0x2c
  if(ethHandle->Instance==ETH)
 800cc44:	6802      	ldr	r2, [r0, #0]
 800cc46:	4b3d      	ldr	r3, [pc, #244]	; (800cd3c <HAL_ETH_MspInit+0x108>)
 800cc48:	429a      	cmp	r2, r3
 800cc4a:	d001      	beq.n	800cc50 <HAL_ETH_MspInit+0x1c>
}
 800cc4c:	b00d      	add	sp, #52	; 0x34
 800cc4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ETH_CLK_ENABLE();
 800cc50:	2400      	movs	r4, #0
 800cc52:	9400      	str	r4, [sp, #0]
 800cc54:	f5a3 4390 	sub.w	r3, r3, #18432	; 0x4800
 800cc58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cc5a:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800cc5e:	631a      	str	r2, [r3, #48]	; 0x30
 800cc60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cc62:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 800cc66:	9200      	str	r2, [sp, #0]
 800cc68:	9a00      	ldr	r2, [sp, #0]
 800cc6a:	9401      	str	r4, [sp, #4]
 800cc6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cc6e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800cc72:	631a      	str	r2, [r3, #48]	; 0x30
 800cc74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cc76:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 800cc7a:	9201      	str	r2, [sp, #4]
 800cc7c:	9a01      	ldr	r2, [sp, #4]
 800cc7e:	9402      	str	r4, [sp, #8]
 800cc80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cc82:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800cc86:	631a      	str	r2, [r3, #48]	; 0x30
 800cc88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cc8a:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800cc8e:	9202      	str	r2, [sp, #8]
 800cc90:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800cc92:	9403      	str	r4, [sp, #12]
 800cc94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cc96:	f042 0204 	orr.w	r2, r2, #4
 800cc9a:	631a      	str	r2, [r3, #48]	; 0x30
 800cc9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cc9e:	f002 0204 	and.w	r2, r2, #4
 800cca2:	9203      	str	r2, [sp, #12]
 800cca4:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cca6:	9404      	str	r4, [sp, #16]
 800cca8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ccaa:	f042 0201 	orr.w	r2, r2, #1
 800ccae:	631a      	str	r2, [r3, #48]	; 0x30
 800ccb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ccb2:	f002 0201 	and.w	r2, r2, #1
 800ccb6:	9204      	str	r2, [sp, #16]
 800ccb8:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ccba:	9405      	str	r4, [sp, #20]
 800ccbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ccbe:	f042 0202 	orr.w	r2, r2, #2
 800ccc2:	631a      	str	r2, [r3, #48]	; 0x30
 800ccc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ccc6:	f002 0202 	and.w	r2, r2, #2
 800ccca:	9205      	str	r2, [sp, #20]
 800cccc:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800ccce:	9406      	str	r4, [sp, #24]
 800ccd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ccd2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ccd6:	631a      	str	r2, [r3, #48]	; 0x30
 800ccd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ccda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ccde:	9306      	str	r3, [sp, #24]
 800cce0:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800cce2:	2332      	movs	r3, #50	; 0x32
 800cce4:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cce6:	2702      	movs	r7, #2
 800cce8:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ccea:	2603      	movs	r6, #3
 800ccec:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800ccee:	250b      	movs	r5, #11
 800ccf0:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ccf2:	a907      	add	r1, sp, #28
 800ccf4:	4812      	ldr	r0, [pc, #72]	; (800cd40 <HAL_ETH_MspInit+0x10c>)
 800ccf6:	f7f4 f903 	bl	8000f00 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800ccfa:	2386      	movs	r3, #134	; 0x86
 800ccfc:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ccfe:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cd00:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cd02:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800cd04:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cd06:	a907      	add	r1, sp, #28
 800cd08:	480e      	ldr	r0, [pc, #56]	; (800cd44 <HAL_ETH_MspInit+0x110>)
 800cd0a:	f7f4 f8f9 	bl	8000f00 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800cd0e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800cd12:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cd14:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cd16:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cd18:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800cd1a:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800cd1c:	a907      	add	r1, sp, #28
 800cd1e:	480a      	ldr	r0, [pc, #40]	; (800cd48 <HAL_ETH_MspInit+0x114>)
 800cd20:	f7f4 f8ee 	bl	8000f00 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800cd24:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800cd28:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cd2a:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cd2c:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cd2e:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800cd30:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800cd32:	a907      	add	r1, sp, #28
 800cd34:	4805      	ldr	r0, [pc, #20]	; (800cd4c <HAL_ETH_MspInit+0x118>)
 800cd36:	f7f4 f8e3 	bl	8000f00 <HAL_GPIO_Init>
}
 800cd3a:	e787      	b.n	800cc4c <HAL_ETH_MspInit+0x18>
 800cd3c:	40028000 	.word	0x40028000
 800cd40:	40020800 	.word	0x40020800
 800cd44:	40020000 	.word	0x40020000
 800cd48:	40020400 	.word	0x40020400
 800cd4c:	40021800 	.word	0x40021800

0800cd50 <HAL_ETH_RxCpltCallback>:
{
 800cd50:	b508      	push	{r3, lr}
  osSemaphoreRelease(s_xSemaphore);
 800cd52:	4b02      	ldr	r3, [pc, #8]	; (800cd5c <HAL_ETH_RxCpltCallback+0xc>)
 800cd54:	6818      	ldr	r0, [r3, #0]
 800cd56:	f7f5 fb5f 	bl	8002418 <osSemaphoreRelease>
 800cd5a:	bd08      	pop	{r3, pc}
 800cd5c:	20003fd0 	.word	0x20003fd0

0800cd60 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800cd60:	b510      	push	{r4, lr}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800cd62:	4604      	mov	r4, r0
 800cd64:	b170      	cbz	r0, 800cd84 <ethernetif_init+0x24>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800cd66:	2373      	movs	r3, #115	; 0x73
 800cd68:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  netif->name[1] = IFNAME1;
 800cd6c:	2374      	movs	r3, #116	; 0x74
 800cd6e:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800cd72:	4b08      	ldr	r3, [pc, #32]	; (800cd94 <ethernetif_init+0x34>)
 800cd74:	6163      	str	r3, [r4, #20]
 
#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800cd76:	4b08      	ldr	r3, [pc, #32]	; (800cd98 <ethernetif_init+0x38>)
 800cd78:	61a3      	str	r3, [r4, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800cd7a:	4620      	mov	r0, r4
 800cd7c:	f7ff fec8 	bl	800cb10 <low_level_init>

  return ERR_OK;
}
 800cd80:	2000      	movs	r0, #0
 800cd82:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800cd84:	4b05      	ldr	r3, [pc, #20]	; (800cd9c <ethernetif_init+0x3c>)
 800cd86:	f240 222a 	movw	r2, #554	; 0x22a
 800cd8a:	4905      	ldr	r1, [pc, #20]	; (800cda0 <ethernetif_init+0x40>)
 800cd8c:	4805      	ldr	r0, [pc, #20]	; (800cda4 <ethernetif_init+0x44>)
 800cd8e:	f000 fc34 	bl	800d5fa <iprintf>
 800cd92:	e7e8      	b.n	800cd66 <ethernetif_init+0x6>
 800cd94:	08006891 	.word	0x08006891
 800cd98:	0800ca55 	.word	0x0800ca55
 800cd9c:	0800ff88 	.word	0x0800ff88
 800cda0:	0800e7b0 	.word	0x0800e7b0
 800cda4:	0800de34 	.word	0x0800de34

0800cda8 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 800cda8:	b508      	push	{r3, lr}
  return HAL_GetTick();
 800cdaa:	f7f3 fbd7 	bl	800055c <HAL_GetTick>
}
 800cdae:	bd08      	pop	{r3, pc}

0800cdb0 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800cdb0:	b508      	push	{r3, lr}
  /* init code for LWIP */
  MX_LWIP_Init();
 800cdb2:	f000 f913 	bl	800cfdc <MX_LWIP_Init>
 800cdb6:	e002      	b.n	800cdbe <StartDefaultTask+0xe>
			if(accepted_socket < 0)
			{
				accepted_socket = server_accept(gsocket_desc_server);
			}
		}
		osDelay(1);
 800cdb8:	2001      	movs	r0, #1
 800cdba:	f7f5 fa55 	bl	8002268 <osDelay>
		if (gsocket_desc_server == -1)
 800cdbe:	4b06      	ldr	r3, [pc, #24]	; (800cdd8 <StartDefaultTask+0x28>)
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cdc6:	d1f7      	bne.n	800cdb8 <StartDefaultTask+0x8>
			gsocket_desc_server = lets_set_server(KLISTEN_PORT);
 800cdc8:	f241 308a 	movw	r0, #5002	; 0x138a
 800cdcc:	f000 fa10 	bl	800d1f0 <lets_set_server>
 800cdd0:	4b01      	ldr	r3, [pc, #4]	; (800cdd8 <StartDefaultTask+0x28>)
 800cdd2:	6018      	str	r0, [r3, #0]
 800cdd4:	e7f0      	b.n	800cdb8 <StartDefaultTask+0x8>
 800cdd6:	bf00      	nop
 800cdd8:	20000010 	.word	0x20000010

0800cddc <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 800cddc:	b508      	push	{r3, lr}
//		  {
//			  close(gsocket_desc);
//			  gsocket_desc = -1;
//		  }
//	  }
	  osDelay(1);
 800cdde:	2001      	movs	r0, #1
 800cde0:	f7f5 fa42 	bl	8002268 <osDelay>
 800cde4:	e7fb      	b.n	800cdde <StartTask02+0x2>
	...

0800cde8 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 800cde8:	b508      	push	{r3, lr}
 800cdea:	e009      	b.n	800ce00 <StartTask03+0x18>
  {
//	  c = sizeof(struct sockaddr_in);
		//create a socket and set the server
		if (gsocket_desc_server == -1)
		{
			gsocket_desc_server = lets_set_server(KLISTEN_PORT);
 800cdec:	f241 308a 	movw	r0, #5002	; 0x138a
 800cdf0:	f000 f9fe 	bl	800d1f0 <lets_set_server>
 800cdf4:	4b08      	ldr	r3, [pc, #32]	; (800ce18 <StartTask03+0x30>)
 800cdf6:	6018      	str	r0, [r3, #0]
 800cdf8:	e007      	b.n	800ce0a <StartTask03+0x22>
		//waiting for connect from client
		if (gsocket_desc_server >= 0)
		{
			server_accept(gsocket_desc_server);
		}
    osDelay(1);
 800cdfa:	2001      	movs	r0, #1
 800cdfc:	f7f5 fa34 	bl	8002268 <osDelay>
		if (gsocket_desc_server == -1)
 800ce00:	4b05      	ldr	r3, [pc, #20]	; (800ce18 <StartTask03+0x30>)
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ce08:	d0f0      	beq.n	800cdec <StartTask03+0x4>
		if (gsocket_desc_server >= 0)
 800ce0a:	4b03      	ldr	r3, [pc, #12]	; (800ce18 <StartTask03+0x30>)
 800ce0c:	6818      	ldr	r0, [r3, #0]
 800ce0e:	2800      	cmp	r0, #0
 800ce10:	dbf3      	blt.n	800cdfa <StartTask03+0x12>
			server_accept(gsocket_desc_server);
 800ce12:	f000 fa41 	bl	800d298 <server_accept>
 800ce16:	e7f0      	b.n	800cdfa <StartTask03+0x12>
 800ce18:	20000010 	.word	0x20000010

0800ce1c <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void const * argument)
{
 800ce1c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN StartTask04 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800ce1e:	2001      	movs	r0, #1
 800ce20:	f7f5 fa22 	bl	8002268 <osDelay>
 800ce24:	e7fb      	b.n	800ce1e <StartTask04+0x2>
	...

0800ce28 <vApplicationGetIdleTaskMemory>:
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800ce28:	4b03      	ldr	r3, [pc, #12]	; (800ce38 <vApplicationGetIdleTaskMemory+0x10>)
 800ce2a:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800ce2c:	4b03      	ldr	r3, [pc, #12]	; (800ce3c <vApplicationGetIdleTaskMemory+0x14>)
 800ce2e:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800ce30:	2380      	movs	r3, #128	; 0x80
 800ce32:	6013      	str	r3, [r2, #0]
 800ce34:	4770      	bx	lr
 800ce36:	bf00      	nop
 800ce38:	200041d4 	.word	0x200041d4
 800ce3c:	20003fd4 	.word	0x20003fd4

0800ce40 <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 800ce40:	b570      	push	{r4, r5, r6, lr}
 800ce42:	b09c      	sub	sp, #112	; 0x70
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800ce44:	4c1e      	ldr	r4, [pc, #120]	; (800cec0 <MX_FREERTOS_Init+0x80>)
 800ce46:	ad15      	add	r5, sp, #84	; 0x54
 800ce48:	4626      	mov	r6, r4
 800ce4a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800ce4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ce4e:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800ce52:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800ce56:	2100      	movs	r1, #0
 800ce58:	a815      	add	r0, sp, #84	; 0x54
 800ce5a:	f7f5 f9d0 	bl	80021fe <osThreadCreate>
 800ce5e:	4b19      	ldr	r3, [pc, #100]	; (800cec4 <MX_FREERTOS_Init+0x84>)
 800ce60:	6018      	str	r0, [r3, #0]
  osThreadDef(myTask02, StartTask02, osPriorityNormal, 0, 128);
 800ce62:	ad0e      	add	r5, sp, #56	; 0x38
 800ce64:	f104 061c 	add.w	r6, r4, #28
 800ce68:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800ce6a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ce6c:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800ce70:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 800ce74:	2100      	movs	r1, #0
 800ce76:	a80e      	add	r0, sp, #56	; 0x38
 800ce78:	f7f5 f9c1 	bl	80021fe <osThreadCreate>
 800ce7c:	4b12      	ldr	r3, [pc, #72]	; (800cec8 <MX_FREERTOS_Init+0x88>)
 800ce7e:	6018      	str	r0, [r3, #0]
  osThreadDef(myTask03, StartTask03, osPriorityNormal, 0, 128);
 800ce80:	ad07      	add	r5, sp, #28
 800ce82:	f104 0638 	add.w	r6, r4, #56	; 0x38
 800ce86:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800ce88:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ce8a:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800ce8e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  myTask03Handle = osThreadCreate(osThread(myTask03), NULL);
 800ce92:	2100      	movs	r1, #0
 800ce94:	a807      	add	r0, sp, #28
 800ce96:	f7f5 f9b2 	bl	80021fe <osThreadCreate>
 800ce9a:	4b0c      	ldr	r3, [pc, #48]	; (800cecc <MX_FREERTOS_Init+0x8c>)
 800ce9c:	6018      	str	r0, [r3, #0]
  osThreadDef(myTask04, StartTask04, osPriorityNormal, 0, 128);
 800ce9e:	466d      	mov	r5, sp
 800cea0:	3454      	adds	r4, #84	; 0x54
 800cea2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cea4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800cea6:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800ceaa:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  myTask04Handle = osThreadCreate(osThread(myTask04), NULL);
 800ceae:	2100      	movs	r1, #0
 800ceb0:	4668      	mov	r0, sp
 800ceb2:	f7f5 f9a4 	bl	80021fe <osThreadCreate>
 800ceb6:	4b06      	ldr	r3, [pc, #24]	; (800ced0 <MX_FREERTOS_Init+0x90>)
 800ceb8:	6018      	str	r0, [r3, #0]
}
 800ceba:	b01c      	add	sp, #112	; 0x70
 800cebc:	bd70      	pop	{r4, r5, r6, pc}
 800cebe:	bf00      	nop
 800cec0:	0800dd10 	.word	0x0800dd10
 800cec4:	2000aa90 	.word	0x2000aa90
 800cec8:	2000aa98 	.word	0x2000aa98
 800cecc:	2000aa9c 	.word	0x2000aa9c
 800ced0:	2000aa94 	.word	0x2000aa94

0800ced4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800ced4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ced6:	b08d      	sub	sp, #52	; 0x34

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ced8:	2400      	movs	r4, #0
 800ceda:	9407      	str	r4, [sp, #28]
 800cedc:	9408      	str	r4, [sp, #32]
 800cede:	9409      	str	r4, [sp, #36]	; 0x24
 800cee0:	940a      	str	r4, [sp, #40]	; 0x28
 800cee2:	940b      	str	r4, [sp, #44]	; 0x2c

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800cee4:	9401      	str	r4, [sp, #4]
 800cee6:	4b38      	ldr	r3, [pc, #224]	; (800cfc8 <MX_GPIO_Init+0xf4>)
 800cee8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ceea:	f042 0204 	orr.w	r2, r2, #4
 800ceee:	631a      	str	r2, [r3, #48]	; 0x30
 800cef0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cef2:	f002 0204 	and.w	r2, r2, #4
 800cef6:	9201      	str	r2, [sp, #4]
 800cef8:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800cefa:	9402      	str	r4, [sp, #8]
 800cefc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cefe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800cf02:	631a      	str	r2, [r3, #48]	; 0x30
 800cf04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cf06:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800cf0a:	9202      	str	r2, [sp, #8]
 800cf0c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800cf0e:	9403      	str	r4, [sp, #12]
 800cf10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cf12:	f042 0201 	orr.w	r2, r2, #1
 800cf16:	631a      	str	r2, [r3, #48]	; 0x30
 800cf18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cf1a:	f002 0201 	and.w	r2, r2, #1
 800cf1e:	9203      	str	r2, [sp, #12]
 800cf20:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800cf22:	9404      	str	r4, [sp, #16]
 800cf24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cf26:	f042 0202 	orr.w	r2, r2, #2
 800cf2a:	631a      	str	r2, [r3, #48]	; 0x30
 800cf2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cf2e:	f002 0202 	and.w	r2, r2, #2
 800cf32:	9204      	str	r2, [sp, #16]
 800cf34:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800cf36:	9405      	str	r4, [sp, #20]
 800cf38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cf3a:	f042 0208 	orr.w	r2, r2, #8
 800cf3e:	631a      	str	r2, [r3, #48]	; 0x30
 800cf40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cf42:	f002 0208 	and.w	r2, r2, #8
 800cf46:	9205      	str	r2, [sp, #20]
 800cf48:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800cf4a:	9406      	str	r4, [sp, #24]
 800cf4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cf4e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cf52:	631a      	str	r2, [r3, #48]	; 0x30
 800cf54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cf5a:	9306      	str	r3, [sp, #24]
 800cf5c:	9b06      	ldr	r3, [sp, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800cf5e:	4f1b      	ldr	r7, [pc, #108]	; (800cfcc <MX_GPIO_Init+0xf8>)
 800cf60:	4622      	mov	r2, r4
 800cf62:	f244 0181 	movw	r1, #16513	; 0x4081
 800cf66:	4638      	mov	r0, r7
 800cf68:	f7f4 f8bc 	bl	80010e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800cf6c:	4d18      	ldr	r5, [pc, #96]	; (800cfd0 <MX_GPIO_Init+0xfc>)
 800cf6e:	4622      	mov	r2, r4
 800cf70:	2140      	movs	r1, #64	; 0x40
 800cf72:	4628      	mov	r0, r5
 800cf74:	f7f4 f8b6 	bl	80010e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800cf78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800cf7c:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800cf7e:	4b15      	ldr	r3, [pc, #84]	; (800cfd4 <MX_GPIO_Init+0x100>)
 800cf80:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cf82:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800cf84:	a907      	add	r1, sp, #28
 800cf86:	4814      	ldr	r0, [pc, #80]	; (800cfd8 <MX_GPIO_Init+0x104>)
 800cf88:	f7f3 ffba 	bl	8000f00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800cf8c:	f244 0381 	movw	r3, #16513	; 0x4081
 800cf90:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800cf92:	2601      	movs	r6, #1
 800cf94:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cf96:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cf98:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800cf9a:	a907      	add	r1, sp, #28
 800cf9c:	4638      	mov	r0, r7
 800cf9e:	f7f3 ffaf 	bl	8000f00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800cfa2:	2340      	movs	r3, #64	; 0x40
 800cfa4:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800cfa6:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cfa8:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cfaa:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800cfac:	a907      	add	r1, sp, #28
 800cfae:	4628      	mov	r0, r5
 800cfb0:	f7f3 ffa6 	bl	8000f00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800cfb4:	2380      	movs	r3, #128	; 0x80
 800cfb6:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800cfb8:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cfba:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800cfbc:	a907      	add	r1, sp, #28
 800cfbe:	4628      	mov	r0, r5
 800cfc0:	f7f3 ff9e 	bl	8000f00 <HAL_GPIO_Init>

}
 800cfc4:	b00d      	add	sp, #52	; 0x34
 800cfc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cfc8:	40023800 	.word	0x40023800
 800cfcc:	40020400 	.word	0x40020400
 800cfd0:	40021800 	.word	0x40021800
 800cfd4:	10110000 	.word	0x10110000
 800cfd8:	40020800 	.word	0x40020800

0800cfdc <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800cfdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cfde:	b085      	sub	sp, #20
  /* IP addresses initialization */
  IP_ADDRESS[0] = 10;
 800cfe0:	4f3b      	ldr	r7, [pc, #236]	; (800d0d0 <MX_LWIP_Init+0xf4>)
 800cfe2:	220a      	movs	r2, #10
 800cfe4:	703a      	strb	r2, [r7, #0]
  IP_ADDRESS[1] = 1;
 800cfe6:	2301      	movs	r3, #1
 800cfe8:	707b      	strb	r3, [r7, #1]
  IP_ADDRESS[2] = 103;
 800cfea:	2167      	movs	r1, #103	; 0x67
 800cfec:	70b9      	strb	r1, [r7, #2]
  IP_ADDRESS[3] = 101;
 800cfee:	2165      	movs	r1, #101	; 0x65
 800cff0:	70f9      	strb	r1, [r7, #3]
  NETMASK_ADDRESS[0] = 255;
 800cff2:	4e38      	ldr	r6, [pc, #224]	; (800d0d4 <MX_LWIP_Init+0xf8>)
 800cff4:	21ff      	movs	r1, #255	; 0xff
 800cff6:	7031      	strb	r1, [r6, #0]
  NETMASK_ADDRESS[1] = 255;
 800cff8:	7071      	strb	r1, [r6, #1]
  NETMASK_ADDRESS[2] = 0;
 800cffa:	2400      	movs	r4, #0
 800cffc:	70b4      	strb	r4, [r6, #2]
  NETMASK_ADDRESS[3] = 0;
 800cffe:	70f4      	strb	r4, [r6, #3]
  GATEWAY_ADDRESS[0] = 10;
 800d000:	4d35      	ldr	r5, [pc, #212]	; (800d0d8 <MX_LWIP_Init+0xfc>)
 800d002:	702a      	strb	r2, [r5, #0]
  GATEWAY_ADDRESS[1] = 1;
 800d004:	706b      	strb	r3, [r5, #1]
  GATEWAY_ADDRESS[2] = 1;
 800d006:	70ab      	strb	r3, [r5, #2]
  GATEWAY_ADDRESS[3] = 1;
 800d008:	70eb      	strb	r3, [r5, #3]
  
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800d00a:	4621      	mov	r1, r4
 800d00c:	4620      	mov	r0, r4
 800d00e:	f7f8 ffff 	bl	8006010 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800d012:	783a      	ldrb	r2, [r7, #0]
 800d014:	787b      	ldrb	r3, [r7, #1]
 800d016:	041b      	lsls	r3, r3, #16
 800d018:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d01c:	78ba      	ldrb	r2, [r7, #2]
 800d01e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d022:	78fa      	ldrb	r2, [r7, #3]
 800d024:	4313      	orrs	r3, r2
 800d026:	021a      	lsls	r2, r3, #8
 800d028:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 800d02c:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
 800d030:	0a19      	lsrs	r1, r3, #8
 800d032:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 800d036:	430a      	orrs	r2, r1
 800d038:	ea42 6313 	orr.w	r3, r2, r3, lsr #24
 800d03c:	4927      	ldr	r1, [pc, #156]	; (800d0dc <MX_LWIP_Init+0x100>)
 800d03e:	600b      	str	r3, [r1, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800d040:	7832      	ldrb	r2, [r6, #0]
 800d042:	7873      	ldrb	r3, [r6, #1]
 800d044:	041b      	lsls	r3, r3, #16
 800d046:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d04a:	78b2      	ldrb	r2, [r6, #2]
 800d04c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d050:	78f2      	ldrb	r2, [r6, #3]
 800d052:	4313      	orrs	r3, r2
 800d054:	021a      	lsls	r2, r3, #8
 800d056:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 800d05a:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
 800d05e:	0a18      	lsrs	r0, r3, #8
 800d060:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 800d064:	4302      	orrs	r2, r0
 800d066:	ea42 6313 	orr.w	r3, r2, r3, lsr #24
 800d06a:	4a1d      	ldr	r2, [pc, #116]	; (800d0e0 <MX_LWIP_Init+0x104>)
 800d06c:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800d06e:	7828      	ldrb	r0, [r5, #0]
 800d070:	786b      	ldrb	r3, [r5, #1]
 800d072:	041b      	lsls	r3, r3, #16
 800d074:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800d078:	78a8      	ldrb	r0, [r5, #2]
 800d07a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800d07e:	78e8      	ldrb	r0, [r5, #3]
 800d080:	4303      	orrs	r3, r0
 800d082:	0218      	lsls	r0, r3, #8
 800d084:	f400 007f 	and.w	r0, r0, #16711680	; 0xff0000
 800d088:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800d08c:	0a1d      	lsrs	r5, r3, #8
 800d08e:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 800d092:	4328      	orrs	r0, r5
 800d094:	ea40 6013 	orr.w	r0, r0, r3, lsr #24
 800d098:	4b12      	ldr	r3, [pc, #72]	; (800d0e4 <MX_LWIP_Init+0x108>)
 800d09a:	6018      	str	r0, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800d09c:	4d12      	ldr	r5, [pc, #72]	; (800d0e8 <MX_LWIP_Init+0x10c>)
 800d09e:	4813      	ldr	r0, [pc, #76]	; (800d0ec <MX_LWIP_Init+0x110>)
 800d0a0:	9002      	str	r0, [sp, #8]
 800d0a2:	4813      	ldr	r0, [pc, #76]	; (800d0f0 <MX_LWIP_Init+0x114>)
 800d0a4:	9001      	str	r0, [sp, #4]
 800d0a6:	9400      	str	r4, [sp, #0]
 800d0a8:	4628      	mov	r0, r5
 800d0aa:	f7fa feb9 	bl	8007e20 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800d0ae:	4628      	mov	r0, r5
 800d0b0:	f7fa fef6 	bl	8007ea0 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800d0b4:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
 800d0b8:	f013 0f04 	tst.w	r3, #4
 800d0bc:	d104      	bne.n	800d0c8 <MX_LWIP_Init+0xec>
    netif_set_up(&gnetif);
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800d0be:	480a      	ldr	r0, [pc, #40]	; (800d0e8 <MX_LWIP_Init+0x10c>)
 800d0c0:	f7fa ff06 	bl	8007ed0 <netif_set_down>
  }

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800d0c4:	b005      	add	sp, #20
 800d0c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    netif_set_up(&gnetif);
 800d0c8:	4628      	mov	r0, r5
 800d0ca:	f7fa feef 	bl	8007eac <netif_set_up>
 800d0ce:	e7f9      	b.n	800d0c4 <MX_LWIP_Init+0xe8>
 800d0d0:	2000aadc 	.word	0x2000aadc
 800d0d4:	2000aad8 	.word	0x2000aad8
 800d0d8:	2000aaa0 	.word	0x2000aaa0
 800d0dc:	2000aad4 	.word	0x2000aad4
 800d0e0:	2000aae0 	.word	0x2000aae0
 800d0e4:	2000aae4 	.word	0x2000aae4
 800d0e8:	2000aaa4 	.word	0x2000aaa4
 800d0ec:	08005f59 	.word	0x08005f59
 800d0f0:	0800cd61 	.word	0x0800cd61

0800d0f4 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 800d0f4:	b508      	push	{r3, lr}
  /* ETH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800d0f6:	2200      	movs	r2, #0
 800d0f8:	2105      	movs	r1, #5
 800d0fa:	203d      	movs	r0, #61	; 0x3d
 800d0fc:	f7f3 fa5a 	bl	80005b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ETH_IRQn);
 800d100:	203d      	movs	r0, #61	; 0x3d
 800d102:	f7f3 fa89 	bl	8000618 <HAL_NVIC_EnableIRQ>
 800d106:	bd08      	pop	{r3, pc}

0800d108 <SystemClock_Config>:
{
 800d108:	b530      	push	{r4, r5, lr}
 800d10a:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800d10c:	2230      	movs	r2, #48	; 0x30
 800d10e:	2100      	movs	r1, #0
 800d110:	a808      	add	r0, sp, #32
 800d112:	f000 fbe9 	bl	800d8e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800d116:	2400      	movs	r4, #0
 800d118:	9403      	str	r4, [sp, #12]
 800d11a:	9404      	str	r4, [sp, #16]
 800d11c:	9405      	str	r4, [sp, #20]
 800d11e:	9406      	str	r4, [sp, #24]
 800d120:	9407      	str	r4, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 800d122:	9401      	str	r4, [sp, #4]
 800d124:	4b1c      	ldr	r3, [pc, #112]	; (800d198 <SystemClock_Config+0x90>)
 800d126:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d128:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800d12c:	641a      	str	r2, [r3, #64]	; 0x40
 800d12e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d130:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d134:	9301      	str	r3, [sp, #4]
 800d136:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800d138:	9402      	str	r4, [sp, #8]
 800d13a:	4b18      	ldr	r3, [pc, #96]	; (800d19c <SystemClock_Config+0x94>)
 800d13c:	681a      	ldr	r2, [r3, #0]
 800d13e:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800d142:	601a      	str	r2, [r3, #0]
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800d14a:	9302      	str	r3, [sp, #8]
 800d14c:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800d14e:	2301      	movs	r3, #1
 800d150:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800d152:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800d156:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800d158:	2502      	movs	r5, #2
 800d15a:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800d15c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800d160:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800d162:	2304      	movs	r3, #4
 800d164:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800d166:	23a8      	movs	r3, #168	; 0xa8
 800d168:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800d16a:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800d16c:	2307      	movs	r3, #7
 800d16e:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800d170:	a808      	add	r0, sp, #32
 800d172:	f7f4 f84f 	bl	8001214 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800d176:	230f      	movs	r3, #15
 800d178:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800d17a:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800d17c:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800d17e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800d182:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800d184:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d188:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800d18a:	2105      	movs	r1, #5
 800d18c:	a803      	add	r0, sp, #12
 800d18e:	f7f4 fa77 	bl	8001680 <HAL_RCC_ClockConfig>
}
 800d192:	b015      	add	sp, #84	; 0x54
 800d194:	bd30      	pop	{r4, r5, pc}
 800d196:	bf00      	nop
 800d198:	40023800 	.word	0x40023800
 800d19c:	40007000 	.word	0x40007000

0800d1a0 <main>:
{
 800d1a0:	b508      	push	{r3, lr}
  HAL_Init();
 800d1a2:	f7f3 f9b5 	bl	8000510 <HAL_Init>
  SystemClock_Config();
 800d1a6:	f7ff ffaf 	bl	800d108 <SystemClock_Config>
  MX_GPIO_Init();
 800d1aa:	f7ff fe93 	bl	800ced4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800d1ae:	f000 fa7f 	bl	800d6b0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800d1b2:	f000 fad1 	bl	800d758 <MX_USB_OTG_FS_PCD_Init>
  MX_NVIC_Init();
 800d1b6:	f7ff ff9d 	bl	800d0f4 <MX_NVIC_Init>
  MX_FREERTOS_Init();
 800d1ba:	f7ff fe41 	bl	800ce40 <MX_FREERTOS_Init>
  osKernelStart();
 800d1be:	f7f5 f80f 	bl	80021e0 <osKernelStart>
 800d1c2:	e7fe      	b.n	800d1c2 <main+0x22>

0800d1c4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d1c4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800d1c6:	6802      	ldr	r2, [r0, #0]
 800d1c8:	4b03      	ldr	r3, [pc, #12]	; (800d1d8 <HAL_TIM_PeriodElapsedCallback+0x14>)
 800d1ca:	429a      	cmp	r2, r3
 800d1cc:	d000      	beq.n	800d1d0 <HAL_TIM_PeriodElapsedCallback+0xc>
 800d1ce:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 800d1d0:	f7f3 f9b8 	bl	8000544 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800d1d4:	e7fb      	b.n	800d1ce <HAL_TIM_PeriodElapsedCallback+0xa>
 800d1d6:	bf00      	nop
 800d1d8:	40010000 	.word	0x40010000

0800d1dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800d1dc:	4770      	bx	lr

0800d1de <malloc>:
/* From :
 https://www.freertos.org/FreeRTOS_Support_Forum_Archive/Octobe
 r_2009/freertos_malloc_function_in_FreeRTOS_3444349.html */
/* Defining malloc/free should overwrite the standard versions
 provided by the compiler. */
void *malloc(size_t size) {
 800d1de:	b508      	push	{r3, lr}
	/* Call the FreeRTOS version of malloc. */
	return pvPortMalloc(size);
 800d1e0:	f7f5 fc6e 	bl	8002ac0 <pvPortMalloc>
}
 800d1e4:	bd08      	pop	{r3, pc}

0800d1e6 <free>:
void *calloc(size_t nmemb, size_t size) {
	/* Call the FreeRTOS version of calloc. */
	void * p = pvPortMalloc(size);
	return memset(p, 0, size);
}
void free(void *ptr) { /* Call the FreeRTOS version of free.*/
 800d1e6:	b508      	push	{r3, lr}
	vPortFree(ptr);
 800d1e8:	f7f5 fcee 	bl	8002bc8 <vPortFree>
 800d1ec:	bd08      	pop	{r3, pc}
	...

0800d1f0 <lets_set_server>:
#include <errno.h>
#include <mysocket_server.h>
#include <string.h>

int lets_set_server(int port)
{
 800d1f0:	b530      	push	{r4, r5, lr}
 800d1f2:	b085      	sub	sp, #20
 800d1f4:	4605      	mov	r5, r0
	struct sockaddr_in server;
	int socket;
	int ret;

	socket = socket(AF_INET , SOCK_STREAM , 0);
 800d1f6:	2200      	movs	r2, #0
 800d1f8:	2101      	movs	r1, #1
 800d1fa:	2002      	movs	r0, #2
 800d1fc:	f7f8 fddc 	bl	8005db8 <lwip_socket>
 800d200:	4604      	mov	r4, r0
	if (socket == -1)
 800d202:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800d206:	d020      	beq.n	800d24a <lets_set_server+0x5a>
	{
		printf("Could not create socket! code d'erreur (n°%d) -%s\n", errno, strerror(errno));
	}
	else
	{
		printf("socket server created\n");
 800d208:	481d      	ldr	r0, [pc, #116]	; (800d280 <lets_set_server+0x90>)
 800d20a:	f000 fa35 	bl	800d678 <puts>

		server.sin_addr.s_addr = INADDR_ANY;
 800d20e:	2300      	movs	r3, #0
 800d210:	9301      	str	r3, [sp, #4]
		server.sin_family = AF_INET;
 800d212:	2302      	movs	r3, #2
 800d214:	f88d 3001 	strb.w	r3, [sp, #1]
		server.sin_port = htons(port);
 800d218:	b2a8      	uxth	r0, r5
 800d21a:	f7f8 ff3b 	bl	8006094 <lwip_htons>
 800d21e:	f8ad 0002 	strh.w	r0, [sp, #2]

		//Connect to remote server
		ret = bind(socket , (struct sockaddr *)&server , sizeof(server));
 800d222:	2210      	movs	r2, #16
 800d224:	4669      	mov	r1, sp
 800d226:	4620      	mov	r0, r4
 800d228:	f7f8 fc3e 	bl	8005aa8 <lwip_bind>
		if (ret < 0)
 800d22c:	2800      	cmp	r0, #0
 800d22e:	db17      	blt.n	800d260 <lets_set_server+0x70>
			close(socket);
			socket = -1;
		}
		else
		{
			printf("binded (server)\n");
 800d230:	4814      	ldr	r0, [pc, #80]	; (800d284 <lets_set_server+0x94>)
 800d232:	f000 fa21 	bl	800d678 <puts>
		}
		listen(socket, 3);
 800d236:	2103      	movs	r1, #3
 800d238:	4620      	mov	r0, r4
 800d23a:	f7f8 fcbf 	bl	8005bbc <lwip_listen>
		printf("listening (server)\n");
 800d23e:	4812      	ldr	r0, [pc, #72]	; (800d288 <lets_set_server+0x98>)
 800d240:	f000 fa1a 	bl	800d678 <puts>
	}
	return socket;
}
 800d244:	4620      	mov	r0, r4
 800d246:	b005      	add	sp, #20
 800d248:	bd30      	pop	{r4, r5, pc}
		printf("Could not create socket! code d'erreur (n°%d) -%s\n", errno, strerror(errno));
 800d24a:	4b10      	ldr	r3, [pc, #64]	; (800d28c <lets_set_server+0x9c>)
 800d24c:	681d      	ldr	r5, [r3, #0]
 800d24e:	4628      	mov	r0, r5
 800d250:	f000 fd38 	bl	800dcc4 <strerror>
 800d254:	4602      	mov	r2, r0
 800d256:	4629      	mov	r1, r5
 800d258:	480d      	ldr	r0, [pc, #52]	; (800d290 <lets_set_server+0xa0>)
 800d25a:	f000 f9ce 	bl	800d5fa <iprintf>
 800d25e:	e7f1      	b.n	800d244 <lets_set_server+0x54>
			printf("bind error! code d'erreur (n°%d) -%s\n", errno, strerror(errno));
 800d260:	4b0a      	ldr	r3, [pc, #40]	; (800d28c <lets_set_server+0x9c>)
 800d262:	681d      	ldr	r5, [r3, #0]
 800d264:	4628      	mov	r0, r5
 800d266:	f000 fd2d 	bl	800dcc4 <strerror>
 800d26a:	4602      	mov	r2, r0
 800d26c:	4629      	mov	r1, r5
 800d26e:	4809      	ldr	r0, [pc, #36]	; (800d294 <lets_set_server+0xa4>)
 800d270:	f000 f9c3 	bl	800d5fa <iprintf>
			close(socket);
 800d274:	4620      	mov	r0, r4
 800d276:	f7f8 fc65 	bl	8005b44 <lwip_close>
			socket = -1;
 800d27a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800d27e:	e7da      	b.n	800d236 <lets_set_server+0x46>
 800d280:	08010008 	.word	0x08010008
 800d284:	08010048 	.word	0x08010048
 800d288:	08010058 	.word	0x08010058
 800d28c:	200079a0 	.word	0x200079a0
 800d290:	0800ffd4 	.word	0x0800ffd4
 800d294:	08010020 	.word	0x08010020

0800d298 <server_accept>:
#include <errno.h>
#include <server_accept.h>
#include <string.h>

int server_accept(int socket)
{
 800d298:	b530      	push	{r4, r5, lr}
 800d29a:	b087      	sub	sp, #28
 800d29c:	4605      	mov	r5, r0
	char *message;
	struct sockaddr_in client;
	int c, new_socket;

	c = sizeof(struct sockaddr_in);
 800d29e:	2310      	movs	r3, #16
 800d2a0:	9301      	str	r3, [sp, #4]
	while((new_socket = accept(socket, (struct sockaddr *)&client, (socklen_t*)&c))>=0)
 800d2a2:	e007      	b.n	800d2b4 <server_accept+0x1c>
	{
		printf("accepted (server)\n");
 800d2a4:	4808      	ldr	r0, [pc, #32]	; (800d2c8 <server_accept+0x30>)
 800d2a6:	f000 f9e7 	bl	800d678 <puts>
		message = "COUCOU TOI !\n";
		write(new_socket, message, strlen(message));
 800d2aa:	220d      	movs	r2, #13
 800d2ac:	4907      	ldr	r1, [pc, #28]	; (800d2cc <server_accept+0x34>)
 800d2ae:	4620      	mov	r0, r4
 800d2b0:	f7f8 fdc6 	bl	8005e40 <lwip_write>
	while((new_socket = accept(socket, (struct sockaddr *)&client, (socklen_t*)&c))>=0)
 800d2b4:	aa01      	add	r2, sp, #4
 800d2b6:	a902      	add	r1, sp, #8
 800d2b8:	4628      	mov	r0, r5
 800d2ba:	f7f8 fb0d 	bl	80058d8 <lwip_accept>
 800d2be:	1e04      	subs	r4, r0, #0
 800d2c0:	daf0      	bge.n	800d2a4 <server_accept+0xc>
//		message = "COUCOU TOI !";
//		write(socket, message, strlen(message));
//		new_socket = 1;
//	}
	return new_socket;
}
 800d2c2:	4620      	mov	r0, r4
 800d2c4:	b007      	add	sp, #28
 800d2c6:	bd30      	pop	{r4, r5, pc}
 800d2c8:	0801006c 	.word	0x0801006c
 800d2cc:	08010080 	.word	0x08010080

0800d2d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800d2d0:	b500      	push	{lr}
 800d2d2:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d2d4:	2200      	movs	r2, #0
 800d2d6:	9200      	str	r2, [sp, #0]
 800d2d8:	4b0d      	ldr	r3, [pc, #52]	; (800d310 <HAL_MspInit+0x40>)
 800d2da:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800d2dc:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 800d2e0:	6459      	str	r1, [r3, #68]	; 0x44
 800d2e2:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800d2e4:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 800d2e8:	9100      	str	r1, [sp, #0]
 800d2ea:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800d2ec:	9201      	str	r2, [sp, #4]
 800d2ee:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800d2f0:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800d2f4:	6419      	str	r1, [r3, #64]	; 0x40
 800d2f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d2fc:	9301      	str	r3, [sp, #4]
 800d2fe:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800d300:	210f      	movs	r1, #15
 800d302:	f06f 0001 	mvn.w	r0, #1
 800d306:	f7f3 f955 	bl	80005b4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800d30a:	b003      	add	sp, #12
 800d30c:	f85d fb04 	ldr.w	pc, [sp], #4
 800d310:	40023800 	.word	0x40023800

0800d314 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800d314:	b510      	push	{r4, lr}
 800d316:	b088      	sub	sp, #32
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 800d318:	2200      	movs	r2, #0
 800d31a:	4601      	mov	r1, r0
 800d31c:	2019      	movs	r0, #25
 800d31e:	f7f3 f949 	bl	80005b4 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 800d322:	2019      	movs	r0, #25
 800d324:	f7f3 f978 	bl	8000618 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800d328:	2400      	movs	r4, #0
 800d32a:	9401      	str	r4, [sp, #4]
 800d32c:	4b14      	ldr	r3, [pc, #80]	; (800d380 <HAL_InitTick+0x6c>)
 800d32e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d330:	f042 0201 	orr.w	r2, r2, #1
 800d334:	645a      	str	r2, [r3, #68]	; 0x44
 800d336:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d338:	f003 0301 	and.w	r3, r3, #1
 800d33c:	9301      	str	r3, [sp, #4]
 800d33e:	9b01      	ldr	r3, [sp, #4]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800d340:	a902      	add	r1, sp, #8
 800d342:	a803      	add	r0, sp, #12
 800d344:	f7f4 fa6e 	bl	8001824 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800d348:	f7f4 fa5c 	bl	8001804 <HAL_RCC_GetPCLK2Freq>
 800d34c:	0043      	lsls	r3, r0, #1
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800d34e:	480d      	ldr	r0, [pc, #52]	; (800d384 <HAL_InitTick+0x70>)
 800d350:	fba0 2303 	umull	r2, r3, r0, r3
 800d354:	0c9b      	lsrs	r3, r3, #18
 800d356:	3b01      	subs	r3, #1
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800d358:	480b      	ldr	r0, [pc, #44]	; (800d388 <HAL_InitTick+0x74>)
 800d35a:	4a0c      	ldr	r2, [pc, #48]	; (800d38c <HAL_InitTick+0x78>)
 800d35c:	6002      	str	r2, [r0, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 800d35e:	f240 32e7 	movw	r2, #999	; 0x3e7
 800d362:	60c2      	str	r2, [r0, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800d364:	6043      	str	r3, [r0, #4]
  htim1.Init.ClockDivision = 0;
 800d366:	6104      	str	r4, [r0, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d368:	6084      	str	r4, [r0, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800d36a:	f7f4 fbb3 	bl	8001ad4 <HAL_TIM_Base_Init>
 800d36e:	b110      	cbz	r0, 800d376 <HAL_InitTick+0x62>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
  }
  
  /* Return function status */
  return HAL_ERROR;
 800d370:	2001      	movs	r0, #1
}
 800d372:	b008      	add	sp, #32
 800d374:	bd10      	pop	{r4, pc}
    return HAL_TIM_Base_Start_IT(&htim1);
 800d376:	4804      	ldr	r0, [pc, #16]	; (800d388 <HAL_InitTick+0x74>)
 800d378:	f7f4 fa73 	bl	8001862 <HAL_TIM_Base_Start_IT>
 800d37c:	e7f9      	b.n	800d372 <HAL_InitTick+0x5e>
 800d37e:	bf00      	nop
 800d380:	40023800 	.word	0x40023800
 800d384:	431bde83 	.word	0x431bde83
 800d388:	2000aae8 	.word	0x2000aae8
 800d38c:	40010000 	.word	0x40010000

0800d390 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800d390:	4770      	bx	lr

0800d392 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800d392:	e7fe      	b.n	800d392 <HardFault_Handler>

0800d394 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800d394:	e7fe      	b.n	800d394 <MemManage_Handler>

0800d396 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800d396:	e7fe      	b.n	800d396 <BusFault_Handler>

0800d398 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800d398:	e7fe      	b.n	800d398 <UsageFault_Handler>

0800d39a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800d39a:	4770      	bx	lr

0800d39c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800d39c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800d39e:	4802      	ldr	r0, [pc, #8]	; (800d3a8 <TIM1_UP_TIM10_IRQHandler+0xc>)
 800d3a0:	f7f4 fa74 	bl	800188c <HAL_TIM_IRQHandler>
 800d3a4:	bd08      	pop	{r3, pc}
 800d3a6:	bf00      	nop
 800d3a8:	2000aae8 	.word	0x2000aae8

0800d3ac <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 800d3ac:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 800d3ae:	4802      	ldr	r0, [pc, #8]	; (800d3b8 <ETH_IRQHandler+0xc>)
 800d3b0:	f7f3 fb9c 	bl	8000aec <HAL_ETH_IRQHandler>
 800d3b4:	bd08      	pop	{r3, pc}
 800d3b6:	bf00      	nop
 800d3b8:	20009278 	.word	0x20009278

0800d3bc <_write>:
	return len;
}

__attribute__((weak)) int _write(int file, char *ptr, int len)
// the new function for SWV output
{
 800d3bc:	b430      	push	{r4, r5}
	int i=0;
	for(i=0; i<len; i++)
 800d3be:	2400      	movs	r4, #0
 800d3c0:	e00a      	b.n	800d3d8 <_write+0x1c>
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
  {
    while (ITM->PORT[0U].u32 == 0UL)
    {
      __NOP();
 800d3c2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800d3c4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d0f9      	beq.n	800d3c2 <_write+0x6>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800d3ce:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800d3d2:	7019      	strb	r1, [r3, #0]
 800d3d4:	3401      	adds	r4, #1
	ITM_SendChar((*ptr++)); // out char to serial
 800d3d6:	4629      	mov	r1, r5
	for(i=0; i<len; i++)
 800d3d8:	4294      	cmp	r4, r2
 800d3da:	da10      	bge.n	800d3fe <_write+0x42>
	ITM_SendChar((*ptr++)); // out char to serial
 800d3dc:	1c4d      	adds	r5, r1, #1
 800d3de:	7809      	ldrb	r1, [r1, #0]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800d3e0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800d3e4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800d3e8:	f013 0f01 	tst.w	r3, #1
 800d3ec:	d0f2      	beq.n	800d3d4 <_write+0x18>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800d3ee:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800d3f2:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800d3f6:	f013 0f01 	tst.w	r3, #1
 800d3fa:	d1e3      	bne.n	800d3c4 <_write+0x8>
 800d3fc:	e7ea      	b.n	800d3d4 <_write+0x18>
	return len;
}
 800d3fe:	4610      	mov	r0, r2
 800d400:	bc30      	pop	{r4, r5}
 800d402:	4770      	bx	lr

0800d404 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800d404:	490f      	ldr	r1, [pc, #60]	; (800d444 <SystemInit+0x40>)
 800d406:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800d40a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d40e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800d412:	4b0d      	ldr	r3, [pc, #52]	; (800d448 <SystemInit+0x44>)
 800d414:	681a      	ldr	r2, [r3, #0]
 800d416:	f042 0201 	orr.w	r2, r2, #1
 800d41a:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800d41c:	2000      	movs	r0, #0
 800d41e:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800d420:	681a      	ldr	r2, [r3, #0]
 800d422:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800d426:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800d42a:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800d42c:	4a07      	ldr	r2, [pc, #28]	; (800d44c <SystemInit+0x48>)
 800d42e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800d430:	681a      	ldr	r2, [r3, #0]
 800d432:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800d436:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800d438:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800d43a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d43e:	608b      	str	r3, [r1, #8]
 800d440:	4770      	bx	lr
 800d442:	bf00      	nop
 800d444:	e000ed00 	.word	0xe000ed00
 800d448:	40023800 	.word	0x40023800
 800d44c:	24003010 	.word	0x24003010

0800d450 <ts_itoa>:
 **---------------------------------------------------------------------------
 **  Abstract: Convert integer to ascii
 **  Returns:  void
 **---------------------------------------------------------------------------
 */
void ts_itoa(char **buf, unsigned int d, int base) {
 800d450:	b470      	push	{r4, r5, r6}
	int div = 1;
 800d452:	2301      	movs	r3, #1
	while (d / div >= base)
 800d454:	e001      	b.n	800d45a <ts_itoa+0xa>
		div *= base;
 800d456:	fb02 f303 	mul.w	r3, r2, r3
	while (d / div >= base)
 800d45a:	fbb1 f4f3 	udiv	r4, r1, r3
 800d45e:	4294      	cmp	r4, r2
 800d460:	d2f9      	bcs.n	800d456 <ts_itoa+0x6>
 800d462:	e004      	b.n	800d46e <ts_itoa+0x1e>
		d = d % div;
		div /= base;
		if (num > 9)
			*((*buf)++) = (num - 10) + 'A';
		else
			*((*buf)++) = num + '0';
 800d464:	6805      	ldr	r5, [r0, #0]
 800d466:	1c6e      	adds	r6, r5, #1
 800d468:	6006      	str	r6, [r0, #0]
 800d46a:	3430      	adds	r4, #48	; 0x30
 800d46c:	702c      	strb	r4, [r5, #0]
	while (div != 0) {
 800d46e:	b16b      	cbz	r3, 800d48c <ts_itoa+0x3c>
		int num = d / div;
 800d470:	fbb1 f4f3 	udiv	r4, r1, r3
		d = d % div;
 800d474:	fb03 1114 	mls	r1, r3, r4, r1
		div /= base;
 800d478:	fb93 f3f2 	sdiv	r3, r3, r2
		if (num > 9)
 800d47c:	2c09      	cmp	r4, #9
 800d47e:	ddf1      	ble.n	800d464 <ts_itoa+0x14>
			*((*buf)++) = (num - 10) + 'A';
 800d480:	6805      	ldr	r5, [r0, #0]
 800d482:	1c6e      	adds	r6, r5, #1
 800d484:	6006      	str	r6, [r0, #0]
 800d486:	3437      	adds	r4, #55	; 0x37
 800d488:	702c      	strb	r4, [r5, #0]
 800d48a:	e7f0      	b.n	800d46e <ts_itoa+0x1e>
	}
}
 800d48c:	bc70      	pop	{r4, r5, r6}
 800d48e:	4770      	bx	lr

0800d490 <ts_formatstring>:
 **---------------------------------------------------------------------------
 **  Abstract: Writes arguments va to buffer buf according to format fmt
 **  Returns:  Length of string
 **---------------------------------------------------------------------------
 */
int ts_formatstring(char *buf, const char *fmt, va_list va) {
 800d490:	b530      	push	{r4, r5, lr}
 800d492:	b083      	sub	sp, #12
 800d494:	9001      	str	r0, [sp, #4]
 800d496:	460c      	mov	r4, r1
 800d498:	9200      	str	r2, [sp, #0]
	char *start_buf = buf;
 800d49a:	4605      	mov	r5, r0
	while (*fmt) {
 800d49c:	e03e      	b.n	800d51c <ts_formatstring+0x8c>
		/* Character needs formating? */
		if (*fmt == '%') {
			switch (*(++fmt)) {
 800d49e:	7863      	ldrb	r3, [r4, #1]
 800d4a0:	2b64      	cmp	r3, #100	; 0x64
 800d4a2:	d01c      	beq.n	800d4de <ts_formatstring+0x4e>
 800d4a4:	d90d      	bls.n	800d4c2 <ts_formatstring+0x32>
 800d4a6:	2b73      	cmp	r3, #115	; 0x73
 800d4a8:	d04a      	beq.n	800d540 <ts_formatstring+0xb0>
 800d4aa:	d916      	bls.n	800d4da <ts_formatstring+0x4a>
 800d4ac:	2b75      	cmp	r3, #117	; 0x75
 800d4ae:	d121      	bne.n	800d4f4 <ts_formatstring+0x64>
					*buf++ = *arg++;
				}
			}
				break;
			case 'u':
				ts_itoa(&buf, va_arg(va, unsigned int), 10);
 800d4b0:	9b00      	ldr	r3, [sp, #0]
 800d4b2:	1d1a      	adds	r2, r3, #4
 800d4b4:	9200      	str	r2, [sp, #0]
 800d4b6:	220a      	movs	r2, #10
 800d4b8:	6819      	ldr	r1, [r3, #0]
 800d4ba:	a801      	add	r0, sp, #4
 800d4bc:	f7ff ffc8 	bl	800d450 <ts_itoa>
				break;
 800d4c0:	e02b      	b.n	800d51a <ts_formatstring+0x8a>
			switch (*(++fmt)) {
 800d4c2:	2b58      	cmp	r3, #88	; 0x58
 800d4c4:	d018      	beq.n	800d4f8 <ts_formatstring+0x68>
 800d4c6:	2b63      	cmp	r3, #99	; 0x63
 800d4c8:	d01f      	beq.n	800d50a <ts_formatstring+0x7a>
 800d4ca:	2b25      	cmp	r3, #37	; 0x25
 800d4cc:	d125      	bne.n	800d51a <ts_formatstring+0x8a>
			case 'x':
			case 'X':
				ts_itoa(&buf, va_arg(va, int), 16);
				break;
			case '%':
				*buf++ = '%';
 800d4ce:	9b01      	ldr	r3, [sp, #4]
 800d4d0:	1c5a      	adds	r2, r3, #1
 800d4d2:	9201      	str	r2, [sp, #4]
 800d4d4:	2225      	movs	r2, #37	; 0x25
 800d4d6:	701a      	strb	r2, [r3, #0]
				break;
 800d4d8:	e01f      	b.n	800d51a <ts_formatstring+0x8a>
			switch (*(++fmt)) {
 800d4da:	2b69      	cmp	r3, #105	; 0x69
 800d4dc:	d11d      	bne.n	800d51a <ts_formatstring+0x8a>
				signed int val = va_arg(va, signed int);
 800d4de:	9b00      	ldr	r3, [sp, #0]
 800d4e0:	1d1a      	adds	r2, r3, #4
 800d4e2:	9200      	str	r2, [sp, #0]
 800d4e4:	6819      	ldr	r1, [r3, #0]
				if (val < 0) {
 800d4e6:	2900      	cmp	r1, #0
 800d4e8:	db23      	blt.n	800d532 <ts_formatstring+0xa2>
				ts_itoa(&buf, val, 10);
 800d4ea:	220a      	movs	r2, #10
 800d4ec:	a801      	add	r0, sp, #4
 800d4ee:	f7ff ffaf 	bl	800d450 <ts_itoa>
				break;
 800d4f2:	e012      	b.n	800d51a <ts_formatstring+0x8a>
			switch (*(++fmt)) {
 800d4f4:	2b78      	cmp	r3, #120	; 0x78
 800d4f6:	d110      	bne.n	800d51a <ts_formatstring+0x8a>
				ts_itoa(&buf, va_arg(va, int), 16);
 800d4f8:	9b00      	ldr	r3, [sp, #0]
 800d4fa:	1d1a      	adds	r2, r3, #4
 800d4fc:	9200      	str	r2, [sp, #0]
 800d4fe:	2210      	movs	r2, #16
 800d500:	6819      	ldr	r1, [r3, #0]
 800d502:	a801      	add	r0, sp, #4
 800d504:	f7ff ffa4 	bl	800d450 <ts_itoa>
				break;
 800d508:	e007      	b.n	800d51a <ts_formatstring+0x8a>
				*buf++ = va_arg(va, int);
 800d50a:	9b01      	ldr	r3, [sp, #4]
 800d50c:	1c5a      	adds	r2, r3, #1
 800d50e:	9201      	str	r2, [sp, #4]
 800d510:	9a00      	ldr	r2, [sp, #0]
 800d512:	1d11      	adds	r1, r2, #4
 800d514:	9100      	str	r1, [sp, #0]
 800d516:	6812      	ldr	r2, [r2, #0]
 800d518:	701a      	strb	r2, [r3, #0]
			}
			fmt++;
 800d51a:	3402      	adds	r4, #2
	while (*fmt) {
 800d51c:	7823      	ldrb	r3, [r4, #0]
 800d51e:	b1f3      	cbz	r3, 800d55e <ts_formatstring+0xce>
		if (*fmt == '%') {
 800d520:	2b25      	cmp	r3, #37	; 0x25
 800d522:	d0bc      	beq.n	800d49e <ts_formatstring+0xe>
		}
		/* Else just copy */
		else {
			*buf++ = *fmt++;
 800d524:	9b01      	ldr	r3, [sp, #4]
 800d526:	1c5a      	adds	r2, r3, #1
 800d528:	9201      	str	r2, [sp, #4]
 800d52a:	7822      	ldrb	r2, [r4, #0]
 800d52c:	701a      	strb	r2, [r3, #0]
 800d52e:	3401      	adds	r4, #1
 800d530:	e7f4      	b.n	800d51c <ts_formatstring+0x8c>
					val *= -1;
 800d532:	4249      	negs	r1, r1
					*buf++ = '-';
 800d534:	9b01      	ldr	r3, [sp, #4]
 800d536:	1c5a      	adds	r2, r3, #1
 800d538:	9201      	str	r2, [sp, #4]
 800d53a:	222d      	movs	r2, #45	; 0x2d
 800d53c:	701a      	strb	r2, [r3, #0]
 800d53e:	e7d4      	b.n	800d4ea <ts_formatstring+0x5a>
				char * arg = va_arg(va, char *);
 800d540:	9b00      	ldr	r3, [sp, #0]
 800d542:	1d1a      	adds	r2, r3, #4
 800d544:	9200      	str	r2, [sp, #0]
 800d546:	681b      	ldr	r3, [r3, #0]
				while (*arg) {
 800d548:	e005      	b.n	800d556 <ts_formatstring+0xc6>
					*buf++ = *arg++;
 800d54a:	9a01      	ldr	r2, [sp, #4]
 800d54c:	1c51      	adds	r1, r2, #1
 800d54e:	9101      	str	r1, [sp, #4]
 800d550:	7819      	ldrb	r1, [r3, #0]
 800d552:	7011      	strb	r1, [r2, #0]
 800d554:	3301      	adds	r3, #1
				while (*arg) {
 800d556:	781a      	ldrb	r2, [r3, #0]
 800d558:	2a00      	cmp	r2, #0
 800d55a:	d1f6      	bne.n	800d54a <ts_formatstring+0xba>
 800d55c:	e7dd      	b.n	800d51a <ts_formatstring+0x8a>
		}
	}
	*buf = 0;
 800d55e:	2200      	movs	r2, #0
 800d560:	9b01      	ldr	r3, [sp, #4]
 800d562:	701a      	strb	r2, [r3, #0]

	return (int) (buf - start_buf);
}
 800d564:	9801      	ldr	r0, [sp, #4]
 800d566:	1b40      	subs	r0, r0, r5
 800d568:	b003      	add	sp, #12
 800d56a:	bd30      	pop	{r4, r5, pc}

0800d56c <ts_formatlength>:
 **  Abstract: Calculate maximum length of the resulting string from the
 **            format string and va_list va
 **  Returns:  Maximum length
 **---------------------------------------------------------------------------
 */
int ts_formatlength(const char *fmt, va_list va) {
 800d56c:	b082      	sub	sp, #8
 800d56e:	4603      	mov	r3, r0
 800d570:	9101      	str	r1, [sp, #4]
	int length = 0;
 800d572:	2000      	movs	r0, #0
	while (*fmt) {
 800d574:	e01d      	b.n	800d5b2 <ts_formatlength+0x46>
		if (*fmt == '%') {
			++fmt;
 800d576:	1c59      	adds	r1, r3, #1
			switch (*fmt) {
 800d578:	785b      	ldrb	r3, [r3, #1]
 800d57a:	3b58      	subs	r3, #88	; 0x58
 800d57c:	2b20      	cmp	r3, #32
 800d57e:	d837      	bhi.n	800d5f0 <ts_formatlength+0x84>
 800d580:	e8df f003 	tbb	[pc, r3]
 800d584:	36363630 	.word	0x36363630
 800d588:	36363636 	.word	0x36363636
 800d58c:	11363636 	.word	0x11363636
 800d590:	3636361d 	.word	0x3636361d
 800d594:	36361d36 	.word	0x36361d36
 800d598:	36363636 	.word	0x36363636
 800d59c:	23363636 	.word	0x23363636
 800d5a0:	36361d36 	.word	0x36361d36
 800d5a4:	30          	.byte	0x30
 800d5a5:	00          	.byte	0x00
			case 'c':
				va_arg(va, int);
 800d5a6:	9b01      	ldr	r3, [sp, #4]
 800d5a8:	3304      	adds	r3, #4
 800d5aa:	9301      	str	r3, [sp, #4]
				++length;
 800d5ac:	3001      	adds	r0, #1
			++fmt;
 800d5ae:	460b      	mov	r3, r1
				break;
			}
		} else {
			++length;
		}
		++fmt;
 800d5b0:	3301      	adds	r3, #1
	while (*fmt) {
 800d5b2:	781a      	ldrb	r2, [r3, #0]
 800d5b4:	b1fa      	cbz	r2, 800d5f6 <ts_formatlength+0x8a>
		if (*fmt == '%') {
 800d5b6:	2a25      	cmp	r2, #37	; 0x25
 800d5b8:	d0dd      	beq.n	800d576 <ts_formatlength+0xa>
			++length;
 800d5ba:	3001      	adds	r0, #1
 800d5bc:	e7f8      	b.n	800d5b0 <ts_formatlength+0x44>
				length += 11;
 800d5be:	300b      	adds	r0, #11
				va_arg(va, int);
 800d5c0:	9b01      	ldr	r3, [sp, #4]
 800d5c2:	3304      	adds	r3, #4
 800d5c4:	9301      	str	r3, [sp, #4]
			++fmt;
 800d5c6:	460b      	mov	r3, r1
 800d5c8:	e7f2      	b.n	800d5b0 <ts_formatlength+0x44>
				char * str = va_arg(va, char *);
 800d5ca:	9b01      	ldr	r3, [sp, #4]
 800d5cc:	1d1a      	adds	r2, r3, #4
 800d5ce:	9201      	str	r2, [sp, #4]
 800d5d0:	681b      	ldr	r3, [r3, #0]
				while (*str++)
 800d5d2:	e001      	b.n	800d5d8 <ts_formatlength+0x6c>
					++length;
 800d5d4:	3001      	adds	r0, #1
				while (*str++)
 800d5d6:	4613      	mov	r3, r2
 800d5d8:	1c5a      	adds	r2, r3, #1
 800d5da:	781b      	ldrb	r3, [r3, #0]
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d1f9      	bne.n	800d5d4 <ts_formatlength+0x68>
			++fmt;
 800d5e0:	460b      	mov	r3, r1
 800d5e2:	e7e5      	b.n	800d5b0 <ts_formatlength+0x44>
				length += 8;
 800d5e4:	3008      	adds	r0, #8
				va_arg(va, unsigned int);
 800d5e6:	9b01      	ldr	r3, [sp, #4]
 800d5e8:	3304      	adds	r3, #4
 800d5ea:	9301      	str	r3, [sp, #4]
			++fmt;
 800d5ec:	460b      	mov	r3, r1
 800d5ee:	e7df      	b.n	800d5b0 <ts_formatlength+0x44>
				++length;
 800d5f0:	3001      	adds	r0, #1
			++fmt;
 800d5f2:	460b      	mov	r3, r1
				break;
 800d5f4:	e7dc      	b.n	800d5b0 <ts_formatlength+0x44>
	}
	return length;
}
 800d5f6:	b002      	add	sp, #8
 800d5f8:	4770      	bx	lr

0800d5fa <iprintf>:
 **            standard output according to the format parameter.
 **  Returns:  Number of bytes written
 **
 **===========================================================================
 */
int iprintf(const char *fmt, ...) {
 800d5fa:	b40f      	push	{r0, r1, r2, r3}
 800d5fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d5fe:	b083      	sub	sp, #12
 800d600:	af00      	add	r7, sp, #0
 800d602:	f107 0120 	add.w	r1, r7, #32
 800d606:	f851 5b04 	ldr.w	r5, [r1], #4
	int length = 0;
	va_list va;
	va_start(va, fmt);
 800d60a:	6079      	str	r1, [r7, #4]
	length = ts_formatlength(fmt, va);
 800d60c:	4628      	mov	r0, r5
 800d60e:	f7ff ffad 	bl	800d56c <ts_formatlength>
 800d612:	4604      	mov	r4, r0
	va_end(va);
	if (length < 50) { // ok only for small default configMINIMAL_STACK_SIZE(128)
 800d614:	2831      	cmp	r0, #49	; 0x31
 800d616:	dd19      	ble.n	800d64c <iprintf+0x52>
		va_start(va, fmt);
		length = ts_formatstring(buf, fmt, va);
		length = _write(1, buf, length);
		va_end(va);
	} else {
		char * buf = malloc(length * sizeof(char));
 800d618:	f7ff fde1 	bl	800d1de <malloc>
		if (buf) {
 800d61c:	4606      	mov	r6, r0
 800d61e:	b170      	cbz	r0, 800d63e <iprintf+0x44>
			va_start(va, fmt);
 800d620:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800d624:	607a      	str	r2, [r7, #4]
			length = ts_formatstring(buf, fmt, va);
 800d626:	4629      	mov	r1, r5
 800d628:	f7ff ff32 	bl	800d490 <ts_formatstring>
			length = _write(1, buf, length);
 800d62c:	4602      	mov	r2, r0
 800d62e:	4631      	mov	r1, r6
 800d630:	2001      	movs	r0, #1
 800d632:	f7ff fec3 	bl	800d3bc <_write>
 800d636:	4604      	mov	r4, r0
			va_end(va);
			free(buf);
 800d638:	4630      	mov	r0, r6
 800d63a:	f7ff fdd4 	bl	800d1e6 <free>
		}
	}
	return length;
}
 800d63e:	4620      	mov	r0, r4
 800d640:	370c      	adds	r7, #12
 800d642:	46bd      	mov	sp, r7
 800d644:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800d648:	b004      	add	sp, #16
 800d64a:	4770      	bx	lr
	if (length < 50) { // ok only for small default configMINIMAL_STACK_SIZE(128)
 800d64c:	466e      	mov	r6, sp
		char buf[length];
 800d64e:	3407      	adds	r4, #7
 800d650:	f024 0407 	bic.w	r4, r4, #7
 800d654:	ebad 0d04 	sub.w	sp, sp, r4
		va_start(va, fmt);
 800d658:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800d65c:	607a      	str	r2, [r7, #4]
		length = ts_formatstring(buf, fmt, va);
 800d65e:	4629      	mov	r1, r5
 800d660:	4668      	mov	r0, sp
 800d662:	f7ff ff15 	bl	800d490 <ts_formatstring>
		length = _write(1, buf, length);
 800d666:	4602      	mov	r2, r0
 800d668:	4669      	mov	r1, sp
 800d66a:	2001      	movs	r0, #1
 800d66c:	f7ff fea6 	bl	800d3bc <_write>
 800d670:	4604      	mov	r4, r0
 800d672:	46b5      	mov	sp, r6
 800d674:	e7e3      	b.n	800d63e <iprintf+0x44>
	...

0800d678 <puts>:
 **  Returns:  If successful, the result is a nonnegative integer; otherwise,
 **  the result is EOF.
 **
 **===========================================================================
 */
int puts(const char *s) {
 800d678:	b538      	push	{r3, r4, r5, lr}
 800d67a:	4605      	mov	r5, r0
	int length = strlen(s);
 800d67c:	f7f2 fdb8 	bl	80001f0 <strlen>
 800d680:	4604      	mov	r4, r0
	int numbytes = 0;
	int res;

	numbytes = _write(1, (char*) s, length);
 800d682:	4602      	mov	r2, r0
 800d684:	4629      	mov	r1, r5
 800d686:	2001      	movs	r0, #1
 800d688:	f7ff fe98 	bl	800d3bc <_write>
 800d68c:	4605      	mov	r5, r0
	numbytes += _write(1, "\n", 1);
 800d68e:	2201      	movs	r2, #1
 800d690:	4906      	ldr	r1, [pc, #24]	; (800d6ac <puts+0x34>)
 800d692:	4610      	mov	r0, r2
 800d694:	f7ff fe92 	bl	800d3bc <_write>
 800d698:	4428      	add	r0, r5

	if (numbytes == (length + 1)) {
 800d69a:	3401      	adds	r4, #1
 800d69c:	42a0      	cmp	r0, r4
 800d69e:	d101      	bne.n	800d6a4 <puts+0x2c>
		res = 0;
 800d6a0:	2000      	movs	r0, #0
 800d6a2:	bd38      	pop	{r3, r4, r5, pc}
	} else {
		res = EOF;
 800d6a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}

	return res;
}
 800d6a8:	bd38      	pop	{r3, r4, r5, pc}
 800d6aa:	bf00      	nop
 800d6ac:	0801008c 	.word	0x0801008c

0800d6b0 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800d6b0:	b508      	push	{r3, lr}

  huart3.Instance = USART3;
 800d6b2:	480a      	ldr	r0, [pc, #40]	; (800d6dc <MX_USART3_UART_Init+0x2c>)
 800d6b4:	4b0a      	ldr	r3, [pc, #40]	; (800d6e0 <MX_USART3_UART_Init+0x30>)
 800d6b6:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = 115200;
 800d6b8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800d6bc:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800d6be:	2300      	movs	r3, #0
 800d6c0:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800d6c2:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800d6c4:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800d6c6:	220c      	movs	r2, #12
 800d6c8:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d6ca:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800d6cc:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800d6ce:	f7f4 fbbf 	bl	8001e50 <HAL_UART_Init>
 800d6d2:	b900      	cbnz	r0, 800d6d6 <MX_USART3_UART_Init+0x26>
 800d6d4:	bd08      	pop	{r3, pc}
  {
    Error_Handler();
 800d6d6:	f7ff fd81 	bl	800d1dc <Error_Handler>
  }

}
 800d6da:	e7fb      	b.n	800d6d4 <MX_USART3_UART_Init+0x24>
 800d6dc:	2000ab28 	.word	0x2000ab28
 800d6e0:	40004800 	.word	0x40004800

0800d6e4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800d6e4:	b500      	push	{lr}
 800d6e6:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d6e8:	2300      	movs	r3, #0
 800d6ea:	9303      	str	r3, [sp, #12]
 800d6ec:	9304      	str	r3, [sp, #16]
 800d6ee:	9305      	str	r3, [sp, #20]
 800d6f0:	9306      	str	r3, [sp, #24]
 800d6f2:	9307      	str	r3, [sp, #28]
  if(uartHandle->Instance==USART3)
 800d6f4:	6802      	ldr	r2, [r0, #0]
 800d6f6:	4b16      	ldr	r3, [pc, #88]	; (800d750 <HAL_UART_MspInit+0x6c>)
 800d6f8:	429a      	cmp	r2, r3
 800d6fa:	d002      	beq.n	800d702 <HAL_UART_MspInit+0x1e>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800d6fc:	b009      	add	sp, #36	; 0x24
 800d6fe:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART3_CLK_ENABLE();
 800d702:	2100      	movs	r1, #0
 800d704:	9101      	str	r1, [sp, #4]
 800d706:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
 800d70a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d70c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800d710:	641a      	str	r2, [r3, #64]	; 0x40
 800d712:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d714:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 800d718:	9201      	str	r2, [sp, #4]
 800d71a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800d71c:	9102      	str	r1, [sp, #8]
 800d71e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d720:	f042 0208 	orr.w	r2, r2, #8
 800d724:	631a      	str	r2, [r3, #48]	; 0x30
 800d726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d728:	f003 0308 	and.w	r3, r3, #8
 800d72c:	9302      	str	r3, [sp, #8]
 800d72e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800d730:	f44f 7340 	mov.w	r3, #768	; 0x300
 800d734:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d736:	2302      	movs	r3, #2
 800d738:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d73a:	2301      	movs	r3, #1
 800d73c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d73e:	2303      	movs	r3, #3
 800d740:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800d742:	2307      	movs	r3, #7
 800d744:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800d746:	a903      	add	r1, sp, #12
 800d748:	4802      	ldr	r0, [pc, #8]	; (800d754 <HAL_UART_MspInit+0x70>)
 800d74a:	f7f3 fbd9 	bl	8000f00 <HAL_GPIO_Init>
}
 800d74e:	e7d5      	b.n	800d6fc <HAL_UART_MspInit+0x18>
 800d750:	40004800 	.word	0x40004800
 800d754:	40020c00 	.word	0x40020c00

0800d758 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 800d758:	b508      	push	{r3, lr}

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d75a:	480c      	ldr	r0, [pc, #48]	; (800d78c <MX_USB_OTG_FS_PCD_Init+0x34>)
 800d75c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800d760:	6003      	str	r3, [r0, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800d762:	2304      	movs	r3, #4
 800d764:	6043      	str	r3, [r0, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800d766:	2202      	movs	r2, #2
 800d768:	60c2      	str	r2, [r0, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d76a:	2300      	movs	r3, #0
 800d76c:	6103      	str	r3, [r0, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d76e:	6182      	str	r2, [r0, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800d770:	2201      	movs	r2, #1
 800d772:	61c2      	str	r2, [r0, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800d774:	6203      	str	r3, [r0, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800d776:	6243      	str	r3, [r0, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800d778:	62c2      	str	r2, [r0, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d77a:	6303      	str	r3, [r0, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d77c:	f7f3 fcb8 	bl	80010f0 <HAL_PCD_Init>
 800d780:	b900      	cbnz	r0, 800d784 <MX_USB_OTG_FS_PCD_Init+0x2c>
 800d782:	bd08      	pop	{r3, pc}
  {
    Error_Handler();
 800d784:	f7ff fd2a 	bl	800d1dc <Error_Handler>
  }

}
 800d788:	e7fb      	b.n	800d782 <MX_USB_OTG_FS_PCD_Init+0x2a>
 800d78a:	bf00      	nop
 800d78c:	2000ab68 	.word	0x2000ab68

0800d790 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d790:	b570      	push	{r4, r5, r6, lr}
 800d792:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d794:	2300      	movs	r3, #0
 800d796:	9303      	str	r3, [sp, #12]
 800d798:	9304      	str	r3, [sp, #16]
 800d79a:	9305      	str	r3, [sp, #20]
 800d79c:	9306      	str	r3, [sp, #24]
 800d79e:	9307      	str	r3, [sp, #28]
  if(pcdHandle->Instance==USB_OTG_FS)
 800d7a0:	6803      	ldr	r3, [r0, #0]
 800d7a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d7a6:	d001      	beq.n	800d7ac <HAL_PCD_MspInit+0x1c>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d7a8:	b008      	add	sp, #32
 800d7aa:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d7ac:	2500      	movs	r5, #0
 800d7ae:	9501      	str	r5, [sp, #4]
 800d7b0:	4c17      	ldr	r4, [pc, #92]	; (800d810 <HAL_PCD_MspInit+0x80>)
 800d7b2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800d7b4:	f043 0301 	orr.w	r3, r3, #1
 800d7b8:	6323      	str	r3, [r4, #48]	; 0x30
 800d7ba:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800d7bc:	f003 0301 	and.w	r3, r3, #1
 800d7c0:	9301      	str	r3, [sp, #4]
 800d7c2:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800d7c4:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800d7c8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d7ca:	2302      	movs	r3, #2
 800d7cc:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d7ce:	2303      	movs	r3, #3
 800d7d0:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d7d2:	230a      	movs	r3, #10
 800d7d4:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d7d6:	4e0f      	ldr	r6, [pc, #60]	; (800d814 <HAL_PCD_MspInit+0x84>)
 800d7d8:	a903      	add	r1, sp, #12
 800d7da:	4630      	mov	r0, r6
 800d7dc:	f7f3 fb90 	bl	8000f00 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800d7e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d7e4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d7e6:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d7e8:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800d7ea:	a903      	add	r1, sp, #12
 800d7ec:	4630      	mov	r0, r6
 800d7ee:	f7f3 fb87 	bl	8000f00 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d7f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d7f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d7f8:	6363      	str	r3, [r4, #52]	; 0x34
 800d7fa:	9502      	str	r5, [sp, #8]
 800d7fc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800d7fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d802:	6463      	str	r3, [r4, #68]	; 0x44
 800d804:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800d806:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d80a:	9302      	str	r3, [sp, #8]
 800d80c:	9b02      	ldr	r3, [sp, #8]
}
 800d80e:	e7cb      	b.n	800d7a8 <HAL_PCD_MspInit+0x18>
 800d810:	40023800 	.word	0x40023800
 800d814:	40020000 	.word	0x40020000

0800d818 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800d818:	f8df d034 	ldr.w	sp, [pc, #52]	; 800d850 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800d81c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800d81e:	e003      	b.n	800d828 <LoopCopyDataInit>

0800d820 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800d820:	4b0c      	ldr	r3, [pc, #48]	; (800d854 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800d822:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800d824:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800d826:	3104      	adds	r1, #4

0800d828 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800d828:	480b      	ldr	r0, [pc, #44]	; (800d858 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800d82a:	4b0c      	ldr	r3, [pc, #48]	; (800d85c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800d82c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800d82e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800d830:	d3f6      	bcc.n	800d820 <CopyDataInit>
  ldr  r2, =_sbss
 800d832:	4a0b      	ldr	r2, [pc, #44]	; (800d860 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800d834:	e002      	b.n	800d83c <LoopFillZerobss>

0800d836 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800d836:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800d838:	f842 3b04 	str.w	r3, [r2], #4

0800d83c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800d83c:	4b09      	ldr	r3, [pc, #36]	; (800d864 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800d83e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800d840:	d3f9      	bcc.n	800d836 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800d842:	f7ff fddf 	bl	800d404 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800d846:	f000 f811 	bl	800d86c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800d84a:	f7ff fca9 	bl	800d1a0 <main>
  bx  lr    
 800d84e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800d850:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 800d854:	08010750 	.word	0x08010750
  ldr  r0, =_sdata
 800d858:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800d85c:	2000007c 	.word	0x2000007c
  ldr  r2, =_sbss
 800d860:	2000007c 	.word	0x2000007c
  ldr  r3, = _ebss
 800d864:	2000af70 	.word	0x2000af70

0800d868 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800d868:	e7fe      	b.n	800d868 <ADC_IRQHandler>
	...

0800d86c <__libc_init_array>:
 800d86c:	b570      	push	{r4, r5, r6, lr}
 800d86e:	4e0d      	ldr	r6, [pc, #52]	; (800d8a4 <__libc_init_array+0x38>)
 800d870:	4c0d      	ldr	r4, [pc, #52]	; (800d8a8 <__libc_init_array+0x3c>)
 800d872:	1ba4      	subs	r4, r4, r6
 800d874:	10a4      	asrs	r4, r4, #2
 800d876:	2500      	movs	r5, #0
 800d878:	42a5      	cmp	r5, r4
 800d87a:	d109      	bne.n	800d890 <__libc_init_array+0x24>
 800d87c:	4e0b      	ldr	r6, [pc, #44]	; (800d8ac <__libc_init_array+0x40>)
 800d87e:	4c0c      	ldr	r4, [pc, #48]	; (800d8b0 <__libc_init_array+0x44>)
 800d880:	f000 fa2c 	bl	800dcdc <_init>
 800d884:	1ba4      	subs	r4, r4, r6
 800d886:	10a4      	asrs	r4, r4, #2
 800d888:	2500      	movs	r5, #0
 800d88a:	42a5      	cmp	r5, r4
 800d88c:	d105      	bne.n	800d89a <__libc_init_array+0x2e>
 800d88e:	bd70      	pop	{r4, r5, r6, pc}
 800d890:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d894:	4798      	blx	r3
 800d896:	3501      	adds	r5, #1
 800d898:	e7ee      	b.n	800d878 <__libc_init_array+0xc>
 800d89a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d89e:	4798      	blx	r3
 800d8a0:	3501      	adds	r5, #1
 800d8a2:	e7f2      	b.n	800d88a <__libc_init_array+0x1e>
 800d8a4:	08010748 	.word	0x08010748
 800d8a8:	08010748 	.word	0x08010748
 800d8ac:	08010748 	.word	0x08010748
 800d8b0:	0801074c 	.word	0x0801074c

0800d8b4 <memcmp>:
 800d8b4:	b510      	push	{r4, lr}
 800d8b6:	3901      	subs	r1, #1
 800d8b8:	4402      	add	r2, r0
 800d8ba:	4290      	cmp	r0, r2
 800d8bc:	d101      	bne.n	800d8c2 <memcmp+0xe>
 800d8be:	2000      	movs	r0, #0
 800d8c0:	bd10      	pop	{r4, pc}
 800d8c2:	f810 3b01 	ldrb.w	r3, [r0], #1
 800d8c6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800d8ca:	42a3      	cmp	r3, r4
 800d8cc:	d0f5      	beq.n	800d8ba <memcmp+0x6>
 800d8ce:	1b18      	subs	r0, r3, r4
 800d8d0:	bd10      	pop	{r4, pc}

0800d8d2 <memcpy>:
 800d8d2:	b510      	push	{r4, lr}
 800d8d4:	1e43      	subs	r3, r0, #1
 800d8d6:	440a      	add	r2, r1
 800d8d8:	4291      	cmp	r1, r2
 800d8da:	d100      	bne.n	800d8de <memcpy+0xc>
 800d8dc:	bd10      	pop	{r4, pc}
 800d8de:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d8e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d8e6:	e7f7      	b.n	800d8d8 <memcpy+0x6>

0800d8e8 <memset>:
 800d8e8:	4402      	add	r2, r0
 800d8ea:	4603      	mov	r3, r0
 800d8ec:	4293      	cmp	r3, r2
 800d8ee:	d100      	bne.n	800d8f2 <memset+0xa>
 800d8f0:	4770      	bx	lr
 800d8f2:	f803 1b01 	strb.w	r1, [r3], #1
 800d8f6:	e7f9      	b.n	800d8ec <memset+0x4>

0800d8f8 <_strerror_r>:
 800d8f8:	b510      	push	{r4, lr}
 800d8fa:	4604      	mov	r4, r0
 800d8fc:	4608      	mov	r0, r1
 800d8fe:	4611      	mov	r1, r2
 800d900:	288e      	cmp	r0, #142	; 0x8e
 800d902:	f200 812f 	bhi.w	800db64 <_strerror_r+0x26c>
 800d906:	e8df f010 	tbh	[pc, r0, lsl #1]
 800d90a:	0138      	.short	0x0138
 800d90c:	0091008f 	.word	0x0091008f
 800d910:	00950093 	.word	0x00950093
 800d914:	00990097 	.word	0x00990097
 800d918:	009d009b 	.word	0x009d009b
 800d91c:	00a300a1 	.word	0x00a300a1
 800d920:	00a900a7 	.word	0x00a900a7
 800d924:	00ad00ab 	.word	0x00ad00ab
 800d928:	00af012d 	.word	0x00af012d
 800d92c:	00b300b1 	.word	0x00b300b1
 800d930:	00b700b5 	.word	0x00b700b5
 800d934:	00bf00bd 	.word	0x00bf00bd
 800d938:	00c700c5 	.word	0x00c700c5
 800d93c:	00cb00c9 	.word	0x00cb00c9
 800d940:	00d100cd 	.word	0x00d100cd
 800d944:	00d700d5 	.word	0x00d700d5
 800d948:	00db00d9 	.word	0x00db00d9
 800d94c:	00df00dd 	.word	0x00df00dd
 800d950:	00e300e1 	.word	0x00e300e1
 800d954:	012d012d 	.word	0x012d012d
 800d958:	012d012d 	.word	0x012d012d
 800d95c:	012d012d 	.word	0x012d012d
 800d960:	012d012d 	.word	0x012d012d
 800d964:	00eb00e7 	.word	0x00eb00e7
 800d968:	012d012d 	.word	0x012d012d
 800d96c:	012d012d 	.word	0x012d012d
 800d970:	012d012d 	.word	0x012d012d
 800d974:	012d012d 	.word	0x012d012d
 800d978:	012d012d 	.word	0x012d012d
 800d97c:	012d012d 	.word	0x012d012d
 800d980:	00ed012d 	.word	0x00ed012d
 800d984:	00ef0107 	.word	0x00ef0107
 800d988:	012d00f1 	.word	0x012d00f1
 800d98c:	012d012d 	.word	0x012d012d
 800d990:	012d00f3 	.word	0x012d00f3
 800d994:	012d012d 	.word	0x012d012d
 800d998:	012d00f5 	.word	0x012d00f5
 800d99c:	00f9012d 	.word	0x00f9012d
 800d9a0:	012d012d 	.word	0x012d012d
 800d9a4:	012d00fb 	.word	0x012d00fb
 800d9a8:	012d012d 	.word	0x012d012d
 800d9ac:	012d012d 	.word	0x012d012d
 800d9b0:	012d012d 	.word	0x012d012d
 800d9b4:	012d012d 	.word	0x012d012d
 800d9b8:	00fd012d 	.word	0x00fd012d
 800d9bc:	00ff012d 	.word	0x00ff012d
 800d9c0:	01030101 	.word	0x01030101
 800d9c4:	012d012d 	.word	0x012d012d
 800d9c8:	012d0125 	.word	0x012d0125
 800d9cc:	012d012d 	.word	0x012d012d
 800d9d0:	012d012d 	.word	0x012d012d
 800d9d4:	012d012d 	.word	0x012d012d
 800d9d8:	0113012d 	.word	0x0113012d
 800d9dc:	01090105 	.word	0x01090105
 800d9e0:	010d010b 	.word	0x010d010b
 800d9e4:	012d010f 	.word	0x012d010f
 800d9e8:	01150111 	.word	0x01150111
 800d9ec:	00e90119 	.word	0x00e90119
 800d9f0:	012b00c1 	.word	0x012b00c1
 800d9f4:	00cf00b9 	.word	0x00cf00b9
 800d9f8:	009f00bb 	.word	0x009f00bb
 800d9fc:	012900a5 	.word	0x012900a5
 800da00:	012d00f7 	.word	0x012d00f7
 800da04:	00c30117 	.word	0x00c30117
 800da08:	011b011d 	.word	0x011b011d
 800da0c:	012d012d 	.word	0x012d012d
 800da10:	012d012d 	.word	0x012d012d
 800da14:	00d3012d 	.word	0x00d3012d
 800da18:	012d012d 	.word	0x012d012d
 800da1c:	00e5012d 	.word	0x00e5012d
 800da20:	011f0127 	.word	0x011f0127
 800da24:	01230121 	.word	0x01230121
 800da28:	4855      	ldr	r0, [pc, #340]	; (800db80 <_strerror_r+0x288>)
 800da2a:	bd10      	pop	{r4, pc}
 800da2c:	4855      	ldr	r0, [pc, #340]	; (800db84 <_strerror_r+0x28c>)
 800da2e:	bd10      	pop	{r4, pc}
 800da30:	4855      	ldr	r0, [pc, #340]	; (800db88 <_strerror_r+0x290>)
 800da32:	bd10      	pop	{r4, pc}
 800da34:	4855      	ldr	r0, [pc, #340]	; (800db8c <_strerror_r+0x294>)
 800da36:	bd10      	pop	{r4, pc}
 800da38:	4855      	ldr	r0, [pc, #340]	; (800db90 <_strerror_r+0x298>)
 800da3a:	bd10      	pop	{r4, pc}
 800da3c:	4855      	ldr	r0, [pc, #340]	; (800db94 <_strerror_r+0x29c>)
 800da3e:	bd10      	pop	{r4, pc}
 800da40:	4855      	ldr	r0, [pc, #340]	; (800db98 <_strerror_r+0x2a0>)
 800da42:	bd10      	pop	{r4, pc}
 800da44:	4855      	ldr	r0, [pc, #340]	; (800db9c <_strerror_r+0x2a4>)
 800da46:	bd10      	pop	{r4, pc}
 800da48:	4855      	ldr	r0, [pc, #340]	; (800dba0 <_strerror_r+0x2a8>)
 800da4a:	bd10      	pop	{r4, pc}
 800da4c:	4855      	ldr	r0, [pc, #340]	; (800dba4 <_strerror_r+0x2ac>)
 800da4e:	bd10      	pop	{r4, pc}
 800da50:	4855      	ldr	r0, [pc, #340]	; (800dba8 <_strerror_r+0x2b0>)
 800da52:	bd10      	pop	{r4, pc}
 800da54:	4855      	ldr	r0, [pc, #340]	; (800dbac <_strerror_r+0x2b4>)
 800da56:	bd10      	pop	{r4, pc}
 800da58:	4855      	ldr	r0, [pc, #340]	; (800dbb0 <_strerror_r+0x2b8>)
 800da5a:	bd10      	pop	{r4, pc}
 800da5c:	4855      	ldr	r0, [pc, #340]	; (800dbb4 <_strerror_r+0x2bc>)
 800da5e:	bd10      	pop	{r4, pc}
 800da60:	4855      	ldr	r0, [pc, #340]	; (800dbb8 <_strerror_r+0x2c0>)
 800da62:	bd10      	pop	{r4, pc}
 800da64:	4855      	ldr	r0, [pc, #340]	; (800dbbc <_strerror_r+0x2c4>)
 800da66:	bd10      	pop	{r4, pc}
 800da68:	4855      	ldr	r0, [pc, #340]	; (800dbc0 <_strerror_r+0x2c8>)
 800da6a:	bd10      	pop	{r4, pc}
 800da6c:	4855      	ldr	r0, [pc, #340]	; (800dbc4 <_strerror_r+0x2cc>)
 800da6e:	bd10      	pop	{r4, pc}
 800da70:	4855      	ldr	r0, [pc, #340]	; (800dbc8 <_strerror_r+0x2d0>)
 800da72:	bd10      	pop	{r4, pc}
 800da74:	4855      	ldr	r0, [pc, #340]	; (800dbcc <_strerror_r+0x2d4>)
 800da76:	bd10      	pop	{r4, pc}
 800da78:	4855      	ldr	r0, [pc, #340]	; (800dbd0 <_strerror_r+0x2d8>)
 800da7a:	bd10      	pop	{r4, pc}
 800da7c:	4855      	ldr	r0, [pc, #340]	; (800dbd4 <_strerror_r+0x2dc>)
 800da7e:	bd10      	pop	{r4, pc}
 800da80:	4855      	ldr	r0, [pc, #340]	; (800dbd8 <_strerror_r+0x2e0>)
 800da82:	bd10      	pop	{r4, pc}
 800da84:	4855      	ldr	r0, [pc, #340]	; (800dbdc <_strerror_r+0x2e4>)
 800da86:	bd10      	pop	{r4, pc}
 800da88:	4855      	ldr	r0, [pc, #340]	; (800dbe0 <_strerror_r+0x2e8>)
 800da8a:	bd10      	pop	{r4, pc}
 800da8c:	4855      	ldr	r0, [pc, #340]	; (800dbe4 <_strerror_r+0x2ec>)
 800da8e:	bd10      	pop	{r4, pc}
 800da90:	4855      	ldr	r0, [pc, #340]	; (800dbe8 <_strerror_r+0x2f0>)
 800da92:	bd10      	pop	{r4, pc}
 800da94:	4855      	ldr	r0, [pc, #340]	; (800dbec <_strerror_r+0x2f4>)
 800da96:	bd10      	pop	{r4, pc}
 800da98:	4855      	ldr	r0, [pc, #340]	; (800dbf0 <_strerror_r+0x2f8>)
 800da9a:	bd10      	pop	{r4, pc}
 800da9c:	4855      	ldr	r0, [pc, #340]	; (800dbf4 <_strerror_r+0x2fc>)
 800da9e:	bd10      	pop	{r4, pc}
 800daa0:	4855      	ldr	r0, [pc, #340]	; (800dbf8 <_strerror_r+0x300>)
 800daa2:	bd10      	pop	{r4, pc}
 800daa4:	4855      	ldr	r0, [pc, #340]	; (800dbfc <_strerror_r+0x304>)
 800daa6:	bd10      	pop	{r4, pc}
 800daa8:	4855      	ldr	r0, [pc, #340]	; (800dc00 <_strerror_r+0x308>)
 800daaa:	bd10      	pop	{r4, pc}
 800daac:	4855      	ldr	r0, [pc, #340]	; (800dc04 <_strerror_r+0x30c>)
 800daae:	bd10      	pop	{r4, pc}
 800dab0:	4855      	ldr	r0, [pc, #340]	; (800dc08 <_strerror_r+0x310>)
 800dab2:	bd10      	pop	{r4, pc}
 800dab4:	4855      	ldr	r0, [pc, #340]	; (800dc0c <_strerror_r+0x314>)
 800dab6:	bd10      	pop	{r4, pc}
 800dab8:	4855      	ldr	r0, [pc, #340]	; (800dc10 <_strerror_r+0x318>)
 800daba:	bd10      	pop	{r4, pc}
 800dabc:	4855      	ldr	r0, [pc, #340]	; (800dc14 <_strerror_r+0x31c>)
 800dabe:	bd10      	pop	{r4, pc}
 800dac0:	4855      	ldr	r0, [pc, #340]	; (800dc18 <_strerror_r+0x320>)
 800dac2:	bd10      	pop	{r4, pc}
 800dac4:	4855      	ldr	r0, [pc, #340]	; (800dc1c <_strerror_r+0x324>)
 800dac6:	bd10      	pop	{r4, pc}
 800dac8:	4855      	ldr	r0, [pc, #340]	; (800dc20 <_strerror_r+0x328>)
 800daca:	bd10      	pop	{r4, pc}
 800dacc:	4855      	ldr	r0, [pc, #340]	; (800dc24 <_strerror_r+0x32c>)
 800dace:	bd10      	pop	{r4, pc}
 800dad0:	4855      	ldr	r0, [pc, #340]	; (800dc28 <_strerror_r+0x330>)
 800dad2:	bd10      	pop	{r4, pc}
 800dad4:	4855      	ldr	r0, [pc, #340]	; (800dc2c <_strerror_r+0x334>)
 800dad6:	bd10      	pop	{r4, pc}
 800dad8:	4855      	ldr	r0, [pc, #340]	; (800dc30 <_strerror_r+0x338>)
 800dada:	bd10      	pop	{r4, pc}
 800dadc:	4855      	ldr	r0, [pc, #340]	; (800dc34 <_strerror_r+0x33c>)
 800dade:	bd10      	pop	{r4, pc}
 800dae0:	4855      	ldr	r0, [pc, #340]	; (800dc38 <_strerror_r+0x340>)
 800dae2:	bd10      	pop	{r4, pc}
 800dae4:	4855      	ldr	r0, [pc, #340]	; (800dc3c <_strerror_r+0x344>)
 800dae6:	bd10      	pop	{r4, pc}
 800dae8:	4855      	ldr	r0, [pc, #340]	; (800dc40 <_strerror_r+0x348>)
 800daea:	bd10      	pop	{r4, pc}
 800daec:	4855      	ldr	r0, [pc, #340]	; (800dc44 <_strerror_r+0x34c>)
 800daee:	bd10      	pop	{r4, pc}
 800daf0:	4855      	ldr	r0, [pc, #340]	; (800dc48 <_strerror_r+0x350>)
 800daf2:	bd10      	pop	{r4, pc}
 800daf4:	4855      	ldr	r0, [pc, #340]	; (800dc4c <_strerror_r+0x354>)
 800daf6:	bd10      	pop	{r4, pc}
 800daf8:	4855      	ldr	r0, [pc, #340]	; (800dc50 <_strerror_r+0x358>)
 800dafa:	bd10      	pop	{r4, pc}
 800dafc:	4855      	ldr	r0, [pc, #340]	; (800dc54 <_strerror_r+0x35c>)
 800dafe:	bd10      	pop	{r4, pc}
 800db00:	4855      	ldr	r0, [pc, #340]	; (800dc58 <_strerror_r+0x360>)
 800db02:	bd10      	pop	{r4, pc}
 800db04:	4855      	ldr	r0, [pc, #340]	; (800dc5c <_strerror_r+0x364>)
 800db06:	bd10      	pop	{r4, pc}
 800db08:	4855      	ldr	r0, [pc, #340]	; (800dc60 <_strerror_r+0x368>)
 800db0a:	bd10      	pop	{r4, pc}
 800db0c:	4855      	ldr	r0, [pc, #340]	; (800dc64 <_strerror_r+0x36c>)
 800db0e:	bd10      	pop	{r4, pc}
 800db10:	4855      	ldr	r0, [pc, #340]	; (800dc68 <_strerror_r+0x370>)
 800db12:	bd10      	pop	{r4, pc}
 800db14:	4855      	ldr	r0, [pc, #340]	; (800dc6c <_strerror_r+0x374>)
 800db16:	bd10      	pop	{r4, pc}
 800db18:	4855      	ldr	r0, [pc, #340]	; (800dc70 <_strerror_r+0x378>)
 800db1a:	bd10      	pop	{r4, pc}
 800db1c:	4855      	ldr	r0, [pc, #340]	; (800dc74 <_strerror_r+0x37c>)
 800db1e:	bd10      	pop	{r4, pc}
 800db20:	4855      	ldr	r0, [pc, #340]	; (800dc78 <_strerror_r+0x380>)
 800db22:	bd10      	pop	{r4, pc}
 800db24:	4855      	ldr	r0, [pc, #340]	; (800dc7c <_strerror_r+0x384>)
 800db26:	bd10      	pop	{r4, pc}
 800db28:	4855      	ldr	r0, [pc, #340]	; (800dc80 <_strerror_r+0x388>)
 800db2a:	bd10      	pop	{r4, pc}
 800db2c:	4855      	ldr	r0, [pc, #340]	; (800dc84 <_strerror_r+0x38c>)
 800db2e:	bd10      	pop	{r4, pc}
 800db30:	4855      	ldr	r0, [pc, #340]	; (800dc88 <_strerror_r+0x390>)
 800db32:	bd10      	pop	{r4, pc}
 800db34:	4855      	ldr	r0, [pc, #340]	; (800dc8c <_strerror_r+0x394>)
 800db36:	bd10      	pop	{r4, pc}
 800db38:	4855      	ldr	r0, [pc, #340]	; (800dc90 <_strerror_r+0x398>)
 800db3a:	bd10      	pop	{r4, pc}
 800db3c:	4855      	ldr	r0, [pc, #340]	; (800dc94 <_strerror_r+0x39c>)
 800db3e:	bd10      	pop	{r4, pc}
 800db40:	4855      	ldr	r0, [pc, #340]	; (800dc98 <_strerror_r+0x3a0>)
 800db42:	bd10      	pop	{r4, pc}
 800db44:	4855      	ldr	r0, [pc, #340]	; (800dc9c <_strerror_r+0x3a4>)
 800db46:	bd10      	pop	{r4, pc}
 800db48:	4855      	ldr	r0, [pc, #340]	; (800dca0 <_strerror_r+0x3a8>)
 800db4a:	bd10      	pop	{r4, pc}
 800db4c:	4855      	ldr	r0, [pc, #340]	; (800dca4 <_strerror_r+0x3ac>)
 800db4e:	bd10      	pop	{r4, pc}
 800db50:	4855      	ldr	r0, [pc, #340]	; (800dca8 <_strerror_r+0x3b0>)
 800db52:	bd10      	pop	{r4, pc}
 800db54:	4855      	ldr	r0, [pc, #340]	; (800dcac <_strerror_r+0x3b4>)
 800db56:	bd10      	pop	{r4, pc}
 800db58:	4855      	ldr	r0, [pc, #340]	; (800dcb0 <_strerror_r+0x3b8>)
 800db5a:	bd10      	pop	{r4, pc}
 800db5c:	4855      	ldr	r0, [pc, #340]	; (800dcb4 <_strerror_r+0x3bc>)
 800db5e:	bd10      	pop	{r4, pc}
 800db60:	4855      	ldr	r0, [pc, #340]	; (800dcb8 <_strerror_r+0x3c0>)
 800db62:	bd10      	pop	{r4, pc}
 800db64:	2b00      	cmp	r3, #0
 800db66:	bf14      	ite	ne
 800db68:	461a      	movne	r2, r3
 800db6a:	4622      	moveq	r2, r4
 800db6c:	f000 f8b4 	bl	800dcd8 <_user_strerror>
 800db70:	4b52      	ldr	r3, [pc, #328]	; (800dcbc <_strerror_r+0x3c4>)
 800db72:	2800      	cmp	r0, #0
 800db74:	bf08      	it	eq
 800db76:	4618      	moveq	r0, r3
 800db78:	bd10      	pop	{r4, pc}
 800db7a:	4851      	ldr	r0, [pc, #324]	; (800dcc0 <_strerror_r+0x3c8>)
 800db7c:	bd10      	pop	{r4, pc}
 800db7e:	bf00      	nop
 800db80:	080100b0 	.word	0x080100b0
 800db84:	080100ba 	.word	0x080100ba
 800db88:	080100d4 	.word	0x080100d4
 800db8c:	080100e4 	.word	0x080100e4
 800db90:	080100fc 	.word	0x080100fc
 800db94:	08010106 	.word	0x08010106
 800db98:	08010120 	.word	0x08010120
 800db9c:	08010132 	.word	0x08010132
 800dba0:	08010144 	.word	0x08010144
 800dba4:	0801015d 	.word	0x0801015d
 800dba8:	0801016d 	.word	0x0801016d
 800dbac:	08010179 	.word	0x08010179
 800dbb0:	08010196 	.word	0x08010196
 800dbb4:	080101a8 	.word	0x080101a8
 800dbb8:	080101b9 	.word	0x080101b9
 800dbbc:	080101cb 	.word	0x080101cb
 800dbc0:	080101d7 	.word	0x080101d7
 800dbc4:	080101ef 	.word	0x080101ef
 800dbc8:	080101fb 	.word	0x080101fb
 800dbcc:	0801020d 	.word	0x0801020d
 800dbd0:	0801021c 	.word	0x0801021c
 800dbd4:	0801022c 	.word	0x0801022c
 800dbd8:	08010239 	.word	0x08010239
 800dbdc:	08010258 	.word	0x08010258
 800dbe0:	08010267 	.word	0x08010267
 800dbe4:	08010278 	.word	0x08010278
 800dbe8:	0801029c 	.word	0x0801029c
 800dbec:	080102ba 	.word	0x080102ba
 800dbf0:	080102d8 	.word	0x080102d8
 800dbf4:	080102f8 	.word	0x080102f8
 800dbf8:	0801030f 	.word	0x0801030f
 800dbfc:	0801031e 	.word	0x0801031e
 800dc00:	0801032d 	.word	0x0801032d
 800dc04:	08010341 	.word	0x08010341
 800dc08:	08010359 	.word	0x08010359
 800dc0c:	08010367 	.word	0x08010367
 800dc10:	08010374 	.word	0x08010374
 800dc14:	0801038a 	.word	0x0801038a
 800dc18:	08010399 	.word	0x08010399
 800dc1c:	080103a5 	.word	0x080103a5
 800dc20:	080103d4 	.word	0x080103d4
 800dc24:	080103e5 	.word	0x080103e5
 800dc28:	08010400 	.word	0x08010400
 800dc2c:	08010413 	.word	0x08010413
 800dc30:	08010429 	.word	0x08010429
 800dc34:	08010432 	.word	0x08010432
 800dc38:	08010449 	.word	0x08010449
 800dc3c:	08010451 	.word	0x08010451
 800dc40:	0801045e 	.word	0x0801045e
 800dc44:	08010473 	.word	0x08010473
 800dc48:	08010487 	.word	0x08010487
 800dc4c:	0801049f 	.word	0x0801049f
 800dc50:	080104ae 	.word	0x080104ae
 800dc54:	080104bf 	.word	0x080104bf
 800dc58:	080104d2 	.word	0x080104d2
 800dc5c:	080104de 	.word	0x080104de
 800dc60:	080104f7 	.word	0x080104f7
 800dc64:	0801050b 	.word	0x0801050b
 800dc68:	08010526 	.word	0x08010526
 800dc6c:	0801053e 	.word	0x0801053e
 800dc70:	08010558 	.word	0x08010558
 800dc74:	08010560 	.word	0x08010560
 800dc78:	08010590 	.word	0x08010590
 800dc7c:	080105af 	.word	0x080105af
 800dc80:	080105ce 	.word	0x080105ce
 800dc84:	080105e5 	.word	0x080105e5
 800dc88:	080105f8 	.word	0x080105f8
 800dc8c:	08010611 	.word	0x08010611
 800dc90:	08010628 	.word	0x08010628
 800dc94:	0801063e 	.word	0x0801063e
 800dc98:	0801065f 	.word	0x0801065f
 800dc9c:	08010677 	.word	0x08010677
 800dca0:	08010693 	.word	0x08010693
 800dca4:	080106a6 	.word	0x080106a6
 800dca8:	080106bc 	.word	0x080106bc
 800dcac:	080106d0 	.word	0x080106d0
 800dcb0:	080106f2 	.word	0x080106f2
 800dcb4:	08010718 	.word	0x08010718
 800dcb8:	08010729 	.word	0x08010729
 800dcbc:	0801055f 	.word	0x0801055f
 800dcc0:	080100a8 	.word	0x080100a8

0800dcc4 <strerror>:
 800dcc4:	4601      	mov	r1, r0
 800dcc6:	4803      	ldr	r0, [pc, #12]	; (800dcd4 <strerror+0x10>)
 800dcc8:	2300      	movs	r3, #0
 800dcca:	461a      	mov	r2, r3
 800dccc:	6800      	ldr	r0, [r0, #0]
 800dcce:	f7ff be13 	b.w	800d8f8 <_strerror_r>
 800dcd2:	bf00      	nop
 800dcd4:	20000018 	.word	0x20000018

0800dcd8 <_user_strerror>:
 800dcd8:	2000      	movs	r0, #0
 800dcda:	4770      	bx	lr

0800dcdc <_init>:
 800dcdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dcde:	bf00      	nop
 800dce0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dce2:	bc08      	pop	{r3}
 800dce4:	469e      	mov	lr, r3
 800dce6:	4770      	bx	lr

0800dce8 <_fini>:
 800dce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dcea:	bf00      	nop
 800dcec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dcee:	bc08      	pop	{r3}
 800dcf0:	469e      	mov	lr, r3
 800dcf2:	4770      	bx	lr
