
nucleos-f429zi-net14.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d138  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002788  0800d2e8  0800d2e8  0001d2e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800fa70  0800fa70  0001fa70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800fa78  0800fa78  0001fa78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800fa7c  0800fa7c  0001fa7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  20000000  0800fa80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
  8 .bss          0000aee4  20000078  20000078  00020078  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  2000af5c  2000af5c  00020078  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 11 .debug_info   000532a4  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00009205  00000000  00000000  0007334c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0001faa6  00000000  00000000  0007c551  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002330  00000000  00000000  0009bff8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002810  00000000  00000000  0009e328  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00015c51  00000000  00000000  000a0b38  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    0000afb6  00000000  00000000  000b6789  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  000c173f  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000651c  00000000  00000000  000c17bc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000078 	.word	0x20000078
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800d2d0 	.word	0x0800d2d0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	0800d2d0 	.word	0x0800d2d0

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <__aeabi_uldivmod>:
 8000200:	b953      	cbnz	r3, 8000218 <__aeabi_uldivmod+0x18>
 8000202:	b94a      	cbnz	r2, 8000218 <__aeabi_uldivmod+0x18>
 8000204:	2900      	cmp	r1, #0
 8000206:	bf08      	it	eq
 8000208:	2800      	cmpeq	r0, #0
 800020a:	bf1c      	itt	ne
 800020c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000210:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000214:	f000 b97a 	b.w	800050c <__aeabi_idiv0>
 8000218:	f1ad 0c08 	sub.w	ip, sp, #8
 800021c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000220:	f000 f806 	bl	8000230 <__udivmoddi4>
 8000224:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000228:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800022c:	b004      	add	sp, #16
 800022e:	4770      	bx	lr

08000230 <__udivmoddi4>:
 8000230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000234:	468c      	mov	ip, r1
 8000236:	460d      	mov	r5, r1
 8000238:	4604      	mov	r4, r0
 800023a:	9e08      	ldr	r6, [sp, #32]
 800023c:	2b00      	cmp	r3, #0
 800023e:	d151      	bne.n	80002e4 <__udivmoddi4+0xb4>
 8000240:	428a      	cmp	r2, r1
 8000242:	4617      	mov	r7, r2
 8000244:	d96d      	bls.n	8000322 <__udivmoddi4+0xf2>
 8000246:	fab2 fe82 	clz	lr, r2
 800024a:	f1be 0f00 	cmp.w	lr, #0
 800024e:	d00b      	beq.n	8000268 <__udivmoddi4+0x38>
 8000250:	f1ce 0c20 	rsb	ip, lr, #32
 8000254:	fa01 f50e 	lsl.w	r5, r1, lr
 8000258:	fa20 fc0c 	lsr.w	ip, r0, ip
 800025c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000260:	ea4c 0c05 	orr.w	ip, ip, r5
 8000264:	fa00 f40e 	lsl.w	r4, r0, lr
 8000268:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800026c:	0c25      	lsrs	r5, r4, #16
 800026e:	fbbc f8fa 	udiv	r8, ip, sl
 8000272:	fa1f f987 	uxth.w	r9, r7
 8000276:	fb0a cc18 	mls	ip, sl, r8, ip
 800027a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800027e:	fb08 f309 	mul.w	r3, r8, r9
 8000282:	42ab      	cmp	r3, r5
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x6c>
 8000286:	19ed      	adds	r5, r5, r7
 8000288:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 800028c:	f080 8123 	bcs.w	80004d6 <__udivmoddi4+0x2a6>
 8000290:	42ab      	cmp	r3, r5
 8000292:	f240 8120 	bls.w	80004d6 <__udivmoddi4+0x2a6>
 8000296:	f1a8 0802 	sub.w	r8, r8, #2
 800029a:	443d      	add	r5, r7
 800029c:	1aed      	subs	r5, r5, r3
 800029e:	b2a4      	uxth	r4, r4
 80002a0:	fbb5 f0fa 	udiv	r0, r5, sl
 80002a4:	fb0a 5510 	mls	r5, sl, r0, r5
 80002a8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002ac:	fb00 f909 	mul.w	r9, r0, r9
 80002b0:	45a1      	cmp	r9, r4
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x98>
 80002b4:	19e4      	adds	r4, r4, r7
 80002b6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002ba:	f080 810a 	bcs.w	80004d2 <__udivmoddi4+0x2a2>
 80002be:	45a1      	cmp	r9, r4
 80002c0:	f240 8107 	bls.w	80004d2 <__udivmoddi4+0x2a2>
 80002c4:	3802      	subs	r0, #2
 80002c6:	443c      	add	r4, r7
 80002c8:	eba4 0409 	sub.w	r4, r4, r9
 80002cc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002d0:	2100      	movs	r1, #0
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d061      	beq.n	800039a <__udivmoddi4+0x16a>
 80002d6:	fa24 f40e 	lsr.w	r4, r4, lr
 80002da:	2300      	movs	r3, #0
 80002dc:	6034      	str	r4, [r6, #0]
 80002de:	6073      	str	r3, [r6, #4]
 80002e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d907      	bls.n	80002f8 <__udivmoddi4+0xc8>
 80002e8:	2e00      	cmp	r6, #0
 80002ea:	d054      	beq.n	8000396 <__udivmoddi4+0x166>
 80002ec:	2100      	movs	r1, #0
 80002ee:	e886 0021 	stmia.w	r6, {r0, r5}
 80002f2:	4608      	mov	r0, r1
 80002f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f8:	fab3 f183 	clz	r1, r3
 80002fc:	2900      	cmp	r1, #0
 80002fe:	f040 808e 	bne.w	800041e <__udivmoddi4+0x1ee>
 8000302:	42ab      	cmp	r3, r5
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xdc>
 8000306:	4282      	cmp	r2, r0
 8000308:	f200 80fa 	bhi.w	8000500 <__udivmoddi4+0x2d0>
 800030c:	1a84      	subs	r4, r0, r2
 800030e:	eb65 0503 	sbc.w	r5, r5, r3
 8000312:	2001      	movs	r0, #1
 8000314:	46ac      	mov	ip, r5
 8000316:	2e00      	cmp	r6, #0
 8000318:	d03f      	beq.n	800039a <__udivmoddi4+0x16a>
 800031a:	e886 1010 	stmia.w	r6, {r4, ip}
 800031e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000322:	b912      	cbnz	r2, 800032a <__udivmoddi4+0xfa>
 8000324:	2701      	movs	r7, #1
 8000326:	fbb7 f7f2 	udiv	r7, r7, r2
 800032a:	fab7 fe87 	clz	lr, r7
 800032e:	f1be 0f00 	cmp.w	lr, #0
 8000332:	d134      	bne.n	800039e <__udivmoddi4+0x16e>
 8000334:	1beb      	subs	r3, r5, r7
 8000336:	0c3a      	lsrs	r2, r7, #16
 8000338:	fa1f fc87 	uxth.w	ip, r7
 800033c:	2101      	movs	r1, #1
 800033e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000342:	0c25      	lsrs	r5, r4, #16
 8000344:	fb02 3318 	mls	r3, r2, r8, r3
 8000348:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800034c:	fb0c f308 	mul.w	r3, ip, r8
 8000350:	42ab      	cmp	r3, r5
 8000352:	d907      	bls.n	8000364 <__udivmoddi4+0x134>
 8000354:	19ed      	adds	r5, r5, r7
 8000356:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x132>
 800035c:	42ab      	cmp	r3, r5
 800035e:	f200 80d1 	bhi.w	8000504 <__udivmoddi4+0x2d4>
 8000362:	4680      	mov	r8, r0
 8000364:	1aed      	subs	r5, r5, r3
 8000366:	b2a3      	uxth	r3, r4
 8000368:	fbb5 f0f2 	udiv	r0, r5, r2
 800036c:	fb02 5510 	mls	r5, r2, r0, r5
 8000370:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000374:	fb0c fc00 	mul.w	ip, ip, r0
 8000378:	45a4      	cmp	ip, r4
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x15c>
 800037c:	19e4      	adds	r4, r4, r7
 800037e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x15a>
 8000384:	45a4      	cmp	ip, r4
 8000386:	f200 80b8 	bhi.w	80004fa <__udivmoddi4+0x2ca>
 800038a:	4618      	mov	r0, r3
 800038c:	eba4 040c 	sub.w	r4, r4, ip
 8000390:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000394:	e79d      	b.n	80002d2 <__udivmoddi4+0xa2>
 8000396:	4631      	mov	r1, r6
 8000398:	4630      	mov	r0, r6
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	f1ce 0420 	rsb	r4, lr, #32
 80003a2:	fa05 f30e 	lsl.w	r3, r5, lr
 80003a6:	fa07 f70e 	lsl.w	r7, r7, lr
 80003aa:	fa20 f804 	lsr.w	r8, r0, r4
 80003ae:	0c3a      	lsrs	r2, r7, #16
 80003b0:	fa25 f404 	lsr.w	r4, r5, r4
 80003b4:	ea48 0803 	orr.w	r8, r8, r3
 80003b8:	fbb4 f1f2 	udiv	r1, r4, r2
 80003bc:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003c0:	fb02 4411 	mls	r4, r2, r1, r4
 80003c4:	fa1f fc87 	uxth.w	ip, r7
 80003c8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003cc:	fb01 f30c 	mul.w	r3, r1, ip
 80003d0:	42ab      	cmp	r3, r5
 80003d2:	fa00 f40e 	lsl.w	r4, r0, lr
 80003d6:	d909      	bls.n	80003ec <__udivmoddi4+0x1bc>
 80003d8:	19ed      	adds	r5, r5, r7
 80003da:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 80003de:	f080 808a 	bcs.w	80004f6 <__udivmoddi4+0x2c6>
 80003e2:	42ab      	cmp	r3, r5
 80003e4:	f240 8087 	bls.w	80004f6 <__udivmoddi4+0x2c6>
 80003e8:	3902      	subs	r1, #2
 80003ea:	443d      	add	r5, r7
 80003ec:	1aeb      	subs	r3, r5, r3
 80003ee:	fa1f f588 	uxth.w	r5, r8
 80003f2:	fbb3 f0f2 	udiv	r0, r3, r2
 80003f6:	fb02 3310 	mls	r3, r2, r0, r3
 80003fa:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003fe:	fb00 f30c 	mul.w	r3, r0, ip
 8000402:	42ab      	cmp	r3, r5
 8000404:	d907      	bls.n	8000416 <__udivmoddi4+0x1e6>
 8000406:	19ed      	adds	r5, r5, r7
 8000408:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800040c:	d26f      	bcs.n	80004ee <__udivmoddi4+0x2be>
 800040e:	42ab      	cmp	r3, r5
 8000410:	d96d      	bls.n	80004ee <__udivmoddi4+0x2be>
 8000412:	3802      	subs	r0, #2
 8000414:	443d      	add	r5, r7
 8000416:	1aeb      	subs	r3, r5, r3
 8000418:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041c:	e78f      	b.n	800033e <__udivmoddi4+0x10e>
 800041e:	f1c1 0720 	rsb	r7, r1, #32
 8000422:	fa22 f807 	lsr.w	r8, r2, r7
 8000426:	408b      	lsls	r3, r1
 8000428:	fa05 f401 	lsl.w	r4, r5, r1
 800042c:	ea48 0303 	orr.w	r3, r8, r3
 8000430:	fa20 fe07 	lsr.w	lr, r0, r7
 8000434:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000438:	40fd      	lsrs	r5, r7
 800043a:	ea4e 0e04 	orr.w	lr, lr, r4
 800043e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000442:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000446:	fb0c 5519 	mls	r5, ip, r9, r5
 800044a:	fa1f f883 	uxth.w	r8, r3
 800044e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000452:	fb09 f408 	mul.w	r4, r9, r8
 8000456:	42ac      	cmp	r4, r5
 8000458:	fa02 f201 	lsl.w	r2, r2, r1
 800045c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000460:	d908      	bls.n	8000474 <__udivmoddi4+0x244>
 8000462:	18ed      	adds	r5, r5, r3
 8000464:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000468:	d243      	bcs.n	80004f2 <__udivmoddi4+0x2c2>
 800046a:	42ac      	cmp	r4, r5
 800046c:	d941      	bls.n	80004f2 <__udivmoddi4+0x2c2>
 800046e:	f1a9 0902 	sub.w	r9, r9, #2
 8000472:	441d      	add	r5, r3
 8000474:	1b2d      	subs	r5, r5, r4
 8000476:	fa1f fe8e 	uxth.w	lr, lr
 800047a:	fbb5 f0fc 	udiv	r0, r5, ip
 800047e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000482:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000486:	fb00 f808 	mul.w	r8, r0, r8
 800048a:	45a0      	cmp	r8, r4
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x26e>
 800048e:	18e4      	adds	r4, r4, r3
 8000490:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000494:	d229      	bcs.n	80004ea <__udivmoddi4+0x2ba>
 8000496:	45a0      	cmp	r8, r4
 8000498:	d927      	bls.n	80004ea <__udivmoddi4+0x2ba>
 800049a:	3802      	subs	r0, #2
 800049c:	441c      	add	r4, r3
 800049e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004a2:	eba4 0408 	sub.w	r4, r4, r8
 80004a6:	fba0 8902 	umull	r8, r9, r0, r2
 80004aa:	454c      	cmp	r4, r9
 80004ac:	46c6      	mov	lr, r8
 80004ae:	464d      	mov	r5, r9
 80004b0:	d315      	bcc.n	80004de <__udivmoddi4+0x2ae>
 80004b2:	d012      	beq.n	80004da <__udivmoddi4+0x2aa>
 80004b4:	b156      	cbz	r6, 80004cc <__udivmoddi4+0x29c>
 80004b6:	ebba 030e 	subs.w	r3, sl, lr
 80004ba:	eb64 0405 	sbc.w	r4, r4, r5
 80004be:	fa04 f707 	lsl.w	r7, r4, r7
 80004c2:	40cb      	lsrs	r3, r1
 80004c4:	431f      	orrs	r7, r3
 80004c6:	40cc      	lsrs	r4, r1
 80004c8:	6037      	str	r7, [r6, #0]
 80004ca:	6074      	str	r4, [r6, #4]
 80004cc:	2100      	movs	r1, #0
 80004ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d2:	4618      	mov	r0, r3
 80004d4:	e6f8      	b.n	80002c8 <__udivmoddi4+0x98>
 80004d6:	4690      	mov	r8, r2
 80004d8:	e6e0      	b.n	800029c <__udivmoddi4+0x6c>
 80004da:	45c2      	cmp	sl, r8
 80004dc:	d2ea      	bcs.n	80004b4 <__udivmoddi4+0x284>
 80004de:	ebb8 0e02 	subs.w	lr, r8, r2
 80004e2:	eb69 0503 	sbc.w	r5, r9, r3
 80004e6:	3801      	subs	r0, #1
 80004e8:	e7e4      	b.n	80004b4 <__udivmoddi4+0x284>
 80004ea:	4628      	mov	r0, r5
 80004ec:	e7d7      	b.n	800049e <__udivmoddi4+0x26e>
 80004ee:	4640      	mov	r0, r8
 80004f0:	e791      	b.n	8000416 <__udivmoddi4+0x1e6>
 80004f2:	4681      	mov	r9, r0
 80004f4:	e7be      	b.n	8000474 <__udivmoddi4+0x244>
 80004f6:	4601      	mov	r1, r0
 80004f8:	e778      	b.n	80003ec <__udivmoddi4+0x1bc>
 80004fa:	3802      	subs	r0, #2
 80004fc:	443c      	add	r4, r7
 80004fe:	e745      	b.n	800038c <__udivmoddi4+0x15c>
 8000500:	4608      	mov	r0, r1
 8000502:	e708      	b.n	8000316 <__udivmoddi4+0xe6>
 8000504:	f1a8 0802 	sub.w	r8, r8, #2
 8000508:	443d      	add	r5, r7
 800050a:	e72b      	b.n	8000364 <__udivmoddi4+0x134>

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000510:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000512:	4b0b      	ldr	r3, [pc, #44]	; (8000540 <HAL_Init+0x30>)
 8000514:	681a      	ldr	r2, [r3, #0]
 8000516:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800051a:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800051c:	681a      	ldr	r2, [r3, #0]
 800051e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000522:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000524:	681a      	ldr	r2, [r3, #0]
 8000526:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800052a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800052c:	2003      	movs	r0, #3
 800052e:	f000 f82f 	bl	8000590 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000532:	2000      	movs	r0, #0
 8000534:	f00c f9e8 	bl	800c908 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000538:	f00c f9c4 	bl	800c8c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 800053c:	2000      	movs	r0, #0
 800053e:	bd08      	pop	{r3, pc}
 8000540:	40023c00 	.word	0x40023c00

08000544 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000544:	4a03      	ldr	r2, [pc, #12]	; (8000554 <HAL_IncTick+0x10>)
 8000546:	6811      	ldr	r1, [r2, #0]
 8000548:	4b03      	ldr	r3, [pc, #12]	; (8000558 <HAL_IncTick+0x14>)
 800054a:	781b      	ldrb	r3, [r3, #0]
 800054c:	440b      	add	r3, r1
 800054e:	6013      	str	r3, [r2, #0]
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop
 8000554:	20004224 	.word	0x20004224
 8000558:	20000000 	.word	0x20000000

0800055c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800055c:	4b01      	ldr	r3, [pc, #4]	; (8000564 <HAL_GetTick+0x8>)
 800055e:	6818      	ldr	r0, [r3, #0]
}
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop
 8000564:	20004224 	.word	0x20004224

08000568 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000568:	b538      	push	{r3, r4, r5, lr}
 800056a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800056c:	f7ff fff6 	bl	800055c <HAL_GetTick>
 8000570:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000572:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8000576:	d002      	beq.n	800057e <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8000578:	4b04      	ldr	r3, [pc, #16]	; (800058c <HAL_Delay+0x24>)
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800057e:	f7ff ffed 	bl	800055c <HAL_GetTick>
 8000582:	1b40      	subs	r0, r0, r5
 8000584:	4284      	cmp	r4, r0
 8000586:	d8fa      	bhi.n	800057e <HAL_Delay+0x16>
  {
  }
}
 8000588:	bd38      	pop	{r3, r4, r5, pc}
 800058a:	bf00      	nop
 800058c:	20000000 	.word	0x20000000

08000590 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000590:	4a07      	ldr	r2, [pc, #28]	; (80005b0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000592:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000594:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000598:	041b      	lsls	r3, r3, #16
 800059a:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800059c:	0200      	lsls	r0, r0, #8
 800059e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005a2:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 80005a4:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 80005a8:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80005ac:	60d0      	str	r0, [r2, #12]
 80005ae:	4770      	bx	lr
 80005b0:	e000ed00 	.word	0xe000ed00

080005b4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80005b4:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005b6:	4b16      	ldr	r3, [pc, #88]	; (8000610 <HAL_NVIC_SetPriority+0x5c>)
 80005b8:	68db      	ldr	r3, [r3, #12]
 80005ba:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005be:	f1c3 0407 	rsb	r4, r3, #7
 80005c2:	2c04      	cmp	r4, #4
 80005c4:	bf28      	it	cs
 80005c6:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005c8:	1d1d      	adds	r5, r3, #4
 80005ca:	2d06      	cmp	r5, #6
 80005cc:	d917      	bls.n	80005fe <HAL_NVIC_SetPriority+0x4a>
 80005ce:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005d0:	2501      	movs	r5, #1
 80005d2:	fa05 f404 	lsl.w	r4, r5, r4
 80005d6:	3c01      	subs	r4, #1
 80005d8:	4021      	ands	r1, r4
 80005da:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005dc:	fa05 f303 	lsl.w	r3, r5, r3
 80005e0:	3b01      	subs	r3, #1
 80005e2:	4013      	ands	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005e4:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80005e6:	2800      	cmp	r0, #0
 80005e8:	db0b      	blt.n	8000602 <HAL_NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005ea:	0109      	lsls	r1, r1, #4
 80005ec:	b2c9      	uxtb	r1, r1
 80005ee:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80005f2:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80005f6:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80005fa:	bc30      	pop	{r4, r5}
 80005fc:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005fe:	2300      	movs	r3, #0
 8000600:	e7e6      	b.n	80005d0 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000602:	f000 000f 	and.w	r0, r0, #15
 8000606:	0109      	lsls	r1, r1, #4
 8000608:	b2c9      	uxtb	r1, r1
 800060a:	4b02      	ldr	r3, [pc, #8]	; (8000614 <HAL_NVIC_SetPriority+0x60>)
 800060c:	5419      	strb	r1, [r3, r0]
 800060e:	e7f4      	b.n	80005fa <HAL_NVIC_SetPriority+0x46>
 8000610:	e000ed00 	.word	0xe000ed00
 8000614:	e000ed14 	.word	0xe000ed14

08000618 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000618:	2800      	cmp	r0, #0
 800061a:	db08      	blt.n	800062e <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800061c:	0942      	lsrs	r2, r0, #5
 800061e:	f000 001f 	and.w	r0, r0, #31
 8000622:	2301      	movs	r3, #1
 8000624:	fa03 f000 	lsl.w	r0, r3, r0
 8000628:	4b01      	ldr	r3, [pc, #4]	; (8000630 <HAL_NVIC_EnableIRQ+0x18>)
 800062a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800062e:	4770      	bx	lr
 8000630:	e000e100 	.word	0xe000e100

08000634 <ETH_MACAddressConfig>:

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8000634:	7950      	ldrb	r0, [r2, #5]
 8000636:	7913      	ldrb	r3, [r2, #4]
 8000638:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800063c:	4807      	ldr	r0, [pc, #28]	; (800065c <ETH_MACAddressConfig+0x28>)
 800063e:	500b      	str	r3, [r1, r0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8000640:	78d0      	ldrb	r0, [r2, #3]
 8000642:	7893      	ldrb	r3, [r2, #2]
 8000644:	041b      	lsls	r3, r3, #16
 8000646:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800064a:	7850      	ldrb	r0, [r2, #1]
 800064c:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8000650:	7812      	ldrb	r2, [r2, #0]
 8000652:	4313      	orrs	r3, r2
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8000654:	4a02      	ldr	r2, [pc, #8]	; (8000660 <ETH_MACAddressConfig+0x2c>)
 8000656:	508b      	str	r3, [r1, r2]
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop
 800065c:	40028040 	.word	0x40028040
 8000660:	40028044 	.word	0x40028044

08000664 <ETH_DMATransmissionEnable>:
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8000664:	6801      	ldr	r1, [r0, #0]
 8000666:	f241 0218 	movw	r2, #4120	; 0x1018
 800066a:	588b      	ldr	r3, [r1, r2]
 800066c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000670:	508b      	str	r3, [r1, r2]
 8000672:	4770      	bx	lr

08000674 <ETH_DMAReceptionEnable>:
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8000674:	6801      	ldr	r1, [r0, #0]
 8000676:	f241 0218 	movw	r2, #4120	; 0x1018
 800067a:	588b      	ldr	r3, [r1, r2]
 800067c:	f043 0302 	orr.w	r3, r3, #2
 8000680:	508b      	str	r3, [r1, r2]
 8000682:	4770      	bx	lr

08000684 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8000684:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000686:	4b08      	ldr	r3, [pc, #32]	; (80006a8 <ETH_Delay+0x24>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	4a08      	ldr	r2, [pc, #32]	; (80006ac <ETH_Delay+0x28>)
 800068c:	fba2 2303 	umull	r2, r3, r2, r3
 8000690:	0a5b      	lsrs	r3, r3, #9
 8000692:	fb00 f003 	mul.w	r0, r0, r3
 8000696:	9001      	str	r0, [sp, #4]
  do 
  {
    __NOP();
 8000698:	bf00      	nop
  } 
  while (Delay --);
 800069a:	9b01      	ldr	r3, [sp, #4]
 800069c:	1e5a      	subs	r2, r3, #1
 800069e:	9201      	str	r2, [sp, #4]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d1f9      	bne.n	8000698 <ETH_Delay+0x14>
}
 80006a4:	b002      	add	sp, #8
 80006a6:	4770      	bx	lr
 80006a8:	20000010 	.word	0x20000010
 80006ac:	10624dd3 	.word	0x10624dd3

080006b0 <ETH_MACTransmissionEnable>:
{ 
 80006b0:	b510      	push	{r4, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	4604      	mov	r4, r0
  __IO uint32_t tmpreg1 = 0U;
 80006b6:	2300      	movs	r3, #0
 80006b8:	9301      	str	r3, [sp, #4]
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80006ba:	6802      	ldr	r2, [r0, #0]
 80006bc:	6813      	ldr	r3, [r2, #0]
 80006be:	f043 0308 	orr.w	r3, r3, #8
 80006c2:	6013      	str	r3, [r2, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 80006c4:	6803      	ldr	r3, [r0, #0]
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	9301      	str	r3, [sp, #4]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80006ca:	2001      	movs	r0, #1
 80006cc:	f7ff ffda 	bl	8000684 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80006d0:	6823      	ldr	r3, [r4, #0]
 80006d2:	9a01      	ldr	r2, [sp, #4]
 80006d4:	601a      	str	r2, [r3, #0]
}
 80006d6:	b002      	add	sp, #8
 80006d8:	bd10      	pop	{r4, pc}

080006da <ETH_MACReceptionEnable>:
{ 
 80006da:	b510      	push	{r4, lr}
 80006dc:	b082      	sub	sp, #8
 80006de:	4604      	mov	r4, r0
  __IO uint32_t tmpreg1 = 0U;
 80006e0:	2300      	movs	r3, #0
 80006e2:	9301      	str	r3, [sp, #4]
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 80006e4:	6802      	ldr	r2, [r0, #0]
 80006e6:	6813      	ldr	r3, [r2, #0]
 80006e8:	f043 0304 	orr.w	r3, r3, #4
 80006ec:	6013      	str	r3, [r2, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 80006ee:	6803      	ldr	r3, [r0, #0]
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	9301      	str	r3, [sp, #4]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80006f4:	2001      	movs	r0, #1
 80006f6:	f7ff ffc5 	bl	8000684 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80006fa:	6823      	ldr	r3, [r4, #0]
 80006fc:	9a01      	ldr	r2, [sp, #4]
 80006fe:	601a      	str	r2, [r3, #0]
}
 8000700:	b002      	add	sp, #8
 8000702:	bd10      	pop	{r4, pc}

08000704 <ETH_FlushTransmitFIFO>:
{
 8000704:	b530      	push	{r4, r5, lr}
 8000706:	b083      	sub	sp, #12
 8000708:	4605      	mov	r5, r0
  __IO uint32_t tmpreg1 = 0U;
 800070a:	2300      	movs	r3, #0
 800070c:	9301      	str	r3, [sp, #4]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800070e:	6802      	ldr	r2, [r0, #0]
 8000710:	f241 0418 	movw	r4, #4120	; 0x1018
 8000714:	5913      	ldr	r3, [r2, r4]
 8000716:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800071a:	5113      	str	r3, [r2, r4]
  tmpreg1 = (heth->Instance)->DMAOMR;
 800071c:	6803      	ldr	r3, [r0, #0]
 800071e:	591b      	ldr	r3, [r3, r4]
 8000720:	9301      	str	r3, [sp, #4]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8000722:	2001      	movs	r0, #1
 8000724:	f7ff ffae 	bl	8000684 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8000728:	682b      	ldr	r3, [r5, #0]
 800072a:	9a01      	ldr	r2, [sp, #4]
 800072c:	511a      	str	r2, [r3, r4]
}
 800072e:	b003      	add	sp, #12
 8000730:	bd30      	pop	{r4, r5, pc}
	...

08000734 <ETH_MACDMAConfig>:
{
 8000734:	b570      	push	{r4, r5, r6, lr}
 8000736:	b09e      	sub	sp, #120	; 0x78
 8000738:	4604      	mov	r4, r0
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 800073a:	b129      	cbz	r1, 8000748 <ETH_MACDMAConfig+0x14>
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 800073c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000740:	60c3      	str	r3, [r0, #12]
    (heth->Init).Speed = ETH_SPEED_100M;
 8000742:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000746:	6083      	str	r3, [r0, #8]
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8000748:	69e3      	ldr	r3, [r4, #28]
 800074a:	2b00      	cmp	r3, #0
 800074c:	d16a      	bne.n	8000824 <ETH_MACDMAConfig+0xf0>
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 800074e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000752:	9307      	str	r3, [sp, #28]
  tmpreg1 = (heth->Instance)->MACCR;
 8000754:	6821      	ldr	r1, [r4, #0]
 8000756:	680b      	ldr	r3, [r1, #0]
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8000758:	4a39      	ldr	r2, [pc, #228]	; (8000840 <ETH_MACDMAConfig+0x10c>)
 800075a:	401a      	ands	r2, r3
                       (heth->Init).Speed | 
 800075c:	68a3      	ldr	r3, [r4, #8]
                       (heth->Init).DuplexMode | 
 800075e:	68e0      	ldr	r0, [r4, #12]
                       macinit.LoopbackMode |
 8000760:	4303      	orrs	r3, r0
                       macinit.ChecksumOffload |    
 8000762:	9807      	ldr	r0, [sp, #28]
                       (heth->Init).DuplexMode | 
 8000764:	4303      	orrs	r3, r0
                       macinit.ChecksumOffload |    
 8000766:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 800076a:	4313      	orrs	r3, r2
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800076c:	600b      	str	r3, [r1, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 800076e:	6823      	ldr	r3, [r4, #0]
 8000770:	681d      	ldr	r5, [r3, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8000772:	2001      	movs	r0, #1
 8000774:	f7ff fef8 	bl	8000568 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8000778:	6823      	ldr	r3, [r4, #0]
 800077a:	601d      	str	r5, [r3, #0]
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800077c:	6823      	ldr	r3, [r4, #0]
 800077e:	2240      	movs	r2, #64	; 0x40
 8000780:	605a      	str	r2, [r3, #4]
   tmpreg1 = (heth->Instance)->MACFFR;
 8000782:	6823      	ldr	r3, [r4, #0]
 8000784:	685d      	ldr	r5, [r3, #4]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8000786:	2001      	movs	r0, #1
 8000788:	f7ff feee 	bl	8000568 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 800078c:	6823      	ldr	r3, [r4, #0]
 800078e:	605d      	str	r5, [r3, #4]
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8000790:	6823      	ldr	r3, [r4, #0]
 8000792:	2500      	movs	r5, #0
 8000794:	609d      	str	r5, [r3, #8]
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8000796:	6823      	ldr	r3, [r4, #0]
 8000798:	60dd      	str	r5, [r3, #12]
   tmpreg1 = (heth->Instance)->MACFCR;
 800079a:	6822      	ldr	r2, [r4, #0]
 800079c:	6993      	ldr	r3, [r2, #24]
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800079e:	f023 03be 	bic.w	r3, r3, #190	; 0xbe
 80007a2:	041b      	lsls	r3, r3, #16
 80007a4:	0c1b      	lsrs	r3, r3, #16
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80007a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80007aa:	6193      	str	r3, [r2, #24]
   tmpreg1 = (heth->Instance)->MACFCR;
 80007ac:	6823      	ldr	r3, [r4, #0]
 80007ae:	699e      	ldr	r6, [r3, #24]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80007b0:	2001      	movs	r0, #1
 80007b2:	f7ff fed9 	bl	8000568 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 80007b6:	6823      	ldr	r3, [r4, #0]
 80007b8:	619e      	str	r6, [r3, #24]
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80007ba:	6823      	ldr	r3, [r4, #0]
 80007bc:	61dd      	str	r5, [r3, #28]
    tmpreg1 = (heth->Instance)->MACVLANTR;
 80007be:	6823      	ldr	r3, [r4, #0]
 80007c0:	69dd      	ldr	r5, [r3, #28]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80007c2:	2001      	movs	r0, #1
 80007c4:	f7ff fed0 	bl	8000568 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 80007c8:	6823      	ldr	r3, [r4, #0]
 80007ca:	61dd      	str	r5, [r3, #28]
    tmpreg1 = (heth->Instance)->DMAOMR;
 80007cc:	6822      	ldr	r2, [r4, #0]
 80007ce:	f241 0518 	movw	r5, #4120	; 0x1018
 80007d2:	5951      	ldr	r1, [r2, r5]
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80007d4:	4b1b      	ldr	r3, [pc, #108]	; (8000844 <ETH_MACDMAConfig+0x110>)
 80007d6:	400b      	ands	r3, r1
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80007d8:	f043 7308 	orr.w	r3, r3, #35651584	; 0x2200000
 80007dc:	f043 0304 	orr.w	r3, r3, #4
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80007e0:	5153      	str	r3, [r2, r5]
    tmpreg1 = (heth->Instance)->DMAOMR;
 80007e2:	6823      	ldr	r3, [r4, #0]
 80007e4:	595e      	ldr	r6, [r3, r5]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80007e6:	2001      	movs	r0, #1
 80007e8:	f7ff febe 	bl	8000568 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 80007ec:	6823      	ldr	r3, [r4, #0]
 80007ee:	515e      	str	r6, [r3, r5]
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80007f0:	6823      	ldr	r3, [r4, #0]
 80007f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007f6:	4a14      	ldr	r2, [pc, #80]	; (8000848 <ETH_MACDMAConfig+0x114>)
 80007f8:	601a      	str	r2, [r3, #0]
     tmpreg1 = (heth->Instance)->DMABMR;
 80007fa:	6823      	ldr	r3, [r4, #0]
 80007fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000800:	681d      	ldr	r5, [r3, #0]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8000802:	2001      	movs	r0, #1
 8000804:	f7ff feb0 	bl	8000568 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8000808:	6823      	ldr	r3, [r4, #0]
 800080a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800080e:	601d      	str	r5, [r3, #0]
     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8000810:	69a3      	ldr	r3, [r4, #24]
 8000812:	2b01      	cmp	r3, #1
 8000814:	d009      	beq.n	800082a <ETH_MACDMAConfig+0xf6>
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8000816:	6962      	ldr	r2, [r4, #20]
 8000818:	2100      	movs	r1, #0
 800081a:	4620      	mov	r0, r4
 800081c:	f7ff ff0a 	bl	8000634 <ETH_MACAddressConfig>
}
 8000820:	b01e      	add	sp, #120	; 0x78
 8000822:	bd70      	pop	{r4, r5, r6, pc}
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8000824:	2300      	movs	r3, #0
 8000826:	9307      	str	r3, [sp, #28]
 8000828:	e794      	b.n	8000754 <ETH_MACDMAConfig+0x20>
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 800082a:	6821      	ldr	r1, [r4, #0]
 800082c:	f241 021c 	movw	r2, #4124	; 0x101c
 8000830:	588b      	ldr	r3, [r1, r2]
 8000832:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000836:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800083a:	508b      	str	r3, [r1, r2]
 800083c:	e7eb      	b.n	8000816 <ETH_MACDMAConfig+0xe2>
 800083e:	bf00      	nop
 8000840:	ff20810f 	.word	0xff20810f
 8000844:	f8de3f23 	.word	0xf8de3f23
 8000848:	02c12080 	.word	0x02c12080

0800084c <HAL_ETH_DMATxDescListInit>:
{
 800084c:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(heth);
 800084e:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 8000852:	2c01      	cmp	r4, #1
 8000854:	d031      	beq.n	80008ba <HAL_ETH_DMATxDescListInit+0x6e>
 8000856:	2401      	movs	r4, #1
 8000858:	f880 4045 	strb.w	r4, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 800085c:	2402      	movs	r4, #2
 800085e:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
  heth->TxDesc = DMATxDescTab;
 8000862:	62c1      	str	r1, [r0, #44]	; 0x2c
  for(i=0U; i < TxBuffCount; i++)
 8000864:	2400      	movs	r4, #0
 8000866:	e001      	b.n	800086c <HAL_ETH_DMATxDescListInit+0x20>
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8000868:	60f9      	str	r1, [r7, #12]
  for(i=0U; i < TxBuffCount; i++)
 800086a:	3401      	adds	r4, #1
 800086c:	429c      	cmp	r4, r3
 800086e:	d217      	bcs.n	80008a0 <HAL_ETH_DMATxDescListInit+0x54>
    dmatxdesc = DMATxDescTab + i;
 8000870:	0165      	lsls	r5, r4, #5
 8000872:	194f      	adds	r7, r1, r5
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8000874:	f44f 1680 	mov.w	r6, #1048576	; 0x100000
 8000878:	514e      	str	r6, [r1, r5]
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 800087a:	f240 56f4 	movw	r6, #1524	; 0x5f4
 800087e:	fb06 2604 	mla	r6, r6, r4, r2
 8000882:	60be      	str	r6, [r7, #8]
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8000884:	69c6      	ldr	r6, [r0, #28]
 8000886:	b91e      	cbnz	r6, 8000890 <HAL_ETH_DMATxDescListInit+0x44>
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8000888:	594e      	ldr	r6, [r1, r5]
 800088a:	f446 0640 	orr.w	r6, r6, #12582912	; 0xc00000
 800088e:	514e      	str	r6, [r1, r5]
    if(i < (TxBuffCount-1U))
 8000890:	1e5d      	subs	r5, r3, #1
 8000892:	42ac      	cmp	r4, r5
 8000894:	d2e8      	bcs.n	8000868 <HAL_ETH_DMATxDescListInit+0x1c>
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8000896:	1c65      	adds	r5, r4, #1
 8000898:	eb01 1545 	add.w	r5, r1, r5, lsl #5
 800089c:	60fd      	str	r5, [r7, #12]
 800089e:	e7e4      	b.n	800086a <HAL_ETH_DMATxDescListInit+0x1e>
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 80008a0:	6802      	ldr	r2, [r0, #0]
 80008a2:	f241 0310 	movw	r3, #4112	; 0x1010
 80008a6:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 80008a8:	2301      	movs	r3, #1
 80008aa:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 80008ae:	2300      	movs	r3, #0
 80008b0:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 80008b4:	4618      	mov	r0, r3
}
 80008b6:	bcf0      	pop	{r4, r5, r6, r7}
 80008b8:	4770      	bx	lr
  __HAL_LOCK(heth);
 80008ba:	2002      	movs	r0, #2
 80008bc:	e7fb      	b.n	80008b6 <HAL_ETH_DMATxDescListInit+0x6a>

080008be <HAL_ETH_DMARxDescListInit>:
{
 80008be:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(heth);
 80008c0:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 80008c4:	2c01      	cmp	r4, #1
 80008c6:	d02e      	beq.n	8000926 <HAL_ETH_DMARxDescListInit+0x68>
 80008c8:	2401      	movs	r4, #1
 80008ca:	f880 4045 	strb.w	r4, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 80008ce:	2402      	movs	r4, #2
 80008d0:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
  heth->RxDesc = DMARxDescTab; 
 80008d4:	6281      	str	r1, [r0, #40]	; 0x28
  for(i=0U; i < RxBuffCount; i++)
 80008d6:	2400      	movs	r4, #0
 80008d8:	e001      	b.n	80008de <HAL_ETH_DMARxDescListInit+0x20>
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 80008da:	60e9      	str	r1, [r5, #12]
  for(i=0U; i < RxBuffCount; i++)
 80008dc:	3401      	adds	r4, #1
 80008de:	429c      	cmp	r4, r3
 80008e0:	d214      	bcs.n	800090c <HAL_ETH_DMARxDescListInit+0x4e>
    DMARxDesc = DMARxDescTab+i;
 80008e2:	0166      	lsls	r6, r4, #5
 80008e4:	198d      	adds	r5, r1, r6
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80008e6:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 80008ea:	518f      	str	r7, [r1, r6]
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 80008ec:	f244 56f4 	movw	r6, #17908	; 0x45f4
 80008f0:	606e      	str	r6, [r5, #4]
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80008f2:	f240 56f4 	movw	r6, #1524	; 0x5f4
 80008f6:	fb06 2604 	mla	r6, r6, r4, r2
 80008fa:	60ae      	str	r6, [r5, #8]
    if(i < (RxBuffCount-1U))
 80008fc:	1e5e      	subs	r6, r3, #1
 80008fe:	42b4      	cmp	r4, r6
 8000900:	d2eb      	bcs.n	80008da <HAL_ETH_DMARxDescListInit+0x1c>
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 8000902:	1c66      	adds	r6, r4, #1
 8000904:	eb01 1646 	add.w	r6, r1, r6, lsl #5
 8000908:	60ee      	str	r6, [r5, #12]
 800090a:	e7e7      	b.n	80008dc <HAL_ETH_DMARxDescListInit+0x1e>
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 800090c:	6802      	ldr	r2, [r0, #0]
 800090e:	f241 030c 	movw	r3, #4108	; 0x100c
 8000912:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 8000914:	2301      	movs	r3, #1
 8000916:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 800091a:	2300      	movs	r3, #0
 800091c:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 8000920:	4618      	mov	r0, r3
}
 8000922:	bcf0      	pop	{r4, r5, r6, r7}
 8000924:	4770      	bx	lr
  __HAL_LOCK(heth);
 8000926:	2002      	movs	r0, #2
 8000928:	e7fb      	b.n	8000922 <HAL_ETH_DMARxDescListInit+0x64>
	...

0800092c <HAL_ETH_TransmitFrame>:
  __HAL_LOCK(heth);
 800092c:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8000930:	2b01      	cmp	r3, #1
 8000932:	f000 8087 	beq.w	8000a44 <HAL_ETH_TransmitFrame+0x118>
 8000936:	2301      	movs	r3, #1
 8000938:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 800093c:	2302      	movs	r3, #2
 800093e:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  if (FrameLength == 0U) 
 8000942:	b199      	cbz	r1, 800096c <HAL_ETH_TransmitFrame+0x40>
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8000944:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000946:	681a      	ldr	r2, [r3, #0]
 8000948:	2a00      	cmp	r2, #0
 800094a:	db17      	blt.n	800097c <HAL_ETH_TransmitFrame+0x50>
{
 800094c:	b430      	push	{r4, r5}
  if (FrameLength > ETH_TX_BUF_SIZE)
 800094e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000952:	4291      	cmp	r1, r2
 8000954:	d91a      	bls.n	800098c <HAL_ETH_TransmitFrame+0x60>
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8000956:	4c3c      	ldr	r4, [pc, #240]	; (8000a48 <HAL_ETH_TransmitFrame+0x11c>)
 8000958:	fba4 2401 	umull	r2, r4, r4, r1
 800095c:	0aa4      	lsrs	r4, r4, #10
    if (FrameLength % ETH_TX_BUF_SIZE) 
 800095e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000962:	fb02 1214 	mls	r2, r2, r4, r1
 8000966:	b192      	cbz	r2, 800098e <HAL_ETH_TransmitFrame+0x62>
      bufcount++;
 8000968:	3401      	adds	r4, #1
 800096a:	e010      	b.n	800098e <HAL_ETH_TransmitFrame+0x62>
    heth->State = HAL_ETH_STATE_READY;
 800096c:	2301      	movs	r3, #1
 800096e:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8000972:	2200      	movs	r2, #0
 8000974:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
    return  HAL_ERROR;                                    
 8000978:	4618      	mov	r0, r3
 800097a:	4770      	bx	lr
    heth->State = HAL_ETH_STATE_BUSY_TX;
 800097c:	2312      	movs	r3, #18
 800097e:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8000982:	2300      	movs	r3, #0
 8000984:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
    return HAL_ERROR;
 8000988:	2001      	movs	r0, #1
 800098a:	4770      	bx	lr
    bufcount = 1U;
 800098c:	2401      	movs	r4, #1
  if (bufcount == 1U)
 800098e:	2c01      	cmp	r4, #1
 8000990:	d001      	beq.n	8000996 <HAL_ETH_TransmitFrame+0x6a>
 8000992:	2300      	movs	r3, #0
 8000994:	e037      	b.n	8000a06 <HAL_ETH_TransmitFrame+0xda>
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8000996:	681a      	ldr	r2, [r3, #0]
 8000998:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 800099c:	601a      	str	r2, [r3, #0]
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 800099e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80009a0:	f3c1 010c 	ubfx	r1, r1, #0, #13
 80009a4:	6059      	str	r1, [r3, #4]
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80009a6:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 80009a8:	6813      	ldr	r3, [r2, #0]
 80009aa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009ae:	6013      	str	r3, [r2, #0]
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80009b0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80009b2:	68db      	ldr	r3, [r3, #12]
 80009b4:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80009b6:	6803      	ldr	r3, [r0, #0]
 80009b8:	f241 0214 	movw	r2, #4116	; 0x1014
 80009bc:	589a      	ldr	r2, [r3, r2]
 80009be:	f012 0f04 	tst.w	r2, #4
 80009c2:	d008      	beq.n	80009d6 <HAL_ETH_TransmitFrame+0xaa>
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80009c4:	2104      	movs	r1, #4
 80009c6:	f241 0214 	movw	r2, #4116	; 0x1014
 80009ca:	5099      	str	r1, [r3, r2]
    (heth->Instance)->DMATPDR = 0U;
 80009cc:	6802      	ldr	r2, [r0, #0]
 80009ce:	2100      	movs	r1, #0
 80009d0:	f241 0304 	movw	r3, #4100	; 0x1004
 80009d4:	50d1      	str	r1, [r2, r3]
  heth->State = HAL_ETH_STATE_READY;
 80009d6:	2301      	movs	r3, #1
 80009d8:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 80009dc:	2300      	movs	r3, #0
 80009de:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 80009e2:	4618      	mov	r0, r3
}
 80009e4:	bc30      	pop	{r4, r5}
 80009e6:	4770      	bx	lr
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 80009e8:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 80009ea:	682a      	ldr	r2, [r5, #0]
 80009ec:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80009f0:	602a      	str	r2, [r5, #0]
 80009f2:	e011      	b.n	8000a18 <HAL_ETH_TransmitFrame+0xec>
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80009f4:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 80009f6:	682a      	ldr	r2, [r5, #0]
 80009f8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80009fc:	602a      	str	r2, [r5, #0]
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80009fe:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8000a00:	68d2      	ldr	r2, [r2, #12]
 8000a02:	62c2      	str	r2, [r0, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8000a04:	3301      	adds	r3, #1
 8000a06:	429c      	cmp	r4, r3
 8000a08:	d9d5      	bls.n	80009b6 <HAL_ETH_TransmitFrame+0x8a>
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8000a0a:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 8000a0c:	682a      	ldr	r2, [r5, #0]
 8000a0e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000a12:	602a      	str	r2, [r5, #0]
      if (i == 0U) 
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d0e7      	beq.n	80009e8 <HAL_ETH_TransmitFrame+0xbc>
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8000a18:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8000a1a:	f240 55f4 	movw	r5, #1524	; 0x5f4
 8000a1e:	6055      	str	r5, [r2, #4]
      if (i == (bufcount-1U))
 8000a20:	1e62      	subs	r2, r4, #1
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d1e6      	bne.n	80009f4 <HAL_ETH_TransmitFrame+0xc8>
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8000a26:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 8000a28:	682a      	ldr	r2, [r5, #0]
 8000a2a:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8000a2e:	602a      	str	r2, [r5, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 8000a30:	4a06      	ldr	r2, [pc, #24]	; (8000a4c <HAL_ETH_TransmitFrame+0x120>)
 8000a32:	fb02 1204 	mla	r2, r2, r4, r1
 8000a36:	f202 52f4 	addw	r2, r2, #1524	; 0x5f4
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8000a3a:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 8000a3c:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8000a40:	606a      	str	r2, [r5, #4]
 8000a42:	e7d7      	b.n	80009f4 <HAL_ETH_TransmitFrame+0xc8>
  __HAL_LOCK(heth);
 8000a44:	2002      	movs	r0, #2
 8000a46:	4770      	bx	lr
 8000a48:	ac02b00b 	.word	0xac02b00b
 8000a4c:	fffffa0c 	.word	0xfffffa0c

08000a50 <HAL_ETH_GetReceivedFrame_IT>:
  __HAL_LOCK(heth);
 8000a50:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8000a54:	2b01      	cmp	r3, #1
 8000a56:	d045      	beq.n	8000ae4 <HAL_ETH_GetReceivedFrame_IT+0x94>
 8000a58:	2301      	movs	r3, #1
 8000a5a:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 8000a5e:	2302      	movs	r3, #2
 8000a60:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  uint32_t descriptorscancounter = 0U;
 8000a64:	2100      	movs	r1, #0
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8000a66:	e00a      	b.n	8000a7e <HAL_ETH_GetReceivedFrame_IT+0x2e>
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8000a68:	6303      	str	r3, [r0, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;   
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	6382      	str	r2, [r0, #56]	; 0x38
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8000a6e:	68db      	ldr	r3, [r3, #12]
 8000a70:	6283      	str	r3, [r0, #40]	; 0x28
 8000a72:	e004      	b.n	8000a7e <HAL_ETH_GetReceivedFrame_IT+0x2e>
      (heth->RxFrameInfos.SegCount)++;
 8000a74:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8000a76:	3201      	adds	r2, #1
 8000a78:	6382      	str	r2, [r0, #56]	; 0x38
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8000a7a:	68db      	ldr	r3, [r3, #12]
 8000a7c:	6283      	str	r3, [r0, #40]	; 0x28
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8000a7e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000a80:	681a      	ldr	r2, [r3, #0]
 8000a82:	2a00      	cmp	r2, #0
 8000a84:	db26      	blt.n	8000ad4 <HAL_ETH_GetReceivedFrame_IT+0x84>
 8000a86:	2903      	cmp	r1, #3
 8000a88:	d824      	bhi.n	8000ad4 <HAL_ETH_GetReceivedFrame_IT+0x84>
    descriptorscancounter++;
 8000a8a:	3101      	adds	r1, #1
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8000a8c:	681a      	ldr	r2, [r3, #0]
 8000a8e:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8000a92:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8000a96:	d0e7      	beq.n	8000a68 <HAL_ETH_GetReceivedFrame_IT+0x18>
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8000a98:	681a      	ldr	r2, [r3, #0]
 8000a9a:	f412 7f40 	tst.w	r2, #768	; 0x300
 8000a9e:	d0e9      	beq.n	8000a74 <HAL_ETH_GetReceivedFrame_IT+0x24>
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8000aa0:	6343      	str	r3, [r0, #52]	; 0x34
      (heth->RxFrameInfos.SegCount)++;
 8000aa2:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8000aa4:	3201      	adds	r2, #1
 8000aa6:	6382      	str	r2, [r0, #56]	; 0x38
      if ((heth->RxFrameInfos.SegCount) == 1U)
 8000aa8:	2a01      	cmp	r2, #1
 8000aaa:	d011      	beq.n	8000ad0 <HAL_ETH_GetReceivedFrame_IT+0x80>
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8000aac:	681a      	ldr	r2, [r3, #0]
 8000aae:	f3c2 420d 	ubfx	r2, r2, #16, #14
 8000ab2:	3a04      	subs	r2, #4
 8000ab4:	63c2      	str	r2, [r0, #60]	; 0x3c
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8000ab6:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8000ab8:	6892      	ldr	r2, [r2, #8]
 8000aba:	6402      	str	r2, [r0, #64]	; 0x40
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8000abc:	68db      	ldr	r3, [r3, #12]
 8000abe:	6283      	str	r3, [r0, #40]	; 0x28
      heth->State = HAL_ETH_STATE_READY;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
      return HAL_OK;
 8000acc:	4618      	mov	r0, r3
 8000ace:	4770      	bx	lr
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8000ad0:	6303      	str	r3, [r0, #48]	; 0x30
 8000ad2:	e7eb      	b.n	8000aac <HAL_ETH_GetReceivedFrame_IT+0x5c>
  heth->State = HAL_ETH_STATE_READY;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8000ada:	2200      	movs	r2, #0
 8000adc:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
  return HAL_ERROR;
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	4770      	bx	lr
  __HAL_LOCK(heth);
 8000ae4:	2002      	movs	r0, #2
}
 8000ae6:	4770      	bx	lr

08000ae8 <HAL_ETH_TxCpltCallback>:
{
 8000ae8:	4770      	bx	lr

08000aea <HAL_ETH_ErrorCallback>:
{
 8000aea:	4770      	bx	lr

08000aec <HAL_ETH_IRQHandler>:
{
 8000aec:	b510      	push	{r4, lr}
 8000aee:	4604      	mov	r4, r0
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8000af0:	6803      	ldr	r3, [r0, #0]
 8000af2:	f241 0214 	movw	r2, #4116	; 0x1014
 8000af6:	589a      	ldr	r2, [r3, r2]
 8000af8:	f012 0f40 	tst.w	r2, #64	; 0x40
 8000afc:	d111      	bne.n	8000b22 <HAL_ETH_IRQHandler+0x36>
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8000afe:	f241 0214 	movw	r2, #4116	; 0x1014
 8000b02:	589b      	ldr	r3, [r3, r2]
 8000b04:	f013 0f01 	tst.w	r3, #1
 8000b08:	d119      	bne.n	8000b3e <HAL_ETH_IRQHandler+0x52>
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8000b0a:	6822      	ldr	r2, [r4, #0]
 8000b0c:	f241 0314 	movw	r3, #4116	; 0x1014
 8000b10:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8000b14:	50d1      	str	r1, [r2, r3]
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8000b16:	6822      	ldr	r2, [r4, #0]
 8000b18:	58d3      	ldr	r3, [r2, r3]
 8000b1a:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8000b1e:	d11b      	bne.n	8000b58 <HAL_ETH_IRQHandler+0x6c>
 8000b20:	bd10      	pop	{r4, pc}
    HAL_ETH_RxCpltCallback(heth);
 8000b22:	f00b fcdd 	bl	800c4e0 <HAL_ETH_RxCpltCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8000b26:	6822      	ldr	r2, [r4, #0]
 8000b28:	2140      	movs	r1, #64	; 0x40
 8000b2a:	f241 0314 	movw	r3, #4116	; 0x1014
 8000b2e:	50d1      	str	r1, [r2, r3]
    heth->State = HAL_ETH_STATE_READY;
 8000b30:	2301      	movs	r3, #1
 8000b32:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8000b36:	2300      	movs	r3, #0
 8000b38:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8000b3c:	e7e5      	b.n	8000b0a <HAL_ETH_IRQHandler+0x1e>
    HAL_ETH_TxCpltCallback(heth);
 8000b3e:	f7ff ffd3 	bl	8000ae8 <HAL_ETH_TxCpltCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8000b42:	6821      	ldr	r1, [r4, #0]
 8000b44:	2301      	movs	r3, #1
 8000b46:	f241 0214 	movw	r2, #4116	; 0x1014
 8000b4a:	508b      	str	r3, [r1, r2]
    heth->State = HAL_ETH_STATE_READY;
 8000b4c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8000b50:	2300      	movs	r3, #0
 8000b52:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8000b56:	e7d8      	b.n	8000b0a <HAL_ETH_IRQHandler+0x1e>
    HAL_ETH_ErrorCallback(heth);
 8000b58:	4620      	mov	r0, r4
 8000b5a:	f7ff ffc6 	bl	8000aea <HAL_ETH_ErrorCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8000b5e:	6822      	ldr	r2, [r4, #0]
 8000b60:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b64:	f241 0314 	movw	r3, #4116	; 0x1014
 8000b68:	50d1      	str	r1, [r2, r3]
    heth->State = HAL_ETH_STATE_READY;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8000b70:	2300      	movs	r3, #0
 8000b72:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 8000b76:	e7d3      	b.n	8000b20 <HAL_ETH_IRQHandler+0x34>

08000b78 <HAL_ETH_ReadPHYRegister>:
{
 8000b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8000b7a:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8000b7e:	b2db      	uxtb	r3, r3
 8000b80:	2b82      	cmp	r3, #130	; 0x82
 8000b82:	d101      	bne.n	8000b88 <HAL_ETH_ReadPHYRegister+0x10>
    return HAL_BUSY;
 8000b84:	2002      	movs	r0, #2
}
 8000b86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000b88:	4616      	mov	r6, r2
 8000b8a:	4605      	mov	r5, r0
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8000b8c:	2382      	movs	r3, #130	; 0x82
 8000b8e:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg1 = heth->Instance->MACMIIAR;
 8000b92:	6802      	ldr	r2, [r0, #0]
 8000b94:	6914      	ldr	r4, [r2, #16]
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8000b96:	f004 041c 	and.w	r4, r4, #28
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8000b9a:	8a03      	ldrh	r3, [r0, #16]
 8000b9c:	02db      	lsls	r3, r3, #11
 8000b9e:	b29b      	uxth	r3, r3
 8000ba0:	431c      	orrs	r4, r3
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8000ba2:	0189      	lsls	r1, r1, #6
 8000ba4:	f401 61f8 	and.w	r1, r1, #1984	; 0x7c0
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8000ba8:	430c      	orrs	r4, r1
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8000baa:	f044 0401 	orr.w	r4, r4, #1
  heth->Instance->MACMIIAR = tmpreg1;
 8000bae:	6114      	str	r4, [r2, #16]
  tickstart = HAL_GetTick();
 8000bb0:	f7ff fcd4 	bl	800055c <HAL_GetTick>
 8000bb4:	4607      	mov	r7, r0
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8000bb6:	f014 0f01 	tst.w	r4, #1
 8000bba:	d010      	beq.n	8000bde <HAL_ETH_ReadPHYRegister+0x66>
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8000bbc:	f7ff fcce 	bl	800055c <HAL_GetTick>
 8000bc0:	1bc0      	subs	r0, r0, r7
 8000bc2:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8000bc6:	d202      	bcs.n	8000bce <HAL_ETH_ReadPHYRegister+0x56>
    tmpreg1 = heth->Instance->MACMIIAR;
 8000bc8:	682b      	ldr	r3, [r5, #0]
 8000bca:	691c      	ldr	r4, [r3, #16]
 8000bcc:	e7f3      	b.n	8000bb6 <HAL_ETH_ReadPHYRegister+0x3e>
      heth->State= HAL_ETH_STATE_READY;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
      return HAL_TIMEOUT;
 8000bda:	2003      	movs	r0, #3
 8000bdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8000bde:	682b      	ldr	r3, [r5, #0]
 8000be0:	695b      	ldr	r3, [r3, #20]
 8000be2:	b29b      	uxth	r3, r3
 8000be4:	6033      	str	r3, [r6, #0]
  heth->State = HAL_ETH_STATE_READY;
 8000be6:	2301      	movs	r3, #1
 8000be8:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
  return HAL_OK;
 8000bec:	2000      	movs	r0, #0
 8000bee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000bf0 <HAL_ETH_WritePHYRegister>:
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8000bf0:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8000bf4:	b2db      	uxtb	r3, r3
 8000bf6:	2b42      	cmp	r3, #66	; 0x42
 8000bf8:	d101      	bne.n	8000bfe <HAL_ETH_WritePHYRegister+0xe>
    return HAL_BUSY;
 8000bfa:	2002      	movs	r0, #2
 8000bfc:	4770      	bx	lr
{
 8000bfe:	b570      	push	{r4, r5, r6, lr}
 8000c00:	4605      	mov	r5, r0
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8000c02:	2342      	movs	r3, #66	; 0x42
 8000c04:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg1 = heth->Instance->MACMIIAR;
 8000c08:	6800      	ldr	r0, [r0, #0]
 8000c0a:	6904      	ldr	r4, [r0, #16]
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8000c0c:	f004 041c 	and.w	r4, r4, #28
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8000c10:	8a2b      	ldrh	r3, [r5, #16]
 8000c12:	02db      	lsls	r3, r3, #11
 8000c14:	b29b      	uxth	r3, r3
 8000c16:	431c      	orrs	r4, r3
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8000c18:	0189      	lsls	r1, r1, #6
 8000c1a:	f401 61f8 	and.w	r1, r1, #1984	; 0x7c0
 8000c1e:	430c      	orrs	r4, r1
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8000c20:	f044 0403 	orr.w	r4, r4, #3
 8000c24:	b292      	uxth	r2, r2
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8000c26:	6142      	str	r2, [r0, #20]
  heth->Instance->MACMIIAR = tmpreg1;
 8000c28:	682b      	ldr	r3, [r5, #0]
 8000c2a:	611c      	str	r4, [r3, #16]
  tickstart = HAL_GetTick();
 8000c2c:	f7ff fc96 	bl	800055c <HAL_GetTick>
 8000c30:	4606      	mov	r6, r0
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8000c32:	f014 0f01 	tst.w	r4, #1
 8000c36:	d010      	beq.n	8000c5a <HAL_ETH_WritePHYRegister+0x6a>
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8000c38:	f7ff fc90 	bl	800055c <HAL_GetTick>
 8000c3c:	1b80      	subs	r0, r0, r6
 8000c3e:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8000c42:	d202      	bcs.n	8000c4a <HAL_ETH_WritePHYRegister+0x5a>
    tmpreg1 = heth->Instance->MACMIIAR;
 8000c44:	682b      	ldr	r3, [r5, #0]
 8000c46:	691c      	ldr	r4, [r3, #16]
 8000c48:	e7f3      	b.n	8000c32 <HAL_ETH_WritePHYRegister+0x42>
      heth->State= HAL_ETH_STATE_READY;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8000c50:	2300      	movs	r3, #0
 8000c52:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
      return HAL_TIMEOUT;
 8000c56:	2003      	movs	r0, #3
 8000c58:	bd70      	pop	{r4, r5, r6, pc}
  heth->State = HAL_ETH_STATE_READY;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
  return HAL_OK; 
 8000c60:	2000      	movs	r0, #0
 8000c62:	bd70      	pop	{r4, r5, r6, pc}

08000c64 <HAL_ETH_Init>:
{
 8000c64:	b570      	push	{r4, r5, r6, lr}
 8000c66:	b082      	sub	sp, #8
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	9301      	str	r3, [sp, #4]
  if(heth == NULL)
 8000c6c:	2800      	cmp	r0, #0
 8000c6e:	f000 810e 	beq.w	8000e8e <HAL_ETH_Init+0x22a>
 8000c72:	4604      	mov	r4, r0
  if(heth->State == HAL_ETH_STATE_RESET)
 8000c74:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d034      	beq.n	8000ce6 <HAL_ETH_Init+0x82>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	9300      	str	r3, [sp, #0]
 8000c80:	4b84      	ldr	r3, [pc, #528]	; (8000e94 <HAL_ETH_Init+0x230>)
 8000c82:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000c84:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000c88:	645a      	str	r2, [r3, #68]	; 0x44
 8000c8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c90:	9300      	str	r3, [sp, #0]
 8000c92:	9b00      	ldr	r3, [sp, #0]
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8000c94:	4b80      	ldr	r3, [pc, #512]	; (8000e98 <HAL_ETH_Init+0x234>)
 8000c96:	685a      	ldr	r2, [r3, #4]
 8000c98:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8000c9c:	605a      	str	r2, [r3, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8000c9e:	685a      	ldr	r2, [r3, #4]
 8000ca0:	6a21      	ldr	r1, [r4, #32]
 8000ca2:	430a      	orrs	r2, r1
 8000ca4:	605a      	str	r2, [r3, #4]
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8000ca6:	6823      	ldr	r3, [r4, #0]
 8000ca8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000cac:	681a      	ldr	r2, [r3, #0]
 8000cae:	f042 0201 	orr.w	r2, r2, #1
 8000cb2:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8000cb4:	f7ff fc52 	bl	800055c <HAL_GetTick>
 8000cb8:	4605      	mov	r5, r0
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8000cba:	6823      	ldr	r3, [r4, #0]
 8000cbc:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8000cc0:	6812      	ldr	r2, [r2, #0]
 8000cc2:	f012 0f01 	tst.w	r2, #1
 8000cc6:	d013      	beq.n	8000cf0 <HAL_ETH_Init+0x8c>
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8000cc8:	f7ff fc48 	bl	800055c <HAL_GetTick>
 8000ccc:	1b40      	subs	r0, r0, r5
 8000cce:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8000cd2:	d9f2      	bls.n	8000cba <HAL_ETH_Init+0x56>
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8000cd4:	2503      	movs	r5, #3
 8000cd6:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8000cda:	2300      	movs	r3, #0
 8000cdc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 8000ce0:	4628      	mov	r0, r5
 8000ce2:	b002      	add	sp, #8
 8000ce4:	bd70      	pop	{r4, r5, r6, pc}
    heth->Lock = HAL_UNLOCKED;
 8000ce6:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
    HAL_ETH_MspInit(heth);
 8000cea:	f00b fb6b 	bl	800c3c4 <HAL_ETH_MspInit>
 8000cee:	e7c5      	b.n	8000c7c <HAL_ETH_Init+0x18>
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8000cf0:	691d      	ldr	r5, [r3, #16]
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8000cf2:	f025 051c 	bic.w	r5, r5, #28
  hclk = HAL_RCC_GetHCLKFreq();
 8000cf6:	f000 fd6f 	bl	80017d8 <HAL_RCC_GetHCLKFreq>
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8000cfa:	4b68      	ldr	r3, [pc, #416]	; (8000e9c <HAL_ETH_Init+0x238>)
 8000cfc:	4403      	add	r3, r0
 8000cfe:	4a68      	ldr	r2, [pc, #416]	; (8000ea0 <HAL_ETH_Init+0x23c>)
 8000d00:	4293      	cmp	r3, r2
 8000d02:	d855      	bhi.n	8000db0 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8000d04:	f045 0508 	orr.w	r5, r5, #8
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8000d08:	6823      	ldr	r3, [r4, #0]
 8000d0a:	611d      	str	r5, [r3, #16]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8000d0c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000d10:	2100      	movs	r1, #0
 8000d12:	4620      	mov	r0, r4
 8000d14:	f7ff ff6c 	bl	8000bf0 <HAL_ETH_WritePHYRegister>
 8000d18:	4605      	mov	r5, r0
 8000d1a:	2800      	cmp	r0, #0
 8000d1c:	d160      	bne.n	8000de0 <HAL_ETH_Init+0x17c>
  HAL_Delay(PHY_RESET_DELAY);
 8000d1e:	20ff      	movs	r0, #255	; 0xff
 8000d20:	f7ff fc22 	bl	8000568 <HAL_Delay>
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8000d24:	6863      	ldr	r3, [r4, #4]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	f000 8091 	beq.w	8000e4e <HAL_ETH_Init+0x1ea>
    tickstart = HAL_GetTick();
 8000d2c:	f7ff fc16 	bl	800055c <HAL_GetTick>
 8000d30:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000d32:	aa01      	add	r2, sp, #4
 8000d34:	2101      	movs	r1, #1
 8000d36:	4620      	mov	r0, r4
 8000d38:	f7ff ff1e 	bl	8000b78 <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8000d3c:	f7ff fc0e 	bl	800055c <HAL_GetTick>
 8000d40:	1b80      	subs	r0, r0, r6
 8000d42:	f241 3388 	movw	r3, #5000	; 0x1388
 8000d46:	4298      	cmp	r0, r3
 8000d48:	d852      	bhi.n	8000df0 <HAL_ETH_Init+0x18c>
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8000d4a:	9b01      	ldr	r3, [sp, #4]
 8000d4c:	f013 0f04 	tst.w	r3, #4
 8000d50:	d0ef      	beq.n	8000d32 <HAL_ETH_Init+0xce>
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8000d52:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d56:	2100      	movs	r1, #0
 8000d58:	4620      	mov	r0, r4
 8000d5a:	f7ff ff49 	bl	8000bf0 <HAL_ETH_WritePHYRegister>
 8000d5e:	2800      	cmp	r0, #0
 8000d60:	d152      	bne.n	8000e08 <HAL_ETH_Init+0x1a4>
    tickstart = HAL_GetTick();
 8000d62:	f7ff fbfb 	bl	800055c <HAL_GetTick>
 8000d66:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000d68:	aa01      	add	r2, sp, #4
 8000d6a:	2101      	movs	r1, #1
 8000d6c:	4620      	mov	r0, r4
 8000d6e:	f7ff ff03 	bl	8000b78 <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8000d72:	f7ff fbf3 	bl	800055c <HAL_GetTick>
 8000d76:	1b80      	subs	r0, r0, r6
 8000d78:	f241 3388 	movw	r3, #5000	; 0x1388
 8000d7c:	4298      	cmp	r0, r3
 8000d7e:	d84b      	bhi.n	8000e18 <HAL_ETH_Init+0x1b4>
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8000d80:	9b01      	ldr	r3, [sp, #4]
 8000d82:	f013 0f20 	tst.w	r3, #32
 8000d86:	d0ef      	beq.n	8000d68 <HAL_ETH_Init+0x104>
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8000d88:	aa01      	add	r2, sp, #4
 8000d8a:	211f      	movs	r1, #31
 8000d8c:	4620      	mov	r0, r4
 8000d8e:	f7ff fef3 	bl	8000b78 <HAL_ETH_ReadPHYRegister>
 8000d92:	2800      	cmp	r0, #0
 8000d94:	d14c      	bne.n	8000e30 <HAL_ETH_Init+0x1cc>
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8000d96:	9b01      	ldr	r3, [sp, #4]
 8000d98:	f013 0f10 	tst.w	r3, #16
 8000d9c:	d050      	beq.n	8000e40 <HAL_ETH_Init+0x1dc>
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8000d9e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000da2:	60e2      	str	r2, [r4, #12]
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8000da4:	f013 0f04 	tst.w	r3, #4
 8000da8:	d04d      	beq.n	8000e46 <HAL_ETH_Init+0x1e2>
      (heth->Init).Speed = ETH_SPEED_10M; 
 8000daa:	2300      	movs	r3, #0
 8000dac:	60a3      	str	r3, [r4, #8]
 8000dae:	e05e      	b.n	8000e6e <HAL_ETH_Init+0x20a>
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8000db0:	4b3c      	ldr	r3, [pc, #240]	; (8000ea4 <HAL_ETH_Init+0x240>)
 8000db2:	4403      	add	r3, r0
 8000db4:	4a3c      	ldr	r2, [pc, #240]	; (8000ea8 <HAL_ETH_Init+0x244>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d802      	bhi.n	8000dc0 <HAL_ETH_Init+0x15c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8000dba:	f045 050c 	orr.w	r5, r5, #12
 8000dbe:	e7a3      	b.n	8000d08 <HAL_ETH_Init+0xa4>
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8000dc0:	4b3a      	ldr	r3, [pc, #232]	; (8000eac <HAL_ETH_Init+0x248>)
 8000dc2:	4403      	add	r3, r0
 8000dc4:	4a3a      	ldr	r2, [pc, #232]	; (8000eb0 <HAL_ETH_Init+0x24c>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d99e      	bls.n	8000d08 <HAL_ETH_Init+0xa4>
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8000dca:	4b3a      	ldr	r3, [pc, #232]	; (8000eb4 <HAL_ETH_Init+0x250>)
 8000dcc:	4403      	add	r3, r0
 8000dce:	4a3a      	ldr	r2, [pc, #232]	; (8000eb8 <HAL_ETH_Init+0x254>)
 8000dd0:	4293      	cmp	r3, r2
 8000dd2:	d802      	bhi.n	8000dda <HAL_ETH_Init+0x176>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8000dd4:	f045 0504 	orr.w	r5, r5, #4
 8000dd8:	e796      	b.n	8000d08 <HAL_ETH_Init+0xa4>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8000dda:	f045 0510 	orr.w	r5, r5, #16
 8000dde:	e793      	b.n	8000d08 <HAL_ETH_Init+0xa4>
    ETH_MACDMAConfig(heth, err);
 8000de0:	2101      	movs	r1, #1
 8000de2:	4620      	mov	r0, r4
 8000de4:	f7ff fca6 	bl	8000734 <ETH_MACDMAConfig>
    heth->State = HAL_ETH_STATE_READY;
 8000de8:	2501      	movs	r5, #1
 8000dea:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
    return HAL_ERROR;
 8000dee:	e777      	b.n	8000ce0 <HAL_ETH_Init+0x7c>
        ETH_MACDMAConfig(heth, err);
 8000df0:	2101      	movs	r1, #1
 8000df2:	4620      	mov	r0, r4
 8000df4:	f7ff fc9e 	bl	8000734 <ETH_MACDMAConfig>
        heth->State= HAL_ETH_STATE_READY;
 8000df8:	2301      	movs	r3, #1
 8000dfa:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(heth);
 8000dfe:	2300      	movs	r3, #0
 8000e00:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
        return HAL_TIMEOUT;
 8000e04:	2503      	movs	r5, #3
 8000e06:	e76b      	b.n	8000ce0 <HAL_ETH_Init+0x7c>
      ETH_MACDMAConfig(heth, err);
 8000e08:	2101      	movs	r1, #1
 8000e0a:	4620      	mov	r0, r4
 8000e0c:	f7ff fc92 	bl	8000734 <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 8000e10:	2501      	movs	r5, #1
 8000e12:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      return HAL_ERROR;   
 8000e16:	e763      	b.n	8000ce0 <HAL_ETH_Init+0x7c>
        ETH_MACDMAConfig(heth, err);
 8000e18:	2101      	movs	r1, #1
 8000e1a:	4620      	mov	r0, r4
 8000e1c:	f7ff fc8a 	bl	8000734 <ETH_MACDMAConfig>
        heth->State= HAL_ETH_STATE_READY;
 8000e20:	2301      	movs	r3, #1
 8000e22:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(heth);
 8000e26:	2300      	movs	r3, #0
 8000e28:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
        return HAL_TIMEOUT;
 8000e2c:	2503      	movs	r5, #3
 8000e2e:	e757      	b.n	8000ce0 <HAL_ETH_Init+0x7c>
      ETH_MACDMAConfig(heth, err);
 8000e30:	2101      	movs	r1, #1
 8000e32:	4620      	mov	r0, r4
 8000e34:	f7ff fc7e 	bl	8000734 <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 8000e38:	2501      	movs	r5, #1
 8000e3a:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      return HAL_ERROR;   
 8000e3e:	e74f      	b.n	8000ce0 <HAL_ETH_Init+0x7c>
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8000e40:	2200      	movs	r2, #0
 8000e42:	60e2      	str	r2, [r4, #12]
 8000e44:	e7ae      	b.n	8000da4 <HAL_ETH_Init+0x140>
      (heth->Init).Speed = ETH_SPEED_100M;
 8000e46:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000e4a:	60a3      	str	r3, [r4, #8]
 8000e4c:	e00f      	b.n	8000e6e <HAL_ETH_Init+0x20a>
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8000e4e:	68e3      	ldr	r3, [r4, #12]
 8000e50:	f3c3 02cf 	ubfx	r2, r3, #3, #16
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8000e54:	68a3      	ldr	r3, [r4, #8]
 8000e56:	f3c3 034f 	ubfx	r3, r3, #1, #16
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8000e5a:	431a      	orrs	r2, r3
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	4620      	mov	r0, r4
 8000e60:	f7ff fec6 	bl	8000bf0 <HAL_ETH_WritePHYRegister>
 8000e64:	b958      	cbnz	r0, 8000e7e <HAL_ETH_Init+0x21a>
    HAL_Delay(PHY_CONFIG_DELAY);
 8000e66:	f640 70ff 	movw	r0, #4095	; 0xfff
 8000e6a:	f7ff fb7d 	bl	8000568 <HAL_Delay>
  ETH_MACDMAConfig(heth, err);
 8000e6e:	2100      	movs	r1, #0
 8000e70:	4620      	mov	r0, r4
 8000e72:	f7ff fc5f 	bl	8000734 <ETH_MACDMAConfig>
  heth->State= HAL_ETH_STATE_READY;
 8000e76:	2301      	movs	r3, #1
 8000e78:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  return HAL_OK;
 8000e7c:	e730      	b.n	8000ce0 <HAL_ETH_Init+0x7c>
      ETH_MACDMAConfig(heth, err);
 8000e7e:	2101      	movs	r1, #1
 8000e80:	4620      	mov	r0, r4
 8000e82:	f7ff fc57 	bl	8000734 <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 8000e86:	2501      	movs	r5, #1
 8000e88:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      return HAL_ERROR;
 8000e8c:	e728      	b.n	8000ce0 <HAL_ETH_Init+0x7c>
    return HAL_ERROR;
 8000e8e:	2501      	movs	r5, #1
 8000e90:	e726      	b.n	8000ce0 <HAL_ETH_Init+0x7c>
 8000e92:	bf00      	nop
 8000e94:	40023800 	.word	0x40023800
 8000e98:	40013800 	.word	0x40013800
 8000e9c:	feced300 	.word	0xfeced300
 8000ea0:	00e4e1bf 	.word	0x00e4e1bf
 8000ea4:	fde9f140 	.word	0xfde9f140
 8000ea8:	017d783f 	.word	0x017d783f
 8000eac:	fc6c7900 	.word	0xfc6c7900
 8000eb0:	026259ff 	.word	0x026259ff
 8000eb4:	fa0a1f00 	.word	0xfa0a1f00
 8000eb8:	02faf07f 	.word	0x02faf07f

08000ebc <HAL_ETH_Start>:
{  
 8000ebc:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(heth);
 8000ebe:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8000ec2:	2b01      	cmp	r3, #1
 8000ec4:	d101      	bne.n	8000eca <HAL_ETH_Start+0xe>
 8000ec6:	2002      	movs	r0, #2
}
 8000ec8:	bd38      	pop	{r3, r4, r5, pc}
 8000eca:	4604      	mov	r4, r0
  __HAL_LOCK(heth);
 8000ecc:	2501      	movs	r5, #1
 8000ece:	f880 5045 	strb.w	r5, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 8000ed2:	2302      	movs	r3, #2
 8000ed4:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  ETH_MACTransmissionEnable(heth);
 8000ed8:	f7ff fbea 	bl	80006b0 <ETH_MACTransmissionEnable>
  ETH_MACReceptionEnable(heth);
 8000edc:	4620      	mov	r0, r4
 8000ede:	f7ff fbfc 	bl	80006da <ETH_MACReceptionEnable>
  ETH_FlushTransmitFIFO(heth);
 8000ee2:	4620      	mov	r0, r4
 8000ee4:	f7ff fc0e 	bl	8000704 <ETH_FlushTransmitFIFO>
  ETH_DMATransmissionEnable(heth);
 8000ee8:	4620      	mov	r0, r4
 8000eea:	f7ff fbbb 	bl	8000664 <ETH_DMATransmissionEnable>
  ETH_DMAReceptionEnable(heth);
 8000eee:	4620      	mov	r0, r4
 8000ef0:	f7ff fbc0 	bl	8000674 <ETH_DMAReceptionEnable>
  heth->State= HAL_ETH_STATE_READY;
 8000ef4:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8000ef8:	2000      	movs	r0, #0
 8000efa:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
  return HAL_OK;
 8000efe:	bd38      	pop	{r3, r4, r5, pc}

08000f00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f02:	b083      	sub	sp, #12
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f04:	2400      	movs	r4, #0
 8000f06:	e04b      	b.n	8000fa0 <HAL_GPIO_Init+0xa0>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f08:	ea4f 0ed4 	mov.w	lr, r4, lsr #3
 8000f0c:	f10e 0e08 	add.w	lr, lr, #8
 8000f10:	f850 202e 	ldr.w	r2, [r0, lr, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f14:	f004 0607 	and.w	r6, r4, #7
 8000f18:	00b6      	lsls	r6, r6, #2
 8000f1a:	270f      	movs	r7, #15
 8000f1c:	40b7      	lsls	r7, r6
 8000f1e:	ea22 0207 	bic.w	r2, r2, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f22:	690f      	ldr	r7, [r1, #16]
 8000f24:	fa07 f606 	lsl.w	r6, r7, r6
 8000f28:	4332      	orrs	r2, r6
        GPIOx->AFR[position >> 3U] = temp;
 8000f2a:	f840 202e 	str.w	r2, [r0, lr, lsl #2]
 8000f2e:	e046      	b.n	8000fbe <HAL_GPIO_Init+0xbe>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f30:	2609      	movs	r6, #9
 8000f32:	e000      	b.n	8000f36 <HAL_GPIO_Init+0x36>
 8000f34:	2600      	movs	r6, #0
 8000f36:	fa06 f60e 	lsl.w	r6, r6, lr
 8000f3a:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f3c:	3302      	adds	r3, #2
 8000f3e:	4e64      	ldr	r6, [pc, #400]	; (80010d0 <HAL_GPIO_Init+0x1d0>)
 8000f40:	f846 2023 	str.w	r2, [r6, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f44:	4b63      	ldr	r3, [pc, #396]	; (80010d4 <HAL_GPIO_Init+0x1d4>)
 8000f46:	681a      	ldr	r2, [r3, #0]
        temp &= ~((uint32_t)iocurrent);
 8000f48:	43eb      	mvns	r3, r5
 8000f4a:	ea02 0603 	and.w	r6, r2, r3
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f4e:	684f      	ldr	r7, [r1, #4]
 8000f50:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8000f54:	d001      	beq.n	8000f5a <HAL_GPIO_Init+0x5a>
        {
          temp |= iocurrent;
 8000f56:	ea45 0602 	orr.w	r6, r5, r2
        }
        EXTI->IMR = temp;
 8000f5a:	4a5e      	ldr	r2, [pc, #376]	; (80010d4 <HAL_GPIO_Init+0x1d4>)
 8000f5c:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 8000f5e:	6852      	ldr	r2, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8000f60:	ea03 0602 	and.w	r6, r3, r2
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f64:	684f      	ldr	r7, [r1, #4]
 8000f66:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8000f6a:	d001      	beq.n	8000f70 <HAL_GPIO_Init+0x70>
        {
          temp |= iocurrent;
 8000f6c:	ea45 0602 	orr.w	r6, r5, r2
        }
        EXTI->EMR = temp;
 8000f70:	4a58      	ldr	r2, [pc, #352]	; (80010d4 <HAL_GPIO_Init+0x1d4>)
 8000f72:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f74:	6892      	ldr	r2, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8000f76:	ea03 0602 	and.w	r6, r3, r2
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f7a:	684f      	ldr	r7, [r1, #4]
 8000f7c:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8000f80:	d001      	beq.n	8000f86 <HAL_GPIO_Init+0x86>
        {
          temp |= iocurrent;
 8000f82:	ea45 0602 	orr.w	r6, r5, r2
        }
        EXTI->RTSR = temp;
 8000f86:	4a53      	ldr	r2, [pc, #332]	; (80010d4 <HAL_GPIO_Init+0x1d4>)
 8000f88:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 8000f8a:	68d2      	ldr	r2, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 8000f8c:	4013      	ands	r3, r2
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f8e:	684e      	ldr	r6, [r1, #4]
 8000f90:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8000f94:	d001      	beq.n	8000f9a <HAL_GPIO_Init+0x9a>
        {
          temp |= iocurrent;
 8000f96:	ea45 0302 	orr.w	r3, r5, r2
        }
        EXTI->FTSR = temp;
 8000f9a:	4a4e      	ldr	r2, [pc, #312]	; (80010d4 <HAL_GPIO_Init+0x1d4>)
 8000f9c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f9e:	3401      	adds	r4, #1
 8000fa0:	2c0f      	cmp	r4, #15
 8000fa2:	f200 8092 	bhi.w	80010ca <HAL_GPIO_Init+0x1ca>
    ioposition = 0x01U << position;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	40a3      	lsls	r3, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000faa:	680a      	ldr	r2, [r1, #0]
 8000fac:	ea03 0502 	and.w	r5, r3, r2
    if(iocurrent == ioposition)
 8000fb0:	42ab      	cmp	r3, r5
 8000fb2:	d1f4      	bne.n	8000f9e <HAL_GPIO_Init+0x9e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fb4:	684a      	ldr	r2, [r1, #4]
 8000fb6:	2a02      	cmp	r2, #2
 8000fb8:	d0a6      	beq.n	8000f08 <HAL_GPIO_Init+0x8>
 8000fba:	2a12      	cmp	r2, #18
 8000fbc:	d0a4      	beq.n	8000f08 <HAL_GPIO_Init+0x8>
      temp = GPIOx->MODER;
 8000fbe:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fc0:	ea4f 0e44 	mov.w	lr, r4, lsl #1
 8000fc4:	2203      	movs	r2, #3
 8000fc6:	fa02 f20e 	lsl.w	r2, r2, lr
 8000fca:	43d2      	mvns	r2, r2
 8000fcc:	4016      	ands	r6, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fce:	684f      	ldr	r7, [r1, #4]
 8000fd0:	f007 0703 	and.w	r7, r7, #3
 8000fd4:	fa07 f70e 	lsl.w	r7, r7, lr
 8000fd8:	433e      	orrs	r6, r7
      GPIOx->MODER = temp;
 8000fda:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fdc:	684e      	ldr	r6, [r1, #4]
 8000fde:	1e77      	subs	r7, r6, #1
 8000fe0:	2f01      	cmp	r7, #1
 8000fe2:	d903      	bls.n	8000fec <HAL_GPIO_Init+0xec>
 8000fe4:	2e11      	cmp	r6, #17
 8000fe6:	d001      	beq.n	8000fec <HAL_GPIO_Init+0xec>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fe8:	2e12      	cmp	r6, #18
 8000fea:	d10f      	bne.n	800100c <HAL_GPIO_Init+0x10c>
        temp = GPIOx->OSPEEDR; 
 8000fec:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fee:	4016      	ands	r6, r2
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ff0:	68cf      	ldr	r7, [r1, #12]
 8000ff2:	fa07 f70e 	lsl.w	r7, r7, lr
 8000ff6:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 8000ff8:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8000ffa:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ffc:	ea26 0303 	bic.w	r3, r6, r3
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001000:	684e      	ldr	r6, [r1, #4]
 8001002:	f3c6 1600 	ubfx	r6, r6, #4, #1
 8001006:	40a6      	lsls	r6, r4
 8001008:	4333      	orrs	r3, r6
        GPIOx->OTYPER = temp;
 800100a:	6043      	str	r3, [r0, #4]
      temp = GPIOx->PUPDR;
 800100c:	68c3      	ldr	r3, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800100e:	401a      	ands	r2, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001010:	688b      	ldr	r3, [r1, #8]
 8001012:	fa03 f30e 	lsl.w	r3, r3, lr
 8001016:	431a      	orrs	r2, r3
      GPIOx->PUPDR = temp;
 8001018:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800101a:	684b      	ldr	r3, [r1, #4]
 800101c:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001020:	d0bd      	beq.n	8000f9e <HAL_GPIO_Init+0x9e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001022:	2300      	movs	r3, #0
 8001024:	9301      	str	r3, [sp, #4]
 8001026:	4b2c      	ldr	r3, [pc, #176]	; (80010d8 <HAL_GPIO_Init+0x1d8>)
 8001028:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800102a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800102e:	645a      	str	r2, [r3, #68]	; 0x44
 8001030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001032:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001036:	9301      	str	r3, [sp, #4]
 8001038:	9b01      	ldr	r3, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 800103a:	08a3      	lsrs	r3, r4, #2
 800103c:	1c9e      	adds	r6, r3, #2
 800103e:	4a24      	ldr	r2, [pc, #144]	; (80010d0 <HAL_GPIO_Init+0x1d0>)
 8001040:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001044:	f004 0603 	and.w	r6, r4, #3
 8001048:	ea4f 0e86 	mov.w	lr, r6, lsl #2
 800104c:	260f      	movs	r6, #15
 800104e:	fa06 f60e 	lsl.w	r6, r6, lr
 8001052:	ea22 0206 	bic.w	r2, r2, r6
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001056:	4f21      	ldr	r7, [pc, #132]	; (80010dc <HAL_GPIO_Init+0x1dc>)
 8001058:	42b8      	cmp	r0, r7
 800105a:	f43f af6b 	beq.w	8000f34 <HAL_GPIO_Init+0x34>
 800105e:	4e20      	ldr	r6, [pc, #128]	; (80010e0 <HAL_GPIO_Init+0x1e0>)
 8001060:	42b0      	cmp	r0, r6
 8001062:	d022      	beq.n	80010aa <HAL_GPIO_Init+0x1aa>
 8001064:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001068:	42b0      	cmp	r0, r6
 800106a:	d020      	beq.n	80010ae <HAL_GPIO_Init+0x1ae>
 800106c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001070:	42b0      	cmp	r0, r6
 8001072:	d01e      	beq.n	80010b2 <HAL_GPIO_Init+0x1b2>
 8001074:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001078:	42b0      	cmp	r0, r6
 800107a:	d01c      	beq.n	80010b6 <HAL_GPIO_Init+0x1b6>
 800107c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001080:	42b0      	cmp	r0, r6
 8001082:	d01a      	beq.n	80010ba <HAL_GPIO_Init+0x1ba>
 8001084:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001088:	42b0      	cmp	r0, r6
 800108a:	d018      	beq.n	80010be <HAL_GPIO_Init+0x1be>
 800108c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001090:	42b0      	cmp	r0, r6
 8001092:	d016      	beq.n	80010c2 <HAL_GPIO_Init+0x1c2>
 8001094:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001098:	42b0      	cmp	r0, r6
 800109a:	d014      	beq.n	80010c6 <HAL_GPIO_Init+0x1c6>
 800109c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80010a0:	42b0      	cmp	r0, r6
 80010a2:	f43f af45 	beq.w	8000f30 <HAL_GPIO_Init+0x30>
 80010a6:	260a      	movs	r6, #10
 80010a8:	e745      	b.n	8000f36 <HAL_GPIO_Init+0x36>
 80010aa:	2601      	movs	r6, #1
 80010ac:	e743      	b.n	8000f36 <HAL_GPIO_Init+0x36>
 80010ae:	2602      	movs	r6, #2
 80010b0:	e741      	b.n	8000f36 <HAL_GPIO_Init+0x36>
 80010b2:	2603      	movs	r6, #3
 80010b4:	e73f      	b.n	8000f36 <HAL_GPIO_Init+0x36>
 80010b6:	2604      	movs	r6, #4
 80010b8:	e73d      	b.n	8000f36 <HAL_GPIO_Init+0x36>
 80010ba:	2605      	movs	r6, #5
 80010bc:	e73b      	b.n	8000f36 <HAL_GPIO_Init+0x36>
 80010be:	2606      	movs	r6, #6
 80010c0:	e739      	b.n	8000f36 <HAL_GPIO_Init+0x36>
 80010c2:	2607      	movs	r6, #7
 80010c4:	e737      	b.n	8000f36 <HAL_GPIO_Init+0x36>
 80010c6:	2608      	movs	r6, #8
 80010c8:	e735      	b.n	8000f36 <HAL_GPIO_Init+0x36>
      }
    }
  }
}
 80010ca:	b003      	add	sp, #12
 80010cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010ce:	bf00      	nop
 80010d0:	40013800 	.word	0x40013800
 80010d4:	40013c00 	.word	0x40013c00
 80010d8:	40023800 	.word	0x40023800
 80010dc:	40020000 	.word	0x40020000
 80010e0:	40020400 	.word	0x40020400

080010e4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010e4:	b912      	cbnz	r2, 80010ec <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010e6:	0409      	lsls	r1, r1, #16
 80010e8:	6181      	str	r1, [r0, #24]
 80010ea:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 80010ec:	6181      	str	r1, [r0, #24]
 80010ee:	4770      	bx	lr

080010f0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80010f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010f2:	b08b      	sub	sp, #44	; 0x2c
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80010f4:	2800      	cmp	r0, #0
 80010f6:	f000 808a 	beq.w	800120e <HAL_PCD_Init+0x11e>
 80010fa:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80010fc:	6805      	ldr	r5, [r0, #0]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80010fe:	f890 33bd 	ldrb.w	r3, [r0, #957]	; 0x3bd
 8001102:	b323      	cbz	r3, 800114e <HAL_PCD_Init+0x5e>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001104:	2303      	movs	r3, #3
 8001106:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800110a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800110c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001110:	d101      	bne.n	8001116 <HAL_PCD_Init+0x26>
  {
    hpcd->Init.dma_enable = 0U;
 8001112:	2300      	movs	r3, #0
 8001114:	6123      	str	r3, [r4, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001116:	6820      	ldr	r0, [r4, #0]
 8001118:	f000 ff2d 	bl	8001f76 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800111c:	4625      	mov	r5, r4
 800111e:	f855 7b10 	ldr.w	r7, [r5], #16
 8001122:	466e      	mov	r6, sp
 8001124:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001126:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001128:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800112a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800112c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001130:	e886 0003 	stmia.w	r6, {r0, r1}
 8001134:	1d23      	adds	r3, r4, #4
 8001136:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001138:	4638      	mov	r0, r7
 800113a:	f000 fed7 	bl	8001eec <USB_CoreInit>
 800113e:	b158      	cbz	r0, 8001158 <HAL_PCD_Init+0x68>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001140:	2302      	movs	r3, #2
 8001142:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
    return HAL_ERROR;
 8001146:	2501      	movs	r5, #1
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 8001148:	4628      	mov	r0, r5
 800114a:	b00b      	add	sp, #44	; 0x2c
 800114c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hpcd->Lock = HAL_UNLOCKED;
 800114e:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
    HAL_PCD_MspInit(hpcd);
 8001152:	f00b fe17 	bl	800cd84 <HAL_PCD_MspInit>
 8001156:	e7d5      	b.n	8001104 <HAL_PCD_Init+0x14>
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001158:	2100      	movs	r1, #0
 800115a:	6820      	ldr	r0, [r4, #0]
 800115c:	f000 ff11 	bl	8001f82 <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001160:	2300      	movs	r3, #0
 8001162:	e015      	b.n	8001190 <HAL_PCD_Init+0xa0>
    hpcd->IN_ep[i].is_in = 1U;
 8001164:	00d9      	lsls	r1, r3, #3
 8001166:	1ac8      	subs	r0, r1, r3
 8001168:	0082      	lsls	r2, r0, #2
 800116a:	4422      	add	r2, r4
 800116c:	2001      	movs	r0, #1
 800116e:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
    hpcd->IN_ep[i].num = i;
 8001172:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001176:	f8a2 3042 	strh.w	r3, [r2, #66]	; 0x42
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800117a:	2000      	movs	r0, #0
 800117c:	f882 003f 	strb.w	r0, [r2, #63]	; 0x3f
    hpcd->IN_ep[i].maxpacket = 0U;
 8001180:	6450      	str	r0, [r2, #68]	; 0x44
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001182:	6490      	str	r0, [r2, #72]	; 0x48
    hpcd->IN_ep[i].xfer_len = 0U;
 8001184:	1aca      	subs	r2, r1, r3
 8001186:	0091      	lsls	r1, r2, #2
 8001188:	4421      	add	r1, r4
 800118a:	6508      	str	r0, [r1, #80]	; 0x50
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800118c:	3301      	adds	r3, #1
 800118e:	b2db      	uxtb	r3, r3
 8001190:	6865      	ldr	r5, [r4, #4]
 8001192:	42ab      	cmp	r3, r5
 8001194:	d3e6      	bcc.n	8001164 <HAL_PCD_Init+0x74>
 8001196:	2300      	movs	r3, #0
 8001198:	e015      	b.n	80011c6 <HAL_PCD_Init+0xd6>
    hpcd->OUT_ep[i].is_in = 0U;
 800119a:	00d8      	lsls	r0, r3, #3
 800119c:	1ac1      	subs	r1, r0, r3
 800119e:	008a      	lsls	r2, r1, #2
 80011a0:	4422      	add	r2, r4
 80011a2:	2100      	movs	r1, #0
 80011a4:	f882 11fd 	strb.w	r1, [r2, #509]	; 0x1fd
    hpcd->OUT_ep[i].num = i;
 80011a8:	f882 31fc 	strb.w	r3, [r2, #508]	; 0x1fc
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80011ac:	f882 11ff 	strb.w	r1, [r2, #511]	; 0x1ff
    hpcd->OUT_ep[i].maxpacket = 0U;
 80011b0:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80011b4:	f8c2 1208 	str.w	r1, [r2, #520]	; 0x208
    hpcd->OUT_ep[i].xfer_len = 0U;
 80011b8:	1ac2      	subs	r2, r0, r3
 80011ba:	0090      	lsls	r0, r2, #2
 80011bc:	4420      	add	r0, r4
 80011be:	f8c0 1210 	str.w	r1, [r0, #528]	; 0x210
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011c2:	3301      	adds	r3, #1
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	429d      	cmp	r5, r3
 80011c8:	d8e7      	bhi.n	800119a <HAL_PCD_Init+0xaa>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80011ca:	4625      	mov	r5, r4
 80011cc:	f855 7b10 	ldr.w	r7, [r5], #16
 80011d0:	466e      	mov	r6, sp
 80011d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011d4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80011d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011d8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80011da:	e895 0003 	ldmia.w	r5, {r0, r1}
 80011de:	e886 0003 	stmia.w	r6, {r0, r1}
 80011e2:	1d23      	adds	r3, r4, #4
 80011e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011e6:	4638      	mov	r0, r7
 80011e8:	f000 ff12 	bl	8002010 <USB_DevInit>
 80011ec:	4605      	mov	r5, r0
 80011ee:	b120      	cbz	r0, 80011fa <HAL_PCD_Init+0x10a>
    hpcd->State = HAL_PCD_STATE_ERROR;
 80011f0:	2302      	movs	r3, #2
 80011f2:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
    return HAL_ERROR;
 80011f6:	2501      	movs	r5, #1
 80011f8:	e7a6      	b.n	8001148 <HAL_PCD_Init+0x58>
  hpcd->USB_Address = 0U;
 80011fa:	2300      	movs	r3, #0
 80011fc:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001200:	2301      	movs	r3, #1
 8001202:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  (void)USB_DevDisconnect(hpcd->Instance);
 8001206:	6820      	ldr	r0, [r4, #0]
 8001208:	f000 ffd2 	bl	80021b0 <USB_DevDisconnect>
  return HAL_OK;
 800120c:	e79c      	b.n	8001148 <HAL_PCD_Init+0x58>
    return HAL_ERROR;
 800120e:	2501      	movs	r5, #1
 8001210:	e79a      	b.n	8001148 <HAL_PCD_Init+0x58>
	...

08001214 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001214:	2800      	cmp	r0, #0
 8001216:	f000 81bb 	beq.w	8001590 <HAL_RCC_OscConfig+0x37c>
{
 800121a:	b570      	push	{r4, r5, r6, lr}
 800121c:	b082      	sub	sp, #8
 800121e:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001220:	6803      	ldr	r3, [r0, #0]
 8001222:	f013 0f01 	tst.w	r3, #1
 8001226:	d03b      	beq.n	80012a0 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001228:	4ba7      	ldr	r3, [pc, #668]	; (80014c8 <HAL_RCC_OscConfig+0x2b4>)
 800122a:	689b      	ldr	r3, [r3, #8]
 800122c:	f003 030c 	and.w	r3, r3, #12
 8001230:	2b04      	cmp	r3, #4
 8001232:	d02c      	beq.n	800128e <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001234:	4ba4      	ldr	r3, [pc, #656]	; (80014c8 <HAL_RCC_OscConfig+0x2b4>)
 8001236:	689b      	ldr	r3, [r3, #8]
 8001238:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800123c:	2b08      	cmp	r3, #8
 800123e:	d021      	beq.n	8001284 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001240:	6863      	ldr	r3, [r4, #4]
 8001242:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001246:	d04f      	beq.n	80012e8 <HAL_RCC_OscConfig+0xd4>
 8001248:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800124c:	d052      	beq.n	80012f4 <HAL_RCC_OscConfig+0xe0>
 800124e:	4b9e      	ldr	r3, [pc, #632]	; (80014c8 <HAL_RCC_OscConfig+0x2b4>)
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800125e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001260:	6863      	ldr	r3, [r4, #4]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d050      	beq.n	8001308 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001266:	f7ff f979 	bl	800055c <HAL_GetTick>
 800126a:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800126c:	4b96      	ldr	r3, [pc, #600]	; (80014c8 <HAL_RCC_OscConfig+0x2b4>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001274:	d114      	bne.n	80012a0 <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001276:	f7ff f971 	bl	800055c <HAL_GetTick>
 800127a:	1b40      	subs	r0, r0, r5
 800127c:	2864      	cmp	r0, #100	; 0x64
 800127e:	d9f5      	bls.n	800126c <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8001280:	2003      	movs	r0, #3
 8001282:	e18a      	b.n	800159a <HAL_RCC_OscConfig+0x386>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001284:	4b90      	ldr	r3, [pc, #576]	; (80014c8 <HAL_RCC_OscConfig+0x2b4>)
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800128c:	d0d8      	beq.n	8001240 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800128e:	4b8e      	ldr	r3, [pc, #568]	; (80014c8 <HAL_RCC_OscConfig+0x2b4>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001296:	d003      	beq.n	80012a0 <HAL_RCC_OscConfig+0x8c>
 8001298:	6863      	ldr	r3, [r4, #4]
 800129a:	2b00      	cmp	r3, #0
 800129c:	f000 817a 	beq.w	8001594 <HAL_RCC_OscConfig+0x380>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012a0:	6823      	ldr	r3, [r4, #0]
 80012a2:	f013 0f02 	tst.w	r3, #2
 80012a6:	d055      	beq.n	8001354 <HAL_RCC_OscConfig+0x140>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012a8:	4b87      	ldr	r3, [pc, #540]	; (80014c8 <HAL_RCC_OscConfig+0x2b4>)
 80012aa:	689b      	ldr	r3, [r3, #8]
 80012ac:	f013 0f0c 	tst.w	r3, #12
 80012b0:	d03e      	beq.n	8001330 <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012b2:	4b85      	ldr	r3, [pc, #532]	; (80014c8 <HAL_RCC_OscConfig+0x2b4>)
 80012b4:	689b      	ldr	r3, [r3, #8]
 80012b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012ba:	2b08      	cmp	r3, #8
 80012bc:	d033      	beq.n	8001326 <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80012be:	68e3      	ldr	r3, [r4, #12]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d068      	beq.n	8001396 <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012c4:	2201      	movs	r2, #1
 80012c6:	4b81      	ldr	r3, [pc, #516]	; (80014cc <HAL_RCC_OscConfig+0x2b8>)
 80012c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012ca:	f7ff f947 	bl	800055c <HAL_GetTick>
 80012ce:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012d0:	4b7d      	ldr	r3, [pc, #500]	; (80014c8 <HAL_RCC_OscConfig+0x2b4>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f013 0f02 	tst.w	r3, #2
 80012d8:	d154      	bne.n	8001384 <HAL_RCC_OscConfig+0x170>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012da:	f7ff f93f 	bl	800055c <HAL_GetTick>
 80012de:	1b40      	subs	r0, r0, r5
 80012e0:	2802      	cmp	r0, #2
 80012e2:	d9f5      	bls.n	80012d0 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 80012e4:	2003      	movs	r0, #3
 80012e6:	e158      	b.n	800159a <HAL_RCC_OscConfig+0x386>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012e8:	4a77      	ldr	r2, [pc, #476]	; (80014c8 <HAL_RCC_OscConfig+0x2b4>)
 80012ea:	6813      	ldr	r3, [r2, #0]
 80012ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012f0:	6013      	str	r3, [r2, #0]
 80012f2:	e7b5      	b.n	8001260 <HAL_RCC_OscConfig+0x4c>
 80012f4:	4b74      	ldr	r3, [pc, #464]	; (80014c8 <HAL_RCC_OscConfig+0x2b4>)
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80012fc:	601a      	str	r2, [r3, #0]
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001304:	601a      	str	r2, [r3, #0]
 8001306:	e7ab      	b.n	8001260 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8001308:	f7ff f928 	bl	800055c <HAL_GetTick>
 800130c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800130e:	4b6e      	ldr	r3, [pc, #440]	; (80014c8 <HAL_RCC_OscConfig+0x2b4>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001316:	d0c3      	beq.n	80012a0 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001318:	f7ff f920 	bl	800055c <HAL_GetTick>
 800131c:	1b40      	subs	r0, r0, r5
 800131e:	2864      	cmp	r0, #100	; 0x64
 8001320:	d9f5      	bls.n	800130e <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 8001322:	2003      	movs	r0, #3
 8001324:	e139      	b.n	800159a <HAL_RCC_OscConfig+0x386>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001326:	4b68      	ldr	r3, [pc, #416]	; (80014c8 <HAL_RCC_OscConfig+0x2b4>)
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800132e:	d1c6      	bne.n	80012be <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001330:	4b65      	ldr	r3, [pc, #404]	; (80014c8 <HAL_RCC_OscConfig+0x2b4>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f013 0f02 	tst.w	r3, #2
 8001338:	d004      	beq.n	8001344 <HAL_RCC_OscConfig+0x130>
 800133a:	68e3      	ldr	r3, [r4, #12]
 800133c:	2b01      	cmp	r3, #1
 800133e:	d001      	beq.n	8001344 <HAL_RCC_OscConfig+0x130>
        return HAL_ERROR;
 8001340:	2001      	movs	r0, #1
 8001342:	e12a      	b.n	800159a <HAL_RCC_OscConfig+0x386>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001344:	4a60      	ldr	r2, [pc, #384]	; (80014c8 <HAL_RCC_OscConfig+0x2b4>)
 8001346:	6813      	ldr	r3, [r2, #0]
 8001348:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800134c:	6921      	ldr	r1, [r4, #16]
 800134e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001352:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001354:	6823      	ldr	r3, [r4, #0]
 8001356:	f013 0f08 	tst.w	r3, #8
 800135a:	d040      	beq.n	80013de <HAL_RCC_OscConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800135c:	6963      	ldr	r3, [r4, #20]
 800135e:	b363      	cbz	r3, 80013ba <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001360:	2201      	movs	r2, #1
 8001362:	4b5b      	ldr	r3, [pc, #364]	; (80014d0 <HAL_RCC_OscConfig+0x2bc>)
 8001364:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001366:	f7ff f8f9 	bl	800055c <HAL_GetTick>
 800136a:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800136c:	4b56      	ldr	r3, [pc, #344]	; (80014c8 <HAL_RCC_OscConfig+0x2b4>)
 800136e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001370:	f013 0f02 	tst.w	r3, #2
 8001374:	d133      	bne.n	80013de <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001376:	f7ff f8f1 	bl	800055c <HAL_GetTick>
 800137a:	1b40      	subs	r0, r0, r5
 800137c:	2802      	cmp	r0, #2
 800137e:	d9f5      	bls.n	800136c <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 8001380:	2003      	movs	r0, #3
 8001382:	e10a      	b.n	800159a <HAL_RCC_OscConfig+0x386>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001384:	4a50      	ldr	r2, [pc, #320]	; (80014c8 <HAL_RCC_OscConfig+0x2b4>)
 8001386:	6813      	ldr	r3, [r2, #0]
 8001388:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800138c:	6921      	ldr	r1, [r4, #16]
 800138e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001392:	6013      	str	r3, [r2, #0]
 8001394:	e7de      	b.n	8001354 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 8001396:	2200      	movs	r2, #0
 8001398:	4b4c      	ldr	r3, [pc, #304]	; (80014cc <HAL_RCC_OscConfig+0x2b8>)
 800139a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800139c:	f7ff f8de 	bl	800055c <HAL_GetTick>
 80013a0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013a2:	4b49      	ldr	r3, [pc, #292]	; (80014c8 <HAL_RCC_OscConfig+0x2b4>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f013 0f02 	tst.w	r3, #2
 80013aa:	d0d3      	beq.n	8001354 <HAL_RCC_OscConfig+0x140>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013ac:	f7ff f8d6 	bl	800055c <HAL_GetTick>
 80013b0:	1b40      	subs	r0, r0, r5
 80013b2:	2802      	cmp	r0, #2
 80013b4:	d9f5      	bls.n	80013a2 <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 80013b6:	2003      	movs	r0, #3
 80013b8:	e0ef      	b.n	800159a <HAL_RCC_OscConfig+0x386>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013ba:	2200      	movs	r2, #0
 80013bc:	4b44      	ldr	r3, [pc, #272]	; (80014d0 <HAL_RCC_OscConfig+0x2bc>)
 80013be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013c0:	f7ff f8cc 	bl	800055c <HAL_GetTick>
 80013c4:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013c6:	4b40      	ldr	r3, [pc, #256]	; (80014c8 <HAL_RCC_OscConfig+0x2b4>)
 80013c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013ca:	f013 0f02 	tst.w	r3, #2
 80013ce:	d006      	beq.n	80013de <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013d0:	f7ff f8c4 	bl	800055c <HAL_GetTick>
 80013d4:	1b40      	subs	r0, r0, r5
 80013d6:	2802      	cmp	r0, #2
 80013d8:	d9f5      	bls.n	80013c6 <HAL_RCC_OscConfig+0x1b2>
        {
          return HAL_TIMEOUT;
 80013da:	2003      	movs	r0, #3
 80013dc:	e0dd      	b.n	800159a <HAL_RCC_OscConfig+0x386>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013de:	6823      	ldr	r3, [r4, #0]
 80013e0:	f013 0f04 	tst.w	r3, #4
 80013e4:	d079      	beq.n	80014da <HAL_RCC_OscConfig+0x2c6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013e6:	4b38      	ldr	r3, [pc, #224]	; (80014c8 <HAL_RCC_OscConfig+0x2b4>)
 80013e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ea:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80013ee:	d133      	bne.n	8001458 <HAL_RCC_OscConfig+0x244>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013f0:	2300      	movs	r3, #0
 80013f2:	9301      	str	r3, [sp, #4]
 80013f4:	4b34      	ldr	r3, [pc, #208]	; (80014c8 <HAL_RCC_OscConfig+0x2b4>)
 80013f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013f8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80013fc:	641a      	str	r2, [r3, #64]	; 0x40
 80013fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001400:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001404:	9301      	str	r3, [sp, #4]
 8001406:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001408:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800140a:	4b32      	ldr	r3, [pc, #200]	; (80014d4 <HAL_RCC_OscConfig+0x2c0>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001412:	d023      	beq.n	800145c <HAL_RCC_OscConfig+0x248>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001414:	68a3      	ldr	r3, [r4, #8]
 8001416:	2b01      	cmp	r3, #1
 8001418:	d034      	beq.n	8001484 <HAL_RCC_OscConfig+0x270>
 800141a:	2b05      	cmp	r3, #5
 800141c:	d038      	beq.n	8001490 <HAL_RCC_OscConfig+0x27c>
 800141e:	4b2a      	ldr	r3, [pc, #168]	; (80014c8 <HAL_RCC_OscConfig+0x2b4>)
 8001420:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001422:	f022 0201 	bic.w	r2, r2, #1
 8001426:	671a      	str	r2, [r3, #112]	; 0x70
 8001428:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800142a:	f022 0204 	bic.w	r2, r2, #4
 800142e:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001430:	68a3      	ldr	r3, [r4, #8]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d036      	beq.n	80014a4 <HAL_RCC_OscConfig+0x290>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001436:	f7ff f891 	bl	800055c <HAL_GetTick>
 800143a:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800143c:	4b22      	ldr	r3, [pc, #136]	; (80014c8 <HAL_RCC_OscConfig+0x2b4>)
 800143e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001440:	f013 0f02 	tst.w	r3, #2
 8001444:	d148      	bne.n	80014d8 <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001446:	f7ff f889 	bl	800055c <HAL_GetTick>
 800144a:	1b80      	subs	r0, r0, r6
 800144c:	f241 3388 	movw	r3, #5000	; 0x1388
 8001450:	4298      	cmp	r0, r3
 8001452:	d9f3      	bls.n	800143c <HAL_RCC_OscConfig+0x228>
        {
          return HAL_TIMEOUT;
 8001454:	2003      	movs	r0, #3
 8001456:	e0a0      	b.n	800159a <HAL_RCC_OscConfig+0x386>
    FlagStatus       pwrclkchanged = RESET;
 8001458:	2500      	movs	r5, #0
 800145a:	e7d6      	b.n	800140a <HAL_RCC_OscConfig+0x1f6>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800145c:	4a1d      	ldr	r2, [pc, #116]	; (80014d4 <HAL_RCC_OscConfig+0x2c0>)
 800145e:	6813      	ldr	r3, [r2, #0]
 8001460:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001464:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001466:	f7ff f879 	bl	800055c <HAL_GetTick>
 800146a:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800146c:	4b19      	ldr	r3, [pc, #100]	; (80014d4 <HAL_RCC_OscConfig+0x2c0>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001474:	d1ce      	bne.n	8001414 <HAL_RCC_OscConfig+0x200>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001476:	f7ff f871 	bl	800055c <HAL_GetTick>
 800147a:	1b80      	subs	r0, r0, r6
 800147c:	2802      	cmp	r0, #2
 800147e:	d9f5      	bls.n	800146c <HAL_RCC_OscConfig+0x258>
          return HAL_TIMEOUT;
 8001480:	2003      	movs	r0, #3
 8001482:	e08a      	b.n	800159a <HAL_RCC_OscConfig+0x386>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001484:	4a10      	ldr	r2, [pc, #64]	; (80014c8 <HAL_RCC_OscConfig+0x2b4>)
 8001486:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8001488:	f043 0301 	orr.w	r3, r3, #1
 800148c:	6713      	str	r3, [r2, #112]	; 0x70
 800148e:	e7cf      	b.n	8001430 <HAL_RCC_OscConfig+0x21c>
 8001490:	4b0d      	ldr	r3, [pc, #52]	; (80014c8 <HAL_RCC_OscConfig+0x2b4>)
 8001492:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001494:	f042 0204 	orr.w	r2, r2, #4
 8001498:	671a      	str	r2, [r3, #112]	; 0x70
 800149a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800149c:	f042 0201 	orr.w	r2, r2, #1
 80014a0:	671a      	str	r2, [r3, #112]	; 0x70
 80014a2:	e7c5      	b.n	8001430 <HAL_RCC_OscConfig+0x21c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014a4:	f7ff f85a 	bl	800055c <HAL_GetTick>
 80014a8:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014aa:	4b07      	ldr	r3, [pc, #28]	; (80014c8 <HAL_RCC_OscConfig+0x2b4>)
 80014ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014ae:	f013 0f02 	tst.w	r3, #2
 80014b2:	d011      	beq.n	80014d8 <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014b4:	f7ff f852 	bl	800055c <HAL_GetTick>
 80014b8:	1b80      	subs	r0, r0, r6
 80014ba:	f241 3388 	movw	r3, #5000	; 0x1388
 80014be:	4298      	cmp	r0, r3
 80014c0:	d9f3      	bls.n	80014aa <HAL_RCC_OscConfig+0x296>
        {
          return HAL_TIMEOUT;
 80014c2:	2003      	movs	r0, #3
 80014c4:	e069      	b.n	800159a <HAL_RCC_OscConfig+0x386>
 80014c6:	bf00      	nop
 80014c8:	40023800 	.word	0x40023800
 80014cc:	42470000 	.word	0x42470000
 80014d0:	42470e80 	.word	0x42470e80
 80014d4:	40007000 	.word	0x40007000
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80014d8:	b9e5      	cbnz	r5, 8001514 <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014da:	69a3      	ldr	r3, [r4, #24]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d05b      	beq.n	8001598 <HAL_RCC_OscConfig+0x384>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80014e0:	4a30      	ldr	r2, [pc, #192]	; (80015a4 <HAL_RCC_OscConfig+0x390>)
 80014e2:	6892      	ldr	r2, [r2, #8]
 80014e4:	f002 020c 	and.w	r2, r2, #12
 80014e8:	2a08      	cmp	r2, #8
 80014ea:	d058      	beq.n	800159e <HAL_RCC_OscConfig+0x38a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014ec:	2b02      	cmp	r3, #2
 80014ee:	d017      	beq.n	8001520 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014f0:	2200      	movs	r2, #0
 80014f2:	4b2d      	ldr	r3, [pc, #180]	; (80015a8 <HAL_RCC_OscConfig+0x394>)
 80014f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014f6:	f7ff f831 	bl	800055c <HAL_GetTick>
 80014fa:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014fc:	4b29      	ldr	r3, [pc, #164]	; (80015a4 <HAL_RCC_OscConfig+0x390>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001504:	d042      	beq.n	800158c <HAL_RCC_OscConfig+0x378>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001506:	f7ff f829 	bl	800055c <HAL_GetTick>
 800150a:	1b00      	subs	r0, r0, r4
 800150c:	2802      	cmp	r0, #2
 800150e:	d9f5      	bls.n	80014fc <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001510:	2003      	movs	r0, #3
 8001512:	e042      	b.n	800159a <HAL_RCC_OscConfig+0x386>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001514:	4a23      	ldr	r2, [pc, #140]	; (80015a4 <HAL_RCC_OscConfig+0x390>)
 8001516:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001518:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800151c:	6413      	str	r3, [r2, #64]	; 0x40
 800151e:	e7dc      	b.n	80014da <HAL_RCC_OscConfig+0x2c6>
        __HAL_RCC_PLL_DISABLE();
 8001520:	2200      	movs	r2, #0
 8001522:	4b21      	ldr	r3, [pc, #132]	; (80015a8 <HAL_RCC_OscConfig+0x394>)
 8001524:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001526:	f7ff f819 	bl	800055c <HAL_GetTick>
 800152a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800152c:	4b1d      	ldr	r3, [pc, #116]	; (80015a4 <HAL_RCC_OscConfig+0x390>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001534:	d006      	beq.n	8001544 <HAL_RCC_OscConfig+0x330>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001536:	f7ff f811 	bl	800055c <HAL_GetTick>
 800153a:	1b40      	subs	r0, r0, r5
 800153c:	2802      	cmp	r0, #2
 800153e:	d9f5      	bls.n	800152c <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 8001540:	2003      	movs	r0, #3
 8001542:	e02a      	b.n	800159a <HAL_RCC_OscConfig+0x386>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001544:	69e3      	ldr	r3, [r4, #28]
 8001546:	6a22      	ldr	r2, [r4, #32]
 8001548:	4313      	orrs	r3, r2
 800154a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800154c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001550:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001552:	0852      	lsrs	r2, r2, #1
 8001554:	3a01      	subs	r2, #1
 8001556:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800155a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800155c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001560:	4a10      	ldr	r2, [pc, #64]	; (80015a4 <HAL_RCC_OscConfig+0x390>)
 8001562:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8001564:	2201      	movs	r2, #1
 8001566:	4b10      	ldr	r3, [pc, #64]	; (80015a8 <HAL_RCC_OscConfig+0x394>)
 8001568:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800156a:	f7fe fff7 	bl	800055c <HAL_GetTick>
 800156e:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001570:	4b0c      	ldr	r3, [pc, #48]	; (80015a4 <HAL_RCC_OscConfig+0x390>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001578:	d106      	bne.n	8001588 <HAL_RCC_OscConfig+0x374>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800157a:	f7fe ffef 	bl	800055c <HAL_GetTick>
 800157e:	1b00      	subs	r0, r0, r4
 8001580:	2802      	cmp	r0, #2
 8001582:	d9f5      	bls.n	8001570 <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 8001584:	2003      	movs	r0, #3
 8001586:	e008      	b.n	800159a <HAL_RCC_OscConfig+0x386>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8001588:	2000      	movs	r0, #0
 800158a:	e006      	b.n	800159a <HAL_RCC_OscConfig+0x386>
 800158c:	2000      	movs	r0, #0
 800158e:	e004      	b.n	800159a <HAL_RCC_OscConfig+0x386>
    return HAL_ERROR;
 8001590:	2001      	movs	r0, #1
 8001592:	4770      	bx	lr
        return HAL_ERROR;
 8001594:	2001      	movs	r0, #1
 8001596:	e000      	b.n	800159a <HAL_RCC_OscConfig+0x386>
  return HAL_OK;
 8001598:	2000      	movs	r0, #0
}
 800159a:	b002      	add	sp, #8
 800159c:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800159e:	2001      	movs	r0, #1
 80015a0:	e7fb      	b.n	800159a <HAL_RCC_OscConfig+0x386>
 80015a2:	bf00      	nop
 80015a4:	40023800 	.word	0x40023800
 80015a8:	42470060 	.word	0x42470060

080015ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80015ae:	4b31      	ldr	r3, [pc, #196]	; (8001674 <HAL_RCC_GetSysClockFreq+0xc8>)
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	f003 030c 	and.w	r3, r3, #12
 80015b6:	2b04      	cmp	r3, #4
 80015b8:	d059      	beq.n	800166e <HAL_RCC_GetSysClockFreq+0xc2>
 80015ba:	2b08      	cmp	r3, #8
 80015bc:	d001      	beq.n	80015c2 <HAL_RCC_GetSysClockFreq+0x16>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80015be:	482e      	ldr	r0, [pc, #184]	; (8001678 <HAL_RCC_GetSysClockFreq+0xcc>)
 80015c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015c2:	4b2c      	ldr	r3, [pc, #176]	; (8001674 <HAL_RCC_GetSysClockFreq+0xc8>)
 80015c4:	685a      	ldr	r2, [r3, #4]
 80015c6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80015d0:	d02a      	beq.n	8001628 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015d2:	4b28      	ldr	r3, [pc, #160]	; (8001674 <HAL_RCC_GetSysClockFreq+0xc8>)
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	f3c3 1388 	ubfx	r3, r3, #6, #9
 80015da:	461e      	mov	r6, r3
 80015dc:	2700      	movs	r7, #0
 80015de:	015c      	lsls	r4, r3, #5
 80015e0:	2500      	movs	r5, #0
 80015e2:	1ae4      	subs	r4, r4, r3
 80015e4:	eb65 0507 	sbc.w	r5, r5, r7
 80015e8:	01a9      	lsls	r1, r5, #6
 80015ea:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 80015ee:	01a0      	lsls	r0, r4, #6
 80015f0:	1b00      	subs	r0, r0, r4
 80015f2:	eb61 0105 	sbc.w	r1, r1, r5
 80015f6:	00cb      	lsls	r3, r1, #3
 80015f8:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80015fc:	00c4      	lsls	r4, r0, #3
 80015fe:	19a0      	adds	r0, r4, r6
 8001600:	eb43 0107 	adc.w	r1, r3, r7
 8001604:	024b      	lsls	r3, r1, #9
 8001606:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 800160a:	0244      	lsls	r4, r0, #9
 800160c:	4620      	mov	r0, r4
 800160e:	4619      	mov	r1, r3
 8001610:	2300      	movs	r3, #0
 8001612:	f7fe fdf5 	bl	8000200 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001616:	4b17      	ldr	r3, [pc, #92]	; (8001674 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800161e:	3301      	adds	r3, #1
 8001620:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8001622:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8001626:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001628:	4b12      	ldr	r3, [pc, #72]	; (8001674 <HAL_RCC_GetSysClockFreq+0xc8>)
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8001630:	461e      	mov	r6, r3
 8001632:	2700      	movs	r7, #0
 8001634:	015c      	lsls	r4, r3, #5
 8001636:	2500      	movs	r5, #0
 8001638:	1ae4      	subs	r4, r4, r3
 800163a:	eb65 0507 	sbc.w	r5, r5, r7
 800163e:	01a9      	lsls	r1, r5, #6
 8001640:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8001644:	01a0      	lsls	r0, r4, #6
 8001646:	1b00      	subs	r0, r0, r4
 8001648:	eb61 0105 	sbc.w	r1, r1, r5
 800164c:	00cb      	lsls	r3, r1, #3
 800164e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001652:	00c4      	lsls	r4, r0, #3
 8001654:	19a0      	adds	r0, r4, r6
 8001656:	eb43 0107 	adc.w	r1, r3, r7
 800165a:	028b      	lsls	r3, r1, #10
 800165c:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8001660:	0284      	lsls	r4, r0, #10
 8001662:	4620      	mov	r0, r4
 8001664:	4619      	mov	r1, r3
 8001666:	2300      	movs	r3, #0
 8001668:	f7fe fdca 	bl	8000200 <__aeabi_uldivmod>
 800166c:	e7d3      	b.n	8001616 <HAL_RCC_GetSysClockFreq+0x6a>
      sysclockfreq = HSE_VALUE;
 800166e:	4803      	ldr	r0, [pc, #12]	; (800167c <HAL_RCC_GetSysClockFreq+0xd0>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001670:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001672:	bf00      	nop
 8001674:	40023800 	.word	0x40023800
 8001678:	00f42400 	.word	0x00f42400
 800167c:	007a1200 	.word	0x007a1200

08001680 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8001680:	2800      	cmp	r0, #0
 8001682:	f000 809d 	beq.w	80017c0 <HAL_RCC_ClockConfig+0x140>
{
 8001686:	b570      	push	{r4, r5, r6, lr}
 8001688:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800168a:	4b4f      	ldr	r3, [pc, #316]	; (80017c8 <HAL_RCC_ClockConfig+0x148>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 030f 	and.w	r3, r3, #15
 8001692:	428b      	cmp	r3, r1
 8001694:	d209      	bcs.n	80016aa <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001696:	b2cb      	uxtb	r3, r1
 8001698:	4a4b      	ldr	r2, [pc, #300]	; (80017c8 <HAL_RCC_ClockConfig+0x148>)
 800169a:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800169c:	6813      	ldr	r3, [r2, #0]
 800169e:	f003 030f 	and.w	r3, r3, #15
 80016a2:	4299      	cmp	r1, r3
 80016a4:	d001      	beq.n	80016aa <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
 80016a6:	2001      	movs	r0, #1
 80016a8:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016aa:	6823      	ldr	r3, [r4, #0]
 80016ac:	f013 0f02 	tst.w	r3, #2
 80016b0:	d017      	beq.n	80016e2 <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016b2:	f013 0f04 	tst.w	r3, #4
 80016b6:	d004      	beq.n	80016c2 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016b8:	4a44      	ldr	r2, [pc, #272]	; (80017cc <HAL_RCC_ClockConfig+0x14c>)
 80016ba:	6893      	ldr	r3, [r2, #8]
 80016bc:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80016c0:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016c2:	6823      	ldr	r3, [r4, #0]
 80016c4:	f013 0f08 	tst.w	r3, #8
 80016c8:	d004      	beq.n	80016d4 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016ca:	4a40      	ldr	r2, [pc, #256]	; (80017cc <HAL_RCC_ClockConfig+0x14c>)
 80016cc:	6893      	ldr	r3, [r2, #8]
 80016ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80016d2:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016d4:	4a3d      	ldr	r2, [pc, #244]	; (80017cc <HAL_RCC_ClockConfig+0x14c>)
 80016d6:	6893      	ldr	r3, [r2, #8]
 80016d8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80016dc:	68a0      	ldr	r0, [r4, #8]
 80016de:	4303      	orrs	r3, r0
 80016e0:	6093      	str	r3, [r2, #8]
 80016e2:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016e4:	6823      	ldr	r3, [r4, #0]
 80016e6:	f013 0f01 	tst.w	r3, #1
 80016ea:	d032      	beq.n	8001752 <HAL_RCC_ClockConfig+0xd2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016ec:	6863      	ldr	r3, [r4, #4]
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	d021      	beq.n	8001736 <HAL_RCC_ClockConfig+0xb6>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016f2:	1e9a      	subs	r2, r3, #2
 80016f4:	2a01      	cmp	r2, #1
 80016f6:	d925      	bls.n	8001744 <HAL_RCC_ClockConfig+0xc4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016f8:	4a34      	ldr	r2, [pc, #208]	; (80017cc <HAL_RCC_ClockConfig+0x14c>)
 80016fa:	6812      	ldr	r2, [r2, #0]
 80016fc:	f012 0f02 	tst.w	r2, #2
 8001700:	d060      	beq.n	80017c4 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001702:	4932      	ldr	r1, [pc, #200]	; (80017cc <HAL_RCC_ClockConfig+0x14c>)
 8001704:	688a      	ldr	r2, [r1, #8]
 8001706:	f022 0203 	bic.w	r2, r2, #3
 800170a:	4313      	orrs	r3, r2
 800170c:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 800170e:	f7fe ff25 	bl	800055c <HAL_GetTick>
 8001712:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001714:	4b2d      	ldr	r3, [pc, #180]	; (80017cc <HAL_RCC_ClockConfig+0x14c>)
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	f003 030c 	and.w	r3, r3, #12
 800171c:	6862      	ldr	r2, [r4, #4]
 800171e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001722:	d016      	beq.n	8001752 <HAL_RCC_ClockConfig+0xd2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001724:	f7fe ff1a 	bl	800055c <HAL_GetTick>
 8001728:	1b80      	subs	r0, r0, r6
 800172a:	f241 3388 	movw	r3, #5000	; 0x1388
 800172e:	4298      	cmp	r0, r3
 8001730:	d9f0      	bls.n	8001714 <HAL_RCC_ClockConfig+0x94>
        return HAL_TIMEOUT;
 8001732:	2003      	movs	r0, #3
 8001734:	bd70      	pop	{r4, r5, r6, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001736:	4a25      	ldr	r2, [pc, #148]	; (80017cc <HAL_RCC_ClockConfig+0x14c>)
 8001738:	6812      	ldr	r2, [r2, #0]
 800173a:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800173e:	d1e0      	bne.n	8001702 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8001740:	2001      	movs	r0, #1
 8001742:	bd70      	pop	{r4, r5, r6, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001744:	4a21      	ldr	r2, [pc, #132]	; (80017cc <HAL_RCC_ClockConfig+0x14c>)
 8001746:	6812      	ldr	r2, [r2, #0]
 8001748:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800174c:	d1d9      	bne.n	8001702 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 800174e:	2001      	movs	r0, #1
 8001750:	bd70      	pop	{r4, r5, r6, pc}
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001752:	4b1d      	ldr	r3, [pc, #116]	; (80017c8 <HAL_RCC_ClockConfig+0x148>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 030f 	and.w	r3, r3, #15
 800175a:	429d      	cmp	r5, r3
 800175c:	d209      	bcs.n	8001772 <HAL_RCC_ClockConfig+0xf2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800175e:	b2ea      	uxtb	r2, r5
 8001760:	4b19      	ldr	r3, [pc, #100]	; (80017c8 <HAL_RCC_ClockConfig+0x148>)
 8001762:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f003 030f 	and.w	r3, r3, #15
 800176a:	429d      	cmp	r5, r3
 800176c:	d001      	beq.n	8001772 <HAL_RCC_ClockConfig+0xf2>
      return HAL_ERROR;
 800176e:	2001      	movs	r0, #1
}
 8001770:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001772:	6823      	ldr	r3, [r4, #0]
 8001774:	f013 0f04 	tst.w	r3, #4
 8001778:	d006      	beq.n	8001788 <HAL_RCC_ClockConfig+0x108>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800177a:	4a14      	ldr	r2, [pc, #80]	; (80017cc <HAL_RCC_ClockConfig+0x14c>)
 800177c:	6893      	ldr	r3, [r2, #8]
 800177e:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001782:	68e1      	ldr	r1, [r4, #12]
 8001784:	430b      	orrs	r3, r1
 8001786:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001788:	6823      	ldr	r3, [r4, #0]
 800178a:	f013 0f08 	tst.w	r3, #8
 800178e:	d007      	beq.n	80017a0 <HAL_RCC_ClockConfig+0x120>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001790:	4a0e      	ldr	r2, [pc, #56]	; (80017cc <HAL_RCC_ClockConfig+0x14c>)
 8001792:	6893      	ldr	r3, [r2, #8]
 8001794:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001798:	6921      	ldr	r1, [r4, #16]
 800179a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800179e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80017a0:	f7ff ff04 	bl	80015ac <HAL_RCC_GetSysClockFreq>
 80017a4:	4b09      	ldr	r3, [pc, #36]	; (80017cc <HAL_RCC_ClockConfig+0x14c>)
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80017ac:	4a08      	ldr	r2, [pc, #32]	; (80017d0 <HAL_RCC_ClockConfig+0x150>)
 80017ae:	5cd3      	ldrb	r3, [r2, r3]
 80017b0:	40d8      	lsrs	r0, r3
 80017b2:	4b08      	ldr	r3, [pc, #32]	; (80017d4 <HAL_RCC_ClockConfig+0x154>)
 80017b4:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80017b6:	2000      	movs	r0, #0
 80017b8:	f00b f8a6 	bl	800c908 <HAL_InitTick>
  return HAL_OK;
 80017bc:	2000      	movs	r0, #0
 80017be:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80017c0:	2001      	movs	r0, #1
 80017c2:	4770      	bx	lr
        return HAL_ERROR;
 80017c4:	2001      	movs	r0, #1
 80017c6:	bd70      	pop	{r4, r5, r6, pc}
 80017c8:	40023c00 	.word	0x40023c00
 80017cc:	40023800 	.word	0x40023800
 80017d0:	0800f3c0 	.word	0x0800f3c0
 80017d4:	20000010 	.word	0x20000010

080017d8 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80017d8:	4b01      	ldr	r3, [pc, #4]	; (80017e0 <HAL_RCC_GetHCLKFreq+0x8>)
 80017da:	6818      	ldr	r0, [r3, #0]
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	20000010 	.word	0x20000010

080017e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80017e4:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80017e6:	f7ff fff7 	bl	80017d8 <HAL_RCC_GetHCLKFreq>
 80017ea:	4b04      	ldr	r3, [pc, #16]	; (80017fc <HAL_RCC_GetPCLK1Freq+0x18>)
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80017f2:	4a03      	ldr	r2, [pc, #12]	; (8001800 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80017f4:	5cd3      	ldrb	r3, [r2, r3]
}
 80017f6:	40d8      	lsrs	r0, r3
 80017f8:	bd08      	pop	{r3, pc}
 80017fa:	bf00      	nop
 80017fc:	40023800 	.word	0x40023800
 8001800:	0800f3d0 	.word	0x0800f3d0

08001804 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001804:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001806:	f7ff ffe7 	bl	80017d8 <HAL_RCC_GetHCLKFreq>
 800180a:	4b04      	ldr	r3, [pc, #16]	; (800181c <HAL_RCC_GetPCLK2Freq+0x18>)
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001812:	4a03      	ldr	r2, [pc, #12]	; (8001820 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001814:	5cd3      	ldrb	r3, [r2, r3]
}
 8001816:	40d8      	lsrs	r0, r3
 8001818:	bd08      	pop	{r3, pc}
 800181a:	bf00      	nop
 800181c:	40023800 	.word	0x40023800
 8001820:	0800f3d0 	.word	0x0800f3d0

08001824 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001824:	230f      	movs	r3, #15
 8001826:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001828:	4b0b      	ldr	r3, [pc, #44]	; (8001858 <HAL_RCC_GetClockConfig+0x34>)
 800182a:	689a      	ldr	r2, [r3, #8]
 800182c:	f002 0203 	and.w	r2, r2, #3
 8001830:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001832:	689a      	ldr	r2, [r3, #8]
 8001834:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8001838:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800183a:	689a      	ldr	r2, [r3, #8]
 800183c:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8001840:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	08db      	lsrs	r3, r3, #3
 8001846:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800184a:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800184c:	4b03      	ldr	r3, [pc, #12]	; (800185c <HAL_RCC_GetClockConfig+0x38>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f003 030f 	and.w	r3, r3, #15
 8001854:	600b      	str	r3, [r1, #0]
 8001856:	4770      	bx	lr
 8001858:	40023800 	.word	0x40023800
 800185c:	40023c00 	.word	0x40023c00

08001860 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001860:	4770      	bx	lr

08001862 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001862:	6802      	ldr	r2, [r0, #0]
 8001864:	68d3      	ldr	r3, [r2, #12]
 8001866:	f043 0301 	orr.w	r3, r3, #1
 800186a:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800186c:	6802      	ldr	r2, [r0, #0]
 800186e:	6893      	ldr	r3, [r2, #8]
 8001870:	f003 0307 	and.w	r3, r3, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001874:	2b06      	cmp	r3, #6
 8001876:	d003      	beq.n	8001880 <HAL_TIM_Base_Start_IT+0x1e>
  {
    __HAL_TIM_ENABLE(htim);
 8001878:	6813      	ldr	r3, [r2, #0]
 800187a:	f043 0301 	orr.w	r3, r3, #1
 800187e:	6013      	str	r3, [r2, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 8001880:	2000      	movs	r0, #0
 8001882:	4770      	bx	lr

08001884 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001884:	4770      	bx	lr

08001886 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001886:	4770      	bx	lr

08001888 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001888:	4770      	bx	lr

0800188a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800188a:	4770      	bx	lr

0800188c <HAL_TIM_IRQHandler>:
{
 800188c:	b510      	push	{r4, lr}
 800188e:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001890:	6803      	ldr	r3, [r0, #0]
 8001892:	691a      	ldr	r2, [r3, #16]
 8001894:	f012 0f02 	tst.w	r2, #2
 8001898:	d011      	beq.n	80018be <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800189a:	68da      	ldr	r2, [r3, #12]
 800189c:	f012 0f02 	tst.w	r2, #2
 80018a0:	d00d      	beq.n	80018be <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80018a2:	f06f 0202 	mvn.w	r2, #2
 80018a6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80018a8:	2301      	movs	r3, #1
 80018aa:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80018ac:	6803      	ldr	r3, [r0, #0]
 80018ae:	699b      	ldr	r3, [r3, #24]
 80018b0:	f013 0f03 	tst.w	r3, #3
 80018b4:	d070      	beq.n	8001998 <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 80018b6:	f7ff ffe6 	bl	8001886 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018ba:	2300      	movs	r3, #0
 80018bc:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80018be:	6823      	ldr	r3, [r4, #0]
 80018c0:	691a      	ldr	r2, [r3, #16]
 80018c2:	f012 0f04 	tst.w	r2, #4
 80018c6:	d012      	beq.n	80018ee <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80018c8:	68da      	ldr	r2, [r3, #12]
 80018ca:	f012 0f04 	tst.w	r2, #4
 80018ce:	d00e      	beq.n	80018ee <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80018d0:	f06f 0204 	mvn.w	r2, #4
 80018d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80018d6:	2302      	movs	r3, #2
 80018d8:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80018da:	6823      	ldr	r3, [r4, #0]
 80018dc:	699b      	ldr	r3, [r3, #24]
 80018de:	f413 7f40 	tst.w	r3, #768	; 0x300
 80018e2:	d05f      	beq.n	80019a4 <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 80018e4:	4620      	mov	r0, r4
 80018e6:	f7ff ffce 	bl	8001886 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018ea:	2300      	movs	r3, #0
 80018ec:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80018ee:	6823      	ldr	r3, [r4, #0]
 80018f0:	691a      	ldr	r2, [r3, #16]
 80018f2:	f012 0f08 	tst.w	r2, #8
 80018f6:	d012      	beq.n	800191e <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80018f8:	68da      	ldr	r2, [r3, #12]
 80018fa:	f012 0f08 	tst.w	r2, #8
 80018fe:	d00e      	beq.n	800191e <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001900:	f06f 0208 	mvn.w	r2, #8
 8001904:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001906:	2304      	movs	r3, #4
 8001908:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800190a:	6823      	ldr	r3, [r4, #0]
 800190c:	69db      	ldr	r3, [r3, #28]
 800190e:	f013 0f03 	tst.w	r3, #3
 8001912:	d04e      	beq.n	80019b2 <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 8001914:	4620      	mov	r0, r4
 8001916:	f7ff ffb6 	bl	8001886 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800191a:	2300      	movs	r3, #0
 800191c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800191e:	6823      	ldr	r3, [r4, #0]
 8001920:	691a      	ldr	r2, [r3, #16]
 8001922:	f012 0f10 	tst.w	r2, #16
 8001926:	d012      	beq.n	800194e <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001928:	68da      	ldr	r2, [r3, #12]
 800192a:	f012 0f10 	tst.w	r2, #16
 800192e:	d00e      	beq.n	800194e <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001930:	f06f 0210 	mvn.w	r2, #16
 8001934:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001936:	2308      	movs	r3, #8
 8001938:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800193a:	6823      	ldr	r3, [r4, #0]
 800193c:	69db      	ldr	r3, [r3, #28]
 800193e:	f413 7f40 	tst.w	r3, #768	; 0x300
 8001942:	d03d      	beq.n	80019c0 <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 8001944:	4620      	mov	r0, r4
 8001946:	f7ff ff9e 	bl	8001886 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800194a:	2300      	movs	r3, #0
 800194c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800194e:	6823      	ldr	r3, [r4, #0]
 8001950:	691a      	ldr	r2, [r3, #16]
 8001952:	f012 0f01 	tst.w	r2, #1
 8001956:	d003      	beq.n	8001960 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001958:	68da      	ldr	r2, [r3, #12]
 800195a:	f012 0f01 	tst.w	r2, #1
 800195e:	d136      	bne.n	80019ce <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001960:	6823      	ldr	r3, [r4, #0]
 8001962:	691a      	ldr	r2, [r3, #16]
 8001964:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001968:	d003      	beq.n	8001972 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800196a:	68da      	ldr	r2, [r3, #12]
 800196c:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001970:	d134      	bne.n	80019dc <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001972:	6823      	ldr	r3, [r4, #0]
 8001974:	691a      	ldr	r2, [r3, #16]
 8001976:	f012 0f40 	tst.w	r2, #64	; 0x40
 800197a:	d003      	beq.n	8001984 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800197c:	68da      	ldr	r2, [r3, #12]
 800197e:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001982:	d132      	bne.n	80019ea <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001984:	6823      	ldr	r3, [r4, #0]
 8001986:	691a      	ldr	r2, [r3, #16]
 8001988:	f012 0f20 	tst.w	r2, #32
 800198c:	d003      	beq.n	8001996 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800198e:	68da      	ldr	r2, [r3, #12]
 8001990:	f012 0f20 	tst.w	r2, #32
 8001994:	d130      	bne.n	80019f8 <HAL_TIM_IRQHandler+0x16c>
 8001996:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001998:	f7ff ff74 	bl	8001884 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800199c:	4620      	mov	r0, r4
 800199e:	f7ff ff73 	bl	8001888 <HAL_TIM_PWM_PulseFinishedCallback>
 80019a2:	e78a      	b.n	80018ba <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80019a4:	4620      	mov	r0, r4
 80019a6:	f7ff ff6d 	bl	8001884 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019aa:	4620      	mov	r0, r4
 80019ac:	f7ff ff6c 	bl	8001888 <HAL_TIM_PWM_PulseFinishedCallback>
 80019b0:	e79b      	b.n	80018ea <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80019b2:	4620      	mov	r0, r4
 80019b4:	f7ff ff66 	bl	8001884 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019b8:	4620      	mov	r0, r4
 80019ba:	f7ff ff65 	bl	8001888 <HAL_TIM_PWM_PulseFinishedCallback>
 80019be:	e7ac      	b.n	800191a <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80019c0:	4620      	mov	r0, r4
 80019c2:	f7ff ff5f 	bl	8001884 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019c6:	4620      	mov	r0, r4
 80019c8:	f7ff ff5e 	bl	8001888 <HAL_TIM_PWM_PulseFinishedCallback>
 80019cc:	e7bd      	b.n	800194a <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80019ce:	f06f 0201 	mvn.w	r2, #1
 80019d2:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80019d4:	4620      	mov	r0, r4
 80019d6:	f00a ff5f 	bl	800c898 <HAL_TIM_PeriodElapsedCallback>
 80019da:	e7c1      	b.n	8001960 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80019dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80019e0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80019e2:	4620      	mov	r0, r4
 80019e4:	f000 f890 	bl	8001b08 <HAL_TIMEx_BreakCallback>
 80019e8:	e7c3      	b.n	8001972 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80019ea:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80019ee:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80019f0:	4620      	mov	r0, r4
 80019f2:	f7ff ff4a 	bl	800188a <HAL_TIM_TriggerCallback>
 80019f6:	e7c5      	b.n	8001984 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80019f8:	f06f 0220 	mvn.w	r2, #32
 80019fc:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80019fe:	4620      	mov	r0, r4
 8001a00:	f000 f881 	bl	8001b06 <HAL_TIMEx_CommutCallback>
}
 8001a04:	e7c7      	b.n	8001996 <HAL_TIM_IRQHandler+0x10a>
	...

08001a08 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001a08:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001a0a:	4a31      	ldr	r2, [pc, #196]	; (8001ad0 <TIM_Base_SetConfig+0xc8>)
 8001a0c:	4290      	cmp	r0, r2
 8001a0e:	d012      	beq.n	8001a36 <TIM_Base_SetConfig+0x2e>
 8001a10:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001a14:	d00f      	beq.n	8001a36 <TIM_Base_SetConfig+0x2e>
 8001a16:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001a1a:	4290      	cmp	r0, r2
 8001a1c:	d00b      	beq.n	8001a36 <TIM_Base_SetConfig+0x2e>
 8001a1e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a22:	4290      	cmp	r0, r2
 8001a24:	d007      	beq.n	8001a36 <TIM_Base_SetConfig+0x2e>
 8001a26:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a2a:	4290      	cmp	r0, r2
 8001a2c:	d003      	beq.n	8001a36 <TIM_Base_SetConfig+0x2e>
 8001a2e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001a32:	4290      	cmp	r0, r2
 8001a34:	d103      	bne.n	8001a3e <TIM_Base_SetConfig+0x36>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001a36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001a3a:	684a      	ldr	r2, [r1, #4]
 8001a3c:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001a3e:	4a24      	ldr	r2, [pc, #144]	; (8001ad0 <TIM_Base_SetConfig+0xc8>)
 8001a40:	4290      	cmp	r0, r2
 8001a42:	d02a      	beq.n	8001a9a <TIM_Base_SetConfig+0x92>
 8001a44:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001a48:	d027      	beq.n	8001a9a <TIM_Base_SetConfig+0x92>
 8001a4a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001a4e:	4290      	cmp	r0, r2
 8001a50:	d023      	beq.n	8001a9a <TIM_Base_SetConfig+0x92>
 8001a52:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a56:	4290      	cmp	r0, r2
 8001a58:	d01f      	beq.n	8001a9a <TIM_Base_SetConfig+0x92>
 8001a5a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a5e:	4290      	cmp	r0, r2
 8001a60:	d01b      	beq.n	8001a9a <TIM_Base_SetConfig+0x92>
 8001a62:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001a66:	4290      	cmp	r0, r2
 8001a68:	d017      	beq.n	8001a9a <TIM_Base_SetConfig+0x92>
 8001a6a:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8001a6e:	4290      	cmp	r0, r2
 8001a70:	d013      	beq.n	8001a9a <TIM_Base_SetConfig+0x92>
 8001a72:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a76:	4290      	cmp	r0, r2
 8001a78:	d00f      	beq.n	8001a9a <TIM_Base_SetConfig+0x92>
 8001a7a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a7e:	4290      	cmp	r0, r2
 8001a80:	d00b      	beq.n	8001a9a <TIM_Base_SetConfig+0x92>
 8001a82:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8001a86:	4290      	cmp	r0, r2
 8001a88:	d007      	beq.n	8001a9a <TIM_Base_SetConfig+0x92>
 8001a8a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a8e:	4290      	cmp	r0, r2
 8001a90:	d003      	beq.n	8001a9a <TIM_Base_SetConfig+0x92>
 8001a92:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a96:	4290      	cmp	r0, r2
 8001a98:	d103      	bne.n	8001aa2 <TIM_Base_SetConfig+0x9a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001a9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001a9e:	68ca      	ldr	r2, [r1, #12]
 8001aa0:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001aa2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001aa6:	694a      	ldr	r2, [r1, #20]
 8001aa8:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8001aaa:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001aac:	688b      	ldr	r3, [r1, #8]
 8001aae:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001ab0:	680b      	ldr	r3, [r1, #0]
 8001ab2:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001ab4:	4b06      	ldr	r3, [pc, #24]	; (8001ad0 <TIM_Base_SetConfig+0xc8>)
 8001ab6:	4298      	cmp	r0, r3
 8001ab8:	d006      	beq.n	8001ac8 <TIM_Base_SetConfig+0xc0>
 8001aba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001abe:	4298      	cmp	r0, r3
 8001ac0:	d002      	beq.n	8001ac8 <TIM_Base_SetConfig+0xc0>
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	6143      	str	r3, [r0, #20]
 8001ac6:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8001ac8:	690b      	ldr	r3, [r1, #16]
 8001aca:	6303      	str	r3, [r0, #48]	; 0x30
 8001acc:	e7f9      	b.n	8001ac2 <TIM_Base_SetConfig+0xba>
 8001ace:	bf00      	nop
 8001ad0:	40010000 	.word	0x40010000

08001ad4 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8001ad4:	b1a8      	cbz	r0, 8001b02 <HAL_TIM_Base_Init+0x2e>
{
 8001ad6:	b510      	push	{r4, lr}
 8001ad8:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8001ada:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001ade:	b15b      	cbz	r3, 8001af8 <HAL_TIM_Base_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 8001ae0:	2302      	movs	r3, #2
 8001ae2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ae6:	1d21      	adds	r1, r4, #4
 8001ae8:	6820      	ldr	r0, [r4, #0]
 8001aea:	f7ff ff8d 	bl	8001a08 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8001aee:	2301      	movs	r3, #1
 8001af0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001af4:	2000      	movs	r0, #0
 8001af6:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8001af8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001afc:	f7ff feb0 	bl	8001860 <HAL_TIM_Base_MspInit>
 8001b00:	e7ee      	b.n	8001ae0 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8001b02:	2001      	movs	r0, #1
 8001b04:	4770      	bx	lr

08001b06 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001b06:	4770      	bx	lr

08001b08 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001b08:	4770      	bx	lr
	...

08001b0c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001b0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001b10:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001b12:	6802      	ldr	r2, [r0, #0]
 8001b14:	6913      	ldr	r3, [r2, #16]
 8001b16:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b1a:	68c1      	ldr	r1, [r0, #12]
 8001b1c:	430b      	orrs	r3, r1
 8001b1e:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001b20:	6883      	ldr	r3, [r0, #8]
 8001b22:	6902      	ldr	r2, [r0, #16]
 8001b24:	4313      	orrs	r3, r2
 8001b26:	6942      	ldr	r2, [r0, #20]
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	69c2      	ldr	r2, [r0, #28]
 8001b2c:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1,
 8001b2e:	6801      	ldr	r1, [r0, #0]
 8001b30:	68ca      	ldr	r2, [r1, #12]
 8001b32:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
 8001b36:	f022 020c 	bic.w	r2, r2, #12
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001b3e:	6802      	ldr	r2, [r0, #0]
 8001b40:	6953      	ldr	r3, [r2, #20]
 8001b42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b46:	6981      	ldr	r1, [r0, #24]
 8001b48:	430b      	orrs	r3, r1
 8001b4a:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001b4c:	69c3      	ldr	r3, [r0, #28]
 8001b4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b52:	d062      	beq.n	8001c1a <UART_SetConfig+0x10e>
  }
  else
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001b54:	f8d0 8000 	ldr.w	r8, [r0]
 8001b58:	4bbb      	ldr	r3, [pc, #748]	; (8001e48 <UART_SetConfig+0x33c>)
 8001b5a:	4598      	cmp	r8, r3
 8001b5c:	f000 811b 	beq.w	8001d96 <UART_SetConfig+0x28a>
 8001b60:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001b64:	4598      	cmp	r8, r3
 8001b66:	f000 8116 	beq.w	8001d96 <UART_SetConfig+0x28a>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001b6a:	f7ff fe3b 	bl	80017e4 <HAL_RCC_GetPCLK1Freq>
 8001b6e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001b72:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001b76:	6865      	ldr	r5, [r4, #4]
 8001b78:	00ad      	lsls	r5, r5, #2
 8001b7a:	fbb0 f5f5 	udiv	r5, r0, r5
 8001b7e:	4fb3      	ldr	r7, [pc, #716]	; (8001e4c <UART_SetConfig+0x340>)
 8001b80:	fba7 3505 	umull	r3, r5, r7, r5
 8001b84:	096d      	lsrs	r5, r5, #5
 8001b86:	012e      	lsls	r6, r5, #4
 8001b88:	f7ff fe2c 	bl	80017e4 <HAL_RCC_GetPCLK1Freq>
 8001b8c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001b90:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001b94:	6865      	ldr	r5, [r4, #4]
 8001b96:	00ad      	lsls	r5, r5, #2
 8001b98:	fbb0 faf5 	udiv	sl, r0, r5
 8001b9c:	f7ff fe22 	bl	80017e4 <HAL_RCC_GetPCLK1Freq>
 8001ba0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001ba4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001ba8:	6865      	ldr	r5, [r4, #4]
 8001baa:	00ad      	lsls	r5, r5, #2
 8001bac:	fbb0 f5f5 	udiv	r5, r0, r5
 8001bb0:	fba7 3505 	umull	r3, r5, r7, r5
 8001bb4:	096d      	lsrs	r5, r5, #5
 8001bb6:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001bba:	fb09 a515 	mls	r5, r9, r5, sl
 8001bbe:	012d      	lsls	r5, r5, #4
 8001bc0:	3532      	adds	r5, #50	; 0x32
 8001bc2:	fba7 3505 	umull	r3, r5, r7, r5
 8001bc6:	096d      	lsrs	r5, r5, #5
 8001bc8:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 8001bcc:	4435      	add	r5, r6
 8001bce:	f7ff fe09 	bl	80017e4 <HAL_RCC_GetPCLK1Freq>
 8001bd2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001bd6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001bda:	6866      	ldr	r6, [r4, #4]
 8001bdc:	00b6      	lsls	r6, r6, #2
 8001bde:	fbb0 f6f6 	udiv	r6, r0, r6
 8001be2:	f7ff fdff 	bl	80017e4 <HAL_RCC_GetPCLK1Freq>
 8001be6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001bea:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001bee:	6863      	ldr	r3, [r4, #4]
 8001bf0:	009b      	lsls	r3, r3, #2
 8001bf2:	fbb0 f0f3 	udiv	r0, r0, r3
 8001bf6:	fba7 3000 	umull	r3, r0, r7, r0
 8001bfa:	0940      	lsrs	r0, r0, #5
 8001bfc:	fb09 6910 	mls	r9, r9, r0, r6
 8001c00:	ea4f 1909 	mov.w	r9, r9, lsl #4
 8001c04:	f109 0932 	add.w	r9, r9, #50	; 0x32
 8001c08:	fba7 3709 	umull	r3, r7, r7, r9
 8001c0c:	f3c7 1743 	ubfx	r7, r7, #5, #4
 8001c10:	442f      	add	r7, r5
 8001c12:	f8c8 7008 	str.w	r7, [r8, #8]
 8001c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001c1a:	f8d0 8000 	ldr.w	r8, [r0]
 8001c1e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001c22:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
 8001c26:	4598      	cmp	r8, r3
 8001c28:	d05c      	beq.n	8001ce4 <UART_SetConfig+0x1d8>
 8001c2a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c2e:	4598      	cmp	r8, r3
 8001c30:	d058      	beq.n	8001ce4 <UART_SetConfig+0x1d8>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001c32:	f7ff fdd7 	bl	80017e4 <HAL_RCC_GetPCLK1Freq>
 8001c36:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001c3a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001c3e:	6865      	ldr	r5, [r4, #4]
 8001c40:	006d      	lsls	r5, r5, #1
 8001c42:	fbb0 f5f5 	udiv	r5, r0, r5
 8001c46:	4f81      	ldr	r7, [pc, #516]	; (8001e4c <UART_SetConfig+0x340>)
 8001c48:	fba7 3505 	umull	r3, r5, r7, r5
 8001c4c:	096d      	lsrs	r5, r5, #5
 8001c4e:	012e      	lsls	r6, r5, #4
 8001c50:	f7ff fdc8 	bl	80017e4 <HAL_RCC_GetPCLK1Freq>
 8001c54:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001c58:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001c5c:	6865      	ldr	r5, [r4, #4]
 8001c5e:	006d      	lsls	r5, r5, #1
 8001c60:	fbb0 faf5 	udiv	sl, r0, r5
 8001c64:	f7ff fdbe 	bl	80017e4 <HAL_RCC_GetPCLK1Freq>
 8001c68:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001c6c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001c70:	6865      	ldr	r5, [r4, #4]
 8001c72:	006d      	lsls	r5, r5, #1
 8001c74:	fbb0 f5f5 	udiv	r5, r0, r5
 8001c78:	fba7 3505 	umull	r3, r5, r7, r5
 8001c7c:	096d      	lsrs	r5, r5, #5
 8001c7e:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001c82:	fb09 a515 	mls	r5, r9, r5, sl
 8001c86:	00ed      	lsls	r5, r5, #3
 8001c88:	3532      	adds	r5, #50	; 0x32
 8001c8a:	fba7 3505 	umull	r3, r5, r7, r5
 8001c8e:	096d      	lsrs	r5, r5, #5
 8001c90:	006d      	lsls	r5, r5, #1
 8001c92:	f405 75f8 	and.w	r5, r5, #496	; 0x1f0
 8001c96:	4435      	add	r5, r6
 8001c98:	f7ff fda4 	bl	80017e4 <HAL_RCC_GetPCLK1Freq>
 8001c9c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001ca0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001ca4:	6866      	ldr	r6, [r4, #4]
 8001ca6:	0076      	lsls	r6, r6, #1
 8001ca8:	fbb0 f6f6 	udiv	r6, r0, r6
 8001cac:	f7ff fd9a 	bl	80017e4 <HAL_RCC_GetPCLK1Freq>
 8001cb0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001cb4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001cb8:	6863      	ldr	r3, [r4, #4]
 8001cba:	005b      	lsls	r3, r3, #1
 8001cbc:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cc0:	fba7 2303 	umull	r2, r3, r7, r3
 8001cc4:	095b      	lsrs	r3, r3, #5
 8001cc6:	fb09 6913 	mls	r9, r9, r3, r6
 8001cca:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 8001cce:	f109 0932 	add.w	r9, r9, #50	; 0x32
 8001cd2:	fba7 3709 	umull	r3, r7, r7, r9
 8001cd6:	f3c7 1742 	ubfx	r7, r7, #5, #3
 8001cda:	442f      	add	r7, r5
 8001cdc:	f8c8 7008 	str.w	r7, [r8, #8]
 8001ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001ce4:	f7ff fd8e 	bl	8001804 <HAL_RCC_GetPCLK2Freq>
 8001ce8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001cec:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001cf0:	6865      	ldr	r5, [r4, #4]
 8001cf2:	006d      	lsls	r5, r5, #1
 8001cf4:	fbb0 f5f5 	udiv	r5, r0, r5
 8001cf8:	4f54      	ldr	r7, [pc, #336]	; (8001e4c <UART_SetConfig+0x340>)
 8001cfa:	fba7 3505 	umull	r3, r5, r7, r5
 8001cfe:	096d      	lsrs	r5, r5, #5
 8001d00:	012e      	lsls	r6, r5, #4
 8001d02:	f7ff fd7f 	bl	8001804 <HAL_RCC_GetPCLK2Freq>
 8001d06:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001d0a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001d0e:	6865      	ldr	r5, [r4, #4]
 8001d10:	006d      	lsls	r5, r5, #1
 8001d12:	fbb0 faf5 	udiv	sl, r0, r5
 8001d16:	f7ff fd75 	bl	8001804 <HAL_RCC_GetPCLK2Freq>
 8001d1a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001d1e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001d22:	6865      	ldr	r5, [r4, #4]
 8001d24:	006d      	lsls	r5, r5, #1
 8001d26:	fbb0 f5f5 	udiv	r5, r0, r5
 8001d2a:	fba7 3505 	umull	r3, r5, r7, r5
 8001d2e:	096d      	lsrs	r5, r5, #5
 8001d30:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001d34:	fb09 a515 	mls	r5, r9, r5, sl
 8001d38:	00ed      	lsls	r5, r5, #3
 8001d3a:	3532      	adds	r5, #50	; 0x32
 8001d3c:	fba7 3505 	umull	r3, r5, r7, r5
 8001d40:	096d      	lsrs	r5, r5, #5
 8001d42:	006d      	lsls	r5, r5, #1
 8001d44:	f405 75f8 	and.w	r5, r5, #496	; 0x1f0
 8001d48:	4435      	add	r5, r6
 8001d4a:	f7ff fd5b 	bl	8001804 <HAL_RCC_GetPCLK2Freq>
 8001d4e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001d52:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001d56:	6866      	ldr	r6, [r4, #4]
 8001d58:	0076      	lsls	r6, r6, #1
 8001d5a:	fbb0 f6f6 	udiv	r6, r0, r6
 8001d5e:	f7ff fd51 	bl	8001804 <HAL_RCC_GetPCLK2Freq>
 8001d62:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001d66:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001d6a:	6863      	ldr	r3, [r4, #4]
 8001d6c:	005b      	lsls	r3, r3, #1
 8001d6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d72:	fba7 2303 	umull	r2, r3, r7, r3
 8001d76:	095b      	lsrs	r3, r3, #5
 8001d78:	fb09 6913 	mls	r9, r9, r3, r6
 8001d7c:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 8001d80:	f109 0932 	add.w	r9, r9, #50	; 0x32
 8001d84:	fba7 3709 	umull	r3, r7, r7, r9
 8001d88:	f3c7 1742 	ubfx	r7, r7, #5, #3
 8001d8c:	442f      	add	r7, r5
 8001d8e:	f8c8 7008 	str.w	r7, [r8, #8]
 8001d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001d96:	f7ff fd35 	bl	8001804 <HAL_RCC_GetPCLK2Freq>
 8001d9a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001d9e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001da2:	6865      	ldr	r5, [r4, #4]
 8001da4:	00ad      	lsls	r5, r5, #2
 8001da6:	fbb0 f5f5 	udiv	r5, r0, r5
 8001daa:	4f28      	ldr	r7, [pc, #160]	; (8001e4c <UART_SetConfig+0x340>)
 8001dac:	fba7 3505 	umull	r3, r5, r7, r5
 8001db0:	096d      	lsrs	r5, r5, #5
 8001db2:	012e      	lsls	r6, r5, #4
 8001db4:	f7ff fd26 	bl	8001804 <HAL_RCC_GetPCLK2Freq>
 8001db8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001dbc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001dc0:	6865      	ldr	r5, [r4, #4]
 8001dc2:	00ad      	lsls	r5, r5, #2
 8001dc4:	fbb0 faf5 	udiv	sl, r0, r5
 8001dc8:	f7ff fd1c 	bl	8001804 <HAL_RCC_GetPCLK2Freq>
 8001dcc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001dd0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001dd4:	6865      	ldr	r5, [r4, #4]
 8001dd6:	00ad      	lsls	r5, r5, #2
 8001dd8:	fbb0 f5f5 	udiv	r5, r0, r5
 8001ddc:	fba7 3505 	umull	r3, r5, r7, r5
 8001de0:	096d      	lsrs	r5, r5, #5
 8001de2:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001de6:	fb09 a515 	mls	r5, r9, r5, sl
 8001dea:	012d      	lsls	r5, r5, #4
 8001dec:	3532      	adds	r5, #50	; 0x32
 8001dee:	fba7 3505 	umull	r3, r5, r7, r5
 8001df2:	096d      	lsrs	r5, r5, #5
 8001df4:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 8001df8:	4435      	add	r5, r6
 8001dfa:	f7ff fd03 	bl	8001804 <HAL_RCC_GetPCLK2Freq>
 8001dfe:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001e02:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001e06:	6866      	ldr	r6, [r4, #4]
 8001e08:	00b6      	lsls	r6, r6, #2
 8001e0a:	fbb0 f6f6 	udiv	r6, r0, r6
 8001e0e:	f7ff fcf9 	bl	8001804 <HAL_RCC_GetPCLK2Freq>
 8001e12:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001e16:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001e1a:	6863      	ldr	r3, [r4, #4]
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e22:	fba7 2303 	umull	r2, r3, r7, r3
 8001e26:	095b      	lsrs	r3, r3, #5
 8001e28:	fb09 6913 	mls	r9, r9, r3, r6
 8001e2c:	ea4f 1909 	mov.w	r9, r9, lsl #4
 8001e30:	f109 0932 	add.w	r9, r9, #50	; 0x32
 8001e34:	fba7 3709 	umull	r3, r7, r7, r9
 8001e38:	f3c7 1743 	ubfx	r7, r7, #5, #4
 8001e3c:	442f      	add	r7, r5
 8001e3e:	f8c8 7008 	str.w	r7, [r8, #8]
 8001e42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001e46:	bf00      	nop
 8001e48:	40011000 	.word	0x40011000
 8001e4c:	51eb851f 	.word	0x51eb851f

08001e50 <HAL_UART_Init>:
  if (huart == NULL)
 8001e50:	b358      	cbz	r0, 8001eaa <HAL_UART_Init+0x5a>
{
 8001e52:	b510      	push	{r4, lr}
 8001e54:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8001e56:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001e5a:	b30b      	cbz	r3, 8001ea0 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8001e5c:	2324      	movs	r3, #36	; 0x24
 8001e5e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001e62:	6822      	ldr	r2, [r4, #0]
 8001e64:	68d3      	ldr	r3, [r2, #12]
 8001e66:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001e6a:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001e6c:	4620      	mov	r0, r4
 8001e6e:	f7ff fe4d 	bl	8001b0c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e72:	6822      	ldr	r2, [r4, #0]
 8001e74:	6913      	ldr	r3, [r2, #16]
 8001e76:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001e7a:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e7c:	6822      	ldr	r2, [r4, #0]
 8001e7e:	6953      	ldr	r3, [r2, #20]
 8001e80:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8001e84:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8001e86:	6822      	ldr	r2, [r4, #0]
 8001e88:	68d3      	ldr	r3, [r2, #12]
 8001e8a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001e8e:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e90:	2000      	movs	r0, #0
 8001e92:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001e94:	2320      	movs	r3, #32
 8001e96:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001e9a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8001e9e:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8001ea0:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001ea4:	f00a ff18 	bl	800ccd8 <HAL_UART_MspInit>
 8001ea8:	e7d8      	b.n	8001e5c <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8001eaa:	2001      	movs	r0, #1
 8001eac:	4770      	bx	lr
	...

08001eb0 <USB_CoreReset>:
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t count = 0U;
 8001eb0:	2300      	movs	r3, #0

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	4a0c      	ldr	r2, [pc, #48]	; (8001ee8 <USB_CoreReset+0x38>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d811      	bhi.n	8001ede <USB_CoreReset+0x2e>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8001eba:	6902      	ldr	r2, [r0, #16]
 8001ebc:	2a00      	cmp	r2, #0
 8001ebe:	daf8      	bge.n	8001eb2 <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8001ec0:	6903      	ldr	r3, [r0, #16]
 8001ec2:	f043 0301 	orr.w	r3, r3, #1
 8001ec6:	6103      	str	r3, [r0, #16]
  count = 0U;
 8001ec8:	2300      	movs	r3, #0

  do
  {
    if (++count > 200000U)
 8001eca:	3301      	adds	r3, #1
 8001ecc:	4a06      	ldr	r2, [pc, #24]	; (8001ee8 <USB_CoreReset+0x38>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d807      	bhi.n	8001ee2 <USB_CoreReset+0x32>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8001ed2:	6902      	ldr	r2, [r0, #16]
 8001ed4:	f012 0f01 	tst.w	r2, #1
 8001ed8:	d1f7      	bne.n	8001eca <USB_CoreReset+0x1a>

  return HAL_OK;
 8001eda:	2000      	movs	r0, #0
 8001edc:	4770      	bx	lr
      return HAL_TIMEOUT;
 8001ede:	2003      	movs	r0, #3
 8001ee0:	4770      	bx	lr
      return HAL_TIMEOUT;
 8001ee2:	2003      	movs	r0, #3
}
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	00030d40 	.word	0x00030d40

08001eec <USB_CoreInit>:
{
 8001eec:	b084      	sub	sp, #16
 8001eee:	b510      	push	{r4, lr}
 8001ef0:	4604      	mov	r4, r0
 8001ef2:	a803      	add	r0, sp, #12
 8001ef4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8001ef8:	9b08      	ldr	r3, [sp, #32]
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d00d      	beq.n	8001f1a <USB_CoreInit+0x2e>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8001efe:	68e3      	ldr	r3, [r4, #12]
 8001f00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f04:	60e3      	str	r3, [r4, #12]
    ret = USB_CoreReset(USBx);
 8001f06:	4620      	mov	r0, r4
 8001f08:	f7ff ffd2 	bl	8001eb0 <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 8001f0c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001f0e:	bb23      	cbnz	r3, 8001f5a <USB_CoreInit+0x6e>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001f10:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001f12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f16:	63a3      	str	r3, [r4, #56]	; 0x38
 8001f18:	e013      	b.n	8001f42 <USB_CoreInit+0x56>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8001f1a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001f1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f20:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8001f22:	68e3      	ldr	r3, [r4, #12]
 8001f24:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8001f28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001f2c:	60e3      	str	r3, [r4, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8001f2e:	68e3      	ldr	r3, [r4, #12]
 8001f30:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8001f34:	60e3      	str	r3, [r4, #12]
    if (cfg.use_external_vbus == 1U)
 8001f36:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d009      	beq.n	8001f50 <USB_CoreInit+0x64>
    ret = USB_CoreReset(USBx);
 8001f3c:	4620      	mov	r0, r4
 8001f3e:	f7ff ffb7 	bl	8001eb0 <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 8001f42:	9b06      	ldr	r3, [sp, #24]
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d00d      	beq.n	8001f64 <USB_CoreInit+0x78>
}
 8001f48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001f4c:	b004      	add	sp, #16
 8001f4e:	4770      	bx	lr
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8001f50:	68e3      	ldr	r3, [r4, #12]
 8001f52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f56:	60e3      	str	r3, [r4, #12]
 8001f58:	e7f0      	b.n	8001f3c <USB_CoreInit+0x50>
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8001f5a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001f5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f60:	63a3      	str	r3, [r4, #56]	; 0x38
 8001f62:	e7ee      	b.n	8001f42 <USB_CoreInit+0x56>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8001f64:	68a3      	ldr	r3, [r4, #8]
 8001f66:	f043 0306 	orr.w	r3, r3, #6
 8001f6a:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8001f6c:	68a3      	ldr	r3, [r4, #8]
 8001f6e:	f043 0320 	orr.w	r3, r3, #32
 8001f72:	60a3      	str	r3, [r4, #8]
 8001f74:	e7e8      	b.n	8001f48 <USB_CoreInit+0x5c>

08001f76 <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8001f76:	6883      	ldr	r3, [r0, #8]
 8001f78:	f023 0301 	bic.w	r3, r3, #1
 8001f7c:	6083      	str	r3, [r0, #8]
}
 8001f7e:	2000      	movs	r0, #0
 8001f80:	4770      	bx	lr

08001f82 <USB_SetCurrentMode>:
{
 8001f82:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8001f84:	68c3      	ldr	r3, [r0, #12]
 8001f86:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8001f8a:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8001f8c:	2901      	cmp	r1, #1
 8001f8e:	d009      	beq.n	8001fa4 <USB_SetCurrentMode+0x22>
  else if (mode == USB_DEVICE_MODE)
 8001f90:	b969      	cbnz	r1, 8001fae <USB_SetCurrentMode+0x2c>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8001f92:	68c3      	ldr	r3, [r0, #12]
 8001f94:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001f98:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 8001f9a:	2032      	movs	r0, #50	; 0x32
 8001f9c:	f7fe fae4 	bl	8000568 <HAL_Delay>
  return HAL_OK;
 8001fa0:	2000      	movs	r0, #0
 8001fa2:	bd08      	pop	{r3, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8001fa4:	68c3      	ldr	r3, [r0, #12]
 8001fa6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001faa:	60c3      	str	r3, [r0, #12]
 8001fac:	e7f5      	b.n	8001f9a <USB_SetCurrentMode+0x18>
    return HAL_ERROR;
 8001fae:	2001      	movs	r0, #1
}
 8001fb0:	bd08      	pop	{r3, pc}
	...

08001fb4 <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8001fb4:	0189      	lsls	r1, r1, #6
 8001fb6:	f041 0120 	orr.w	r1, r1, #32
 8001fba:	6101      	str	r1, [r0, #16]
  uint32_t count = 0U;
 8001fbc:	2300      	movs	r3, #0
    if (++count > 200000U)
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	4a05      	ldr	r2, [pc, #20]	; (8001fd8 <USB_FlushTxFifo+0x24>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d805      	bhi.n	8001fd2 <USB_FlushTxFifo+0x1e>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8001fc6:	6902      	ldr	r2, [r0, #16]
 8001fc8:	f012 0f20 	tst.w	r2, #32
 8001fcc:	d1f7      	bne.n	8001fbe <USB_FlushTxFifo+0xa>
  return HAL_OK;
 8001fce:	2000      	movs	r0, #0
 8001fd0:	4770      	bx	lr
      return HAL_TIMEOUT;
 8001fd2:	2003      	movs	r0, #3
}
 8001fd4:	4770      	bx	lr
 8001fd6:	bf00      	nop
 8001fd8:	00030d40 	.word	0x00030d40

08001fdc <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8001fdc:	2310      	movs	r3, #16
 8001fde:	6103      	str	r3, [r0, #16]
  uint32_t count = 0;
 8001fe0:	2300      	movs	r3, #0
    if (++count > 200000U)
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	4a05      	ldr	r2, [pc, #20]	; (8001ffc <USB_FlushRxFifo+0x20>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d805      	bhi.n	8001ff6 <USB_FlushRxFifo+0x1a>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8001fea:	6902      	ldr	r2, [r0, #16]
 8001fec:	f012 0f10 	tst.w	r2, #16
 8001ff0:	d1f7      	bne.n	8001fe2 <USB_FlushRxFifo+0x6>
  return HAL_OK;
 8001ff2:	2000      	movs	r0, #0
 8001ff4:	4770      	bx	lr
      return HAL_TIMEOUT;
 8001ff6:	2003      	movs	r0, #3
}
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop
 8001ffc:	00030d40 	.word	0x00030d40

08002000 <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 8002000:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8002004:	4319      	orrs	r1, r3
 8002006:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 800200a:	2000      	movs	r0, #0
 800200c:	4770      	bx	lr
	...

08002010 <USB_DevInit>:
{
 8002010:	b084      	sub	sp, #16
 8002012:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002016:	4604      	mov	r4, r0
 8002018:	a807      	add	r0, sp, #28
 800201a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800201e:	4625      	mov	r5, r4
  for (i = 0U; i < 15U; i++)
 8002020:	2300      	movs	r3, #0
 8002022:	e006      	b.n	8002032 <USB_DevInit+0x22>
    USBx->DIEPTXF[i] = 0U;
 8002024:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8002028:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800202c:	2100      	movs	r1, #0
 800202e:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 8002030:	3301      	adds	r3, #1
 8002032:	2b0e      	cmp	r3, #14
 8002034:	d9f6      	bls.n	8002024 <USB_DevInit+0x14>
  if (cfg.vbus_sensing_enable == 0U)
 8002036:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002038:	bb73      	cbnz	r3, 8002098 <USB_DevInit+0x88>
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800203a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800203c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002040:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8002042:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002044:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8002048:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800204a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800204c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002050:	63a3      	str	r3, [r4, #56]	; 0x38
  USBx_PCGCCTL = 0U;
 8002052:	2300      	movs	r3, #0
 8002054:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002058:	f504 6600 	add.w	r6, r4, #2048	; 0x800
 800205c:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 8002060:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002064:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002066:	2b01      	cmp	r3, #1
 8002068:	d01f      	beq.n	80020aa <USB_DevInit+0x9a>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800206a:	2103      	movs	r1, #3
 800206c:	4620      	mov	r0, r4
 800206e:	f7ff ffc7 	bl	8002000 <USB_SetDevSpeed>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002072:	2110      	movs	r1, #16
 8002074:	4620      	mov	r0, r4
 8002076:	f7ff ff9d 	bl	8001fb4 <USB_FlushTxFifo>
 800207a:	4680      	mov	r8, r0
 800207c:	b108      	cbz	r0, 8002082 <USB_DevInit+0x72>
    ret = HAL_ERROR;
 800207e:	f04f 0801 	mov.w	r8, #1
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002082:	4620      	mov	r0, r4
 8002084:	f7ff ffaa 	bl	8001fdc <USB_FlushRxFifo>
 8002088:	b108      	cbz	r0, 800208e <USB_DevInit+0x7e>
    ret = HAL_ERROR;
 800208a:	f04f 0801 	mov.w	r8, #1
  USBx_DEVICE->DIEPMSK = 0U;
 800208e:	2300      	movs	r3, #0
 8002090:	6133      	str	r3, [r6, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002092:	6173      	str	r3, [r6, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8002094:	61f3      	str	r3, [r6, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002096:	e01f      	b.n	80020d8 <USB_DevInit+0xc8>
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8002098:	6823      	ldr	r3, [r4, #0]
 800209a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800209e:	6023      	str	r3, [r4, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80020a0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80020a2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80020a6:	63a3      	str	r3, [r4, #56]	; 0x38
 80020a8:	e7d3      	b.n	8002052 <USB_DevInit+0x42>
    if (cfg.speed == USBD_HS_SPEED)
 80020aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80020ac:	b923      	cbnz	r3, 80020b8 <USB_DevInit+0xa8>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80020ae:	2100      	movs	r1, #0
 80020b0:	4620      	mov	r0, r4
 80020b2:	f7ff ffa5 	bl	8002000 <USB_SetDevSpeed>
 80020b6:	e7dc      	b.n	8002072 <USB_DevInit+0x62>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80020b8:	2101      	movs	r1, #1
 80020ba:	4620      	mov	r0, r4
 80020bc:	f7ff ffa0 	bl	8002000 <USB_SetDevSpeed>
 80020c0:	e7d7      	b.n	8002072 <USB_DevInit+0x62>
      if (i == 0U)
 80020c2:	b9c3      	cbnz	r3, 80020f6 <USB_DevInit+0xe6>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80020c4:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 80020c8:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
    USBx_INEP(i)->DIEPTSIZ = 0U;
 80020cc:	2200      	movs	r2, #0
 80020ce:	610a      	str	r2, [r1, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80020d0:	f64f 327f 	movw	r2, #64383	; 0xfb7f
 80020d4:	608a      	str	r2, [r1, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80020d6:	3301      	adds	r3, #1
 80020d8:	9907      	ldr	r1, [sp, #28]
 80020da:	428b      	cmp	r3, r1
 80020dc:	d210      	bcs.n	8002100 <USB_DevInit+0xf0>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80020de:	eb05 1243 	add.w	r2, r5, r3, lsl #5
 80020e2:	f502 6110 	add.w	r1, r2, #2304	; 0x900
 80020e6:	f8d2 0900 	ldr.w	r0, [r2, #2304]	; 0x900
 80020ea:	2800      	cmp	r0, #0
 80020ec:	dbe9      	blt.n	80020c2 <USB_DevInit+0xb2>
      USBx_INEP(i)->DIEPCTL = 0U;
 80020ee:	2000      	movs	r0, #0
 80020f0:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
 80020f4:	e7ea      	b.n	80020cc <USB_DevInit+0xbc>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80020f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020fa:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
 80020fe:	e7e5      	b.n	80020cc <USB_DevInit+0xbc>
 8002100:	2300      	movs	r3, #0
 8002102:	e00a      	b.n	800211a <USB_DevInit+0x10a>
      if (i == 0U)
 8002104:	b1bb      	cbz	r3, 8002136 <USB_DevInit+0x126>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8002106:	f04f 4790 	mov.w	r7, #1207959552	; 0x48000000
 800210a:	f8c2 7b00 	str.w	r7, [r2, #2816]	; 0xb00
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800210e:	2200      	movs	r2, #0
 8002110:	6102      	str	r2, [r0, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8002112:	f64f 327f 	movw	r2, #64383	; 0xfb7f
 8002116:	6082      	str	r2, [r0, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002118:	3301      	adds	r3, #1
 800211a:	428b      	cmp	r3, r1
 800211c:	d210      	bcs.n	8002140 <USB_DevInit+0x130>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800211e:	eb05 1243 	add.w	r2, r5, r3, lsl #5
 8002122:	f502 6030 	add.w	r0, r2, #2816	; 0xb00
 8002126:	f8d2 7b00 	ldr.w	r7, [r2, #2816]	; 0xb00
 800212a:	2f00      	cmp	r7, #0
 800212c:	dbea      	blt.n	8002104 <USB_DevInit+0xf4>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800212e:	2700      	movs	r7, #0
 8002130:	f8c2 7b00 	str.w	r7, [r2, #2816]	; 0xb00
 8002134:	e7eb      	b.n	800210e <USB_DevInit+0xfe>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002136:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
 800213a:	f8c2 7b00 	str.w	r7, [r2, #2816]	; 0xb00
 800213e:	e7e6      	b.n	800210e <USB_DevInit+0xfe>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002140:	6933      	ldr	r3, [r6, #16]
 8002142:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002146:	6133      	str	r3, [r6, #16]
  if (cfg.dma_enable == 1U)
 8002148:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800214a:	2b01      	cmp	r3, #1
 800214c:	d01b      	beq.n	8002186 <USB_DevInit+0x176>
  USBx->GINTMSK = 0U;
 800214e:	2200      	movs	r2, #0
 8002150:	61a2      	str	r2, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 8002152:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8002156:	6162      	str	r2, [r4, #20]
  if (cfg.dma_enable == 0U)
 8002158:	b91b      	cbnz	r3, 8002162 <USB_DevInit+0x152>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800215a:	69a3      	ldr	r3, [r4, #24]
 800215c:	f043 0310 	orr.w	r3, r3, #16
 8002160:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8002162:	69a2      	ldr	r2, [r4, #24]
 8002164:	4b10      	ldr	r3, [pc, #64]	; (80021a8 <USB_DevInit+0x198>)
 8002166:	4313      	orrs	r3, r2
 8002168:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 800216a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800216c:	b11b      	cbz	r3, 8002176 <USB_DevInit+0x166>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800216e:	69a3      	ldr	r3, [r4, #24]
 8002170:	f043 0308 	orr.w	r3, r3, #8
 8002174:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 8002176:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002178:	2b01      	cmp	r3, #1
 800217a:	d00d      	beq.n	8002198 <USB_DevInit+0x188>
}
 800217c:	4640      	mov	r0, r8
 800217e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002182:	b004      	add	sp, #16
 8002184:	4770      	bx	lr
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 8002186:	4a09      	ldr	r2, [pc, #36]	; (80021ac <USB_DevInit+0x19c>)
 8002188:	6332      	str	r2, [r6, #48]	; 0x30
    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 800218a:	6b32      	ldr	r2, [r6, #48]	; 0x30
 800218c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002190:	f042 0203 	orr.w	r2, r2, #3
 8002194:	6332      	str	r2, [r6, #48]	; 0x30
 8002196:	e7da      	b.n	800214e <USB_DevInit+0x13e>
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8002198:	69a3      	ldr	r3, [r4, #24]
 800219a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800219e:	f043 0304 	orr.w	r3, r3, #4
 80021a2:	61a3      	str	r3, [r4, #24]
 80021a4:	e7ea      	b.n	800217c <USB_DevInit+0x16c>
 80021a6:	bf00      	nop
 80021a8:	803c3800 	.word	0x803c3800
 80021ac:	00800100 	.word	0x00800100

080021b0 <USB_DevDisconnect>:
{
 80021b0:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80021b2:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 80021b6:	f043 0302 	orr.w	r3, r3, #2
 80021ba:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 80021be:	2003      	movs	r0, #3
 80021c0:	f7fe f9d2 	bl	8000568 <HAL_Delay>
}
 80021c4:	2000      	movs	r0, #0
 80021c6:	bd08      	pop	{r3, pc}

080021c8 <makeFreeRtosPriority>:
/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
  
  if (priority != osPriorityError) {
 80021c8:	2884      	cmp	r0, #132	; 0x84
 80021ca:	d001      	beq.n	80021d0 <makeFreeRtosPriority+0x8>
    fpriority += (priority - osPriorityIdle);
 80021cc:	3003      	adds	r0, #3
 80021ce:	4770      	bx	lr
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80021d0:	2000      	movs	r0, #0
  }
  
  return fpriority;
}
 80021d2:	4770      	bx	lr

080021d4 <inHandlerMode>:
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80021d4:	f3ef 8005 	mrs	r0, IPSR

/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
  return __get_IPSR() != 0;
}
 80021d8:	3000      	adds	r0, #0
 80021da:	bf18      	it	ne
 80021dc:	2001      	movne	r0, #1
 80021de:	4770      	bx	lr

080021e0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80021e0:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 80021e2:	f001 fc23 	bl	8003a2c <vTaskStartScheduler>
  
  return osOK;
}
 80021e6:	2000      	movs	r0, #0
 80021e8:	bd08      	pop	{r3, pc}

080021ea <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 80021ea:	b508      	push	{r3, lr}
  if (inHandlerMode()) {
 80021ec:	f7ff fff2 	bl	80021d4 <inHandlerMode>
 80021f0:	b910      	cbnz	r0, 80021f8 <osKernelSysTick+0xe>
    return xTaskGetTickCountFromISR();
  }
  else {
    return xTaskGetTickCount();
 80021f2:	f001 fc5f 	bl	8003ab4 <xTaskGetTickCount>
  }
}
 80021f6:	bd08      	pop	{r3, pc}
    return xTaskGetTickCountFromISR();
 80021f8:	f001 fc62 	bl	8003ac0 <xTaskGetTickCountFromISR>
 80021fc:	bd08      	pop	{r3, pc}

080021fe <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80021fe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002202:	b087      	sub	sp, #28
 8002204:	4604      	mov	r4, r0
 8002206:	460f      	mov	r7, r1
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002208:	6945      	ldr	r5, [r0, #20]
 800220a:	b1bd      	cbz	r5, 800223c <osThreadCreate+0x3e>
 800220c:	6986      	ldr	r6, [r0, #24]
 800220e:	b1ae      	cbz	r6, 800223c <osThreadCreate+0x3e>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002210:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8002214:	f8d0 9000 	ldr.w	r9, [r0]
 8002218:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 800221c:	f7ff ffd4 	bl	80021c8 <makeFreeRtosPriority>
 8002220:	6922      	ldr	r2, [r4, #16]
 8002222:	9602      	str	r6, [sp, #8]
 8002224:	9501      	str	r5, [sp, #4]
 8002226:	9000      	str	r0, [sp, #0]
 8002228:	463b      	mov	r3, r7
 800222a:	4649      	mov	r1, r9
 800222c:	4640      	mov	r0, r8
 800222e:	f001 fb91 	bl	8003954 <xTaskCreateStatic>
 8002232:	9005      	str	r0, [sp, #20]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002234:	9805      	ldr	r0, [sp, #20]
}
 8002236:	b007      	add	sp, #28
 8002238:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800223c:	6865      	ldr	r5, [r4, #4]
 800223e:	6826      	ldr	r6, [r4, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002240:	f8d4 8010 	ldr.w	r8, [r4, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002244:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
 8002248:	f7ff ffbe 	bl	80021c8 <makeFreeRtosPriority>
 800224c:	ab05      	add	r3, sp, #20
 800224e:	9301      	str	r3, [sp, #4]
 8002250:	9000      	str	r0, [sp, #0]
 8002252:	463b      	mov	r3, r7
 8002254:	fa1f f288 	uxth.w	r2, r8
 8002258:	4631      	mov	r1, r6
 800225a:	4628      	mov	r0, r5
 800225c:	f001 fbb3 	bl	80039c6 <xTaskCreate>
 8002260:	2801      	cmp	r0, #1
 8002262:	d0e7      	beq.n	8002234 <osThreadCreate+0x36>
      return NULL;
 8002264:	2000      	movs	r0, #0
 8002266:	e7e6      	b.n	8002236 <osThreadCreate+0x38>

08002268 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002268:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800226a:	4603      	mov	r3, r0
 800226c:	b900      	cbnz	r0, 8002270 <osDelay+0x8>
 800226e:	2301      	movs	r3, #1
 8002270:	4618      	mov	r0, r3
 8002272:	f001 fd0f 	bl	8003c94 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002276:	2000      	movs	r0, #0
 8002278:	bd08      	pop	{r3, pc}

0800227a <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800227a:	b508      	push	{r3, lr}
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800227c:	6841      	ldr	r1, [r0, #4]
 800227e:	b119      	cbz	r1, 8002288 <osMutexCreate+0xe>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8002280:	2001      	movs	r0, #1
 8002282:	f000 ff04 	bl	800308e <xQueueCreateMutexStatic>
 8002286:	bd08      	pop	{r3, pc}
     }
  else {
    return xSemaphoreCreateMutex(); 
 8002288:	2001      	movs	r0, #1
 800228a:	f000 fef5 	bl	8003078 <xQueueCreateMutex>
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800228e:	bd08      	pop	{r3, pc}

08002290 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8002290:	b530      	push	{r4, r5, lr}
 8002292:	b083      	sub	sp, #12
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8002294:	2300      	movs	r3, #0
 8002296:	9301      	str	r3, [sp, #4]
  
  
  if (mutex_id == NULL) {
 8002298:	b350      	cbz	r0, 80022f0 <osMutexWait+0x60>
 800229a:	460c      	mov	r4, r1
 800229c:	4605      	mov	r5, r0
    return osErrorParameter;
  }
  
  ticks = 0;
  if (millisec == osWaitForever) {
 800229e:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 80022a2:	d00d      	beq.n	80022c0 <osMutexWait+0x30>
    ticks = portMAX_DELAY;
  }
  else if (millisec != 0) {
 80022a4:	b901      	cbnz	r1, 80022a8 <osMutexWait+0x18>
  ticks = 0;
 80022a6:	461c      	mov	r4, r3
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 80022a8:	f7ff ff94 	bl	80021d4 <inHandlerMode>
 80022ac:	b1b8      	cbz	r0, 80022de <osMutexWait+0x4e>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80022ae:	aa01      	add	r2, sp, #4
 80022b0:	2100      	movs	r1, #0
 80022b2:	4628      	mov	r0, r5
 80022b4:	f001 f936 	bl	8003524 <xQueueReceiveFromISR>
 80022b8:	2801      	cmp	r0, #1
 80022ba:	d004      	beq.n	80022c6 <osMutexWait+0x36>
      return osErrorOS;
 80022bc:	20ff      	movs	r0, #255	; 0xff
 80022be:	e015      	b.n	80022ec <osMutexWait+0x5c>
    ticks = portMAX_DELAY;
 80022c0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80022c4:	e7f0      	b.n	80022a8 <osMutexWait+0x18>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80022c6:	9b01      	ldr	r3, [sp, #4]
 80022c8:	b1a3      	cbz	r3, 80022f4 <osMutexWait+0x64>
 80022ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80022ce:	4b0b      	ldr	r3, [pc, #44]	; (80022fc <osMutexWait+0x6c>)
 80022d0:	601a      	str	r2, [r3, #0]
 80022d2:	f3bf 8f4f 	dsb	sy
 80022d6:	f3bf 8f6f 	isb	sy
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
 80022da:	2000      	movs	r0, #0
 80022dc:	e006      	b.n	80022ec <osMutexWait+0x5c>
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 80022de:	4621      	mov	r1, r4
 80022e0:	4628      	mov	r0, r5
 80022e2:	f001 f857 	bl	8003394 <xQueueSemaphoreTake>
 80022e6:	2801      	cmp	r0, #1
 80022e8:	d006      	beq.n	80022f8 <osMutexWait+0x68>
    return osErrorOS;
 80022ea:	20ff      	movs	r0, #255	; 0xff
}
 80022ec:	b003      	add	sp, #12
 80022ee:	bd30      	pop	{r4, r5, pc}
    return osErrorParameter;
 80022f0:	2080      	movs	r0, #128	; 0x80
 80022f2:	e7fb      	b.n	80022ec <osMutexWait+0x5c>
  return osOK;
 80022f4:	2000      	movs	r0, #0
 80022f6:	e7f9      	b.n	80022ec <osMutexWait+0x5c>
 80022f8:	2000      	movs	r0, #0
 80022fa:	e7f7      	b.n	80022ec <osMutexWait+0x5c>
 80022fc:	e000ed04 	.word	0xe000ed04

08002300 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8002300:	b510      	push	{r4, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	4604      	mov	r4, r0
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 8002306:	2300      	movs	r3, #0
 8002308:	9301      	str	r3, [sp, #4]
  
  if (inHandlerMode()) {
 800230a:	f7ff ff63 	bl	80021d4 <inHandlerMode>
 800230e:	b1a0      	cbz	r0, 800233a <osMutexRelease+0x3a>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8002310:	a901      	add	r1, sp, #4
 8002312:	4620      	mov	r0, r4
 8002314:	f000 ff39 	bl	800318a <xQueueGiveFromISR>
 8002318:	2801      	cmp	r0, #1
 800231a:	d002      	beq.n	8002322 <osMutexRelease+0x22>
      return osErrorOS;
 800231c:	20ff      	movs	r0, #255	; 0xff
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
  {
    result = osErrorOS;
  }
  return result;
}
 800231e:	b002      	add	sp, #8
 8002320:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 8002322:	9b01      	ldr	r3, [sp, #4]
 8002324:	b1ab      	cbz	r3, 8002352 <osMutexRelease+0x52>
 8002326:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800232a:	4b0b      	ldr	r3, [pc, #44]	; (8002358 <osMutexRelease+0x58>)
 800232c:	601a      	str	r2, [r3, #0]
 800232e:	f3bf 8f4f 	dsb	sy
 8002332:	f3bf 8f6f 	isb	sy
  osStatus result = osOK;
 8002336:	2000      	movs	r0, #0
 8002338:	e7f1      	b.n	800231e <osMutexRelease+0x1e>
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800233a:	2300      	movs	r3, #0
 800233c:	461a      	mov	r2, r3
 800233e:	4619      	mov	r1, r3
 8002340:	4620      	mov	r0, r4
 8002342:	f000 fddd 	bl	8002f00 <xQueueGenericSend>
 8002346:	2801      	cmp	r0, #1
 8002348:	d001      	beq.n	800234e <osMutexRelease+0x4e>
    result = osErrorOS;
 800234a:	20ff      	movs	r0, #255	; 0xff
 800234c:	e7e7      	b.n	800231e <osMutexRelease+0x1e>
  osStatus result = osOK;
 800234e:	2000      	movs	r0, #0
 8002350:	e7e5      	b.n	800231e <osMutexRelease+0x1e>
 8002352:	2000      	movs	r0, #0
 8002354:	e7e3      	b.n	800231e <osMutexRelease+0x1e>
 8002356:	bf00      	nop
 8002358:	e000ed04 	.word	0xe000ed04

0800235c <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800235c:	b510      	push	{r4, lr}
 800235e:	b082      	sub	sp, #8
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8002360:	6843      	ldr	r3, [r0, #4]
 8002362:	b163      	cbz	r3, 800237e <osSemaphoreCreate+0x22>
    if (count == 1) {
 8002364:	2901      	cmp	r1, #1
 8002366:	d11a      	bne.n	800239e <osSemaphoreCreate+0x42>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8002368:	2203      	movs	r2, #3
 800236a:	9200      	str	r2, [sp, #0]
 800236c:	2200      	movs	r2, #0
 800236e:	4611      	mov	r1, r2
 8002370:	2001      	movs	r0, #1
 8002372:	f000 fd4d 	bl	8002e10 <xQueueGenericCreateStatic>
 8002376:	4604      	mov	r4, r0
#else
    return NULL;
#endif
  }
#endif
}
 8002378:	4620      	mov	r0, r4
 800237a:	b002      	add	sp, #8
 800237c:	bd10      	pop	{r4, pc}
    if (count == 1) {
 800237e:	2901      	cmp	r1, #1
 8002380:	d10f      	bne.n	80023a2 <osSemaphoreCreate+0x46>
      vSemaphoreCreateBinary(sema);
 8002382:	2203      	movs	r2, #3
 8002384:	2100      	movs	r1, #0
 8002386:	2001      	movs	r0, #1
 8002388:	f000 fd92 	bl	8002eb0 <xQueueGenericCreate>
 800238c:	4604      	mov	r4, r0
 800238e:	2800      	cmp	r0, #0
 8002390:	d0f2      	beq.n	8002378 <osSemaphoreCreate+0x1c>
 8002392:	2300      	movs	r3, #0
 8002394:	461a      	mov	r2, r3
 8002396:	4619      	mov	r1, r3
 8002398:	f000 fdb2 	bl	8002f00 <xQueueGenericSend>
 800239c:	e7ec      	b.n	8002378 <osSemaphoreCreate+0x1c>
      return NULL;
 800239e:	2400      	movs	r4, #0
 80023a0:	e7ea      	b.n	8002378 <osSemaphoreCreate+0x1c>
      return NULL;
 80023a2:	2400      	movs	r4, #0
 80023a4:	e7e8      	b.n	8002378 <osSemaphoreCreate+0x1c>
	...

080023a8 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80023a8:	b530      	push	{r4, r5, lr}
 80023aa:	b083      	sub	sp, #12
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80023ac:	2300      	movs	r3, #0
 80023ae:	9301      	str	r3, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 80023b0:	b350      	cbz	r0, 8002408 <osSemaphoreWait+0x60>
 80023b2:	460c      	mov	r4, r1
 80023b4:	4605      	mov	r5, r0
    return osErrorParameter;
  }
  
  ticks = 0;
  if (millisec == osWaitForever) {
 80023b6:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 80023ba:	d00d      	beq.n	80023d8 <osSemaphoreWait+0x30>
    ticks = portMAX_DELAY;
  }
  else if (millisec != 0) {
 80023bc:	b901      	cbnz	r1, 80023c0 <osSemaphoreWait+0x18>
  ticks = 0;
 80023be:	461c      	mov	r4, r3
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 80023c0:	f7ff ff08 	bl	80021d4 <inHandlerMode>
 80023c4:	b1b8      	cbz	r0, 80023f6 <osSemaphoreWait+0x4e>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80023c6:	aa01      	add	r2, sp, #4
 80023c8:	2100      	movs	r1, #0
 80023ca:	4628      	mov	r0, r5
 80023cc:	f001 f8aa 	bl	8003524 <xQueueReceiveFromISR>
 80023d0:	2801      	cmp	r0, #1
 80023d2:	d004      	beq.n	80023de <osSemaphoreWait+0x36>
      return osErrorOS;
 80023d4:	20ff      	movs	r0, #255	; 0xff
 80023d6:	e015      	b.n	8002404 <osSemaphoreWait+0x5c>
    ticks = portMAX_DELAY;
 80023d8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80023dc:	e7f0      	b.n	80023c0 <osSemaphoreWait+0x18>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80023de:	9b01      	ldr	r3, [sp, #4]
 80023e0:	b1a3      	cbz	r3, 800240c <osSemaphoreWait+0x64>
 80023e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023e6:	4b0b      	ldr	r3, [pc, #44]	; (8002414 <osSemaphoreWait+0x6c>)
 80023e8:	601a      	str	r2, [r3, #0]
 80023ea:	f3bf 8f4f 	dsb	sy
 80023ee:	f3bf 8f6f 	isb	sy
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
 80023f2:	2000      	movs	r0, #0
 80023f4:	e006      	b.n	8002404 <osSemaphoreWait+0x5c>
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80023f6:	4621      	mov	r1, r4
 80023f8:	4628      	mov	r0, r5
 80023fa:	f000 ffcb 	bl	8003394 <xQueueSemaphoreTake>
 80023fe:	2801      	cmp	r0, #1
 8002400:	d006      	beq.n	8002410 <osSemaphoreWait+0x68>
    return osErrorOS;
 8002402:	20ff      	movs	r0, #255	; 0xff
}
 8002404:	b003      	add	sp, #12
 8002406:	bd30      	pop	{r4, r5, pc}
    return osErrorParameter;
 8002408:	2080      	movs	r0, #128	; 0x80
 800240a:	e7fb      	b.n	8002404 <osSemaphoreWait+0x5c>
  return osOK;
 800240c:	2000      	movs	r0, #0
 800240e:	e7f9      	b.n	8002404 <osSemaphoreWait+0x5c>
 8002410:	2000      	movs	r0, #0
 8002412:	e7f7      	b.n	8002404 <osSemaphoreWait+0x5c>
 8002414:	e000ed04 	.word	0xe000ed04

08002418 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8002418:	b510      	push	{r4, lr}
 800241a:	b082      	sub	sp, #8
 800241c:	4604      	mov	r4, r0
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 800241e:	2300      	movs	r3, #0
 8002420:	9301      	str	r3, [sp, #4]
  
  
  if (inHandlerMode()) {
 8002422:	f7ff fed7 	bl	80021d4 <inHandlerMode>
 8002426:	b1a0      	cbz	r0, 8002452 <osSemaphoreRelease+0x3a>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8002428:	a901      	add	r1, sp, #4
 800242a:	4620      	mov	r0, r4
 800242c:	f000 fead 	bl	800318a <xQueueGiveFromISR>
 8002430:	2801      	cmp	r0, #1
 8002432:	d002      	beq.n	800243a <osSemaphoreRelease+0x22>
      return osErrorOS;
 8002434:	20ff      	movs	r0, #255	; 0xff
      result = osErrorOS;
    }
  }
  
  return result;
}
 8002436:	b002      	add	sp, #8
 8002438:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 800243a:	9b01      	ldr	r3, [sp, #4]
 800243c:	b1ab      	cbz	r3, 800246a <osSemaphoreRelease+0x52>
 800243e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002442:	4b0b      	ldr	r3, [pc, #44]	; (8002470 <osSemaphoreRelease+0x58>)
 8002444:	601a      	str	r2, [r3, #0]
 8002446:	f3bf 8f4f 	dsb	sy
 800244a:	f3bf 8f6f 	isb	sy
  osStatus result = osOK;
 800244e:	2000      	movs	r0, #0
 8002450:	e7f1      	b.n	8002436 <osSemaphoreRelease+0x1e>
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8002452:	2300      	movs	r3, #0
 8002454:	461a      	mov	r2, r3
 8002456:	4619      	mov	r1, r3
 8002458:	4620      	mov	r0, r4
 800245a:	f000 fd51 	bl	8002f00 <xQueueGenericSend>
 800245e:	2801      	cmp	r0, #1
 8002460:	d001      	beq.n	8002466 <osSemaphoreRelease+0x4e>
      result = osErrorOS;
 8002462:	20ff      	movs	r0, #255	; 0xff
 8002464:	e7e7      	b.n	8002436 <osSemaphoreRelease+0x1e>
  osStatus result = osOK;
 8002466:	2000      	movs	r0, #0
 8002468:	e7e5      	b.n	8002436 <osSemaphoreRelease+0x1e>
 800246a:	2000      	movs	r0, #0
 800246c:	e7e3      	b.n	8002436 <osSemaphoreRelease+0x1e>
 800246e:	bf00      	nop
 8002470:	e000ed04 	.word	0xe000ed04

08002474 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8002474:	b510      	push	{r4, lr}
 8002476:	4604      	mov	r4, r0
  if (inHandlerMode()) {
 8002478:	f7ff feac 	bl	80021d4 <inHandlerMode>
 800247c:	b108      	cbz	r0, 8002482 <osSemaphoreDelete+0xe>
    return osErrorISR;
 800247e:	2082      	movs	r0, #130	; 0x82
  }

  vSemaphoreDelete(semaphore_id);

  return osOK; 
}
 8002480:	bd10      	pop	{r4, pc}
  vSemaphoreDelete(semaphore_id);
 8002482:	4620      	mov	r0, r4
 8002484:	f001 f8de 	bl	8003644 <vQueueDelete>
  return osOK; 
 8002488:	2000      	movs	r0, #0
 800248a:	bd10      	pop	{r4, pc}

0800248c <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800248c:	b510      	push	{r4, lr}
 800248e:	b082      	sub	sp, #8
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8002490:	6882      	ldr	r2, [r0, #8]
 8002492:	b14a      	cbz	r2, 80024a8 <osMessageCreate+0x1c>
 8002494:	68c3      	ldr	r3, [r0, #12]
 8002496:	b13b      	cbz	r3, 80024a8 <osMessageCreate+0x1c>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8002498:	6841      	ldr	r1, [r0, #4]
 800249a:	6800      	ldr	r0, [r0, #0]
 800249c:	2400      	movs	r4, #0
 800249e:	9400      	str	r4, [sp, #0]
 80024a0:	f000 fcb6 	bl	8002e10 <xQueueGenericCreateStatic>
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80024a4:	b002      	add	sp, #8
 80024a6:	bd10      	pop	{r4, pc}
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80024a8:	2200      	movs	r2, #0
 80024aa:	6841      	ldr	r1, [r0, #4]
 80024ac:	6800      	ldr	r0, [r0, #0]
 80024ae:	f000 fcff 	bl	8002eb0 <xQueueGenericCreate>
 80024b2:	e7f7      	b.n	80024a4 <osMessageCreate+0x18>

080024b4 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80024b4:	b530      	push	{r4, r5, lr}
 80024b6:	b085      	sub	sp, #20
 80024b8:	4604      	mov	r4, r0
 80024ba:	9101      	str	r1, [sp, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80024bc:	2300      	movs	r3, #0
 80024be:	9303      	str	r3, [sp, #12]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
  if (ticks == 0) {
 80024c0:	4615      	mov	r5, r2
 80024c2:	b902      	cbnz	r2, 80024c6 <osMessagePut+0x12>
    ticks = 1;
 80024c4:	2501      	movs	r5, #1
  }
  
  if (inHandlerMode()) {
 80024c6:	f7ff fe85 	bl	80021d4 <inHandlerMode>
 80024ca:	b1a8      	cbz	r0, 80024f8 <osMessagePut+0x44>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80024cc:	2300      	movs	r3, #0
 80024ce:	aa03      	add	r2, sp, #12
 80024d0:	a901      	add	r1, sp, #4
 80024d2:	4620      	mov	r0, r4
 80024d4:	f000 fdea 	bl	80030ac <xQueueGenericSendFromISR>
 80024d8:	2801      	cmp	r0, #1
 80024da:	d001      	beq.n	80024e0 <osMessagePut+0x2c>
      return osErrorOS;
 80024dc:	20ff      	movs	r0, #255	; 0xff
 80024de:	e014      	b.n	800250a <osMessagePut+0x56>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80024e0:	9b03      	ldr	r3, [sp, #12]
 80024e2:	b1a3      	cbz	r3, 800250e <osMessagePut+0x5a>
 80024e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024e8:	4b0b      	ldr	r3, [pc, #44]	; (8002518 <osMessagePut+0x64>)
 80024ea:	601a      	str	r2, [r3, #0]
 80024ec:	f3bf 8f4f 	dsb	sy
 80024f0:	f3bf 8f6f 	isb	sy
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
      return osErrorOS;
    }
  }
  
  return osOK;
 80024f4:	2000      	movs	r0, #0
 80024f6:	e008      	b.n	800250a <osMessagePut+0x56>
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80024f8:	2300      	movs	r3, #0
 80024fa:	462a      	mov	r2, r5
 80024fc:	a901      	add	r1, sp, #4
 80024fe:	4620      	mov	r0, r4
 8002500:	f000 fcfe 	bl	8002f00 <xQueueGenericSend>
 8002504:	2801      	cmp	r0, #1
 8002506:	d004      	beq.n	8002512 <osMessagePut+0x5e>
      return osErrorOS;
 8002508:	20ff      	movs	r0, #255	; 0xff
}
 800250a:	b005      	add	sp, #20
 800250c:	bd30      	pop	{r4, r5, pc}
  return osOK;
 800250e:	2000      	movs	r0, #0
 8002510:	e7fb      	b.n	800250a <osMessagePut+0x56>
 8002512:	2000      	movs	r0, #0
 8002514:	e7f9      	b.n	800250a <osMessagePut+0x56>
 8002516:	bf00      	nop
 8002518:	e000ed04 	.word	0xe000ed04

0800251c <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800251c:	b570      	push	{r4, r5, r6, lr}
 800251e:	b084      	sub	sp, #16
 8002520:	4604      	mov	r4, r0
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8002522:	9102      	str	r1, [sp, #8]
  event.value.v = 0;
 8002524:	2300      	movs	r3, #0
 8002526:	9301      	str	r3, [sp, #4]
  
  if (queue_id == NULL) {
 8002528:	b1f9      	cbz	r1, 800256a <osMessageGet+0x4e>
 800252a:	460d      	mov	r5, r1
 800252c:	4616      	mov	r6, r2
    event.status = osErrorParameter;
    return event;
  }
  
  taskWoken = pdFALSE;
 800252e:	2300      	movs	r3, #0
 8002530:	9303      	str	r3, [sp, #12]
  
  ticks = 0;
  if (millisec == osWaitForever) {
 8002532:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8002536:	d021      	beq.n	800257c <osMessageGet+0x60>
    ticks = portMAX_DELAY;
  }
  else if (millisec != 0) {
 8002538:	b902      	cbnz	r2, 800253c <osMessageGet+0x20>
  ticks = 0;
 800253a:	461e      	mov	r6, r3
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 800253c:	f7ff fe4a 	bl	80021d4 <inHandlerMode>
 8002540:	b310      	cbz	r0, 8002588 <osMessageGet+0x6c>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8002542:	aa03      	add	r2, sp, #12
 8002544:	a901      	add	r1, sp, #4
 8002546:	4628      	mov	r0, r5
 8002548:	f000 ffec 	bl	8003524 <xQueueReceiveFromISR>
 800254c:	2801      	cmp	r0, #1
 800254e:	d018      	beq.n	8002582 <osMessageGet+0x66>
      /* We have mail */
      event.status = osEventMessage;
    }
    else {
      event.status = osOK;
 8002550:	2300      	movs	r3, #0
 8002552:	9300      	str	r3, [sp, #0]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8002554:	9b03      	ldr	r3, [sp, #12]
 8002556:	b30b      	cbz	r3, 800259c <osMessageGet+0x80>
 8002558:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800255c:	4b15      	ldr	r3, [pc, #84]	; (80025b4 <osMessageGet+0x98>)
 800255e:	601a      	str	r2, [r3, #0]
 8002560:	f3bf 8f4f 	dsb	sy
 8002564:	f3bf 8f6f 	isb	sy
 8002568:	e018      	b.n	800259c <osMessageGet+0x80>
    event.status = osErrorParameter;
 800256a:	ab04      	add	r3, sp, #16
 800256c:	2280      	movs	r2, #128	; 0x80
 800256e:	f843 2d10 	str.w	r2, [r3, #-16]!
    return event;
 8002572:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002576:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800257a:	e013      	b.n	80025a4 <osMessageGet+0x88>
    ticks = portMAX_DELAY;
 800257c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8002580:	e7dc      	b.n	800253c <osMessageGet+0x20>
      event.status = osEventMessage;
 8002582:	2310      	movs	r3, #16
 8002584:	9300      	str	r3, [sp, #0]
 8002586:	e7e5      	b.n	8002554 <osMessageGet+0x38>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8002588:	4632      	mov	r2, r6
 800258a:	a901      	add	r1, sp, #4
 800258c:	4628      	mov	r0, r5
 800258e:	f000 fe5b 	bl	8003248 <xQueueReceive>
 8002592:	2801      	cmp	r0, #1
 8002594:	d009      	beq.n	80025aa <osMessageGet+0x8e>
      /* We have mail */
      event.status = osEventMessage;
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8002596:	b95e      	cbnz	r6, 80025b0 <osMessageGet+0x94>
 8002598:	2300      	movs	r3, #0
 800259a:	9300      	str	r3, [sp, #0]
    }
  }
  
  return event;
 800259c:	e89d 0007 	ldmia.w	sp, {r0, r1, r2}
 80025a0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80025a4:	4620      	mov	r0, r4
 80025a6:	b004      	add	sp, #16
 80025a8:	bd70      	pop	{r4, r5, r6, pc}
      event.status = osEventMessage;
 80025aa:	2310      	movs	r3, #16
 80025ac:	9300      	str	r3, [sp, #0]
 80025ae:	e7f5      	b.n	800259c <osMessageGet+0x80>
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80025b0:	2340      	movs	r3, #64	; 0x40
 80025b2:	e7f2      	b.n	800259a <osMessageGet+0x7e>
 80025b4:	e000ed04 	.word	0xe000ed04

080025b8 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 80025b8:	b510      	push	{r4, lr}
 80025ba:	4604      	mov	r4, r0
  if (inHandlerMode()) {
 80025bc:	f7ff fe0a 	bl	80021d4 <inHandlerMode>
 80025c0:	b918      	cbnz	r0, 80025ca <osMessageWaiting+0x12>
    return uxQueueMessagesWaitingFromISR(queue_id);
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 80025c2:	4620      	mov	r0, r4
 80025c4:	f001 f809 	bl	80035da <uxQueueMessagesWaiting>
  }
}
 80025c8:	bd10      	pop	{r4, pc}
    return uxQueueMessagesWaitingFromISR(queue_id);
 80025ca:	4620      	mov	r0, r4
 80025cc:	f001 f818 	bl	8003600 <uxQueueMessagesWaitingFromISR>
 80025d0:	bd10      	pop	{r4, pc}

080025d2 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 80025d2:	b510      	push	{r4, lr}
 80025d4:	4604      	mov	r4, r0
  if (inHandlerMode()) {
 80025d6:	f7ff fdfd 	bl	80021d4 <inHandlerMode>
 80025da:	b108      	cbz	r0, 80025e0 <osMessageDelete+0xe>
    return osErrorISR;
 80025dc:	2082      	movs	r0, #130	; 0x82
  }

  vQueueDelete(queue_id);

  return osOK; 
}
 80025de:	bd10      	pop	{r4, pc}
  vQueueDelete(queue_id);
 80025e0:	4620      	mov	r0, r4
 80025e2:	f001 f82f 	bl	8003644 <vQueueDelete>
  return osOK; 
 80025e6:	2000      	movs	r0, #0
 80025e8:	bd10      	pop	{r4, pc}

080025ea <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80025ea:	f100 0308 	add.w	r3, r0, #8
 80025ee:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80025f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80025f4:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80025f6:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80025f8:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80025fa:	2300      	movs	r3, #0
 80025fc:	6003      	str	r3, [r0, #0]
 80025fe:	4770      	bx	lr

08002600 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002600:	2300      	movs	r3, #0
 8002602:	6103      	str	r3, [r0, #16]
 8002604:	4770      	bx	lr

08002606 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8002606:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002608:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800260a:	689a      	ldr	r2, [r3, #8]
 800260c:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800260e:	689a      	ldr	r2, [r3, #8]
 8002610:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002612:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002614:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8002616:	6803      	ldr	r3, [r0, #0]
 8002618:	3301      	adds	r3, #1
 800261a:	6003      	str	r3, [r0, #0]
 800261c:	4770      	bx	lr

0800261e <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800261e:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002620:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002622:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8002626:	d002      	beq.n	800262e <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002628:	f100 0208 	add.w	r2, r0, #8
 800262c:	e002      	b.n	8002634 <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
 800262e:	6902      	ldr	r2, [r0, #16]
 8002630:	e004      	b.n	800263c <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002632:	461a      	mov	r2, r3
 8002634:	6853      	ldr	r3, [r2, #4]
 8002636:	681c      	ldr	r4, [r3, #0]
 8002638:	42a5      	cmp	r5, r4
 800263a:	d2fa      	bcs.n	8002632 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800263c:	6853      	ldr	r3, [r2, #4]
 800263e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002640:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002642:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8002644:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002646:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8002648:	6803      	ldr	r3, [r0, #0]
 800264a:	3301      	adds	r3, #1
 800264c:	6003      	str	r3, [r0, #0]
}
 800264e:	bc30      	pop	{r4, r5}
 8002650:	4770      	bx	lr

08002652 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002652:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002654:	6842      	ldr	r2, [r0, #4]
 8002656:	6881      	ldr	r1, [r0, #8]
 8002658:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800265a:	6882      	ldr	r2, [r0, #8]
 800265c:	6841      	ldr	r1, [r0, #4]
 800265e:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002660:	685a      	ldr	r2, [r3, #4]
 8002662:	4290      	cmp	r0, r2
 8002664:	d006      	beq.n	8002674 <uxListRemove+0x22>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002666:	2200      	movs	r2, #0
 8002668:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	3a01      	subs	r2, #1
 800266e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002670:	6818      	ldr	r0, [r3, #0]
}
 8002672:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002674:	6882      	ldr	r2, [r0, #8]
 8002676:	605a      	str	r2, [r3, #4]
 8002678:	e7f5      	b.n	8002666 <uxListRemove+0x14>
	...

0800267c <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800267c:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800267e:	2300      	movs	r3, #0
 8002680:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002682:	4b0d      	ldr	r3, [pc, #52]	; (80026b8 <prvTaskExitError+0x3c>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800268a:	d008      	beq.n	800269e <prvTaskExitError+0x22>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800268c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002690:	f383 8811 	msr	BASEPRI, r3
 8002694:	f3bf 8f6f 	isb	sy
 8002698:	f3bf 8f4f 	dsb	sy
 800269c:	e7fe      	b.n	800269c <prvTaskExitError+0x20>
 800269e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026a2:	f383 8811 	msr	BASEPRI, r3
 80026a6:	f3bf 8f6f 	isb	sy
 80026aa:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80026ae:	9b01      	ldr	r3, [sp, #4]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d0fc      	beq.n	80026ae <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80026b4:	b002      	add	sp, #8
 80026b6:	4770      	bx	lr
 80026b8:	20000004 	.word	0x20000004

080026bc <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80026bc:	4808      	ldr	r0, [pc, #32]	; (80026e0 <prvPortStartFirstTask+0x24>)
 80026be:	6800      	ldr	r0, [r0, #0]
 80026c0:	6800      	ldr	r0, [r0, #0]
 80026c2:	f380 8808 	msr	MSP, r0
 80026c6:	f04f 0000 	mov.w	r0, #0
 80026ca:	f380 8814 	msr	CONTROL, r0
 80026ce:	b662      	cpsie	i
 80026d0:	b661      	cpsie	f
 80026d2:	f3bf 8f4f 	dsb	sy
 80026d6:	f3bf 8f6f 	isb	sy
 80026da:	df00      	svc	0
 80026dc:	bf00      	nop
 80026de:	0000      	.short	0x0000
 80026e0:	e000ed08 	.word	0xe000ed08

080026e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80026e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80026f4 <vPortEnableVFP+0x10>
 80026e8:	6801      	ldr	r1, [r0, #0]
 80026ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80026ee:	6001      	str	r1, [r0, #0]
 80026f0:	4770      	bx	lr
 80026f2:	0000      	.short	0x0000
 80026f4:	e000ed88 	.word	0xe000ed88

080026f8 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80026f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80026fc:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002700:	f021 0101 	bic.w	r1, r1, #1
 8002704:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002708:	4b05      	ldr	r3, [pc, #20]	; (8002720 <pxPortInitialiseStack+0x28>)
 800270a:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800270e:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8002712:	f06f 0302 	mvn.w	r3, #2
 8002716:	f840 3c24 	str.w	r3, [r0, #-36]
}
 800271a:	3844      	subs	r0, #68	; 0x44
 800271c:	4770      	bx	lr
 800271e:	bf00      	nop
 8002720:	0800267d 	.word	0x0800267d
	...

08002730 <SVC_Handler>:
	__asm volatile (
 8002730:	4b07      	ldr	r3, [pc, #28]	; (8002750 <pxCurrentTCBConst2>)
 8002732:	6819      	ldr	r1, [r3, #0]
 8002734:	6808      	ldr	r0, [r1, #0]
 8002736:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800273a:	f380 8809 	msr	PSP, r0
 800273e:	f3bf 8f6f 	isb	sy
 8002742:	f04f 0000 	mov.w	r0, #0
 8002746:	f380 8811 	msr	BASEPRI, r0
 800274a:	4770      	bx	lr
 800274c:	f3af 8000 	nop.w

08002750 <pxCurrentTCBConst2>:
 8002750:	20003cb4 	.word	0x20003cb4

08002754 <vPortEnterCritical>:
 8002754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002758:	f383 8811 	msr	BASEPRI, r3
 800275c:	f3bf 8f6f 	isb	sy
 8002760:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8002764:	4a0a      	ldr	r2, [pc, #40]	; (8002790 <vPortEnterCritical+0x3c>)
 8002766:	6813      	ldr	r3, [r2, #0]
 8002768:	3301      	adds	r3, #1
 800276a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800276c:	2b01      	cmp	r3, #1
 800276e:	d10d      	bne.n	800278c <vPortEnterCritical+0x38>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002770:	4b08      	ldr	r3, [pc, #32]	; (8002794 <vPortEnterCritical+0x40>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f013 0fff 	tst.w	r3, #255	; 0xff
 8002778:	d008      	beq.n	800278c <vPortEnterCritical+0x38>
 800277a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800277e:	f383 8811 	msr	BASEPRI, r3
 8002782:	f3bf 8f6f 	isb	sy
 8002786:	f3bf 8f4f 	dsb	sy
 800278a:	e7fe      	b.n	800278a <vPortEnterCritical+0x36>
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop
 8002790:	20000004 	.word	0x20000004
 8002794:	e000ed04 	.word	0xe000ed04

08002798 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8002798:	4b09      	ldr	r3, [pc, #36]	; (80027c0 <vPortExitCritical+0x28>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	b943      	cbnz	r3, 80027b0 <vPortExitCritical+0x18>
 800279e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027a2:	f383 8811 	msr	BASEPRI, r3
 80027a6:	f3bf 8f6f 	isb	sy
 80027aa:	f3bf 8f4f 	dsb	sy
 80027ae:	e7fe      	b.n	80027ae <vPortExitCritical+0x16>
	uxCriticalNesting--;
 80027b0:	3b01      	subs	r3, #1
 80027b2:	4a03      	ldr	r2, [pc, #12]	; (80027c0 <vPortExitCritical+0x28>)
 80027b4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80027b6:	b90b      	cbnz	r3, 80027bc <vPortExitCritical+0x24>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80027b8:	f383 8811 	msr	BASEPRI, r3
 80027bc:	4770      	bx	lr
 80027be:	bf00      	nop
 80027c0:	20000004 	.word	0x20000004
	...

080027d0 <PendSV_Handler>:
	__asm volatile
 80027d0:	f3ef 8009 	mrs	r0, PSP
 80027d4:	f3bf 8f6f 	isb	sy
 80027d8:	4b15      	ldr	r3, [pc, #84]	; (8002830 <pxCurrentTCBConst>)
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	f01e 0f10 	tst.w	lr, #16
 80027e0:	bf08      	it	eq
 80027e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80027e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027ea:	6010      	str	r0, [r2, #0]
 80027ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80027f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80027f4:	f380 8811 	msr	BASEPRI, r0
 80027f8:	f3bf 8f4f 	dsb	sy
 80027fc:	f3bf 8f6f 	isb	sy
 8002800:	f001 fa70 	bl	8003ce4 <vTaskSwitchContext>
 8002804:	f04f 0000 	mov.w	r0, #0
 8002808:	f380 8811 	msr	BASEPRI, r0
 800280c:	bc09      	pop	{r0, r3}
 800280e:	6819      	ldr	r1, [r3, #0]
 8002810:	6808      	ldr	r0, [r1, #0]
 8002812:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002816:	f01e 0f10 	tst.w	lr, #16
 800281a:	bf08      	it	eq
 800281c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002820:	f380 8809 	msr	PSP, r0
 8002824:	f3bf 8f6f 	isb	sy
 8002828:	4770      	bx	lr
 800282a:	bf00      	nop
 800282c:	f3af 8000 	nop.w

08002830 <pxCurrentTCBConst>:
 8002830:	20003cb4 	.word	0x20003cb4

08002834 <SysTick_Handler>:
{
 8002834:	b508      	push	{r3, lr}
	__asm volatile
 8002836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800283a:	f383 8811 	msr	BASEPRI, r3
 800283e:	f3bf 8f6f 	isb	sy
 8002842:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8002846:	f001 f943 	bl	8003ad0 <xTaskIncrementTick>
 800284a:	b118      	cbz	r0, 8002854 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800284c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002850:	4b02      	ldr	r3, [pc, #8]	; (800285c <SysTick_Handler+0x28>)
 8002852:	601a      	str	r2, [r3, #0]
	__asm volatile
 8002854:	2300      	movs	r3, #0
 8002856:	f383 8811 	msr	BASEPRI, r3
 800285a:	bd08      	pop	{r3, pc}
 800285c:	e000ed04 	.word	0xe000ed04

08002860 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002860:	4a08      	ldr	r2, [pc, #32]	; (8002884 <vPortSetupTimerInterrupt+0x24>)
 8002862:	2300      	movs	r3, #0
 8002864:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002866:	4908      	ldr	r1, [pc, #32]	; (8002888 <vPortSetupTimerInterrupt+0x28>)
 8002868:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800286a:	4b08      	ldr	r3, [pc, #32]	; (800288c <vPortSetupTimerInterrupt+0x2c>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4908      	ldr	r1, [pc, #32]	; (8002890 <vPortSetupTimerInterrupt+0x30>)
 8002870:	fba1 1303 	umull	r1, r3, r1, r3
 8002874:	099b      	lsrs	r3, r3, #6
 8002876:	3b01      	subs	r3, #1
 8002878:	4906      	ldr	r1, [pc, #24]	; (8002894 <vPortSetupTimerInterrupt+0x34>)
 800287a:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800287c:	2307      	movs	r3, #7
 800287e:	6013      	str	r3, [r2, #0]
 8002880:	4770      	bx	lr
 8002882:	bf00      	nop
 8002884:	e000e010 	.word	0xe000e010
 8002888:	e000e018 	.word	0xe000e018
 800288c:	20000010 	.word	0x20000010
 8002890:	10624dd3 	.word	0x10624dd3
 8002894:	e000e014 	.word	0xe000e014

08002898 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002898:	4b3a      	ldr	r3, [pc, #232]	; (8002984 <xPortStartScheduler+0xec>)
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	4b3a      	ldr	r3, [pc, #232]	; (8002988 <xPortStartScheduler+0xf0>)
 800289e:	429a      	cmp	r2, r3
 80028a0:	d108      	bne.n	80028b4 <xPortStartScheduler+0x1c>
	__asm volatile
 80028a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028a6:	f383 8811 	msr	BASEPRI, r3
 80028aa:	f3bf 8f6f 	isb	sy
 80028ae:	f3bf 8f4f 	dsb	sy
 80028b2:	e7fe      	b.n	80028b2 <xPortStartScheduler+0x1a>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80028b4:	4b33      	ldr	r3, [pc, #204]	; (8002984 <xPortStartScheduler+0xec>)
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	4b34      	ldr	r3, [pc, #208]	; (800298c <xPortStartScheduler+0xf4>)
 80028ba:	429a      	cmp	r2, r3
 80028bc:	d108      	bne.n	80028d0 <xPortStartScheduler+0x38>
 80028be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028c2:	f383 8811 	msr	BASEPRI, r3
 80028c6:	f3bf 8f6f 	isb	sy
 80028ca:	f3bf 8f4f 	dsb	sy
 80028ce:	e7fe      	b.n	80028ce <xPortStartScheduler+0x36>
{
 80028d0:	b510      	push	{r4, lr}
 80028d2:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80028d4:	4b2e      	ldr	r3, [pc, #184]	; (8002990 <xPortStartScheduler+0xf8>)
 80028d6:	781a      	ldrb	r2, [r3, #0]
 80028d8:	b2d2      	uxtb	r2, r2
 80028da:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80028dc:	22ff      	movs	r2, #255	; 0xff
 80028de:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80028e0:	781b      	ldrb	r3, [r3, #0]
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80028e8:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80028ec:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80028f0:	4a28      	ldr	r2, [pc, #160]	; (8002994 <xPortStartScheduler+0xfc>)
 80028f2:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80028f4:	2207      	movs	r2, #7
 80028f6:	4b28      	ldr	r3, [pc, #160]	; (8002998 <xPortStartScheduler+0x100>)
 80028f8:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80028fa:	e009      	b.n	8002910 <xPortStartScheduler+0x78>
			ulMaxPRIGROUPValue--;
 80028fc:	4a26      	ldr	r2, [pc, #152]	; (8002998 <xPortStartScheduler+0x100>)
 80028fe:	6813      	ldr	r3, [r2, #0]
 8002900:	3b01      	subs	r3, #1
 8002902:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002904:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8002908:	005b      	lsls	r3, r3, #1
 800290a:	b2db      	uxtb	r3, r3
 800290c:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002910:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8002914:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002918:	d1f0      	bne.n	80028fc <xPortStartScheduler+0x64>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800291a:	4b1f      	ldr	r3, [pc, #124]	; (8002998 <xPortStartScheduler+0x100>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	2b03      	cmp	r3, #3
 8002920:	d008      	beq.n	8002934 <xPortStartScheduler+0x9c>
 8002922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002926:	f383 8811 	msr	BASEPRI, r3
 800292a:	f3bf 8f6f 	isb	sy
 800292e:	f3bf 8f4f 	dsb	sy
 8002932:	e7fe      	b.n	8002932 <xPortStartScheduler+0x9a>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002934:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002936:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800293a:	4a17      	ldr	r2, [pc, #92]	; (8002998 <xPortStartScheduler+0x100>)
 800293c:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800293e:	9b01      	ldr	r3, [sp, #4]
 8002940:	b2db      	uxtb	r3, r3
 8002942:	4a13      	ldr	r2, [pc, #76]	; (8002990 <xPortStartScheduler+0xf8>)
 8002944:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002946:	4b15      	ldr	r3, [pc, #84]	; (800299c <xPortStartScheduler+0x104>)
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800294e:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8002956:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8002958:	f7ff ff82 	bl	8002860 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800295c:	2400      	movs	r4, #0
 800295e:	4b10      	ldr	r3, [pc, #64]	; (80029a0 <xPortStartScheduler+0x108>)
 8002960:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 8002962:	f7ff febf 	bl	80026e4 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002966:	4a0f      	ldr	r2, [pc, #60]	; (80029a4 <xPortStartScheduler+0x10c>)
 8002968:	6813      	ldr	r3, [r2, #0]
 800296a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800296e:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8002970:	f7ff fea4 	bl	80026bc <prvPortStartFirstTask>
	vTaskSwitchContext();
 8002974:	f001 f9b6 	bl	8003ce4 <vTaskSwitchContext>
	prvTaskExitError();
 8002978:	f7ff fe80 	bl	800267c <prvTaskExitError>
}
 800297c:	4620      	mov	r0, r4
 800297e:	b002      	add	sp, #8
 8002980:	bd10      	pop	{r4, pc}
 8002982:	bf00      	nop
 8002984:	e000ed00 	.word	0xe000ed00
 8002988:	410fc271 	.word	0x410fc271
 800298c:	410fc270 	.word	0x410fc270
 8002990:	e000e400 	.word	0xe000e400
 8002994:	20000094 	.word	0x20000094
 8002998:	20000098 	.word	0x20000098
 800299c:	e000ed20 	.word	0xe000ed20
 80029a0:	20000004 	.word	0x20000004
 80029a4:	e000ef34 	.word	0xe000ef34

080029a8 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80029a8:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80029ac:	2b0f      	cmp	r3, #15
 80029ae:	d90f      	bls.n	80029d0 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80029b0:	4a10      	ldr	r2, [pc, #64]	; (80029f4 <vPortValidateInterruptPriority+0x4c>)
 80029b2:	5c9b      	ldrb	r3, [r3, r2]
 80029b4:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80029b6:	4a10      	ldr	r2, [pc, #64]	; (80029f8 <vPortValidateInterruptPriority+0x50>)
 80029b8:	7812      	ldrb	r2, [r2, #0]
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d208      	bcs.n	80029d0 <vPortValidateInterruptPriority+0x28>
 80029be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029c2:	f383 8811 	msr	BASEPRI, r3
 80029c6:	f3bf 8f6f 	isb	sy
 80029ca:	f3bf 8f4f 	dsb	sy
 80029ce:	e7fe      	b.n	80029ce <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80029d0:	4b0a      	ldr	r3, [pc, #40]	; (80029fc <vPortValidateInterruptPriority+0x54>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80029d8:	4a09      	ldr	r2, [pc, #36]	; (8002a00 <vPortValidateInterruptPriority+0x58>)
 80029da:	6812      	ldr	r2, [r2, #0]
 80029dc:	4293      	cmp	r3, r2
 80029de:	d908      	bls.n	80029f2 <vPortValidateInterruptPriority+0x4a>
 80029e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029e4:	f383 8811 	msr	BASEPRI, r3
 80029e8:	f3bf 8f6f 	isb	sy
 80029ec:	f3bf 8f4f 	dsb	sy
 80029f0:	e7fe      	b.n	80029f0 <vPortValidateInterruptPriority+0x48>
 80029f2:	4770      	bx	lr
 80029f4:	e000e3f0 	.word	0xe000e3f0
 80029f8:	20000094 	.word	0x20000094
 80029fc:	e000ed0c 	.word	0xe000ed0c
 8002a00:	20000098 	.word	0x20000098

08002a04 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8002a04:	4a12      	ldr	r2, [pc, #72]	; (8002a50 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002a06:	f012 0f07 	tst.w	r2, #7
 8002a0a:	d01e      	beq.n	8002a4a <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002a0c:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002a0e:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002a12:	f5c1 5370 	rsb	r3, r1, #15360	; 0x3c00
 8002a16:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002a18:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002a1a:	480e      	ldr	r0, [pc, #56]	; (8002a54 <prvHeapInit+0x50>)
 8002a1c:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8002a1e:	2100      	movs	r1, #0
 8002a20:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002a22:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8002a24:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002a26:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 8002a2a:	480b      	ldr	r0, [pc, #44]	; (8002a58 <prvHeapInit+0x54>)
 8002a2c:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 8002a2e:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8002a30:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002a32:	1a99      	subs	r1, r3, r2
 8002a34:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002a36:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002a38:	4b08      	ldr	r3, [pc, #32]	; (8002a5c <prvHeapInit+0x58>)
 8002a3a:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002a3c:	4b08      	ldr	r3, [pc, #32]	; (8002a60 <prvHeapInit+0x5c>)
 8002a3e:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002a40:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002a44:	4b07      	ldr	r3, [pc, #28]	; (8002a64 <prvHeapInit+0x60>)
 8002a46:	601a      	str	r2, [r3, #0]
 8002a48:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002a4a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8002a4e:	e7e4      	b.n	8002a1a <prvHeapInit+0x16>
 8002a50:	200000a0 	.word	0x200000a0
 8002a54:	20003cac 	.word	0x20003cac
 8002a58:	2000009c 	.word	0x2000009c
 8002a5c:	20003ca8 	.word	0x20003ca8
 8002a60:	20003ca4 	.word	0x20003ca4
 8002a64:	20003ca0 	.word	0x20003ca0

08002a68 <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002a68:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002a6a:	4b13      	ldr	r3, [pc, #76]	; (8002ab8 <prvInsertBlockIntoFreeList+0x50>)
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	4282      	cmp	r2, r0
 8002a70:	d31b      	bcc.n	8002aaa <prvInsertBlockIntoFreeList+0x42>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002a72:	6859      	ldr	r1, [r3, #4]
 8002a74:	185c      	adds	r4, r3, r1
 8002a76:	42a0      	cmp	r0, r4
 8002a78:	d103      	bne.n	8002a82 <prvInsertBlockIntoFreeList+0x1a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002a7a:	6840      	ldr	r0, [r0, #4]
 8002a7c:	4401      	add	r1, r0
 8002a7e:	6059      	str	r1, [r3, #4]
		pxBlockToInsert = pxIterator;
 8002a80:	4618      	mov	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002a82:	6841      	ldr	r1, [r0, #4]
 8002a84:	1844      	adds	r4, r0, r1
 8002a86:	42a2      	cmp	r2, r4
 8002a88:	d113      	bne.n	8002ab2 <prvInsertBlockIntoFreeList+0x4a>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8002a8a:	4c0c      	ldr	r4, [pc, #48]	; (8002abc <prvInsertBlockIntoFreeList+0x54>)
 8002a8c:	6824      	ldr	r4, [r4, #0]
 8002a8e:	42a2      	cmp	r2, r4
 8002a90:	d00d      	beq.n	8002aae <prvInsertBlockIntoFreeList+0x46>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002a92:	6852      	ldr	r2, [r2, #4]
 8002a94:	4411      	add	r1, r2
 8002a96:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	6812      	ldr	r2, [r2, #0]
 8002a9c:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002a9e:	4298      	cmp	r0, r3
 8002aa0:	d000      	beq.n	8002aa4 <prvInsertBlockIntoFreeList+0x3c>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002aa2:	6018      	str	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002aa4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002aa8:	4770      	bx	lr
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002aaa:	4613      	mov	r3, r2
 8002aac:	e7de      	b.n	8002a6c <prvInsertBlockIntoFreeList+0x4>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002aae:	6004      	str	r4, [r0, #0]
 8002ab0:	e7f5      	b.n	8002a9e <prvInsertBlockIntoFreeList+0x36>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002ab2:	6002      	str	r2, [r0, #0]
 8002ab4:	e7f3      	b.n	8002a9e <prvInsertBlockIntoFreeList+0x36>
 8002ab6:	bf00      	nop
 8002ab8:	20003cac 	.word	0x20003cac
 8002abc:	2000009c 	.word	0x2000009c

08002ac0 <pvPortMalloc>:
{
 8002ac0:	b570      	push	{r4, r5, r6, lr}
 8002ac2:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8002ac4:	f000 ffee 	bl	8003aa4 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8002ac8:	4b3a      	ldr	r3, [pc, #232]	; (8002bb4 <pvPortMalloc+0xf4>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	b1bb      	cbz	r3, 8002afe <pvPortMalloc+0x3e>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002ace:	4b3a      	ldr	r3, [pc, #232]	; (8002bb8 <pvPortMalloc+0xf8>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	421c      	tst	r4, r3
 8002ad4:	d163      	bne.n	8002b9e <pvPortMalloc+0xde>
			if( xWantedSize > 0 )
 8002ad6:	b1ac      	cbz	r4, 8002b04 <pvPortMalloc+0x44>
				xWantedSize += xHeapStructSize;
 8002ad8:	3408      	adds	r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002ada:	f014 0f07 	tst.w	r4, #7
 8002ade:	d011      	beq.n	8002b04 <pvPortMalloc+0x44>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002ae0:	f024 0407 	bic.w	r4, r4, #7
 8002ae4:	3408      	adds	r4, #8
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002ae6:	f004 0307 	and.w	r3, r4, #7
 8002aea:	b15b      	cbz	r3, 8002b04 <pvPortMalloc+0x44>
 8002aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002af0:	f383 8811 	msr	BASEPRI, r3
 8002af4:	f3bf 8f6f 	isb	sy
 8002af8:	f3bf 8f4f 	dsb	sy
 8002afc:	e7fe      	b.n	8002afc <pvPortMalloc+0x3c>
			prvHeapInit();
 8002afe:	f7ff ff81 	bl	8002a04 <prvHeapInit>
 8002b02:	e7e4      	b.n	8002ace <pvPortMalloc+0xe>
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002b04:	2c00      	cmp	r4, #0
 8002b06:	d04c      	beq.n	8002ba2 <pvPortMalloc+0xe2>
 8002b08:	4b2c      	ldr	r3, [pc, #176]	; (8002bbc <pvPortMalloc+0xfc>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	429c      	cmp	r4, r3
 8002b0e:	d84a      	bhi.n	8002ba6 <pvPortMalloc+0xe6>
				pxBlock = xStart.pxNextFreeBlock;
 8002b10:	4b2b      	ldr	r3, [pc, #172]	; (8002bc0 <pvPortMalloc+0x100>)
 8002b12:	681d      	ldr	r5, [r3, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002b14:	e001      	b.n	8002b1a <pvPortMalloc+0x5a>
					pxPreviousBlock = pxBlock;
 8002b16:	462b      	mov	r3, r5
					pxBlock = pxBlock->pxNextFreeBlock;
 8002b18:	4615      	mov	r5, r2
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002b1a:	686a      	ldr	r2, [r5, #4]
 8002b1c:	4294      	cmp	r4, r2
 8002b1e:	d902      	bls.n	8002b26 <pvPortMalloc+0x66>
 8002b20:	682a      	ldr	r2, [r5, #0]
 8002b22:	2a00      	cmp	r2, #0
 8002b24:	d1f7      	bne.n	8002b16 <pvPortMalloc+0x56>
				if( pxBlock != pxEnd )
 8002b26:	4a23      	ldr	r2, [pc, #140]	; (8002bb4 <pvPortMalloc+0xf4>)
 8002b28:	6812      	ldr	r2, [r2, #0]
 8002b2a:	4295      	cmp	r5, r2
 8002b2c:	d03d      	beq.n	8002baa <pvPortMalloc+0xea>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002b2e:	681e      	ldr	r6, [r3, #0]
 8002b30:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002b32:	682a      	ldr	r2, [r5, #0]
 8002b34:	601a      	str	r2, [r3, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002b36:	686b      	ldr	r3, [r5, #4]
 8002b38:	1b1b      	subs	r3, r3, r4
 8002b3a:	2b10      	cmp	r3, #16
 8002b3c:	d910      	bls.n	8002b60 <pvPortMalloc+0xa0>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002b3e:	1928      	adds	r0, r5, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002b40:	f010 0f07 	tst.w	r0, #7
 8002b44:	d008      	beq.n	8002b58 <pvPortMalloc+0x98>
 8002b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b4a:	f383 8811 	msr	BASEPRI, r3
 8002b4e:	f3bf 8f6f 	isb	sy
 8002b52:	f3bf 8f4f 	dsb	sy
 8002b56:	e7fe      	b.n	8002b56 <pvPortMalloc+0x96>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002b58:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002b5a:	606c      	str	r4, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002b5c:	f7ff ff84 	bl	8002a68 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002b60:	686a      	ldr	r2, [r5, #4]
 8002b62:	4916      	ldr	r1, [pc, #88]	; (8002bbc <pvPortMalloc+0xfc>)
 8002b64:	680b      	ldr	r3, [r1, #0]
 8002b66:	1a9b      	subs	r3, r3, r2
 8002b68:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002b6a:	4916      	ldr	r1, [pc, #88]	; (8002bc4 <pvPortMalloc+0x104>)
 8002b6c:	6809      	ldr	r1, [r1, #0]
 8002b6e:	428b      	cmp	r3, r1
 8002b70:	d201      	bcs.n	8002b76 <pvPortMalloc+0xb6>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002b72:	4914      	ldr	r1, [pc, #80]	; (8002bc4 <pvPortMalloc+0x104>)
 8002b74:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002b76:	4b10      	ldr	r3, [pc, #64]	; (8002bb8 <pvPortMalloc+0xf8>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	606b      	str	r3, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8002b82:	f001 f81b 	bl	8003bbc <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002b86:	f016 0f07 	tst.w	r6, #7
 8002b8a:	d010      	beq.n	8002bae <pvPortMalloc+0xee>
 8002b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b90:	f383 8811 	msr	BASEPRI, r3
 8002b94:	f3bf 8f6f 	isb	sy
 8002b98:	f3bf 8f4f 	dsb	sy
 8002b9c:	e7fe      	b.n	8002b9c <pvPortMalloc+0xdc>
void *pvReturn = NULL;
 8002b9e:	2600      	movs	r6, #0
 8002ba0:	e7ef      	b.n	8002b82 <pvPortMalloc+0xc2>
 8002ba2:	2600      	movs	r6, #0
 8002ba4:	e7ed      	b.n	8002b82 <pvPortMalloc+0xc2>
 8002ba6:	2600      	movs	r6, #0
 8002ba8:	e7eb      	b.n	8002b82 <pvPortMalloc+0xc2>
 8002baa:	2600      	movs	r6, #0
 8002bac:	e7e9      	b.n	8002b82 <pvPortMalloc+0xc2>
}
 8002bae:	4630      	mov	r0, r6
 8002bb0:	bd70      	pop	{r4, r5, r6, pc}
 8002bb2:	bf00      	nop
 8002bb4:	2000009c 	.word	0x2000009c
 8002bb8:	20003ca0 	.word	0x20003ca0
 8002bbc:	20003ca4 	.word	0x20003ca4
 8002bc0:	20003cac 	.word	0x20003cac
 8002bc4:	20003ca8 	.word	0x20003ca8

08002bc8 <vPortFree>:
	if( pv != NULL )
 8002bc8:	b380      	cbz	r0, 8002c2c <vPortFree+0x64>
{
 8002bca:	b538      	push	{r3, r4, r5, lr}
 8002bcc:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 8002bce:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002bd2:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8002bd6:	4916      	ldr	r1, [pc, #88]	; (8002c30 <vPortFree+0x68>)
 8002bd8:	6809      	ldr	r1, [r1, #0]
 8002bda:	420a      	tst	r2, r1
 8002bdc:	d108      	bne.n	8002bf0 <vPortFree+0x28>
 8002bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002be2:	f383 8811 	msr	BASEPRI, r3
 8002be6:	f3bf 8f6f 	isb	sy
 8002bea:	f3bf 8f4f 	dsb	sy
 8002bee:	e7fe      	b.n	8002bee <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002bf0:	f850 0c08 	ldr.w	r0, [r0, #-8]
 8002bf4:	b140      	cbz	r0, 8002c08 <vPortFree+0x40>
 8002bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bfa:	f383 8811 	msr	BASEPRI, r3
 8002bfe:	f3bf 8f6f 	isb	sy
 8002c02:	f3bf 8f4f 	dsb	sy
 8002c06:	e7fe      	b.n	8002c06 <vPortFree+0x3e>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002c08:	ea22 0201 	bic.w	r2, r2, r1
 8002c0c:	f844 2c04 	str.w	r2, [r4, #-4]
				vTaskSuspendAll();
 8002c10:	f000 ff48 	bl	8003aa4 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002c14:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8002c18:	4a06      	ldr	r2, [pc, #24]	; (8002c34 <vPortFree+0x6c>)
 8002c1a:	6813      	ldr	r3, [r2, #0]
 8002c1c:	440b      	add	r3, r1
 8002c1e:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002c20:	4628      	mov	r0, r5
 8002c22:	f7ff ff21 	bl	8002a68 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 8002c26:	f000 ffc9 	bl	8003bbc <xTaskResumeAll>
 8002c2a:	bd38      	pop	{r3, r4, r5, pc}
 8002c2c:	4770      	bx	lr
 8002c2e:	bf00      	nop
 8002c30:	20003ca0 	.word	0x20003ca0
 8002c34:	20003ca4 	.word	0x20003ca4

08002c38 <prvGetDisinheritPriorityAfterTimeout>:
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8002c38:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002c3a:	b123      	cbz	r3, 8002c46 <prvGetDisinheritPriorityAfterTimeout+0xe>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8002c3c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002c3e:	6818      	ldr	r0, [r3, #0]
 8002c40:	f1c0 0007 	rsb	r0, r0, #7
 8002c44:	4770      	bx	lr
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8002c46:	2000      	movs	r0, #0
		}

		return uxHighestPriorityOfWaitingTasks;
	}
 8002c48:	4770      	bx	lr

08002c4a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002c4a:	b510      	push	{r4, lr}
 8002c4c:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002c4e:	f7ff fd81 	bl	8002754 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002c52:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002c54:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d004      	beq.n	8002c64 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 8002c5a:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 8002c5c:	f7ff fd9c 	bl	8002798 <vPortExitCritical>

	return xReturn;
}
 8002c60:	4620      	mov	r0, r4
 8002c62:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 8002c64:	2401      	movs	r4, #1
 8002c66:	e7f9      	b.n	8002c5c <prvIsQueueFull+0x12>

08002c68 <prvIsQueueEmpty>:
{
 8002c68:	b510      	push	{r4, lr}
 8002c6a:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8002c6c:	f7ff fd72 	bl	8002754 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002c70:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002c72:	b123      	cbz	r3, 8002c7e <prvIsQueueEmpty+0x16>
			xReturn = pdFALSE;
 8002c74:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8002c76:	f7ff fd8f 	bl	8002798 <vPortExitCritical>
}
 8002c7a:	4620      	mov	r0, r4
 8002c7c:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 8002c7e:	2401      	movs	r4, #1
 8002c80:	e7f9      	b.n	8002c76 <prvIsQueueEmpty+0xe>

08002c82 <prvCopyDataToQueue>:
{
 8002c82:	b570      	push	{r4, r5, r6, lr}
 8002c84:	4604      	mov	r4, r0
 8002c86:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002c88:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002c8a:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8002c8c:	b94a      	cbnz	r2, 8002ca2 <prvCopyDataToQueue+0x20>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002c8e:	6803      	ldr	r3, [r0, #0]
 8002c90:	bb53      	cbnz	r3, 8002ce8 <prvCopyDataToQueue+0x66>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8002c92:	6840      	ldr	r0, [r0, #4]
 8002c94:	f001 f994 	bl	8003fc0 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	6063      	str	r3, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002c9c:	3501      	adds	r5, #1
 8002c9e:	63a5      	str	r5, [r4, #56]	; 0x38
}
 8002ca0:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8002ca2:	b96e      	cbnz	r6, 8002cc0 <prvCopyDataToQueue+0x3e>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002ca4:	6880      	ldr	r0, [r0, #8]
 8002ca6:	f00a f90e 	bl	800cec6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002caa:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002cac:	68a3      	ldr	r3, [r4, #8]
 8002cae:	4413      	add	r3, r2
 8002cb0:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002cb2:	6862      	ldr	r2, [r4, #4]
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d319      	bcc.n	8002cec <prvCopyDataToQueue+0x6a>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002cb8:	6823      	ldr	r3, [r4, #0]
 8002cba:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 8002cbc:	2000      	movs	r0, #0
 8002cbe:	e7ed      	b.n	8002c9c <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002cc0:	68c0      	ldr	r0, [r0, #12]
 8002cc2:	f00a f900 	bl	800cec6 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002cc6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002cc8:	425b      	negs	r3, r3
 8002cca:	68e2      	ldr	r2, [r4, #12]
 8002ccc:	441a      	add	r2, r3
 8002cce:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002cd0:	6821      	ldr	r1, [r4, #0]
 8002cd2:	428a      	cmp	r2, r1
 8002cd4:	d202      	bcs.n	8002cdc <prvCopyDataToQueue+0x5a>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8002cd6:	6862      	ldr	r2, [r4, #4]
 8002cd8:	4413      	add	r3, r2
 8002cda:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8002cdc:	2e02      	cmp	r6, #2
 8002cde:	d107      	bne.n	8002cf0 <prvCopyDataToQueue+0x6e>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002ce0:	b145      	cbz	r5, 8002cf4 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 8002ce2:	3d01      	subs	r5, #1
BaseType_t xReturn = pdFALSE;
 8002ce4:	2000      	movs	r0, #0
 8002ce6:	e7d9      	b.n	8002c9c <prvCopyDataToQueue+0x1a>
 8002ce8:	2000      	movs	r0, #0
 8002cea:	e7d7      	b.n	8002c9c <prvCopyDataToQueue+0x1a>
 8002cec:	2000      	movs	r0, #0
 8002cee:	e7d5      	b.n	8002c9c <prvCopyDataToQueue+0x1a>
 8002cf0:	2000      	movs	r0, #0
 8002cf2:	e7d3      	b.n	8002c9c <prvCopyDataToQueue+0x1a>
 8002cf4:	2000      	movs	r0, #0
 8002cf6:	e7d1      	b.n	8002c9c <prvCopyDataToQueue+0x1a>

08002cf8 <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002cf8:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8002cfa:	b172      	cbz	r2, 8002d1a <prvCopyDataFromQueue+0x22>
{
 8002cfc:	b510      	push	{r4, lr}
 8002cfe:	4603      	mov	r3, r0
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002d00:	68c4      	ldr	r4, [r0, #12]
 8002d02:	4414      	add	r4, r2
 8002d04:	60c4      	str	r4, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002d06:	6840      	ldr	r0, [r0, #4]
 8002d08:	4284      	cmp	r4, r0
 8002d0a:	d301      	bcc.n	8002d10 <prvCopyDataFromQueue+0x18>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002d0c:	6818      	ldr	r0, [r3, #0]
 8002d0e:	60d8      	str	r0, [r3, #12]
 8002d10:	4608      	mov	r0, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8002d12:	68d9      	ldr	r1, [r3, #12]
 8002d14:	f00a f8d7 	bl	800cec6 <memcpy>
 8002d18:	bd10      	pop	{r4, pc}
 8002d1a:	4770      	bx	lr

08002d1c <prvUnlockQueue>:
{
 8002d1c:	b538      	push	{r3, r4, r5, lr}
 8002d1e:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 8002d20:	f7ff fd18 	bl	8002754 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8002d24:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 8002d28:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002d2a:	e001      	b.n	8002d30 <prvUnlockQueue+0x14>
			--cTxLock;
 8002d2c:	3c01      	subs	r4, #1
 8002d2e:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002d30:	2c00      	cmp	r4, #0
 8002d32:	dd0a      	ble.n	8002d4a <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002d34:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8002d36:	b143      	cbz	r3, 8002d4a <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002d38:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8002d3c:	f001 f838 	bl	8003db0 <xTaskRemoveFromEventList>
 8002d40:	2800      	cmp	r0, #0
 8002d42:	d0f3      	beq.n	8002d2c <prvUnlockQueue+0x10>
						vTaskMissedYield();
 8002d44:	f001 f8c6 	bl	8003ed4 <vTaskMissedYield>
 8002d48:	e7f0      	b.n	8002d2c <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 8002d4a:	23ff      	movs	r3, #255	; 0xff
 8002d4c:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 8002d50:	f7ff fd22 	bl	8002798 <vPortExitCritical>
	taskENTER_CRITICAL();
 8002d54:	f7ff fcfe 	bl	8002754 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8002d58:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 8002d5c:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002d5e:	e001      	b.n	8002d64 <prvUnlockQueue+0x48>
				--cRxLock;
 8002d60:	3c01      	subs	r4, #1
 8002d62:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002d64:	2c00      	cmp	r4, #0
 8002d66:	dd0a      	ble.n	8002d7e <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002d68:	692b      	ldr	r3, [r5, #16]
 8002d6a:	b143      	cbz	r3, 8002d7e <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002d6c:	f105 0010 	add.w	r0, r5, #16
 8002d70:	f001 f81e 	bl	8003db0 <xTaskRemoveFromEventList>
 8002d74:	2800      	cmp	r0, #0
 8002d76:	d0f3      	beq.n	8002d60 <prvUnlockQueue+0x44>
					vTaskMissedYield();
 8002d78:	f001 f8ac 	bl	8003ed4 <vTaskMissedYield>
 8002d7c:	e7f0      	b.n	8002d60 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 8002d7e:	23ff      	movs	r3, #255	; 0xff
 8002d80:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
 8002d84:	f7ff fd08 	bl	8002798 <vPortExitCritical>
 8002d88:	bd38      	pop	{r3, r4, r5, pc}

08002d8a <xQueueGenericReset>:
{
 8002d8a:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 8002d8c:	b1e8      	cbz	r0, 8002dca <xQueueGenericReset+0x40>
 8002d8e:	4604      	mov	r4, r0
 8002d90:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
 8002d92:	f7ff fcdf 	bl	8002754 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002d96:	6821      	ldr	r1, [r4, #0]
 8002d98:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002d9a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002d9c:	fb03 1002 	mla	r0, r3, r2, r1
 8002da0:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002da2:	2000      	movs	r0, #0
 8002da4:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002da6:	60a1      	str	r1, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002da8:	3a01      	subs	r2, #1
 8002daa:	fb02 1303 	mla	r3, r2, r3, r1
 8002dae:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002db0:	23ff      	movs	r3, #255	; 0xff
 8002db2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002db6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8002dba:	b97d      	cbnz	r5, 8002ddc <xQueueGenericReset+0x52>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002dbc:	6923      	ldr	r3, [r4, #16]
 8002dbe:	b1ab      	cbz	r3, 8002dec <xQueueGenericReset+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002dc0:	f104 0010 	add.w	r0, r4, #16
 8002dc4:	f000 fff4 	bl	8003db0 <xTaskRemoveFromEventList>
 8002dc8:	e010      	b.n	8002dec <xQueueGenericReset+0x62>
 8002dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dce:	f383 8811 	msr	BASEPRI, r3
 8002dd2:	f3bf 8f6f 	isb	sy
 8002dd6:	f3bf 8f4f 	dsb	sy
 8002dda:	e7fe      	b.n	8002dda <xQueueGenericReset+0x50>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002ddc:	f104 0010 	add.w	r0, r4, #16
 8002de0:	f7ff fc03 	bl	80025ea <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002de4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002de8:	f7ff fbff 	bl	80025ea <vListInitialise>
	taskEXIT_CRITICAL();
 8002dec:	f7ff fcd4 	bl	8002798 <vPortExitCritical>
}
 8002df0:	2001      	movs	r0, #1
 8002df2:	bd38      	pop	{r3, r4, r5, pc}

08002df4 <prvInitialiseNewQueue>:
{
 8002df4:	b510      	push	{r4, lr}
 8002df6:	9b02      	ldr	r3, [sp, #8]
	if( uxItemSize == ( UBaseType_t ) 0 )
 8002df8:	460c      	mov	r4, r1
 8002dfa:	b139      	cbz	r1, 8002e0c <prvInitialiseNewQueue+0x18>
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002dfc:	601a      	str	r2, [r3, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8002dfe:	63d8      	str	r0, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002e00:	641c      	str	r4, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002e02:	2101      	movs	r1, #1
 8002e04:	4618      	mov	r0, r3
 8002e06:	f7ff ffc0 	bl	8002d8a <xQueueGenericReset>
 8002e0a:	bd10      	pop	{r4, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002e0c:	601b      	str	r3, [r3, #0]
 8002e0e:	e7f6      	b.n	8002dfe <prvInitialiseNewQueue+0xa>

08002e10 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002e10:	b940      	cbnz	r0, 8002e24 <xQueueGenericCreateStatic+0x14>
 8002e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e16:	f383 8811 	msr	BASEPRI, r3
 8002e1a:	f3bf 8f6f 	isb	sy
 8002e1e:	f3bf 8f4f 	dsb	sy
 8002e22:	e7fe      	b.n	8002e22 <xQueueGenericCreateStatic+0x12>
	{
 8002e24:	b510      	push	{r4, lr}
 8002e26:	b084      	sub	sp, #16
 8002e28:	4604      	mov	r4, r0
		configASSERT( pxStaticQueue != NULL );
 8002e2a:	b163      	cbz	r3, 8002e46 <xQueueGenericCreateStatic+0x36>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002e2c:	b1a2      	cbz	r2, 8002e58 <xQueueGenericCreateStatic+0x48>
 8002e2e:	b1a9      	cbz	r1, 8002e5c <xQueueGenericCreateStatic+0x4c>
 8002e30:	2001      	movs	r0, #1
 8002e32:	b9a8      	cbnz	r0, 8002e60 <xQueueGenericCreateStatic+0x50>
 8002e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e38:	f383 8811 	msr	BASEPRI, r3
 8002e3c:	f3bf 8f6f 	isb	sy
 8002e40:	f3bf 8f4f 	dsb	sy
 8002e44:	e7fe      	b.n	8002e44 <xQueueGenericCreateStatic+0x34>
 8002e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e4a:	f383 8811 	msr	BASEPRI, r3
 8002e4e:	f3bf 8f6f 	isb	sy
 8002e52:	f3bf 8f4f 	dsb	sy
 8002e56:	e7fe      	b.n	8002e56 <xQueueGenericCreateStatic+0x46>
 8002e58:	2001      	movs	r0, #1
 8002e5a:	e7ea      	b.n	8002e32 <xQueueGenericCreateStatic+0x22>
 8002e5c:	2000      	movs	r0, #0
 8002e5e:	e7e8      	b.n	8002e32 <xQueueGenericCreateStatic+0x22>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002e60:	b90a      	cbnz	r2, 8002e66 <xQueueGenericCreateStatic+0x56>
 8002e62:	b101      	cbz	r1, 8002e66 <xQueueGenericCreateStatic+0x56>
 8002e64:	2000      	movs	r0, #0
 8002e66:	b940      	cbnz	r0, 8002e7a <xQueueGenericCreateStatic+0x6a>
 8002e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e6c:	f383 8811 	msr	BASEPRI, r3
 8002e70:	f3bf 8f6f 	isb	sy
 8002e74:	f3bf 8f4f 	dsb	sy
 8002e78:	e7fe      	b.n	8002e78 <xQueueGenericCreateStatic+0x68>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002e7a:	2048      	movs	r0, #72	; 0x48
 8002e7c:	9003      	str	r0, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002e7e:	9803      	ldr	r0, [sp, #12]
 8002e80:	2848      	cmp	r0, #72	; 0x48
 8002e82:	d008      	beq.n	8002e96 <xQueueGenericCreateStatic+0x86>
 8002e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e88:	f383 8811 	msr	BASEPRI, r3
 8002e8c:	f3bf 8f6f 	isb	sy
 8002e90:	f3bf 8f4f 	dsb	sy
 8002e94:	e7fe      	b.n	8002e94 <xQueueGenericCreateStatic+0x84>
 8002e96:	4620      	mov	r0, r4
 8002e98:	461c      	mov	r4, r3
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002ea0:	9400      	str	r4, [sp, #0]
 8002ea2:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8002ea6:	f7ff ffa5 	bl	8002df4 <prvInitialiseNewQueue>
	}
 8002eaa:	4620      	mov	r0, r4
 8002eac:	b004      	add	sp, #16
 8002eae:	bd10      	pop	{r4, pc}

08002eb0 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002eb0:	b940      	cbnz	r0, 8002ec4 <xQueueGenericCreate+0x14>
 8002eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eb6:	f383 8811 	msr	BASEPRI, r3
 8002eba:	f3bf 8f6f 	isb	sy
 8002ebe:	f3bf 8f4f 	dsb	sy
 8002ec2:	e7fe      	b.n	8002ec2 <xQueueGenericCreate+0x12>
	{
 8002ec4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ec6:	b083      	sub	sp, #12
 8002ec8:	4606      	mov	r6, r0
		if( uxItemSize == ( UBaseType_t ) 0 )
 8002eca:	b111      	cbz	r1, 8002ed2 <xQueueGenericCreate+0x22>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ecc:	fb01 f000 	mul.w	r0, r1, r0
 8002ed0:	e000      	b.n	8002ed4 <xQueueGenericCreate+0x24>
			xQueueSizeInBytes = ( size_t ) 0;
 8002ed2:	2000      	movs	r0, #0
 8002ed4:	4617      	mov	r7, r2
 8002ed6:	460c      	mov	r4, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8002ed8:	3048      	adds	r0, #72	; 0x48
 8002eda:	f7ff fdf1 	bl	8002ac0 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8002ede:	4605      	mov	r5, r0
 8002ee0:	b150      	cbz	r0, 8002ef8 <xQueueGenericCreate+0x48>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002ee8:	9000      	str	r0, [sp, #0]
 8002eea:	463b      	mov	r3, r7
 8002eec:	f100 0248 	add.w	r2, r0, #72	; 0x48
 8002ef0:	4621      	mov	r1, r4
 8002ef2:	4630      	mov	r0, r6
 8002ef4:	f7ff ff7e 	bl	8002df4 <prvInitialiseNewQueue>
	}
 8002ef8:	4628      	mov	r0, r5
 8002efa:	b003      	add	sp, #12
 8002efc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002f00 <xQueueGenericSend>:
{
 8002f00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f02:	b085      	sub	sp, #20
 8002f04:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8002f06:	b160      	cbz	r0, 8002f22 <xQueueGenericSend+0x22>
 8002f08:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002f0a:	b199      	cbz	r1, 8002f34 <xQueueGenericSend+0x34>
 8002f0c:	2501      	movs	r5, #1
 8002f0e:	b9bd      	cbnz	r5, 8002f40 <xQueueGenericSend+0x40>
 8002f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f14:	f383 8811 	msr	BASEPRI, r3
 8002f18:	f3bf 8f6f 	isb	sy
 8002f1c:	f3bf 8f4f 	dsb	sy
 8002f20:	e7fe      	b.n	8002f20 <xQueueGenericSend+0x20>
 8002f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f26:	f383 8811 	msr	BASEPRI, r3
 8002f2a:	f3bf 8f6f 	isb	sy
 8002f2e:	f3bf 8f4f 	dsb	sy
 8002f32:	e7fe      	b.n	8002f32 <xQueueGenericSend+0x32>
 8002f34:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8002f36:	b90a      	cbnz	r2, 8002f3c <xQueueGenericSend+0x3c>
 8002f38:	2501      	movs	r5, #1
 8002f3a:	e7e8      	b.n	8002f0e <xQueueGenericSend+0xe>
 8002f3c:	2500      	movs	r5, #0
 8002f3e:	e7e6      	b.n	8002f0e <xQueueGenericSend+0xe>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002f40:	2b02      	cmp	r3, #2
 8002f42:	d009      	beq.n	8002f58 <xQueueGenericSend+0x58>
 8002f44:	b96d      	cbnz	r5, 8002f62 <xQueueGenericSend+0x62>
 8002f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f4a:	f383 8811 	msr	BASEPRI, r3
 8002f4e:	f3bf 8f6f 	isb	sy
 8002f52:	f3bf 8f4f 	dsb	sy
 8002f56:	e7fe      	b.n	8002f56 <xQueueGenericSend+0x56>
 8002f58:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002f5a:	2a01      	cmp	r2, #1
 8002f5c:	d0f2      	beq.n	8002f44 <xQueueGenericSend+0x44>
 8002f5e:	2500      	movs	r5, #0
 8002f60:	e7f0      	b.n	8002f44 <xQueueGenericSend+0x44>
 8002f62:	461e      	mov	r6, r3
 8002f64:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002f66:	f000 ffbb 	bl	8003ee0 <xTaskGetSchedulerState>
 8002f6a:	b910      	cbnz	r0, 8002f72 <xQueueGenericSend+0x72>
 8002f6c:	9b01      	ldr	r3, [sp, #4]
 8002f6e:	b103      	cbz	r3, 8002f72 <xQueueGenericSend+0x72>
 8002f70:	2500      	movs	r5, #0
 8002f72:	b945      	cbnz	r5, 8002f86 <xQueueGenericSend+0x86>
 8002f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f78:	f383 8811 	msr	BASEPRI, r3
 8002f7c:	f3bf 8f6f 	isb	sy
 8002f80:	f3bf 8f4f 	dsb	sy
 8002f84:	e7fe      	b.n	8002f84 <xQueueGenericSend+0x84>
 8002f86:	2500      	movs	r5, #0
 8002f88:	e018      	b.n	8002fbc <xQueueGenericSend+0xbc>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002f8a:	4632      	mov	r2, r6
 8002f8c:	4639      	mov	r1, r7
 8002f8e:	4620      	mov	r0, r4
 8002f90:	f7ff fe77 	bl	8002c82 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002f94:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002f96:	b11b      	cbz	r3, 8002fa0 <xQueueGenericSend+0xa0>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002f98:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002f9c:	f000 ff08 	bl	8003db0 <xTaskRemoveFromEventList>
				taskEXIT_CRITICAL();
 8002fa0:	f7ff fbfa 	bl	8002798 <vPortExitCritical>
				return pdPASS;
 8002fa4:	2001      	movs	r0, #1
}
 8002fa6:	b005      	add	sp, #20
 8002fa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
					taskEXIT_CRITICAL();
 8002faa:	f7ff fbf5 	bl	8002798 <vPortExitCritical>
					return errQUEUE_FULL;
 8002fae:	2000      	movs	r0, #0
 8002fb0:	e7f9      	b.n	8002fa6 <xQueueGenericSend+0xa6>
				prvUnlockQueue( pxQueue );
 8002fb2:	4620      	mov	r0, r4
 8002fb4:	f7ff feb2 	bl	8002d1c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002fb8:	f000 fe00 	bl	8003bbc <xTaskResumeAll>
		taskENTER_CRITICAL();
 8002fbc:	f7ff fbca 	bl	8002754 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002fc0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002fc2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d3e0      	bcc.n	8002f8a <xQueueGenericSend+0x8a>
 8002fc8:	2e02      	cmp	r6, #2
 8002fca:	d0de      	beq.n	8002f8a <xQueueGenericSend+0x8a>
				if( xTicksToWait == ( TickType_t ) 0 )
 8002fcc:	9b01      	ldr	r3, [sp, #4]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d0eb      	beq.n	8002faa <xQueueGenericSend+0xaa>
				else if( xEntryTimeSet == pdFALSE )
 8002fd2:	b91d      	cbnz	r5, 8002fdc <xQueueGenericSend+0xdc>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002fd4:	a802      	add	r0, sp, #8
 8002fd6:	f000 ff31 	bl	8003e3c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002fda:	2501      	movs	r5, #1
		taskEXIT_CRITICAL();
 8002fdc:	f7ff fbdc 	bl	8002798 <vPortExitCritical>
		vTaskSuspendAll();
 8002fe0:	f000 fd60 	bl	8003aa4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002fe4:	f7ff fbb6 	bl	8002754 <vPortEnterCritical>
 8002fe8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8002fec:	b25b      	sxtb	r3, r3
 8002fee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ff2:	d102      	bne.n	8002ffa <xQueueGenericSend+0xfa>
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8002ffa:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8002ffe:	b25b      	sxtb	r3, r3
 8003000:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003004:	d102      	bne.n	800300c <xQueueGenericSend+0x10c>
 8003006:	2300      	movs	r3, #0
 8003008:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800300c:	f7ff fbc4 	bl	8002798 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003010:	a901      	add	r1, sp, #4
 8003012:	a802      	add	r0, sp, #8
 8003014:	f000 ff1e 	bl	8003e54 <xTaskCheckForTimeOut>
 8003018:	b9c8      	cbnz	r0, 800304e <xQueueGenericSend+0x14e>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800301a:	4620      	mov	r0, r4
 800301c:	f7ff fe15 	bl	8002c4a <prvIsQueueFull>
 8003020:	2800      	cmp	r0, #0
 8003022:	d0c6      	beq.n	8002fb2 <xQueueGenericSend+0xb2>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003024:	9901      	ldr	r1, [sp, #4]
 8003026:	f104 0010 	add.w	r0, r4, #16
 800302a:	f000 fea9 	bl	8003d80 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800302e:	4620      	mov	r0, r4
 8003030:	f7ff fe74 	bl	8002d1c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003034:	f000 fdc2 	bl	8003bbc <xTaskResumeAll>
 8003038:	2800      	cmp	r0, #0
 800303a:	d1bf      	bne.n	8002fbc <xQueueGenericSend+0xbc>
					portYIELD_WITHIN_API();
 800303c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003040:	4b06      	ldr	r3, [pc, #24]	; (800305c <xQueueGenericSend+0x15c>)
 8003042:	601a      	str	r2, [r3, #0]
 8003044:	f3bf 8f4f 	dsb	sy
 8003048:	f3bf 8f6f 	isb	sy
 800304c:	e7b6      	b.n	8002fbc <xQueueGenericSend+0xbc>
			prvUnlockQueue( pxQueue );
 800304e:	4620      	mov	r0, r4
 8003050:	f7ff fe64 	bl	8002d1c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003054:	f000 fdb2 	bl	8003bbc <xTaskResumeAll>
			return errQUEUE_FULL;
 8003058:	2000      	movs	r0, #0
 800305a:	e7a4      	b.n	8002fa6 <xQueueGenericSend+0xa6>
 800305c:	e000ed04 	.word	0xe000ed04

08003060 <prvInitialiseMutex>:
		if( pxNewQueue != NULL )
 8003060:	b148      	cbz	r0, 8003076 <prvInitialiseMutex+0x16>
	{
 8003062:	b508      	push	{r3, lr}
			pxNewQueue->pxMutexHolder = NULL;
 8003064:	2100      	movs	r1, #0
 8003066:	6041      	str	r1, [r0, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8003068:	6001      	str	r1, [r0, #0]
			pxNewQueue->u.uxRecursiveCallCount = 0;
 800306a:	60c1      	str	r1, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800306c:	460b      	mov	r3, r1
 800306e:	460a      	mov	r2, r1
 8003070:	f7ff ff46 	bl	8002f00 <xQueueGenericSend>
 8003074:	bd08      	pop	{r3, pc}
 8003076:	4770      	bx	lr

08003078 <xQueueCreateMutex>:
	{
 8003078:	b510      	push	{r4, lr}
		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800307a:	4602      	mov	r2, r0
 800307c:	2100      	movs	r1, #0
 800307e:	2001      	movs	r0, #1
 8003080:	f7ff ff16 	bl	8002eb0 <xQueueGenericCreate>
 8003084:	4604      	mov	r4, r0
		prvInitialiseMutex( pxNewQueue );
 8003086:	f7ff ffeb 	bl	8003060 <prvInitialiseMutex>
	}
 800308a:	4620      	mov	r0, r4
 800308c:	bd10      	pop	{r4, pc}

0800308e <xQueueCreateMutexStatic>:
	{
 800308e:	b510      	push	{r4, lr}
 8003090:	b082      	sub	sp, #8
		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8003092:	9000      	str	r0, [sp, #0]
 8003094:	460b      	mov	r3, r1
 8003096:	2200      	movs	r2, #0
 8003098:	4611      	mov	r1, r2
 800309a:	2001      	movs	r0, #1
 800309c:	f7ff feb8 	bl	8002e10 <xQueueGenericCreateStatic>
 80030a0:	4604      	mov	r4, r0
		prvInitialiseMutex( pxNewQueue );
 80030a2:	f7ff ffdd 	bl	8003060 <prvInitialiseMutex>
	}
 80030a6:	4620      	mov	r0, r4
 80030a8:	b002      	add	sp, #8
 80030aa:	bd10      	pop	{r4, pc}

080030ac <xQueueGenericSendFromISR>:
{
 80030ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 80030b0:	b160      	cbz	r0, 80030cc <xQueueGenericSendFromISR+0x20>
 80030b2:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80030b4:	b199      	cbz	r1, 80030de <xQueueGenericSendFromISR+0x32>
 80030b6:	2001      	movs	r0, #1
 80030b8:	b9b8      	cbnz	r0, 80030ea <xQueueGenericSendFromISR+0x3e>
 80030ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030be:	f383 8811 	msr	BASEPRI, r3
 80030c2:	f3bf 8f6f 	isb	sy
 80030c6:	f3bf 8f4f 	dsb	sy
 80030ca:	e7fe      	b.n	80030ca <xQueueGenericSendFromISR+0x1e>
 80030cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030d0:	f383 8811 	msr	BASEPRI, r3
 80030d4:	f3bf 8f6f 	isb	sy
 80030d8:	f3bf 8f4f 	dsb	sy
 80030dc:	e7fe      	b.n	80030dc <xQueueGenericSendFromISR+0x30>
 80030de:	6c00      	ldr	r0, [r0, #64]	; 0x40
 80030e0:	b908      	cbnz	r0, 80030e6 <xQueueGenericSendFromISR+0x3a>
 80030e2:	2001      	movs	r0, #1
 80030e4:	e7e8      	b.n	80030b8 <xQueueGenericSendFromISR+0xc>
 80030e6:	2000      	movs	r0, #0
 80030e8:	e7e6      	b.n	80030b8 <xQueueGenericSendFromISR+0xc>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	d009      	beq.n	8003102 <xQueueGenericSendFromISR+0x56>
 80030ee:	b968      	cbnz	r0, 800310c <xQueueGenericSendFromISR+0x60>
 80030f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030f4:	f383 8811 	msr	BASEPRI, r3
 80030f8:	f3bf 8f6f 	isb	sy
 80030fc:	f3bf 8f4f 	dsb	sy
 8003100:	e7fe      	b.n	8003100 <xQueueGenericSendFromISR+0x54>
 8003102:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8003104:	2d01      	cmp	r5, #1
 8003106:	d0f2      	beq.n	80030ee <xQueueGenericSendFromISR+0x42>
 8003108:	2000      	movs	r0, #0
 800310a:	e7f0      	b.n	80030ee <xQueueGenericSendFromISR+0x42>
 800310c:	461f      	mov	r7, r3
 800310e:	4690      	mov	r8, r2
 8003110:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003112:	f7ff fc49 	bl	80029a8 <vPortValidateInterruptPriority>
	__asm volatile
 8003116:	f3ef 8611 	mrs	r6, BASEPRI
 800311a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800311e:	f383 8811 	msr	BASEPRI, r3
 8003122:	f3bf 8f6f 	isb	sy
 8003126:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800312a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800312c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800312e:	429a      	cmp	r2, r3
 8003130:	d301      	bcc.n	8003136 <xQueueGenericSendFromISR+0x8a>
 8003132:	2f02      	cmp	r7, #2
 8003134:	d121      	bne.n	800317a <xQueueGenericSendFromISR+0xce>
			const int8_t cTxLock = pxQueue->cTxLock;
 8003136:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 800313a:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800313c:	463a      	mov	r2, r7
 800313e:	4649      	mov	r1, r9
 8003140:	4620      	mov	r0, r4
 8003142:	f7ff fd9e 	bl	8002c82 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8003146:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 800314a:	d110      	bne.n	800316e <xQueueGenericSendFromISR+0xc2>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800314c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800314e:	b1b3      	cbz	r3, 800317e <xQueueGenericSendFromISR+0xd2>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003150:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003154:	f000 fe2c 	bl	8003db0 <xTaskRemoveFromEventList>
 8003158:	b198      	cbz	r0, 8003182 <xQueueGenericSendFromISR+0xd6>
							if( pxHigherPriorityTaskWoken != NULL )
 800315a:	f1b8 0f00 	cmp.w	r8, #0
 800315e:	d012      	beq.n	8003186 <xQueueGenericSendFromISR+0xda>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003160:	2001      	movs	r0, #1
 8003162:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 8003166:	f386 8811 	msr	BASEPRI, r6
}
 800316a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800316e:	1c6b      	adds	r3, r5, #1
 8003170:	b25b      	sxtb	r3, r3
 8003172:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
 8003176:	2001      	movs	r0, #1
 8003178:	e7f5      	b.n	8003166 <xQueueGenericSendFromISR+0xba>
			xReturn = errQUEUE_FULL;
 800317a:	2000      	movs	r0, #0
 800317c:	e7f3      	b.n	8003166 <xQueueGenericSendFromISR+0xba>
			xReturn = pdPASS;
 800317e:	2001      	movs	r0, #1
 8003180:	e7f1      	b.n	8003166 <xQueueGenericSendFromISR+0xba>
 8003182:	2001      	movs	r0, #1
 8003184:	e7ef      	b.n	8003166 <xQueueGenericSendFromISR+0xba>
 8003186:	2001      	movs	r0, #1
 8003188:	e7ed      	b.n	8003166 <xQueueGenericSendFromISR+0xba>

0800318a <xQueueGiveFromISR>:
	configASSERT( pxQueue );
 800318a:	b160      	cbz	r0, 80031a6 <xQueueGiveFromISR+0x1c>
{
 800318c:	b570      	push	{r4, r5, r6, lr}
 800318e:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 8003190:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003192:	b18b      	cbz	r3, 80031b8 <xQueueGiveFromISR+0x2e>
	__asm volatile
 8003194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003198:	f383 8811 	msr	BASEPRI, r3
 800319c:	f3bf 8f6f 	isb	sy
 80031a0:	f3bf 8f4f 	dsb	sy
 80031a4:	e7fe      	b.n	80031a4 <xQueueGiveFromISR+0x1a>
 80031a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031aa:	f383 8811 	msr	BASEPRI, r3
 80031ae:	f3bf 8f6f 	isb	sy
 80031b2:	f3bf 8f4f 	dsb	sy
 80031b6:	e7fe      	b.n	80031b6 <xQueueGiveFromISR+0x2c>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 80031b8:	6803      	ldr	r3, [r0, #0]
 80031ba:	b153      	cbz	r3, 80031d2 <xQueueGiveFromISR+0x48>
 80031bc:	2301      	movs	r3, #1
 80031be:	b973      	cbnz	r3, 80031de <xQueueGiveFromISR+0x54>
 80031c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031c4:	f383 8811 	msr	BASEPRI, r3
 80031c8:	f3bf 8f6f 	isb	sy
 80031cc:	f3bf 8f4f 	dsb	sy
 80031d0:	e7fe      	b.n	80031d0 <xQueueGiveFromISR+0x46>
 80031d2:	6843      	ldr	r3, [r0, #4]
 80031d4:	b90b      	cbnz	r3, 80031da <xQueueGiveFromISR+0x50>
 80031d6:	2301      	movs	r3, #1
 80031d8:	e7f1      	b.n	80031be <xQueueGiveFromISR+0x34>
 80031da:	2300      	movs	r3, #0
 80031dc:	e7ef      	b.n	80031be <xQueueGiveFromISR+0x34>
 80031de:	460e      	mov	r6, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80031e0:	f7ff fbe2 	bl	80029a8 <vPortValidateInterruptPriority>
	__asm volatile
 80031e4:	f3ef 8511 	mrs	r5, BASEPRI
 80031e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031ec:	f383 8811 	msr	BASEPRI, r3
 80031f0:	f3bf 8f6f 	isb	sy
 80031f4:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80031f8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 80031fa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d21a      	bcs.n	8003236 <xQueueGiveFromISR+0xac>
			const int8_t cTxLock = pxQueue->cTxLock;
 8003200:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8003204:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003206:	3201      	adds	r2, #1
 8003208:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 800320a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800320e:	d10c      	bne.n	800322a <xQueueGiveFromISR+0xa0>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003210:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003212:	b193      	cbz	r3, 800323a <xQueueGiveFromISR+0xb0>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003214:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003218:	f000 fdca 	bl	8003db0 <xTaskRemoveFromEventList>
 800321c:	b178      	cbz	r0, 800323e <xQueueGiveFromISR+0xb4>
							if( pxHigherPriorityTaskWoken != NULL )
 800321e:	b186      	cbz	r6, 8003242 <xQueueGiveFromISR+0xb8>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003220:	2001      	movs	r0, #1
 8003222:	6030      	str	r0, [r6, #0]
	__asm volatile
 8003224:	f385 8811 	msr	BASEPRI, r5
}
 8003228:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800322a:	3301      	adds	r3, #1
 800322c:	b25b      	sxtb	r3, r3
 800322e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
 8003232:	2001      	movs	r0, #1
 8003234:	e7f6      	b.n	8003224 <xQueueGiveFromISR+0x9a>
			xReturn = errQUEUE_FULL;
 8003236:	2000      	movs	r0, #0
 8003238:	e7f4      	b.n	8003224 <xQueueGiveFromISR+0x9a>
			xReturn = pdPASS;
 800323a:	2001      	movs	r0, #1
 800323c:	e7f2      	b.n	8003224 <xQueueGiveFromISR+0x9a>
 800323e:	2001      	movs	r0, #1
 8003240:	e7f0      	b.n	8003224 <xQueueGiveFromISR+0x9a>
 8003242:	2001      	movs	r0, #1
 8003244:	e7ee      	b.n	8003224 <xQueueGiveFromISR+0x9a>
	...

08003248 <xQueueReceive>:
{
 8003248:	b5f0      	push	{r4, r5, r6, r7, lr}
 800324a:	b085      	sub	sp, #20
 800324c:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 800324e:	b160      	cbz	r0, 800326a <xQueueReceive+0x22>
 8003250:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003252:	b199      	cbz	r1, 800327c <xQueueReceive+0x34>
 8003254:	2501      	movs	r5, #1
 8003256:	b9bd      	cbnz	r5, 8003288 <xQueueReceive+0x40>
	__asm volatile
 8003258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800325c:	f383 8811 	msr	BASEPRI, r3
 8003260:	f3bf 8f6f 	isb	sy
 8003264:	f3bf 8f4f 	dsb	sy
 8003268:	e7fe      	b.n	8003268 <xQueueReceive+0x20>
 800326a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800326e:	f383 8811 	msr	BASEPRI, r3
 8003272:	f3bf 8f6f 	isb	sy
 8003276:	f3bf 8f4f 	dsb	sy
 800327a:	e7fe      	b.n	800327a <xQueueReceive+0x32>
 800327c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800327e:	b90b      	cbnz	r3, 8003284 <xQueueReceive+0x3c>
 8003280:	2501      	movs	r5, #1
 8003282:	e7e8      	b.n	8003256 <xQueueReceive+0xe>
 8003284:	2500      	movs	r5, #0
 8003286:	e7e6      	b.n	8003256 <xQueueReceive+0xe>
 8003288:	460e      	mov	r6, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800328a:	f000 fe29 	bl	8003ee0 <xTaskGetSchedulerState>
 800328e:	b910      	cbnz	r0, 8003296 <xQueueReceive+0x4e>
 8003290:	9b01      	ldr	r3, [sp, #4]
 8003292:	b103      	cbz	r3, 8003296 <xQueueReceive+0x4e>
 8003294:	2500      	movs	r5, #0
 8003296:	b945      	cbnz	r5, 80032aa <xQueueReceive+0x62>
 8003298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800329c:	f383 8811 	msr	BASEPRI, r3
 80032a0:	f3bf 8f6f 	isb	sy
 80032a4:	f3bf 8f4f 	dsb	sy
 80032a8:	e7fe      	b.n	80032a8 <xQueueReceive+0x60>
 80032aa:	2700      	movs	r7, #0
 80032ac:	e026      	b.n	80032fc <xQueueReceive+0xb4>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80032ae:	4631      	mov	r1, r6
 80032b0:	4620      	mov	r0, r4
 80032b2:	f7ff fd21 	bl	8002cf8 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80032b6:	3d01      	subs	r5, #1
 80032b8:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80032ba:	6923      	ldr	r3, [r4, #16]
 80032bc:	b11b      	cbz	r3, 80032c6 <xQueueReceive+0x7e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80032be:	f104 0010 	add.w	r0, r4, #16
 80032c2:	f000 fd75 	bl	8003db0 <xTaskRemoveFromEventList>
				taskEXIT_CRITICAL();
 80032c6:	f7ff fa67 	bl	8002798 <vPortExitCritical>
				return pdPASS;
 80032ca:	2001      	movs	r0, #1
}
 80032cc:	b005      	add	sp, #20
 80032ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
					taskEXIT_CRITICAL();
 80032d0:	f7ff fa62 	bl	8002798 <vPortExitCritical>
					return errQUEUE_EMPTY;
 80032d4:	2000      	movs	r0, #0
 80032d6:	e7f9      	b.n	80032cc <xQueueReceive+0x84>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80032d8:	a802      	add	r0, sp, #8
 80032da:	f000 fdaf 	bl	8003e3c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80032de:	2701      	movs	r7, #1
 80032e0:	e016      	b.n	8003310 <xQueueReceive+0xc8>
		prvLockQueue( pxQueue );
 80032e2:	2300      	movs	r3, #0
 80032e4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80032e8:	e01e      	b.n	8003328 <xQueueReceive+0xe0>
 80032ea:	2300      	movs	r3, #0
 80032ec:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80032f0:	e020      	b.n	8003334 <xQueueReceive+0xec>
				prvUnlockQueue( pxQueue );
 80032f2:	4620      	mov	r0, r4
 80032f4:	f7ff fd12 	bl	8002d1c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80032f8:	f000 fc60 	bl	8003bbc <xTaskResumeAll>
		taskENTER_CRITICAL();
 80032fc:	f7ff fa2a 	bl	8002754 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003300:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003302:	2d00      	cmp	r5, #0
 8003304:	d1d3      	bne.n	80032ae <xQueueReceive+0x66>
				if( xTicksToWait == ( TickType_t ) 0 )
 8003306:	9b01      	ldr	r3, [sp, #4]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d0e1      	beq.n	80032d0 <xQueueReceive+0x88>
				else if( xEntryTimeSet == pdFALSE )
 800330c:	2f00      	cmp	r7, #0
 800330e:	d0e3      	beq.n	80032d8 <xQueueReceive+0x90>
		taskEXIT_CRITICAL();
 8003310:	f7ff fa42 	bl	8002798 <vPortExitCritical>
		vTaskSuspendAll();
 8003314:	f000 fbc6 	bl	8003aa4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003318:	f7ff fa1c 	bl	8002754 <vPortEnterCritical>
 800331c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8003320:	b25b      	sxtb	r3, r3
 8003322:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003326:	d0dc      	beq.n	80032e2 <xQueueReceive+0x9a>
 8003328:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800332c:	b25b      	sxtb	r3, r3
 800332e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003332:	d0da      	beq.n	80032ea <xQueueReceive+0xa2>
 8003334:	f7ff fa30 	bl	8002798 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003338:	a901      	add	r1, sp, #4
 800333a:	a802      	add	r0, sp, #8
 800333c:	f000 fd8a 	bl	8003e54 <xTaskCheckForTimeOut>
 8003340:	b9c8      	cbnz	r0, 8003376 <xQueueReceive+0x12e>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003342:	4620      	mov	r0, r4
 8003344:	f7ff fc90 	bl	8002c68 <prvIsQueueEmpty>
 8003348:	2800      	cmp	r0, #0
 800334a:	d0d2      	beq.n	80032f2 <xQueueReceive+0xaa>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800334c:	9901      	ldr	r1, [sp, #4]
 800334e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003352:	f000 fd15 	bl	8003d80 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003356:	4620      	mov	r0, r4
 8003358:	f7ff fce0 	bl	8002d1c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800335c:	f000 fc2e 	bl	8003bbc <xTaskResumeAll>
 8003360:	2800      	cmp	r0, #0
 8003362:	d1cb      	bne.n	80032fc <xQueueReceive+0xb4>
					portYIELD_WITHIN_API();
 8003364:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003368:	4b09      	ldr	r3, [pc, #36]	; (8003390 <xQueueReceive+0x148>)
 800336a:	601a      	str	r2, [r3, #0]
 800336c:	f3bf 8f4f 	dsb	sy
 8003370:	f3bf 8f6f 	isb	sy
 8003374:	e7c2      	b.n	80032fc <xQueueReceive+0xb4>
			prvUnlockQueue( pxQueue );
 8003376:	4620      	mov	r0, r4
 8003378:	f7ff fcd0 	bl	8002d1c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800337c:	f000 fc1e 	bl	8003bbc <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003380:	4620      	mov	r0, r4
 8003382:	f7ff fc71 	bl	8002c68 <prvIsQueueEmpty>
 8003386:	2800      	cmp	r0, #0
 8003388:	d0b8      	beq.n	80032fc <xQueueReceive+0xb4>
				return errQUEUE_EMPTY;
 800338a:	2000      	movs	r0, #0
 800338c:	e79e      	b.n	80032cc <xQueueReceive+0x84>
 800338e:	bf00      	nop
 8003390:	e000ed04 	.word	0xe000ed04

08003394 <xQueueSemaphoreTake>:
{
 8003394:	b570      	push	{r4, r5, r6, lr}
 8003396:	b084      	sub	sp, #16
 8003398:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 800339a:	b158      	cbz	r0, 80033b4 <xQueueSemaphoreTake+0x20>
 800339c:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 800339e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80033a0:	b18b      	cbz	r3, 80033c6 <xQueueSemaphoreTake+0x32>
 80033a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033a6:	f383 8811 	msr	BASEPRI, r3
 80033aa:	f3bf 8f6f 	isb	sy
 80033ae:	f3bf 8f4f 	dsb	sy
 80033b2:	e7fe      	b.n	80033b2 <xQueueSemaphoreTake+0x1e>
 80033b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033b8:	f383 8811 	msr	BASEPRI, r3
 80033bc:	f3bf 8f6f 	isb	sy
 80033c0:	f3bf 8f4f 	dsb	sy
 80033c4:	e7fe      	b.n	80033c4 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80033c6:	f000 fd8b 	bl	8003ee0 <xTaskGetSchedulerState>
 80033ca:	b960      	cbnz	r0, 80033e6 <xQueueSemaphoreTake+0x52>
 80033cc:	9b01      	ldr	r3, [sp, #4]
 80033ce:	b963      	cbnz	r3, 80033ea <xQueueSemaphoreTake+0x56>
 80033d0:	2301      	movs	r3, #1
 80033d2:	b963      	cbnz	r3, 80033ee <xQueueSemaphoreTake+0x5a>
 80033d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033d8:	f383 8811 	msr	BASEPRI, r3
 80033dc:	f3bf 8f6f 	isb	sy
 80033e0:	f3bf 8f4f 	dsb	sy
 80033e4:	e7fe      	b.n	80033e4 <xQueueSemaphoreTake+0x50>
 80033e6:	2301      	movs	r3, #1
 80033e8:	e7f3      	b.n	80033d2 <xQueueSemaphoreTake+0x3e>
 80033ea:	2300      	movs	r3, #0
 80033ec:	e7f1      	b.n	80033d2 <xQueueSemaphoreTake+0x3e>
 80033ee:	2500      	movs	r5, #0
 80033f0:	462e      	mov	r6, r5
 80033f2:	e045      	b.n	8003480 <xQueueSemaphoreTake+0xec>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80033f4:	3b01      	subs	r3, #1
 80033f6:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80033f8:	6823      	ldr	r3, [r4, #0]
 80033fa:	b913      	cbnz	r3, 8003402 <xQueueSemaphoreTake+0x6e>
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80033fc:	f000 fea0 	bl	8004140 <pvTaskIncrementMutexHeldCount>
 8003400:	6060      	str	r0, [r4, #4]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003402:	6923      	ldr	r3, [r4, #16]
 8003404:	b11b      	cbz	r3, 800340e <xQueueSemaphoreTake+0x7a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003406:	f104 0010 	add.w	r0, r4, #16
 800340a:	f000 fcd1 	bl	8003db0 <xTaskRemoveFromEventList>
				taskEXIT_CRITICAL();
 800340e:	f7ff f9c3 	bl	8002798 <vPortExitCritical>
				return pdPASS;
 8003412:	2501      	movs	r5, #1
}
 8003414:	4628      	mov	r0, r5
 8003416:	b004      	add	sp, #16
 8003418:	bd70      	pop	{r4, r5, r6, pc}
						configASSERT( xInheritanceOccurred == pdFALSE );
 800341a:	b145      	cbz	r5, 800342e <xQueueSemaphoreTake+0x9a>
 800341c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003420:	f383 8811 	msr	BASEPRI, r3
 8003424:	f3bf 8f6f 	isb	sy
 8003428:	f3bf 8f4f 	dsb	sy
 800342c:	e7fe      	b.n	800342c <xQueueSemaphoreTake+0x98>
					taskEXIT_CRITICAL();
 800342e:	f7ff f9b3 	bl	8002798 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8003432:	e7ef      	b.n	8003414 <xQueueSemaphoreTake+0x80>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003434:	a802      	add	r0, sp, #8
 8003436:	f000 fd01 	bl	8003e3c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800343a:	2601      	movs	r6, #1
 800343c:	e02a      	b.n	8003494 <xQueueSemaphoreTake+0x100>
		prvLockQueue( pxQueue );
 800343e:	2300      	movs	r3, #0
 8003440:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8003444:	e032      	b.n	80034ac <xQueueSemaphoreTake+0x118>
 8003446:	2300      	movs	r3, #0
 8003448:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800344c:	e034      	b.n	80034b8 <xQueueSemaphoreTake+0x124>
						taskENTER_CRITICAL();
 800344e:	f7ff f981 	bl	8002754 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8003452:	6860      	ldr	r0, [r4, #4]
 8003454:	f000 fd54 	bl	8003f00 <xTaskPriorityInherit>
 8003458:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 800345a:	f7ff f99d 	bl	8002798 <vPortExitCritical>
 800345e:	e03b      	b.n	80034d8 <xQueueSemaphoreTake+0x144>
				prvUnlockQueue( pxQueue );
 8003460:	4620      	mov	r0, r4
 8003462:	f7ff fc5b 	bl	8002d1c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003466:	f000 fba9 	bl	8003bbc <xTaskResumeAll>
 800346a:	e009      	b.n	8003480 <xQueueSemaphoreTake+0xec>
			prvUnlockQueue( pxQueue );
 800346c:	4620      	mov	r0, r4
 800346e:	f7ff fc55 	bl	8002d1c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003472:	f000 fba3 	bl	8003bbc <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003476:	4620      	mov	r0, r4
 8003478:	f7ff fbf6 	bl	8002c68 <prvIsQueueEmpty>
 800347c:	2800      	cmp	r0, #0
 800347e:	d140      	bne.n	8003502 <xQueueSemaphoreTake+0x16e>
		taskENTER_CRITICAL();
 8003480:	f7ff f968 	bl	8002754 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003484:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003486:	2b00      	cmp	r3, #0
 8003488:	d1b4      	bne.n	80033f4 <xQueueSemaphoreTake+0x60>
				if( xTicksToWait == ( TickType_t ) 0 )
 800348a:	9b01      	ldr	r3, [sp, #4]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d0c4      	beq.n	800341a <xQueueSemaphoreTake+0x86>
				else if( xEntryTimeSet == pdFALSE )
 8003490:	2e00      	cmp	r6, #0
 8003492:	d0cf      	beq.n	8003434 <xQueueSemaphoreTake+0xa0>
		taskEXIT_CRITICAL();
 8003494:	f7ff f980 	bl	8002798 <vPortExitCritical>
		vTaskSuspendAll();
 8003498:	f000 fb04 	bl	8003aa4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800349c:	f7ff f95a 	bl	8002754 <vPortEnterCritical>
 80034a0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80034a4:	b25b      	sxtb	r3, r3
 80034a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80034aa:	d0c8      	beq.n	800343e <xQueueSemaphoreTake+0xaa>
 80034ac:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80034b0:	b25b      	sxtb	r3, r3
 80034b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80034b6:	d0c6      	beq.n	8003446 <xQueueSemaphoreTake+0xb2>
 80034b8:	f7ff f96e 	bl	8002798 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80034bc:	a901      	add	r1, sp, #4
 80034be:	a802      	add	r0, sp, #8
 80034c0:	f000 fcc8 	bl	8003e54 <xTaskCheckForTimeOut>
 80034c4:	2800      	cmp	r0, #0
 80034c6:	d1d1      	bne.n	800346c <xQueueSemaphoreTake+0xd8>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80034c8:	4620      	mov	r0, r4
 80034ca:	f7ff fbcd 	bl	8002c68 <prvIsQueueEmpty>
 80034ce:	2800      	cmp	r0, #0
 80034d0:	d0c6      	beq.n	8003460 <xQueueSemaphoreTake+0xcc>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80034d2:	6823      	ldr	r3, [r4, #0]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d0ba      	beq.n	800344e <xQueueSemaphoreTake+0xba>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80034d8:	9901      	ldr	r1, [sp, #4]
 80034da:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80034de:	f000 fc4f 	bl	8003d80 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80034e2:	4620      	mov	r0, r4
 80034e4:	f7ff fc1a 	bl	8002d1c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80034e8:	f000 fb68 	bl	8003bbc <xTaskResumeAll>
 80034ec:	2800      	cmp	r0, #0
 80034ee:	d1c7      	bne.n	8003480 <xQueueSemaphoreTake+0xec>
					portYIELD_WITHIN_API();
 80034f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034f4:	4b0a      	ldr	r3, [pc, #40]	; (8003520 <xQueueSemaphoreTake+0x18c>)
 80034f6:	601a      	str	r2, [r3, #0]
 80034f8:	f3bf 8f4f 	dsb	sy
 80034fc:	f3bf 8f6f 	isb	sy
 8003500:	e7be      	b.n	8003480 <xQueueSemaphoreTake+0xec>
					if( xInheritanceOccurred != pdFALSE )
 8003502:	2d00      	cmp	r5, #0
 8003504:	d086      	beq.n	8003414 <xQueueSemaphoreTake+0x80>
						taskENTER_CRITICAL();
 8003506:	f7ff f925 	bl	8002754 <vPortEnterCritical>
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800350a:	4620      	mov	r0, r4
 800350c:	f7ff fb94 	bl	8002c38 <prvGetDisinheritPriorityAfterTimeout>
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8003510:	4601      	mov	r1, r0
 8003512:	6860      	ldr	r0, [r4, #4]
 8003514:	f000 fdae 	bl	8004074 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 8003518:	f7ff f93e 	bl	8002798 <vPortExitCritical>
				return errQUEUE_EMPTY;
 800351c:	2500      	movs	r5, #0
 800351e:	e779      	b.n	8003414 <xQueueSemaphoreTake+0x80>
 8003520:	e000ed04 	.word	0xe000ed04

08003524 <xQueueReceiveFromISR>:
{
 8003524:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8003528:	b160      	cbz	r0, 8003544 <xQueueReceiveFromISR+0x20>
 800352a:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800352c:	b199      	cbz	r1, 8003556 <xQueueReceiveFromISR+0x32>
 800352e:	2301      	movs	r3, #1
 8003530:	b9bb      	cbnz	r3, 8003562 <xQueueReceiveFromISR+0x3e>
 8003532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003536:	f383 8811 	msr	BASEPRI, r3
 800353a:	f3bf 8f6f 	isb	sy
 800353e:	f3bf 8f4f 	dsb	sy
 8003542:	e7fe      	b.n	8003542 <xQueueReceiveFromISR+0x1e>
 8003544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003548:	f383 8811 	msr	BASEPRI, r3
 800354c:	f3bf 8f6f 	isb	sy
 8003550:	f3bf 8f4f 	dsb	sy
 8003554:	e7fe      	b.n	8003554 <xQueueReceiveFromISR+0x30>
 8003556:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003558:	b90b      	cbnz	r3, 800355e <xQueueReceiveFromISR+0x3a>
 800355a:	2301      	movs	r3, #1
 800355c:	e7e8      	b.n	8003530 <xQueueReceiveFromISR+0xc>
 800355e:	2300      	movs	r3, #0
 8003560:	e7e6      	b.n	8003530 <xQueueReceiveFromISR+0xc>
 8003562:	4617      	mov	r7, r2
 8003564:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003566:	f7ff fa1f 	bl	80029a8 <vPortValidateInterruptPriority>
	__asm volatile
 800356a:	f3ef 8611 	mrs	r6, BASEPRI
 800356e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003572:	f383 8811 	msr	BASEPRI, r3
 8003576:	f3bf 8f6f 	isb	sy
 800357a:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800357e:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003582:	f1b8 0f00 	cmp.w	r8, #0
 8003586:	d020      	beq.n	80035ca <xQueueReceiveFromISR+0xa6>
			const int8_t cRxLock = pxQueue->cRxLock;
 8003588:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 800358c:	b26d      	sxtb	r5, r5
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800358e:	4649      	mov	r1, r9
 8003590:	4620      	mov	r0, r4
 8003592:	f7ff fbb1 	bl	8002cf8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003596:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 800359a:	63a3      	str	r3, [r4, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 800359c:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 80035a0:	d10d      	bne.n	80035be <xQueueReceiveFromISR+0x9a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80035a2:	6923      	ldr	r3, [r4, #16]
 80035a4:	b19b      	cbz	r3, 80035ce <xQueueReceiveFromISR+0xaa>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80035a6:	f104 0010 	add.w	r0, r4, #16
 80035aa:	f000 fc01 	bl	8003db0 <xTaskRemoveFromEventList>
 80035ae:	b180      	cbz	r0, 80035d2 <xQueueReceiveFromISR+0xae>
						if( pxHigherPriorityTaskWoken != NULL )
 80035b0:	b18f      	cbz	r7, 80035d6 <xQueueReceiveFromISR+0xb2>
							*pxHigherPriorityTaskWoken = pdTRUE;
 80035b2:	2001      	movs	r0, #1
 80035b4:	6038      	str	r0, [r7, #0]
	__asm volatile
 80035b6:	f386 8811 	msr	BASEPRI, r6
}
 80035ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80035be:	1c6b      	adds	r3, r5, #1
 80035c0:	b25b      	sxtb	r3, r3
 80035c2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
			xReturn = pdPASS;
 80035c6:	2001      	movs	r0, #1
 80035c8:	e7f5      	b.n	80035b6 <xQueueReceiveFromISR+0x92>
			xReturn = pdFAIL;
 80035ca:	2000      	movs	r0, #0
 80035cc:	e7f3      	b.n	80035b6 <xQueueReceiveFromISR+0x92>
			xReturn = pdPASS;
 80035ce:	2001      	movs	r0, #1
 80035d0:	e7f1      	b.n	80035b6 <xQueueReceiveFromISR+0x92>
 80035d2:	2001      	movs	r0, #1
 80035d4:	e7ef      	b.n	80035b6 <xQueueReceiveFromISR+0x92>
 80035d6:	2001      	movs	r0, #1
 80035d8:	e7ed      	b.n	80035b6 <xQueueReceiveFromISR+0x92>

080035da <uxQueueMessagesWaiting>:
	configASSERT( xQueue );
 80035da:	b940      	cbnz	r0, 80035ee <uxQueueMessagesWaiting+0x14>
	__asm volatile
 80035dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035e0:	f383 8811 	msr	BASEPRI, r3
 80035e4:	f3bf 8f6f 	isb	sy
 80035e8:	f3bf 8f4f 	dsb	sy
 80035ec:	e7fe      	b.n	80035ec <uxQueueMessagesWaiting+0x12>
{
 80035ee:	b510      	push	{r4, lr}
 80035f0:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80035f2:	f7ff f8af 	bl	8002754 <vPortEnterCritical>
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80035f6:	6ba4      	ldr	r4, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 80035f8:	f7ff f8ce 	bl	8002798 <vPortExitCritical>
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80035fc:	4620      	mov	r0, r4
 80035fe:	bd10      	pop	{r4, pc}

08003600 <uxQueueMessagesWaitingFromISR>:
	configASSERT( xQueue );
 8003600:	b108      	cbz	r0, 8003606 <uxQueueMessagesWaitingFromISR+0x6>
	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8003602:	6b80      	ldr	r0, [r0, #56]	; 0x38
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8003604:	4770      	bx	lr
 8003606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800360a:	f383 8811 	msr	BASEPRI, r3
 800360e:	f3bf 8f6f 	isb	sy
 8003612:	f3bf 8f4f 	dsb	sy
 8003616:	e7fe      	b.n	8003616 <uxQueueMessagesWaitingFromISR+0x16>

08003618 <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003618:	2300      	movs	r3, #0
 800361a:	2b07      	cmp	r3, #7
 800361c:	d80f      	bhi.n	800363e <vQueueUnregisterQueue+0x26>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800361e:	4a08      	ldr	r2, [pc, #32]	; (8003640 <vQueueUnregisterQueue+0x28>)
 8003620:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8003624:	6852      	ldr	r2, [r2, #4]
 8003626:	4282      	cmp	r2, r0
 8003628:	d001      	beq.n	800362e <vQueueUnregisterQueue+0x16>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800362a:	3301      	adds	r3, #1
 800362c:	e7f5      	b.n	800361a <vQueueUnregisterQueue+0x2>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800362e:	4a04      	ldr	r2, [pc, #16]	; (8003640 <vQueueUnregisterQueue+0x28>)
 8003630:	2100      	movs	r1, #0
 8003632:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8003636:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800363a:	6059      	str	r1, [r3, #4]
				break;
 800363c:	4770      	bx	lr
 800363e:	4770      	bx	lr
 8003640:	20004228 	.word	0x20004228

08003644 <vQueueDelete>:
	configASSERT( pxQueue );
 8003644:	b150      	cbz	r0, 800365c <vQueueDelete+0x18>
{
 8003646:	b510      	push	{r4, lr}
 8003648:	4604      	mov	r4, r0
		vQueueUnregisterQueue( pxQueue );
 800364a:	f7ff ffe5 	bl	8003618 <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800364e:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8003652:	b913      	cbnz	r3, 800365a <vQueueDelete+0x16>
			vPortFree( pxQueue );
 8003654:	4620      	mov	r0, r4
 8003656:	f7ff fab7 	bl	8002bc8 <vPortFree>
 800365a:	bd10      	pop	{r4, pc}
 800365c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003660:	f383 8811 	msr	BASEPRI, r3
 8003664:	f3bf 8f6f 	isb	sy
 8003668:	f3bf 8f4f 	dsb	sy
 800366c:	e7fe      	b.n	800366c <vQueueDelete+0x28>
	...

08003670 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003670:	4b0a      	ldr	r3, [pc, #40]	; (800369c <prvResetNextTaskUnblockTime+0x2c>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	b94b      	cbnz	r3, 800368c <prvResetNextTaskUnblockTime+0x1c>
 8003678:	2301      	movs	r3, #1
 800367a:	b94b      	cbnz	r3, 8003690 <prvResetNextTaskUnblockTime+0x20>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800367c:	4b07      	ldr	r3, [pc, #28]	; (800369c <prvResetNextTaskUnblockTime+0x2c>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	68db      	ldr	r3, [r3, #12]
 8003682:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003684:	685a      	ldr	r2, [r3, #4]
 8003686:	4b06      	ldr	r3, [pc, #24]	; (80036a0 <prvResetNextTaskUnblockTime+0x30>)
 8003688:	601a      	str	r2, [r3, #0]
 800368a:	4770      	bx	lr
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800368c:	2300      	movs	r3, #0
 800368e:	e7f4      	b.n	800367a <prvResetNextTaskUnblockTime+0xa>
		xNextTaskUnblockTime = portMAX_DELAY;
 8003690:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003694:	4b02      	ldr	r3, [pc, #8]	; (80036a0 <prvResetNextTaskUnblockTime+0x30>)
 8003696:	601a      	str	r2, [r3, #0]
 8003698:	4770      	bx	lr
 800369a:	bf00      	nop
 800369c:	20003cb8 	.word	0x20003cb8
 80036a0:	20003d8c 	.word	0x20003d8c

080036a4 <prvInitialiseNewTask>:
{
 80036a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80036a8:	4680      	mov	r8, r0
 80036aa:	4699      	mov	r9, r3
 80036ac:	9d08      	ldr	r5, [sp, #32]
 80036ae:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80036b0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80036b2:	6b26      	ldr	r6, [r4, #48]	; 0x30
 80036b4:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80036b8:	3a01      	subs	r2, #1
 80036ba:	eb06 0682 	add.w	r6, r6, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80036be:	f026 0607 	bic.w	r6, r6, #7
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80036c2:	2300      	movs	r3, #0
 80036c4:	2b0f      	cmp	r3, #15
 80036c6:	d807      	bhi.n	80036d8 <prvInitialiseNewTask+0x34>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80036c8:	5cc8      	ldrb	r0, [r1, r3]
 80036ca:	18e2      	adds	r2, r4, r3
 80036cc:	f882 0034 	strb.w	r0, [r2, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
 80036d0:	5cca      	ldrb	r2, [r1, r3]
 80036d2:	b10a      	cbz	r2, 80036d8 <prvInitialiseNewTask+0x34>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80036d4:	3301      	adds	r3, #1
 80036d6:	e7f5      	b.n	80036c4 <prvInitialiseNewTask+0x20>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80036d8:	2300      	movs	r3, #0
 80036da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80036de:	2d06      	cmp	r5, #6
 80036e0:	d900      	bls.n	80036e4 <prvInitialiseNewTask+0x40>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80036e2:	2506      	movs	r5, #6
	pxNewTCB->uxPriority = uxPriority;
 80036e4:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 80036e6:	6465      	str	r5, [r4, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80036e8:	f04f 0a00 	mov.w	sl, #0
 80036ec:	f8c4 a048 	str.w	sl, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80036f0:	1d20      	adds	r0, r4, #4
 80036f2:	f7fe ff85 	bl	8002600 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80036f6:	f104 0018 	add.w	r0, r4, #24
 80036fa:	f7fe ff81 	bl	8002600 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80036fe:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003700:	f1c5 0507 	rsb	r5, r5, #7
 8003704:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003706:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
 8003708:	f8c4 a04c 	str.w	sl, [r4, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800370c:	f884 a050 	strb.w	sl, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003710:	464a      	mov	r2, r9
 8003712:	4641      	mov	r1, r8
 8003714:	4630      	mov	r0, r6
 8003716:	f7fe ffef 	bl	80026f8 <pxPortInitialiseStack>
 800371a:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 800371c:	b107      	cbz	r7, 8003720 <prvInitialiseNewTask+0x7c>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800371e:	603c      	str	r4, [r7, #0]
 8003720:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08003724 <prvInitialiseTaskLists>:
{
 8003724:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003726:	2400      	movs	r4, #0
 8003728:	e007      	b.n	800373a <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800372a:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 800372e:	0093      	lsls	r3, r2, #2
 8003730:	480e      	ldr	r0, [pc, #56]	; (800376c <prvInitialiseTaskLists+0x48>)
 8003732:	4418      	add	r0, r3
 8003734:	f7fe ff59 	bl	80025ea <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003738:	3401      	adds	r4, #1
 800373a:	2c06      	cmp	r4, #6
 800373c:	d9f5      	bls.n	800372a <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 800373e:	4d0c      	ldr	r5, [pc, #48]	; (8003770 <prvInitialiseTaskLists+0x4c>)
 8003740:	4628      	mov	r0, r5
 8003742:	f7fe ff52 	bl	80025ea <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003746:	4c0b      	ldr	r4, [pc, #44]	; (8003774 <prvInitialiseTaskLists+0x50>)
 8003748:	4620      	mov	r0, r4
 800374a:	f7fe ff4e 	bl	80025ea <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800374e:	480a      	ldr	r0, [pc, #40]	; (8003778 <prvInitialiseTaskLists+0x54>)
 8003750:	f7fe ff4b 	bl	80025ea <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8003754:	4809      	ldr	r0, [pc, #36]	; (800377c <prvInitialiseTaskLists+0x58>)
 8003756:	f7fe ff48 	bl	80025ea <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800375a:	4809      	ldr	r0, [pc, #36]	; (8003780 <prvInitialiseTaskLists+0x5c>)
 800375c:	f7fe ff45 	bl	80025ea <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8003760:	4b08      	ldr	r3, [pc, #32]	; (8003784 <prvInitialiseTaskLists+0x60>)
 8003762:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003764:	4b08      	ldr	r3, [pc, #32]	; (8003788 <prvInitialiseTaskLists+0x64>)
 8003766:	601c      	str	r4, [r3, #0]
 8003768:	bd38      	pop	{r3, r4, r5, pc}
 800376a:	bf00      	nop
 800376c:	20003cc0 	.word	0x20003cc0
 8003770:	20003d64 	.word	0x20003d64
 8003774:	20003d78 	.word	0x20003d78
 8003778:	20003d94 	.word	0x20003d94
 800377c:	20003dc0 	.word	0x20003dc0
 8003780:	20003dac 	.word	0x20003dac
 8003784:	20003cb8 	.word	0x20003cb8
 8003788:	20003cbc 	.word	0x20003cbc

0800378c <prvAddNewTaskToReadyList>:
{
 800378c:	b510      	push	{r4, lr}
 800378e:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8003790:	f7fe ffe0 	bl	8002754 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8003794:	4a1a      	ldr	r2, [pc, #104]	; (8003800 <prvAddNewTaskToReadyList+0x74>)
 8003796:	6813      	ldr	r3, [r2, #0]
 8003798:	3301      	adds	r3, #1
 800379a:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800379c:	4b19      	ldr	r3, [pc, #100]	; (8003804 <prvAddNewTaskToReadyList+0x78>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	b32b      	cbz	r3, 80037ee <prvAddNewTaskToReadyList+0x62>
			if( xSchedulerRunning == pdFALSE )
 80037a2:	4b19      	ldr	r3, [pc, #100]	; (8003808 <prvAddNewTaskToReadyList+0x7c>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	b93b      	cbnz	r3, 80037b8 <prvAddNewTaskToReadyList+0x2c>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80037a8:	4b16      	ldr	r3, [pc, #88]	; (8003804 <prvAddNewTaskToReadyList+0x78>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037ae:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d801      	bhi.n	80037b8 <prvAddNewTaskToReadyList+0x2c>
					pxCurrentTCB = pxNewTCB;
 80037b4:	4b13      	ldr	r3, [pc, #76]	; (8003804 <prvAddNewTaskToReadyList+0x78>)
 80037b6:	601c      	str	r4, [r3, #0]
		uxTaskNumber++;
 80037b8:	4a14      	ldr	r2, [pc, #80]	; (800380c <prvAddNewTaskToReadyList+0x80>)
 80037ba:	6813      	ldr	r3, [r2, #0]
 80037bc:	3301      	adds	r3, #1
 80037be:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80037c0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80037c2:	2201      	movs	r2, #1
 80037c4:	409a      	lsls	r2, r3
 80037c6:	4912      	ldr	r1, [pc, #72]	; (8003810 <prvAddNewTaskToReadyList+0x84>)
 80037c8:	6808      	ldr	r0, [r1, #0]
 80037ca:	4302      	orrs	r2, r0
 80037cc:	600a      	str	r2, [r1, #0]
 80037ce:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80037d2:	009a      	lsls	r2, r3, #2
 80037d4:	1d21      	adds	r1, r4, #4
 80037d6:	480f      	ldr	r0, [pc, #60]	; (8003814 <prvAddNewTaskToReadyList+0x88>)
 80037d8:	4410      	add	r0, r2
 80037da:	f7fe ff14 	bl	8002606 <vListInsertEnd>
	taskEXIT_CRITICAL();
 80037de:	f7fe ffdb 	bl	8002798 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 80037e2:	4b09      	ldr	r3, [pc, #36]	; (8003808 <prvAddNewTaskToReadyList+0x7c>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	b10b      	cbz	r3, 80037ec <prvAddNewTaskToReadyList+0x60>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80037e8:	4b06      	ldr	r3, [pc, #24]	; (8003804 <prvAddNewTaskToReadyList+0x78>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	bd10      	pop	{r4, pc}
			pxCurrentTCB = pxNewTCB;
 80037ee:	4b05      	ldr	r3, [pc, #20]	; (8003804 <prvAddNewTaskToReadyList+0x78>)
 80037f0:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80037f2:	6813      	ldr	r3, [r2, #0]
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d1df      	bne.n	80037b8 <prvAddNewTaskToReadyList+0x2c>
				prvInitialiseTaskLists();
 80037f8:	f7ff ff94 	bl	8003724 <prvInitialiseTaskLists>
 80037fc:	e7dc      	b.n	80037b8 <prvAddNewTaskToReadyList+0x2c>
 80037fe:	bf00      	nop
 8003800:	20003d4c 	.word	0x20003d4c
 8003804:	20003cb4 	.word	0x20003cb4
 8003808:	20003da8 	.word	0x20003da8
 800380c:	20003d5c 	.word	0x20003d5c
 8003810:	20003d60 	.word	0x20003d60
 8003814:	20003cc0 	.word	0x20003cc0

08003818 <prvDeleteTCB>:
	{
 8003818:	b510      	push	{r4, lr}
 800381a:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800381c:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8003820:	b163      	cbz	r3, 800383c <prvDeleteTCB+0x24>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003822:	2b01      	cmp	r3, #1
 8003824:	d011      	beq.n	800384a <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003826:	2b02      	cmp	r3, #2
 8003828:	d012      	beq.n	8003850 <prvDeleteTCB+0x38>
 800382a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800382e:	f383 8811 	msr	BASEPRI, r3
 8003832:	f3bf 8f6f 	isb	sy
 8003836:	f3bf 8f4f 	dsb	sy
 800383a:	e7fe      	b.n	800383a <prvDeleteTCB+0x22>
				vPortFree( pxTCB->pxStack );
 800383c:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800383e:	f7ff f9c3 	bl	8002bc8 <vPortFree>
				vPortFree( pxTCB );
 8003842:	4620      	mov	r0, r4
 8003844:	f7ff f9c0 	bl	8002bc8 <vPortFree>
 8003848:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 800384a:	f7ff f9bd 	bl	8002bc8 <vPortFree>
 800384e:	bd10      	pop	{r4, pc}
 8003850:	bd10      	pop	{r4, pc}
	...

08003854 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003854:	4b0f      	ldr	r3, [pc, #60]	; (8003894 <prvCheckTasksWaitingTermination+0x40>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	b1d3      	cbz	r3, 8003890 <prvCheckTasksWaitingTermination+0x3c>
{
 800385a:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 800385c:	f7fe ff7a 	bl	8002754 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003860:	4b0d      	ldr	r3, [pc, #52]	; (8003898 <prvCheckTasksWaitingTermination+0x44>)
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003866:	1d20      	adds	r0, r4, #4
 8003868:	f7fe fef3 	bl	8002652 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800386c:	4a0b      	ldr	r2, [pc, #44]	; (800389c <prvCheckTasksWaitingTermination+0x48>)
 800386e:	6813      	ldr	r3, [r2, #0]
 8003870:	3b01      	subs	r3, #1
 8003872:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003874:	4a07      	ldr	r2, [pc, #28]	; (8003894 <prvCheckTasksWaitingTermination+0x40>)
 8003876:	6813      	ldr	r3, [r2, #0]
 8003878:	3b01      	subs	r3, #1
 800387a:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 800387c:	f7fe ff8c 	bl	8002798 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8003880:	4620      	mov	r0, r4
 8003882:	f7ff ffc9 	bl	8003818 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003886:	4b03      	ldr	r3, [pc, #12]	; (8003894 <prvCheckTasksWaitingTermination+0x40>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d1e6      	bne.n	800385c <prvCheckTasksWaitingTermination+0x8>
}
 800388e:	bd10      	pop	{r4, pc}
 8003890:	4770      	bx	lr
 8003892:	bf00      	nop
 8003894:	20003d50 	.word	0x20003d50
 8003898:	20003dc0 	.word	0x20003dc0
 800389c:	20003d4c 	.word	0x20003d4c

080038a0 <prvIdleTask>:
{
 80038a0:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 80038a2:	f7ff ffd7 	bl	8003854 <prvCheckTasksWaitingTermination>
			taskYIELD();
 80038a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038aa:	4b03      	ldr	r3, [pc, #12]	; (80038b8 <prvIdleTask+0x18>)
 80038ac:	601a      	str	r2, [r3, #0]
 80038ae:	f3bf 8f4f 	dsb	sy
 80038b2:	f3bf 8f6f 	isb	sy
 80038b6:	e7f4      	b.n	80038a2 <prvIdleTask+0x2>
 80038b8:	e000ed04 	.word	0xe000ed04

080038bc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80038bc:	b570      	push	{r4, r5, r6, lr}
 80038be:	4604      	mov	r4, r0
 80038c0:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80038c2:	4b1d      	ldr	r3, [pc, #116]	; (8003938 <prvAddCurrentTaskToDelayedList+0x7c>)
 80038c4:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80038c6:	4b1d      	ldr	r3, [pc, #116]	; (800393c <prvAddCurrentTaskToDelayedList+0x80>)
 80038c8:	6818      	ldr	r0, [r3, #0]
 80038ca:	3004      	adds	r0, #4
 80038cc:	f7fe fec1 	bl	8002652 <uxListRemove>
 80038d0:	b950      	cbnz	r0, 80038e8 <prvAddCurrentTaskToDelayedList+0x2c>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80038d2:	4b1a      	ldr	r3, [pc, #104]	; (800393c <prvAddCurrentTaskToDelayedList+0x80>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038d8:	2301      	movs	r3, #1
 80038da:	fa03 f202 	lsl.w	r2, r3, r2
 80038de:	4918      	ldr	r1, [pc, #96]	; (8003940 <prvAddCurrentTaskToDelayedList+0x84>)
 80038e0:	680b      	ldr	r3, [r1, #0]
 80038e2:	ea23 0302 	bic.w	r3, r3, r2
 80038e6:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80038e8:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 80038ec:	d013      	beq.n	8003916 <prvAddCurrentTaskToDelayedList+0x5a>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 80038ee:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80038f0:	4b12      	ldr	r3, [pc, #72]	; (800393c <prvAddCurrentTaskToDelayedList+0x80>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 80038f6:	42a5      	cmp	r5, r4
 80038f8:	d816      	bhi.n	8003928 <prvAddCurrentTaskToDelayedList+0x6c>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80038fa:	4b12      	ldr	r3, [pc, #72]	; (8003944 <prvAddCurrentTaskToDelayedList+0x88>)
 80038fc:	6818      	ldr	r0, [r3, #0]
 80038fe:	4b0f      	ldr	r3, [pc, #60]	; (800393c <prvAddCurrentTaskToDelayedList+0x80>)
 8003900:	6819      	ldr	r1, [r3, #0]
 8003902:	3104      	adds	r1, #4
 8003904:	f7fe fe8b 	bl	800261e <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 8003908:	4b0f      	ldr	r3, [pc, #60]	; (8003948 <prvAddCurrentTaskToDelayedList+0x8c>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	429c      	cmp	r4, r3
 800390e:	d201      	bcs.n	8003914 <prvAddCurrentTaskToDelayedList+0x58>
				{
					xNextTaskUnblockTime = xTimeToWake;
 8003910:	4b0d      	ldr	r3, [pc, #52]	; (8003948 <prvAddCurrentTaskToDelayedList+0x8c>)
 8003912:	601c      	str	r4, [r3, #0]
 8003914:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003916:	2e00      	cmp	r6, #0
 8003918:	d0e9      	beq.n	80038ee <prvAddCurrentTaskToDelayedList+0x32>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800391a:	4b08      	ldr	r3, [pc, #32]	; (800393c <prvAddCurrentTaskToDelayedList+0x80>)
 800391c:	6819      	ldr	r1, [r3, #0]
 800391e:	3104      	adds	r1, #4
 8003920:	480a      	ldr	r0, [pc, #40]	; (800394c <prvAddCurrentTaskToDelayedList+0x90>)
 8003922:	f7fe fe70 	bl	8002606 <vListInsertEnd>
 8003926:	bd70      	pop	{r4, r5, r6, pc}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003928:	4b09      	ldr	r3, [pc, #36]	; (8003950 <prvAddCurrentTaskToDelayedList+0x94>)
 800392a:	6818      	ldr	r0, [r3, #0]
 800392c:	4b03      	ldr	r3, [pc, #12]	; (800393c <prvAddCurrentTaskToDelayedList+0x80>)
 800392e:	6819      	ldr	r1, [r3, #0]
 8003930:	3104      	adds	r1, #4
 8003932:	f7fe fe74 	bl	800261e <vListInsert>
 8003936:	bd70      	pop	{r4, r5, r6, pc}
 8003938:	20003dd4 	.word	0x20003dd4
 800393c:	20003cb4 	.word	0x20003cb4
 8003940:	20003d60 	.word	0x20003d60
 8003944:	20003cb8 	.word	0x20003cb8
 8003948:	20003d8c 	.word	0x20003d8c
 800394c:	20003dac 	.word	0x20003dac
 8003950:	20003cbc 	.word	0x20003cbc

08003954 <xTaskCreateStatic>:
	{
 8003954:	b570      	push	{r4, r5, r6, lr}
 8003956:	b086      	sub	sp, #24
 8003958:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800395a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
 800395c:	b175      	cbz	r5, 800397c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800395e:	b1b4      	cbz	r4, 800398e <xTaskCreateStatic+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 8003960:	2654      	movs	r6, #84	; 0x54
 8003962:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003964:	9e04      	ldr	r6, [sp, #16]
 8003966:	2e54      	cmp	r6, #84	; 0x54
 8003968:	d01a      	beq.n	80039a0 <xTaskCreateStatic+0x4c>
 800396a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800396e:	f383 8811 	msr	BASEPRI, r3
 8003972:	f3bf 8f6f 	isb	sy
 8003976:	f3bf 8f4f 	dsb	sy
 800397a:	e7fe      	b.n	800397a <xTaskCreateStatic+0x26>
 800397c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003980:	f383 8811 	msr	BASEPRI, r3
 8003984:	f3bf 8f6f 	isb	sy
 8003988:	f3bf 8f4f 	dsb	sy
 800398c:	e7fe      	b.n	800398c <xTaskCreateStatic+0x38>
 800398e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003992:	f383 8811 	msr	BASEPRI, r3
 8003996:	f3bf 8f6f 	isb	sy
 800399a:	f3bf 8f4f 	dsb	sy
 800399e:	e7fe      	b.n	800399e <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80039a0:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80039a2:	2502      	movs	r5, #2
 80039a4:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80039a8:	2500      	movs	r5, #0
 80039aa:	9503      	str	r5, [sp, #12]
 80039ac:	9402      	str	r4, [sp, #8]
 80039ae:	ad05      	add	r5, sp, #20
 80039b0:	9501      	str	r5, [sp, #4]
 80039b2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80039b4:	9500      	str	r5, [sp, #0]
 80039b6:	f7ff fe75 	bl	80036a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80039ba:	4620      	mov	r0, r4
 80039bc:	f7ff fee6 	bl	800378c <prvAddNewTaskToReadyList>
	}
 80039c0:	9805      	ldr	r0, [sp, #20]
 80039c2:	b006      	add	sp, #24
 80039c4:	bd70      	pop	{r4, r5, r6, pc}

080039c6 <xTaskCreate>:
	{
 80039c6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80039ca:	b085      	sub	sp, #20
 80039cc:	4606      	mov	r6, r0
 80039ce:	460f      	mov	r7, r1
 80039d0:	4615      	mov	r5, r2
 80039d2:	4698      	mov	r8, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80039d4:	0090      	lsls	r0, r2, #2
 80039d6:	f7ff f873 	bl	8002ac0 <pvPortMalloc>
			if( pxStack != NULL )
 80039da:	b310      	cbz	r0, 8003a22 <xTaskCreate+0x5c>
 80039dc:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80039de:	2054      	movs	r0, #84	; 0x54
 80039e0:	f7ff f86e 	bl	8002ac0 <pvPortMalloc>
				if( pxNewTCB != NULL )
 80039e4:	4604      	mov	r4, r0
 80039e6:	b1c0      	cbz	r0, 8003a1a <xTaskCreate+0x54>
					pxNewTCB->pxStack = pxStack;
 80039e8:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
 80039ec:	b1dc      	cbz	r4, 8003a26 <xTaskCreate+0x60>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80039ee:	2300      	movs	r3, #0
 80039f0:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80039f4:	9303      	str	r3, [sp, #12]
 80039f6:	9402      	str	r4, [sp, #8]
 80039f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80039fa:	9301      	str	r3, [sp, #4]
 80039fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80039fe:	9300      	str	r3, [sp, #0]
 8003a00:	4643      	mov	r3, r8
 8003a02:	462a      	mov	r2, r5
 8003a04:	4639      	mov	r1, r7
 8003a06:	4630      	mov	r0, r6
 8003a08:	f7ff fe4c 	bl	80036a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003a0c:	4620      	mov	r0, r4
 8003a0e:	f7ff febd 	bl	800378c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003a12:	2001      	movs	r0, #1
	}
 8003a14:	b005      	add	sp, #20
 8003a16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 8003a1a:	4648      	mov	r0, r9
 8003a1c:	f7ff f8d4 	bl	8002bc8 <vPortFree>
 8003a20:	e7e4      	b.n	80039ec <xTaskCreate+0x26>
				pxNewTCB = NULL;
 8003a22:	2400      	movs	r4, #0
 8003a24:	e7e2      	b.n	80039ec <xTaskCreate+0x26>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003a26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return xReturn;
 8003a2a:	e7f3      	b.n	8003a14 <xTaskCreate+0x4e>

08003a2c <vTaskStartScheduler>:
{
 8003a2c:	b510      	push	{r4, lr}
 8003a2e:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003a30:	2400      	movs	r4, #0
 8003a32:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003a34:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003a36:	aa07      	add	r2, sp, #28
 8003a38:	a906      	add	r1, sp, #24
 8003a3a:	a805      	add	r0, sp, #20
 8003a3c:	f008 fd92 	bl	800c564 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003a40:	9b05      	ldr	r3, [sp, #20]
 8003a42:	9302      	str	r3, [sp, #8]
 8003a44:	9b06      	ldr	r3, [sp, #24]
 8003a46:	9301      	str	r3, [sp, #4]
 8003a48:	9400      	str	r4, [sp, #0]
 8003a4a:	4623      	mov	r3, r4
 8003a4c:	9a07      	ldr	r2, [sp, #28]
 8003a4e:	4910      	ldr	r1, [pc, #64]	; (8003a90 <vTaskStartScheduler+0x64>)
 8003a50:	4810      	ldr	r0, [pc, #64]	; (8003a94 <vTaskStartScheduler+0x68>)
 8003a52:	f7ff ff7f 	bl	8003954 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8003a56:	b118      	cbz	r0, 8003a60 <vTaskStartScheduler+0x34>
			xReturn = pdPASS;
 8003a58:	2301      	movs	r3, #1
	if( xReturn == pdPASS )
 8003a5a:	b91b      	cbnz	r3, 8003a64 <vTaskStartScheduler+0x38>
}
 8003a5c:	b008      	add	sp, #32
 8003a5e:	bd10      	pop	{r4, pc}
			xReturn = pdFAIL;
 8003a60:	2300      	movs	r3, #0
 8003a62:	e7fa      	b.n	8003a5a <vTaskStartScheduler+0x2e>
 8003a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a68:	f383 8811 	msr	BASEPRI, r3
 8003a6c:	f3bf 8f6f 	isb	sy
 8003a70:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8003a74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003a78:	4b07      	ldr	r3, [pc, #28]	; (8003a98 <vTaskStartScheduler+0x6c>)
 8003a7a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	4b07      	ldr	r3, [pc, #28]	; (8003a9c <vTaskStartScheduler+0x70>)
 8003a80:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003a82:	2200      	movs	r2, #0
 8003a84:	4b06      	ldr	r3, [pc, #24]	; (8003aa0 <vTaskStartScheduler+0x74>)
 8003a86:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8003a88:	f7fe ff06 	bl	8002898 <xPortStartScheduler>
 8003a8c:	e7e6      	b.n	8003a5c <vTaskStartScheduler+0x30>
 8003a8e:	bf00      	nop
 8003a90:	0800d320 	.word	0x0800d320
 8003a94:	080038a1 	.word	0x080038a1
 8003a98:	20003d8c 	.word	0x20003d8c
 8003a9c:	20003da8 	.word	0x20003da8
 8003aa0:	20003dd4 	.word	0x20003dd4

08003aa4 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8003aa4:	4a02      	ldr	r2, [pc, #8]	; (8003ab0 <vTaskSuspendAll+0xc>)
 8003aa6:	6813      	ldr	r3, [r2, #0]
 8003aa8:	3301      	adds	r3, #1
 8003aaa:	6013      	str	r3, [r2, #0]
 8003aac:	4770      	bx	lr
 8003aae:	bf00      	nop
 8003ab0:	20003d58 	.word	0x20003d58

08003ab4 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8003ab4:	4b01      	ldr	r3, [pc, #4]	; (8003abc <xTaskGetTickCount+0x8>)
 8003ab6:	6818      	ldr	r0, [r3, #0]
}
 8003ab8:	4770      	bx	lr
 8003aba:	bf00      	nop
 8003abc:	20003dd4 	.word	0x20003dd4

08003ac0 <xTaskGetTickCountFromISR>:
{
 8003ac0:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003ac2:	f7fe ff71 	bl	80029a8 <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 8003ac6:	4b01      	ldr	r3, [pc, #4]	; (8003acc <xTaskGetTickCountFromISR+0xc>)
 8003ac8:	6818      	ldr	r0, [r3, #0]
}
 8003aca:	bd08      	pop	{r3, pc}
 8003acc:	20003dd4 	.word	0x20003dd4

08003ad0 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ad0:	4b31      	ldr	r3, [pc, #196]	; (8003b98 <xTaskIncrementTick+0xc8>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d158      	bne.n	8003b8a <xTaskIncrementTick+0xba>
{
 8003ad8:	b570      	push	{r4, r5, r6, lr}
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003ada:	4b30      	ldr	r3, [pc, #192]	; (8003b9c <xTaskIncrementTick+0xcc>)
 8003adc:	681c      	ldr	r4, [r3, #0]
 8003ade:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 8003ae0:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003ae2:	b9c4      	cbnz	r4, 8003b16 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8003ae4:	4b2e      	ldr	r3, [pc, #184]	; (8003ba0 <xTaskIncrementTick+0xd0>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	b143      	cbz	r3, 8003afe <xTaskIncrementTick+0x2e>
 8003aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003af0:	f383 8811 	msr	BASEPRI, r3
 8003af4:	f3bf 8f6f 	isb	sy
 8003af8:	f3bf 8f4f 	dsb	sy
 8003afc:	e7fe      	b.n	8003afc <xTaskIncrementTick+0x2c>
 8003afe:	4a28      	ldr	r2, [pc, #160]	; (8003ba0 <xTaskIncrementTick+0xd0>)
 8003b00:	6811      	ldr	r1, [r2, #0]
 8003b02:	4b28      	ldr	r3, [pc, #160]	; (8003ba4 <xTaskIncrementTick+0xd4>)
 8003b04:	6818      	ldr	r0, [r3, #0]
 8003b06:	6010      	str	r0, [r2, #0]
 8003b08:	6019      	str	r1, [r3, #0]
 8003b0a:	4a27      	ldr	r2, [pc, #156]	; (8003ba8 <xTaskIncrementTick+0xd8>)
 8003b0c:	6813      	ldr	r3, [r2, #0]
 8003b0e:	3301      	adds	r3, #1
 8003b10:	6013      	str	r3, [r2, #0]
 8003b12:	f7ff fdad 	bl	8003670 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003b16:	4b25      	ldr	r3, [pc, #148]	; (8003bac <xTaskIncrementTick+0xdc>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	429c      	cmp	r4, r3
 8003b1c:	d21a      	bcs.n	8003b54 <xTaskIncrementTick+0x84>
}
 8003b1e:	2000      	movs	r0, #0
 8003b20:	bd70      	pop	{r4, r5, r6, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b22:	2301      	movs	r3, #1
 8003b24:	e01c      	b.n	8003b60 <xTaskIncrementTick+0x90>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b26:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003b2a:	4b20      	ldr	r3, [pc, #128]	; (8003bac <xTaskIncrementTick+0xdc>)
 8003b2c:	601a      	str	r2, [r3, #0]
					break;
 8003b2e:	e7f6      	b.n	8003b1e <xTaskIncrementTick+0x4e>
						xNextTaskUnblockTime = xItemValue;
 8003b30:	4a1e      	ldr	r2, [pc, #120]	; (8003bac <xTaskIncrementTick+0xdc>)
 8003b32:	6013      	str	r3, [r2, #0]
						break;
 8003b34:	e7f3      	b.n	8003b1e <xTaskIncrementTick+0x4e>
					prvAddTaskToReadyList( pxTCB );
 8003b36:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8003b38:	2201      	movs	r2, #1
 8003b3a:	409a      	lsls	r2, r3
 8003b3c:	491c      	ldr	r1, [pc, #112]	; (8003bb0 <xTaskIncrementTick+0xe0>)
 8003b3e:	6808      	ldr	r0, [r1, #0]
 8003b40:	4302      	orrs	r2, r0
 8003b42:	600a      	str	r2, [r1, #0]
 8003b44:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003b48:	009a      	lsls	r2, r3, #2
 8003b4a:	4631      	mov	r1, r6
 8003b4c:	4819      	ldr	r0, [pc, #100]	; (8003bb4 <xTaskIncrementTick+0xe4>)
 8003b4e:	4410      	add	r0, r2
 8003b50:	f7fe fd59 	bl	8002606 <vListInsertEnd>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b54:	4b12      	ldr	r3, [pc, #72]	; (8003ba0 <xTaskIncrementTick+0xd0>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d0e1      	beq.n	8003b22 <xTaskIncrementTick+0x52>
 8003b5e:	2300      	movs	r3, #0
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d1e0      	bne.n	8003b26 <xTaskIncrementTick+0x56>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003b64:	4b0e      	ldr	r3, [pc, #56]	; (8003ba0 <xTaskIncrementTick+0xd0>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	68db      	ldr	r3, [r3, #12]
 8003b6a:	68dd      	ldr	r5, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003b6c:	686b      	ldr	r3, [r5, #4]
					if( xConstTickCount < xItemValue )
 8003b6e:	429c      	cmp	r4, r3
 8003b70:	d3de      	bcc.n	8003b30 <xTaskIncrementTick+0x60>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b72:	1d2e      	adds	r6, r5, #4
 8003b74:	4630      	mov	r0, r6
 8003b76:	f7fe fd6c 	bl	8002652 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003b7a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d0da      	beq.n	8003b36 <xTaskIncrementTick+0x66>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003b80:	f105 0018 	add.w	r0, r5, #24
 8003b84:	f7fe fd65 	bl	8002652 <uxListRemove>
 8003b88:	e7d5      	b.n	8003b36 <xTaskIncrementTick+0x66>
		++uxPendedTicks;
 8003b8a:	4a0b      	ldr	r2, [pc, #44]	; (8003bb8 <xTaskIncrementTick+0xe8>)
 8003b8c:	6813      	ldr	r3, [r2, #0]
 8003b8e:	3301      	adds	r3, #1
 8003b90:	6013      	str	r3, [r2, #0]
}
 8003b92:	2000      	movs	r0, #0
 8003b94:	4770      	bx	lr
 8003b96:	bf00      	nop
 8003b98:	20003d58 	.word	0x20003d58
 8003b9c:	20003dd4 	.word	0x20003dd4
 8003ba0:	20003cb8 	.word	0x20003cb8
 8003ba4:	20003cbc 	.word	0x20003cbc
 8003ba8:	20003d90 	.word	0x20003d90
 8003bac:	20003d8c 	.word	0x20003d8c
 8003bb0:	20003d60 	.word	0x20003d60
 8003bb4:	20003cc0 	.word	0x20003cc0
 8003bb8:	20003d54 	.word	0x20003d54

08003bbc <xTaskResumeAll>:
{
 8003bbc:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 8003bbe:	4b2d      	ldr	r3, [pc, #180]	; (8003c74 <xTaskResumeAll+0xb8>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	b943      	cbnz	r3, 8003bd6 <xTaskResumeAll+0x1a>
 8003bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bc8:	f383 8811 	msr	BASEPRI, r3
 8003bcc:	f3bf 8f6f 	isb	sy
 8003bd0:	f3bf 8f4f 	dsb	sy
 8003bd4:	e7fe      	b.n	8003bd4 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 8003bd6:	f7fe fdbd 	bl	8002754 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8003bda:	4b26      	ldr	r3, [pc, #152]	; (8003c74 <xTaskResumeAll+0xb8>)
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	3a01      	subs	r2, #1
 8003be0:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	b913      	cbnz	r3, 8003bec <xTaskResumeAll+0x30>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003be6:	4b24      	ldr	r3, [pc, #144]	; (8003c78 <xTaskResumeAll+0xbc>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	b91b      	cbnz	r3, 8003bf4 <xTaskResumeAll+0x38>
	taskEXIT_CRITICAL();
 8003bec:	f7fe fdd4 	bl	8002798 <vPortExitCritical>
}
 8003bf0:	2000      	movs	r0, #0
 8003bf2:	bd38      	pop	{r3, r4, r5, pc}
 8003bf4:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003bf6:	4b21      	ldr	r3, [pc, #132]	; (8003c7c <xTaskResumeAll+0xc0>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	b31b      	cbz	r3, 8003c44 <xTaskResumeAll+0x88>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003bfc:	4b1f      	ldr	r3, [pc, #124]	; (8003c7c <xTaskResumeAll+0xc0>)
 8003bfe:	68db      	ldr	r3, [r3, #12]
 8003c00:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003c02:	f104 0018 	add.w	r0, r4, #24
 8003c06:	f7fe fd24 	bl	8002652 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c0a:	1d25      	adds	r5, r4, #4
 8003c0c:	4628      	mov	r0, r5
 8003c0e:	f7fe fd20 	bl	8002652 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003c12:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003c14:	2201      	movs	r2, #1
 8003c16:	409a      	lsls	r2, r3
 8003c18:	4919      	ldr	r1, [pc, #100]	; (8003c80 <xTaskResumeAll+0xc4>)
 8003c1a:	6808      	ldr	r0, [r1, #0]
 8003c1c:	4302      	orrs	r2, r0
 8003c1e:	600a      	str	r2, [r1, #0]
 8003c20:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003c24:	009a      	lsls	r2, r3, #2
 8003c26:	4629      	mov	r1, r5
 8003c28:	4816      	ldr	r0, [pc, #88]	; (8003c84 <xTaskResumeAll+0xc8>)
 8003c2a:	4410      	add	r0, r2
 8003c2c:	f7fe fceb 	bl	8002606 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003c30:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003c32:	4b15      	ldr	r3, [pc, #84]	; (8003c88 <xTaskResumeAll+0xcc>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	d3dc      	bcc.n	8003bf6 <xTaskResumeAll+0x3a>
						xYieldPending = pdTRUE;
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	4b13      	ldr	r3, [pc, #76]	; (8003c8c <xTaskResumeAll+0xd0>)
 8003c40:	601a      	str	r2, [r3, #0]
 8003c42:	e7d8      	b.n	8003bf6 <xTaskResumeAll+0x3a>
				if( pxTCB != NULL )
 8003c44:	b10c      	cbz	r4, 8003c4a <xTaskResumeAll+0x8e>
					prvResetNextTaskUnblockTime();
 8003c46:	f7ff fd13 	bl	8003670 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003c4a:	4b11      	ldr	r3, [pc, #68]	; (8003c90 <xTaskResumeAll+0xd4>)
 8003c4c:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003c4e:	b924      	cbnz	r4, 8003c5a <xTaskResumeAll+0x9e>
				if( xYieldPending != pdFALSE )
 8003c50:	4b0e      	ldr	r3, [pc, #56]	; (8003c8c <xTaskResumeAll+0xd0>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	e7ca      	b.n	8003bec <xTaskResumeAll+0x30>
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003c56:	3c01      	subs	r4, #1
 8003c58:	d007      	beq.n	8003c6a <xTaskResumeAll+0xae>
							if( xTaskIncrementTick() != pdFALSE )
 8003c5a:	f7ff ff39 	bl	8003ad0 <xTaskIncrementTick>
 8003c5e:	2800      	cmp	r0, #0
 8003c60:	d0f9      	beq.n	8003c56 <xTaskResumeAll+0x9a>
								xYieldPending = pdTRUE;
 8003c62:	2201      	movs	r2, #1
 8003c64:	4b09      	ldr	r3, [pc, #36]	; (8003c8c <xTaskResumeAll+0xd0>)
 8003c66:	601a      	str	r2, [r3, #0]
 8003c68:	e7f5      	b.n	8003c56 <xTaskResumeAll+0x9a>
						uxPendedTicks = 0;
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	4b08      	ldr	r3, [pc, #32]	; (8003c90 <xTaskResumeAll+0xd4>)
 8003c6e:	601a      	str	r2, [r3, #0]
 8003c70:	e7ee      	b.n	8003c50 <xTaskResumeAll+0x94>
 8003c72:	bf00      	nop
 8003c74:	20003d58 	.word	0x20003d58
 8003c78:	20003d4c 	.word	0x20003d4c
 8003c7c:	20003d94 	.word	0x20003d94
 8003c80:	20003d60 	.word	0x20003d60
 8003c84:	20003cc0 	.word	0x20003cc0
 8003c88:	20003cb4 	.word	0x20003cb4
 8003c8c:	20003dd8 	.word	0x20003dd8
 8003c90:	20003d54 	.word	0x20003d54

08003c94 <vTaskDelay>:
	{
 8003c94:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003c96:	b1a8      	cbz	r0, 8003cc4 <vTaskDelay+0x30>
 8003c98:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 8003c9a:	4b10      	ldr	r3, [pc, #64]	; (8003cdc <vTaskDelay+0x48>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	b143      	cbz	r3, 8003cb2 <vTaskDelay+0x1e>
 8003ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ca4:	f383 8811 	msr	BASEPRI, r3
 8003ca8:	f3bf 8f6f 	isb	sy
 8003cac:	f3bf 8f4f 	dsb	sy
 8003cb0:	e7fe      	b.n	8003cb0 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8003cb2:	f7ff fef7 	bl	8003aa4 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003cb6:	2100      	movs	r1, #0
 8003cb8:	4620      	mov	r0, r4
 8003cba:	f7ff fdff 	bl	80038bc <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8003cbe:	f7ff ff7d 	bl	8003bbc <xTaskResumeAll>
 8003cc2:	e000      	b.n	8003cc6 <vTaskDelay+0x32>
	BaseType_t xAlreadyYielded = pdFALSE;
 8003cc4:	2000      	movs	r0, #0
		if( xAlreadyYielded == pdFALSE )
 8003cc6:	b938      	cbnz	r0, 8003cd8 <vTaskDelay+0x44>
			portYIELD_WITHIN_API();
 8003cc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ccc:	4b04      	ldr	r3, [pc, #16]	; (8003ce0 <vTaskDelay+0x4c>)
 8003cce:	601a      	str	r2, [r3, #0]
 8003cd0:	f3bf 8f4f 	dsb	sy
 8003cd4:	f3bf 8f6f 	isb	sy
 8003cd8:	bd10      	pop	{r4, pc}
 8003cda:	bf00      	nop
 8003cdc:	20003d58 	.word	0x20003d58
 8003ce0:	e000ed04 	.word	0xe000ed04

08003ce4 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003ce4:	4b21      	ldr	r3, [pc, #132]	; (8003d6c <vTaskSwitchContext+0x88>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	b9c3      	cbnz	r3, 8003d1c <vTaskSwitchContext+0x38>
		xYieldPending = pdFALSE;
 8003cea:	2200      	movs	r2, #0
 8003cec:	4b20      	ldr	r3, [pc, #128]	; (8003d70 <vTaskSwitchContext+0x8c>)
 8003cee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003cf0:	4b20      	ldr	r3, [pc, #128]	; (8003d74 <vTaskSwitchContext+0x90>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003cf4:	fab3 f383 	clz	r3, r3
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	f1c3 031f 	rsb	r3, r3, #31
 8003cfe:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8003d02:	008a      	lsls	r2, r1, #2
 8003d04:	491c      	ldr	r1, [pc, #112]	; (8003d78 <vTaskSwitchContext+0x94>)
 8003d06:	588a      	ldr	r2, [r1, r2]
 8003d08:	b962      	cbnz	r2, 8003d24 <vTaskSwitchContext+0x40>
	__asm volatile
 8003d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d0e:	f383 8811 	msr	BASEPRI, r3
 8003d12:	f3bf 8f6f 	isb	sy
 8003d16:	f3bf 8f4f 	dsb	sy
 8003d1a:	e7fe      	b.n	8003d1a <vTaskSwitchContext+0x36>
		xYieldPending = pdTRUE;
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	4b14      	ldr	r3, [pc, #80]	; (8003d70 <vTaskSwitchContext+0x8c>)
 8003d20:	601a      	str	r2, [r3, #0]
 8003d22:	4770      	bx	lr
{
 8003d24:	b410      	push	{r4}
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003d26:	4814      	ldr	r0, [pc, #80]	; (8003d78 <vTaskSwitchContext+0x94>)
 8003d28:	009a      	lsls	r2, r3, #2
 8003d2a:	18d4      	adds	r4, r2, r3
 8003d2c:	00a1      	lsls	r1, r4, #2
 8003d2e:	4401      	add	r1, r0
 8003d30:	684c      	ldr	r4, [r1, #4]
 8003d32:	6864      	ldr	r4, [r4, #4]
 8003d34:	604c      	str	r4, [r1, #4]
 8003d36:	441a      	add	r2, r3
 8003d38:	0091      	lsls	r1, r2, #2
 8003d3a:	3108      	adds	r1, #8
 8003d3c:	4408      	add	r0, r1
 8003d3e:	4284      	cmp	r4, r0
 8003d40:	d00b      	beq.n	8003d5a <vTaskSwitchContext+0x76>
 8003d42:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003d46:	009a      	lsls	r2, r3, #2
 8003d48:	4b0b      	ldr	r3, [pc, #44]	; (8003d78 <vTaskSwitchContext+0x94>)
 8003d4a:	4413      	add	r3, r2
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	68da      	ldr	r2, [r3, #12]
 8003d50:	4b0a      	ldr	r3, [pc, #40]	; (8003d7c <vTaskSwitchContext+0x98>)
 8003d52:	601a      	str	r2, [r3, #0]
}
 8003d54:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003d58:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003d5a:	6860      	ldr	r0, [r4, #4]
 8003d5c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8003d60:	0091      	lsls	r1, r2, #2
 8003d62:	4a05      	ldr	r2, [pc, #20]	; (8003d78 <vTaskSwitchContext+0x94>)
 8003d64:	440a      	add	r2, r1
 8003d66:	6050      	str	r0, [r2, #4]
 8003d68:	e7eb      	b.n	8003d42 <vTaskSwitchContext+0x5e>
 8003d6a:	bf00      	nop
 8003d6c:	20003d58 	.word	0x20003d58
 8003d70:	20003dd8 	.word	0x20003dd8
 8003d74:	20003d60 	.word	0x20003d60
 8003d78:	20003cc0 	.word	0x20003cc0
 8003d7c:	20003cb4 	.word	0x20003cb4

08003d80 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8003d80:	b940      	cbnz	r0, 8003d94 <vTaskPlaceOnEventList+0x14>
 8003d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d86:	f383 8811 	msr	BASEPRI, r3
 8003d8a:	f3bf 8f6f 	isb	sy
 8003d8e:	f3bf 8f4f 	dsb	sy
 8003d92:	e7fe      	b.n	8003d92 <vTaskPlaceOnEventList+0x12>
{
 8003d94:	b510      	push	{r4, lr}
 8003d96:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003d98:	4b04      	ldr	r3, [pc, #16]	; (8003dac <vTaskPlaceOnEventList+0x2c>)
 8003d9a:	6819      	ldr	r1, [r3, #0]
 8003d9c:	3118      	adds	r1, #24
 8003d9e:	f7fe fc3e 	bl	800261e <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003da2:	2101      	movs	r1, #1
 8003da4:	4620      	mov	r0, r4
 8003da6:	f7ff fd89 	bl	80038bc <prvAddCurrentTaskToDelayedList>
 8003daa:	bd10      	pop	{r4, pc}
 8003dac:	20003cb4 	.word	0x20003cb4

08003db0 <xTaskRemoveFromEventList>:
{
 8003db0:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003db2:	68c3      	ldr	r3, [r0, #12]
 8003db4:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8003db6:	b324      	cbz	r4, 8003e02 <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003db8:	f104 0518 	add.w	r5, r4, #24
 8003dbc:	4628      	mov	r0, r5
 8003dbe:	f7fe fc48 	bl	8002652 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003dc2:	4b18      	ldr	r3, [pc, #96]	; (8003e24 <xTaskRemoveFromEventList+0x74>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	bb2b      	cbnz	r3, 8003e14 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003dc8:	1d25      	adds	r5, r4, #4
 8003dca:	4628      	mov	r0, r5
 8003dcc:	f7fe fc41 	bl	8002652 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003dd0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	409a      	lsls	r2, r3
 8003dd6:	4914      	ldr	r1, [pc, #80]	; (8003e28 <xTaskRemoveFromEventList+0x78>)
 8003dd8:	6808      	ldr	r0, [r1, #0]
 8003dda:	4302      	orrs	r2, r0
 8003ddc:	600a      	str	r2, [r1, #0]
 8003dde:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003de2:	009a      	lsls	r2, r3, #2
 8003de4:	4629      	mov	r1, r5
 8003de6:	4811      	ldr	r0, [pc, #68]	; (8003e2c <xTaskRemoveFromEventList+0x7c>)
 8003de8:	4410      	add	r0, r2
 8003dea:	f7fe fc0c 	bl	8002606 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003dee:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003df0:	4b0f      	ldr	r3, [pc, #60]	; (8003e30 <xTaskRemoveFromEventList+0x80>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df6:	429a      	cmp	r2, r3
 8003df8:	d911      	bls.n	8003e1e <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
 8003dfa:	2001      	movs	r0, #1
 8003dfc:	4b0d      	ldr	r3, [pc, #52]	; (8003e34 <xTaskRemoveFromEventList+0x84>)
 8003dfe:	6018      	str	r0, [r3, #0]
 8003e00:	bd38      	pop	{r3, r4, r5, pc}
 8003e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e06:	f383 8811 	msr	BASEPRI, r3
 8003e0a:	f3bf 8f6f 	isb	sy
 8003e0e:	f3bf 8f4f 	dsb	sy
 8003e12:	e7fe      	b.n	8003e12 <xTaskRemoveFromEventList+0x62>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003e14:	4629      	mov	r1, r5
 8003e16:	4808      	ldr	r0, [pc, #32]	; (8003e38 <xTaskRemoveFromEventList+0x88>)
 8003e18:	f7fe fbf5 	bl	8002606 <vListInsertEnd>
 8003e1c:	e7e7      	b.n	8003dee <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
 8003e1e:	2000      	movs	r0, #0
}
 8003e20:	bd38      	pop	{r3, r4, r5, pc}
 8003e22:	bf00      	nop
 8003e24:	20003d58 	.word	0x20003d58
 8003e28:	20003d60 	.word	0x20003d60
 8003e2c:	20003cc0 	.word	0x20003cc0
 8003e30:	20003cb4 	.word	0x20003cb4
 8003e34:	20003dd8 	.word	0x20003dd8
 8003e38:	20003d94 	.word	0x20003d94

08003e3c <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003e3c:	4b03      	ldr	r3, [pc, #12]	; (8003e4c <vTaskInternalSetTimeOutState+0x10>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003e42:	4b03      	ldr	r3, [pc, #12]	; (8003e50 <vTaskInternalSetTimeOutState+0x14>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	6043      	str	r3, [r0, #4]
 8003e48:	4770      	bx	lr
 8003e4a:	bf00      	nop
 8003e4c:	20003d90 	.word	0x20003d90
 8003e50:	20003dd4 	.word	0x20003dd4

08003e54 <xTaskCheckForTimeOut>:
{
 8003e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 8003e56:	b1e0      	cbz	r0, 8003e92 <xTaskCheckForTimeOut+0x3e>
 8003e58:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 8003e5a:	b319      	cbz	r1, 8003ea4 <xTaskCheckForTimeOut+0x50>
 8003e5c:	460c      	mov	r4, r1
	taskENTER_CRITICAL();
 8003e5e:	f7fe fc79 	bl	8002754 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8003e62:	4b1a      	ldr	r3, [pc, #104]	; (8003ecc <xTaskCheckForTimeOut+0x78>)
 8003e64:	6818      	ldr	r0, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003e66:	6869      	ldr	r1, [r5, #4]
 8003e68:	1a42      	subs	r2, r0, r1
			if( *pxTicksToWait == portMAX_DELAY )
 8003e6a:	6823      	ldr	r3, [r4, #0]
 8003e6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e70:	d028      	beq.n	8003ec4 <xTaskCheckForTimeOut+0x70>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003e72:	682f      	ldr	r7, [r5, #0]
 8003e74:	4e16      	ldr	r6, [pc, #88]	; (8003ed0 <xTaskCheckForTimeOut+0x7c>)
 8003e76:	6836      	ldr	r6, [r6, #0]
 8003e78:	42b7      	cmp	r7, r6
 8003e7a:	d001      	beq.n	8003e80 <xTaskCheckForTimeOut+0x2c>
 8003e7c:	4288      	cmp	r0, r1
 8003e7e:	d223      	bcs.n	8003ec8 <xTaskCheckForTimeOut+0x74>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d318      	bcc.n	8003eb6 <xTaskCheckForTimeOut+0x62>
			*pxTicksToWait = 0;
 8003e84:	2300      	movs	r3, #0
 8003e86:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8003e88:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 8003e8a:	f7fe fc85 	bl	8002798 <vPortExitCritical>
}
 8003e8e:	4620      	mov	r0, r4
 8003e90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e96:	f383 8811 	msr	BASEPRI, r3
 8003e9a:	f3bf 8f6f 	isb	sy
 8003e9e:	f3bf 8f4f 	dsb	sy
 8003ea2:	e7fe      	b.n	8003ea2 <xTaskCheckForTimeOut+0x4e>
 8003ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ea8:	f383 8811 	msr	BASEPRI, r3
 8003eac:	f3bf 8f6f 	isb	sy
 8003eb0:	f3bf 8f4f 	dsb	sy
 8003eb4:	e7fe      	b.n	8003eb4 <xTaskCheckForTimeOut+0x60>
			*pxTicksToWait -= xElapsedTime;
 8003eb6:	1a9b      	subs	r3, r3, r2
 8003eb8:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003eba:	4628      	mov	r0, r5
 8003ebc:	f7ff ffbe 	bl	8003e3c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003ec0:	2400      	movs	r4, #0
 8003ec2:	e7e2      	b.n	8003e8a <xTaskCheckForTimeOut+0x36>
				xReturn = pdFALSE;
 8003ec4:	2400      	movs	r4, #0
 8003ec6:	e7e0      	b.n	8003e8a <xTaskCheckForTimeOut+0x36>
			xReturn = pdTRUE;
 8003ec8:	2401      	movs	r4, #1
 8003eca:	e7de      	b.n	8003e8a <xTaskCheckForTimeOut+0x36>
 8003ecc:	20003dd4 	.word	0x20003dd4
 8003ed0:	20003d90 	.word	0x20003d90

08003ed4 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	4b01      	ldr	r3, [pc, #4]	; (8003edc <vTaskMissedYield+0x8>)
 8003ed8:	601a      	str	r2, [r3, #0]
 8003eda:	4770      	bx	lr
 8003edc:	20003dd8 	.word	0x20003dd8

08003ee0 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8003ee0:	4b05      	ldr	r3, [pc, #20]	; (8003ef8 <xTaskGetSchedulerState+0x18>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	b123      	cbz	r3, 8003ef0 <xTaskGetSchedulerState+0x10>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ee6:	4b05      	ldr	r3, [pc, #20]	; (8003efc <xTaskGetSchedulerState+0x1c>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	b91b      	cbnz	r3, 8003ef4 <xTaskGetSchedulerState+0x14>
				xReturn = taskSCHEDULER_RUNNING;
 8003eec:	2002      	movs	r0, #2
 8003eee:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003ef0:	2001      	movs	r0, #1
 8003ef2:	4770      	bx	lr
				xReturn = taskSCHEDULER_SUSPENDED;
 8003ef4:	2000      	movs	r0, #0
	}
 8003ef6:	4770      	bx	lr
 8003ef8:	20003da8 	.word	0x20003da8
 8003efc:	20003d58 	.word	0x20003d58

08003f00 <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 8003f00:	2800      	cmp	r0, #0
 8003f02:	d054      	beq.n	8003fae <xTaskPriorityInherit+0xae>
	{
 8003f04:	b538      	push	{r3, r4, r5, lr}
 8003f06:	4604      	mov	r4, r0
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8003f08:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8003f0a:	492a      	ldr	r1, [pc, #168]	; (8003fb4 <xTaskPriorityInherit+0xb4>)
 8003f0c:	6809      	ldr	r1, [r1, #0]
 8003f0e:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8003f10:	428a      	cmp	r2, r1
 8003f12:	d242      	bcs.n	8003f9a <xTaskPriorityInherit+0x9a>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003f14:	6981      	ldr	r1, [r0, #24]
 8003f16:	2900      	cmp	r1, #0
 8003f18:	db05      	blt.n	8003f26 <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f1a:	4926      	ldr	r1, [pc, #152]	; (8003fb4 <xTaskPriorityInherit+0xb4>)
 8003f1c:	6809      	ldr	r1, [r1, #0]
 8003f1e:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8003f20:	f1c1 0107 	rsb	r1, r1, #7
 8003f24:	6181      	str	r1, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8003f26:	6960      	ldr	r0, [r4, #20]
 8003f28:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003f2c:	0091      	lsls	r1, r2, #2
 8003f2e:	4a22      	ldr	r2, [pc, #136]	; (8003fb8 <xTaskPriorityInherit+0xb8>)
 8003f30:	440a      	add	r2, r1
 8003f32:	4290      	cmp	r0, r2
 8003f34:	d007      	beq.n	8003f46 <xTaskPriorityInherit+0x46>
 8003f36:	2200      	movs	r2, #0
 8003f38:	b93a      	cbnz	r2, 8003f4a <xTaskPriorityInherit+0x4a>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003f3a:	4a1e      	ldr	r2, [pc, #120]	; (8003fb4 <xTaskPriorityInherit+0xb4>)
 8003f3c:	6812      	ldr	r2, [r2, #0]
 8003f3e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003f40:	62e2      	str	r2, [r4, #44]	; 0x2c
				xReturn = pdTRUE;
 8003f42:	2001      	movs	r0, #1
 8003f44:	bd38      	pop	{r3, r4, r5, pc}
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8003f46:	2201      	movs	r2, #1
 8003f48:	e7f6      	b.n	8003f38 <xTaskPriorityInherit+0x38>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003f4a:	1d25      	adds	r5, r4, #4
 8003f4c:	4628      	mov	r0, r5
 8003f4e:	f7fe fb80 	bl	8002652 <uxListRemove>
 8003f52:	b968      	cbnz	r0, 8003f70 <xTaskPriorityInherit+0x70>
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8003f54:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003f56:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8003f5a:	008a      	lsls	r2, r1, #2
 8003f5c:	4916      	ldr	r1, [pc, #88]	; (8003fb8 <xTaskPriorityInherit+0xb8>)
 8003f5e:	588a      	ldr	r2, [r1, r2]
 8003f60:	b932      	cbnz	r2, 8003f70 <xTaskPriorityInherit+0x70>
 8003f62:	2201      	movs	r2, #1
 8003f64:	409a      	lsls	r2, r3
 8003f66:	4915      	ldr	r1, [pc, #84]	; (8003fbc <xTaskPriorityInherit+0xbc>)
 8003f68:	680b      	ldr	r3, [r1, #0]
 8003f6a:	ea23 0302 	bic.w	r3, r3, r2
 8003f6e:	600b      	str	r3, [r1, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003f70:	4b10      	ldr	r3, [pc, #64]	; (8003fb4 <xTaskPriorityInherit+0xb4>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f76:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8003f78:	2401      	movs	r4, #1
 8003f7a:	fa04 f203 	lsl.w	r2, r4, r3
 8003f7e:	490f      	ldr	r1, [pc, #60]	; (8003fbc <xTaskPriorityInherit+0xbc>)
 8003f80:	6808      	ldr	r0, [r1, #0]
 8003f82:	4302      	orrs	r2, r0
 8003f84:	600a      	str	r2, [r1, #0]
 8003f86:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003f8a:	009a      	lsls	r2, r3, #2
 8003f8c:	4629      	mov	r1, r5
 8003f8e:	480a      	ldr	r0, [pc, #40]	; (8003fb8 <xTaskPriorityInherit+0xb8>)
 8003f90:	4410      	add	r0, r2
 8003f92:	f7fe fb38 	bl	8002606 <vListInsertEnd>
				xReturn = pdTRUE;
 8003f96:	4620      	mov	r0, r4
 8003f98:	bd38      	pop	{r3, r4, r5, pc}
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8003f9a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003f9c:	4b05      	ldr	r3, [pc, #20]	; (8003fb4 <xTaskPriorityInherit+0xb4>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	d201      	bcs.n	8003faa <xTaskPriorityInherit+0xaa>
					xReturn = pdTRUE;
 8003fa6:	2001      	movs	r0, #1
	}
 8003fa8:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
 8003faa:	2000      	movs	r0, #0
 8003fac:	bd38      	pop	{r3, r4, r5, pc}
 8003fae:	2000      	movs	r0, #0
 8003fb0:	4770      	bx	lr
 8003fb2:	bf00      	nop
 8003fb4:	20003cb4 	.word	0x20003cb4
 8003fb8:	20003cc0 	.word	0x20003cc0
 8003fbc:	20003d60 	.word	0x20003d60

08003fc0 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8003fc0:	2800      	cmp	r0, #0
 8003fc2:	d04a      	beq.n	800405a <xTaskPriorityDisinherit+0x9a>
	{
 8003fc4:	b538      	push	{r3, r4, r5, lr}
 8003fc6:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 8003fc8:	4a27      	ldr	r2, [pc, #156]	; (8004068 <xTaskPriorityDisinherit+0xa8>)
 8003fca:	6812      	ldr	r2, [r2, #0]
 8003fcc:	4290      	cmp	r0, r2
 8003fce:	d008      	beq.n	8003fe2 <xTaskPriorityDisinherit+0x22>
 8003fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fd4:	f383 8811 	msr	BASEPRI, r3
 8003fd8:	f3bf 8f6f 	isb	sy
 8003fdc:	f3bf 8f4f 	dsb	sy
 8003fe0:	e7fe      	b.n	8003fe0 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 8003fe2:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8003fe4:	b942      	cbnz	r2, 8003ff8 <xTaskPriorityDisinherit+0x38>
 8003fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fea:	f383 8811 	msr	BASEPRI, r3
 8003fee:	f3bf 8f6f 	isb	sy
 8003ff2:	f3bf 8f4f 	dsb	sy
 8003ff6:	e7fe      	b.n	8003ff6 <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 8003ff8:	3a01      	subs	r2, #1
 8003ffa:	6482      	str	r2, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003ffc:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8003ffe:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8004000:	4288      	cmp	r0, r1
 8004002:	d02c      	beq.n	800405e <xTaskPriorityDisinherit+0x9e>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004004:	bb6a      	cbnz	r2, 8004062 <xTaskPriorityDisinherit+0xa2>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004006:	1d25      	adds	r5, r4, #4
 8004008:	4628      	mov	r0, r5
 800400a:	f7fe fb22 	bl	8002652 <uxListRemove>
 800400e:	b970      	cbnz	r0, 800402e <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004010:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004012:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8004016:	008b      	lsls	r3, r1, #2
 8004018:	4914      	ldr	r1, [pc, #80]	; (800406c <xTaskPriorityDisinherit+0xac>)
 800401a:	58cb      	ldr	r3, [r1, r3]
 800401c:	b93b      	cbnz	r3, 800402e <xTaskPriorityDisinherit+0x6e>
 800401e:	2301      	movs	r3, #1
 8004020:	fa03 f202 	lsl.w	r2, r3, r2
 8004024:	4912      	ldr	r1, [pc, #72]	; (8004070 <xTaskPriorityDisinherit+0xb0>)
 8004026:	680b      	ldr	r3, [r1, #0]
 8004028:	ea23 0302 	bic.w	r3, r3, r2
 800402c:	600b      	str	r3, [r1, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800402e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004030:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004032:	f1c3 0207 	rsb	r2, r3, #7
 8004036:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8004038:	2401      	movs	r4, #1
 800403a:	fa04 f203 	lsl.w	r2, r4, r3
 800403e:	490c      	ldr	r1, [pc, #48]	; (8004070 <xTaskPriorityDisinherit+0xb0>)
 8004040:	6808      	ldr	r0, [r1, #0]
 8004042:	4302      	orrs	r2, r0
 8004044:	600a      	str	r2, [r1, #0]
 8004046:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800404a:	009a      	lsls	r2, r3, #2
 800404c:	4629      	mov	r1, r5
 800404e:	4807      	ldr	r0, [pc, #28]	; (800406c <xTaskPriorityDisinherit+0xac>)
 8004050:	4410      	add	r0, r2
 8004052:	f7fe fad8 	bl	8002606 <vListInsertEnd>
					xReturn = pdTRUE;
 8004056:	4620      	mov	r0, r4
 8004058:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
 800405a:	2000      	movs	r0, #0
 800405c:	4770      	bx	lr
 800405e:	2000      	movs	r0, #0
 8004060:	bd38      	pop	{r3, r4, r5, pc}
 8004062:	2000      	movs	r0, #0
	}
 8004064:	bd38      	pop	{r3, r4, r5, pc}
 8004066:	bf00      	nop
 8004068:	20003cb4 	.word	0x20003cb4
 800406c:	20003cc0 	.word	0x20003cc0
 8004070:	20003d60 	.word	0x20003d60

08004074 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 8004074:	2800      	cmp	r0, #0
 8004076:	d05b      	beq.n	8004130 <vTaskPriorityDisinheritAfterTimeout+0xbc>
	{
 8004078:	b538      	push	{r3, r4, r5, lr}
 800407a:	4604      	mov	r4, r0
			configASSERT( pxTCB->uxMutexesHeld );
 800407c:	6c80      	ldr	r0, [r0, #72]	; 0x48
 800407e:	b940      	cbnz	r0, 8004092 <vTaskPriorityDisinheritAfterTimeout+0x1e>
 8004080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004084:	f383 8811 	msr	BASEPRI, r3
 8004088:	f3bf 8f6f 	isb	sy
 800408c:	f3bf 8f4f 	dsb	sy
 8004090:	e7fe      	b.n	8004090 <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004092:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8004094:	428a      	cmp	r2, r1
 8004096:	d200      	bcs.n	800409a <vTaskPriorityDisinheritAfterTimeout+0x26>
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004098:	460a      	mov	r2, r1
			if( pxTCB->uxPriority != uxPriorityToUse )
 800409a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800409c:	428a      	cmp	r2, r1
 800409e:	d001      	beq.n	80040a4 <vTaskPriorityDisinheritAfterTimeout+0x30>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80040a0:	2801      	cmp	r0, #1
 80040a2:	d000      	beq.n	80040a6 <vTaskPriorityDisinheritAfterTimeout+0x32>
 80040a4:	bd38      	pop	{r3, r4, r5, pc}
					configASSERT( pxTCB != pxCurrentTCB );
 80040a6:	4823      	ldr	r0, [pc, #140]	; (8004134 <vTaskPriorityDisinheritAfterTimeout+0xc0>)
 80040a8:	6800      	ldr	r0, [r0, #0]
 80040aa:	4284      	cmp	r4, r0
 80040ac:	d108      	bne.n	80040c0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
 80040ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040b2:	f383 8811 	msr	BASEPRI, r3
 80040b6:	f3bf 8f6f 	isb	sy
 80040ba:	f3bf 8f4f 	dsb	sy
 80040be:	e7fe      	b.n	80040be <vTaskPriorityDisinheritAfterTimeout+0x4a>
					pxTCB->uxPriority = uxPriorityToUse;
 80040c0:	62e2      	str	r2, [r4, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80040c2:	69a0      	ldr	r0, [r4, #24]
 80040c4:	2800      	cmp	r0, #0
 80040c6:	db02      	blt.n	80040ce <vTaskPriorityDisinheritAfterTimeout+0x5a>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040c8:	f1c2 0207 	rsb	r2, r2, #7
 80040cc:	61a2      	str	r2, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80040ce:	6963      	ldr	r3, [r4, #20]
 80040d0:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80040d4:	0088      	lsls	r0, r1, #2
 80040d6:	4a18      	ldr	r2, [pc, #96]	; (8004138 <vTaskPriorityDisinheritAfterTimeout+0xc4>)
 80040d8:	4402      	add	r2, r0
 80040da:	4293      	cmp	r3, r2
 80040dc:	d126      	bne.n	800412c <vTaskPriorityDisinheritAfterTimeout+0xb8>
 80040de:	2201      	movs	r2, #1
 80040e0:	2a00      	cmp	r2, #0
 80040e2:	d0df      	beq.n	80040a4 <vTaskPriorityDisinheritAfterTimeout+0x30>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80040e4:	1d25      	adds	r5, r4, #4
 80040e6:	4628      	mov	r0, r5
 80040e8:	f7fe fab3 	bl	8002652 <uxListRemove>
 80040ec:	b970      	cbnz	r0, 800410c <vTaskPriorityDisinheritAfterTimeout+0x98>
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80040ee:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80040f0:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 80040f4:	008b      	lsls	r3, r1, #2
 80040f6:	4910      	ldr	r1, [pc, #64]	; (8004138 <vTaskPriorityDisinheritAfterTimeout+0xc4>)
 80040f8:	58cb      	ldr	r3, [r1, r3]
 80040fa:	b93b      	cbnz	r3, 800410c <vTaskPriorityDisinheritAfterTimeout+0x98>
 80040fc:	2301      	movs	r3, #1
 80040fe:	fa03 f202 	lsl.w	r2, r3, r2
 8004102:	490e      	ldr	r1, [pc, #56]	; (800413c <vTaskPriorityDisinheritAfterTimeout+0xc8>)
 8004104:	680b      	ldr	r3, [r1, #0]
 8004106:	ea23 0302 	bic.w	r3, r3, r2
 800410a:	600b      	str	r3, [r1, #0]
						prvAddTaskToReadyList( pxTCB );
 800410c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800410e:	2201      	movs	r2, #1
 8004110:	409a      	lsls	r2, r3
 8004112:	490a      	ldr	r1, [pc, #40]	; (800413c <vTaskPriorityDisinheritAfterTimeout+0xc8>)
 8004114:	6808      	ldr	r0, [r1, #0]
 8004116:	4302      	orrs	r2, r0
 8004118:	600a      	str	r2, [r1, #0]
 800411a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800411e:	009a      	lsls	r2, r3, #2
 8004120:	4629      	mov	r1, r5
 8004122:	4805      	ldr	r0, [pc, #20]	; (8004138 <vTaskPriorityDisinheritAfterTimeout+0xc4>)
 8004124:	4410      	add	r0, r2
 8004126:	f7fe fa6e 	bl	8002606 <vListInsertEnd>
	}
 800412a:	e7bb      	b.n	80040a4 <vTaskPriorityDisinheritAfterTimeout+0x30>
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800412c:	2200      	movs	r2, #0
 800412e:	e7d7      	b.n	80040e0 <vTaskPriorityDisinheritAfterTimeout+0x6c>
 8004130:	4770      	bx	lr
 8004132:	bf00      	nop
 8004134:	20003cb4 	.word	0x20003cb4
 8004138:	20003cc0 	.word	0x20003cc0
 800413c:	20003d60 	.word	0x20003d60

08004140 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8004140:	4b05      	ldr	r3, [pc, #20]	; (8004158 <pvTaskIncrementMutexHeldCount+0x18>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	b123      	cbz	r3, 8004150 <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
 8004146:	4b04      	ldr	r3, [pc, #16]	; (8004158 <pvTaskIncrementMutexHeldCount+0x18>)
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	6c93      	ldr	r3, [r2, #72]	; 0x48
 800414c:	3301      	adds	r3, #1
 800414e:	6493      	str	r3, [r2, #72]	; 0x48
		return pxCurrentTCB;
 8004150:	4b01      	ldr	r3, [pc, #4]	; (8004158 <pvTaskIncrementMutexHeldCount+0x18>)
 8004152:	6818      	ldr	r0, [r3, #0]
	}
 8004154:	4770      	bx	lr
 8004156:	bf00      	nop
 8004158:	20003cb4 	.word	0x20003cb4

0800415c <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800415c:	b510      	push	{r4, lr}
 800415e:	460c      	mov	r4, r1

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8004160:	680a      	ldr	r2, [r1, #0]
 8004162:	320c      	adds	r2, #12
 8004164:	f001 faa0 	bl	80056a8 <tcpip_send_msg_wait_sem>
  if (err == ERR_OK) {
 8004168:	4603      	mov	r3, r0
 800416a:	b908      	cbnz	r0, 8004170 <netconn_apimsg+0x14>
    return apimsg->err;
 800416c:	f994 3004 	ldrsb.w	r3, [r4, #4]
  }
  return err;
}
 8004170:	4618      	mov	r0, r3
 8004172:	bd10      	pop	{r4, pc}

08004174 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn*
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8004174:	b570      	push	{r4, r5, r6, lr}
 8004176:	b086      	sub	sp, #24
 8004178:	460d      	mov	r5, r1
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 800417a:	4611      	mov	r1, r2
 800417c:	f000 fdae 	bl	8004cdc <netconn_alloc>
  if (conn != NULL) {
 8004180:	4604      	mov	r4, r0
 8004182:	b140      	cbz	r0, 8004196 <netconn_new_with_proto_and_callback+0x22>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 8004184:	f88d 500c 	strb.w	r5, [sp, #12]
    API_MSG_VAR_REF(msg).conn = conn;
 8004188:	a906      	add	r1, sp, #24
 800418a:	f841 0d14 	str.w	r0, [r1, #-20]!
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 800418e:	4820      	ldr	r0, [pc, #128]	; (8004210 <netconn_new_with_proto_and_callback+0x9c>)
 8004190:	f7ff ffe4 	bl	800415c <netconn_apimsg>
    if (err != ERR_OK) {
 8004194:	b910      	cbnz	r0, 800419c <netconn_new_with_proto_and_callback+0x28>
      return NULL;
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
}
 8004196:	4620      	mov	r0, r4
 8004198:	b006      	add	sp, #24
 800419a:	bd70      	pop	{r4, r5, r6, pc}
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800419c:	6863      	ldr	r3, [r4, #4]
 800419e:	b12b      	cbz	r3, 80041ac <netconn_new_with_proto_and_callback+0x38>
 80041a0:	4b1c      	ldr	r3, [pc, #112]	; (8004214 <netconn_new_with_proto_and_callback+0xa0>)
 80041a2:	2289      	movs	r2, #137	; 0x89
 80041a4:	491c      	ldr	r1, [pc, #112]	; (8004218 <netconn_new_with_proto_and_callback+0xa4>)
 80041a6:	481d      	ldr	r0, [pc, #116]	; (800421c <netconn_new_with_proto_and_callback+0xa8>)
 80041a8:	f008 fd21 	bl	800cbee <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 80041ac:	f104 0510 	add.w	r5, r4, #16
 80041b0:	4628      	mov	r0, r5
 80041b2:	f007 fe9f 	bl	800bef4 <sys_mbox_valid>
 80041b6:	b1b0      	cbz	r0, 80041e6 <netconn_new_with_proto_and_callback+0x72>
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 80041b8:	f104 0014 	add.w	r0, r4, #20
 80041bc:	f007 fe9a 	bl	800bef4 <sys_mbox_valid>
 80041c0:	b9c0      	cbnz	r0, 80041f4 <netconn_new_with_proto_and_callback+0x80>
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 80041c2:	f104 060c 	add.w	r6, r4, #12
 80041c6:	4630      	mov	r0, r6
 80041c8:	f007 fede 	bl	800bf88 <sys_sem_valid>
 80041cc:	b1c8      	cbz	r0, 8004202 <netconn_new_with_proto_and_callback+0x8e>
      sys_sem_free(&conn->op_completed);
 80041ce:	4630      	mov	r0, r6
 80041d0:	f007 fed5 	bl	800bf7e <sys_sem_free>
      sys_mbox_free(&conn->recvmbox);
 80041d4:	4628      	mov	r0, r5
 80041d6:	f007 fe2f 	bl	800be38 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 80041da:	4621      	mov	r1, r4
 80041dc:	2007      	movs	r0, #7
 80041de:	f003 f9dd 	bl	800759c <memp_free>
      return NULL;
 80041e2:	2400      	movs	r4, #0
 80041e4:	e7d7      	b.n	8004196 <netconn_new_with_proto_and_callback+0x22>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 80041e6:	4b0b      	ldr	r3, [pc, #44]	; (8004214 <netconn_new_with_proto_and_callback+0xa0>)
 80041e8:	228a      	movs	r2, #138	; 0x8a
 80041ea:	490d      	ldr	r1, [pc, #52]	; (8004220 <netconn_new_with_proto_and_callback+0xac>)
 80041ec:	480b      	ldr	r0, [pc, #44]	; (800421c <netconn_new_with_proto_and_callback+0xa8>)
 80041ee:	f008 fcfe 	bl	800cbee <iprintf>
 80041f2:	e7e1      	b.n	80041b8 <netconn_new_with_proto_and_callback+0x44>
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 80041f4:	4b07      	ldr	r3, [pc, #28]	; (8004214 <netconn_new_with_proto_and_callback+0xa0>)
 80041f6:	228c      	movs	r2, #140	; 0x8c
 80041f8:	490a      	ldr	r1, [pc, #40]	; (8004224 <netconn_new_with_proto_and_callback+0xb0>)
 80041fa:	4808      	ldr	r0, [pc, #32]	; (800421c <netconn_new_with_proto_and_callback+0xa8>)
 80041fc:	f008 fcf7 	bl	800cbee <iprintf>
 8004200:	e7df      	b.n	80041c2 <netconn_new_with_proto_and_callback+0x4e>
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8004202:	4b04      	ldr	r3, [pc, #16]	; (8004214 <netconn_new_with_proto_and_callback+0xa0>)
 8004204:	228f      	movs	r2, #143	; 0x8f
 8004206:	4908      	ldr	r1, [pc, #32]	; (8004228 <netconn_new_with_proto_and_callback+0xb4>)
 8004208:	4804      	ldr	r0, [pc, #16]	; (800421c <netconn_new_with_proto_and_callback+0xa8>)
 800420a:	f008 fcf0 	bl	800cbee <iprintf>
 800420e:	e7de      	b.n	80041ce <netconn_new_with_proto_and_callback+0x5a>
 8004210:	08004ca1 	.word	0x08004ca1
 8004214:	0800d328 	.word	0x0800d328
 8004218:	0800d3e4 	.word	0x0800d3e4
 800421c:	0800d378 	.word	0x0800d378
 8004220:	0800d408 	.word	0x0800d408
 8004224:	0800d420 	.word	0x0800d420
 8004228:	0800d444 	.word	0x0800d444

0800422c <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 800422c:	b530      	push	{r4, r5, lr}
 800422e:	b087      	sub	sp, #28
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8004230:	b188      	cbz	r0, 8004256 <netconn_delete+0x2a>
 8004232:	4604      	mov	r4, r0
    return ERR_OK;
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8004234:	9001      	str	r0, [sp, #4]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8004236:	2329      	movs	r3, #41	; 0x29
 8004238:	f88d 300d 	strb.w	r3, [sp, #13]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 800423c:	a901      	add	r1, sp, #4
 800423e:	4807      	ldr	r0, [pc, #28]	; (800425c <netconn_delete+0x30>)
 8004240:	f7ff ff8c 	bl	800415c <netconn_apimsg>
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8004244:	4605      	mov	r5, r0
 8004246:	b110      	cbz	r0, 800424e <netconn_delete+0x22>
  }

  netconn_free(conn);

  return ERR_OK;
}
 8004248:	4628      	mov	r0, r5
 800424a:	b007      	add	sp, #28
 800424c:	bd30      	pop	{r4, r5, pc}
  netconn_free(conn);
 800424e:	4620      	mov	r0, r4
 8004250:	f000 fd8a 	bl	8004d68 <netconn_free>
  return ERR_OK;
 8004254:	e7f8      	b.n	8004248 <netconn_delete+0x1c>
    return ERR_OK;
 8004256:	2500      	movs	r5, #0
 8004258:	e7f6      	b.n	8004248 <netconn_delete+0x1c>
 800425a:	bf00      	nop
 800425c:	08004e85 	.word	0x08004e85

08004260 <netconn_connect>:
 * @param port the remote port to connect to (no used for RAW)
 * @return ERR_OK if connected, return value of tcp_/udp_/raw_connect otherwise
 */
err_t
netconn_connect(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 8004260:	b500      	push	{lr}
 8004262:	b087      	sub	sp, #28
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_connect: invalid conn", (conn != NULL), return ERR_ARG;);
 8004264:	b160      	cbz	r0, 8004280 <netconn_connect+0x20>
 8004266:	4603      	mov	r3, r0

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8004268:	b1a1      	cbz	r1, 8004294 <netconn_connect+0x34>
    addr = IP4_ADDR_ANY;
  }
#endif /* LWIP_IPV4 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800426a:	9301      	str	r3, [sp, #4]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800426c:	9103      	str	r1, [sp, #12]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 800426e:	f8ad 2010 	strh.w	r2, [sp, #16]
  err = netconn_apimsg(lwip_netconn_do_connect, &API_MSG_VAR_REF(msg));
 8004272:	a901      	add	r1, sp, #4
 8004274:	4808      	ldr	r0, [pc, #32]	; (8004298 <netconn_connect+0x38>)
 8004276:	f7ff ff71 	bl	800415c <netconn_apimsg>
  API_MSG_VAR_FREE(msg);

  return err;
}
 800427a:	b007      	add	sp, #28
 800427c:	f85d fb04 	ldr.w	pc, [sp], #4
  LWIP_ERROR("netconn_connect: invalid conn", (conn != NULL), return ERR_ARG;);
 8004280:	4b06      	ldr	r3, [pc, #24]	; (800429c <netconn_connect+0x3c>)
 8004282:	f240 122b 	movw	r2, #299	; 0x12b
 8004286:	4906      	ldr	r1, [pc, #24]	; (80042a0 <netconn_connect+0x40>)
 8004288:	4806      	ldr	r0, [pc, #24]	; (80042a4 <netconn_connect+0x44>)
 800428a:	f008 fcb0 	bl	800cbee <iprintf>
 800428e:	f06f 000f 	mvn.w	r0, #15
 8004292:	e7f2      	b.n	800427a <netconn_connect+0x1a>
    addr = IP4_ADDR_ANY;
 8004294:	4904      	ldr	r1, [pc, #16]	; (80042a8 <netconn_connect+0x48>)
 8004296:	e7e8      	b.n	800426a <netconn_connect+0xa>
 8004298:	08004fa5 	.word	0x08004fa5
 800429c:	0800d328 	.word	0x0800d328
 80042a0:	0800d3a0 	.word	0x0800d3a0
 80042a4:	0800d378 	.word	0x0800d378
 80042a8:	0800dd9c 	.word	0x0800dd9c

080042ac <netconn_disconnect>:
 * @param conn the netconn to disconnect
 * @return See @ref err_t
 */
err_t
netconn_disconnect(struct netconn *conn)
{
 80042ac:	b500      	push	{lr}
 80042ae:	b087      	sub	sp, #28
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_disconnect: invalid conn", (conn != NULL), return ERR_ARG;);
 80042b0:	b140      	cbz	r0, 80042c4 <netconn_disconnect+0x18>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80042b2:	a906      	add	r1, sp, #24
 80042b4:	f841 0d14 	str.w	r0, [r1, #-20]!
  err = netconn_apimsg(lwip_netconn_do_disconnect, &API_MSG_VAR_REF(msg));
 80042b8:	4807      	ldr	r0, [pc, #28]	; (80042d8 <netconn_disconnect+0x2c>)
 80042ba:	f7ff ff4f 	bl	800415c <netconn_apimsg>
  API_MSG_VAR_FREE(msg);

  return err;
}
 80042be:	b007      	add	sp, #28
 80042c0:	f85d fb04 	ldr.w	pc, [sp], #4
  LWIP_ERROR("netconn_disconnect: invalid conn", (conn != NULL), return ERR_ARG;);
 80042c4:	4b05      	ldr	r3, [pc, #20]	; (80042dc <netconn_disconnect+0x30>)
 80042c6:	f240 124b 	movw	r2, #331	; 0x14b
 80042ca:	4905      	ldr	r1, [pc, #20]	; (80042e0 <netconn_disconnect+0x34>)
 80042cc:	4805      	ldr	r0, [pc, #20]	; (80042e4 <netconn_disconnect+0x38>)
 80042ce:	f008 fc8e 	bl	800cbee <iprintf>
 80042d2:	f06f 000f 	mvn.w	r0, #15
 80042d6:	e7f2      	b.n	80042be <netconn_disconnect+0x12>
 80042d8:	08005079 	.word	0x08005079
 80042dc:	0800d328 	.word	0x0800d328
 80042e0:	0800d3c0 	.word	0x0800d3c0
 80042e4:	0800d378 	.word	0x0800d378

080042e8 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
   const ip_addr_t *addr, u16_t port)
{
 80042e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042ec:	4604      	mov	r4, r0
 80042ee:	4616      	mov	r6, r2
 80042f0:	4698      	mov	r8, r3
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 80042f2:	460d      	mov	r5, r1
 80042f4:	2900      	cmp	r1, #0
 80042f6:	d030      	beq.n	800435a <recv_udp+0x72>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 80042f8:	2c00      	cmp	r4, #0
 80042fa:	d035      	beq.n	8004368 <recv_udp+0x80>
  conn = (struct netconn *)arg;

  if (conn == NULL) {
 80042fc:	2c00      	cmp	r4, #0
 80042fe:	d03a      	beq.n	8004376 <recv_udp+0x8e>
    pbuf_free(p);
    return;
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 8004300:	6863      	ldr	r3, [r4, #4]
 8004302:	429d      	cmp	r5, r3
 8004304:	d005      	beq.n	8004312 <recv_udp+0x2a>
 8004306:	4b27      	ldr	r3, [pc, #156]	; (80043a4 <recv_udp+0xbc>)
 8004308:	22ba      	movs	r2, #186	; 0xba
 800430a:	4927      	ldr	r1, [pc, #156]	; (80043a8 <recv_udp+0xc0>)
 800430c:	4827      	ldr	r0, [pc, #156]	; (80043ac <recv_udp+0xc4>)
 800430e:	f008 fc6e 	bl	800cbee <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!sys_mbox_valid(&conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!sys_mbox_valid(&conn->recvmbox)) {
 8004312:	f104 0710 	add.w	r7, r4, #16
 8004316:	4638      	mov	r0, r7
 8004318:	f007 fdec 	bl	800bef4 <sys_mbox_valid>
 800431c:	b380      	cbz	r0, 8004380 <recv_udp+0x98>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
    return;
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800431e:	2006      	movs	r0, #6
 8004320:	f003 f922 	bl	8007568 <memp_malloc>
  if (buf == NULL) {
 8004324:	4605      	mov	r5, r0
 8004326:	b380      	cbz	r0, 800438a <recv_udp+0xa2>
    pbuf_free(p);
    return;
  } else {
    buf->p = p;
 8004328:	6006      	str	r6, [r0, #0]
    buf->ptr = p;
 800432a:	6046      	str	r6, [r0, #4]
    ip_addr_set(&buf->addr, addr);
 800432c:	f1b8 0f00 	cmp.w	r8, #0
 8004330:	d030      	beq.n	8004394 <recv_udp+0xac>
 8004332:	f8d8 3000 	ldr.w	r3, [r8]
 8004336:	60ab      	str	r3, [r5, #8]
    buf->port = port;
 8004338:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 800433c:	81ab      	strh	r3, [r5, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 800433e:	8936      	ldrh	r6, [r6, #8]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8004340:	4629      	mov	r1, r5
 8004342:	4638      	mov	r0, r7
 8004344:	f007 fd8d 	bl	800be62 <sys_mbox_trypost>
 8004348:	bb30      	cbnz	r0, 8004398 <recv_udp+0xb0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800434a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800434c:	b11b      	cbz	r3, 8004356 <recv_udp+0x6e>
 800434e:	4632      	mov	r2, r6
 8004350:	2100      	movs	r1, #0
 8004352:	4620      	mov	r0, r4
 8004354:	4798      	blx	r3
 8004356:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800435a:	4b12      	ldr	r3, [pc, #72]	; (80043a4 <recv_udp+0xbc>)
 800435c:	22b1      	movs	r2, #177	; 0xb1
 800435e:	4914      	ldr	r1, [pc, #80]	; (80043b0 <recv_udp+0xc8>)
 8004360:	4812      	ldr	r0, [pc, #72]	; (80043ac <recv_udp+0xc4>)
 8004362:	f008 fc44 	bl	800cbee <iprintf>
 8004366:	e7c7      	b.n	80042f8 <recv_udp+0x10>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8004368:	4b0e      	ldr	r3, [pc, #56]	; (80043a4 <recv_udp+0xbc>)
 800436a:	22b2      	movs	r2, #178	; 0xb2
 800436c:	4911      	ldr	r1, [pc, #68]	; (80043b4 <recv_udp+0xcc>)
 800436e:	480f      	ldr	r0, [pc, #60]	; (80043ac <recv_udp+0xc4>)
 8004370:	f008 fc3d 	bl	800cbee <iprintf>
 8004374:	e7c2      	b.n	80042fc <recv_udp+0x14>
    pbuf_free(p);
 8004376:	4630      	mov	r0, r6
 8004378:	f003 fae6 	bl	8007948 <pbuf_free>
    return;
 800437c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    pbuf_free(p);
 8004380:	4630      	mov	r0, r6
 8004382:	f003 fae1 	bl	8007948 <pbuf_free>
    return;
 8004386:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    pbuf_free(p);
 800438a:	4630      	mov	r0, r6
 800438c:	f003 fadc 	bl	8007948 <pbuf_free>
    return;
 8004390:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ip_addr_set(&buf->addr, addr);
 8004394:	2300      	movs	r3, #0
 8004396:	e7ce      	b.n	8004336 <recv_udp+0x4e>
    netbuf_delete(buf);
 8004398:	4628      	mov	r0, r5
 800439a:	f000 fea1 	bl	80050e0 <netbuf_delete>
    return;
 800439e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80043a2:	bf00      	nop
 80043a4:	0800d824 	.word	0x0800d824
 80043a8:	0800d89c 	.word	0x0800d89c
 80043ac:	0800d378 	.word	0x0800d378
 80043b0:	0800d858 	.word	0x0800d858
 80043b4:	0800d87c 	.word	0x0800d87c

080043b8 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 80043b8:	b510      	push	{r4, lr}
 80043ba:	4601      	mov	r1, r0
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 80043bc:	6844      	ldr	r4, [r0, #4]
  tcp_arg(pcb, conn);
 80043be:	4620      	mov	r0, r4
 80043c0:	f003 ff13 	bl	80081ea <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 80043c4:	4908      	ldr	r1, [pc, #32]	; (80043e8 <setup_tcp+0x30>)
 80043c6:	4620      	mov	r0, r4
 80043c8:	f003 ff12 	bl	80081f0 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 80043cc:	4907      	ldr	r1, [pc, #28]	; (80043ec <setup_tcp+0x34>)
 80043ce:	4620      	mov	r0, r4
 80043d0:	f003 ff28 	bl	8008224 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 80043d4:	2202      	movs	r2, #2
 80043d6:	4906      	ldr	r1, [pc, #24]	; (80043f0 <setup_tcp+0x38>)
 80043d8:	4620      	mov	r0, r4
 80043da:	f003 ff5d 	bl	8008298 <tcp_poll>
  tcp_err(pcb, err_tcp);
 80043de:	4905      	ldr	r1, [pc, #20]	; (80043f4 <setup_tcp+0x3c>)
 80043e0:	4620      	mov	r0, r4
 80043e2:	f003 ff37 	bl	8008254 <tcp_err>
 80043e6:	bd10      	pop	{r4, pc}
 80043e8:	08004bd1 	.word	0x08004bd1
 80043ec:	08004b61 	.word	0x08004b61
 80043f0:	08004ae5 	.word	0x08004ae5
 80043f4:	08004559 	.word	0x08004559

080043f8 <pcb_new>:
 *
 * @param msg the api_msg_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 80043f8:	b538      	push	{r3, r4, r5, lr}
 80043fa:	4604      	mov	r4, r0
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 80043fc:	6803      	ldr	r3, [r0, #0]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	b133      	cbz	r3, 8004410 <pcb_new+0x18>
 8004402:	4b1b      	ldr	r3, [pc, #108]	; (8004470 <pcb_new+0x78>)
 8004404:	f44f 720b 	mov.w	r2, #556	; 0x22c
 8004408:	491a      	ldr	r1, [pc, #104]	; (8004474 <pcb_new+0x7c>)
 800440a:	481b      	ldr	r0, [pc, #108]	; (8004478 <pcb_new+0x80>)
 800440c:	f008 fbef 	bl	800cbee <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif
  
  /* Allocate a PCB for this connection */
  switch(NETCONNTYPE_GROUP(msg->conn->type)) {
 8004410:	6825      	ldr	r5, [r4, #0]
 8004412:	782b      	ldrb	r3, [r5, #0]
 8004414:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004418:	2b10      	cmp	r3, #16
 800441a:	d018      	beq.n	800444e <pcb_new+0x56>
 800441c:	2b20      	cmp	r3, #32
 800441e:	d121      	bne.n	8004464 <pcb_new+0x6c>
    }
    break;
#endif /* LWIP_RAW */
#if LWIP_UDP
  case NETCONN_UDP:
    msg->conn->pcb.udp = udp_new_ip_type(iptype);
 8004420:	2000      	movs	r0, #0
 8004422:	f007 fc4b 	bl	800bcbc <udp_new_ip_type>
 8004426:	6068      	str	r0, [r5, #4]
    if (msg->conn->pcb.udp != NULL) {
 8004428:	6823      	ldr	r3, [r4, #0]
 800442a:	685a      	ldr	r2, [r3, #4]
 800442c:	b142      	cbz	r2, 8004440 <pcb_new+0x48>
#if LWIP_UDPLITE
      if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
        udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
      }
#endif /* LWIP_UDPLITE */
      if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800442e:	781b      	ldrb	r3, [r3, #0]
 8004430:	2b22      	cmp	r3, #34	; 0x22
 8004432:	d009      	beq.n	8004448 <pcb_new+0x50>
        udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
      }
      udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 8004434:	6823      	ldr	r3, [r4, #0]
 8004436:	461a      	mov	r2, r3
 8004438:	4910      	ldr	r1, [pc, #64]	; (800447c <pcb_new+0x84>)
 800443a:	6858      	ldr	r0, [r3, #4]
 800443c:	f007 fc10 	bl	800bc60 <udp_recv>
  default:
    /* Unsupported netconn type, e.g. protocol disabled */
    msg->err = ERR_VAL;
    return;
  }
  if (msg->conn->pcb.ip == NULL) {
 8004440:	6823      	ldr	r3, [r4, #0]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	b18b      	cbz	r3, 800446a <pcb_new+0x72>
 8004446:	bd38      	pop	{r3, r4, r5, pc}
        udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 8004448:	2301      	movs	r3, #1
 800444a:	7413      	strb	r3, [r2, #16]
 800444c:	e7f2      	b.n	8004434 <pcb_new+0x3c>
    msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800444e:	2000      	movs	r0, #0
 8004450:	f004 fc8e 	bl	8008d70 <tcp_new_ip_type>
 8004454:	6068      	str	r0, [r5, #4]
    if (msg->conn->pcb.tcp != NULL) {
 8004456:	6820      	ldr	r0, [r4, #0]
 8004458:	6843      	ldr	r3, [r0, #4]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d0f0      	beq.n	8004440 <pcb_new+0x48>
      setup_tcp(msg->conn);
 800445e:	f7ff ffab 	bl	80043b8 <setup_tcp>
 8004462:	e7ed      	b.n	8004440 <pcb_new+0x48>
    msg->err = ERR_VAL;
 8004464:	23fa      	movs	r3, #250	; 0xfa
 8004466:	7123      	strb	r3, [r4, #4]
    return;
 8004468:	bd38      	pop	{r3, r4, r5, pc}
    msg->err = ERR_MEM;
 800446a:	23ff      	movs	r3, #255	; 0xff
 800446c:	7123      	strb	r3, [r4, #4]
 800446e:	e7ea      	b.n	8004446 <pcb_new+0x4e>
 8004470:	0800d824 	.word	0x0800d824
 8004474:	0800d7a0 	.word	0x0800d7a0
 8004478:	0800d378 	.word	0x0800d378
 800447c:	080042e9 	.word	0x080042e9

08004480 <lwip_netconn_do_connected>:

  LWIP_UNUSED_ARG(pcb);

  conn = (struct netconn *)arg;

  if (conn == NULL) {
 8004480:	2800      	cmp	r0, #0
 8004482:	d05c      	beq.n	800453e <lwip_netconn_do_connected+0xbe>
{
 8004484:	b570      	push	{r4, r5, r6, lr}
 8004486:	4604      	mov	r4, r0
 8004488:	4615      	mov	r5, r2
    return ERR_VAL;
  }

  LWIP_ASSERT("conn->state == NETCONN_CONNECT", conn->state == NETCONN_CONNECT);
 800448a:	7843      	ldrb	r3, [r0, #1]
 800448c:	2b03      	cmp	r3, #3
 800448e:	d006      	beq.n	800449e <lwip_netconn_do_connected+0x1e>
 8004490:	4b2c      	ldr	r3, [pc, #176]	; (8004544 <lwip_netconn_do_connected+0xc4>)
 8004492:	f44f 6293 	mov.w	r2, #1176	; 0x498
 8004496:	492c      	ldr	r1, [pc, #176]	; (8004548 <lwip_netconn_do_connected+0xc8>)
 8004498:	482c      	ldr	r0, [pc, #176]	; (800454c <lwip_netconn_do_connected+0xcc>)
 800449a:	f008 fba8 	bl	800cbee <iprintf>
  LWIP_ASSERT("(conn->current_msg != NULL) || conn->in_non_blocking_connect",
 800449e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d033      	beq.n	800450c <lwip_netconn_do_connected+0x8c>
    (conn->current_msg != NULL) || IN_NONBLOCKING_CONNECT(conn));

  if (conn->current_msg != NULL) {
 80044a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d03c      	beq.n	8004524 <lwip_netconn_do_connected+0xa4>
    conn->current_msg->err = err;
 80044aa:	711d      	strb	r5, [r3, #4]
    op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80044ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80044ae:	681e      	ldr	r6, [r3, #0]
 80044b0:	360c      	adds	r6, #12
  }
  if ((NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) && (err == ERR_OK)) {
 80044b2:	7823      	ldrb	r3, [r4, #0]
 80044b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044b8:	2b10      	cmp	r3, #16
 80044ba:	d035      	beq.n	8004528 <lwip_netconn_do_connected+0xa8>
    setup_tcp(conn);
  }
  was_blocking = !IN_NONBLOCKING_CONNECT(conn);
 80044bc:	7f23      	ldrb	r3, [r4, #28]
  SET_NONBLOCKING_CONNECT(conn, 0);
 80044be:	f023 0204 	bic.w	r2, r3, #4
 80044c2:	7722      	strb	r2, [r4, #28]
  LWIP_ASSERT("blocking connect state error",
 80044c4:	f013 0504 	ands.w	r5, r3, #4
 80044c8:	d100      	bne.n	80044cc <lwip_netconn_do_connected+0x4c>
 80044ca:	b946      	cbnz	r6, 80044de <lwip_netconn_do_connected+0x5e>
 80044cc:	b105      	cbz	r5, 80044d0 <lwip_netconn_do_connected+0x50>
 80044ce:	b136      	cbz	r6, 80044de <lwip_netconn_do_connected+0x5e>
 80044d0:	4b1c      	ldr	r3, [pc, #112]	; (8004544 <lwip_netconn_do_connected+0xc4>)
 80044d2:	f240 42a7 	movw	r2, #1191	; 0x4a7
 80044d6:	491e      	ldr	r1, [pc, #120]	; (8004550 <lwip_netconn_do_connected+0xd0>)
 80044d8:	481c      	ldr	r0, [pc, #112]	; (800454c <lwip_netconn_do_connected+0xcc>)
 80044da:	f008 fb88 	bl	800cbee <iprintf>
    (was_blocking && op_completed_sem != NULL) ||
    (!was_blocking && op_completed_sem == NULL));
  conn->current_msg = NULL;
 80044de:	2300      	movs	r3, #0
 80044e0:	6263      	str	r3, [r4, #36]	; 0x24
  conn->state = NETCONN_NONE;
 80044e2:	7063      	strb	r3, [r4, #1]
  NETCONN_SET_SAFE_ERR(conn, ERR_OK);
 80044e4:	f007 fd98 	bl	800c018 <sys_arch_protect>
 80044e8:	f994 3008 	ldrsb.w	r3, [r4, #8]
 80044ec:	f113 0f0c 	cmn.w	r3, #12
 80044f0:	db01      	blt.n	80044f6 <lwip_netconn_do_connected+0x76>
 80044f2:	2300      	movs	r3, #0
 80044f4:	7223      	strb	r3, [r4, #8]
 80044f6:	f007 fd9b 	bl	800c030 <sys_arch_unprotect>
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80044fa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80044fc:	b11b      	cbz	r3, 8004506 <lwip_netconn_do_connected+0x86>
 80044fe:	2200      	movs	r2, #0
 8004500:	2102      	movs	r1, #2
 8004502:	4620      	mov	r0, r4
 8004504:	4798      	blx	r3

  if (was_blocking) {
 8004506:	b1ad      	cbz	r5, 8004534 <lwip_netconn_do_connected+0xb4>
    sys_sem_signal(op_completed_sem);
  }
  return ERR_OK;
 8004508:	2000      	movs	r0, #0
}
 800450a:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("(conn->current_msg != NULL) || conn->in_non_blocking_connect",
 800450c:	7f23      	ldrb	r3, [r4, #28]
 800450e:	f013 0f04 	tst.w	r3, #4
 8004512:	d1c7      	bne.n	80044a4 <lwip_netconn_do_connected+0x24>
 8004514:	4b0b      	ldr	r3, [pc, #44]	; (8004544 <lwip_netconn_do_connected+0xc4>)
 8004516:	f240 429a 	movw	r2, #1178	; 0x49a
 800451a:	490e      	ldr	r1, [pc, #56]	; (8004554 <lwip_netconn_do_connected+0xd4>)
 800451c:	480b      	ldr	r0, [pc, #44]	; (800454c <lwip_netconn_do_connected+0xcc>)
 800451e:	f008 fb66 	bl	800cbee <iprintf>
 8004522:	e7bf      	b.n	80044a4 <lwip_netconn_do_connected+0x24>
  sys_sem_t* op_completed_sem = NULL;
 8004524:	2600      	movs	r6, #0
 8004526:	e7c4      	b.n	80044b2 <lwip_netconn_do_connected+0x32>
  if ((NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) && (err == ERR_OK)) {
 8004528:	2d00      	cmp	r5, #0
 800452a:	d1c7      	bne.n	80044bc <lwip_netconn_do_connected+0x3c>
    setup_tcp(conn);
 800452c:	4620      	mov	r0, r4
 800452e:	f7ff ff43 	bl	80043b8 <setup_tcp>
 8004532:	e7c3      	b.n	80044bc <lwip_netconn_do_connected+0x3c>
    sys_sem_signal(op_completed_sem);
 8004534:	4630      	mov	r0, r6
 8004536:	f007 fd1d 	bl	800bf74 <sys_sem_signal>
  return ERR_OK;
 800453a:	2000      	movs	r0, #0
 800453c:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_VAL;
 800453e:	f06f 0005 	mvn.w	r0, #5
 8004542:	4770      	bx	lr
 8004544:	0800d824 	.word	0x0800d824
 8004548:	0800d568 	.word	0x0800d568
 800454c:	0800d378 	.word	0x0800d378
 8004550:	0800d5c8 	.word	0x0800d5c8
 8004554:	0800d588 	.word	0x0800d588

08004558 <err_tcp>:
{
 8004558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800455a:	460e      	mov	r6, r1
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800455c:	4604      	mov	r4, r0
 800455e:	2800      	cmp	r0, #0
 8004560:	d038      	beq.n	80045d4 <err_tcp+0x7c>
  conn->pcb.tcp = NULL;
 8004562:	2300      	movs	r3, #0
 8004564:	6063      	str	r3, [r4, #4]
  old_state = conn->state;
 8004566:	7865      	ldrb	r5, [r4, #1]
  conn->state = NETCONN_NONE;
 8004568:	7063      	strb	r3, [r4, #1]
  if (old_state == NETCONN_CLOSE) {
 800456a:	2d04      	cmp	r5, #4
 800456c:	d03a      	beq.n	80045e4 <err_tcp+0x8c>
    SYS_ARCH_SET(conn->last_err, err);
 800456e:	f007 fd53 	bl	800c018 <sys_arch_protect>
 8004572:	7226      	strb	r6, [r4, #8]
 8004574:	f007 fd5c 	bl	800c030 <sys_arch_unprotect>
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8004578:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800457a:	b11b      	cbz	r3, 8004584 <err_tcp+0x2c>
 800457c:	2200      	movs	r2, #0
 800457e:	2104      	movs	r1, #4
 8004580:	4620      	mov	r0, r4
 8004582:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8004584:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004586:	b11b      	cbz	r3, 8004590 <err_tcp+0x38>
 8004588:	2200      	movs	r2, #0
 800458a:	4611      	mov	r1, r2
 800458c:	4620      	mov	r0, r4
 800458e:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8004590:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004592:	b11b      	cbz	r3, 800459c <err_tcp+0x44>
 8004594:	2200      	movs	r2, #0
 8004596:	2102      	movs	r1, #2
 8004598:	4620      	mov	r0, r4
 800459a:	4798      	blx	r3
  if (sys_mbox_valid(&conn->recvmbox)) {
 800459c:	f104 0710 	add.w	r7, r4, #16
 80045a0:	4638      	mov	r0, r7
 80045a2:	f007 fca7 	bl	800bef4 <sys_mbox_valid>
 80045a6:	bb68      	cbnz	r0, 8004604 <err_tcp+0xac>
  if (sys_mbox_valid(&conn->acceptmbox)) {
 80045a8:	f104 0714 	add.w	r7, r4, #20
 80045ac:	4638      	mov	r0, r7
 80045ae:	f007 fca1 	bl	800bef4 <sys_mbox_valid>
 80045b2:	bb60      	cbnz	r0, 800460e <err_tcp+0xb6>
  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 80045b4:	2d01      	cmp	r5, #1
 80045b6:	d02f      	beq.n	8004618 <err_tcp+0xc0>
 80045b8:	2d04      	cmp	r5, #4
 80045ba:	d02d      	beq.n	8004618 <err_tcp+0xc0>
 80045bc:	2d03      	cmp	r5, #3
 80045be:	d02b      	beq.n	8004618 <err_tcp+0xc0>
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 80045c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80045c2:	b133      	cbz	r3, 80045d2 <err_tcp+0x7a>
 80045c4:	4b2e      	ldr	r3, [pc, #184]	; (8004680 <err_tcp+0x128>)
 80045c6:	f240 12bd 	movw	r2, #445	; 0x1bd
 80045ca:	492e      	ldr	r1, [pc, #184]	; (8004684 <err_tcp+0x12c>)
 80045cc:	482e      	ldr	r0, [pc, #184]	; (8004688 <err_tcp+0x130>)
 80045ce:	f008 fb0e 	bl	800cbee <iprintf>
 80045d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80045d4:	4b2a      	ldr	r3, [pc, #168]	; (8004680 <err_tcp+0x128>)
 80045d6:	f44f 72c2 	mov.w	r2, #388	; 0x184
 80045da:	492c      	ldr	r1, [pc, #176]	; (800468c <err_tcp+0x134>)
 80045dc:	482a      	ldr	r0, [pc, #168]	; (8004688 <err_tcp+0x130>)
 80045de:	f008 fb06 	bl	800cbee <iprintf>
 80045e2:	e7be      	b.n	8004562 <err_tcp+0xa>
    NETCONN_SET_SAFE_ERR(conn, ERR_OK);
 80045e4:	b164      	cbz	r4, 8004600 <err_tcp+0xa8>
 80045e6:	f007 fd17 	bl	800c018 <sys_arch_protect>
 80045ea:	f994 3008 	ldrsb.w	r3, [r4, #8]
 80045ee:	f113 0f0c 	cmn.w	r3, #12
 80045f2:	db01      	blt.n	80045f8 <err_tcp+0xa0>
 80045f4:	2300      	movs	r3, #0
 80045f6:	7223      	strb	r3, [r4, #8]
 80045f8:	f007 fd1a 	bl	800c030 <sys_arch_unprotect>
    err = ERR_OK;
 80045fc:	2600      	movs	r6, #0
 80045fe:	e7bb      	b.n	8004578 <err_tcp+0x20>
 8004600:	2600      	movs	r6, #0
 8004602:	e7b9      	b.n	8004578 <err_tcp+0x20>
    sys_mbox_trypost(&conn->recvmbox, NULL);
 8004604:	2100      	movs	r1, #0
 8004606:	4638      	mov	r0, r7
 8004608:	f007 fc2b 	bl	800be62 <sys_mbox_trypost>
 800460c:	e7cc      	b.n	80045a8 <err_tcp+0x50>
    sys_mbox_trypost(&conn->acceptmbox, NULL);
 800460e:	2100      	movs	r1, #0
 8004610:	4638      	mov	r0, r7
 8004612:	f007 fc26 	bl	800be62 <sys_mbox_trypost>
 8004616:	e7cd      	b.n	80045b4 <err_tcp+0x5c>
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 8004618:	7f23      	ldrb	r3, [r4, #28]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800461a:	f023 0204 	bic.w	r2, r3, #4
 800461e:	7722      	strb	r2, [r4, #28]
    if (!was_nonblocking_connect) {
 8004620:	f013 0f04 	tst.w	r3, #4
 8004624:	d1d5      	bne.n	80045d2 <err_tcp+0x7a>
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8004626:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004628:	b1cb      	cbz	r3, 800465e <err_tcp+0x106>
      conn->current_msg->err = err;
 800462a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800462c:	711e      	strb	r6, [r3, #4]
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800462e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004630:	681d      	ldr	r5, [r3, #0]
 8004632:	350c      	adds	r5, #12
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 8004634:	4628      	mov	r0, r5
 8004636:	f007 fca7 	bl	800bf88 <sys_sem_valid>
 800463a:	b1c0      	cbz	r0, 800466e <err_tcp+0x116>
      conn->current_msg = NULL;
 800463c:	2300      	movs	r3, #0
 800463e:	6263      	str	r3, [r4, #36]	; 0x24
      NETCONN_SET_SAFE_ERR(conn, err);
 8004640:	b14c      	cbz	r4, 8004656 <err_tcp+0xfe>
 8004642:	f007 fce9 	bl	800c018 <sys_arch_protect>
 8004646:	f994 3008 	ldrsb.w	r3, [r4, #8]
 800464a:	f113 0f0c 	cmn.w	r3, #12
 800464e:	db00      	blt.n	8004652 <err_tcp+0xfa>
 8004650:	7226      	strb	r6, [r4, #8]
 8004652:	f007 fced 	bl	800c030 <sys_arch_unprotect>
      sys_sem_signal(op_completed_sem);
 8004656:	4628      	mov	r0, r5
 8004658:	f007 fc8c 	bl	800bf74 <sys_sem_signal>
 800465c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800465e:	4b08      	ldr	r3, [pc, #32]	; (8004680 <err_tcp+0x128>)
 8004660:	f240 12b3 	movw	r2, #435	; 0x1b3
 8004664:	490a      	ldr	r1, [pc, #40]	; (8004690 <err_tcp+0x138>)
 8004666:	4808      	ldr	r0, [pc, #32]	; (8004688 <err_tcp+0x130>)
 8004668:	f008 fac1 	bl	800cbee <iprintf>
 800466c:	e7dd      	b.n	800462a <err_tcp+0xd2>
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800466e:	4b04      	ldr	r3, [pc, #16]	; (8004680 <err_tcp+0x128>)
 8004670:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8004674:	4907      	ldr	r1, [pc, #28]	; (8004694 <err_tcp+0x13c>)
 8004676:	4804      	ldr	r0, [pc, #16]	; (8004688 <err_tcp+0x130>)
 8004678:	f008 fab9 	bl	800cbee <iprintf>
 800467c:	e7de      	b.n	800463c <err_tcp+0xe4>
 800467e:	bf00      	nop
 8004680:	0800d824 	.word	0x0800d824
 8004684:	0800d4a8 	.word	0x0800d4a8
 8004688:	0800d378 	.word	0x0800d378
 800468c:	0800d460 	.word	0x0800d460
 8004690:	0800d470 	.word	0x0800d470
 8004694:	0800d48c 	.word	0x0800d48c

08004698 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8004698:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  u8_t write_finished = 0;
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800469c:	4604      	mov	r4, r0
 800469e:	b1f0      	cbz	r0, 80046de <lwip_netconn_do_writemore+0x46>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 80046a0:	7863      	ldrb	r3, [r4, #1]
 80046a2:	2b01      	cmp	r3, #1
 80046a4:	d006      	beq.n	80046b4 <lwip_netconn_do_writemore+0x1c>
 80046a6:	4b75      	ldr	r3, [pc, #468]	; (800487c <lwip_netconn_do_writemore+0x1e4>)
 80046a8:	f240 52e4 	movw	r2, #1508	; 0x5e4
 80046ac:	4974      	ldr	r1, [pc, #464]	; (8004880 <lwip_netconn_do_writemore+0x1e8>)
 80046ae:	4875      	ldr	r0, [pc, #468]	; (8004884 <lwip_netconn_do_writemore+0x1ec>)
 80046b0:	f008 fa9d 	bl	800cbee <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80046b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80046b6:	b1d3      	cbz	r3, 80046ee <lwip_netconn_do_writemore+0x56>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 80046b8:	6863      	ldr	r3, [r4, #4]
 80046ba:	b303      	cbz	r3, 80046fe <lwip_netconn_do_writemore+0x66>
  LWIP_ASSERT("conn->write_offset < conn->current_msg->msg.w.len",
 80046bc:	6a22      	ldr	r2, [r4, #32]
 80046be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80046c0:	68db      	ldr	r3, [r3, #12]
 80046c2:	429a      	cmp	r2, r3
 80046c4:	d223      	bcs.n	800470e <lwip_netconn_do_writemore+0x76>
    conn->write_offset < conn->current_msg->msg.w.len);

  apiflags = conn->current_msg->msg.w.apiflags;
 80046c6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80046c8:	f892 8010 	ldrb.w	r8, [r2, #16]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 80046cc:	7f23      	ldrb	r3, [r4, #28]
 80046ce:	f013 0f02 	tst.w	r3, #2
 80046d2:	d124      	bne.n	800471e <lwip_netconn_do_writemore+0x86>
 80046d4:	f018 0f04 	tst.w	r8, #4
 80046d8:	d039      	beq.n	800474e <lwip_netconn_do_writemore+0xb6>
 80046da:	2601      	movs	r6, #1
 80046dc:	e020      	b.n	8004720 <lwip_netconn_do_writemore+0x88>
  LWIP_ASSERT("conn != NULL", conn != NULL);
 80046de:	4b67      	ldr	r3, [pc, #412]	; (800487c <lwip_netconn_do_writemore+0x1e4>)
 80046e0:	f240 52e3 	movw	r2, #1507	; 0x5e3
 80046e4:	4968      	ldr	r1, [pc, #416]	; (8004888 <lwip_netconn_do_writemore+0x1f0>)
 80046e6:	4867      	ldr	r0, [pc, #412]	; (8004884 <lwip_netconn_do_writemore+0x1ec>)
 80046e8:	f008 fa81 	bl	800cbee <iprintf>
 80046ec:	e7d8      	b.n	80046a0 <lwip_netconn_do_writemore+0x8>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80046ee:	4b63      	ldr	r3, [pc, #396]	; (800487c <lwip_netconn_do_writemore+0x1e4>)
 80046f0:	f240 52e5 	movw	r2, #1509	; 0x5e5
 80046f4:	4965      	ldr	r1, [pc, #404]	; (800488c <lwip_netconn_do_writemore+0x1f4>)
 80046f6:	4863      	ldr	r0, [pc, #396]	; (8004884 <lwip_netconn_do_writemore+0x1ec>)
 80046f8:	f008 fa79 	bl	800cbee <iprintf>
 80046fc:	e7dc      	b.n	80046b8 <lwip_netconn_do_writemore+0x20>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 80046fe:	4b5f      	ldr	r3, [pc, #380]	; (800487c <lwip_netconn_do_writemore+0x1e4>)
 8004700:	f240 52e6 	movw	r2, #1510	; 0x5e6
 8004704:	4962      	ldr	r1, [pc, #392]	; (8004890 <lwip_netconn_do_writemore+0x1f8>)
 8004706:	485f      	ldr	r0, [pc, #380]	; (8004884 <lwip_netconn_do_writemore+0x1ec>)
 8004708:	f008 fa71 	bl	800cbee <iprintf>
 800470c:	e7d6      	b.n	80046bc <lwip_netconn_do_writemore+0x24>
  LWIP_ASSERT("conn->write_offset < conn->current_msg->msg.w.len",
 800470e:	4b5b      	ldr	r3, [pc, #364]	; (800487c <lwip_netconn_do_writemore+0x1e4>)
 8004710:	f44f 62bd 	mov.w	r2, #1512	; 0x5e8
 8004714:	495f      	ldr	r1, [pc, #380]	; (8004894 <lwip_netconn_do_writemore+0x1fc>)
 8004716:	485b      	ldr	r0, [pc, #364]	; (8004884 <lwip_netconn_do_writemore+0x1ec>)
 8004718:	f008 fa69 	bl	800cbee <iprintf>
 800471c:	e7d3      	b.n	80046c6 <lwip_netconn_do_writemore+0x2e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800471e:	2601      	movs	r6, #1
 8004720:	b2f6      	uxtb	r6, r6
      conn->write_offset = 0;
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    dataptr = (const u8_t*)conn->current_msg->msg.w.dataptr + conn->write_offset;
 8004722:	6897      	ldr	r7, [r2, #8]
 8004724:	6a23      	ldr	r3, [r4, #32]
 8004726:	441f      	add	r7, r3
    diff = conn->current_msg->msg.w.len - conn->write_offset;
 8004728:	68d2      	ldr	r2, [r2, #12]
 800472a:	1ad5      	subs	r5, r2, r3
    if (diff > 0xffffUL) { /* max_u16_t */
 800472c:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 8004730:	d30f      	bcc.n	8004752 <lwip_netconn_do_writemore+0xba>
      len = 0xffff;
      apiflags |= TCP_WRITE_FLAG_MORE;
 8004732:	f048 0802 	orr.w	r8, r8, #2
      len = 0xffff;
 8004736:	f64f 75ff 	movw	r5, #65535	; 0xffff
    } else {
      len = (u16_t)diff;
    }
    available = tcp_sndbuf(conn->pcb.tcp);
 800473a:	6861      	ldr	r1, [r4, #4]
 800473c:	f8b1 1060 	ldrh.w	r1, [r1, #96]	; 0x60
    if (available < len) {
 8004740:	428d      	cmp	r5, r1
 8004742:	d90b      	bls.n	800475c <lwip_netconn_do_writemore+0xc4>
      /* don't try to write more than sendbuf */
      len = available;
      if (dontblock) {
 8004744:	b13e      	cbz	r6, 8004756 <lwip_netconn_do_writemore+0xbe>
        if (!len) {
 8004746:	2900      	cmp	r1, #0
 8004748:	d039      	beq.n	80047be <lwip_netconn_do_writemore+0x126>
      len = available;
 800474a:	460d      	mov	r5, r1
 800474c:	e006      	b.n	800475c <lwip_netconn_do_writemore+0xc4>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800474e:	2600      	movs	r6, #0
 8004750:	e7e6      	b.n	8004720 <lwip_netconn_do_writemore+0x88>
      len = (u16_t)diff;
 8004752:	b2ad      	uxth	r5, r5
 8004754:	e7f1      	b.n	800473a <lwip_netconn_do_writemore+0xa2>
          err = ERR_WOULDBLOCK;
          goto err_mem;
        }
      } else {
        apiflags |= TCP_WRITE_FLAG_MORE;
 8004756:	f048 0802 	orr.w	r8, r8, #2
      len = available;
 800475a:	460d      	mov	r5, r1
      }
    }
    LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!", ((conn->write_offset + len) <= conn->current_msg->msg.w.len));
 800475c:	442b      	add	r3, r5
 800475e:	429a      	cmp	r2, r3
 8004760:	d325      	bcc.n	80047ae <lwip_netconn_do_writemore+0x116>
    err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 8004762:	4643      	mov	r3, r8
 8004764:	462a      	mov	r2, r5
 8004766:	4639      	mov	r1, r7
 8004768:	6860      	ldr	r0, [r4, #4]
 800476a:	f006 f97d 	bl	800aa68 <tcp_write>
 800476e:	4607      	mov	r7, r0
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 8004770:	1c43      	adds	r3, r0, #1
 8004772:	b2db      	uxtb	r3, r3
 8004774:	2b01      	cmp	r3, #1
 8004776:	d925      	bls.n	80047c4 <lwip_netconn_do_writemore+0x12c>
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
      }
    }

    if (err == ERR_OK) {
 8004778:	2f00      	cmp	r7, #0
 800477a:	d145      	bne.n	8004808 <lwip_netconn_do_writemore+0x170>
      err_t out_err;
      conn->write_offset += len;
 800477c:	6a23      	ldr	r3, [r4, #32]
 800477e:	441d      	add	r5, r3
 8004780:	6225      	str	r5, [r4, #32]
      if ((conn->write_offset == conn->current_msg->msg.w.len) || dontblock) {
 8004782:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004784:	68da      	ldr	r2, [r3, #12]
 8004786:	4295      	cmp	r5, r2
 8004788:	d000      	beq.n	800478c <lwip_netconn_do_writemore+0xf4>
 800478a:	b10e      	cbz	r6, 8004790 <lwip_netconn_do_writemore+0xf8>
        /* return sent length */
        conn->current_msg->msg.w.len = conn->write_offset;
 800478c:	60dd      	str	r5, [r3, #12]
        /* everything was written */
        write_finished = 1;
 800478e:	2601      	movs	r6, #1
      }
      out_err = tcp_output(conn->pcb.tcp);
 8004790:	6860      	ldr	r0, [r4, #4]
 8004792:	f006 fd17 	bl	800b1c4 <tcp_output>
      if (ERR_IS_FATAL(out_err) || (out_err == ERR_RTE)) {
 8004796:	f110 0f0c 	cmn.w	r0, #12
 800479a:	db02      	blt.n	80047a2 <lwip_netconn_do_writemore+0x10a>
 800479c:	f110 0f04 	cmn.w	r0, #4
 80047a0:	d139      	bne.n	8004816 <lwip_netconn_do_writemore+0x17e>
        /* If tcp_output fails with fatal error or no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
        write_finished = 1;
        conn->current_msg->msg.w.len = 0;
 80047a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80047a4:	2200      	movs	r2, #0
 80047a6:	60da      	str	r2, [r3, #12]
        err = out_err;
 80047a8:	4607      	mov	r7, r0
        write_finished = 1;
 80047aa:	2601      	movs	r6, #1
 80047ac:	e033      	b.n	8004816 <lwip_netconn_do_writemore+0x17e>
    LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!", ((conn->write_offset + len) <= conn->current_msg->msg.w.len));
 80047ae:	4b33      	ldr	r3, [pc, #204]	; (800487c <lwip_netconn_do_writemore+0x1e4>)
 80047b0:	f240 6213 	movw	r2, #1555	; 0x613
 80047b4:	4938      	ldr	r1, [pc, #224]	; (8004898 <lwip_netconn_do_writemore+0x200>)
 80047b6:	4833      	ldr	r0, [pc, #204]	; (8004884 <lwip_netconn_do_writemore+0x1ec>)
 80047b8:	f008 fa19 	bl	800cbee <iprintf>
 80047bc:	e7d1      	b.n	8004762 <lwip_netconn_do_writemore+0xca>
      len = available;
 80047be:	460d      	mov	r5, r1
          err = ERR_WOULDBLOCK;
 80047c0:	f06f 0706 	mvn.w	r7, #6
      if (dontblock && (len < conn->current_msg->msg.w.len)) {
 80047c4:	b176      	cbz	r6, 80047e4 <lwip_netconn_do_writemore+0x14c>
 80047c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80047c8:	68db      	ldr	r3, [r3, #12]
 80047ca:	429d      	cmp	r5, r3
 80047cc:	d20a      	bcs.n	80047e4 <lwip_netconn_do_writemore+0x14c>
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
 80047ce:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80047d0:	b11b      	cbz	r3, 80047da <lwip_netconn_do_writemore+0x142>
 80047d2:	462a      	mov	r2, r5
 80047d4:	2103      	movs	r1, #3
 80047d6:	4620      	mov	r0, r4
 80047d8:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 80047da:	7f23      	ldrb	r3, [r4, #28]
 80047dc:	f043 0310 	orr.w	r3, r3, #16
 80047e0:	7723      	strb	r3, [r4, #28]
 80047e2:	e7c9      	b.n	8004778 <lwip_netconn_do_writemore+0xe0>
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 80047e4:	6863      	ldr	r3, [r4, #4]
 80047e6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80047ea:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 80047ee:	d303      	bcc.n	80047f8 <lwip_netconn_do_writemore+0x160>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 80047f0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 80047f4:	2b04      	cmp	r3, #4
 80047f6:	d9bf      	bls.n	8004778 <lwip_netconn_do_writemore+0xe0>
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
 80047f8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d0bc      	beq.n	8004778 <lwip_netconn_do_writemore+0xe0>
 80047fe:	462a      	mov	r2, r5
 8004800:	2103      	movs	r1, #3
 8004802:	4620      	mov	r0, r4
 8004804:	4798      	blx	r3
 8004806:	e7b7      	b.n	8004778 <lwip_netconn_do_writemore+0xe0>
      }
    } else if (err == ERR_MEM) {
 8004808:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 800480c:	d01d      	beq.n	800484a <lwip_netconn_do_writemore+0x1b2>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
      conn->current_msg->msg.w.len = 0;
 800480e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004810:	2200      	movs	r2, #0
 8004812:	60da      	str	r2, [r3, #12]
      write_finished = 1;
 8004814:	2601      	movs	r6, #1
    }
  }
  if (write_finished) {
 8004816:	b1ae      	cbz	r6, 8004844 <lwip_netconn_do_writemore+0x1ac>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8004818:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800481a:	681d      	ldr	r5, [r3, #0]
 800481c:	350c      	adds	r5, #12
    conn->current_msg->err = err;
 800481e:	711f      	strb	r7, [r3, #4]
    conn->current_msg = NULL;
 8004820:	2300      	movs	r3, #0
 8004822:	6263      	str	r3, [r4, #36]	; 0x24
    conn->write_offset = 0;
 8004824:	6223      	str	r3, [r4, #32]
    conn->state = NETCONN_NONE;
 8004826:	7063      	strb	r3, [r4, #1]
    NETCONN_SET_SAFE_ERR(conn, err);
 8004828:	b14c      	cbz	r4, 800483e <lwip_netconn_do_writemore+0x1a6>
 800482a:	f007 fbf5 	bl	800c018 <sys_arch_protect>
 800482e:	f994 3008 	ldrsb.w	r3, [r4, #8]
 8004832:	f113 0f0c 	cmn.w	r3, #12
 8004836:	db00      	blt.n	800483a <lwip_netconn_do_writemore+0x1a2>
 8004838:	7227      	strb	r7, [r4, #8]
 800483a:	f007 fbf9 	bl	800c030 <sys_arch_unprotect>
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
#endif
    {
      sys_sem_signal(op_completed_sem);
 800483e:	4628      	mov	r0, r5
 8004840:	f007 fb98 	bl	800bf74 <sys_sem_signal>
  else {
    return ERR_MEM;
  }
#endif
  return ERR_OK;
}
 8004844:	2000      	movs	r0, #0
 8004846:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      err_t out_err = tcp_output(conn->pcb.tcp);
 800484a:	6860      	ldr	r0, [r4, #4]
 800484c:	f006 fcba 	bl	800b1c4 <tcp_output>
      if (ERR_IS_FATAL(out_err) || (out_err == ERR_RTE)) {
 8004850:	f110 0f0c 	cmn.w	r0, #12
 8004854:	db0b      	blt.n	800486e <lwip_netconn_do_writemore+0x1d6>
 8004856:	f110 0f04 	cmn.w	r0, #4
 800485a:	d008      	beq.n	800486e <lwip_netconn_do_writemore+0x1d6>
      } else if (dontblock) {
 800485c:	2e00      	cmp	r6, #0
 800485e:	d0da      	beq.n	8004816 <lwip_netconn_do_writemore+0x17e>
        conn->current_msg->msg.w.len = 0;
 8004860:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004862:	2200      	movs	r2, #0
 8004864:	60da      	str	r2, [r3, #12]
        write_finished = 1;
 8004866:	2601      	movs	r6, #1
        err = ERR_WOULDBLOCK;
 8004868:	f06f 0706 	mvn.w	r7, #6
 800486c:	e7d3      	b.n	8004816 <lwip_netconn_do_writemore+0x17e>
        conn->current_msg->msg.w.len = 0;
 800486e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004870:	2200      	movs	r2, #0
 8004872:	60da      	str	r2, [r3, #12]
        err = out_err;
 8004874:	4607      	mov	r7, r0
        write_finished = 1;
 8004876:	2601      	movs	r6, #1
        conn->current_msg->msg.w.len = 0;
 8004878:	e7cd      	b.n	8004816 <lwip_netconn_do_writemore+0x17e>
 800487a:	bf00      	nop
 800487c:	0800d824 	.word	0x0800d824
 8004880:	0800d638 	.word	0x0800d638
 8004884:	0800d378 	.word	0x0800d378
 8004888:	0800d460 	.word	0x0800d460
 800488c:	0800d470 	.word	0x0800d470
 8004890:	0800d658 	.word	0x0800d658
 8004894:	0800d670 	.word	0x0800d670
 8004898:	0800d6a4 	.word	0x0800d6a4

0800489c <lwip_netconn_do_close_internal>:
{
 800489c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  LWIP_ASSERT("invalid conn", (conn != NULL));
 80048a0:	4604      	mov	r4, r0
 80048a2:	2800      	cmp	r0, #0
 80048a4:	d035      	beq.n	8004912 <lwip_netconn_do_close_internal+0x76>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 80048a6:	7823      	ldrb	r3, [r4, #0]
 80048a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048ac:	2b10      	cmp	r3, #16
 80048ae:	d006      	beq.n	80048be <lwip_netconn_do_close_internal+0x22>
 80048b0:	4b80      	ldr	r3, [pc, #512]	; (8004ab4 <lwip_netconn_do_close_internal+0x218>)
 80048b2:	f44f 7251 	mov.w	r2, #836	; 0x344
 80048b6:	4980      	ldr	r1, [pc, #512]	; (8004ab8 <lwip_netconn_do_close_internal+0x21c>)
 80048b8:	4880      	ldr	r0, [pc, #512]	; (8004abc <lwip_netconn_do_close_internal+0x220>)
 80048ba:	f008 f998 	bl	800cbee <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 80048be:	7863      	ldrb	r3, [r4, #1]
 80048c0:	2b04      	cmp	r3, #4
 80048c2:	d006      	beq.n	80048d2 <lwip_netconn_do_close_internal+0x36>
 80048c4:	4b7b      	ldr	r3, [pc, #492]	; (8004ab4 <lwip_netconn_do_close_internal+0x218>)
 80048c6:	f240 3245 	movw	r2, #837	; 0x345
 80048ca:	497d      	ldr	r1, [pc, #500]	; (8004ac0 <lwip_netconn_do_close_internal+0x224>)
 80048cc:	487b      	ldr	r0, [pc, #492]	; (8004abc <lwip_netconn_do_close_internal+0x220>)
 80048ce:	f008 f98e 	bl	800cbee <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 80048d2:	6863      	ldr	r3, [r4, #4]
 80048d4:	b32b      	cbz	r3, 8004922 <lwip_netconn_do_close_internal+0x86>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80048d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80048d8:	b35b      	cbz	r3, 8004932 <lwip_netconn_do_close_internal+0x96>
  tpcb = conn->pcb.tcp;
 80048da:	6865      	ldr	r5, [r4, #4]
  shut = conn->current_msg->msg.sd.shut;
 80048dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80048de:	7a1b      	ldrb	r3, [r3, #8]
  shut_rx = shut & NETCONN_SHUT_RD;
 80048e0:	f003 0901 	and.w	r9, r3, #1
  shut_tx = shut & NETCONN_SHUT_WR;
 80048e4:	f003 0802 	and.w	r8, r3, #2
  if (shut == NETCONN_SHUT_RDWR) {
 80048e8:	2b03      	cmp	r3, #3
 80048ea:	d02a      	beq.n	8004942 <lwip_netconn_do_close_internal+0xa6>
  } else if (shut_rx &&
 80048ec:	f1b9 0f00 	cmp.w	r9, #0
 80048f0:	d006      	beq.n	8004900 <lwip_netconn_do_close_internal+0x64>
             ((tpcb->state == FIN_WAIT_1) ||
 80048f2:	7d2a      	ldrb	r2, [r5, #20]
 80048f4:	1f53      	subs	r3, r2, #5
 80048f6:	b2db      	uxtb	r3, r3
  } else if (shut_rx &&
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	d93a      	bls.n	8004972 <lwip_netconn_do_close_internal+0xd6>
              (tpcb->state == FIN_WAIT_2) ||
 80048fc:	2a08      	cmp	r2, #8
 80048fe:	d03a      	beq.n	8004976 <lwip_netconn_do_close_internal+0xda>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 8004900:	f1b8 0f00 	cmp.w	r8, #0
 8004904:	d039      	beq.n	800497a <lwip_netconn_do_close_internal+0xde>
 8004906:	7eab      	ldrb	r3, [r5, #26]
 8004908:	f013 0f10 	tst.w	r3, #16
 800490c:	d137      	bne.n	800497e <lwip_netconn_do_close_internal+0xe2>
    close = 0;
 800490e:	2700      	movs	r7, #0
 8004910:	e018      	b.n	8004944 <lwip_netconn_do_close_internal+0xa8>
  LWIP_ASSERT("invalid conn", (conn != NULL));
 8004912:	4b68      	ldr	r3, [pc, #416]	; (8004ab4 <lwip_netconn_do_close_internal+0x218>)
 8004914:	f240 3243 	movw	r2, #835	; 0x343
 8004918:	496a      	ldr	r1, [pc, #424]	; (8004ac4 <lwip_netconn_do_close_internal+0x228>)
 800491a:	4868      	ldr	r0, [pc, #416]	; (8004abc <lwip_netconn_do_close_internal+0x220>)
 800491c:	f008 f967 	bl	800cbee <iprintf>
 8004920:	e7c1      	b.n	80048a6 <lwip_netconn_do_close_internal+0xa>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8004922:	4b64      	ldr	r3, [pc, #400]	; (8004ab4 <lwip_netconn_do_close_internal+0x218>)
 8004924:	f240 3246 	movw	r2, #838	; 0x346
 8004928:	4967      	ldr	r1, [pc, #412]	; (8004ac8 <lwip_netconn_do_close_internal+0x22c>)
 800492a:	4864      	ldr	r0, [pc, #400]	; (8004abc <lwip_netconn_do_close_internal+0x220>)
 800492c:	f008 f95f 	bl	800cbee <iprintf>
 8004930:	e7d1      	b.n	80048d6 <lwip_netconn_do_close_internal+0x3a>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8004932:	4b60      	ldr	r3, [pc, #384]	; (8004ab4 <lwip_netconn_do_close_internal+0x218>)
 8004934:	f240 3247 	movw	r2, #839	; 0x347
 8004938:	4964      	ldr	r1, [pc, #400]	; (8004acc <lwip_netconn_do_close_internal+0x230>)
 800493a:	4860      	ldr	r0, [pc, #384]	; (8004abc <lwip_netconn_do_close_internal+0x220>)
 800493c:	f008 f957 	bl	800cbee <iprintf>
 8004940:	e7cb      	b.n	80048da <lwip_netconn_do_close_internal+0x3e>
    close = 1;
 8004942:	2701      	movs	r7, #1
  if (close) {
 8004944:	b9ef      	cbnz	r7, 8004982 <lwip_netconn_do_close_internal+0xe6>
  if (tpcb->state == LISTEN) {
 8004946:	7d2b      	ldrb	r3, [r5, #20]
 8004948:	2b01      	cmp	r3, #1
 800494a:	d01f      	beq.n	800498c <lwip_netconn_do_close_internal+0xf0>
    if (shut_rx) {
 800494c:	f1b9 0f00 	cmp.w	r9, #0
 8004950:	d121      	bne.n	8004996 <lwip_netconn_do_close_internal+0xfa>
    if (shut_tx) {
 8004952:	f1b8 0f00 	cmp.w	r8, #0
 8004956:	d127      	bne.n	80049a8 <lwip_netconn_do_close_internal+0x10c>
    if (close) {
 8004958:	bb5f      	cbnz	r7, 80049b2 <lwip_netconn_do_close_internal+0x116>
  if (close) {
 800495a:	b3a7      	cbz	r7, 80049c6 <lwip_netconn_do_close_internal+0x12a>
      err = tcp_close(tpcb);
 800495c:	4628      	mov	r0, r5
 800495e:	f003 ffd5 	bl	800890c <tcp_close>
 8004962:	4606      	mov	r6, r0
  if (err == ERR_OK) {
 8004964:	2e00      	cmp	r6, #0
 8004966:	d042      	beq.n	80049ee <lwip_netconn_do_close_internal+0x152>
    if (err == ERR_MEM) {
 8004968:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
 800496c:	d032      	beq.n	80049d4 <lwip_netconn_do_close_internal+0x138>
      close_finished = 1;
 800496e:	2301      	movs	r3, #1
 8004970:	e03e      	b.n	80049f0 <lwip_netconn_do_close_internal+0x154>
    close = 1;
 8004972:	2701      	movs	r7, #1
 8004974:	e7e6      	b.n	8004944 <lwip_netconn_do_close_internal+0xa8>
 8004976:	2701      	movs	r7, #1
 8004978:	e7e4      	b.n	8004944 <lwip_netconn_do_close_internal+0xa8>
    close = 0;
 800497a:	2700      	movs	r7, #0
 800497c:	e7e2      	b.n	8004944 <lwip_netconn_do_close_internal+0xa8>
    close = 1;
 800497e:	2701      	movs	r7, #1
 8004980:	e7e0      	b.n	8004944 <lwip_netconn_do_close_internal+0xa8>
    tcp_arg(tpcb, NULL);
 8004982:	2100      	movs	r1, #0
 8004984:	4628      	mov	r0, r5
 8004986:	f003 fc30 	bl	80081ea <tcp_arg>
 800498a:	e7dc      	b.n	8004946 <lwip_netconn_do_close_internal+0xaa>
    tcp_accept(tpcb, NULL);
 800498c:	2100      	movs	r1, #0
 800498e:	4628      	mov	r0, r5
 8004990:	f003 fc7a 	bl	8008288 <tcp_accept>
 8004994:	e7e1      	b.n	800495a <lwip_netconn_do_close_internal+0xbe>
      tcp_recv(tpcb, NULL);
 8004996:	2100      	movs	r1, #0
 8004998:	4628      	mov	r0, r5
 800499a:	f003 fc29 	bl	80081f0 <tcp_recv>
      tcp_accept(tpcb, NULL);
 800499e:	2100      	movs	r1, #0
 80049a0:	4628      	mov	r0, r5
 80049a2:	f003 fc71 	bl	8008288 <tcp_accept>
 80049a6:	e7d4      	b.n	8004952 <lwip_netconn_do_close_internal+0xb6>
      tcp_sent(tpcb, NULL);
 80049a8:	2100      	movs	r1, #0
 80049aa:	4628      	mov	r0, r5
 80049ac:	f003 fc3a 	bl	8008224 <tcp_sent>
 80049b0:	e7d2      	b.n	8004958 <lwip_netconn_do_close_internal+0xbc>
      tcp_poll(tpcb, NULL, 0);
 80049b2:	2200      	movs	r2, #0
 80049b4:	4611      	mov	r1, r2
 80049b6:	4628      	mov	r0, r5
 80049b8:	f003 fc6e 	bl	8008298 <tcp_poll>
      tcp_err(tpcb, NULL);
 80049bc:	2100      	movs	r1, #0
 80049be:	4628      	mov	r0, r5
 80049c0:	f003 fc48 	bl	8008254 <tcp_err>
 80049c4:	e7c9      	b.n	800495a <lwip_netconn_do_close_internal+0xbe>
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 80049c6:	4642      	mov	r2, r8
 80049c8:	4649      	mov	r1, r9
 80049ca:	4628      	mov	r0, r5
 80049cc:	f004 f846 	bl	8008a5c <tcp_shutdown>
 80049d0:	4606      	mov	r6, r0
 80049d2:	e7c7      	b.n	8004964 <lwip_netconn_do_close_internal+0xc8>
      if (conn->current_msg->msg.sd.polls_left == 0) {
 80049d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80049d6:	7a5b      	ldrb	r3, [r3, #9]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d13f      	bne.n	8004a5c <lwip_netconn_do_close_internal+0x1c0>
        if (close) {
 80049dc:	b90f      	cbnz	r7, 80049e2 <lwip_netconn_do_close_internal+0x146>
        close_finished = 1;
 80049de:	2301      	movs	r3, #1
 80049e0:	e006      	b.n	80049f0 <lwip_netconn_do_close_internal+0x154>
          tcp_abort(tpcb);
 80049e2:	4628      	mov	r0, r5
 80049e4:	f004 f8e2 	bl	8008bac <tcp_abort>
        close_finished = 1;
 80049e8:	463b      	mov	r3, r7
          err = ERR_OK;
 80049ea:	2600      	movs	r6, #0
 80049ec:	e000      	b.n	80049f0 <lwip_netconn_do_close_internal+0x154>
    close_finished = 1;
 80049ee:	2301      	movs	r3, #1
  if (close_finished) {
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d035      	beq.n	8004a60 <lwip_netconn_do_close_internal+0x1c4>
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80049f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80049f6:	681d      	ldr	r5, [r3, #0]
 80049f8:	350c      	adds	r5, #12
    conn->current_msg->err = err;
 80049fa:	711e      	strb	r6, [r3, #4]
    conn->current_msg = NULL;
 80049fc:	2300      	movs	r3, #0
 80049fe:	6263      	str	r3, [r4, #36]	; 0x24
    conn->state = NETCONN_NONE;
 8004a00:	7063      	strb	r3, [r4, #1]
    if (err == ERR_OK) {
 8004a02:	b9ce      	cbnz	r6, 8004a38 <lwip_netconn_do_close_internal+0x19c>
      if (close) {
 8004a04:	b137      	cbz	r7, 8004a14 <lwip_netconn_do_close_internal+0x178>
        conn->pcb.tcp = NULL;
 8004a06:	6063      	str	r3, [r4, #4]
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8004a08:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004a0a:	b11b      	cbz	r3, 8004a14 <lwip_netconn_do_close_internal+0x178>
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	2104      	movs	r1, #4
 8004a10:	4620      	mov	r0, r4
 8004a12:	4798      	blx	r3
      if (shut_rx) {
 8004a14:	f1b9 0f00 	cmp.w	r9, #0
 8004a18:	d005      	beq.n	8004a26 <lwip_netconn_do_close_internal+0x18a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8004a1a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004a1c:	b11b      	cbz	r3, 8004a26 <lwip_netconn_do_close_internal+0x18a>
 8004a1e:	2200      	movs	r2, #0
 8004a20:	4611      	mov	r1, r2
 8004a22:	4620      	mov	r0, r4
 8004a24:	4798      	blx	r3
      if (shut_tx) {
 8004a26:	f1b8 0f00 	cmp.w	r8, #0
 8004a2a:	d005      	beq.n	8004a38 <lwip_netconn_do_close_internal+0x19c>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8004a2c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004a2e:	b11b      	cbz	r3, 8004a38 <lwip_netconn_do_close_internal+0x19c>
 8004a30:	2200      	movs	r2, #0
 8004a32:	2102      	movs	r1, #2
 8004a34:	4620      	mov	r0, r4
 8004a36:	4798      	blx	r3
    NETCONN_SET_SAFE_ERR(conn, err);
 8004a38:	b14c      	cbz	r4, 8004a4e <lwip_netconn_do_close_internal+0x1b2>
 8004a3a:	f007 faed 	bl	800c018 <sys_arch_protect>
 8004a3e:	f994 3008 	ldrsb.w	r3, [r4, #8]
 8004a42:	f113 0f0c 	cmn.w	r3, #12
 8004a46:	db00      	blt.n	8004a4a <lwip_netconn_do_close_internal+0x1ae>
 8004a48:	7226      	strb	r6, [r4, #8]
 8004a4a:	f007 faf1 	bl	800c030 <sys_arch_unprotect>
      sys_sem_signal(op_completed_sem);
 8004a4e:	4628      	mov	r0, r5
 8004a50:	f007 fa90 	bl	800bf74 <sys_sem_signal>
    return ERR_OK;
 8004a54:	2600      	movs	r6, #0
}
 8004a56:	4630      	mov	r0, r6
 8004a58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  u8_t close_finished = 0;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	e7c7      	b.n	80049f0 <lwip_netconn_do_close_internal+0x154>
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 8004a60:	7d2b      	ldrb	r3, [r5, #20]
 8004a62:	2b01      	cmp	r3, #1
 8004a64:	d019      	beq.n	8004a9a <lwip_netconn_do_close_internal+0x1fe>
    if (shut_tx) {
 8004a66:	f1b8 0f00 	cmp.w	r8, #0
 8004a6a:	d11e      	bne.n	8004aaa <lwip_netconn_do_close_internal+0x20e>
    tcp_poll(tpcb, poll_tcp, 1);
 8004a6c:	2201      	movs	r2, #1
 8004a6e:	4918      	ldr	r1, [pc, #96]	; (8004ad0 <lwip_netconn_do_close_internal+0x234>)
 8004a70:	4628      	mov	r0, r5
 8004a72:	f003 fc11 	bl	8008298 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 8004a76:	4917      	ldr	r1, [pc, #92]	; (8004ad4 <lwip_netconn_do_close_internal+0x238>)
 8004a78:	4628      	mov	r0, r5
 8004a7a:	f003 fbeb 	bl	8008254 <tcp_err>
    tcp_arg(tpcb, conn);
 8004a7e:	4621      	mov	r1, r4
 8004a80:	4628      	mov	r0, r5
 8004a82:	f003 fbb2 	bl	80081ea <tcp_arg>
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 8004a86:	2e00      	cmp	r6, #0
 8004a88:	d1e5      	bne.n	8004a56 <lwip_netconn_do_close_internal+0x1ba>
 8004a8a:	4b0a      	ldr	r3, [pc, #40]	; (8004ab4 <lwip_netconn_do_close_internal+0x218>)
 8004a8c:	f240 32ef 	movw	r2, #1007	; 0x3ef
 8004a90:	4911      	ldr	r1, [pc, #68]	; (8004ad8 <lwip_netconn_do_close_internal+0x23c>)
 8004a92:	480a      	ldr	r0, [pc, #40]	; (8004abc <lwip_netconn_do_close_internal+0x220>)
 8004a94:	f008 f8ab 	bl	800cbee <iprintf>
 8004a98:	e7dd      	b.n	8004a56 <lwip_netconn_do_close_internal+0x1ba>
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 8004a9a:	4b06      	ldr	r3, [pc, #24]	; (8004ab4 <lwip_netconn_do_close_internal+0x218>)
 8004a9c:	f240 32e3 	movw	r2, #995	; 0x3e3
 8004aa0:	490e      	ldr	r1, [pc, #56]	; (8004adc <lwip_netconn_do_close_internal+0x240>)
 8004aa2:	4806      	ldr	r0, [pc, #24]	; (8004abc <lwip_netconn_do_close_internal+0x220>)
 8004aa4:	f008 f8a3 	bl	800cbee <iprintf>
 8004aa8:	e7dd      	b.n	8004a66 <lwip_netconn_do_close_internal+0x1ca>
      tcp_sent(tpcb, sent_tcp);
 8004aaa:	490d      	ldr	r1, [pc, #52]	; (8004ae0 <lwip_netconn_do_close_internal+0x244>)
 8004aac:	4628      	mov	r0, r5
 8004aae:	f003 fbb9 	bl	8008224 <tcp_sent>
 8004ab2:	e7db      	b.n	8004a6c <lwip_netconn_do_close_internal+0x1d0>
 8004ab4:	0800d824 	.word	0x0800d824
 8004ab8:	0800d4c4 	.word	0x0800d4c4
 8004abc:	0800d378 	.word	0x0800d378
 8004ac0:	0800d4e4 	.word	0x0800d4e4
 8004ac4:	0800d3d4 	.word	0x0800d3d4
 8004ac8:	0800d508 	.word	0x0800d508
 8004acc:	0800d470 	.word	0x0800d470
 8004ad0:	08004ae5 	.word	0x08004ae5
 8004ad4:	08004559 	.word	0x08004559
 8004ad8:	0800d540 	.word	0x0800d540
 8004adc:	0800d51c 	.word	0x0800d51c
 8004ae0:	08004b61 	.word	0x08004b61

08004ae4 <poll_tcp>:
{
 8004ae4:	b510      	push	{r4, lr}
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8004ae6:	4604      	mov	r4, r0
 8004ae8:	b1f0      	cbz	r0, 8004b28 <poll_tcp+0x44>
  if (conn->state == NETCONN_WRITE) {
 8004aea:	7863      	ldrb	r3, [r4, #1]
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	d023      	beq.n	8004b38 <poll_tcp+0x54>
  } else if (conn->state == NETCONN_CLOSE) {
 8004af0:	2b04      	cmp	r3, #4
 8004af2:	d025      	beq.n	8004b40 <poll_tcp+0x5c>
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 8004af4:	7f23      	ldrb	r3, [r4, #28]
 8004af6:	f013 0f10 	tst.w	r3, #16
 8004afa:	d013      	beq.n	8004b24 <poll_tcp+0x40>
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8004afc:	6862      	ldr	r2, [r4, #4]
 8004afe:	b18a      	cbz	r2, 8004b24 <poll_tcp+0x40>
 8004b00:	f8b2 1060 	ldrh.w	r1, [r2, #96]	; 0x60
 8004b04:	f5b1 6f86 	cmp.w	r1, #1072	; 0x430
 8004b08:	d30c      	bcc.n	8004b24 <poll_tcp+0x40>
      (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8004b0a:	f8b2 2062 	ldrh.w	r2, [r2, #98]	; 0x62
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8004b0e:	2a04      	cmp	r2, #4
 8004b10:	d808      	bhi.n	8004b24 <poll_tcp+0x40>
      conn->flags &= ~NETCONN_FLAG_CHECK_WRITESPACE;
 8004b12:	f023 0310 	bic.w	r3, r3, #16
 8004b16:	7723      	strb	r3, [r4, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8004b18:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004b1a:	b11b      	cbz	r3, 8004b24 <poll_tcp+0x40>
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	2102      	movs	r1, #2
 8004b20:	4620      	mov	r0, r4
 8004b22:	4798      	blx	r3
}
 8004b24:	2000      	movs	r0, #0
 8004b26:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8004b28:	4b0a      	ldr	r3, [pc, #40]	; (8004b54 <poll_tcp+0x70>)
 8004b2a:	f44f 729c 	mov.w	r2, #312	; 0x138
 8004b2e:	490a      	ldr	r1, [pc, #40]	; (8004b58 <poll_tcp+0x74>)
 8004b30:	480a      	ldr	r0, [pc, #40]	; (8004b5c <poll_tcp+0x78>)
 8004b32:	f008 f85c 	bl	800cbee <iprintf>
 8004b36:	e7d8      	b.n	8004aea <poll_tcp+0x6>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8004b38:	4620      	mov	r0, r4
 8004b3a:	f7ff fdad 	bl	8004698 <lwip_netconn_do_writemore>
 8004b3e:	e7d9      	b.n	8004af4 <poll_tcp+0x10>
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 8004b40:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004b42:	b11b      	cbz	r3, 8004b4c <poll_tcp+0x68>
 8004b44:	7a5a      	ldrb	r2, [r3, #9]
 8004b46:	b10a      	cbz	r2, 8004b4c <poll_tcp+0x68>
      conn->current_msg->msg.sd.polls_left--;
 8004b48:	3a01      	subs	r2, #1
 8004b4a:	725a      	strb	r2, [r3, #9]
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8004b4c:	4620      	mov	r0, r4
 8004b4e:	f7ff fea5 	bl	800489c <lwip_netconn_do_close_internal>
 8004b52:	e7cf      	b.n	8004af4 <poll_tcp+0x10>
 8004b54:	0800d824 	.word	0x0800d824
 8004b58:	0800d460 	.word	0x0800d460
 8004b5c:	0800d378 	.word	0x0800d378

08004b60 <sent_tcp>:
{
 8004b60:	b538      	push	{r3, r4, r5, lr}
 8004b62:	4615      	mov	r5, r2
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8004b64:	4604      	mov	r4, r0
 8004b66:	b1e0      	cbz	r0, 8004ba2 <sent_tcp+0x42>
  if (conn) {
 8004b68:	b1cc      	cbz	r4, 8004b9e <sent_tcp+0x3e>
    if (conn->state == NETCONN_WRITE) {
 8004b6a:	7863      	ldrb	r3, [r4, #1]
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	d020      	beq.n	8004bb2 <sent_tcp+0x52>
    } else if (conn->state == NETCONN_CLOSE) {
 8004b70:	2b04      	cmp	r3, #4
 8004b72:	d022      	beq.n	8004bba <sent_tcp+0x5a>
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8004b74:	6863      	ldr	r3, [r4, #4]
 8004b76:	b193      	cbz	r3, 8004b9e <sent_tcp+0x3e>
 8004b78:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8004b7c:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8004b80:	d30d      	bcc.n	8004b9e <sent_tcp+0x3e>
      (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8004b82:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8004b86:	2b04      	cmp	r3, #4
 8004b88:	d809      	bhi.n	8004b9e <sent_tcp+0x3e>
      conn->flags &= ~NETCONN_FLAG_CHECK_WRITESPACE;
 8004b8a:	7f23      	ldrb	r3, [r4, #28]
 8004b8c:	f023 0310 	bic.w	r3, r3, #16
 8004b90:	7723      	strb	r3, [r4, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 8004b92:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004b94:	b11b      	cbz	r3, 8004b9e <sent_tcp+0x3e>
 8004b96:	462a      	mov	r2, r5
 8004b98:	2102      	movs	r1, #2
 8004b9a:	4620      	mov	r0, r4
 8004b9c:	4798      	blx	r3
}
 8004b9e:	2000      	movs	r0, #0
 8004ba0:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8004ba2:	4b08      	ldr	r3, [pc, #32]	; (8004bc4 <sent_tcp+0x64>)
 8004ba4:	f240 1261 	movw	r2, #353	; 0x161
 8004ba8:	4907      	ldr	r1, [pc, #28]	; (8004bc8 <sent_tcp+0x68>)
 8004baa:	4808      	ldr	r0, [pc, #32]	; (8004bcc <sent_tcp+0x6c>)
 8004bac:	f008 f81f 	bl	800cbee <iprintf>
 8004bb0:	e7da      	b.n	8004b68 <sent_tcp+0x8>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8004bb2:	4620      	mov	r0, r4
 8004bb4:	f7ff fd70 	bl	8004698 <lwip_netconn_do_writemore>
 8004bb8:	e7dc      	b.n	8004b74 <sent_tcp+0x14>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8004bba:	4620      	mov	r0, r4
 8004bbc:	f7ff fe6e 	bl	800489c <lwip_netconn_do_close_internal>
 8004bc0:	e7d8      	b.n	8004b74 <sent_tcp+0x14>
 8004bc2:	bf00      	nop
 8004bc4:	0800d824 	.word	0x0800d824
 8004bc8:	0800d460 	.word	0x0800d460
 8004bcc:	0800d378 	.word	0x0800d378

08004bd0 <recv_tcp>:
{
 8004bd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bd4:	4604      	mov	r4, r0
 8004bd6:	4615      	mov	r5, r2
 8004bd8:	4698      	mov	r8, r3
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8004bda:	460f      	mov	r7, r1
 8004bdc:	b1e9      	cbz	r1, 8004c1a <recv_tcp+0x4a>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8004bde:	b31c      	cbz	r4, 8004c28 <recv_tcp+0x58>
  if (conn == NULL) {
 8004be0:	2c00      	cmp	r4, #0
 8004be2:	d04a      	beq.n	8004c7a <recv_tcp+0xaa>
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 8004be4:	6863      	ldr	r3, [r4, #4]
 8004be6:	429f      	cmp	r7, r3
 8004be8:	d006      	beq.n	8004bf8 <recv_tcp+0x28>
 8004bea:	4b28      	ldr	r3, [pc, #160]	; (8004c8c <recv_tcp+0xbc>)
 8004bec:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004bf0:	4927      	ldr	r1, [pc, #156]	; (8004c90 <recv_tcp+0xc0>)
 8004bf2:	4828      	ldr	r0, [pc, #160]	; (8004c94 <recv_tcp+0xc4>)
 8004bf4:	f007 fffb 	bl	800cbee <iprintf>
  if (!sys_mbox_valid(&conn->recvmbox)) {
 8004bf8:	f104 0610 	add.w	r6, r4, #16
 8004bfc:	4630      	mov	r0, r6
 8004bfe:	f007 f979 	bl	800bef4 <sys_mbox_valid>
 8004c02:	b9c0      	cbnz	r0, 8004c36 <recv_tcp+0x66>
    if (p != NULL) {
 8004c04:	2d00      	cmp	r5, #0
 8004c06:	d03b      	beq.n	8004c80 <recv_tcp+0xb0>
      tcp_recved(pcb, p->tot_len);
 8004c08:	8929      	ldrh	r1, [r5, #8]
 8004c0a:	4638      	mov	r0, r7
 8004c0c:	f003 fa80 	bl	8008110 <tcp_recved>
      pbuf_free(p);
 8004c10:	4628      	mov	r0, r5
 8004c12:	f002 fe99 	bl	8007948 <pbuf_free>
    return ERR_OK;
 8004c16:	2500      	movs	r5, #0
 8004c18:	e01e      	b.n	8004c58 <recv_tcp+0x88>
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8004c1a:	4b1c      	ldr	r3, [pc, #112]	; (8004c8c <recv_tcp+0xbc>)
 8004c1c:	22f9      	movs	r2, #249	; 0xf9
 8004c1e:	491e      	ldr	r1, [pc, #120]	; (8004c98 <recv_tcp+0xc8>)
 8004c20:	481c      	ldr	r0, [pc, #112]	; (8004c94 <recv_tcp+0xc4>)
 8004c22:	f007 ffe4 	bl	800cbee <iprintf>
 8004c26:	e7da      	b.n	8004bde <recv_tcp+0xe>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8004c28:	4b18      	ldr	r3, [pc, #96]	; (8004c8c <recv_tcp+0xbc>)
 8004c2a:	22fa      	movs	r2, #250	; 0xfa
 8004c2c:	491b      	ldr	r1, [pc, #108]	; (8004c9c <recv_tcp+0xcc>)
 8004c2e:	4819      	ldr	r0, [pc, #100]	; (8004c94 <recv_tcp+0xc4>)
 8004c30:	f007 ffdd 	bl	800cbee <iprintf>
 8004c34:	e7d4      	b.n	8004be0 <recv_tcp+0x10>
  if (err != ERR_OK) {
 8004c36:	f1b8 0f00 	cmp.w	r8, #0
 8004c3a:	d110      	bne.n	8004c5e <recv_tcp+0x8e>
  if (p != NULL) {
 8004c3c:	b1dd      	cbz	r5, 8004c76 <recv_tcp+0xa6>
    len = p->tot_len;
 8004c3e:	892f      	ldrh	r7, [r5, #8]
  if (sys_mbox_trypost(&conn->recvmbox, p) != ERR_OK) {
 8004c40:	4629      	mov	r1, r5
 8004c42:	4630      	mov	r0, r6
 8004c44:	f007 f90d 	bl	800be62 <sys_mbox_trypost>
 8004c48:	4605      	mov	r5, r0
 8004c4a:	b9d8      	cbnz	r0, 8004c84 <recv_tcp+0xb4>
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8004c4c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004c4e:	b11b      	cbz	r3, 8004c58 <recv_tcp+0x88>
 8004c50:	463a      	mov	r2, r7
 8004c52:	2100      	movs	r1, #0
 8004c54:	4620      	mov	r0, r4
 8004c56:	4798      	blx	r3
}
 8004c58:	4628      	mov	r0, r5
 8004c5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    NETCONN_SET_SAFE_ERR(conn, err);
 8004c5e:	f007 f9db 	bl	800c018 <sys_arch_protect>
 8004c62:	f994 3008 	ldrsb.w	r3, [r4, #8]
 8004c66:	f113 0f0c 	cmn.w	r3, #12
 8004c6a:	db01      	blt.n	8004c70 <recv_tcp+0xa0>
 8004c6c:	f884 8008 	strb.w	r8, [r4, #8]
 8004c70:	f007 f9de 	bl	800c030 <sys_arch_unprotect>
 8004c74:	e7e2      	b.n	8004c3c <recv_tcp+0x6c>
    len = 0;
 8004c76:	2700      	movs	r7, #0
 8004c78:	e7e2      	b.n	8004c40 <recv_tcp+0x70>
    return ERR_VAL;
 8004c7a:	f06f 0505 	mvn.w	r5, #5
 8004c7e:	e7eb      	b.n	8004c58 <recv_tcp+0x88>
    return ERR_OK;
 8004c80:	2500      	movs	r5, #0
 8004c82:	e7e9      	b.n	8004c58 <recv_tcp+0x88>
    return ERR_MEM;
 8004c84:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004c88:	e7e6      	b.n	8004c58 <recv_tcp+0x88>
 8004c8a:	bf00      	nop
 8004c8c:	0800d824 	.word	0x0800d824
 8004c90:	0800d804 	.word	0x0800d804
 8004c94:	0800d378 	.word	0x0800d378
 8004c98:	0800d7c0 	.word	0x0800d7c0
 8004c9c:	0800d7e4 	.word	0x0800d7e4

08004ca0 <lwip_netconn_do_newconn>:
{
 8004ca0:	b510      	push	{r4, lr}
 8004ca2:	4604      	mov	r4, r0
  msg->err = ERR_OK;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	7103      	strb	r3, [r0, #4]
  if (msg->conn->pcb.tcp == NULL) {
 8004ca8:	6803      	ldr	r3, [r0, #0]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	b19b      	cbz	r3, 8004cd6 <lwip_netconn_do_newconn+0x36>
  TCPIP_APIMSG_ACK(msg);
 8004cae:	6823      	ldr	r3, [r4, #0]
 8004cb0:	b163      	cbz	r3, 8004ccc <lwip_netconn_do_newconn+0x2c>
 8004cb2:	f007 f9b1 	bl	800c018 <sys_arch_protect>
 8004cb6:	6823      	ldr	r3, [r4, #0]
 8004cb8:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8004cbc:	f112 0f0c 	cmn.w	r2, #12
 8004cc0:	db02      	blt.n	8004cc8 <lwip_netconn_do_newconn+0x28>
 8004cc2:	f994 2004 	ldrsb.w	r2, [r4, #4]
 8004cc6:	721a      	strb	r2, [r3, #8]
 8004cc8:	f007 f9b2 	bl	800c030 <sys_arch_unprotect>
 8004ccc:	6820      	ldr	r0, [r4, #0]
 8004cce:	300c      	adds	r0, #12
 8004cd0:	f007 f950 	bl	800bf74 <sys_sem_signal>
 8004cd4:	bd10      	pop	{r4, pc}
    pcb_new(msg);
 8004cd6:	f7ff fb8f 	bl	80043f8 <pcb_new>
 8004cda:	e7e8      	b.n	8004cae <lwip_netconn_do_newconn+0xe>

08004cdc <netconn_alloc>:
{
 8004cdc:	b570      	push	{r4, r5, r6, lr}
 8004cde:	4605      	mov	r5, r0
 8004ce0:	460e      	mov	r6, r1
  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8004ce2:	2007      	movs	r0, #7
 8004ce4:	f002 fc40 	bl	8007568 <memp_malloc>
  if (conn == NULL) {
 8004ce8:	4604      	mov	r4, r0
 8004cea:	b318      	cbz	r0, 8004d34 <netconn_alloc+0x58>
  conn->last_err = ERR_OK;
 8004cec:	2300      	movs	r3, #0
 8004cee:	7203      	strb	r3, [r0, #8]
  conn->type = t;
 8004cf0:	7005      	strb	r5, [r0, #0]
  conn->pcb.tcp = NULL;
 8004cf2:	6043      	str	r3, [r0, #4]
  switch(NETCONNTYPE_GROUP(t)) {
 8004cf4:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 8004cf8:	2d10      	cmp	r5, #16
 8004cfa:	d001      	beq.n	8004d00 <netconn_alloc+0x24>
 8004cfc:	2d20      	cmp	r5, #32
 8004cfe:	d11b      	bne.n	8004d38 <netconn_alloc+0x5c>
  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 8004d00:	f104 0510 	add.w	r5, r4, #16
 8004d04:	2106      	movs	r1, #6
 8004d06:	4628      	mov	r0, r5
 8004d08:	f007 f882 	bl	800be10 <sys_mbox_new>
 8004d0c:	b9d8      	cbnz	r0, 8004d46 <netconn_alloc+0x6a>
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8004d0e:	2100      	movs	r1, #0
 8004d10:	f104 000c 	add.w	r0, r4, #12
 8004d14:	f007 f8f7 	bl	800bf06 <sys_sem_new>
 8004d18:	b9d8      	cbnz	r0, 8004d52 <netconn_alloc+0x76>
  sys_mbox_set_invalid(&conn->acceptmbox);
 8004d1a:	f104 0014 	add.w	r0, r4, #20
 8004d1e:	f007 f8ef 	bl	800bf00 <sys_mbox_set_invalid>
  conn->state        = NETCONN_NONE;
 8004d22:	2300      	movs	r3, #0
 8004d24:	7063      	strb	r3, [r4, #1]
  conn->socket       = -1;
 8004d26:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004d2a:	61a2      	str	r2, [r4, #24]
  conn->callback     = callback;
 8004d2c:	62a6      	str	r6, [r4, #40]	; 0x28
  conn->current_msg  = NULL;
 8004d2e:	6263      	str	r3, [r4, #36]	; 0x24
  conn->write_offset = 0;
 8004d30:	6223      	str	r3, [r4, #32]
  conn->flags = 0;
 8004d32:	7723      	strb	r3, [r4, #28]
}
 8004d34:	4620      	mov	r0, r4
 8004d36:	bd70      	pop	{r4, r5, r6, pc}
    LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 8004d38:	4b08      	ldr	r3, [pc, #32]	; (8004d5c <netconn_alloc+0x80>)
 8004d3a:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8004d3e:	4908      	ldr	r1, [pc, #32]	; (8004d60 <netconn_alloc+0x84>)
 8004d40:	4808      	ldr	r0, [pc, #32]	; (8004d64 <netconn_alloc+0x88>)
 8004d42:	f007 ff54 	bl	800cbee <iprintf>
  memp_free(MEMP_NETCONN, conn);
 8004d46:	4621      	mov	r1, r4
 8004d48:	2007      	movs	r0, #7
 8004d4a:	f002 fc27 	bl	800759c <memp_free>
  return NULL;
 8004d4e:	2400      	movs	r4, #0
 8004d50:	e7f0      	b.n	8004d34 <netconn_alloc+0x58>
    sys_mbox_free(&conn->recvmbox);
 8004d52:	4628      	mov	r0, r5
 8004d54:	f007 f870 	bl	800be38 <sys_mbox_free>
    goto free_and_return;
 8004d58:	e7f5      	b.n	8004d46 <netconn_alloc+0x6a>
 8004d5a:	bf00      	nop
 8004d5c:	0800d824 	.word	0x0800d824
 8004d60:	0800d6d0 	.word	0x0800d6d0
 8004d64:	0800d378 	.word	0x0800d378

08004d68 <netconn_free>:
{
 8004d68:	b538      	push	{r3, r4, r5, lr}
 8004d6a:	4604      	mov	r4, r0
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8004d6c:	6843      	ldr	r3, [r0, #4]
 8004d6e:	b133      	cbz	r3, 8004d7e <netconn_free+0x16>
 8004d70:	4b16      	ldr	r3, [pc, #88]	; (8004dcc <netconn_free+0x64>)
 8004d72:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8004d76:	4916      	ldr	r1, [pc, #88]	; (8004dd0 <netconn_free+0x68>)
 8004d78:	4816      	ldr	r0, [pc, #88]	; (8004dd4 <netconn_free+0x6c>)
 8004d7a:	f007 ff38 	bl	800cbee <iprintf>
  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8004d7e:	f104 0010 	add.w	r0, r4, #16
 8004d82:	f007 f8b7 	bl	800bef4 <sys_mbox_valid>
 8004d86:	b988      	cbnz	r0, 8004dac <netconn_free+0x44>
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8004d88:	f104 0014 	add.w	r0, r4, #20
 8004d8c:	f007 f8b2 	bl	800bef4 <sys_mbox_valid>
 8004d90:	b9a0      	cbnz	r0, 8004dbc <netconn_free+0x54>
  sys_sem_free(&conn->op_completed);
 8004d92:	f104 050c 	add.w	r5, r4, #12
 8004d96:	4628      	mov	r0, r5
 8004d98:	f007 f8f1 	bl	800bf7e <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 8004d9c:	4628      	mov	r0, r5
 8004d9e:	f007 f8f9 	bl	800bf94 <sys_sem_set_invalid>
  memp_free(MEMP_NETCONN, conn);
 8004da2:	4621      	mov	r1, r4
 8004da4:	2007      	movs	r0, #7
 8004da6:	f002 fbf9 	bl	800759c <memp_free>
 8004daa:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8004dac:	4b07      	ldr	r3, [pc, #28]	; (8004dcc <netconn_free+0x64>)
 8004dae:	f240 22e2 	movw	r2, #738	; 0x2e2
 8004db2:	4909      	ldr	r1, [pc, #36]	; (8004dd8 <netconn_free+0x70>)
 8004db4:	4807      	ldr	r0, [pc, #28]	; (8004dd4 <netconn_free+0x6c>)
 8004db6:	f007 ff1a 	bl	800cbee <iprintf>
 8004dba:	e7e5      	b.n	8004d88 <netconn_free+0x20>
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8004dbc:	4b03      	ldr	r3, [pc, #12]	; (8004dcc <netconn_free+0x64>)
 8004dbe:	f240 22e5 	movw	r2, #741	; 0x2e5
 8004dc2:	4906      	ldr	r1, [pc, #24]	; (8004ddc <netconn_free+0x74>)
 8004dc4:	4803      	ldr	r0, [pc, #12]	; (8004dd4 <netconn_free+0x6c>)
 8004dc6:	f007 ff12 	bl	800cbee <iprintf>
 8004dca:	e7e2      	b.n	8004d92 <netconn_free+0x2a>
 8004dcc:	0800d824 	.word	0x0800d824
 8004dd0:	0800d6f8 	.word	0x0800d6f8
 8004dd4:	0800d378 	.word	0x0800d378
 8004dd8:	0800d728 	.word	0x0800d728
 8004ddc:	0800d764 	.word	0x0800d764

08004de0 <netconn_drain>:
{
 8004de0:	b570      	push	{r4, r5, r6, lr}
 8004de2:	b082      	sub	sp, #8
 8004de4:	4605      	mov	r5, r0
  if (sys_mbox_valid(&conn->recvmbox)) {
 8004de6:	f100 0410 	add.w	r4, r0, #16
 8004dea:	4620      	mov	r0, r4
 8004dec:	f007 f882 	bl	800bef4 <sys_mbox_valid>
 8004df0:	bb38      	cbnz	r0, 8004e42 <netconn_drain+0x62>
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8004df2:	3514      	adds	r5, #20
 8004df4:	4628      	mov	r0, r5
 8004df6:	f007 f87d 	bl	800bef4 <sys_mbox_valid>
 8004dfa:	2800      	cmp	r0, #0
 8004dfc:	d03e      	beq.n	8004e7c <netconn_drain+0x9c>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8004dfe:	a901      	add	r1, sp, #4
 8004e00:	4628      	mov	r0, r5
 8004e02:	f007 f864 	bl	800bece <sys_arch_mbox_tryfetch>
 8004e06:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8004e0a:	d031      	beq.n	8004e70 <netconn_drain+0x90>
      if (mem != &netconn_aborted) {
 8004e0c:	9c01      	ldr	r4, [sp, #4]
 8004e0e:	4b1c      	ldr	r3, [pc, #112]	; (8004e80 <netconn_drain+0xa0>)
 8004e10:	429c      	cmp	r4, r3
 8004e12:	d0f4      	beq.n	8004dfe <netconn_drain+0x1e>
        netconn_drain(newconn);
 8004e14:	4620      	mov	r0, r4
 8004e16:	f7ff ffe3 	bl	8004de0 <netconn_drain>
        if (newconn->pcb.tcp != NULL) {
 8004e1a:	6860      	ldr	r0, [r4, #4]
 8004e1c:	b118      	cbz	r0, 8004e26 <netconn_drain+0x46>
          tcp_abort(newconn->pcb.tcp);
 8004e1e:	f003 fec5 	bl	8008bac <tcp_abort>
          newconn->pcb.tcp = NULL;
 8004e22:	2300      	movs	r3, #0
 8004e24:	6063      	str	r3, [r4, #4]
        netconn_free(newconn);
 8004e26:	4620      	mov	r0, r4
 8004e28:	f7ff ff9e 	bl	8004d68 <netconn_free>
 8004e2c:	e7e7      	b.n	8004dfe <netconn_drain+0x1e>
        if (mem != NULL) {
 8004e2e:	9e01      	ldr	r6, [sp, #4]
 8004e30:	b13e      	cbz	r6, 8004e42 <netconn_drain+0x62>
          if (conn->pcb.tcp != NULL) {
 8004e32:	6868      	ldr	r0, [r5, #4]
 8004e34:	b110      	cbz	r0, 8004e3c <netconn_drain+0x5c>
            tcp_recved(conn->pcb.tcp, p->tot_len);
 8004e36:	8931      	ldrh	r1, [r6, #8]
 8004e38:	f003 f96a 	bl	8008110 <tcp_recved>
          pbuf_free(p);
 8004e3c:	4630      	mov	r0, r6
 8004e3e:	f002 fd83 	bl	8007948 <pbuf_free>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8004e42:	a901      	add	r1, sp, #4
 8004e44:	4620      	mov	r0, r4
 8004e46:	f007 f842 	bl	800bece <sys_arch_mbox_tryfetch>
 8004e4a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8004e4e:	d008      	beq.n	8004e62 <netconn_drain+0x82>
      if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 8004e50:	782b      	ldrb	r3, [r5, #0]
 8004e52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e56:	2b10      	cmp	r3, #16
 8004e58:	d0e9      	beq.n	8004e2e <netconn_drain+0x4e>
        netbuf_delete((struct netbuf *)mem);
 8004e5a:	9801      	ldr	r0, [sp, #4]
 8004e5c:	f000 f940 	bl	80050e0 <netbuf_delete>
 8004e60:	e7ef      	b.n	8004e42 <netconn_drain+0x62>
    sys_mbox_free(&conn->recvmbox);
 8004e62:	4620      	mov	r0, r4
 8004e64:	f006 ffe8 	bl	800be38 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 8004e68:	4620      	mov	r0, r4
 8004e6a:	f007 f849 	bl	800bf00 <sys_mbox_set_invalid>
 8004e6e:	e7c0      	b.n	8004df2 <netconn_drain+0x12>
    sys_mbox_free(&conn->acceptmbox);
 8004e70:	4628      	mov	r0, r5
 8004e72:	f006 ffe1 	bl	800be38 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 8004e76:	4628      	mov	r0, r5
 8004e78:	f007 f842 	bl	800bf00 <sys_mbox_set_invalid>
}
 8004e7c:	b002      	add	sp, #8
 8004e7e:	bd70      	pop	{r4, r5, r6, pc}
 8004e80:	20004268 	.word	0x20004268

08004e84 <lwip_netconn_do_delconn>:
{
 8004e84:	b538      	push	{r3, r4, r5, lr}
 8004e86:	4604      	mov	r4, r0
  enum netconn_state state = msg->conn->state;
 8004e88:	6803      	ldr	r3, [r0, #0]
 8004e8a:	785d      	ldrb	r5, [r3, #1]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 8004e8c:	b15d      	cbz	r5, 8004ea6 <lwip_netconn_do_delconn+0x22>
 8004e8e:	781b      	ldrb	r3, [r3, #0]
 8004e90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e94:	2b10      	cmp	r3, #16
 8004e96:	d006      	beq.n	8004ea6 <lwip_netconn_do_delconn+0x22>
 8004e98:	4b3d      	ldr	r3, [pc, #244]	; (8004f90 <lwip_netconn_do_delconn+0x10c>)
 8004e9a:	f240 4201 	movw	r2, #1025	; 0x401
 8004e9e:	493d      	ldr	r1, [pc, #244]	; (8004f94 <lwip_netconn_do_delconn+0x110>)
 8004ea0:	483d      	ldr	r0, [pc, #244]	; (8004f98 <lwip_netconn_do_delconn+0x114>)
 8004ea2:	f007 fea4 	bl	800cbee <iprintf>
  if (((state != NETCONN_NONE) &&
 8004ea6:	b1f5      	cbz	r5, 8004ee6 <lwip_netconn_do_delconn+0x62>
 8004ea8:	2d02      	cmp	r5, #2
 8004eaa:	d01c      	beq.n	8004ee6 <lwip_netconn_do_delconn+0x62>
       (state != NETCONN_LISTEN) &&
 8004eac:	2d03      	cmp	r5, #3
 8004eae:	d01a      	beq.n	8004ee6 <lwip_netconn_do_delconn+0x62>
    msg->err = ERR_INPROGRESS;
 8004eb0:	23fb      	movs	r3, #251	; 0xfb
 8004eb2:	7123      	strb	r3, [r4, #4]
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 8004eb4:	6820      	ldr	r0, [r4, #0]
 8004eb6:	300c      	adds	r0, #12
 8004eb8:	f007 f866 	bl	800bf88 <sys_sem_valid>
 8004ebc:	b190      	cbz	r0, 8004ee4 <lwip_netconn_do_delconn+0x60>
    TCPIP_APIMSG_ACK(msg);
 8004ebe:	6823      	ldr	r3, [r4, #0]
 8004ec0:	b163      	cbz	r3, 8004edc <lwip_netconn_do_delconn+0x58>
 8004ec2:	f007 f8a9 	bl	800c018 <sys_arch_protect>
 8004ec6:	6823      	ldr	r3, [r4, #0]
 8004ec8:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8004ecc:	f112 0f0c 	cmn.w	r2, #12
 8004ed0:	db02      	blt.n	8004ed8 <lwip_netconn_do_delconn+0x54>
 8004ed2:	f994 2004 	ldrsb.w	r2, [r4, #4]
 8004ed6:	721a      	strb	r2, [r3, #8]
 8004ed8:	f007 f8aa 	bl	800c030 <sys_arch_unprotect>
 8004edc:	6820      	ldr	r0, [r4, #0]
 8004ede:	300c      	adds	r0, #12
 8004ee0:	f007 f848 	bl	800bf74 <sys_sem_signal>
 8004ee4:	bd38      	pop	{r3, r4, r5, pc}
       (state != NETCONN_CONNECT)) ||
 8004ee6:	2d03      	cmp	r5, #3
 8004ee8:	d027      	beq.n	8004f3a <lwip_netconn_do_delconn+0xb6>
    LWIP_ASSERT("blocking connect in progress",
 8004eea:	2d03      	cmp	r5, #3
 8004eec:	d02b      	beq.n	8004f46 <lwip_netconn_do_delconn+0xc2>
    msg->err = ERR_OK;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	7123      	strb	r3, [r4, #4]
    netconn_drain(msg->conn);
 8004ef2:	6820      	ldr	r0, [r4, #0]
 8004ef4:	f7ff ff74 	bl	8004de0 <netconn_drain>
    if (msg->conn->pcb.tcp != NULL) {
 8004ef8:	6822      	ldr	r2, [r4, #0]
 8004efa:	6851      	ldr	r1, [r2, #4]
 8004efc:	b179      	cbz	r1, 8004f1e <lwip_netconn_do_delconn+0x9a>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8004efe:	7813      	ldrb	r3, [r2, #0]
 8004f00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f04:	2b10      	cmp	r3, #16
 8004f06:	d02b      	beq.n	8004f60 <lwip_netconn_do_delconn+0xdc>
 8004f08:	2b20      	cmp	r3, #32
 8004f0a:	d105      	bne.n	8004f18 <lwip_netconn_do_delconn+0x94>
        msg->conn->pcb.udp->recv_arg = NULL;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	61cb      	str	r3, [r1, #28]
        udp_remove(msg->conn->pcb.udp);
 8004f10:	6823      	ldr	r3, [r4, #0]
 8004f12:	6858      	ldr	r0, [r3, #4]
 8004f14:	f006 fea8 	bl	800bc68 <udp_remove>
      msg->conn->pcb.tcp = NULL;
 8004f18:	6823      	ldr	r3, [r4, #0]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	605a      	str	r2, [r3, #4]
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 8004f1e:	6820      	ldr	r0, [r4, #0]
 8004f20:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004f22:	b113      	cbz	r3, 8004f2a <lwip_netconn_do_delconn+0xa6>
 8004f24:	2200      	movs	r2, #0
 8004f26:	4611      	mov	r1, r2
 8004f28:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 8004f2a:	6820      	ldr	r0, [r4, #0]
 8004f2c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d0c0      	beq.n	8004eb4 <lwip_netconn_do_delconn+0x30>
 8004f32:	2200      	movs	r2, #0
 8004f34:	2102      	movs	r1, #2
 8004f36:	4798      	blx	r3
 8004f38:	e7bc      	b.n	8004eb4 <lwip_netconn_do_delconn+0x30>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 8004f3a:	6823      	ldr	r3, [r4, #0]
 8004f3c:	7f1b      	ldrb	r3, [r3, #28]
 8004f3e:	f013 0f04 	tst.w	r3, #4
 8004f42:	d1d2      	bne.n	8004eea <lwip_netconn_do_delconn+0x66>
 8004f44:	e7b4      	b.n	8004eb0 <lwip_netconn_do_delconn+0x2c>
    LWIP_ASSERT("blocking connect in progress",
 8004f46:	6823      	ldr	r3, [r4, #0]
 8004f48:	7f1b      	ldrb	r3, [r3, #28]
 8004f4a:	f013 0f04 	tst.w	r3, #4
 8004f4e:	d1ce      	bne.n	8004eee <lwip_netconn_do_delconn+0x6a>
 8004f50:	4b0f      	ldr	r3, [pc, #60]	; (8004f90 <lwip_netconn_do_delconn+0x10c>)
 8004f52:	f240 421f 	movw	r2, #1055	; 0x41f
 8004f56:	4911      	ldr	r1, [pc, #68]	; (8004f9c <lwip_netconn_do_delconn+0x118>)
 8004f58:	480f      	ldr	r0, [pc, #60]	; (8004f98 <lwip_netconn_do_delconn+0x114>)
 8004f5a:	f007 fe48 	bl	800cbee <iprintf>
 8004f5e:	e7c6      	b.n	8004eee <lwip_netconn_do_delconn+0x6a>
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 8004f60:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8004f62:	b18b      	cbz	r3, 8004f88 <lwip_netconn_do_delconn+0x104>
 8004f64:	4b0a      	ldr	r3, [pc, #40]	; (8004f90 <lwip_netconn_do_delconn+0x10c>)
 8004f66:	f240 4235 	movw	r2, #1077	; 0x435
 8004f6a:	490d      	ldr	r1, [pc, #52]	; (8004fa0 <lwip_netconn_do_delconn+0x11c>)
 8004f6c:	480a      	ldr	r0, [pc, #40]	; (8004f98 <lwip_netconn_do_delconn+0x114>)
 8004f6e:	f007 fe3e 	bl	800cbee <iprintf>
        msg->conn->state = NETCONN_CLOSE;
 8004f72:	6823      	ldr	r3, [r4, #0]
 8004f74:	2204      	movs	r2, #4
 8004f76:	705a      	strb	r2, [r3, #1]
        msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 8004f78:	2303      	movs	r3, #3
 8004f7a:	7223      	strb	r3, [r4, #8]
        msg->conn->current_msg = msg;
 8004f7c:	6823      	ldr	r3, [r4, #0]
 8004f7e:	625c      	str	r4, [r3, #36]	; 0x24
        lwip_netconn_do_close_internal(msg->conn);
 8004f80:	6820      	ldr	r0, [r4, #0]
 8004f82:	f7ff fc8b 	bl	800489c <lwip_netconn_do_close_internal>
        return;
 8004f86:	bd38      	pop	{r3, r4, r5, pc}
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 8004f88:	6a13      	ldr	r3, [r2, #32]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d1ea      	bne.n	8004f64 <lwip_netconn_do_delconn+0xe0>
 8004f8e:	e7f0      	b.n	8004f72 <lwip_netconn_do_delconn+0xee>
 8004f90:	0800d824 	.word	0x0800d824
 8004f94:	0800d5e8 	.word	0x0800d5e8
 8004f98:	0800d378 	.word	0x0800d378
 8004f9c:	0800d5fc 	.word	0x0800d5fc
 8004fa0:	0800d61c 	.word	0x0800d61c

08004fa4 <lwip_netconn_do_connect>:
{
 8004fa4:	b510      	push	{r4, lr}
 8004fa6:	4604      	mov	r4, r0
  if (msg->conn->pcb.tcp == NULL) {
 8004fa8:	6802      	ldr	r2, [r0, #0]
 8004faa:	6850      	ldr	r0, [r2, #4]
 8004fac:	b1f8      	cbz	r0, 8004fee <lwip_netconn_do_connect+0x4a>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8004fae:	7813      	ldrb	r3, [r2, #0]
 8004fb0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004fb4:	2b10      	cmp	r3, #16
 8004fb6:	d01d      	beq.n	8004ff4 <lwip_netconn_do_connect+0x50>
 8004fb8:	2b20      	cmp	r3, #32
 8004fba:	d14b      	bne.n	8005054 <lwip_netconn_do_connect+0xb0>
      msg->err = udp_connect(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8004fbc:	89a2      	ldrh	r2, [r4, #12]
 8004fbe:	68a1      	ldr	r1, [r4, #8]
 8004fc0:	f006 fe16 	bl	800bbf0 <udp_connect>
 8004fc4:	7120      	strb	r0, [r4, #4]
  TCPIP_APIMSG_ACK(msg);
 8004fc6:	6823      	ldr	r3, [r4, #0]
 8004fc8:	b163      	cbz	r3, 8004fe4 <lwip_netconn_do_connect+0x40>
 8004fca:	f007 f825 	bl	800c018 <sys_arch_protect>
 8004fce:	6823      	ldr	r3, [r4, #0]
 8004fd0:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8004fd4:	f112 0f0c 	cmn.w	r2, #12
 8004fd8:	db02      	blt.n	8004fe0 <lwip_netconn_do_connect+0x3c>
 8004fda:	f994 2004 	ldrsb.w	r2, [r4, #4]
 8004fde:	721a      	strb	r2, [r3, #8]
 8004fe0:	f007 f826 	bl	800c030 <sys_arch_unprotect>
 8004fe4:	6820      	ldr	r0, [r4, #0]
 8004fe6:	300c      	adds	r0, #12
 8004fe8:	f006 ffc4 	bl	800bf74 <sys_sem_signal>
 8004fec:	bd10      	pop	{r4, pc}
    msg->err = ERR_CLSD;
 8004fee:	23f1      	movs	r3, #241	; 0xf1
 8004ff0:	7123      	strb	r3, [r4, #4]
 8004ff2:	e7e8      	b.n	8004fc6 <lwip_netconn_do_connect+0x22>
      if (msg->conn->state == NETCONN_CONNECT) {
 8004ff4:	7853      	ldrb	r3, [r2, #1]
 8004ff6:	2b03      	cmp	r3, #3
 8004ff8:	d003      	beq.n	8005002 <lwip_netconn_do_connect+0x5e>
      } else if (msg->conn->state != NETCONN_NONE) {
 8004ffa:	b12b      	cbz	r3, 8005008 <lwip_netconn_do_connect+0x64>
        msg->err = ERR_ISCONN;
 8004ffc:	23f6      	movs	r3, #246	; 0xf6
 8004ffe:	7123      	strb	r3, [r4, #4]
 8005000:	e7e1      	b.n	8004fc6 <lwip_netconn_do_connect+0x22>
        msg->err = ERR_ALREADY;
 8005002:	23f7      	movs	r3, #247	; 0xf7
 8005004:	7123      	strb	r3, [r4, #4]
 8005006:	e7de      	b.n	8004fc6 <lwip_netconn_do_connect+0x22>
        setup_tcp(msg->conn);
 8005008:	4610      	mov	r0, r2
 800500a:	f7ff f9d5 	bl	80043b8 <setup_tcp>
        msg->err = tcp_connect(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr),
 800500e:	6820      	ldr	r0, [r4, #0]
 8005010:	4b15      	ldr	r3, [pc, #84]	; (8005068 <lwip_netconn_do_connect+0xc4>)
 8005012:	89a2      	ldrh	r2, [r4, #12]
 8005014:	68a1      	ldr	r1, [r4, #8]
 8005016:	6840      	ldr	r0, [r0, #4]
 8005018:	f003 fece 	bl	8008db8 <tcp_connect>
 800501c:	7120      	strb	r0, [r4, #4]
        if (msg->err == ERR_OK) {
 800501e:	2800      	cmp	r0, #0
 8005020:	d1d1      	bne.n	8004fc6 <lwip_netconn_do_connect+0x22>
          u8_t non_blocking = netconn_is_nonblocking(msg->conn);
 8005022:	6822      	ldr	r2, [r4, #0]
 8005024:	7f13      	ldrb	r3, [r2, #28]
          msg->conn->state = NETCONN_CONNECT;
 8005026:	2103      	movs	r1, #3
 8005028:	7051      	strb	r1, [r2, #1]
          SET_NONBLOCKING_CONNECT(msg->conn, non_blocking);
 800502a:	f013 0302 	ands.w	r3, r3, #2
 800502e:	d008      	beq.n	8005042 <lwip_netconn_do_connect+0x9e>
 8005030:	6821      	ldr	r1, [r4, #0]
 8005032:	7f0a      	ldrb	r2, [r1, #28]
 8005034:	f042 0204 	orr.w	r2, r2, #4
 8005038:	770a      	strb	r2, [r1, #28]
          if (non_blocking) {
 800503a:	b143      	cbz	r3, 800504e <lwip_netconn_do_connect+0xaa>
            msg->err = ERR_INPROGRESS;
 800503c:	23fb      	movs	r3, #251	; 0xfb
 800503e:	7123      	strb	r3, [r4, #4]
 8005040:	e7c1      	b.n	8004fc6 <lwip_netconn_do_connect+0x22>
          SET_NONBLOCKING_CONNECT(msg->conn, non_blocking);
 8005042:	6821      	ldr	r1, [r4, #0]
 8005044:	7f0a      	ldrb	r2, [r1, #28]
 8005046:	f022 0204 	bic.w	r2, r2, #4
 800504a:	770a      	strb	r2, [r1, #28]
 800504c:	e7f5      	b.n	800503a <lwip_netconn_do_connect+0x96>
            msg->conn->current_msg = msg;
 800504e:	6823      	ldr	r3, [r4, #0]
 8005050:	625c      	str	r4, [r3, #36]	; 0x24
            return;
 8005052:	bd10      	pop	{r4, pc}
      LWIP_ERROR("Invalid netconn type", 0, do{ msg->err = ERR_VAL; }while(0));
 8005054:	4b05      	ldr	r3, [pc, #20]	; (800506c <lwip_netconn_do_connect+0xc8>)
 8005056:	f240 42f2 	movw	r2, #1266	; 0x4f2
 800505a:	4905      	ldr	r1, [pc, #20]	; (8005070 <lwip_netconn_do_connect+0xcc>)
 800505c:	4805      	ldr	r0, [pc, #20]	; (8005074 <lwip_netconn_do_connect+0xd0>)
 800505e:	f007 fdc6 	bl	800cbee <iprintf>
 8005062:	23fa      	movs	r3, #250	; 0xfa
 8005064:	7123      	strb	r3, [r4, #4]
      break;
 8005066:	e7ae      	b.n	8004fc6 <lwip_netconn_do_connect+0x22>
 8005068:	08004481 	.word	0x08004481
 800506c:	0800d824 	.word	0x0800d824
 8005070:	0800d550 	.word	0x0800d550
 8005074:	0800d378 	.word	0x0800d378

08005078 <lwip_netconn_do_disconnect>:
{
 8005078:	b510      	push	{r4, lr}
 800507a:	4604      	mov	r4, r0
  if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_UDP) {
 800507c:	6802      	ldr	r2, [r0, #0]
 800507e:	7813      	ldrb	r3, [r2, #0]
 8005080:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005084:	2b20      	cmp	r3, #32
 8005086:	d015      	beq.n	80050b4 <lwip_netconn_do_disconnect+0x3c>
    msg->err = ERR_VAL;
 8005088:	23fa      	movs	r3, #250	; 0xfa
 800508a:	7103      	strb	r3, [r0, #4]
  TCPIP_APIMSG_ACK(msg);
 800508c:	6823      	ldr	r3, [r4, #0]
 800508e:	b163      	cbz	r3, 80050aa <lwip_netconn_do_disconnect+0x32>
 8005090:	f006 ffc2 	bl	800c018 <sys_arch_protect>
 8005094:	6823      	ldr	r3, [r4, #0]
 8005096:	f993 2008 	ldrsb.w	r2, [r3, #8]
 800509a:	f112 0f0c 	cmn.w	r2, #12
 800509e:	db02      	blt.n	80050a6 <lwip_netconn_do_disconnect+0x2e>
 80050a0:	f994 2004 	ldrsb.w	r2, [r4, #4]
 80050a4:	721a      	strb	r2, [r3, #8]
 80050a6:	f006 ffc3 	bl	800c030 <sys_arch_unprotect>
 80050aa:	6820      	ldr	r0, [r4, #0]
 80050ac:	300c      	adds	r0, #12
 80050ae:	f006 ff61 	bl	800bf74 <sys_sem_signal>
 80050b2:	bd10      	pop	{r4, pc}
    udp_disconnect(msg->conn->pcb.udp);
 80050b4:	6850      	ldr	r0, [r2, #4]
 80050b6:	f006 fdcb 	bl	800bc50 <udp_disconnect>
    msg->err = ERR_OK;
 80050ba:	2300      	movs	r3, #0
 80050bc:	7123      	strb	r3, [r4, #4]
 80050be:	e7e5      	b.n	800508c <lwip_netconn_do_disconnect+0x14>

080050c0 <err_to_errno>:
};

int
err_to_errno(err_t err)
{
  if ((err > 0) || (-err >= (err_t)LWIP_ARRAYSIZE(err_to_errno_table))) {
 80050c0:	2800      	cmp	r0, #0
 80050c2:	dd01      	ble.n	80050c8 <err_to_errno+0x8>
    return EIO;
 80050c4:	2005      	movs	r0, #5
 80050c6:	4770      	bx	lr
  if ((err > 0) || (-err >= (err_t)LWIP_ARRAYSIZE(err_to_errno_table))) {
 80050c8:	4240      	negs	r0, r0
 80050ca:	2810      	cmp	r0, #16
 80050cc:	dd01      	ble.n	80050d2 <err_to_errno+0x12>
    return EIO;
 80050ce:	2005      	movs	r0, #5
  }
  return err_to_errno_table[-err];
}
 80050d0:	4770      	bx	lr
  return err_to_errno_table[-err];
 80050d2:	4b02      	ldr	r3, [pc, #8]	; (80050dc <err_to_errno+0x1c>)
 80050d4:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80050d8:	4770      	bx	lr
 80050da:	bf00      	nop
 80050dc:	0800d8bc 	.word	0x0800d8bc

080050e0 <netbuf_delete>:
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
  if (buf != NULL) {
 80050e0:	b168      	cbz	r0, 80050fe <netbuf_delete+0x1e>
{
 80050e2:	b510      	push	{r4, lr}
 80050e4:	4604      	mov	r4, r0
    if (buf->p != NULL) {
 80050e6:	6800      	ldr	r0, [r0, #0]
 80050e8:	b120      	cbz	r0, 80050f4 <netbuf_delete+0x14>
      pbuf_free(buf->p);
 80050ea:	f002 fc2d 	bl	8007948 <pbuf_free>
      buf->p = buf->ptr = NULL;
 80050ee:	2300      	movs	r3, #0
 80050f0:	6063      	str	r3, [r4, #4]
 80050f2:	6023      	str	r3, [r4, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 80050f4:	4621      	mov	r1, r4
 80050f6:	2006      	movs	r0, #6
 80050f8:	f002 fa50 	bl	800759c <memp_free>
 80050fc:	bd10      	pop	{r4, pc}
 80050fe:	4770      	bx	lr

08005100 <get_socket>:
{
  struct lwip_sock *sock;

  s -= LWIP_SOCKET_OFFSET;

  if ((s < 0) || (s >= NUM_SOCKETS)) {
 8005100:	2803      	cmp	r0, #3
 8005102:	d80c      	bhi.n	800511e <get_socket+0x1e>
{
 8005104:	b410      	push	{r4}
    LWIP_DEBUGF(SOCKETS_DEBUG, ("get_socket(%d): invalid\n", s + LWIP_SOCKET_OFFSET));
    set_errno(EBADF);
    return NULL;
  }

  sock = &sockets[s];
 8005106:	4c0b      	ldr	r4, [pc, #44]	; (8005134 <get_socket+0x34>)
 8005108:	0083      	lsls	r3, r0, #2
 800510a:	1819      	adds	r1, r3, r0
 800510c:	008a      	lsls	r2, r1, #2
 800510e:	4611      	mov	r1, r2
 8005110:	4422      	add	r2, r4

  if (!sock->conn) {
 8005112:	5863      	ldr	r3, [r4, r1]
 8005114:	b14b      	cbz	r3, 800512a <get_socket+0x2a>
    set_errno(EBADF);
    return NULL;
  }

  return sock;
}
 8005116:	4610      	mov	r0, r2
 8005118:	f85d 4b04 	ldr.w	r4, [sp], #4
 800511c:	4770      	bx	lr
    set_errno(EBADF);
 800511e:	2209      	movs	r2, #9
 8005120:	4b05      	ldr	r3, [pc, #20]	; (8005138 <get_socket+0x38>)
 8005122:	601a      	str	r2, [r3, #0]
    return NULL;
 8005124:	2200      	movs	r2, #0
}
 8005126:	4610      	mov	r0, r2
 8005128:	4770      	bx	lr
    set_errno(EBADF);
 800512a:	2209      	movs	r2, #9
 800512c:	4b02      	ldr	r3, [pc, #8]	; (8005138 <get_socket+0x38>)
 800512e:	601a      	str	r2, [r3, #0]
    return NULL;
 8005130:	2200      	movs	r2, #0
 8005132:	e7f0      	b.n	8005116 <get_socket+0x16>
 8005134:	20003de4 	.word	0x20003de4
 8005138:	20007998 	.word	0x20007998

0800513c <alloc_socket>:
 *                 0 if socket has been created by socket()
 * @return the index of the new socket; -1 on error
 */
static int
alloc_socket(struct netconn *newconn, int accepted)
{
 800513c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800513e:	4606      	mov	r6, r0
 8005140:	460d      	mov	r5, r1
  int i;
  SYS_ARCH_DECL_PROTECT(lev);

  /* allocate a new socket identifier */
  for (i = 0; i < NUM_SOCKETS; ++i) {
 8005142:	2400      	movs	r4, #0
 8005144:	e005      	b.n	8005152 <alloc_socket+0x16>
      sockets[i].lastdata   = NULL;
      sockets[i].lastoffset = 0;
      sockets[i].rcvevent   = 0;
      /* TCP sendbuf is empty, but the socket is not yet writable until connected
       * (unless it has been created by accept()). */
      sockets[i].sendevent  = (NETCONNTYPE_GROUP(newconn->type) == NETCONN_TCP ? (accepted != 0) : 1);
 8005146:	b335      	cbz	r5, 8005196 <alloc_socket+0x5a>
 8005148:	2501      	movs	r5, #1
 800514a:	e024      	b.n	8005196 <alloc_socket+0x5a>
      sockets[i].errevent   = 0;
      sockets[i].err        = 0;
      return i + LWIP_SOCKET_OFFSET;
    }
    SYS_ARCH_UNPROTECT(lev);
 800514c:	f006 ff70 	bl	800c030 <sys_arch_unprotect>
  for (i = 0; i < NUM_SOCKETS; ++i) {
 8005150:	3401      	adds	r4, #1
 8005152:	2c03      	cmp	r4, #3
 8005154:	dc29      	bgt.n	80051aa <alloc_socket+0x6e>
    SYS_ARCH_PROTECT(lev);
 8005156:	f006 ff5f 	bl	800c018 <sys_arch_protect>
    if (!sockets[i].conn && (sockets[i].select_waiting == 0)) {
 800515a:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 800515e:	0093      	lsls	r3, r2, #2
 8005160:	4a14      	ldr	r2, [pc, #80]	; (80051b4 <alloc_socket+0x78>)
 8005162:	58d3      	ldr	r3, [r2, r3]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d1f1      	bne.n	800514c <alloc_socket+0x10>
 8005168:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800516c:	009a      	lsls	r2, r3, #2
 800516e:	4b11      	ldr	r3, [pc, #68]	; (80051b4 <alloc_socket+0x78>)
 8005170:	4413      	add	r3, r2
 8005172:	7c5b      	ldrb	r3, [r3, #17]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d1e9      	bne.n	800514c <alloc_socket+0x10>
      sockets[i].conn       = newconn;
 8005178:	490e      	ldr	r1, [pc, #56]	; (80051b4 <alloc_socket+0x78>)
 800517a:	188f      	adds	r7, r1, r2
 800517c:	508e      	str	r6, [r1, r2]
      SYS_ARCH_UNPROTECT(lev);
 800517e:	f006 ff57 	bl	800c030 <sys_arch_unprotect>
      sockets[i].lastdata   = NULL;
 8005182:	2300      	movs	r3, #0
 8005184:	607b      	str	r3, [r7, #4]
      sockets[i].lastoffset = 0;
 8005186:	813b      	strh	r3, [r7, #8]
      sockets[i].rcvevent   = 0;
 8005188:	817b      	strh	r3, [r7, #10]
      sockets[i].sendevent  = (NETCONNTYPE_GROUP(newconn->type) == NETCONN_TCP ? (accepted != 0) : 1);
 800518a:	7833      	ldrb	r3, [r6, #0]
 800518c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005190:	2b10      	cmp	r3, #16
 8005192:	d0d8      	beq.n	8005146 <alloc_socket+0xa>
 8005194:	2501      	movs	r5, #1
 8005196:	00a3      	lsls	r3, r4, #2
 8005198:	4423      	add	r3, r4
 800519a:	009a      	lsls	r2, r3, #2
 800519c:	4b05      	ldr	r3, [pc, #20]	; (80051b4 <alloc_socket+0x78>)
 800519e:	4413      	add	r3, r2
 80051a0:	819d      	strh	r5, [r3, #12]
      sockets[i].errevent   = 0;
 80051a2:	2200      	movs	r2, #0
 80051a4:	81da      	strh	r2, [r3, #14]
      sockets[i].err        = 0;
 80051a6:	741a      	strb	r2, [r3, #16]
      return i + LWIP_SOCKET_OFFSET;
 80051a8:	e001      	b.n	80051ae <alloc_socket+0x72>
  }
  return -1;
 80051aa:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
 80051ae:	4620      	mov	r0, r4
 80051b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80051b2:	bf00      	nop
 80051b4:	20003de4 	.word	0x20003de4

080051b8 <event_callback>:
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_UNUSED_ARG(len);

  /* Get socket */
  if (conn) {
 80051b8:	2800      	cmp	r0, #0
 80051ba:	f000 80a5 	beq.w	8005308 <event_callback+0x150>
{
 80051be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051c2:	4605      	mov	r5, r0
 80051c4:	460c      	mov	r4, r1
    s = conn->socket;
 80051c6:	f8d0 8018 	ldr.w	r8, [r0, #24]
    if (s < 0) {
 80051ca:	f1b8 0f00 	cmp.w	r8, #0
 80051ce:	db10      	blt.n	80051f2 <event_callback+0x3a>
      }
      s = conn->socket;
      SYS_ARCH_UNPROTECT(lev);
    }

    sock = get_socket(s);
 80051d0:	4640      	mov	r0, r8
 80051d2:	f7ff ff95 	bl	8005100 <get_socket>
    if (!sock) {
 80051d6:	4607      	mov	r7, r0
 80051d8:	2800      	cmp	r0, #0
 80051da:	f000 8093 	beq.w	8005304 <event_callback+0x14c>
    }
  } else {
    return;
  }

  SYS_ARCH_PROTECT(lev);
 80051de:	f006 ff1b 	bl	800c018 <sys_arch_protect>
 80051e2:	4605      	mov	r5, r0
  /* Set event as required */
  switch (evt) {
 80051e4:	2c04      	cmp	r4, #4
 80051e6:	d82d      	bhi.n	8005244 <event_callback+0x8c>
 80051e8:	e8df f004 	tbb	[pc, r4]
 80051ec:	26231e15 	.word	0x26231e15
 80051f0:	29          	.byte	0x29
 80051f1:	00          	.byte	0x00
      SYS_ARCH_PROTECT(lev);
 80051f2:	f006 ff11 	bl	800c018 <sys_arch_protect>
      if (conn->socket < 0) {
 80051f6:	f8d5 8018 	ldr.w	r8, [r5, #24]
 80051fa:	f1b8 0f00 	cmp.w	r8, #0
 80051fe:	db02      	blt.n	8005206 <event_callback+0x4e>
      SYS_ARCH_UNPROTECT(lev);
 8005200:	f006 ff16 	bl	800c030 <sys_arch_unprotect>
 8005204:	e7e4      	b.n	80051d0 <event_callback+0x18>
        if (evt == NETCONN_EVT_RCVPLUS) {
 8005206:	b914      	cbnz	r4, 800520e <event_callback+0x56>
          conn->socket--;
 8005208:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 800520c:	61ab      	str	r3, [r5, #24]
        SYS_ARCH_UNPROTECT(lev);
 800520e:	f006 ff0f 	bl	800c030 <sys_arch_unprotect>
        return;
 8005212:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    case NETCONN_EVT_RCVPLUS:
      sock->rcvevent++;
 8005216:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800521a:	3301      	adds	r3, #1
 800521c:	817b      	strh	r3, [r7, #10]
    default:
      LWIP_ASSERT("unknown event", 0);
      break;
  }

  if (sock->select_waiting == 0) {
 800521e:	7c7b      	ldrb	r3, [r7, #17]
 8005220:	b1c3      	cbz	r3, 8005254 <event_callback+0x9c>
     ONLY IF a select was actually waiting. We go through the list the number
     of waiting select calls + 1. This list is expected to be small. */

  /* At this point, SYS_ARCH is still protected! */
again:
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 8005222:	4b3a      	ldr	r3, [pc, #232]	; (800530c <event_callback+0x154>)
 8005224:	681c      	ldr	r4, [r3, #0]
 8005226:	e027      	b.n	8005278 <event_callback+0xc0>
      sock->rcvevent--;
 8005228:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800522c:	3b01      	subs	r3, #1
 800522e:	817b      	strh	r3, [r7, #10]
      break;
 8005230:	e7f5      	b.n	800521e <event_callback+0x66>
      sock->sendevent = 1;
 8005232:	2301      	movs	r3, #1
 8005234:	81bb      	strh	r3, [r7, #12]
      break;
 8005236:	e7f2      	b.n	800521e <event_callback+0x66>
      sock->sendevent = 0;
 8005238:	2300      	movs	r3, #0
 800523a:	81bb      	strh	r3, [r7, #12]
      break;
 800523c:	e7ef      	b.n	800521e <event_callback+0x66>
      sock->errevent = 1;
 800523e:	2301      	movs	r3, #1
 8005240:	81fb      	strh	r3, [r7, #14]
      break;
 8005242:	e7ec      	b.n	800521e <event_callback+0x66>
      LWIP_ASSERT("unknown event", 0);
 8005244:	4b32      	ldr	r3, [pc, #200]	; (8005310 <event_callback+0x158>)
 8005246:	f240 625d 	movw	r2, #1629	; 0x65d
 800524a:	4932      	ldr	r1, [pc, #200]	; (8005314 <event_callback+0x15c>)
 800524c:	4832      	ldr	r0, [pc, #200]	; (8005318 <event_callback+0x160>)
 800524e:	f007 fcce 	bl	800cbee <iprintf>
      break;
 8005252:	e7e4      	b.n	800521e <event_callback+0x66>
    SYS_ARCH_UNPROTECT(lev);
 8005254:	4628      	mov	r0, r5
 8005256:	f006 feeb 	bl	800c030 <sys_arch_unprotect>
    return;
 800525a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (sock->errevent != 0) {
        if (!do_signal && scb->exceptset && FD_ISSET(s, scb->exceptset)) {
          do_signal = 1;
        }
      }
      if (do_signal) {
 800525e:	2b00      	cmp	r3, #0
 8005260:	d146      	bne.n	80052f0 <event_callback+0x138>
           lead to the select thread taking itself off the list, invalidating the semaphore. */
        sys_sem_signal(SELECT_SEM_PTR(scb->sem));
      }
    }
    /* unlock interrupts with each step */
    SYS_ARCH_UNPROTECT(lev);
 8005262:	4628      	mov	r0, r5
 8005264:	f006 fee4 	bl	800c030 <sys_arch_unprotect>
    /* this makes sure interrupt protection time is short */
    SYS_ARCH_PROTECT(lev);
 8005268:	f006 fed6 	bl	800c018 <sys_arch_protect>
 800526c:	4605      	mov	r5, r0
    if (last_select_cb_ctr != select_cb_ctr) {
 800526e:	4b2b      	ldr	r3, [pc, #172]	; (800531c <event_callback+0x164>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	429e      	cmp	r6, r3
 8005274:	d1d5      	bne.n	8005222 <event_callback+0x6a>
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 8005276:	6824      	ldr	r4, [r4, #0]
 8005278:	2c00      	cmp	r4, #0
 800527a:	d040      	beq.n	80052fe <event_callback+0x146>
    last_select_cb_ctr = select_cb_ctr;
 800527c:	4b27      	ldr	r3, [pc, #156]	; (800531c <event_callback+0x164>)
 800527e:	681e      	ldr	r6, [r3, #0]
    if (scb->sem_signalled == 0) {
 8005280:	6963      	ldr	r3, [r4, #20]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d1ed      	bne.n	8005262 <event_callback+0xaa>
      if (sock->rcvevent > 0) {
 8005286:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800528a:	2a00      	cmp	r2, #0
 800528c:	dd0c      	ble.n	80052a8 <event_callback+0xf0>
        if (scb->readset && FD_ISSET(s, scb->readset)) {
 800528e:	68a2      	ldr	r2, [r4, #8]
 8005290:	b152      	cbz	r2, 80052a8 <event_callback+0xf0>
 8005292:	ea4f 1158 	mov.w	r1, r8, lsr #5
 8005296:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 800529a:	f008 001f 	and.w	r0, r8, #31
 800529e:	2201      	movs	r2, #1
 80052a0:	4082      	lsls	r2, r0
 80052a2:	4211      	tst	r1, r2
 80052a4:	d000      	beq.n	80052a8 <event_callback+0xf0>
          do_signal = 1;
 80052a6:	2301      	movs	r3, #1
      if (sock->sendevent != 0) {
 80052a8:	89ba      	ldrh	r2, [r7, #12]
 80052aa:	b16a      	cbz	r2, 80052c8 <event_callback+0x110>
        if (!do_signal && scb->writeset && FD_ISSET(s, scb->writeset)) {
 80052ac:	b963      	cbnz	r3, 80052c8 <event_callback+0x110>
 80052ae:	68e2      	ldr	r2, [r4, #12]
 80052b0:	b152      	cbz	r2, 80052c8 <event_callback+0x110>
 80052b2:	ea4f 1158 	mov.w	r1, r8, lsr #5
 80052b6:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 80052ba:	f008 001f 	and.w	r0, r8, #31
 80052be:	2201      	movs	r2, #1
 80052c0:	4082      	lsls	r2, r0
 80052c2:	4211      	tst	r1, r2
 80052c4:	d000      	beq.n	80052c8 <event_callback+0x110>
          do_signal = 1;
 80052c6:	2301      	movs	r3, #1
      if (sock->errevent != 0) {
 80052c8:	89fa      	ldrh	r2, [r7, #14]
 80052ca:	2a00      	cmp	r2, #0
 80052cc:	d0c7      	beq.n	800525e <event_callback+0xa6>
        if (!do_signal && scb->exceptset && FD_ISSET(s, scb->exceptset)) {
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d1c5      	bne.n	800525e <event_callback+0xa6>
 80052d2:	6922      	ldr	r2, [r4, #16]
 80052d4:	2a00      	cmp	r2, #0
 80052d6:	d0c2      	beq.n	800525e <event_callback+0xa6>
 80052d8:	ea4f 1158 	mov.w	r1, r8, lsr #5
 80052dc:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 80052e0:	f008 001f 	and.w	r0, r8, #31
 80052e4:	2201      	movs	r2, #1
 80052e6:	4082      	lsls	r2, r0
 80052e8:	4211      	tst	r1, r2
 80052ea:	d0b8      	beq.n	800525e <event_callback+0xa6>
          do_signal = 1;
 80052ec:	2301      	movs	r3, #1
 80052ee:	e7b6      	b.n	800525e <event_callback+0xa6>
        scb->sem_signalled = 1;
 80052f0:	2301      	movs	r3, #1
 80052f2:	6163      	str	r3, [r4, #20]
        sys_sem_signal(SELECT_SEM_PTR(scb->sem));
 80052f4:	f104 0018 	add.w	r0, r4, #24
 80052f8:	f006 fe3c 	bl	800bf74 <sys_sem_signal>
 80052fc:	e7b1      	b.n	8005262 <event_callback+0xaa>
      /* someone has changed select_cb_list, restart at the beginning */
      goto again;
    }
  }
  SYS_ARCH_UNPROTECT(lev);
 80052fe:	4628      	mov	r0, r5
 8005300:	f006 fe96 	bl	800c030 <sys_arch_unprotect>
 8005304:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005308:	4770      	bx	lr
 800530a:	bf00      	nop
 800530c:	20003de0 	.word	0x20003de0
 8005310:	0800d948 	.word	0x0800d948
 8005314:	0800d900 	.word	0x0800d900
 8005318:	0800d378 	.word	0x0800d378
 800531c:	20003ddc 	.word	0x20003ddc

08005320 <free_socket>:
{
 8005320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005322:	4604      	mov	r4, r0
 8005324:	460f      	mov	r7, r1
  lastdata         = sock->lastdata;
 8005326:	6846      	ldr	r6, [r0, #4]
  sock->lastdata   = NULL;
 8005328:	2500      	movs	r5, #0
 800532a:	6045      	str	r5, [r0, #4]
  sock->lastoffset = 0;
 800532c:	8105      	strh	r5, [r0, #8]
  sock->err        = 0;
 800532e:	7405      	strb	r5, [r0, #16]
  SYS_ARCH_SET(sock->conn, NULL);
 8005330:	f006 fe72 	bl	800c018 <sys_arch_protect>
 8005334:	6025      	str	r5, [r4, #0]
 8005336:	f006 fe7b 	bl	800c030 <sys_arch_unprotect>
  if (lastdata != NULL) {
 800533a:	b11e      	cbz	r6, 8005344 <free_socket+0x24>
    if (is_tcp) {
 800533c:	b91f      	cbnz	r7, 8005346 <free_socket+0x26>
      netbuf_delete((struct netbuf *)lastdata);
 800533e:	4630      	mov	r0, r6
 8005340:	f7ff fece 	bl	80050e0 <netbuf_delete>
 8005344:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      pbuf_free((struct pbuf *)lastdata);
 8005346:	4630      	mov	r0, r6
 8005348:	f002 fafe 	bl	8007948 <pbuf_free>
 800534c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005350 <lwip_close>:
{
 8005350:	b538      	push	{r3, r4, r5, lr}
  sock = get_socket(s);
 8005352:	f7ff fed5 	bl	8005100 <get_socket>
  if (!sock) {
 8005356:	b348      	cbz	r0, 80053ac <lwip_close+0x5c>
 8005358:	4605      	mov	r5, r0
  if (sock->conn != NULL) {
 800535a:	6803      	ldr	r3, [r0, #0]
 800535c:	b19b      	cbz	r3, 8005386 <lwip_close+0x36>
    is_tcp = NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP;
 800535e:	7819      	ldrb	r1, [r3, #0]
 8005360:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
 8005364:	2910      	cmp	r1, #16
 8005366:	bf14      	ite	ne
 8005368:	2400      	movne	r4, #0
 800536a:	2401      	moveq	r4, #1
  err = netconn_delete(sock->conn);
 800536c:	6828      	ldr	r0, [r5, #0]
 800536e:	f7fe ff5d 	bl	800422c <netconn_delete>
  if (err != ERR_OK) {
 8005372:	b1a8      	cbz	r0, 80053a0 <lwip_close+0x50>
    sock_set_errno(sock, err_to_errno(err));
 8005374:	f7ff fea4 	bl	80050c0 <err_to_errno>
 8005378:	7428      	strb	r0, [r5, #16]
 800537a:	b1d0      	cbz	r0, 80053b2 <lwip_close+0x62>
 800537c:	4b0e      	ldr	r3, [pc, #56]	; (80053b8 <lwip_close+0x68>)
 800537e:	6018      	str	r0, [r3, #0]
    return -1;
 8005380:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005384:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("sock->lastdata == NULL", sock->lastdata == NULL);
 8005386:	6843      	ldr	r3, [r0, #4]
 8005388:	b143      	cbz	r3, 800539c <lwip_close+0x4c>
 800538a:	4b0c      	ldr	r3, [pc, #48]	; (80053bc <lwip_close+0x6c>)
 800538c:	f44f 721c 	mov.w	r2, #624	; 0x270
 8005390:	490b      	ldr	r1, [pc, #44]	; (80053c0 <lwip_close+0x70>)
 8005392:	480c      	ldr	r0, [pc, #48]	; (80053c4 <lwip_close+0x74>)
 8005394:	f007 fc2b 	bl	800cbee <iprintf>
  int is_tcp = 0;
 8005398:	2400      	movs	r4, #0
 800539a:	e7e7      	b.n	800536c <lwip_close+0x1c>
 800539c:	2400      	movs	r4, #0
 800539e:	e7e5      	b.n	800536c <lwip_close+0x1c>
  free_socket(sock, is_tcp);
 80053a0:	4621      	mov	r1, r4
 80053a2:	4628      	mov	r0, r5
 80053a4:	f7ff ffbc 	bl	8005320 <free_socket>
  return 0;
 80053a8:	2000      	movs	r0, #0
 80053aa:	bd38      	pop	{r3, r4, r5, pc}
    return -1;
 80053ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80053b0:	bd38      	pop	{r3, r4, r5, pc}
    return -1;
 80053b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80053b6:	bd38      	pop	{r3, r4, r5, pc}
 80053b8:	20007998 	.word	0x20007998
 80053bc:	0800d948 	.word	0x0800d948
 80053c0:	0800d910 	.word	0x0800d910
 80053c4:	0800d378 	.word	0x0800d378

080053c8 <lwip_connect>:
{
 80053c8:	b570      	push	{r4, r5, r6, lr}
 80053ca:	b082      	sub	sp, #8
 80053cc:	460c      	mov	r4, r1
 80053ce:	4616      	mov	r6, r2
  sock = get_socket(s);
 80053d0:	f7ff fe96 	bl	8005100 <get_socket>
  if (!sock) {
 80053d4:	2800      	cmp	r0, #0
 80053d6:	d039      	beq.n	800544c <lwip_connect+0x84>
 80053d8:	4605      	mov	r5, r0
  if (name->sa_family == AF_UNSPEC) {
 80053da:	7863      	ldrb	r3, [r4, #1]
 80053dc:	b1bb      	cbz	r3, 800540e <lwip_connect+0x46>
    LWIP_ERROR("lwip_connect: invalid address", IS_SOCK_ADDR_LEN_VALID(namelen) &&
 80053de:	2e10      	cmp	r6, #16
 80053e0:	d119      	bne.n	8005416 <lwip_connect+0x4e>
 80053e2:	2b02      	cmp	r3, #2
 80053e4:	d117      	bne.n	8005416 <lwip_connect+0x4e>
 80053e6:	f014 0f03 	tst.w	r4, #3
 80053ea:	d114      	bne.n	8005416 <lwip_connect+0x4e>
    SOCKADDR_TO_IPADDR_PORT(name, &remote_addr, remote_port);
 80053ec:	6863      	ldr	r3, [r4, #4]
 80053ee:	ae02      	add	r6, sp, #8
 80053f0:	f846 3d04 	str.w	r3, [r6, #-4]!
 80053f4:	8860      	ldrh	r0, [r4, #2]
 80053f6:	f000 f9c1 	bl	800577c <lwip_htons>
    err = netconn_connect(sock->conn, &remote_addr, remote_port);
 80053fa:	4602      	mov	r2, r0
 80053fc:	4631      	mov	r1, r6
 80053fe:	6828      	ldr	r0, [r5, #0]
 8005400:	f7fe ff2e 	bl	8004260 <netconn_connect>
  if (err != ERR_OK) {
 8005404:	b9c8      	cbnz	r0, 800543a <lwip_connect+0x72>
  sock_set_errno(sock, 0);
 8005406:	2000      	movs	r0, #0
 8005408:	7428      	strb	r0, [r5, #16]
}
 800540a:	b002      	add	sp, #8
 800540c:	bd70      	pop	{r4, r5, r6, pc}
    err = netconn_disconnect(sock->conn);
 800540e:	6800      	ldr	r0, [r0, #0]
 8005410:	f7fe ff4c 	bl	80042ac <netconn_disconnect>
 8005414:	e7f6      	b.n	8005404 <lwip_connect+0x3c>
    LWIP_ERROR("lwip_connect: invalid address", IS_SOCK_ADDR_LEN_VALID(namelen) &&
 8005416:	4b10      	ldr	r3, [pc, #64]	; (8005458 <lwip_connect+0x90>)
 8005418:	f240 229f 	movw	r2, #671	; 0x29f
 800541c:	490f      	ldr	r1, [pc, #60]	; (800545c <lwip_connect+0x94>)
 800541e:	4810      	ldr	r0, [pc, #64]	; (8005460 <lwip_connect+0x98>)
 8005420:	f007 fbe5 	bl	800cbee <iprintf>
 8005424:	f06f 000f 	mvn.w	r0, #15
 8005428:	f7ff fe4a 	bl	80050c0 <err_to_errno>
 800542c:	7428      	strb	r0, [r5, #16]
 800542e:	b108      	cbz	r0, 8005434 <lwip_connect+0x6c>
 8005430:	4b0c      	ldr	r3, [pc, #48]	; (8005464 <lwip_connect+0x9c>)
 8005432:	6018      	str	r0, [r3, #0]
 8005434:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005438:	e7e7      	b.n	800540a <lwip_connect+0x42>
    sock_set_errno(sock, err_to_errno(err));
 800543a:	f7ff fe41 	bl	80050c0 <err_to_errno>
 800543e:	7428      	strb	r0, [r5, #16]
 8005440:	b138      	cbz	r0, 8005452 <lwip_connect+0x8a>
 8005442:	4b08      	ldr	r3, [pc, #32]	; (8005464 <lwip_connect+0x9c>)
 8005444:	6018      	str	r0, [r3, #0]
    return -1;
 8005446:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800544a:	e7de      	b.n	800540a <lwip_connect+0x42>
    return -1;
 800544c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005450:	e7db      	b.n	800540a <lwip_connect+0x42>
    return -1;
 8005452:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005456:	e7d8      	b.n	800540a <lwip_connect+0x42>
 8005458:	0800d948 	.word	0x0800d948
 800545c:	0800d928 	.word	0x0800d928
 8005460:	0800d378 	.word	0x0800d378
 8005464:	20007998 	.word	0x20007998

08005468 <lwip_socket>:
{
 8005468:	b538      	push	{r3, r4, r5, lr}
 800546a:	4613      	mov	r3, r2
  switch (type) {
 800546c:	2902      	cmp	r1, #2
 800546e:	d01b      	beq.n	80054a8 <lwip_socket+0x40>
 8005470:	2903      	cmp	r1, #3
 8005472:	d007      	beq.n	8005484 <lwip_socket+0x1c>
 8005474:	2901      	cmp	r1, #1
 8005476:	d022      	beq.n	80054be <lwip_socket+0x56>
    set_errno(EINVAL);
 8005478:	2216      	movs	r2, #22
 800547a:	4b1b      	ldr	r3, [pc, #108]	; (80054e8 <lwip_socket+0x80>)
 800547c:	601a      	str	r2, [r3, #0]
    return -1;
 800547e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005482:	e00f      	b.n	80054a4 <lwip_socket+0x3c>
    conn = netconn_new_with_proto_and_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_RAW),
 8005484:	4a19      	ldr	r2, [pc, #100]	; (80054ec <lwip_socket+0x84>)
 8005486:	b2d9      	uxtb	r1, r3
 8005488:	2040      	movs	r0, #64	; 0x40
 800548a:	f7fe fe73 	bl	8004174 <netconn_new_with_proto_and_callback>
 800548e:	4605      	mov	r5, r0
  if (!conn) {
 8005490:	b1e5      	cbz	r5, 80054cc <lwip_socket+0x64>
  i = alloc_socket(conn, 0);
 8005492:	2100      	movs	r1, #0
 8005494:	4628      	mov	r0, r5
 8005496:	f7ff fe51 	bl	800513c <alloc_socket>
 800549a:	4604      	mov	r4, r0
  if (i == -1) {
 800549c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80054a0:	d01a      	beq.n	80054d8 <lwip_socket+0x70>
  conn->socket = i;
 80054a2:	61a8      	str	r0, [r5, #24]
}
 80054a4:	4620      	mov	r0, r4
 80054a6:	bd38      	pop	{r3, r4, r5, pc}
    conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain,
 80054a8:	2a88      	cmp	r2, #136	; 0x88
 80054aa:	d006      	beq.n	80054ba <lwip_socket+0x52>
 80054ac:	2020      	movs	r0, #32
 80054ae:	4a0f      	ldr	r2, [pc, #60]	; (80054ec <lwip_socket+0x84>)
 80054b0:	2100      	movs	r1, #0
 80054b2:	f7fe fe5f 	bl	8004174 <netconn_new_with_proto_and_callback>
 80054b6:	4605      	mov	r5, r0
    break;
 80054b8:	e7ea      	b.n	8005490 <lwip_socket+0x28>
    conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain,
 80054ba:	2021      	movs	r0, #33	; 0x21
 80054bc:	e7f7      	b.n	80054ae <lwip_socket+0x46>
    conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_TCP), event_callback);
 80054be:	4a0b      	ldr	r2, [pc, #44]	; (80054ec <lwip_socket+0x84>)
 80054c0:	2100      	movs	r1, #0
 80054c2:	2010      	movs	r0, #16
 80054c4:	f7fe fe56 	bl	8004174 <netconn_new_with_proto_and_callback>
 80054c8:	4605      	mov	r5, r0
    break;
 80054ca:	e7e1      	b.n	8005490 <lwip_socket+0x28>
    set_errno(ENOBUFS);
 80054cc:	2269      	movs	r2, #105	; 0x69
 80054ce:	4b06      	ldr	r3, [pc, #24]	; (80054e8 <lwip_socket+0x80>)
 80054d0:	601a      	str	r2, [r3, #0]
    return -1;
 80054d2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80054d6:	e7e5      	b.n	80054a4 <lwip_socket+0x3c>
    netconn_delete(conn);
 80054d8:	4628      	mov	r0, r5
 80054da:	f7fe fea7 	bl	800422c <netconn_delete>
    set_errno(ENFILE);
 80054de:	2217      	movs	r2, #23
 80054e0:	4b01      	ldr	r3, [pc, #4]	; (80054e8 <lwip_socket+0x80>)
 80054e2:	601a      	str	r2, [r3, #0]
    return -1;
 80054e4:	e7de      	b.n	80054a4 <lwip_socket+0x3c>
 80054e6:	bf00      	nop
 80054e8:	20007998 	.word	0x20007998
 80054ec:	080051b9 	.word	0x080051b9

080054f0 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 80054f0:	b500      	push	{lr}
 80054f2:	b083      	sub	sp, #12
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  if (tcpip_init_done != NULL) {
 80054f4:	4b26      	ldr	r3, [pc, #152]	; (8005590 <tcpip_thread+0xa0>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	b16b      	cbz	r3, 8005516 <tcpip_thread+0x26>
    tcpip_init_done(tcpip_init_done_arg);
 80054fa:	4a26      	ldr	r2, [pc, #152]	; (8005594 <tcpip_thread+0xa4>)
 80054fc:	6810      	ldr	r0, [r2, #0]
 80054fe:	4798      	blx	r3
 8005500:	e009      	b.n	8005516 <tcpip_thread+0x26>
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&mbox, (void **)&msg);
    LOCK_TCPIP_CORE();
    if (msg == NULL) {
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8005502:	4b25      	ldr	r3, [pc, #148]	; (8005598 <tcpip_thread+0xa8>)
 8005504:	2269      	movs	r2, #105	; 0x69
 8005506:	4925      	ldr	r1, [pc, #148]	; (800559c <tcpip_thread+0xac>)
 8005508:	4825      	ldr	r0, [pc, #148]	; (80055a0 <tcpip_thread+0xb0>)
 800550a:	f007 fb70 	bl	800cbee <iprintf>
      continue;
 800550e:	e002      	b.n	8005516 <tcpip_thread+0x26>
    }
    switch (msg->type) {
#if !LWIP_TCPIP_CORE_LOCKING
    case TCPIP_MSG_API:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: API message %p\n", (void *)msg));
      msg->msg.api_msg.function(msg->msg.api_msg.msg);
 8005510:	685a      	ldr	r2, [r3, #4]
 8005512:	6898      	ldr	r0, [r3, #8]
 8005514:	4790      	blx	r2
    TCPIP_MBOX_FETCH(&mbox, (void **)&msg);
 8005516:	a901      	add	r1, sp, #4
 8005518:	4822      	ldr	r0, [pc, #136]	; (80055a4 <tcpip_thread+0xb4>)
 800551a:	f006 fa15 	bl	800b948 <sys_timeouts_mbox_fetch>
    if (msg == NULL) {
 800551e:	9b01      	ldr	r3, [sp, #4]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d0ee      	beq.n	8005502 <tcpip_thread+0x12>
    switch (msg->type) {
 8005524:	781a      	ldrb	r2, [r3, #0]
 8005526:	2a04      	cmp	r2, #4
 8005528:	d82b      	bhi.n	8005582 <tcpip_thread+0x92>
 800552a:	a101      	add	r1, pc, #4	; (adr r1, 8005530 <tcpip_thread+0x40>)
 800552c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005530:	08005511 	.word	0x08005511
 8005534:	08005545 	.word	0x08005545
 8005538:	08005559 	.word	0x08005559
 800553c:	0800556b 	.word	0x0800556b
 8005540:	0800557b 	.word	0x0800557b
      break;
    case TCPIP_MSG_API_CALL:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: API CALL message %p\n", (void *)msg));
      msg->msg.api_call.arg->err = msg->msg.api_call.function(msg->msg.api_call.arg);
 8005544:	689c      	ldr	r4, [r3, #8]
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	4620      	mov	r0, r4
 800554a:	4798      	blx	r3
 800554c:	7020      	strb	r0, [r4, #0]
      sys_sem_signal(msg->msg.api_call.sem);
 800554e:	9b01      	ldr	r3, [sp, #4]
 8005550:	68d8      	ldr	r0, [r3, #12]
 8005552:	f006 fd0f 	bl	800bf74 <sys_sem_signal>
      break;
 8005556:	e7de      	b.n	8005516 <tcpip_thread+0x26>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif);
 8005558:	68da      	ldr	r2, [r3, #12]
 800555a:	6899      	ldr	r1, [r3, #8]
 800555c:	6858      	ldr	r0, [r3, #4]
 800555e:	4790      	blx	r2
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8005560:	9901      	ldr	r1, [sp, #4]
 8005562:	2009      	movs	r0, #9
 8005564:	f002 f81a 	bl	800759c <memp_free>
      break;
 8005568:	e7d5      	b.n	8005516 <tcpip_thread+0x26>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800556a:	685a      	ldr	r2, [r3, #4]
 800556c:	6898      	ldr	r0, [r3, #8]
 800556e:	4790      	blx	r2
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8005570:	9901      	ldr	r1, [sp, #4]
 8005572:	2008      	movs	r0, #8
 8005574:	f002 f812 	bl	800759c <memp_free>
      break;
 8005578:	e7cd      	b.n	8005516 <tcpip_thread+0x26>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800557a:	685a      	ldr	r2, [r3, #4]
 800557c:	6898      	ldr	r0, [r3, #8]
 800557e:	4790      	blx	r2
      break;
 8005580:	e7c9      	b.n	8005516 <tcpip_thread+0x26>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8005582:	4b05      	ldr	r3, [pc, #20]	; (8005598 <tcpip_thread+0xa8>)
 8005584:	229b      	movs	r2, #155	; 0x9b
 8005586:	4905      	ldr	r1, [pc, #20]	; (800559c <tcpip_thread+0xac>)
 8005588:	4805      	ldr	r0, [pc, #20]	; (80055a0 <tcpip_thread+0xb0>)
 800558a:	f007 fb30 	bl	800cbee <iprintf>
      break;
 800558e:	e7c2      	b.n	8005516 <tcpip_thread+0x26>
 8005590:	20003e38 	.word	0x20003e38
 8005594:	20003e3c 	.word	0x20003e3c
 8005598:	0800d9e8 	.word	0x0800d9e8
 800559c:	0800da18 	.word	0x0800da18
 80055a0:	0800d378 	.word	0x0800d378
 80055a4:	20003e34 	.word	0x20003e34

080055a8 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 80055a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055aa:	4607      	mov	r7, r0
 80055ac:	460e      	mov	r6, r1
 80055ae:	4615      	mov	r5, r2
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 80055b0:	4813      	ldr	r0, [pc, #76]	; (8005600 <tcpip_inpkt+0x58>)
 80055b2:	f006 fc9f 	bl	800bef4 <sys_mbox_valid>
 80055b6:	b188      	cbz	r0, 80055dc <tcpip_inpkt+0x34>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 80055b8:	2009      	movs	r0, #9
 80055ba:	f001 ffd5 	bl	8007568 <memp_malloc>
  if (msg == NULL) {
 80055be:	4604      	mov	r4, r0
 80055c0:	b1d0      	cbz	r0, 80055f8 <tcpip_inpkt+0x50>
    return ERR_MEM;
  }

  msg->type = TCPIP_MSG_INPKT;
 80055c2:	2302      	movs	r3, #2
 80055c4:	7003      	strb	r3, [r0, #0]
  msg->msg.inp.p = p;
 80055c6:	6047      	str	r7, [r0, #4]
  msg->msg.inp.netif = inp;
 80055c8:	6086      	str	r6, [r0, #8]
  msg->msg.inp.input_fn = input_fn;
 80055ca:	60c5      	str	r5, [r0, #12]
  if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 80055cc:	4601      	mov	r1, r0
 80055ce:	480c      	ldr	r0, [pc, #48]	; (8005600 <tcpip_inpkt+0x58>)
 80055d0:	f006 fc47 	bl	800be62 <sys_mbox_trypost>
 80055d4:	4603      	mov	r3, r0
 80055d6:	b940      	cbnz	r0, 80055ea <tcpip_inpkt+0x42>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
    return ERR_MEM;
  }
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 80055d8:	4618      	mov	r0, r3
 80055da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 80055dc:	4b09      	ldr	r3, [pc, #36]	; (8005604 <tcpip_inpkt+0x5c>)
 80055de:	22b5      	movs	r2, #181	; 0xb5
 80055e0:	4909      	ldr	r1, [pc, #36]	; (8005608 <tcpip_inpkt+0x60>)
 80055e2:	480a      	ldr	r0, [pc, #40]	; (800560c <tcpip_inpkt+0x64>)
 80055e4:	f007 fb03 	bl	800cbee <iprintf>
 80055e8:	e7e6      	b.n	80055b8 <tcpip_inpkt+0x10>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80055ea:	4621      	mov	r1, r4
 80055ec:	2009      	movs	r0, #9
 80055ee:	f001 ffd5 	bl	800759c <memp_free>
    return ERR_MEM;
 80055f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80055f6:	e7ef      	b.n	80055d8 <tcpip_inpkt+0x30>
    return ERR_MEM;
 80055f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80055fc:	e7ec      	b.n	80055d8 <tcpip_inpkt+0x30>
 80055fe:	bf00      	nop
 8005600:	20003e34 	.word	0x20003e34
 8005604:	0800d9e8 	.word	0x0800d9e8
 8005608:	0800d9bc 	.word	0x0800d9bc
 800560c:	0800d378 	.word	0x0800d378

08005610 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8005610:	b508      	push	{r3, lr}
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8005612:	f891 302b 	ldrb.w	r3, [r1, #43]	; 0x2b
 8005616:	f013 0f18 	tst.w	r3, #24
 800561a:	d103      	bne.n	8005624 <tcpip_input+0x14>
    return tcpip_inpkt(p, inp, ethernet_input);
  } else
#endif /* LWIP_ETHERNET */
  return tcpip_inpkt(p, inp, ip_input);
 800561c:	4a03      	ldr	r2, [pc, #12]	; (800562c <tcpip_input+0x1c>)
 800561e:	f7ff ffc3 	bl	80055a8 <tcpip_inpkt>
}
 8005622:	bd08      	pop	{r3, pc}
    return tcpip_inpkt(p, inp, ethernet_input);
 8005624:	4a02      	ldr	r2, [pc, #8]	; (8005630 <tcpip_input+0x20>)
 8005626:	f7ff ffbf 	bl	80055a8 <tcpip_inpkt>
 800562a:	bd08      	pop	{r3, pc}
 800562c:	08006371 	.word	0x08006371
 8005630:	0800bcf9 	.word	0x0800bcf9

08005634 <tcpip_callback_with_block>:
 * @param block 1 to block until the request is posted, 0 to non-blocking mode
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_callback_with_block(tcpip_callback_fn function, void *ctx, u8_t block)
{
 8005634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005636:	4607      	mov	r7, r0
 8005638:	460e      	mov	r6, r1
 800563a:	4615      	mov	r5, r2
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 800563c:	4816      	ldr	r0, [pc, #88]	; (8005698 <tcpip_callback_with_block+0x64>)
 800563e:	f006 fc59 	bl	800bef4 <sys_mbox_valid>
 8005642:	b188      	cbz	r0, 8005668 <tcpip_callback_with_block+0x34>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8005644:	2008      	movs	r0, #8
 8005646:	f001 ff8f 	bl	8007568 <memp_malloc>
  if (msg == NULL) {
 800564a:	4604      	mov	r4, r0
 800564c:	b300      	cbz	r0, 8005690 <tcpip_callback_with_block+0x5c>
    return ERR_MEM;
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800564e:	2303      	movs	r3, #3
 8005650:	7003      	strb	r3, [r0, #0]
  msg->msg.cb.function = function;
 8005652:	6047      	str	r7, [r0, #4]
  msg->msg.cb.ctx = ctx;
 8005654:	6086      	str	r6, [r0, #8]
  if (block) {
 8005656:	b975      	cbnz	r5, 8005676 <tcpip_callback_with_block+0x42>
    sys_mbox_post(&mbox, msg);
  } else {
    if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 8005658:	4601      	mov	r1, r0
 800565a:	480f      	ldr	r0, [pc, #60]	; (8005698 <tcpip_callback_with_block+0x64>)
 800565c:	f006 fc01 	bl	800be62 <sys_mbox_trypost>
 8005660:	4603      	mov	r3, r0
 8005662:	b970      	cbnz	r0, 8005682 <tcpip_callback_with_block+0x4e>
      memp_free(MEMP_TCPIP_MSG_API, msg);
      return ERR_MEM;
    }
  }
  return ERR_OK;
}
 8005664:	4618      	mov	r0, r3
 8005666:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 8005668:	4b0c      	ldr	r3, [pc, #48]	; (800569c <tcpip_callback_with_block+0x68>)
 800566a:	22ee      	movs	r2, #238	; 0xee
 800566c:	490c      	ldr	r1, [pc, #48]	; (80056a0 <tcpip_callback_with_block+0x6c>)
 800566e:	480d      	ldr	r0, [pc, #52]	; (80056a4 <tcpip_callback_with_block+0x70>)
 8005670:	f007 fabd 	bl	800cbee <iprintf>
 8005674:	e7e6      	b.n	8005644 <tcpip_callback_with_block+0x10>
    sys_mbox_post(&mbox, msg);
 8005676:	4601      	mov	r1, r0
 8005678:	4807      	ldr	r0, [pc, #28]	; (8005698 <tcpip_callback_with_block+0x64>)
 800567a:	f006 fbe6 	bl	800be4a <sys_mbox_post>
  return ERR_OK;
 800567e:	2300      	movs	r3, #0
 8005680:	e7f0      	b.n	8005664 <tcpip_callback_with_block+0x30>
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8005682:	4621      	mov	r1, r4
 8005684:	2008      	movs	r0, #8
 8005686:	f001 ff89 	bl	800759c <memp_free>
      return ERR_MEM;
 800568a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800568e:	e7e9      	b.n	8005664 <tcpip_callback_with_block+0x30>
    return ERR_MEM;
 8005690:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005694:	e7e6      	b.n	8005664 <tcpip_callback_with_block+0x30>
 8005696:	bf00      	nop
 8005698:	20003e34 	.word	0x20003e34
 800569c:	0800d9e8 	.word	0x0800d9e8
 80056a0:	0800d9bc 	.word	0x0800d9bc
 80056a4:	0800d378 	.word	0x0800d378

080056a8 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t* sem)
{
 80056a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80056aa:	b085      	sub	sp, #20
 80056ac:	4607      	mov	r7, r0
 80056ae:	460e      	mov	r6, r1
 80056b0:	4615      	mov	r5, r2
  UNLOCK_TCPIP_CORE();
  return ERR_OK;
#else /* LWIP_TCPIP_CORE_LOCKING */
  TCPIP_MSG_VAR_DECLARE(msg);

  LWIP_ASSERT("semaphore not initialized", sys_sem_valid(sem));
 80056b2:	4610      	mov	r0, r2
 80056b4:	f006 fc68 	bl	800bf88 <sys_sem_valid>
 80056b8:	b198      	cbz	r0, 80056e2 <tcpip_send_msg_wait_sem+0x3a>
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 80056ba:	4812      	ldr	r0, [pc, #72]	; (8005704 <tcpip_send_msg_wait_sem+0x5c>)
 80056bc:	f006 fc1a 	bl	800bef4 <sys_mbox_valid>
 80056c0:	b1b8      	cbz	r0, 80056f2 <tcpip_send_msg_wait_sem+0x4a>

  TCPIP_MSG_VAR_ALLOC(msg);
  TCPIP_MSG_VAR_REF(msg).type = TCPIP_MSG_API;
 80056c2:	2400      	movs	r4, #0
 80056c4:	f88d 4000 	strb.w	r4, [sp]
  TCPIP_MSG_VAR_REF(msg).msg.api_msg.function = fn;
 80056c8:	9701      	str	r7, [sp, #4]
  TCPIP_MSG_VAR_REF(msg).msg.api_msg.msg = apimsg;
 80056ca:	9602      	str	r6, [sp, #8]
  sys_mbox_post(&mbox, &TCPIP_MSG_VAR_REF(msg));
 80056cc:	4669      	mov	r1, sp
 80056ce:	480d      	ldr	r0, [pc, #52]	; (8005704 <tcpip_send_msg_wait_sem+0x5c>)
 80056d0:	f006 fbbb 	bl	800be4a <sys_mbox_post>
  sys_arch_sem_wait(sem, 0);
 80056d4:	4621      	mov	r1, r4
 80056d6:	4628      	mov	r0, r5
 80056d8:	f006 fc2e 	bl	800bf38 <sys_arch_sem_wait>
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 80056dc:	4620      	mov	r0, r4
 80056de:	b005      	add	sp, #20
 80056e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ASSERT("semaphore not initialized", sys_sem_valid(sem));
 80056e2:	4b09      	ldr	r3, [pc, #36]	; (8005708 <tcpip_send_msg_wait_sem+0x60>)
 80056e4:	f44f 72aa 	mov.w	r2, #340	; 0x154
 80056e8:	4908      	ldr	r1, [pc, #32]	; (800570c <tcpip_send_msg_wait_sem+0x64>)
 80056ea:	4809      	ldr	r0, [pc, #36]	; (8005710 <tcpip_send_msg_wait_sem+0x68>)
 80056ec:	f007 fa7f 	bl	800cbee <iprintf>
 80056f0:	e7e3      	b.n	80056ba <tcpip_send_msg_wait_sem+0x12>
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 80056f2:	4b05      	ldr	r3, [pc, #20]	; (8005708 <tcpip_send_msg_wait_sem+0x60>)
 80056f4:	f240 1255 	movw	r2, #341	; 0x155
 80056f8:	4906      	ldr	r1, [pc, #24]	; (8005714 <tcpip_send_msg_wait_sem+0x6c>)
 80056fa:	4805      	ldr	r0, [pc, #20]	; (8005710 <tcpip_send_msg_wait_sem+0x68>)
 80056fc:	f007 fa77 	bl	800cbee <iprintf>
 8005700:	e7df      	b.n	80056c2 <tcpip_send_msg_wait_sem+0x1a>
 8005702:	bf00      	nop
 8005704:	20003e34 	.word	0x20003e34
 8005708:	0800d9e8 	.word	0x0800d9e8
 800570c:	0800d9cc 	.word	0x0800d9cc
 8005710:	0800d378 	.word	0x0800d378
 8005714:	0800d9bc 	.word	0x0800d9bc

08005718 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8005718:	b530      	push	{r4, r5, lr}
 800571a:	b083      	sub	sp, #12
 800571c:	4605      	mov	r5, r0
 800571e:	460c      	mov	r4, r1
  lwip_init();
 8005720:	f000 f83b 	bl	800579a <lwip_init>

  tcpip_init_done = initfunc;
 8005724:	4b0d      	ldr	r3, [pc, #52]	; (800575c <tcpip_init+0x44>)
 8005726:	601d      	str	r5, [r3, #0]
  tcpip_init_done_arg = arg;
 8005728:	4b0d      	ldr	r3, [pc, #52]	; (8005760 <tcpip_init+0x48>)
 800572a:	601c      	str	r4, [r3, #0]
  if (sys_mbox_new(&mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800572c:	2106      	movs	r1, #6
 800572e:	480d      	ldr	r0, [pc, #52]	; (8005764 <tcpip_init+0x4c>)
 8005730:	f006 fb6e 	bl	800be10 <sys_mbox_new>
 8005734:	b950      	cbnz	r0, 800574c <tcpip_init+0x34>
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8005736:	2303      	movs	r3, #3
 8005738:	9300      	str	r3, [sp, #0]
 800573a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800573e:	2200      	movs	r2, #0
 8005740:	4909      	ldr	r1, [pc, #36]	; (8005768 <tcpip_init+0x50>)
 8005742:	480a      	ldr	r0, [pc, #40]	; (800576c <tcpip_init+0x54>)
 8005744:	f006 fc53 	bl	800bfee <sys_thread_new>
}
 8005748:	b003      	add	sp, #12
 800574a:	bd30      	pop	{r4, r5, pc}
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800574c:	4b08      	ldr	r3, [pc, #32]	; (8005770 <tcpip_init+0x58>)
 800574e:	f240 12d5 	movw	r2, #469	; 0x1d5
 8005752:	4908      	ldr	r1, [pc, #32]	; (8005774 <tcpip_init+0x5c>)
 8005754:	4808      	ldr	r0, [pc, #32]	; (8005778 <tcpip_init+0x60>)
 8005756:	f007 fa4a 	bl	800cbee <iprintf>
 800575a:	e7ec      	b.n	8005736 <tcpip_init+0x1e>
 800575c:	20003e38 	.word	0x20003e38
 8005760:	20003e3c 	.word	0x20003e3c
 8005764:	20003e34 	.word	0x20003e34
 8005768:	080054f1 	.word	0x080054f1
 800576c:	0800d9ac 	.word	0x0800d9ac
 8005770:	0800d9e8 	.word	0x0800d9e8
 8005774:	0800d988 	.word	0x0800d988
 8005778:	0800d378 	.word	0x0800d378

0800577c <lwip_htons>:
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  return (u16_t)PP_HTONS(n);
 800577c:	ba40      	rev16	r0, r0
}
 800577e:	b280      	uxth	r0, r0
 8005780:	4770      	bx	lr

08005782 <lwip_htonl>:
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
  return (u32_t)PP_HTONL(n);
 8005782:	0203      	lsls	r3, r0, #8
 8005784:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005788:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800578c:	0a02      	lsrs	r2, r0, #8
 800578e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8005792:	4313      	orrs	r3, r2
}
 8005794:	ea43 6010 	orr.w	r0, r3, r0, lsr #24
 8005798:	4770      	bx	lr

0800579a <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800579a:	b508      	push	{r3, lr}
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800579c:	f006 fbfe 	bl	800bf9c <sys_init>
#endif /* !NO_SYS */
  mem_init();
 80057a0:	f001 fca4 	bl	80070ec <mem_init>
  memp_init();
 80057a4:	f001 fed0 	bl	8007548 <memp_init>
  pbuf_init();
  netif_init();
 80057a8:	f001 ff23 	bl	80075f2 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80057ac:	f006 f93a 	bl	800ba24 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80057b0:	f002 fc7c 	bl	80080ac <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
 80057b4:	f006 f8a2 	bl	800b8fc <sys_timeouts_init>
 80057b8:	bd08      	pop	{r3, pc}
	...

080057bc <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80057bc:	b510      	push	{r4, lr}
 80057be:	4604      	mov	r4, r0
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80057c0:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 80057c4:	00d3      	lsls	r3, r2, #3
 80057c6:	4a09      	ldr	r2, [pc, #36]	; (80057ec <etharp_free_entry+0x30>)
 80057c8:	58d0      	ldr	r0, [r2, r3]
 80057ca:	b138      	cbz	r0, 80057dc <etharp_free_entry+0x20>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80057cc:	f002 f8bc 	bl	8007948 <pbuf_free>
    arp_table[i].q = NULL;
 80057d0:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 80057d4:	00d3      	lsls	r3, r2, #3
 80057d6:	2100      	movs	r1, #0
 80057d8:	4a04      	ldr	r2, [pc, #16]	; (80057ec <etharp_free_entry+0x30>)
 80057da:	50d1      	str	r1, [r2, r3]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80057dc:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80057e0:	00e2      	lsls	r2, r4, #3
 80057e2:	4b02      	ldr	r3, [pc, #8]	; (80057ec <etharp_free_entry+0x30>)
 80057e4:	4413      	add	r3, r2
 80057e6:	2200      	movs	r2, #0
 80057e8:	751a      	strb	r2, [r3, #20]
 80057ea:	bd10      	pop	{r4, pc}
 80057ec:	20003e40 	.word	0x20003e40

080057f0 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
{
 80057f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  s8_t empty = ARP_TABLE_SIZE;
  u8_t i = 0;
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80057f4:	f04f 0e00 	mov.w	lr, #0
 80057f8:	46f3      	mov	fp, lr
 80057fa:	46f1      	mov	r9, lr
  s8_t old_queue = ARP_TABLE_SIZE;
 80057fc:	f04f 0c0a 	mov.w	ip, #10
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8005800:	4673      	mov	r3, lr
  s8_t empty = ARP_TABLE_SIZE;
 8005802:	4667      	mov	r7, ip
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8005804:	46e0      	mov	r8, ip
 8005806:	46e2      	mov	sl, ip
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8005808:	e003      	b.n	8005812 <etharp_find_entry+0x22>
    u8_t state = arp_table[i].state;
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800580a:	b96c      	cbnz	r4, 8005828 <etharp_find_entry+0x38>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
 800580c:	b25f      	sxtb	r7, r3
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800580e:	3301      	adds	r3, #1
 8005810:	b2db      	uxtb	r3, r3
 8005812:	2b09      	cmp	r3, #9
 8005814:	d845      	bhi.n	80058a2 <etharp_find_entry+0xb2>
    u8_t state = arp_table[i].state;
 8005816:	461a      	mov	r2, r3
 8005818:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 800581c:	00e5      	lsls	r5, r4, #3
 800581e:	4c59      	ldr	r4, [pc, #356]	; (8005984 <etharp_find_entry+0x194>)
 8005820:	442c      	add	r4, r5
 8005822:	7d24      	ldrb	r4, [r4, #20]
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8005824:	2f0a      	cmp	r7, #10
 8005826:	d0f0      	beq.n	800580a <etharp_find_entry+0x1a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8005828:	2c00      	cmp	r4, #0
 800582a:	d0f0      	beq.n	800580e <etharp_find_entry+0x1e>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800582c:	b140      	cbz	r0, 8005840 <etharp_find_entry+0x50>
 800582e:	eb02 0542 	add.w	r5, r2, r2, lsl #1
 8005832:	00ee      	lsls	r6, r5, #3
 8005834:	4d53      	ldr	r5, [pc, #332]	; (8005984 <etharp_find_entry+0x194>)
 8005836:	4435      	add	r5, r6
 8005838:	686d      	ldr	r5, [r5, #4]
 800583a:	6806      	ldr	r6, [r0, #0]
 800583c:	42ae      	cmp	r6, r5
 800583e:	d00f      	beq.n	8005860 <etharp_find_entry+0x70>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8005840:	2c01      	cmp	r4, #1
 8005842:	d010      	beq.n	8005866 <etharp_find_entry+0x76>
            old_pending = i;
            age_pending = arp_table[i].ctime;
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8005844:	2c01      	cmp	r4, #1
 8005846:	d9e2      	bls.n	800580e <etharp_find_entry+0x1e>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8005848:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800584c:	00d4      	lsls	r4, r2, #3
 800584e:	4a4d      	ldr	r2, [pc, #308]	; (8005984 <etharp_find_entry+0x194>)
 8005850:	4422      	add	r2, r4
 8005852:	8a52      	ldrh	r2, [r2, #18]
 8005854:	4596      	cmp	lr, r2
 8005856:	d8da      	bhi.n	800580e <etharp_find_entry+0x1e>
            old_stable = i;
 8005858:	fa4f f883 	sxtb.w	r8, r3
            age_stable = arp_table[i].ctime;
 800585c:	4696      	mov	lr, r2
 800585e:	e7d6      	b.n	800580e <etharp_find_entry+0x1e>
        return i;
 8005860:	b258      	sxtb	r0, r3
 8005862:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (arp_table[i].q != NULL) {
 8005866:	eb02 0542 	add.w	r5, r2, r2, lsl #1
 800586a:	00ec      	lsls	r4, r5, #3
 800586c:	4d45      	ldr	r5, [pc, #276]	; (8005984 <etharp_find_entry+0x194>)
 800586e:	592c      	ldr	r4, [r5, r4]
 8005870:	b15c      	cbz	r4, 800588a <etharp_find_entry+0x9a>
          if (arp_table[i].ctime >= age_queue) {
 8005872:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8005876:	00d4      	lsls	r4, r2, #3
 8005878:	462a      	mov	r2, r5
 800587a:	4422      	add	r2, r4
 800587c:	8a52      	ldrh	r2, [r2, #18]
 800587e:	4591      	cmp	r9, r2
 8005880:	d8c5      	bhi.n	800580e <etharp_find_entry+0x1e>
            old_queue = i;
 8005882:	fa4f fc83 	sxtb.w	ip, r3
            age_queue = arp_table[i].ctime;
 8005886:	4691      	mov	r9, r2
 8005888:	e7c1      	b.n	800580e <etharp_find_entry+0x1e>
          if (arp_table[i].ctime >= age_pending) {
 800588a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800588e:	00d4      	lsls	r4, r2, #3
 8005890:	4a3c      	ldr	r2, [pc, #240]	; (8005984 <etharp_find_entry+0x194>)
 8005892:	4422      	add	r2, r4
 8005894:	8a52      	ldrh	r2, [r2, #18]
 8005896:	4593      	cmp	fp, r2
 8005898:	d8b9      	bhi.n	800580e <etharp_find_entry+0x1e>
            old_pending = i;
 800589a:	fa4f fa83 	sxtb.w	sl, r3
            age_pending = arp_table[i].ctime;
 800589e:	4693      	mov	fp, r2
 80058a0:	e7b5      	b.n	800580e <etharp_find_entry+0x1e>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80058a2:	f011 0f02 	tst.w	r1, #2
 80058a6:	d165      	bne.n	8005974 <etharp_find_entry+0x184>
 80058a8:	2f0a      	cmp	r7, #10
 80058aa:	d020      	beq.n	80058ee <etharp_find_entry+0xfe>
 80058ac:	4605      	mov	r5, r0
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80058ae:	2f09      	cmp	r7, #9
 80058b0:	dc24      	bgt.n	80058fc <etharp_find_entry+0x10c>
    i = empty;
 80058b2:	b2ff      	uxtb	r7, r7
    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
    etharp_free_entry(i);
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80058b4:	2f09      	cmp	r7, #9
 80058b6:	d84d      	bhi.n	8005954 <etharp_find_entry+0x164>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80058b8:	463c      	mov	r4, r7
 80058ba:	eb07 0347 	add.w	r3, r7, r7, lsl #1
 80058be:	00da      	lsls	r2, r3, #3
 80058c0:	4b30      	ldr	r3, [pc, #192]	; (8005984 <etharp_find_entry+0x194>)
 80058c2:	4413      	add	r3, r2
 80058c4:	7d1b      	ldrb	r3, [r3, #20]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d14c      	bne.n	8005964 <etharp_find_entry+0x174>
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80058ca:	b135      	cbz	r5, 80058da <etharp_find_entry+0xea>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80058cc:	6829      	ldr	r1, [r5, #0]
 80058ce:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 80058d2:	00da      	lsls	r2, r3, #3
 80058d4:	4b2b      	ldr	r3, [pc, #172]	; (8005984 <etharp_find_entry+0x194>)
 80058d6:	4413      	add	r3, r2
 80058d8:	6059      	str	r1, [r3, #4]
  }
  arp_table[i].ctime = 0;
 80058da:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80058de:	00e2      	lsls	r2, r4, #3
 80058e0:	4b28      	ldr	r3, [pc, #160]	; (8005984 <etharp_find_entry+0x194>)
 80058e2:	4413      	add	r3, r2
 80058e4:	2200      	movs	r2, #0
 80058e6:	825a      	strh	r2, [r3, #18]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF*/
  return (err_t)i;
 80058e8:	b278      	sxtb	r0, r7
 80058ea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80058ee:	f011 0f01 	tst.w	r1, #1
 80058f2:	d1db      	bne.n	80058ac <etharp_find_entry+0xbc>
    return (s8_t)ERR_MEM;
 80058f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80058f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (old_stable < ARP_TABLE_SIZE) {
 80058fc:	f1b8 0f09 	cmp.w	r8, #9
 8005900:	dc14      	bgt.n	800592c <etharp_find_entry+0x13c>
      i = old_stable;
 8005902:	fa5f f788 	uxtb.w	r7, r8
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8005906:	eb07 0247 	add.w	r2, r7, r7, lsl #1
 800590a:	00d3      	lsls	r3, r2, #3
 800590c:	4a1d      	ldr	r2, [pc, #116]	; (8005984 <etharp_find_entry+0x194>)
 800590e:	58d3      	ldr	r3, [r2, r3]
 8005910:	b133      	cbz	r3, 8005920 <etharp_find_entry+0x130>
 8005912:	4b1d      	ldr	r3, [pc, #116]	; (8005988 <etharp_find_entry+0x198>)
 8005914:	f240 126f 	movw	r2, #367	; 0x16f
 8005918:	491c      	ldr	r1, [pc, #112]	; (800598c <etharp_find_entry+0x19c>)
 800591a:	481d      	ldr	r0, [pc, #116]	; (8005990 <etharp_find_entry+0x1a0>)
 800591c:	f007 f967 	bl	800cbee <iprintf>
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8005920:	2f09      	cmp	r7, #9
 8005922:	d80f      	bhi.n	8005944 <etharp_find_entry+0x154>
    etharp_free_entry(i);
 8005924:	4638      	mov	r0, r7
 8005926:	f7ff ff49 	bl	80057bc <etharp_free_entry>
 800592a:	e7c3      	b.n	80058b4 <etharp_find_entry+0xc4>
    } else if (old_pending < ARP_TABLE_SIZE) {
 800592c:	f1ba 0f09 	cmp.w	sl, #9
 8005930:	dc02      	bgt.n	8005938 <etharp_find_entry+0x148>
      i = old_pending;
 8005932:	fa5f f78a 	uxtb.w	r7, sl
 8005936:	e7f3      	b.n	8005920 <etharp_find_entry+0x130>
    } else if (old_queue < ARP_TABLE_SIZE) {
 8005938:	f1bc 0f09 	cmp.w	ip, #9
 800593c:	dc1e      	bgt.n	800597c <etharp_find_entry+0x18c>
      i = old_queue;
 800593e:	fa5f f78c 	uxtb.w	r7, ip
 8005942:	e7ed      	b.n	8005920 <etharp_find_entry+0x130>
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8005944:	4b10      	ldr	r3, [pc, #64]	; (8005988 <etharp_find_entry+0x198>)
 8005946:	f240 1281 	movw	r2, #385	; 0x181
 800594a:	4912      	ldr	r1, [pc, #72]	; (8005994 <etharp_find_entry+0x1a4>)
 800594c:	4810      	ldr	r0, [pc, #64]	; (8005990 <etharp_find_entry+0x1a0>)
 800594e:	f007 f94e 	bl	800cbee <iprintf>
 8005952:	e7e7      	b.n	8005924 <etharp_find_entry+0x134>
  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8005954:	4b0c      	ldr	r3, [pc, #48]	; (8005988 <etharp_find_entry+0x198>)
 8005956:	f240 1285 	movw	r2, #389	; 0x185
 800595a:	490e      	ldr	r1, [pc, #56]	; (8005994 <etharp_find_entry+0x1a4>)
 800595c:	480c      	ldr	r0, [pc, #48]	; (8005990 <etharp_find_entry+0x1a0>)
 800595e:	f007 f946 	bl	800cbee <iprintf>
 8005962:	e7a9      	b.n	80058b8 <etharp_find_entry+0xc8>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8005964:	4b08      	ldr	r3, [pc, #32]	; (8005988 <etharp_find_entry+0x198>)
 8005966:	f240 1287 	movw	r2, #391	; 0x187
 800596a:	490b      	ldr	r1, [pc, #44]	; (8005998 <etharp_find_entry+0x1a8>)
 800596c:	4808      	ldr	r0, [pc, #32]	; (8005990 <etharp_find_entry+0x1a0>)
 800596e:	f007 f93e 	bl	800cbee <iprintf>
 8005972:	e7aa      	b.n	80058ca <etharp_find_entry+0xda>
    return (s8_t)ERR_MEM;
 8005974:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005978:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return (s8_t)ERR_MEM;
 800597c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8005980:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005984:	20003e40 	.word	0x20003e40
 8005988:	0800da38 	.word	0x0800da38
 800598c:	0800da70 	.word	0x0800da70
 8005990:	0800d378 	.word	0x0800d378
 8005994:	0800da88 	.word	0x0800da88
 8005998:	0800da9c 	.word	0x0800da9c

0800599c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800599c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800599e:	b083      	sub	sp, #12
 80059a0:	4604      	mov	r4, r0
 80059a2:	460d      	mov	r5, r1
 80059a4:	4616      	mov	r6, r2
 80059a6:	461f      	mov	r7, r3
  s8_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80059a8:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80059ac:	2b06      	cmp	r3, #6
 80059ae:	d006      	beq.n	80059be <etharp_update_arp_entry+0x22>
 80059b0:	4b28      	ldr	r3, [pc, #160]	; (8005a54 <etharp_update_arp_entry+0xb8>)
 80059b2:	f240 12ab 	movw	r2, #427	; 0x1ab
 80059b6:	4928      	ldr	r1, [pc, #160]	; (8005a58 <etharp_update_arp_entry+0xbc>)
 80059b8:	4828      	ldr	r0, [pc, #160]	; (8005a5c <etharp_update_arp_entry+0xc0>)
 80059ba:	f007 f918 	bl	800cbee <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
    (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80059be:	2d00      	cmp	r5, #0
 80059c0:	d039      	beq.n	8005a36 <etharp_update_arp_entry+0x9a>
 80059c2:	6828      	ldr	r0, [r5, #0]
 80059c4:	2800      	cmp	r0, #0
 80059c6:	d039      	beq.n	8005a3c <etharp_update_arp_entry+0xa0>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80059c8:	4621      	mov	r1, r4
 80059ca:	f000 fe3c 	bl	8006646 <ip4_addr_isbroadcast_u32>
  if (ip4_addr_isany(ipaddr) ||
 80059ce:	2800      	cmp	r0, #0
 80059d0:	d137      	bne.n	8005a42 <etharp_update_arp_entry+0xa6>
      ip4_addr_ismulticast(ipaddr)) {
 80059d2:	682b      	ldr	r3, [r5, #0]
 80059d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80059d8:	2be0      	cmp	r3, #224	; 0xe0
 80059da:	d035      	beq.n	8005a48 <etharp_update_arp_entry+0xac>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 80059dc:	4622      	mov	r2, r4
 80059de:	4639      	mov	r1, r7
 80059e0:	4628      	mov	r0, r5
 80059e2:	f7ff ff05 	bl	80057f0 <etharp_find_entry>
  /* bail out if no entry could be found */
  if (i < 0) {
 80059e6:	2800      	cmp	r0, #0
 80059e8:	db23      	blt.n	8005a32 <etharp_update_arp_entry+0x96>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80059ea:	4d1d      	ldr	r5, [pc, #116]	; (8005a60 <etharp_update_arp_entry+0xc4>)
 80059ec:	0042      	lsls	r2, r0, #1
 80059ee:	1813      	adds	r3, r2, r0
 80059f0:	00d9      	lsls	r1, r3, #3
 80059f2:	186f      	adds	r7, r5, r1
 80059f4:	2302      	movs	r3, #2
 80059f6:	753b      	strb	r3, [r7, #20]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80059f8:	60bc      	str	r4, [r7, #8]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 80059fa:	460b      	mov	r3, r1
 80059fc:	3308      	adds	r3, #8
 80059fe:	442b      	add	r3, r5
 8005a00:	6832      	ldr	r2, [r6, #0]
 8005a02:	605a      	str	r2, [r3, #4]
 8005a04:	88b2      	ldrh	r2, [r6, #4]
 8005a06:	811a      	strh	r2, [r3, #8]
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8005a08:	2300      	movs	r3, #0
 8005a0a:	827b      	strh	r3, [r7, #18]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8005a0c:	586d      	ldr	r5, [r5, r1]
 8005a0e:	b1f5      	cbz	r5, 8005a4e <etharp_update_arp_entry+0xb2>
    struct pbuf *p = arp_table[i].q;
    arp_table[i].q = NULL;
 8005a10:	2700      	movs	r7, #0
 8005a12:	4a13      	ldr	r2, [pc, #76]	; (8005a60 <etharp_update_arp_entry+0xc4>)
 8005a14:	5057      	str	r7, [r2, r1]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8005a16:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005a1a:	9300      	str	r3, [sp, #0]
 8005a1c:	4633      	mov	r3, r6
 8005a1e:	f104 0225 	add.w	r2, r4, #37	; 0x25
 8005a22:	4629      	mov	r1, r5
 8005a24:	4620      	mov	r0, r4
 8005a26:	f006 f9bb 	bl	800bda0 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8005a2a:	4628      	mov	r0, r5
 8005a2c:	f001 ff8c 	bl	8007948 <pbuf_free>
  }
  return ERR_OK;
 8005a30:	4638      	mov	r0, r7
}
 8005a32:	b003      	add	sp, #12
 8005a34:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return ERR_ARG;
 8005a36:	f06f 000f 	mvn.w	r0, #15
 8005a3a:	e7fa      	b.n	8005a32 <etharp_update_arp_entry+0x96>
 8005a3c:	f06f 000f 	mvn.w	r0, #15
 8005a40:	e7f7      	b.n	8005a32 <etharp_update_arp_entry+0x96>
 8005a42:	f06f 000f 	mvn.w	r0, #15
 8005a46:	e7f4      	b.n	8005a32 <etharp_update_arp_entry+0x96>
 8005a48:	f06f 000f 	mvn.w	r0, #15
 8005a4c:	e7f1      	b.n	8005a32 <etharp_update_arp_entry+0x96>
  return ERR_OK;
 8005a4e:	2000      	movs	r0, #0
 8005a50:	e7ef      	b.n	8005a32 <etharp_update_arp_entry+0x96>
 8005a52:	bf00      	nop
 8005a54:	0800da38 	.word	0x0800da38
 8005a58:	0800dbf0 	.word	0x0800dbf0
 8005a5c:	0800d378 	.word	0x0800d378
 8005a60:	20003e40 	.word	0x20003e40

08005a64 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8005a64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a68:	b082      	sub	sp, #8
 8005a6a:	4689      	mov	r9, r1
 8005a6c:	4692      	mov	sl, r2
 8005a6e:	4698      	mov	r8, r3
 8005a70:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  struct pbuf *p;
  err_t result = ERR_OK;
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8005a72:	4607      	mov	r7, r0
 8005a74:	2800      	cmp	r0, #0
 8005a76:	d048      	beq.n	8005b0a <etharp_raw+0xa6>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8005a78:	2200      	movs	r2, #0
 8005a7a:	211c      	movs	r1, #28
 8005a7c:	2002      	movs	r0, #2
 8005a7e:	f001 ffcf 	bl	8007a20 <pbuf_alloc>
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8005a82:	4606      	mov	r6, r0
 8005a84:	2800      	cmp	r0, #0
 8005a86:	d050      	beq.n	8005b2a <etharp_raw+0xc6>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8005a88:	8943      	ldrh	r3, [r0, #10]
 8005a8a:	2b1b      	cmp	r3, #27
 8005a8c:	d945      	bls.n	8005b1a <etharp_raw+0xb6>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8005a8e:	6874      	ldr	r4, [r6, #4]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8005a90:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 8005a94:	f7ff fe72 	bl	800577c <lwip_htons>
 8005a98:	80e0      	strh	r0, [r4, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8005a9a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005a9e:	2b06      	cmp	r3, #6
 8005aa0:	d006      	beq.n	8005ab0 <etharp_raw+0x4c>
 8005aa2:	4b23      	ldr	r3, [pc, #140]	; (8005b30 <etharp_raw+0xcc>)
 8005aa4:	f240 426b 	movw	r2, #1131	; 0x46b
 8005aa8:	4922      	ldr	r1, [pc, #136]	; (8005b34 <etharp_raw+0xd0>)
 8005aaa:	4823      	ldr	r0, [pc, #140]	; (8005b38 <etharp_raw+0xd4>)
 8005aac:	f007 f89f 	bl	800cbee <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 8005ab0:	f8d8 3000 	ldr.w	r3, [r8]
 8005ab4:	60a3      	str	r3, [r4, #8]
 8005ab6:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8005aba:	81a3      	strh	r3, [r4, #12]
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 8005abc:	682b      	ldr	r3, [r5, #0]
 8005abe:	f8c4 3012 	str.w	r3, [r4, #18]
 8005ac2:	88ab      	ldrh	r3, [r5, #4]
 8005ac4:	82e3      	strh	r3, [r4, #22]
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 8005ac6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f8c4 300e 	str.w	r3, [r4, #14]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 8005ace:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	61a3      	str	r3, [r4, #24]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 8005ad4:	2500      	movs	r5, #0
 8005ad6:	7025      	strb	r5, [r4, #0]
 8005ad8:	2301      	movs	r3, #1
 8005ada:	7063      	strb	r3, [r4, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8005adc:	2308      	movs	r3, #8
 8005ade:	70a3      	strb	r3, [r4, #2]
 8005ae0:	70e5      	strb	r5, [r4, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8005ae2:	2306      	movs	r3, #6
 8005ae4:	7123      	strb	r3, [r4, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8005ae6:	2304      	movs	r3, #4
 8005ae8:	7163      	strb	r3, [r4, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8005aea:	f640 0306 	movw	r3, #2054	; 0x806
 8005aee:	9300      	str	r3, [sp, #0]
 8005af0:	4653      	mov	r3, sl
 8005af2:	464a      	mov	r2, r9
 8005af4:	4631      	mov	r1, r6
 8005af6:	4638      	mov	r0, r7
 8005af8:	f006 f952 	bl	800bda0 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8005afc:	4630      	mov	r0, r6
 8005afe:	f001 ff23 	bl	8007948 <pbuf_free>
  p = NULL;
  /* could not allocate pbuf for ARP request */

  return result;
 8005b02:	4628      	mov	r0, r5
}
 8005b04:	b002      	add	sp, #8
 8005b06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8005b0a:	4b09      	ldr	r3, [pc, #36]	; (8005b30 <etharp_raw+0xcc>)
 8005b0c:	f44f 628b 	mov.w	r2, #1112	; 0x458
 8005b10:	490a      	ldr	r1, [pc, #40]	; (8005b3c <etharp_raw+0xd8>)
 8005b12:	4809      	ldr	r0, [pc, #36]	; (8005b38 <etharp_raw+0xd4>)
 8005b14:	f007 f86b 	bl	800cbee <iprintf>
 8005b18:	e7ae      	b.n	8005a78 <etharp_raw+0x14>
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8005b1a:	4b05      	ldr	r3, [pc, #20]	; (8005b30 <etharp_raw+0xcc>)
 8005b1c:	f240 4264 	movw	r2, #1124	; 0x464
 8005b20:	4907      	ldr	r1, [pc, #28]	; (8005b40 <etharp_raw+0xdc>)
 8005b22:	4805      	ldr	r0, [pc, #20]	; (8005b38 <etharp_raw+0xd4>)
 8005b24:	f007 f863 	bl	800cbee <iprintf>
 8005b28:	e7b1      	b.n	8005a8e <etharp_raw+0x2a>
    return ERR_MEM;
 8005b2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005b2e:	e7e9      	b.n	8005b04 <etharp_raw+0xa0>
 8005b30:	0800da38 	.word	0x0800da38
 8005b34:	0800dbac 	.word	0x0800dbac
 8005b38:	0800d378 	.word	0x0800d378
 8005b3c:	0800db68 	.word	0x0800db68
 8005b40:	0800db78 	.word	0x0800db78

08005b44 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
 8005b44:	b530      	push	{r4, r5, lr}
 8005b46:	b085      	sub	sp, #20
 8005b48:	4603      	mov	r3, r0
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8005b4a:	f100 0425 	add.w	r4, r0, #37	; 0x25
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8005b4e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8005b50:	2501      	movs	r5, #1
 8005b52:	9503      	str	r5, [sp, #12]
 8005b54:	9102      	str	r1, [sp, #8]
 8005b56:	4904      	ldr	r1, [pc, #16]	; (8005b68 <etharp_request_dst+0x24>)
 8005b58:	9101      	str	r1, [sp, #4]
 8005b5a:	9300      	str	r3, [sp, #0]
 8005b5c:	4623      	mov	r3, r4
 8005b5e:	4621      	mov	r1, r4
 8005b60:	f7ff ff80 	bl	8005a64 <etharp_raw>
                    ipaddr, ARP_REQUEST);
}
 8005b64:	b005      	add	sp, #20
 8005b66:	bd30      	pop	{r4, r5, pc}
 8005b68:	0800f32c 	.word	0x0800f32c

08005b6c <etharp_cleanup_netif>:
{
 8005b6c:	b538      	push	{r3, r4, r5, lr}
 8005b6e:	4605      	mov	r5, r0
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8005b70:	2400      	movs	r4, #0
 8005b72:	e001      	b.n	8005b78 <etharp_cleanup_netif+0xc>
 8005b74:	3401      	adds	r4, #1
 8005b76:	b2e4      	uxtb	r4, r4
 8005b78:	2c09      	cmp	r4, #9
 8005b7a:	d810      	bhi.n	8005b9e <etharp_cleanup_netif+0x32>
    u8_t state = arp_table[i].state;
 8005b7c:	4620      	mov	r0, r4
 8005b7e:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8005b82:	00da      	lsls	r2, r3, #3
 8005b84:	4b06      	ldr	r3, [pc, #24]	; (8005ba0 <etharp_cleanup_netif+0x34>)
 8005b86:	4413      	add	r3, r2
 8005b88:	7d1b      	ldrb	r3, [r3, #20]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d0f2      	beq.n	8005b74 <etharp_cleanup_netif+0x8>
 8005b8e:	4b04      	ldr	r3, [pc, #16]	; (8005ba0 <etharp_cleanup_netif+0x34>)
 8005b90:	4413      	add	r3, r2
 8005b92:	689b      	ldr	r3, [r3, #8]
 8005b94:	42ab      	cmp	r3, r5
 8005b96:	d1ed      	bne.n	8005b74 <etharp_cleanup_netif+0x8>
      etharp_free_entry(i);
 8005b98:	f7ff fe10 	bl	80057bc <etharp_free_entry>
 8005b9c:	e7ea      	b.n	8005b74 <etharp_cleanup_netif+0x8>
}
 8005b9e:	bd38      	pop	{r3, r4, r5, pc}
 8005ba0:	20003e40 	.word	0x20003e40

08005ba4 <etharp_input>:
{
 8005ba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ba8:	b086      	sub	sp, #24
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8005baa:	b161      	cbz	r1, 8005bc6 <etharp_input+0x22>
 8005bac:	4604      	mov	r4, r0
 8005bae:	460e      	mov	r6, r1
  hdr = (struct etharp_hdr *)p->payload;
 8005bb0:	6845      	ldr	r5, [r0, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 8005bb2:	882b      	ldrh	r3, [r5, #0]
 8005bb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bb8:	d00d      	beq.n	8005bd6 <etharp_input+0x32>
    pbuf_free(p);
 8005bba:	4620      	mov	r0, r4
 8005bbc:	f001 fec4 	bl	8007948 <pbuf_free>
}
 8005bc0:	b006      	add	sp, #24
 8005bc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8005bc6:	4b20      	ldr	r3, [pc, #128]	; (8005c48 <etharp_input+0xa4>)
 8005bc8:	f44f 7222 	mov.w	r2, #648	; 0x288
 8005bcc:	491f      	ldr	r1, [pc, #124]	; (8005c4c <etharp_input+0xa8>)
 8005bce:	4820      	ldr	r0, [pc, #128]	; (8005c50 <etharp_input+0xac>)
 8005bd0:	f007 f80d 	bl	800cbee <iprintf>
 8005bd4:	e7f4      	b.n	8005bc0 <etharp_input+0x1c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8005bd6:	792b      	ldrb	r3, [r5, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 8005bd8:	2b06      	cmp	r3, #6
 8005bda:	d1ee      	bne.n	8005bba <etharp_input+0x16>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8005bdc:	796b      	ldrb	r3, [r5, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8005bde:	2b04      	cmp	r3, #4
 8005be0:	d1eb      	bne.n	8005bba <etharp_input+0x16>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8005be2:	886b      	ldrh	r3, [r5, #2]
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8005be4:	2b08      	cmp	r3, #8
 8005be6:	d1e8      	bne.n	8005bba <etharp_input+0x16>
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 8005be8:	f8d5 300e 	ldr.w	r3, [r5, #14]
 8005bec:	9305      	str	r3, [sp, #20]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 8005bee:	69af      	ldr	r7, [r5, #24]
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8005bf0:	684b      	ldr	r3, [r1, #4]
 8005bf2:	b1ab      	cbz	r3, 8005c20 <etharp_input+0x7c>
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8005bf4:	429f      	cmp	r7, r3
 8005bf6:	bf14      	ite	ne
 8005bf8:	2700      	movne	r7, #0
 8005bfa:	2701      	moveq	r7, #1
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8005bfc:	f105 0808 	add.w	r8, r5, #8
 8005c00:	b187      	cbz	r7, 8005c24 <etharp_input+0x80>
 8005c02:	2301      	movs	r3, #1
 8005c04:	4642      	mov	r2, r8
 8005c06:	a905      	add	r1, sp, #20
 8005c08:	4630      	mov	r0, r6
 8005c0a:	f7ff fec7 	bl	800599c <etharp_update_arp_entry>
  switch (hdr->opcode) {
 8005c0e:	88eb      	ldrh	r3, [r5, #6]
 8005c10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c14:	d100      	bne.n	8005c18 <etharp_input+0x74>
    if (for_us) {
 8005c16:	b93f      	cbnz	r7, 8005c28 <etharp_input+0x84>
  pbuf_free(p);
 8005c18:	4620      	mov	r0, r4
 8005c1a:	f001 fe95 	bl	8007948 <pbuf_free>
 8005c1e:	e7cf      	b.n	8005bc0 <etharp_input+0x1c>
    for_us = 0;
 8005c20:	2700      	movs	r7, #0
 8005c22:	e7eb      	b.n	8005bfc <etharp_input+0x58>
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8005c24:	2302      	movs	r3, #2
 8005c26:	e7ed      	b.n	8005c04 <etharp_input+0x60>
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8005c28:	f106 0125 	add.w	r1, r6, #37	; 0x25
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8005c2c:	1d33      	adds	r3, r6, #4
      etharp_raw(netif,
 8005c2e:	2202      	movs	r2, #2
 8005c30:	9203      	str	r2, [sp, #12]
 8005c32:	aa05      	add	r2, sp, #20
 8005c34:	9202      	str	r2, [sp, #8]
 8005c36:	f8cd 8004 	str.w	r8, [sp, #4]
 8005c3a:	9300      	str	r3, [sp, #0]
 8005c3c:	460b      	mov	r3, r1
 8005c3e:	4642      	mov	r2, r8
 8005c40:	4630      	mov	r0, r6
 8005c42:	f7ff ff0f 	bl	8005a64 <etharp_raw>
 8005c46:	e7e7      	b.n	8005c18 <etharp_input+0x74>
 8005c48:	0800da38 	.word	0x0800da38
 8005c4c:	0800db68 	.word	0x0800db68
 8005c50:	0800d378 	.word	0x0800d378

08005c54 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8005c54:	b508      	push	{r3, lr}
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8005c56:	4a02      	ldr	r2, [pc, #8]	; (8005c60 <etharp_request+0xc>)
 8005c58:	f7ff ff74 	bl	8005b44 <etharp_request_dst>
}
 8005c5c:	bd08      	pop	{r3, pc}
 8005c5e:	bf00      	nop
 8005c60:	0800f2b8 	.word	0x0800f2b8

08005c64 <etharp_tmr>:
{
 8005c64:	b538      	push	{r3, r4, r5, lr}
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8005c66:	2400      	movs	r4, #0
 8005c68:	e005      	b.n	8005c76 <etharp_tmr+0x12>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8005c6a:	2b04      	cmp	r3, #4
 8005c6c:	d91d      	bls.n	8005caa <etharp_tmr+0x46>
        etharp_free_entry(i);
 8005c6e:	f7ff fda5 	bl	80057bc <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8005c72:	3401      	adds	r4, #1
 8005c74:	b2e4      	uxtb	r4, r4
 8005c76:	2c09      	cmp	r4, #9
 8005c78:	d838      	bhi.n	8005cec <etharp_tmr+0x88>
    u8_t state = arp_table[i].state;
 8005c7a:	4620      	mov	r0, r4
 8005c7c:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8005c80:	00da      	lsls	r2, r3, #3
 8005c82:	4b1b      	ldr	r3, [pc, #108]	; (8005cf0 <etharp_tmr+0x8c>)
 8005c84:	4413      	add	r3, r2
 8005c86:	7d1b      	ldrb	r3, [r3, #20]
    if (state != ETHARP_STATE_EMPTY
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d0f2      	beq.n	8005c72 <etharp_tmr+0xe>
      arp_table[i].ctime++;
 8005c8c:	4611      	mov	r1, r2
 8005c8e:	4a18      	ldr	r2, [pc, #96]	; (8005cf0 <etharp_tmr+0x8c>)
 8005c90:	440a      	add	r2, r1
 8005c92:	8a53      	ldrh	r3, [r2, #18]
 8005c94:	3301      	adds	r3, #1
 8005c96:	b29b      	uxth	r3, r3
 8005c98:	8253      	strh	r3, [r2, #18]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8005c9a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8005c9e:	d2e6      	bcs.n	8005c6e <etharp_tmr+0xa>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8005ca0:	4a13      	ldr	r2, [pc, #76]	; (8005cf0 <etharp_tmr+0x8c>)
 8005ca2:	440a      	add	r2, r1
 8005ca4:	7d12      	ldrb	r2, [r2, #20]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8005ca6:	2a01      	cmp	r2, #1
 8005ca8:	d0df      	beq.n	8005c6a <etharp_tmr+0x6>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8005caa:	2a03      	cmp	r2, #3
 8005cac:	d00e      	beq.n	8005ccc <etharp_tmr+0x68>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8005cae:	2a04      	cmp	r2, #4
 8005cb0:	d014      	beq.n	8005cdc <etharp_tmr+0x78>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8005cb2:	2a01      	cmp	r2, #1
 8005cb4:	d1dd      	bne.n	8005c72 <etharp_tmr+0xe>
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8005cb6:	4a0e      	ldr	r2, [pc, #56]	; (8005cf0 <etharp_tmr+0x8c>)
 8005cb8:	0043      	lsls	r3, r0, #1
 8005cba:	181d      	adds	r5, r3, r0
 8005cbc:	00e9      	lsls	r1, r5, #3
 8005cbe:	4411      	add	r1, r2
 8005cc0:	460a      	mov	r2, r1
 8005cc2:	3104      	adds	r1, #4
 8005cc4:	6890      	ldr	r0, [r2, #8]
 8005cc6:	f7ff ffc5 	bl	8005c54 <etharp_request>
 8005cca:	e7d2      	b.n	8005c72 <etharp_tmr+0xe>
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8005ccc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8005cd0:	00c2      	lsls	r2, r0, #3
 8005cd2:	4b07      	ldr	r3, [pc, #28]	; (8005cf0 <etharp_tmr+0x8c>)
 8005cd4:	4413      	add	r3, r2
 8005cd6:	2204      	movs	r2, #4
 8005cd8:	751a      	strb	r2, [r3, #20]
 8005cda:	e7ca      	b.n	8005c72 <etharp_tmr+0xe>
        arp_table[i].state = ETHARP_STATE_STABLE;
 8005cdc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8005ce0:	00c2      	lsls	r2, r0, #3
 8005ce2:	4b03      	ldr	r3, [pc, #12]	; (8005cf0 <etharp_tmr+0x8c>)
 8005ce4:	4413      	add	r3, r2
 8005ce6:	2202      	movs	r2, #2
 8005ce8:	751a      	strb	r2, [r3, #20]
 8005cea:	e7c2      	b.n	8005c72 <etharp_tmr+0xe>
}
 8005cec:	bd38      	pop	{r3, r4, r5, pc}
 8005cee:	bf00      	nop
 8005cf0:	20003e40 	.word	0x20003e40

08005cf4 <etharp_output_to_arp_index>:
{
 8005cf4:	b570      	push	{r4, r5, r6, lr}
 8005cf6:	b082      	sub	sp, #8
 8005cf8:	4605      	mov	r5, r0
 8005cfa:	460e      	mov	r6, r1
 8005cfc:	4614      	mov	r4, r2
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8005cfe:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8005d02:	00da      	lsls	r2, r3, #3
 8005d04:	4b2c      	ldr	r3, [pc, #176]	; (8005db8 <etharp_output_to_arp_index+0xc4>)
 8005d06:	4413      	add	r3, r2
 8005d08:	7d1b      	ldrb	r3, [r3, #20]
 8005d0a:	2b01      	cmp	r3, #1
 8005d0c:	d919      	bls.n	8005d42 <etharp_output_to_arp_index+0x4e>
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8005d0e:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8005d12:	00da      	lsls	r2, r3, #3
 8005d14:	4b28      	ldr	r3, [pc, #160]	; (8005db8 <etharp_output_to_arp_index+0xc4>)
 8005d16:	4413      	add	r3, r2
 8005d18:	7d1b      	ldrb	r3, [r3, #20]
 8005d1a:	2b02      	cmp	r3, #2
 8005d1c:	d019      	beq.n	8005d52 <etharp_output_to_arp_index+0x5e>
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8005d1e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8005d22:	00e3      	lsls	r3, r4, #3
 8005d24:	3308      	adds	r3, #8
 8005d26:	4a24      	ldr	r2, [pc, #144]	; (8005db8 <etharp_output_to_arp_index+0xc4>)
 8005d28:	4413      	add	r3, r2
 8005d2a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005d2e:	9200      	str	r2, [sp, #0]
 8005d30:	3304      	adds	r3, #4
 8005d32:	f105 0225 	add.w	r2, r5, #37	; 0x25
 8005d36:	4631      	mov	r1, r6
 8005d38:	4628      	mov	r0, r5
 8005d3a:	f006 f831 	bl	800bda0 <ethernet_output>
}
 8005d3e:	b002      	add	sp, #8
 8005d40:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8005d42:	4b1e      	ldr	r3, [pc, #120]	; (8005dbc <etharp_output_to_arp_index+0xc8>)
 8005d44:	f240 22ed 	movw	r2, #749	; 0x2ed
 8005d48:	491d      	ldr	r1, [pc, #116]	; (8005dc0 <etharp_output_to_arp_index+0xcc>)
 8005d4a:	481e      	ldr	r0, [pc, #120]	; (8005dc4 <etharp_output_to_arp_index+0xd0>)
 8005d4c:	f006 ff4f 	bl	800cbee <iprintf>
 8005d50:	e7dd      	b.n	8005d0e <etharp_output_to_arp_index+0x1a>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8005d52:	4b19      	ldr	r3, [pc, #100]	; (8005db8 <etharp_output_to_arp_index+0xc4>)
 8005d54:	4413      	add	r3, r2
 8005d56:	8a5b      	ldrh	r3, [r3, #18]
 8005d58:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8005d5c:	d819      	bhi.n	8005d92 <etharp_output_to_arp_index+0x9e>
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8005d5e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8005d62:	d3dc      	bcc.n	8005d1e <etharp_output_to_arp_index+0x2a>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8005d64:	4a14      	ldr	r2, [pc, #80]	; (8005db8 <etharp_output_to_arp_index+0xc4>)
 8005d66:	0063      	lsls	r3, r4, #1
 8005d68:	1918      	adds	r0, r3, r4
 8005d6a:	00c1      	lsls	r1, r0, #3
 8005d6c:	4608      	mov	r0, r1
 8005d6e:	4411      	add	r1, r2
 8005d70:	3008      	adds	r0, #8
 8005d72:	4402      	add	r2, r0
 8005d74:	3204      	adds	r2, #4
 8005d76:	3104      	adds	r1, #4
 8005d78:	4628      	mov	r0, r5
 8005d7a:	f7ff fee3 	bl	8005b44 <etharp_request_dst>
 8005d7e:	2800      	cmp	r0, #0
 8005d80:	d1cd      	bne.n	8005d1e <etharp_output_to_arp_index+0x2a>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8005d82:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8005d86:	00da      	lsls	r2, r3, #3
 8005d88:	4b0b      	ldr	r3, [pc, #44]	; (8005db8 <etharp_output_to_arp_index+0xc4>)
 8005d8a:	4413      	add	r3, r2
 8005d8c:	2203      	movs	r2, #3
 8005d8e:	751a      	strb	r2, [r3, #20]
 8005d90:	e7c5      	b.n	8005d1e <etharp_output_to_arp_index+0x2a>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8005d92:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8005d96:	00d3      	lsls	r3, r2, #3
 8005d98:	4907      	ldr	r1, [pc, #28]	; (8005db8 <etharp_output_to_arp_index+0xc4>)
 8005d9a:	4419      	add	r1, r3
 8005d9c:	3104      	adds	r1, #4
 8005d9e:	4628      	mov	r0, r5
 8005da0:	f7ff ff58 	bl	8005c54 <etharp_request>
 8005da4:	2800      	cmp	r0, #0
 8005da6:	d1ba      	bne.n	8005d1e <etharp_output_to_arp_index+0x2a>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8005da8:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8005dac:	00da      	lsls	r2, r3, #3
 8005dae:	4b02      	ldr	r3, [pc, #8]	; (8005db8 <etharp_output_to_arp_index+0xc4>)
 8005db0:	4413      	add	r3, r2
 8005db2:	2203      	movs	r2, #3
 8005db4:	751a      	strb	r2, [r3, #20]
 8005db6:	e7b2      	b.n	8005d1e <etharp_output_to_arp_index+0x2a>
 8005db8:	20003e40 	.word	0x20003e40
 8005dbc:	0800da38 	.word	0x0800da38
 8005dc0:	0800dae8 	.word	0x0800dae8
 8005dc4:	0800d378 	.word	0x0800d378

08005dc8 <etharp_query>:
{
 8005dc8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005dcc:	b083      	sub	sp, #12
 8005dce:	4606      	mov	r6, r0
 8005dd0:	460c      	mov	r4, r1
 8005dd2:	4617      	mov	r7, r2
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
 8005dd4:	f100 0825 	add.w	r8, r0, #37	; 0x25
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8005dd8:	4601      	mov	r1, r0
 8005dda:	6820      	ldr	r0, [r4, #0]
 8005ddc:	f000 fc33 	bl	8006646 <ip4_addr_isbroadcast_u32>
 8005de0:	2800      	cmp	r0, #0
 8005de2:	f040 80aa 	bne.w	8005f3a <etharp_query+0x172>
      ip4_addr_ismulticast(ipaddr) ||
 8005de6:	6823      	ldr	r3, [r4, #0]
 8005de8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8005dec:	2ae0      	cmp	r2, #224	; 0xe0
 8005dee:	f000 80a7 	beq.w	8005f40 <etharp_query+0x178>
      ip4_addr_ismulticast(ipaddr) ||
 8005df2:	2c00      	cmp	r4, #0
 8005df4:	f000 80a7 	beq.w	8005f46 <etharp_query+0x17e>
      ip4_addr_isany(ipaddr)) {
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	f000 80a7 	beq.w	8005f4c <etharp_query+0x184>
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8005dfe:	4632      	mov	r2, r6
 8005e00:	2101      	movs	r1, #1
 8005e02:	4620      	mov	r0, r4
 8005e04:	f7ff fcf4 	bl	80057f0 <etharp_find_entry>
  if (i < 0) {
 8005e08:	1e05      	subs	r5, r0, #0
 8005e0a:	f2c0 80a2 	blt.w	8005f52 <etharp_query+0x18a>
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8005e0e:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8005e12:	00da      	lsls	r2, r3, #3
 8005e14:	4b51      	ldr	r3, [pc, #324]	; (8005f5c <etharp_query+0x194>)
 8005e16:	4413      	add	r3, r2
 8005e18:	7d1b      	ldrb	r3, [r3, #20]
 8005e1a:	bb1b      	cbnz	r3, 8005e64 <etharp_query+0x9c>
    arp_table[i].state = ETHARP_STATE_PENDING;
 8005e1c:	006a      	lsls	r2, r5, #1
 8005e1e:	442a      	add	r2, r5
 8005e20:	00d1      	lsls	r1, r2, #3
 8005e22:	4b4e      	ldr	r3, [pc, #312]	; (8005f5c <etharp_query+0x194>)
 8005e24:	440b      	add	r3, r1
 8005e26:	f04f 0901 	mov.w	r9, #1
 8005e2a:	f883 9014 	strb.w	r9, [r3, #20]
    arp_table[i].netif = netif;
 8005e2e:	609e      	str	r6, [r3, #8]
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8005e30:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8005e34:	00da      	lsls	r2, r3, #3
 8005e36:	4b49      	ldr	r3, [pc, #292]	; (8005f5c <etharp_query+0x194>)
 8005e38:	4413      	add	r3, r2
 8005e3a:	7d1b      	ldrb	r3, [r3, #20]
 8005e3c:	b1ab      	cbz	r3, 8005e6a <etharp_query+0xa2>
  if (is_new_entry || (q == NULL)) {
 8005e3e:	f1b9 0f00 	cmp.w	r9, #0
 8005e42:	d11a      	bne.n	8005e7a <etharp_query+0xb2>
 8005e44:	b1cf      	cbz	r7, 8005e7a <etharp_query+0xb2>
  err_t result = ERR_MEM;
 8005e46:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
  LWIP_ASSERT("q != NULL", q != NULL);
 8005e4a:	b1f7      	cbz	r7, 8005e8a <etharp_query+0xc2>
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8005e4c:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8005e50:	00da      	lsls	r2, r3, #3
 8005e52:	4b42      	ldr	r3, [pc, #264]	; (8005f5c <etharp_query+0x194>)
 8005e54:	4413      	add	r3, r2
 8005e56:	7d1b      	ldrb	r3, [r3, #20]
 8005e58:	2b01      	cmp	r3, #1
 8005e5a:	d81e      	bhi.n	8005e9a <etharp_query+0xd2>
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8005e5c:	2b01      	cmp	r3, #1
 8005e5e:	d12c      	bne.n	8005eba <etharp_query+0xf2>
 8005e60:	463c      	mov	r4, r7
 8005e62:	e032      	b.n	8005eca <etharp_query+0x102>
  int is_new_entry = 0;
 8005e64:	f04f 0900 	mov.w	r9, #0
 8005e68:	e7e2      	b.n	8005e30 <etharp_query+0x68>
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8005e6a:	4b3d      	ldr	r3, [pc, #244]	; (8005f60 <etharp_query+0x198>)
 8005e6c:	f240 32c9 	movw	r2, #969	; 0x3c9
 8005e70:	493c      	ldr	r1, [pc, #240]	; (8005f64 <etharp_query+0x19c>)
 8005e72:	483d      	ldr	r0, [pc, #244]	; (8005f68 <etharp_query+0x1a0>)
 8005e74:	f006 febb 	bl	800cbee <iprintf>
 8005e78:	e7e1      	b.n	8005e3e <etharp_query+0x76>
    result = etharp_request(netif, ipaddr);
 8005e7a:	4621      	mov	r1, r4
 8005e7c:	4630      	mov	r0, r6
 8005e7e:	f7ff fee9 	bl	8005c54 <etharp_request>
 8005e82:	4604      	mov	r4, r0
    if (q == NULL) {
 8005e84:	2f00      	cmp	r7, #0
 8005e86:	d1e0      	bne.n	8005e4a <etharp_query+0x82>
 8005e88:	e017      	b.n	8005eba <etharp_query+0xf2>
  LWIP_ASSERT("q != NULL", q != NULL);
 8005e8a:	4b35      	ldr	r3, [pc, #212]	; (8005f60 <etharp_query+0x198>)
 8005e8c:	f240 32db 	movw	r2, #987	; 0x3db
 8005e90:	4936      	ldr	r1, [pc, #216]	; (8005f6c <etharp_query+0x1a4>)
 8005e92:	4835      	ldr	r0, [pc, #212]	; (8005f68 <etharp_query+0x1a0>)
 8005e94:	f006 feab 	bl	800cbee <iprintf>
 8005e98:	e7d8      	b.n	8005e4c <etharp_query+0x84>
    ETHARP_SET_HINT(netif, i);
 8005e9a:	4b35      	ldr	r3, [pc, #212]	; (8005f70 <etharp_query+0x1a8>)
 8005e9c:	701d      	strb	r5, [r3, #0]
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8005e9e:	4613      	mov	r3, r2
 8005ea0:	3308      	adds	r3, #8
 8005ea2:	4a2e      	ldr	r2, [pc, #184]	; (8005f5c <etharp_query+0x194>)
 8005ea4:	4413      	add	r3, r2
 8005ea6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005eaa:	9200      	str	r2, [sp, #0]
 8005eac:	3304      	adds	r3, #4
 8005eae:	4642      	mov	r2, r8
 8005eb0:	4639      	mov	r1, r7
 8005eb2:	4630      	mov	r0, r6
 8005eb4:	f005 ff74 	bl	800bda0 <ethernet_output>
 8005eb8:	4604      	mov	r4, r0
}
 8005eba:	4620      	mov	r0, r4
 8005ebc:	b003      	add	sp, #12
 8005ebe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (p->type != PBUF_ROM) {
 8005ec2:	7b23      	ldrb	r3, [r4, #12]
 8005ec4:	2b01      	cmp	r3, #1
 8005ec6:	d122      	bne.n	8005f0e <etharp_query+0x146>
      p = p->next;
 8005ec8:	6824      	ldr	r4, [r4, #0]
    while (p) {
 8005eca:	b174      	cbz	r4, 8005eea <etharp_query+0x122>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8005ecc:	8962      	ldrh	r2, [r4, #10]
 8005ece:	8923      	ldrh	r3, [r4, #8]
 8005ed0:	429a      	cmp	r2, r3
 8005ed2:	d1f6      	bne.n	8005ec2 <etharp_query+0xfa>
 8005ed4:	6823      	ldr	r3, [r4, #0]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d0f3      	beq.n	8005ec2 <etharp_query+0xfa>
 8005eda:	4b21      	ldr	r3, [pc, #132]	; (8005f60 <etharp_query+0x198>)
 8005edc:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 8005ee0:	4924      	ldr	r1, [pc, #144]	; (8005f74 <etharp_query+0x1ac>)
 8005ee2:	4821      	ldr	r0, [pc, #132]	; (8005f68 <etharp_query+0x1a0>)
 8005ee4:	f006 fe83 	bl	800cbee <iprintf>
 8005ee8:	e7eb      	b.n	8005ec2 <etharp_query+0xfa>
    int copy_needed = 0;
 8005eea:	2300      	movs	r3, #0
    if (copy_needed) {
 8005eec:	b18b      	cbz	r3, 8005f12 <etharp_query+0x14a>
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 8005eee:	2200      	movs	r2, #0
 8005ef0:	8921      	ldrh	r1, [r4, #8]
 8005ef2:	2002      	movs	r0, #2
 8005ef4:	f001 fd94 	bl	8007a20 <pbuf_alloc>
      if (p != NULL) {
 8005ef8:	4604      	mov	r4, r0
 8005efa:	b170      	cbz	r0, 8005f1a <etharp_query+0x152>
        if (pbuf_copy(p, q) != ERR_OK) {
 8005efc:	4639      	mov	r1, r7
 8005efe:	f001 ff49 	bl	8007d94 <pbuf_copy>
 8005f02:	b150      	cbz	r0, 8005f1a <etharp_query+0x152>
          pbuf_free(p);
 8005f04:	4620      	mov	r0, r4
 8005f06:	f001 fd1f 	bl	8007948 <pbuf_free>
          p = NULL;
 8005f0a:	2400      	movs	r4, #0
 8005f0c:	e005      	b.n	8005f1a <etharp_query+0x152>
        copy_needed = 1;
 8005f0e:	2301      	movs	r3, #1
 8005f10:	e7ec      	b.n	8005eec <etharp_query+0x124>
      pbuf_ref(p);
 8005f12:	4638      	mov	r0, r7
 8005f14:	f001 fee8 	bl	8007ce8 <pbuf_ref>
      p = q;
 8005f18:	463c      	mov	r4, r7
    if (p != NULL) {
 8005f1a:	b1e4      	cbz	r4, 8005f56 <etharp_query+0x18e>
      if (arp_table[i].q != NULL) {
 8005f1c:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 8005f20:	00d3      	lsls	r3, r2, #3
 8005f22:	4a0e      	ldr	r2, [pc, #56]	; (8005f5c <etharp_query+0x194>)
 8005f24:	58d0      	ldr	r0, [r2, r3]
 8005f26:	b108      	cbz	r0, 8005f2c <etharp_query+0x164>
        pbuf_free(arp_table[i].q);
 8005f28:	f001 fd0e 	bl	8007948 <pbuf_free>
      arp_table[i].q = p;
 8005f2c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005f30:	00eb      	lsls	r3, r5, #3
 8005f32:	4a0a      	ldr	r2, [pc, #40]	; (8005f5c <etharp_query+0x194>)
 8005f34:	50d4      	str	r4, [r2, r3]
      result = ERR_OK;
 8005f36:	2400      	movs	r4, #0
 8005f38:	e7bf      	b.n	8005eba <etharp_query+0xf2>
    return ERR_ARG;
 8005f3a:	f06f 040f 	mvn.w	r4, #15
 8005f3e:	e7bc      	b.n	8005eba <etharp_query+0xf2>
 8005f40:	f06f 040f 	mvn.w	r4, #15
 8005f44:	e7b9      	b.n	8005eba <etharp_query+0xf2>
 8005f46:	f06f 040f 	mvn.w	r4, #15
 8005f4a:	e7b6      	b.n	8005eba <etharp_query+0xf2>
 8005f4c:	f06f 040f 	mvn.w	r4, #15
 8005f50:	e7b3      	b.n	8005eba <etharp_query+0xf2>
    return (err_t)i;
 8005f52:	462c      	mov	r4, r5
 8005f54:	e7b1      	b.n	8005eba <etharp_query+0xf2>
      result = ERR_MEM;
 8005f56:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005f5a:	e7ae      	b.n	8005eba <etharp_query+0xf2>
 8005f5c:	20003e40 	.word	0x20003e40
 8005f60:	0800da38 	.word	0x0800da38
 8005f64:	0800db18 	.word	0x0800db18
 8005f68:	0800d378 	.word	0x0800d378
 8005f6c:	0800db40 	.word	0x0800db40
 8005f70:	20003f30 	.word	0x20003f30
 8005f74:	0800db4c 	.word	0x0800db4c

08005f78 <etharp_output>:
{
 8005f78:	b570      	push	{r4, r5, r6, lr}
 8005f7a:	b084      	sub	sp, #16
 8005f7c:	460e      	mov	r6, r1
 8005f7e:	4614      	mov	r4, r2
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8005f80:	4605      	mov	r5, r0
 8005f82:	2800      	cmp	r0, #0
 8005f84:	d02f      	beq.n	8005fe6 <etharp_output+0x6e>
  LWIP_ASSERT("q != NULL", q != NULL);
 8005f86:	2e00      	cmp	r6, #0
 8005f88:	d035      	beq.n	8005ff6 <etharp_output+0x7e>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8005f8a:	2c00      	cmp	r4, #0
 8005f8c:	d03b      	beq.n	8006006 <etharp_output+0x8e>
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8005f8e:	4629      	mov	r1, r5
 8005f90:	6820      	ldr	r0, [r4, #0]
 8005f92:	f000 fb58 	bl	8006646 <ip4_addr_isbroadcast_u32>
 8005f96:	2800      	cmp	r0, #0
 8005f98:	d17a      	bne.n	8006090 <etharp_output+0x118>
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8005f9a:	6823      	ldr	r3, [r4, #0]
 8005f9c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005fa0:	2ae0      	cmp	r2, #224	; 0xe0
 8005fa2:	d038      	beq.n	8006016 <etharp_output+0x9e>
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8005fa4:	686a      	ldr	r2, [r5, #4]
 8005fa6:	68a9      	ldr	r1, [r5, #8]
 8005fa8:	405a      	eors	r2, r3
 8005faa:	420a      	tst	r2, r1
 8005fac:	d009      	beq.n	8005fc2 <etharp_output+0x4a>
        !ip4_addr_islinklocal(ipaddr)) {
 8005fae:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8005fb0:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d004      	beq.n	8005fc2 <etharp_output+0x4a>
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8005fb8:	68eb      	ldr	r3, [r5, #12]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d074      	beq.n	80060a8 <etharp_output+0x130>
            dst_addr = netif_ip4_gw(netif);
 8005fbe:	f105 040c 	add.w	r4, r5, #12
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8005fc2:	4b3b      	ldr	r3, [pc, #236]	; (80060b0 <etharp_output+0x138>)
 8005fc4:	781a      	ldrb	r2, [r3, #0]
 8005fc6:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8005fca:	00d9      	lsls	r1, r3, #3
 8005fcc:	4b39      	ldr	r3, [pc, #228]	; (80060b4 <etharp_output+0x13c>)
 8005fce:	440b      	add	r3, r1
 8005fd0:	7d1b      	ldrb	r3, [r3, #20]
 8005fd2:	2b01      	cmp	r3, #1
 8005fd4:	d954      	bls.n	8006080 <etharp_output+0x108>
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8005fd6:	6820      	ldr	r0, [r4, #0]
 8005fd8:	4b36      	ldr	r3, [pc, #216]	; (80060b4 <etharp_output+0x13c>)
 8005fda:	440b      	add	r3, r1
 8005fdc:	685b      	ldr	r3, [r3, #4]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8005fde:	4298      	cmp	r0, r3
 8005fe0:	d02f      	beq.n	8006042 <etharp_output+0xca>
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	e034      	b.n	8006050 <etharp_output+0xd8>
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8005fe6:	4b34      	ldr	r3, [pc, #208]	; (80060b8 <etharp_output+0x140>)
 8005fe8:	f240 321b 	movw	r2, #795	; 0x31b
 8005fec:	4933      	ldr	r1, [pc, #204]	; (80060bc <etharp_output+0x144>)
 8005fee:	4834      	ldr	r0, [pc, #208]	; (80060c0 <etharp_output+0x148>)
 8005ff0:	f006 fdfd 	bl	800cbee <iprintf>
 8005ff4:	e7c7      	b.n	8005f86 <etharp_output+0xe>
  LWIP_ASSERT("q != NULL", q != NULL);
 8005ff6:	4b30      	ldr	r3, [pc, #192]	; (80060b8 <etharp_output+0x140>)
 8005ff8:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8005ffc:	4931      	ldr	r1, [pc, #196]	; (80060c4 <etharp_output+0x14c>)
 8005ffe:	4830      	ldr	r0, [pc, #192]	; (80060c0 <etharp_output+0x148>)
 8006000:	f006 fdf5 	bl	800cbee <iprintf>
 8006004:	e7c1      	b.n	8005f8a <etharp_output+0x12>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8006006:	4b2c      	ldr	r3, [pc, #176]	; (80060b8 <etharp_output+0x140>)
 8006008:	f240 321d 	movw	r2, #797	; 0x31d
 800600c:	492e      	ldr	r1, [pc, #184]	; (80060c8 <etharp_output+0x150>)
 800600e:	482c      	ldr	r0, [pc, #176]	; (80060c0 <etharp_output+0x148>)
 8006010:	f006 fded 	bl	800cbee <iprintf>
 8006014:	e7bb      	b.n	8005f8e <etharp_output+0x16>
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8006016:	2301      	movs	r3, #1
 8006018:	f88d 3008 	strb.w	r3, [sp, #8]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800601c:	2300      	movs	r3, #0
 800601e:	f88d 3009 	strb.w	r3, [sp, #9]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8006022:	235e      	movs	r3, #94	; 0x5e
 8006024:	f88d 300a 	strb.w	r3, [sp, #10]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8006028:	7863      	ldrb	r3, [r4, #1]
 800602a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800602e:	f88d 300b 	strb.w	r3, [sp, #11]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8006032:	78a3      	ldrb	r3, [r4, #2]
 8006034:	f88d 300c 	strb.w	r3, [sp, #12]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8006038:	78e3      	ldrb	r3, [r4, #3]
 800603a:	f88d 300d 	strb.w	r3, [sp, #13]
    dest = &mcastaddr;
 800603e:	ab02      	add	r3, sp, #8
 8006040:	e027      	b.n	8006092 <etharp_output+0x11a>
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8006042:	4631      	mov	r1, r6
 8006044:	4628      	mov	r0, r5
 8006046:	f7ff fe55 	bl	8005cf4 <etharp_output_to_arp_index>
 800604a:	e02b      	b.n	80060a4 <etharp_output+0x12c>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800604c:	3201      	adds	r2, #1
 800604e:	b252      	sxtb	r2, r2
 8006050:	2a09      	cmp	r2, #9
 8006052:	dc17      	bgt.n	8006084 <etharp_output+0x10c>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8006054:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8006058:	00d9      	lsls	r1, r3, #3
 800605a:	4b16      	ldr	r3, [pc, #88]	; (80060b4 <etharp_output+0x13c>)
 800605c:	440b      	add	r3, r1
 800605e:	7d1b      	ldrb	r3, [r3, #20]
 8006060:	2b01      	cmp	r3, #1
 8006062:	d9f3      	bls.n	800604c <etharp_output+0xd4>
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8006064:	6820      	ldr	r0, [r4, #0]
 8006066:	4b13      	ldr	r3, [pc, #76]	; (80060b4 <etharp_output+0x13c>)
 8006068:	440b      	add	r3, r1
 800606a:	685b      	ldr	r3, [r3, #4]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800606c:	4298      	cmp	r0, r3
 800606e:	d1ed      	bne.n	800604c <etharp_output+0xd4>
        ETHARP_SET_HINT(netif, i);
 8006070:	b2d2      	uxtb	r2, r2
 8006072:	4b0f      	ldr	r3, [pc, #60]	; (80060b0 <etharp_output+0x138>)
 8006074:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8006076:	4631      	mov	r1, r6
 8006078:	4628      	mov	r0, r5
 800607a:	f7ff fe3b 	bl	8005cf4 <etharp_output_to_arp_index>
 800607e:	e011      	b.n	80060a4 <etharp_output+0x12c>
 8006080:	2200      	movs	r2, #0
 8006082:	e7e5      	b.n	8006050 <etharp_output+0xd8>
    return etharp_query(netif, dst_addr, q);
 8006084:	4632      	mov	r2, r6
 8006086:	4621      	mov	r1, r4
 8006088:	4628      	mov	r0, r5
 800608a:	f7ff fe9d 	bl	8005dc8 <etharp_query>
 800608e:	e009      	b.n	80060a4 <etharp_output+0x12c>
    dest = (const struct eth_addr *)&ethbroadcast;
 8006090:	4b0e      	ldr	r3, [pc, #56]	; (80060cc <etharp_output+0x154>)
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 8006092:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006096:	9200      	str	r2, [sp, #0]
 8006098:	f105 0225 	add.w	r2, r5, #37	; 0x25
 800609c:	4631      	mov	r1, r6
 800609e:	4628      	mov	r0, r5
 80060a0:	f005 fe7e 	bl	800bda0 <ethernet_output>
}
 80060a4:	b004      	add	sp, #16
 80060a6:	bd70      	pop	{r4, r5, r6, pc}
            return ERR_RTE;
 80060a8:	f06f 0003 	mvn.w	r0, #3
 80060ac:	e7fa      	b.n	80060a4 <etharp_output+0x12c>
 80060ae:	bf00      	nop
 80060b0:	20003f30 	.word	0x20003f30
 80060b4:	20003e40 	.word	0x20003e40
 80060b8:	0800da38 	.word	0x0800da38
 80060bc:	0800db68 	.word	0x0800db68
 80060c0:	0800d378 	.word	0x0800d378
 80060c4:	0800db40 	.word	0x0800db40
 80060c8:	0800dac8 	.word	0x0800dac8
 80060cc:	0800f2b8 	.word	0x0800f2b8

080060d0 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80060d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060d4:	b086      	sub	sp, #24
 80060d6:	4606      	mov	r6, r0
 80060d8:	4688      	mov	r8, r1
 80060da:	4617      	mov	r7, r2

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80060dc:	2200      	movs	r2, #0
 80060de:	2124      	movs	r1, #36	; 0x24
 80060e0:	2001      	movs	r0, #1
 80060e2:	f001 fc9d 	bl	8007a20 <pbuf_alloc>
                 PBUF_RAM);
  if (q == NULL) {
 80060e6:	2800      	cmp	r0, #0
 80060e8:	d037      	beq.n	800615a <icmp_send_response+0x8a>
 80060ea:	4605      	mov	r5, r0
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80060ec:	8943      	ldrh	r3, [r0, #10]
 80060ee:	2b23      	cmp	r3, #35	; 0x23
 80060f0:	d936      	bls.n	8006160 <icmp_send_response+0x90>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80060f2:	f8d6 e004 	ldr.w	lr, [r6, #4]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80060f6:	686c      	ldr	r4, [r5, #4]
  icmphdr->type = type;
 80060f8:	f884 8000 	strb.w	r8, [r4]
  icmphdr->code = code;
 80060fc:	7067      	strb	r7, [r4, #1]
  icmphdr->id = 0;
 80060fe:	2300      	movs	r3, #0
 8006100:	7123      	strb	r3, [r4, #4]
 8006102:	7163      	strb	r3, [r4, #5]
  icmphdr->seqno = 0;
 8006104:	71a3      	strb	r3, [r4, #6]
 8006106:	71e3      	strb	r3, [r4, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8006108:	686f      	ldr	r7, [r5, #4]
 800610a:	6873      	ldr	r3, [r6, #4]
 800610c:	681e      	ldr	r6, [r3, #0]
 800610e:	6858      	ldr	r0, [r3, #4]
 8006110:	6899      	ldr	r1, [r3, #8]
 8006112:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 8006116:	60be      	str	r6, [r7, #8]
 8006118:	60f8      	str	r0, [r7, #12]
 800611a:	6139      	str	r1, [r7, #16]
 800611c:	f8c7 c014 	str.w	ip, [r7, #20]
 8006120:	691e      	ldr	r6, [r3, #16]
 8006122:	6958      	ldr	r0, [r3, #20]
 8006124:	6999      	ldr	r1, [r3, #24]
 8006126:	61be      	str	r6, [r7, #24]
 8006128:	61f8      	str	r0, [r7, #28]
 800612a:	6239      	str	r1, [r7, #32]
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800612c:	f8de 300c 	ldr.w	r3, [lr, #12]
 8006130:	a806      	add	r0, sp, #24
 8006132:	f840 3d04 	str.w	r3, [r0, #-4]!
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 8006136:	f000 f8cb 	bl	80062d0 <ip4_route>
#endif
  if (netif != NULL) {
 800613a:	b158      	cbz	r0, 8006154 <icmp_send_response+0x84>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800613c:	2100      	movs	r1, #0
 800613e:	70a1      	strb	r1, [r4, #2]
 8006140:	70e1      	strb	r1, [r4, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8006142:	9002      	str	r0, [sp, #8]
 8006144:	2301      	movs	r3, #1
 8006146:	9301      	str	r3, [sp, #4]
 8006148:	9100      	str	r1, [sp, #0]
 800614a:	23ff      	movs	r3, #255	; 0xff
 800614c:	aa05      	add	r2, sp, #20
 800614e:	4628      	mov	r0, r5
 8006150:	f000 fa64 	bl	800661c <ip4_output_if>
  }
  pbuf_free(q);
 8006154:	4628      	mov	r0, r5
 8006156:	f001 fbf7 	bl	8007948 <pbuf_free>
}
 800615a:	b006      	add	sp, #24
 800615c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8006160:	4b03      	ldr	r3, [pc, #12]	; (8006170 <icmp_send_response+0xa0>)
 8006162:	f44f 72b1 	mov.w	r2, #354	; 0x162
 8006166:	4903      	ldr	r1, [pc, #12]	; (8006174 <icmp_send_response+0xa4>)
 8006168:	4803      	ldr	r0, [pc, #12]	; (8006178 <icmp_send_response+0xa8>)
 800616a:	f006 fd40 	bl	800cbee <iprintf>
 800616e:	e7c0      	b.n	80060f2 <icmp_send_response+0x22>
 8006170:	0800dc80 	.word	0x0800dc80
 8006174:	0800dcb8 	.word	0x0800dcb8
 8006178:	0800d378 	.word	0x0800d378

0800617c <icmp_input>:
{
 800617c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006180:	b084      	sub	sp, #16
 8006182:	4605      	mov	r5, r0
  iphdr_in = ip4_current_header();
 8006184:	4b47      	ldr	r3, [pc, #284]	; (80062a4 <icmp_input+0x128>)
 8006186:	689e      	ldr	r6, [r3, #8]
  hlen = IPH_HL(iphdr_in) * 4;
 8006188:	7834      	ldrb	r4, [r6, #0]
 800618a:	f004 040f 	and.w	r4, r4, #15
 800618e:	00a4      	lsls	r4, r4, #2
  if (hlen < IP_HLEN) {
 8006190:	2c13      	cmp	r4, #19
 8006192:	d915      	bls.n	80061c0 <icmp_input+0x44>
 8006194:	460f      	mov	r7, r1
  if (p->len < sizeof(u16_t)*2) {
 8006196:	8943      	ldrh	r3, [r0, #10]
 8006198:	2b03      	cmp	r3, #3
 800619a:	d911      	bls.n	80061c0 <icmp_input+0x44>
  type = *((u8_t *)p->payload);
 800619c:	6843      	ldr	r3, [r0, #4]
 800619e:	781b      	ldrb	r3, [r3, #0]
  switch (type) {
 80061a0:	2b08      	cmp	r3, #8
 80061a2:	d15d      	bne.n	8006260 <icmp_input+0xe4>
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80061a4:	4b3f      	ldr	r3, [pc, #252]	; (80062a4 <icmp_input+0x128>)
 80061a6:	6958      	ldr	r0, [r3, #20]
 80061a8:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 80061ac:	2be0      	cmp	r3, #224	; 0xe0
 80061ae:	d023      	beq.n	80061f8 <icmp_input+0x7c>
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80061b0:	4b3c      	ldr	r3, [pc, #240]	; (80062a4 <icmp_input+0x128>)
 80061b2:	6819      	ldr	r1, [r3, #0]
 80061b4:	f000 fa47 	bl	8006646 <ip4_addr_isbroadcast_u32>
 80061b8:	b9f0      	cbnz	r0, 80061f8 <icmp_input+0x7c>
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80061ba:	892b      	ldrh	r3, [r5, #8]
 80061bc:	2b07      	cmp	r3, #7
 80061be:	d805      	bhi.n	80061cc <icmp_input+0x50>
  pbuf_free(p);
 80061c0:	4628      	mov	r0, r5
 80061c2:	f001 fbc1 	bl	8007948 <pbuf_free>
}
 80061c6:	b004      	add	sp, #16
 80061c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 80061cc:	f104 010e 	add.w	r1, r4, #14
 80061d0:	4628      	mov	r0, r5
 80061d2:	f001 fbaf 	bl	8007934 <pbuf_header>
 80061d6:	b3a8      	cbz	r0, 8006244 <icmp_input+0xc8>
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 80061d8:	8929      	ldrh	r1, [r5, #8]
 80061da:	4421      	add	r1, r4
 80061dc:	2200      	movs	r2, #0
 80061de:	b289      	uxth	r1, r1
 80061e0:	2002      	movs	r0, #2
 80061e2:	f001 fc1d 	bl	8007a20 <pbuf_alloc>
      if (r == NULL) {
 80061e6:	4680      	mov	r8, r0
 80061e8:	b130      	cbz	r0, 80061f8 <icmp_input+0x7c>
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80061ea:	8942      	ldrh	r2, [r0, #10]
 80061ec:	f104 0308 	add.w	r3, r4, #8
 80061f0:	429a      	cmp	r2, r3
 80061f2:	d205      	bcs.n	8006200 <icmp_input+0x84>
        pbuf_free(r);
 80061f4:	f001 fba8 	bl	8007948 <pbuf_free>
  pbuf_free(p);
 80061f8:	4628      	mov	r0, r5
 80061fa:	f001 fba5 	bl	8007948 <pbuf_free>
  return;
 80061fe:	e7e2      	b.n	80061c6 <icmp_input+0x4a>
      MEMCPY(r->payload, iphdr_in, hlen);
 8006200:	4622      	mov	r2, r4
 8006202:	4631      	mov	r1, r6
 8006204:	6840      	ldr	r0, [r0, #4]
 8006206:	f006 fe5e 	bl	800cec6 <memcpy>
      if (pbuf_header(r, (s16_t)-hlen)) {
 800620a:	4261      	negs	r1, r4
 800620c:	4640      	mov	r0, r8
 800620e:	f001 fb91 	bl	8007934 <pbuf_header>
 8006212:	b148      	cbz	r0, 8006228 <icmp_input+0xac>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8006214:	4b24      	ldr	r3, [pc, #144]	; (80062a8 <icmp_input+0x12c>)
 8006216:	22af      	movs	r2, #175	; 0xaf
 8006218:	4924      	ldr	r1, [pc, #144]	; (80062ac <icmp_input+0x130>)
 800621a:	4825      	ldr	r0, [pc, #148]	; (80062b0 <icmp_input+0x134>)
 800621c:	f006 fce7 	bl	800cbee <iprintf>
        pbuf_free(r);
 8006220:	4640      	mov	r0, r8
 8006222:	f001 fb91 	bl	8007948 <pbuf_free>
        goto icmperr;
 8006226:	e7e7      	b.n	80061f8 <icmp_input+0x7c>
      if (pbuf_copy(r, p) != ERR_OK) {
 8006228:	4629      	mov	r1, r5
 800622a:	4640      	mov	r0, r8
 800622c:	f001 fdb2 	bl	8007d94 <pbuf_copy>
 8006230:	b118      	cbz	r0, 800623a <icmp_input+0xbe>
        pbuf_free(r);
 8006232:	4640      	mov	r0, r8
 8006234:	f001 fb88 	bl	8007948 <pbuf_free>
        goto icmperr;
 8006238:	e7de      	b.n	80061f8 <icmp_input+0x7c>
      pbuf_free(p);
 800623a:	4628      	mov	r0, r5
 800623c:	f001 fb84 	bl	8007948 <pbuf_free>
      p = r;
 8006240:	4645      	mov	r5, r8
 8006242:	e007      	b.n	8006254 <icmp_input+0xd8>
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 8006244:	f5c4 417f 	rsb	r1, r4, #65280	; 0xff00
 8006248:	31f2      	adds	r1, #242	; 0xf2
 800624a:	b209      	sxth	r1, r1
 800624c:	4628      	mov	r0, r5
 800624e:	f001 fb71 	bl	8007934 <pbuf_header>
 8006252:	b948      	cbnz	r0, 8006268 <icmp_input+0xec>
    iecho = (struct icmp_echo_hdr *)p->payload;
 8006254:	686e      	ldr	r6, [r5, #4]
    if (pbuf_header(p, (s16_t)hlen)) {
 8006256:	4621      	mov	r1, r4
 8006258:	4628      	mov	r0, r5
 800625a:	f001 fb6b 	bl	8007934 <pbuf_header>
 800625e:	b150      	cbz	r0, 8006276 <icmp_input+0xfa>
  pbuf_free(p);
 8006260:	4628      	mov	r0, r5
 8006262:	f001 fb71 	bl	8007948 <pbuf_free>
  return;
 8006266:	e7ae      	b.n	80061c6 <icmp_input+0x4a>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8006268:	4b0f      	ldr	r3, [pc, #60]	; (80062a8 <icmp_input+0x12c>)
 800626a:	22c0      	movs	r2, #192	; 0xc0
 800626c:	4911      	ldr	r1, [pc, #68]	; (80062b4 <icmp_input+0x138>)
 800626e:	4810      	ldr	r0, [pc, #64]	; (80062b0 <icmp_input+0x134>)
 8006270:	f006 fcbd 	bl	800cbee <iprintf>
        goto icmperr;
 8006274:	e7c0      	b.n	80061f8 <icmp_input+0x7c>
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 8006276:	6868      	ldr	r0, [r5, #4]
      ip4_addr_copy(iphdr->src, *src);
 8006278:	490a      	ldr	r1, [pc, #40]	; (80062a4 <icmp_input+0x128>)
 800627a:	694b      	ldr	r3, [r1, #20]
 800627c:	60c3      	str	r3, [r0, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800627e:	690b      	ldr	r3, [r1, #16]
 8006280:	6103      	str	r3, [r0, #16]
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 8006282:	2200      	movs	r2, #0
 8006284:	7032      	strb	r2, [r6, #0]
      iecho->chksum = 0;
 8006286:	70b2      	strb	r2, [r6, #2]
 8006288:	70f2      	strb	r2, [r6, #3]
      IPH_TTL_SET(iphdr, ICMP_TTL);
 800628a:	23ff      	movs	r3, #255	; 0xff
 800628c:	7203      	strb	r3, [r0, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 800628e:	7282      	strb	r2, [r0, #10]
 8006290:	72c2      	strb	r2, [r0, #11]
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8006292:	9702      	str	r7, [sp, #8]
 8006294:	2001      	movs	r0, #1
 8006296:	9001      	str	r0, [sp, #4]
 8006298:	9200      	str	r2, [sp, #0]
 800629a:	3114      	adds	r1, #20
 800629c:	4628      	mov	r0, r5
 800629e:	f000 f9bd 	bl	800661c <ip4_output_if>
 80062a2:	e7dd      	b.n	8006260 <icmp_input+0xe4>
 80062a4:	2000426c 	.word	0x2000426c
 80062a8:	0800dc80 	.word	0x0800dc80
 80062ac:	0800dc14 	.word	0x0800dc14
 80062b0:	0800d378 	.word	0x0800d378
 80062b4:	0800dc4c 	.word	0x0800dc4c

080062b8 <icmp_dest_unreach>:
{
 80062b8:	b508      	push	{r3, lr}
  icmp_send_response(p, ICMP_DUR, t);
 80062ba:	460a      	mov	r2, r1
 80062bc:	2103      	movs	r1, #3
 80062be:	f7ff ff07 	bl	80060d0 <icmp_send_response>
 80062c2:	bd08      	pop	{r3, pc}

080062c4 <icmp_time_exceeded>:
{
 80062c4:	b508      	push	{r3, lr}
  icmp_send_response(p, ICMP_TE, t);
 80062c6:	460a      	mov	r2, r1
 80062c8:	210b      	movs	r1, #11
 80062ca:	f7ff ff01 	bl	80060d0 <icmp_send_response>
 80062ce:	bd08      	pop	{r3, pc}

080062d0 <ip4_route>:
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 80062d0:	4b25      	ldr	r3, [pc, #148]	; (8006368 <ip4_route+0x98>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	e02b      	b.n	800632e <ip4_route+0x5e>
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	b1ab      	cbz	r3, 8006306 <ip4_route+0x36>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80062da:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 80062de:	f002 0105 	and.w	r1, r2, #5
 80062e2:	2905      	cmp	r1, #5
 80062e4:	d1f7      	bne.n	80062d6 <ip4_route+0x6>
 80062e6:	6859      	ldr	r1, [r3, #4]
 80062e8:	2900      	cmp	r1, #0
 80062ea:	d0f4      	beq.n	80062d6 <ip4_route+0x6>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80062ec:	6804      	ldr	r4, [r0, #0]
 80062ee:	689d      	ldr	r5, [r3, #8]
 80062f0:	4061      	eors	r1, r4
 80062f2:	4229      	tst	r1, r5
 80062f4:	d016      	beq.n	8006324 <ip4_route+0x54>
        /* return netif on which to forward IP packet */
        return netif;
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80062f6:	f012 0f02 	tst.w	r2, #2
 80062fa:	d1ec      	bne.n	80062d6 <ip4_route+0x6>
 80062fc:	68da      	ldr	r2, [r3, #12]
 80062fe:	4294      	cmp	r4, r2
 8006300:	d1e9      	bne.n	80062d6 <ip4_route+0x6>
        /* return netif on which to forward IP packet */
        return netif;
 8006302:	4618      	mov	r0, r3
 8006304:	e00a      	b.n	800631c <ip4_route+0x4c>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8006306:	4a19      	ldr	r2, [pc, #100]	; (800636c <ip4_route+0x9c>)
 8006308:	6810      	ldr	r0, [r2, #0]
 800630a:	b138      	cbz	r0, 800631c <ip4_route+0x4c>
 800630c:	f890 202b 	ldrb.w	r2, [r0, #43]	; 0x2b
 8006310:	f002 0205 	and.w	r2, r2, #5
 8006314:	2a05      	cmp	r2, #5
 8006316:	d107      	bne.n	8006328 <ip4_route+0x58>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
 8006318:	6842      	ldr	r2, [r0, #4]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800631a:	b10a      	cbz	r2, 8006320 <ip4_route+0x50>
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
  }

  return netif_default;
}
 800631c:	bc30      	pop	{r4, r5}
 800631e:	4770      	bx	lr
    return NULL;
 8006320:	4618      	mov	r0, r3
 8006322:	e7fb      	b.n	800631c <ip4_route+0x4c>
        return netif;
 8006324:	4618      	mov	r0, r3
 8006326:	e7f9      	b.n	800631c <ip4_route+0x4c>
    return NULL;
 8006328:	4618      	mov	r0, r3
 800632a:	e7f7      	b.n	800631c <ip4_route+0x4c>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	b153      	cbz	r3, 8006346 <ip4_route+0x76>
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8006330:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 8006334:	f002 0105 	and.w	r1, r2, #5
 8006338:	2905      	cmp	r1, #5
 800633a:	d1f7      	bne.n	800632c <ip4_route+0x5c>
 800633c:	6859      	ldr	r1, [r3, #4]
 800633e:	2900      	cmp	r1, #0
 8006340:	d0f4      	beq.n	800632c <ip4_route+0x5c>
{
 8006342:	b430      	push	{r4, r5}
 8006344:	e7d2      	b.n	80062ec <ip4_route+0x1c>
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8006346:	4a09      	ldr	r2, [pc, #36]	; (800636c <ip4_route+0x9c>)
 8006348:	6810      	ldr	r0, [r2, #0]
 800634a:	2800      	cmp	r0, #0
 800634c:	d0e7      	beq.n	800631e <ip4_route+0x4e>
 800634e:	f890 202b 	ldrb.w	r2, [r0, #43]	; 0x2b
 8006352:	f002 0205 	and.w	r2, r2, #5
 8006356:	2a05      	cmp	r2, #5
 8006358:	d104      	bne.n	8006364 <ip4_route+0x94>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
 800635a:	6842      	ldr	r2, [r0, #4]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800635c:	2a00      	cmp	r2, #0
 800635e:	d1de      	bne.n	800631e <ip4_route+0x4e>
    return NULL;
 8006360:	4618      	mov	r0, r3
 8006362:	4770      	bx	lr
 8006364:	4618      	mov	r0, r3
 8006366:	4770      	bx	lr
 8006368:	2000796c 	.word	0x2000796c
 800636c:	20007970 	.word	0x20007970

08006370 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8006370:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006374:	4605      	mov	r5, r0

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8006376:	f8d0 8004 	ldr.w	r8, [r0, #4]
  if (IPH_V(iphdr) != 4) {
 800637a:	f898 3000 	ldrb.w	r3, [r8]
 800637e:	091a      	lsrs	r2, r3, #4
 8006380:	2a04      	cmp	r2, #4
 8006382:	d004      	beq.n	800638e <ip4_input+0x1e>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8006384:	f001 fae0 	bl	8007948 <pbuf_free>
  ip_data.current_ip_header_tot_len = 0;
  ip4_addr_set_any(ip4_current_src_addr());
  ip4_addr_set_any(ip4_current_dest_addr());

  return ERR_OK;
}
 8006388:	2000      	movs	r0, #0
 800638a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800638e:	460f      	mov	r7, r1
  iphdr_hlen = IPH_HL(iphdr);
 8006390:	f003 030f 	and.w	r3, r3, #15
  iphdr_hlen *= 4;
 8006394:	009e      	lsls	r6, r3, #2
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8006396:	f8b8 0002 	ldrh.w	r0, [r8, #2]
 800639a:	f7ff f9ef 	bl	800577c <lwip_htons>
 800639e:	4604      	mov	r4, r0
  if (iphdr_len < p->tot_len) {
 80063a0:	892b      	ldrh	r3, [r5, #8]
 80063a2:	4298      	cmp	r0, r3
 80063a4:	d316      	bcc.n	80063d4 <ip4_input+0x64>
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80063a6:	896b      	ldrh	r3, [r5, #10]
 80063a8:	429e      	cmp	r6, r3
 80063aa:	d818      	bhi.n	80063de <ip4_input+0x6e>
 80063ac:	892b      	ldrh	r3, [r5, #8]
 80063ae:	429c      	cmp	r4, r3
 80063b0:	d815      	bhi.n	80063de <ip4_input+0x6e>
 80063b2:	2e13      	cmp	r6, #19
 80063b4:	d913      	bls.n	80063de <ip4_input+0x6e>
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80063b6:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80063ba:	4a59      	ldr	r2, [pc, #356]	; (8006520 <ip4_input+0x1b0>)
 80063bc:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80063be:	f8d8 100c 	ldr.w	r1, [r8, #12]
 80063c2:	6111      	str	r1, [r2, #16]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80063c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80063c8:	2be0      	cmp	r3, #224	; 0xe0
 80063ca:	d00c      	beq.n	80063e6 <ip4_input+0x76>
 80063cc:	463c      	mov	r4, r7
 80063ce:	f04f 0901 	mov.w	r9, #1
 80063d2:	e015      	b.n	8006400 <ip4_input+0x90>
    pbuf_realloc(p, iphdr_len);
 80063d4:	4601      	mov	r1, r0
 80063d6:	4628      	mov	r0, r5
 80063d8:	f001 fc0a 	bl	8007bf0 <pbuf_realloc>
 80063dc:	e7e3      	b.n	80063a6 <ip4_input+0x36>
    pbuf_free(p);
 80063de:	4628      	mov	r0, r5
 80063e0:	f001 fab2 	bl	8007948 <pbuf_free>
    return ERR_OK;
 80063e4:	e7d0      	b.n	8006388 <ip4_input+0x18>
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80063e6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80063ea:	f013 0f01 	tst.w	r3, #1
 80063ee:	d024      	beq.n	800643a <ip4_input+0xca>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	bb23      	cbnz	r3, 800643e <ip4_input+0xce>
      netif = NULL;
 80063f4:	2400      	movs	r4, #0
 80063f6:	e025      	b.n	8006444 <ip4_input+0xd4>
        netif = netif->next;
 80063f8:	6824      	ldr	r4, [r4, #0]
      if (netif == inp) {
 80063fa:	42bc      	cmp	r4, r7
 80063fc:	d01b      	beq.n	8006436 <ip4_input+0xc6>
    } while (netif != NULL);
 80063fe:	b30c      	cbz	r4, 8006444 <ip4_input+0xd4>
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8006400:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 8006404:	f013 0f01 	tst.w	r3, #1
 8006408:	d009      	beq.n	800641e <ip4_input+0xae>
 800640a:	6863      	ldr	r3, [r4, #4]
 800640c:	b13b      	cbz	r3, 800641e <ip4_input+0xae>
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800640e:	4a44      	ldr	r2, [pc, #272]	; (8006520 <ip4_input+0x1b0>)
 8006410:	6950      	ldr	r0, [r2, #20]
 8006412:	4283      	cmp	r3, r0
 8006414:	d016      	beq.n	8006444 <ip4_input+0xd4>
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8006416:	4621      	mov	r1, r4
 8006418:	f000 f915 	bl	8006646 <ip4_addr_isbroadcast_u32>
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800641c:	b990      	cbnz	r0, 8006444 <ip4_input+0xd4>
      if (first) {
 800641e:	f1b9 0f00 	cmp.w	r9, #0
 8006422:	d0e9      	beq.n	80063f8 <ip4_input+0x88>
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 8006424:	4b3e      	ldr	r3, [pc, #248]	; (8006520 <ip4_input+0x1b0>)
 8006426:	7d1b      	ldrb	r3, [r3, #20]
 8006428:	2b7f      	cmp	r3, #127	; 0x7f
 800642a:	d00a      	beq.n	8006442 <ip4_input+0xd2>
        netif = netif_list;
 800642c:	4b3d      	ldr	r3, [pc, #244]	; (8006524 <ip4_input+0x1b4>)
 800642e:	681c      	ldr	r4, [r3, #0]
        first = 0;
 8006430:	f04f 0900 	mov.w	r9, #0
 8006434:	e7e1      	b.n	80063fa <ip4_input+0x8a>
        netif = netif->next;
 8006436:	6824      	ldr	r4, [r4, #0]
 8006438:	e7e1      	b.n	80063fe <ip4_input+0x8e>
      netif = NULL;
 800643a:	2400      	movs	r4, #0
 800643c:	e002      	b.n	8006444 <ip4_input+0xd4>
      netif = inp;
 800643e:	463c      	mov	r4, r7
 8006440:	e000      	b.n	8006444 <ip4_input+0xd4>
          netif = NULL;
 8006442:	2400      	movs	r4, #0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8006444:	4639      	mov	r1, r7
 8006446:	4b36      	ldr	r3, [pc, #216]	; (8006520 <ip4_input+0x1b0>)
 8006448:	6918      	ldr	r0, [r3, #16]
 800644a:	f000 f8fc 	bl	8006646 <ip4_addr_isbroadcast_u32>
 800644e:	2800      	cmp	r0, #0
 8006450:	d146      	bne.n	80064e0 <ip4_input+0x170>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8006452:	4b33      	ldr	r3, [pc, #204]	; (8006520 <ip4_input+0x1b0>)
 8006454:	691b      	ldr	r3, [r3, #16]
 8006456:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800645a:	2be0      	cmp	r3, #224	; 0xe0
 800645c:	d040      	beq.n	80064e0 <ip4_input+0x170>
  if (netif == NULL) {
 800645e:	2c00      	cmp	r4, #0
 8006460:	d042      	beq.n	80064e8 <ip4_input+0x178>
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8006462:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8006466:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800646a:	b29b      	uxth	r3, r3
 800646c:	b13b      	cbz	r3, 800647e <ip4_input+0x10e>
    p = ip4_reass(p);
 800646e:	4628      	mov	r0, r5
 8006470:	f000 fc02 	bl	8006c78 <ip4_reass>
    if (p == NULL) {
 8006474:	4605      	mov	r5, r0
 8006476:	2800      	cmp	r0, #0
 8006478:	d086      	beq.n	8006388 <ip4_input+0x18>
    iphdr = (struct ip_hdr *)p->payload;
 800647a:	f8d0 8004 	ldr.w	r8, [r0, #4]
  ip_data.current_netif = netif;
 800647e:	4a28      	ldr	r2, [pc, #160]	; (8006520 <ip4_input+0x1b0>)
 8006480:	6014      	str	r4, [r2, #0]
  ip_data.current_input_netif = inp;
 8006482:	6057      	str	r7, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8006484:	f8c2 8008 	str.w	r8, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 8006488:	f898 3000 	ldrb.w	r3, [r8]
 800648c:	f003 030f 	and.w	r3, r3, #15
 8006490:	009b      	lsls	r3, r3, #2
 8006492:	8193      	strh	r3, [r2, #12]
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 8006494:	4271      	negs	r1, r6
 8006496:	4628      	mov	r0, r5
 8006498:	f001 fa4c 	bl	8007934 <pbuf_header>
    switch (IPH_PROTO(iphdr)) {
 800649c:	f898 3009 	ldrb.w	r3, [r8, #9]
 80064a0:	2b06      	cmp	r3, #6
 80064a2:	d032      	beq.n	800650a <ip4_input+0x19a>
 80064a4:	2b11      	cmp	r3, #17
 80064a6:	d023      	beq.n	80064f0 <ip4_input+0x180>
 80064a8:	2b01      	cmp	r3, #1
 80064aa:	d033      	beq.n	8006514 <ip4_input+0x1a4>
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80064ac:	4621      	mov	r1, r4
 80064ae:	4b1c      	ldr	r3, [pc, #112]	; (8006520 <ip4_input+0x1b0>)
 80064b0:	6958      	ldr	r0, [r3, #20]
 80064b2:	f000 f8c8 	bl	8006646 <ip4_addr_isbroadcast_u32>
 80064b6:	b978      	cbnz	r0, 80064d8 <ip4_input+0x168>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80064b8:	4b19      	ldr	r3, [pc, #100]	; (8006520 <ip4_input+0x1b0>)
 80064ba:	695b      	ldr	r3, [r3, #20]
 80064bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80064c0:	2be0      	cmp	r3, #224	; 0xe0
 80064c2:	d009      	beq.n	80064d8 <ip4_input+0x168>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 80064c4:	4631      	mov	r1, r6
 80064c6:	4628      	mov	r0, r5
 80064c8:	f001 fa39 	bl	800793e <pbuf_header_force>
        p->payload = iphdr;
 80064cc:	f8c5 8004 	str.w	r8, [r5, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80064d0:	2102      	movs	r1, #2
 80064d2:	4628      	mov	r0, r5
 80064d4:	f7ff fef0 	bl	80062b8 <icmp_dest_unreach>
      pbuf_free(p);
 80064d8:	4628      	mov	r0, r5
 80064da:	f001 fa35 	bl	8007948 <pbuf_free>
 80064de:	e00b      	b.n	80064f8 <ip4_input+0x188>
      pbuf_free(p);
 80064e0:	4628      	mov	r0, r5
 80064e2:	f001 fa31 	bl	8007948 <pbuf_free>
      return ERR_OK;
 80064e6:	e74f      	b.n	8006388 <ip4_input+0x18>
    pbuf_free(p);
 80064e8:	4628      	mov	r0, r5
 80064ea:	f001 fa2d 	bl	8007948 <pbuf_free>
    return ERR_OK;
 80064ee:	e74b      	b.n	8006388 <ip4_input+0x18>
      udp_input(p, inp);
 80064f0:	4639      	mov	r1, r7
 80064f2:	4628      	mov	r0, r5
 80064f4:	f005 fa98 	bl	800ba28 <udp_input>
  ip_data.current_netif = NULL;
 80064f8:	4b09      	ldr	r3, [pc, #36]	; (8006520 <ip4_input+0x1b0>)
 80064fa:	2200      	movs	r2, #0
 80064fc:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80064fe:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8006500:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8006502:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8006504:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8006506:	615a      	str	r2, [r3, #20]
  return ERR_OK;
 8006508:	e73e      	b.n	8006388 <ip4_input+0x18>
      tcp_input(p, inp);
 800650a:	4639      	mov	r1, r7
 800650c:	4628      	mov	r0, r5
 800650e:	f003 fe6f 	bl	800a1f0 <tcp_input>
      break;
 8006512:	e7f1      	b.n	80064f8 <ip4_input+0x188>
      icmp_input(p, inp);
 8006514:	4639      	mov	r1, r7
 8006516:	4628      	mov	r0, r5
 8006518:	f7ff fe30 	bl	800617c <icmp_input>
      break;
 800651c:	e7ec      	b.n	80064f8 <ip4_input+0x188>
 800651e:	bf00      	nop
 8006520:	2000426c 	.word	0x2000426c
 8006524:	2000796c 	.word	0x2000796c

08006528 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 8006528:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800652c:	b083      	sub	sp, #12
 800652e:	4605      	mov	r5, r0
 8006530:	4689      	mov	r9, r1
 8006532:	4616      	mov	r6, r2
 8006534:	4698      	mov	r8, r3
 8006536:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8006538:	89c3      	ldrh	r3, [r0, #14]
 800653a:	2b01      	cmp	r3, #1
 800653c:	d006      	beq.n	800654c <ip4_output_if_src+0x24>
 800653e:	4b31      	ldr	r3, [pc, #196]	; (8006604 <ip4_output_if_src+0xdc>)
 8006540:	f240 3233 	movw	r2, #819	; 0x333
 8006544:	4930      	ldr	r1, [pc, #192]	; (8006608 <ip4_output_if_src+0xe0>)
 8006546:	4831      	ldr	r0, [pc, #196]	; (800660c <ip4_output_if_src+0xe4>)
 8006548:	f006 fb51 	bl	800cbee <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800654c:	2e00      	cmp	r6, #0
 800654e:	d04a      	beq.n	80065e6 <ip4_output_if_src+0xbe>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 8006550:	2114      	movs	r1, #20
 8006552:	4628      	mov	r0, r5
 8006554:	f001 f9ee 	bl	8007934 <pbuf_header>
 8006558:	2800      	cmp	r0, #0
 800655a:	d150      	bne.n	80065fe <ip4_output_if_src+0xd6>
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
    }

    iphdr = (struct ip_hdr *)p->payload;
 800655c:	686c      	ldr	r4, [r5, #4]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800655e:	896b      	ldrh	r3, [r5, #10]
 8006560:	2b13      	cmp	r3, #19
 8006562:	d934      	bls.n	80065ce <ip4_output_if_src+0xa6>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8006564:	f884 8008 	strb.w	r8, [r4, #8]
    IPH_PROTO_SET(iphdr, proto);
 8006568:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 800656c:	7263      	strb	r3, [r4, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800656e:	6833      	ldr	r3, [r6, #0]
 8006570:	6123      	str	r3, [r4, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8006572:	2345      	movs	r3, #69	; 0x45
 8006574:	7023      	strb	r3, [r4, #0]
    IPH_TOS_SET(iphdr, tos);
 8006576:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 800657a:	7063      	strb	r3, [r4, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800657c:	8928      	ldrh	r0, [r5, #8]
 800657e:	f7ff f8fd 	bl	800577c <lwip_htons>
 8006582:	8060      	strh	r0, [r4, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8006584:	2300      	movs	r3, #0
 8006586:	71a3      	strb	r3, [r4, #6]
 8006588:	71e3      	strb	r3, [r4, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800658a:	f8df 808c 	ldr.w	r8, [pc, #140]	; 8006618 <ip4_output_if_src+0xf0>
 800658e:	f8b8 0000 	ldrh.w	r0, [r8]
 8006592:	f7ff f8f3 	bl	800577c <lwip_htons>
 8006596:	80a0      	strh	r0, [r4, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8006598:	f8b8 3000 	ldrh.w	r3, [r8]
 800659c:	3301      	adds	r3, #1
 800659e:	f8a8 3000 	strh.w	r3, [r8]

    if (src == NULL) {
 80065a2:	f1b9 0f00 	cmp.w	r9, #0
 80065a6:	d01a      	beq.n	80065de <ip4_output_if_src+0xb6>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80065a8:	f8d9 3000 	ldr.w	r3, [r9]
 80065ac:	60e3      	str	r3, [r4, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80065ae:	2300      	movs	r3, #0
 80065b0:	72a3      	strb	r3, [r4, #10]
 80065b2:	72e3      	strb	r3, [r4, #11]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80065b4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80065b6:	b113      	cbz	r3, 80065be <ip4_output_if_src+0x96>
 80065b8:	892a      	ldrh	r2, [r5, #8]
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d319      	bcc.n	80065f2 <ip4_output_if_src+0xca>
    return ip4_frag(p, netif, dest);
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80065be:	697b      	ldr	r3, [r7, #20]
 80065c0:	4632      	mov	r2, r6
 80065c2:	4629      	mov	r1, r5
 80065c4:	4638      	mov	r0, r7
 80065c6:	4798      	blx	r3
}
 80065c8:	b003      	add	sp, #12
 80065ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80065ce:	4b0d      	ldr	r3, [pc, #52]	; (8006604 <ip4_output_if_src+0xdc>)
 80065d0:	f240 3261 	movw	r2, #865	; 0x361
 80065d4:	490e      	ldr	r1, [pc, #56]	; (8006610 <ip4_output_if_src+0xe8>)
 80065d6:	480d      	ldr	r0, [pc, #52]	; (800660c <ip4_output_if_src+0xe4>)
 80065d8:	f006 fb09 	bl	800cbee <iprintf>
 80065dc:	e7c2      	b.n	8006564 <ip4_output_if_src+0x3c>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80065de:	4b0d      	ldr	r3, [pc, #52]	; (8006614 <ip4_output_if_src+0xec>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	60e3      	str	r3, [r4, #12]
 80065e4:	e7e3      	b.n	80065ae <ip4_output_if_src+0x86>
    iphdr = (struct ip_hdr *)p->payload;
 80065e6:	686b      	ldr	r3, [r5, #4]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80065e8:	691b      	ldr	r3, [r3, #16]
 80065ea:	ae02      	add	r6, sp, #8
 80065ec:	f846 3d04 	str.w	r3, [r6, #-4]!
 80065f0:	e7e0      	b.n	80065b4 <ip4_output_if_src+0x8c>
    return ip4_frag(p, netif, dest);
 80065f2:	4632      	mov	r2, r6
 80065f4:	4639      	mov	r1, r7
 80065f6:	4628      	mov	r0, r5
 80065f8:	f000 fc12 	bl	8006e20 <ip4_frag>
 80065fc:	e7e4      	b.n	80065c8 <ip4_output_if_src+0xa0>
      return ERR_BUF;
 80065fe:	f06f 0001 	mvn.w	r0, #1
 8006602:	e7e1      	b.n	80065c8 <ip4_output_if_src+0xa0>
 8006604:	0800dce4 	.word	0x0800dce4
 8006608:	0800dd18 	.word	0x0800dd18
 800660c:	0800d378 	.word	0x0800d378
 8006610:	0800dd24 	.word	0x0800dd24
 8006614:	0800dd9c 	.word	0x0800dd9c
 8006618:	20003f32 	.word	0x20003f32

0800661c <ip4_output_if>:
{
 800661c:	b530      	push	{r4, r5, lr}
 800661e:	b085      	sub	sp, #20
 8006620:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  if (dest != LWIP_IP_HDRINCL) {
 8006622:	4615      	mov	r5, r2
 8006624:	b11a      	cbz	r2, 800662e <ip4_output_if+0x12>
    if (ip4_addr_isany(src)) {
 8006626:	b109      	cbz	r1, 800662c <ip4_output_if+0x10>
 8006628:	680a      	ldr	r2, [r1, #0]
 800662a:	b902      	cbnz	r2, 800662e <ip4_output_if+0x12>
      src_used = netif_ip4_addr(netif);
 800662c:	1d21      	adds	r1, r4, #4
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800662e:	9402      	str	r4, [sp, #8]
 8006630:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
 8006634:	9201      	str	r2, [sp, #4]
 8006636:	f89d 2020 	ldrb.w	r2, [sp, #32]
 800663a:	9200      	str	r2, [sp, #0]
 800663c:	462a      	mov	r2, r5
 800663e:	f7ff ff73 	bl	8006528 <ip4_output_if_src>
}
 8006642:	b005      	add	sp, #20
 8006644:	bd30      	pop	{r4, r5, pc}

08006646 <ip4_addr_isbroadcast_u32>:
{
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8006646:	1e43      	subs	r3, r0, #1
 8006648:	f113 0f03 	cmn.w	r3, #3
 800664c:	d811      	bhi.n	8006672 <ip4_addr_isbroadcast_u32+0x2c>
      (addr == IPADDR_ANY)) {
    return 1;
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800664e:	f891 302b 	ldrb.w	r3, [r1, #43]	; 0x2b
 8006652:	f013 0f02 	tst.w	r3, #2
 8006656:	d00e      	beq.n	8006676 <ip4_addr_isbroadcast_u32+0x30>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8006658:	684b      	ldr	r3, [r1, #4]
 800665a:	4298      	cmp	r0, r3
 800665c:	d00d      	beq.n	800667a <ip4_addr_isbroadcast_u32+0x34>
    return 0;
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800665e:	688a      	ldr	r2, [r1, #8]
 8006660:	4043      	eors	r3, r0
 8006662:	4213      	tst	r3, r2
 8006664:	d10b      	bne.n	800667e <ip4_addr_isbroadcast_u32+0x38>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8006666:	43d2      	mvns	r2, r2
 8006668:	ea32 0300 	bics.w	r3, r2, r0
 800666c:	d009      	beq.n	8006682 <ip4_addr_isbroadcast_u32+0x3c>
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
    /* => network broadcast address */
    return 1;
  } else {
    return 0;
 800666e:	2000      	movs	r0, #0
 8006670:	4770      	bx	lr
    return 1;
 8006672:	2001      	movs	r0, #1
 8006674:	4770      	bx	lr
    return 0;
 8006676:	2000      	movs	r0, #0
 8006678:	4770      	bx	lr
    return 0;
 800667a:	2000      	movs	r0, #0
 800667c:	4770      	bx	lr
    return 0;
 800667e:	2000      	movs	r0, #0
 8006680:	4770      	bx	lr
    return 1;
 8006682:	2001      	movs	r0, #1
  }
}
 8006684:	4770      	bx	lr
	...

08006688 <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
 8006688:	b570      	push	{r4, r5, r6, lr}
 800668a:	b084      	sub	sp, #16
 800668c:	460c      	mov	r4, r1
  u8_t base;
  char c;
  u32_t parts[4];
  u32_t *pp = parts;

  c = *cp;
 800668e:	7803      	ldrb	r3, [r0, #0]
  u32_t *pp = parts;
 8006690:	466e      	mov	r6, sp
 8006692:	e03b      	b.n	800670c <ip4addr_aton+0x84>
      return 0;
    }
    val = 0;
    base = 10;
    if (c == '0') {
      c = *++cp;
 8006694:	1c42      	adds	r2, r0, #1
 8006696:	7843      	ldrb	r3, [r0, #1]
      if (c == 'x' || c == 'X') {
 8006698:	2b78      	cmp	r3, #120	; 0x78
 800669a:	d004      	beq.n	80066a6 <ip4addr_aton+0x1e>
 800669c:	2b58      	cmp	r3, #88	; 0x58
 800669e:	d002      	beq.n	80066a6 <ip4addr_aton+0x1e>
      c = *++cp;
 80066a0:	4610      	mov	r0, r2
        base = 16;
        c = *++cp;
      } else {
        base = 8;
 80066a2:	2108      	movs	r1, #8
 80066a4:	e03a      	b.n	800671c <ip4addr_aton+0x94>
        c = *++cp;
 80066a6:	7883      	ldrb	r3, [r0, #2]
 80066a8:	3002      	adds	r0, #2
        base = 16;
 80066aa:	2110      	movs	r1, #16
        c = *++cp;
 80066ac:	e036      	b.n	800671c <ip4addr_aton+0x94>
    }
    for (;;) {
      if (isdigit(c)) {
        val = (val * base) + (u32_t)(c - '0');
        c = *++cp;
      } else if (base == 16 && isxdigit(c)) {
 80066ae:	2910      	cmp	r1, #16
 80066b0:	d123      	bne.n	80066fa <ip4addr_aton+0x72>
 80066b2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80066b6:	b2d2      	uxtb	r2, r2
 80066b8:	2a05      	cmp	r2, #5
 80066ba:	d904      	bls.n	80066c6 <ip4addr_aton+0x3e>
 80066bc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80066c0:	b2d2      	uxtb	r2, r2
 80066c2:	2a05      	cmp	r2, #5
 80066c4:	d819      	bhi.n	80066fa <ip4addr_aton+0x72>
        val = (val << 4) | (u32_t)(c + 10 - (islower(c) ? 'a' : 'A'));
 80066c6:	012d      	lsls	r5, r5, #4
 80066c8:	f103 020a 	add.w	r2, r3, #10
 80066cc:	3b61      	subs	r3, #97	; 0x61
 80066ce:	b2db      	uxtb	r3, r3
 80066d0:	2b19      	cmp	r3, #25
 80066d2:	d810      	bhi.n	80066f6 <ip4addr_aton+0x6e>
 80066d4:	2361      	movs	r3, #97	; 0x61
 80066d6:	1ad2      	subs	r2, r2, r3
 80066d8:	4315      	orrs	r5, r2
        c = *++cp;
 80066da:	f810 3f01 	ldrb.w	r3, [r0, #1]!
      if (isdigit(c)) {
 80066de:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80066e2:	b2d2      	uxtb	r2, r2
 80066e4:	2a09      	cmp	r2, #9
 80066e6:	d8e2      	bhi.n	80066ae <ip4addr_aton+0x26>
        val = (val * base) + (u32_t)(c - '0');
 80066e8:	fb05 3201 	mla	r2, r5, r1, r3
 80066ec:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
        c = *++cp;
 80066f0:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 80066f4:	e7f3      	b.n	80066de <ip4addr_aton+0x56>
        val = (val << 4) | (u32_t)(c + 10 - (islower(c) ? 'a' : 'A'));
 80066f6:	2341      	movs	r3, #65	; 0x41
 80066f8:	e7ed      	b.n	80066d6 <ip4addr_aton+0x4e>
      } else {
        break;
      }
    }
    if (c == '.') {
 80066fa:	2b2e      	cmp	r3, #46	; 0x2e
 80066fc:	d110      	bne.n	8006720 <ip4addr_aton+0x98>
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 80066fe:	ab03      	add	r3, sp, #12
 8006700:	429e      	cmp	r6, r3
 8006702:	d260      	bcs.n	80067c6 <ip4addr_aton+0x13e>
        return 0;
      }
      *pp++ = val;
 8006704:	6035      	str	r5, [r6, #0]
      c = *++cp;
 8006706:	7843      	ldrb	r3, [r0, #1]
      *pp++ = val;
 8006708:	3604      	adds	r6, #4
      c = *++cp;
 800670a:	3001      	adds	r0, #1
    if (!isdigit(c)) {
 800670c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8006710:	b2d2      	uxtb	r2, r2
 8006712:	2a09      	cmp	r2, #9
 8006714:	d855      	bhi.n	80067c2 <ip4addr_aton+0x13a>
    if (c == '0') {
 8006716:	2b30      	cmp	r3, #48	; 0x30
 8006718:	d0bc      	beq.n	8006694 <ip4addr_aton+0xc>
    base = 10;
 800671a:	210a      	movs	r1, #10
        base = 16;
 800671c:	2500      	movs	r5, #0
 800671e:	e7de      	b.n	80066de <ip4addr_aton+0x56>
    }
  }
  /*
   * Check for trailing characters.
   */
  if (c != '\0' && !isspace(c)) {
 8006720:	b16b      	cbz	r3, 800673e <ip4addr_aton+0xb6>
 8006722:	2b20      	cmp	r3, #32
 8006724:	d00b      	beq.n	800673e <ip4addr_aton+0xb6>
 8006726:	2b0c      	cmp	r3, #12
 8006728:	d009      	beq.n	800673e <ip4addr_aton+0xb6>
 800672a:	2b0a      	cmp	r3, #10
 800672c:	d007      	beq.n	800673e <ip4addr_aton+0xb6>
 800672e:	2b0d      	cmp	r3, #13
 8006730:	d005      	beq.n	800673e <ip4addr_aton+0xb6>
 8006732:	2b09      	cmp	r3, #9
 8006734:	d003      	beq.n	800673e <ip4addr_aton+0xb6>
 8006736:	2b0b      	cmp	r3, #11
 8006738:	d001      	beq.n	800673e <ip4addr_aton+0xb6>
    return 0;
 800673a:	2000      	movs	r0, #0
 800673c:	e044      	b.n	80067c8 <ip4addr_aton+0x140>
  }
  /*
   * Concoct the address according to
   * the number of parts specified.
   */
  switch (pp - parts + 1) {
 800673e:	4668      	mov	r0, sp
 8006740:	1a30      	subs	r0, r6, r0
 8006742:	1080      	asrs	r0, r0, #2
 8006744:	3001      	adds	r0, #1
 8006746:	2804      	cmp	r0, #4
 8006748:	d82d      	bhi.n	80067a6 <ip4addr_aton+0x11e>
 800674a:	e8df f000 	tbb	[pc, r0]
 800674e:	333d      	.short	0x333d
 8006750:	0c03      	.short	0x0c03
 8006752:	1a          	.byte	0x1a
 8006753:	00          	.byte	0x00

  case 1:             /* a -- 32 bits */
    break;

  case 2:             /* a.b -- 8.24 bits */
    if (val > 0xffffffUL) {
 8006754:	f1b5 7f80 	cmp.w	r5, #16777216	; 0x1000000
 8006758:	d238      	bcs.n	80067cc <ip4addr_aton+0x144>
      return 0;
    }
    if (parts[0] > 0xff) {
 800675a:	9b00      	ldr	r3, [sp, #0]
 800675c:	2bff      	cmp	r3, #255	; 0xff
 800675e:	d837      	bhi.n	80067d0 <ip4addr_aton+0x148>
      return 0;
    }
    val |= parts[0] << 24;
 8006760:	ea45 6503 	orr.w	r5, r5, r3, lsl #24
    break;
 8006764:	e026      	b.n	80067b4 <ip4addr_aton+0x12c>

  case 3:             /* a.b.c -- 8.8.16 bits */
    if (val > 0xffff) {
 8006766:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 800676a:	d233      	bcs.n	80067d4 <ip4addr_aton+0x14c>
      return 0;
    }
    if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
 800676c:	9a00      	ldr	r2, [sp, #0]
 800676e:	2aff      	cmp	r2, #255	; 0xff
 8006770:	d832      	bhi.n	80067d8 <ip4addr_aton+0x150>
 8006772:	9b01      	ldr	r3, [sp, #4]
 8006774:	2bff      	cmp	r3, #255	; 0xff
 8006776:	d831      	bhi.n	80067dc <ip4addr_aton+0x154>
      return 0;
    }
    val |= (parts[0] << 24) | (parts[1] << 16);
 8006778:	041b      	lsls	r3, r3, #16
 800677a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800677e:	431d      	orrs	r5, r3
    break;
 8006780:	e018      	b.n	80067b4 <ip4addr_aton+0x12c>

  case 4:             /* a.b.c.d -- 8.8.8.8 bits */
    if (val > 0xff) {
 8006782:	2dff      	cmp	r5, #255	; 0xff
 8006784:	d82c      	bhi.n	80067e0 <ip4addr_aton+0x158>
      return 0;
    }
    if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
 8006786:	9900      	ldr	r1, [sp, #0]
 8006788:	29ff      	cmp	r1, #255	; 0xff
 800678a:	d82b      	bhi.n	80067e4 <ip4addr_aton+0x15c>
 800678c:	9b01      	ldr	r3, [sp, #4]
 800678e:	2bff      	cmp	r3, #255	; 0xff
 8006790:	d82a      	bhi.n	80067e8 <ip4addr_aton+0x160>
 8006792:	9a02      	ldr	r2, [sp, #8]
 8006794:	2aff      	cmp	r2, #255	; 0xff
 8006796:	d829      	bhi.n	80067ec <ip4addr_aton+0x164>
      return 0;
    }
    val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 8006798:	041b      	lsls	r3, r3, #16
 800679a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800679e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80067a2:	431d      	orrs	r5, r3
    break;
 80067a4:	e006      	b.n	80067b4 <ip4addr_aton+0x12c>
  default:
    LWIP_ASSERT("unhandled", 0);
 80067a6:	4b13      	ldr	r3, [pc, #76]	; (80067f4 <ip4addr_aton+0x16c>)
 80067a8:	f240 1203 	movw	r2, #259	; 0x103
 80067ac:	4912      	ldr	r1, [pc, #72]	; (80067f8 <ip4addr_aton+0x170>)
 80067ae:	4813      	ldr	r0, [pc, #76]	; (80067fc <ip4addr_aton+0x174>)
 80067b0:	f006 fa1d 	bl	800cbee <iprintf>
    break;
  }
  if (addr) {
 80067b4:	b1e4      	cbz	r4, 80067f0 <ip4addr_aton+0x168>
    ip4_addr_set_u32(addr, lwip_htonl(val));
 80067b6:	4628      	mov	r0, r5
 80067b8:	f7fe ffe3 	bl	8005782 <lwip_htonl>
 80067bc:	6020      	str	r0, [r4, #0]
  }
  return 1;
 80067be:	2001      	movs	r0, #1
 80067c0:	e002      	b.n	80067c8 <ip4addr_aton+0x140>
      return 0;
 80067c2:	2000      	movs	r0, #0
 80067c4:	e000      	b.n	80067c8 <ip4addr_aton+0x140>
        return 0;
 80067c6:	2000      	movs	r0, #0
}
 80067c8:	b004      	add	sp, #16
 80067ca:	bd70      	pop	{r4, r5, r6, pc}
      return 0;
 80067cc:	2000      	movs	r0, #0
 80067ce:	e7fb      	b.n	80067c8 <ip4addr_aton+0x140>
      return 0;
 80067d0:	2000      	movs	r0, #0
 80067d2:	e7f9      	b.n	80067c8 <ip4addr_aton+0x140>
      return 0;
 80067d4:	2000      	movs	r0, #0
 80067d6:	e7f7      	b.n	80067c8 <ip4addr_aton+0x140>
      return 0;
 80067d8:	2000      	movs	r0, #0
 80067da:	e7f5      	b.n	80067c8 <ip4addr_aton+0x140>
 80067dc:	2000      	movs	r0, #0
 80067de:	e7f3      	b.n	80067c8 <ip4addr_aton+0x140>
      return 0;
 80067e0:	2000      	movs	r0, #0
 80067e2:	e7f1      	b.n	80067c8 <ip4addr_aton+0x140>
      return 0;
 80067e4:	2000      	movs	r0, #0
 80067e6:	e7ef      	b.n	80067c8 <ip4addr_aton+0x140>
 80067e8:	2000      	movs	r0, #0
 80067ea:	e7ed      	b.n	80067c8 <ip4addr_aton+0x140>
 80067ec:	2000      	movs	r0, #0
 80067ee:	e7eb      	b.n	80067c8 <ip4addr_aton+0x140>
  return 1;
 80067f0:	2001      	movs	r0, #1
 80067f2:	e7e9      	b.n	80067c8 <ip4addr_aton+0x140>
 80067f4:	0800dd54 	.word	0x0800dd54
 80067f8:	0800dd90 	.word	0x0800dd90
 80067fc:	0800d378 	.word	0x0800d378

08006800 <ipaddr_addr>:
{
 8006800:	b500      	push	{lr}
 8006802:	b083      	sub	sp, #12
  if (ip4addr_aton(cp, &val)) {
 8006804:	a901      	add	r1, sp, #4
 8006806:	f7ff ff3f 	bl	8006688 <ip4addr_aton>
 800680a:	b920      	cbnz	r0, 8006816 <ipaddr_addr+0x16>
  return (IPADDR_NONE);
 800680c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8006810:	b003      	add	sp, #12
 8006812:	f85d fb04 	ldr.w	pc, [sp], #4
    return ip4_addr_get_u32(&val);
 8006816:	9801      	ldr	r0, [sp, #4]
 8006818:	e7fa      	b.n	8006810 <ipaddr_addr+0x10>
	...

0800681c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800681c:	b538      	push	{r3, r4, r5, lr}
 800681e:	4604      	mov	r4, r0
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8006820:	4b0c      	ldr	r3, [pc, #48]	; (8006854 <ip_reass_dequeue_datagram+0x38>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4283      	cmp	r3, r0
 8006826:	d008      	beq.n	800683a <ip_reass_dequeue_datagram+0x1e>
 8006828:	460d      	mov	r5, r1
    /* it was the first in the list */
    reassdatagrams = ipr->next;
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800682a:	b151      	cbz	r1, 8006842 <ip_reass_dequeue_datagram+0x26>
    prev->next = ipr->next;
 800682c:	6823      	ldr	r3, [r4, #0]
 800682e:	602b      	str	r3, [r5, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8006830:	4621      	mov	r1, r4
 8006832:	2004      	movs	r0, #4
 8006834:	f000 feb2 	bl	800759c <memp_free>
 8006838:	bd38      	pop	{r3, r4, r5, pc}
    reassdatagrams = ipr->next;
 800683a:	6802      	ldr	r2, [r0, #0]
 800683c:	4b05      	ldr	r3, [pc, #20]	; (8006854 <ip_reass_dequeue_datagram+0x38>)
 800683e:	601a      	str	r2, [r3, #0]
 8006840:	e7f6      	b.n	8006830 <ip_reass_dequeue_datagram+0x14>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8006842:	4b05      	ldr	r3, [pc, #20]	; (8006858 <ip_reass_dequeue_datagram+0x3c>)
 8006844:	f240 1245 	movw	r2, #325	; 0x145
 8006848:	4904      	ldr	r1, [pc, #16]	; (800685c <ip_reass_dequeue_datagram+0x40>)
 800684a:	4805      	ldr	r0, [pc, #20]	; (8006860 <ip_reass_dequeue_datagram+0x44>)
 800684c:	f006 f9cf 	bl	800cbee <iprintf>
 8006850:	e7ec      	b.n	800682c <ip_reass_dequeue_datagram+0x10>
 8006852:	bf00      	nop
 8006854:	20003f38 	.word	0x20003f38
 8006858:	0800de90 	.word	0x0800de90
 800685c:	0800decc 	.word	0x0800decc
 8006860:	0800d378 	.word	0x0800d378

08006864 <ip_reass_free_complete_datagram>:
{
 8006864:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006868:	4680      	mov	r8, r0
 800686a:	4689      	mov	r9, r1
  LWIP_ASSERT("prev != ipr", prev != ipr);
 800686c:	4281      	cmp	r1, r0
 800686e:	d015      	beq.n	800689c <ip_reass_free_complete_datagram+0x38>
  if (prev != NULL) {
 8006870:	f1b9 0f00 	cmp.w	r9, #0
 8006874:	d009      	beq.n	800688a <ip_reass_free_complete_datagram+0x26>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8006876:	f8d9 3000 	ldr.w	r3, [r9]
 800687a:	4598      	cmp	r8, r3
 800687c:	d005      	beq.n	800688a <ip_reass_free_complete_datagram+0x26>
 800687e:	4b35      	ldr	r3, [pc, #212]	; (8006954 <ip_reass_free_complete_datagram+0xf0>)
 8006880:	22ad      	movs	r2, #173	; 0xad
 8006882:	4935      	ldr	r1, [pc, #212]	; (8006958 <ip_reass_free_complete_datagram+0xf4>)
 8006884:	4835      	ldr	r0, [pc, #212]	; (800695c <ip_reass_free_complete_datagram+0xf8>)
 8006886:	f006 f9b2 	bl	800cbee <iprintf>
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800688a:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800688e:	6863      	ldr	r3, [r4, #4]
  if (iprh->start == 0) {
 8006890:	889a      	ldrh	r2, [r3, #4]
 8006892:	b152      	cbz	r2, 80068aa <ip_reass_free_complete_datagram+0x46>
  u16_t pbufs_freed = 0;
 8006894:	2600      	movs	r6, #0
  p = ipr->p;
 8006896:	f8d8 4004 	ldr.w	r4, [r8, #4]
  while (p != NULL) {
 800689a:	e032      	b.n	8006902 <ip_reass_free_complete_datagram+0x9e>
  LWIP_ASSERT("prev != ipr", prev != ipr);
 800689c:	4b2d      	ldr	r3, [pc, #180]	; (8006954 <ip_reass_free_complete_datagram+0xf0>)
 800689e:	22ab      	movs	r2, #171	; 0xab
 80068a0:	492f      	ldr	r1, [pc, #188]	; (8006960 <ip_reass_free_complete_datagram+0xfc>)
 80068a2:	482e      	ldr	r0, [pc, #184]	; (800695c <ip_reass_free_complete_datagram+0xf8>)
 80068a4:	f006 f9a3 	bl	800cbee <iprintf>
 80068a8:	e7e2      	b.n	8006870 <ip_reass_free_complete_datagram+0xc>
    ipr->p = iprh->next_pbuf;
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f8c8 3004 	str.w	r3, [r8, #4]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80068b0:	4643      	mov	r3, r8
 80068b2:	6862      	ldr	r2, [r4, #4]
 80068b4:	f853 1f08 	ldr.w	r1, [r3, #8]!
 80068b8:	685e      	ldr	r6, [r3, #4]
 80068ba:	689d      	ldr	r5, [r3, #8]
 80068bc:	68d8      	ldr	r0, [r3, #12]
 80068be:	6011      	str	r1, [r2, #0]
 80068c0:	6056      	str	r6, [r2, #4]
 80068c2:	6095      	str	r5, [r2, #8]
 80068c4:	60d0      	str	r0, [r2, #12]
 80068c6:	6919      	ldr	r1, [r3, #16]
 80068c8:	6111      	str	r1, [r2, #16]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80068ca:	2101      	movs	r1, #1
 80068cc:	4620      	mov	r0, r4
 80068ce:	f7ff fcf9 	bl	80062c4 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80068d2:	4620      	mov	r0, r4
 80068d4:	f001 f9fe 	bl	8007cd4 <pbuf_clen>
 80068d8:	4606      	mov	r6, r0
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80068da:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 80068de:	da03      	bge.n	80068e8 <ip_reass_free_complete_datagram+0x84>
    pbuf_free(p);
 80068e0:	4620      	mov	r0, r4
 80068e2:	f001 f831 	bl	8007948 <pbuf_free>
 80068e6:	e7d6      	b.n	8006896 <ip_reass_free_complete_datagram+0x32>
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80068e8:	4b1a      	ldr	r3, [pc, #104]	; (8006954 <ip_reass_free_complete_datagram+0xf0>)
 80068ea:	22bc      	movs	r2, #188	; 0xbc
 80068ec:	491d      	ldr	r1, [pc, #116]	; (8006964 <ip_reass_free_complete_datagram+0x100>)
 80068ee:	481b      	ldr	r0, [pc, #108]	; (800695c <ip_reass_free_complete_datagram+0xf8>)
 80068f0:	f006 f97d 	bl	800cbee <iprintf>
 80068f4:	e7f4      	b.n	80068e0 <ip_reass_free_complete_datagram+0x7c>
    pbufs_freed += clen;
 80068f6:	4435      	add	r5, r6
 80068f8:	b2ae      	uxth	r6, r5
    pbuf_free(pcur);
 80068fa:	4620      	mov	r0, r4
 80068fc:	f001 f824 	bl	8007948 <pbuf_free>
    p = iprh->next_pbuf;
 8006900:	463c      	mov	r4, r7
  while (p != NULL) {
 8006902:	b184      	cbz	r4, 8006926 <ip_reass_free_complete_datagram+0xc2>
    iprh = (struct ip_reass_helper *)p->payload;
 8006904:	6863      	ldr	r3, [r4, #4]
    p = iprh->next_pbuf;
 8006906:	681f      	ldr	r7, [r3, #0]
    clen = pbuf_clen(pcur);
 8006908:	4620      	mov	r0, r4
 800690a:	f001 f9e3 	bl	8007cd4 <pbuf_clen>
 800690e:	4605      	mov	r5, r0
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8006910:	1833      	adds	r3, r6, r0
 8006912:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006916:	dbee      	blt.n	80068f6 <ip_reass_free_complete_datagram+0x92>
 8006918:	4b0e      	ldr	r3, [pc, #56]	; (8006954 <ip_reass_free_complete_datagram+0xf0>)
 800691a:	22cc      	movs	r2, #204	; 0xcc
 800691c:	4911      	ldr	r1, [pc, #68]	; (8006964 <ip_reass_free_complete_datagram+0x100>)
 800691e:	480f      	ldr	r0, [pc, #60]	; (800695c <ip_reass_free_complete_datagram+0xf8>)
 8006920:	f006 f965 	bl	800cbee <iprintf>
 8006924:	e7e7      	b.n	80068f6 <ip_reass_free_complete_datagram+0x92>
  ip_reass_dequeue_datagram(ipr, prev);
 8006926:	4649      	mov	r1, r9
 8006928:	4640      	mov	r0, r8
 800692a:	f7ff ff77 	bl	800681c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 800692e:	4b0e      	ldr	r3, [pc, #56]	; (8006968 <ip_reass_free_complete_datagram+0x104>)
 8006930:	881b      	ldrh	r3, [r3, #0]
 8006932:	429e      	cmp	r6, r3
 8006934:	d806      	bhi.n	8006944 <ip_reass_free_complete_datagram+0xe0>
  ip_reass_pbufcount -= pbufs_freed;
 8006936:	4a0c      	ldr	r2, [pc, #48]	; (8006968 <ip_reass_free_complete_datagram+0x104>)
 8006938:	8813      	ldrh	r3, [r2, #0]
 800693a:	1b9b      	subs	r3, r3, r6
 800693c:	8013      	strh	r3, [r2, #0]
}
 800693e:	4630      	mov	r0, r6
 8006940:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 8006944:	4b03      	ldr	r3, [pc, #12]	; (8006954 <ip_reass_free_complete_datagram+0xf0>)
 8006946:	22d2      	movs	r2, #210	; 0xd2
 8006948:	4908      	ldr	r1, [pc, #32]	; (800696c <ip_reass_free_complete_datagram+0x108>)
 800694a:	4804      	ldr	r0, [pc, #16]	; (800695c <ip_reass_free_complete_datagram+0xf8>)
 800694c:	f006 f94f 	bl	800cbee <iprintf>
 8006950:	e7f1      	b.n	8006936 <ip_reass_free_complete_datagram+0xd2>
 8006952:	bf00      	nop
 8006954:	0800de90 	.word	0x0800de90
 8006958:	0800def4 	.word	0x0800def4
 800695c:	0800d378 	.word	0x0800d378
 8006960:	0800dee8 	.word	0x0800dee8
 8006964:	0800df08 	.word	0x0800df08
 8006968:	20003f34 	.word	0x20003f34
 800696c:	0800df28 	.word	0x0800df28

08006970 <ip_reass_remove_oldest_datagram>:
{
 8006970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006974:	4605      	mov	r5, r0
 8006976:	4688      	mov	r8, r1
  int pbufs_freed = 0, pbufs_freed_current;
 8006978:	2600      	movs	r6, #0
 800697a:	e02a      	b.n	80069d2 <ip_reass_remove_oldest_datagram+0x62>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800697c:	699a      	ldr	r2, [r3, #24]
 800697e:	f8d5 c010 	ldr.w	ip, [r5, #16]
 8006982:	4562      	cmp	r2, ip
 8006984:	d110      	bne.n	80069a8 <ip_reass_remove_oldest_datagram+0x38>
 8006986:	f8b3 c00c 	ldrh.w	ip, [r3, #12]
 800698a:	88aa      	ldrh	r2, [r5, #4]
 800698c:	4594      	cmp	ip, r2
 800698e:	d10b      	bne.n	80069a8 <ip_reass_remove_oldest_datagram+0x38>
 8006990:	e001      	b.n	8006996 <ip_reass_remove_oldest_datagram+0x26>
          oldest_prev = prev;
 8006992:	4671      	mov	r1, lr
          oldest = r;
 8006994:	4618      	mov	r0, r3
      if (r->next != NULL) {
 8006996:	681a      	ldr	r2, [r3, #0]
 8006998:	b18a      	cbz	r2, 80069be <ip_reass_remove_oldest_datagram+0x4e>
 800699a:	469e      	mov	lr, r3
 800699c:	4613      	mov	r3, r2
    while (r != NULL) {
 800699e:	b183      	cbz	r3, 80069c2 <ip_reass_remove_oldest_datagram+0x52>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80069a0:	68ea      	ldr	r2, [r5, #12]
 80069a2:	695f      	ldr	r7, [r3, #20]
 80069a4:	4297      	cmp	r7, r2
 80069a6:	d0e9      	beq.n	800697c <ip_reass_remove_oldest_datagram+0xc>
        other_datagrams++;
 80069a8:	3401      	adds	r4, #1
        if (oldest == NULL) {
 80069aa:	2800      	cmp	r0, #0
 80069ac:	d0f1      	beq.n	8006992 <ip_reass_remove_oldest_datagram+0x22>
        } else if (r->timer <= oldest->timer) {
 80069ae:	f893 c01f 	ldrb.w	ip, [r3, #31]
 80069b2:	7fc2      	ldrb	r2, [r0, #31]
 80069b4:	4594      	cmp	ip, r2
 80069b6:	d8ee      	bhi.n	8006996 <ip_reass_remove_oldest_datagram+0x26>
          oldest_prev = prev;
 80069b8:	4671      	mov	r1, lr
          oldest = r;
 80069ba:	4618      	mov	r0, r3
 80069bc:	e7eb      	b.n	8006996 <ip_reass_remove_oldest_datagram+0x26>
      if (r->next != NULL) {
 80069be:	4673      	mov	r3, lr
 80069c0:	e7eb      	b.n	800699a <ip_reass_remove_oldest_datagram+0x2a>
    if (oldest != NULL) {
 80069c2:	b110      	cbz	r0, 80069ca <ip_reass_remove_oldest_datagram+0x5a>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80069c4:	f7ff ff4e 	bl	8006864 <ip_reass_free_complete_datagram>
      pbufs_freed += pbufs_freed_current;
 80069c8:	4406      	add	r6, r0
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80069ca:	4546      	cmp	r6, r8
 80069cc:	da08      	bge.n	80069e0 <ip_reass_remove_oldest_datagram+0x70>
 80069ce:	2c01      	cmp	r4, #1
 80069d0:	dd06      	ble.n	80069e0 <ip_reass_remove_oldest_datagram+0x70>
    r = reassdatagrams;
 80069d2:	4b05      	ldr	r3, [pc, #20]	; (80069e8 <ip_reass_remove_oldest_datagram+0x78>)
 80069d4:	681b      	ldr	r3, [r3, #0]
    other_datagrams = 0;
 80069d6:	2400      	movs	r4, #0
    oldest_prev = NULL;
 80069d8:	4621      	mov	r1, r4
    prev = NULL;
 80069da:	46a6      	mov	lr, r4
    oldest = NULL;
 80069dc:	4620      	mov	r0, r4
    while (r != NULL) {
 80069de:	e7de      	b.n	800699e <ip_reass_remove_oldest_datagram+0x2e>
}
 80069e0:	4630      	mov	r0, r6
 80069e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069e6:	bf00      	nop
 80069e8:	20003f38 	.word	0x20003f38

080069ec <ip_frag_free_pbuf_custom_ref>:
}

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 80069ec:	b510      	push	{r4, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 80069ee:	4604      	mov	r4, r0
 80069f0:	b120      	cbz	r0, 80069fc <ip_frag_free_pbuf_custom_ref+0x10>
  memp_free(MEMP_FRAG_PBUF, p);
 80069f2:	4621      	mov	r1, r4
 80069f4:	2005      	movs	r0, #5
 80069f6:	f000 fdd1 	bl	800759c <memp_free>
 80069fa:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("p != NULL", p != NULL);
 80069fc:	4b03      	ldr	r3, [pc, #12]	; (8006a0c <ip_frag_free_pbuf_custom_ref+0x20>)
 80069fe:	f240 22ae 	movw	r2, #686	; 0x2ae
 8006a02:	4903      	ldr	r1, [pc, #12]	; (8006a10 <ip_frag_free_pbuf_custom_ref+0x24>)
 8006a04:	4803      	ldr	r0, [pc, #12]	; (8006a14 <ip_frag_free_pbuf_custom_ref+0x28>)
 8006a06:	f006 f8f2 	bl	800cbee <iprintf>
 8006a0a:	e7f2      	b.n	80069f2 <ip_frag_free_pbuf_custom_ref+0x6>
 8006a0c:	0800de90 	.word	0x0800de90
 8006a10:	0800d664 	.word	0x0800d664
 8006a14:	0800d378 	.word	0x0800d378

08006a18 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8006a18:	b510      	push	{r4, lr}
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8006a1a:	4604      	mov	r4, r0
 8006a1c:	b138      	cbz	r0, 8006a2e <ipfrag_free_pbuf_custom+0x16>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
  if (pcr->original != NULL) {
 8006a1e:	6960      	ldr	r0, [r4, #20]
 8006a20:	b108      	cbz	r0, 8006a26 <ipfrag_free_pbuf_custom+0xe>
    pbuf_free(pcr->original);
 8006a22:	f000 ff91 	bl	8007948 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8006a26:	4620      	mov	r0, r4
 8006a28:	f7ff ffe0 	bl	80069ec <ip_frag_free_pbuf_custom_ref>
 8006a2c:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8006a2e:	4b04      	ldr	r3, [pc, #16]	; (8006a40 <ipfrag_free_pbuf_custom+0x28>)
 8006a30:	f44f 722e 	mov.w	r2, #696	; 0x2b8
 8006a34:	4903      	ldr	r1, [pc, #12]	; (8006a44 <ipfrag_free_pbuf_custom+0x2c>)
 8006a36:	4804      	ldr	r0, [pc, #16]	; (8006a48 <ipfrag_free_pbuf_custom+0x30>)
 8006a38:	f006 f8d9 	bl	800cbee <iprintf>
 8006a3c:	e7ef      	b.n	8006a1e <ipfrag_free_pbuf_custom+0x6>
 8006a3e:	bf00      	nop
 8006a40:	0800de90 	.word	0x0800de90
 8006a44:	0800df44 	.word	0x0800df44
 8006a48:	0800d378 	.word	0x0800d378

08006a4c <ip_reass_chain_frag_into_datagram_and_validate>:
{
 8006a4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a50:	4680      	mov	r8, r0
 8006a52:	460f      	mov	r7, r1
 8006a54:	4691      	mov	r9, r2
  fraghdr = (struct ip_hdr*)new_p->payload;
 8006a56:	684c      	ldr	r4, [r1, #4]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8006a58:	8860      	ldrh	r0, [r4, #2]
 8006a5a:	f7fe fe8f 	bl	800577c <lwip_htons>
 8006a5e:	7826      	ldrb	r6, [r4, #0]
 8006a60:	f006 060f 	and.w	r6, r6, #15
 8006a64:	eba0 0686 	sub.w	r6, r0, r6, lsl #2
 8006a68:	b2b6      	uxth	r6, r6
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8006a6a:	88e0      	ldrh	r0, [r4, #6]
 8006a6c:	f7fe fe86 	bl	800577c <lwip_htons>
 8006a70:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8006a74:	00c0      	lsls	r0, r0, #3
  iprh = (struct ip_reass_helper*)new_p->payload;
 8006a76:	687d      	ldr	r5, [r7, #4]
  iprh->next_pbuf = NULL;
 8006a78:	2400      	movs	r4, #0
 8006a7a:	702c      	strb	r4, [r5, #0]
 8006a7c:	706c      	strb	r4, [r5, #1]
 8006a7e:	70ac      	strb	r4, [r5, #2]
 8006a80:	70ec      	strb	r4, [r5, #3]
  iprh->start = offset;
 8006a82:	80a8      	strh	r0, [r5, #4]
  iprh->end = offset + len;
 8006a84:	eb06 0e00 	add.w	lr, r6, r0
 8006a88:	fa1f fe8e 	uxth.w	lr, lr
 8006a8c:	f8a5 e006 	strh.w	lr, [r5, #6]
  for (q = ipr->p; q != NULL;) {
 8006a90:	f8d8 1004 	ldr.w	r1, [r8, #4]
  int valid = 1;
 8006a94:	2601      	movs	r6, #1
  for (q = ipr->p; q != NULL;) {
 8006a96:	e033      	b.n	8006b00 <ip_reass_chain_frag_into_datagram_and_validate+0xb4>
      iprh->next_pbuf = q;
 8006a98:	6029      	str	r1, [r5, #0]
      if (iprh_prev != NULL) {
 8006a9a:	b34c      	cbz	r4, 8006af0 <ip_reass_chain_frag_into_datagram_and_validate+0xa4>
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8006a9c:	88e2      	ldrh	r2, [r4, #6]
 8006a9e:	4290      	cmp	r0, r2
 8006aa0:	d37e      	bcc.n	8006ba0 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
 8006aa2:	889b      	ldrh	r3, [r3, #4]
 8006aa4:	459e      	cmp	lr, r3
 8006aa6:	d87b      	bhi.n	8006ba0 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
        iprh_prev->next_pbuf = new_p;
 8006aa8:	6027      	str	r7, [r4, #0]
        if (iprh_prev->end != iprh->start) {
 8006aaa:	88ab      	ldrh	r3, [r5, #4]
 8006aac:	429a      	cmp	r2, r3
 8006aae:	d000      	beq.n	8006ab2 <ip_reass_chain_frag_into_datagram_and_validate+0x66>
          valid = 0;
 8006ab0:	2600      	movs	r6, #0
  if (q == NULL) {
 8006ab2:	2900      	cmp	r1, #0
 8006ab4:	d036      	beq.n	8006b24 <ip_reass_chain_frag_into_datagram_and_validate+0xd8>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8006ab6:	f1b9 0f00 	cmp.w	r9, #0
 8006aba:	d104      	bne.n	8006ac6 <ip_reass_chain_frag_into_datagram_and_validate+0x7a>
 8006abc:	f898 301e 	ldrb.w	r3, [r8, #30]
 8006ac0:	f013 0f01 	tst.w	r3, #1
 8006ac4:	d07a      	beq.n	8006bbc <ip_reass_chain_frag_into_datagram_and_validate+0x170>
    if (valid) {
 8006ac6:	2e00      	cmp	r6, #0
 8006ac8:	d067      	beq.n	8006b9a <ip_reass_chain_frag_into_datagram_and_validate+0x14e>
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 8006aca:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d060      	beq.n	8006b94 <ip_reass_chain_frag_into_datagram_and_validate+0x148>
 8006ad2:	6858      	ldr	r0, [r3, #4]
 8006ad4:	8883      	ldrh	r3, [r0, #4]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d15e      	bne.n	8006b98 <ip_reass_chain_frag_into_datagram_and_validate+0x14c>
        q = iprh->next_pbuf;
 8006ada:	682a      	ldr	r2, [r5, #0]
        while (q != NULL) {
 8006adc:	2a00      	cmp	r2, #0
 8006ade:	d044      	beq.n	8006b6a <ip_reass_chain_frag_into_datagram_and_validate+0x11e>
          iprh = (struct ip_reass_helper*)q->payload;
 8006ae0:	6853      	ldr	r3, [r2, #4]
          if (iprh_prev->end != iprh->start) {
 8006ae2:	88e9      	ldrh	r1, [r5, #6]
 8006ae4:	889a      	ldrh	r2, [r3, #4]
 8006ae6:	4291      	cmp	r1, r2
 8006ae8:	d13d      	bne.n	8006b66 <ip_reass_chain_frag_into_datagram_and_validate+0x11a>
          q = iprh->next_pbuf;
 8006aea:	681a      	ldr	r2, [r3, #0]
          iprh = (struct ip_reass_helper*)q->payload;
 8006aec:	461d      	mov	r5, r3
 8006aee:	e7f5      	b.n	8006adc <ip_reass_chain_frag_into_datagram_and_validate+0x90>
        if (iprh->end > iprh_tmp->start) {
 8006af0:	889b      	ldrh	r3, [r3, #4]
 8006af2:	459e      	cmp	lr, r3
 8006af4:	d854      	bhi.n	8006ba0 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
        ipr->p = new_p;
 8006af6:	f8c8 7004 	str.w	r7, [r8, #4]
 8006afa:	e7da      	b.n	8006ab2 <ip_reass_chain_frag_into_datagram_and_validate+0x66>
    q = iprh_tmp->next_pbuf;
 8006afc:	6819      	ldr	r1, [r3, #0]
    iprh_prev = iprh_tmp;
 8006afe:	461c      	mov	r4, r3
  for (q = ipr->p; q != NULL;) {
 8006b00:	2900      	cmp	r1, #0
 8006b02:	d0d6      	beq.n	8006ab2 <ip_reass_chain_frag_into_datagram_and_validate+0x66>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 8006b04:	684b      	ldr	r3, [r1, #4]
    if (iprh->start < iprh_tmp->start) {
 8006b06:	889a      	ldrh	r2, [r3, #4]
 8006b08:	4290      	cmp	r0, r2
 8006b0a:	d3c5      	bcc.n	8006a98 <ip_reass_chain_frag_into_datagram_and_validate+0x4c>
    } else if (iprh->start == iprh_tmp->start) {
 8006b0c:	4290      	cmp	r0, r2
 8006b0e:	d047      	beq.n	8006ba0 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
    } else if (iprh->start < iprh_tmp->end) {
 8006b10:	88d9      	ldrh	r1, [r3, #6]
 8006b12:	4288      	cmp	r0, r1
 8006b14:	d344      	bcc.n	8006ba0 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
      if (iprh_prev != NULL) {
 8006b16:	2c00      	cmp	r4, #0
 8006b18:	d0f0      	beq.n	8006afc <ip_reass_chain_frag_into_datagram_and_validate+0xb0>
        if (iprh_prev->end != iprh_tmp->start) {
 8006b1a:	88e1      	ldrh	r1, [r4, #6]
 8006b1c:	428a      	cmp	r2, r1
 8006b1e:	d0ed      	beq.n	8006afc <ip_reass_chain_frag_into_datagram_and_validate+0xb0>
          valid = 0;
 8006b20:	2600      	movs	r6, #0
 8006b22:	e7eb      	b.n	8006afc <ip_reass_chain_frag_into_datagram_and_validate+0xb0>
    if (iprh_prev != NULL) {
 8006b24:	b194      	cbz	r4, 8006b4c <ip_reass_chain_frag_into_datagram_and_validate+0x100>
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8006b26:	88e2      	ldrh	r2, [r4, #6]
 8006b28:	88ab      	ldrh	r3, [r5, #4]
 8006b2a:	429a      	cmp	r2, r3
 8006b2c:	d806      	bhi.n	8006b3c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
      iprh_prev->next_pbuf = new_p;
 8006b2e:	6027      	str	r7, [r4, #0]
      if (iprh_prev->end != iprh->start) {
 8006b30:	88e2      	ldrh	r2, [r4, #6]
 8006b32:	88ab      	ldrh	r3, [r5, #4]
 8006b34:	429a      	cmp	r2, r3
 8006b36:	d0be      	beq.n	8006ab6 <ip_reass_chain_frag_into_datagram_and_validate+0x6a>
        valid = 0;
 8006b38:	2600      	movs	r6, #0
 8006b3a:	e7bc      	b.n	8006ab6 <ip_reass_chain_frag_into_datagram_and_validate+0x6a>
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8006b3c:	4b21      	ldr	r3, [pc, #132]	; (8006bc4 <ip_reass_chain_frag_into_datagram_and_validate+0x178>)
 8006b3e:	f240 12ab 	movw	r2, #427	; 0x1ab
 8006b42:	4921      	ldr	r1, [pc, #132]	; (8006bc8 <ip_reass_chain_frag_into_datagram_and_validate+0x17c>)
 8006b44:	4821      	ldr	r0, [pc, #132]	; (8006bcc <ip_reass_chain_frag_into_datagram_and_validate+0x180>)
 8006b46:	f006 f852 	bl	800cbee <iprintf>
 8006b4a:	e7f0      	b.n	8006b2e <ip_reass_chain_frag_into_datagram_and_validate+0xe2>
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8006b4c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006b50:	b133      	cbz	r3, 8006b60 <ip_reass_chain_frag_into_datagram_and_validate+0x114>
 8006b52:	4b1c      	ldr	r3, [pc, #112]	; (8006bc4 <ip_reass_chain_frag_into_datagram_and_validate+0x178>)
 8006b54:	f44f 72da 	mov.w	r2, #436	; 0x1b4
 8006b58:	491d      	ldr	r1, [pc, #116]	; (8006bd0 <ip_reass_chain_frag_into_datagram_and_validate+0x184>)
 8006b5a:	481c      	ldr	r0, [pc, #112]	; (8006bcc <ip_reass_chain_frag_into_datagram_and_validate+0x180>)
 8006b5c:	f006 f847 	bl	800cbee <iprintf>
      ipr->p = new_p;
 8006b60:	f8c8 7004 	str.w	r7, [r8, #4]
 8006b64:	e7a7      	b.n	8006ab6 <ip_reass_chain_frag_into_datagram_and_validate+0x6a>
          iprh = (struct ip_reass_helper*)q->payload;
 8006b66:	461d      	mov	r5, r3
            valid = 0;
 8006b68:	2600      	movs	r6, #0
        if (valid) {
 8006b6a:	b1b6      	cbz	r6, 8006b9a <ip_reass_chain_frag_into_datagram_and_validate+0x14e>
          LWIP_ASSERT("sanity check",
 8006b6c:	4285      	cmp	r5, r0
 8006b6e:	d009      	beq.n	8006b84 <ip_reass_chain_frag_into_datagram_and_validate+0x138>
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8006b70:	682b      	ldr	r3, [r5, #0]
 8006b72:	b193      	cbz	r3, 8006b9a <ip_reass_chain_frag_into_datagram_and_validate+0x14e>
 8006b74:	4b13      	ldr	r3, [pc, #76]	; (8006bc4 <ip_reass_chain_frag_into_datagram_and_validate+0x178>)
 8006b76:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 8006b7a:	4916      	ldr	r1, [pc, #88]	; (8006bd4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>)
 8006b7c:	4813      	ldr	r0, [pc, #76]	; (8006bcc <ip_reass_chain_frag_into_datagram_and_validate+0x180>)
 8006b7e:	f006 f836 	bl	800cbee <iprintf>
 8006b82:	e00a      	b.n	8006b9a <ip_reass_chain_frag_into_datagram_and_validate+0x14e>
          LWIP_ASSERT("sanity check",
 8006b84:	4b0f      	ldr	r3, [pc, #60]	; (8006bc4 <ip_reass_chain_frag_into_datagram_and_validate+0x178>)
 8006b86:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8006b8a:	4913      	ldr	r1, [pc, #76]	; (8006bd8 <ip_reass_chain_frag_into_datagram_and_validate+0x18c>)
 8006b8c:	480f      	ldr	r0, [pc, #60]	; (8006bcc <ip_reass_chain_frag_into_datagram_and_validate+0x180>)
 8006b8e:	f006 f82e 	bl	800cbee <iprintf>
 8006b92:	e7ed      	b.n	8006b70 <ip_reass_chain_frag_into_datagram_and_validate+0x124>
        valid = 0;
 8006b94:	2600      	movs	r6, #0
 8006b96:	e000      	b.n	8006b9a <ip_reass_chain_frag_into_datagram_and_validate+0x14e>
 8006b98:	2600      	movs	r6, #0
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8006b9a:	4630      	mov	r0, r6
 8006b9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  ip_reass_pbufcount -= pbuf_clen(new_p);
 8006ba0:	4638      	mov	r0, r7
 8006ba2:	f001 f897 	bl	8007cd4 <pbuf_clen>
 8006ba6:	4a0d      	ldr	r2, [pc, #52]	; (8006bdc <ip_reass_chain_frag_into_datagram_and_validate+0x190>)
 8006ba8:	8813      	ldrh	r3, [r2, #0]
 8006baa:	1a18      	subs	r0, r3, r0
 8006bac:	8010      	strh	r0, [r2, #0]
  pbuf_free(new_p);
 8006bae:	4638      	mov	r0, r7
 8006bb0:	f000 feca 	bl	8007948 <pbuf_free>
  return IP_REASS_VALIDATE_PBUF_DROPPED;
 8006bb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006bb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8006bbc:	4648      	mov	r0, r9
}
 8006bbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006bc2:	bf00      	nop
 8006bc4:	0800de90 	.word	0x0800de90
 8006bc8:	0800de04 	.word	0x0800de04
 8006bcc:	0800d378 	.word	0x0800d378
 8006bd0:	0800de24 	.word	0x0800de24
 8006bd4:	0800de6c 	.word	0x0800de6c
 8006bd8:	0800de5c 	.word	0x0800de5c
 8006bdc:	20003f34 	.word	0x20003f34

08006be0 <ip_frag_alloc_pbuf_custom_ref>:
{
 8006be0:	b508      	push	{r3, lr}
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 8006be2:	2005      	movs	r0, #5
 8006be4:	f000 fcc0 	bl	8007568 <memp_malloc>
}
 8006be8:	bd08      	pop	{r3, pc}
	...

08006bec <ip_reass_enqueue_new_datagram>:
{
 8006bec:	b570      	push	{r4, r5, r6, lr}
 8006bee:	4605      	mov	r5, r0
 8006bf0:	460e      	mov	r6, r1
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8006bf2:	2004      	movs	r0, #4
 8006bf4:	f000 fcb8 	bl	8007568 <memp_malloc>
  if (ipr == NULL) {
 8006bf8:	4604      	mov	r4, r0
 8006bfa:	b1b0      	cbz	r0, 8006c2a <ip_reass_enqueue_new_datagram+0x3e>
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8006bfc:	2220      	movs	r2, #32
 8006bfe:	2100      	movs	r1, #0
 8006c00:	4620      	mov	r0, r4
 8006c02:	f006 f96b 	bl	800cedc <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8006c06:	2303      	movs	r3, #3
 8006c08:	77e3      	strb	r3, [r4, #31]
  ipr->next = reassdatagrams;
 8006c0a:	4b0f      	ldr	r3, [pc, #60]	; (8006c48 <ip_reass_enqueue_new_datagram+0x5c>)
 8006c0c:	681a      	ldr	r2, [r3, #0]
 8006c0e:	6022      	str	r2, [r4, #0]
  reassdatagrams = ipr;
 8006c10:	601c      	str	r4, [r3, #0]
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8006c12:	682a      	ldr	r2, [r5, #0]
 8006c14:	686e      	ldr	r6, [r5, #4]
 8006c16:	68a8      	ldr	r0, [r5, #8]
 8006c18:	68e9      	ldr	r1, [r5, #12]
 8006c1a:	60a2      	str	r2, [r4, #8]
 8006c1c:	60e6      	str	r6, [r4, #12]
 8006c1e:	6120      	str	r0, [r4, #16]
 8006c20:	6161      	str	r1, [r4, #20]
 8006c22:	692a      	ldr	r2, [r5, #16]
 8006c24:	61a2      	str	r2, [r4, #24]
}
 8006c26:	4620      	mov	r0, r4
 8006c28:	bd70      	pop	{r4, r5, r6, pc}
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8006c2a:	4631      	mov	r1, r6
 8006c2c:	4628      	mov	r0, r5
 8006c2e:	f7ff fe9f 	bl	8006970 <ip_reass_remove_oldest_datagram>
 8006c32:	4286      	cmp	r6, r0
 8006c34:	dd02      	ble.n	8006c3c <ip_reass_enqueue_new_datagram+0x50>
    if (ipr == NULL)
 8006c36:	2c00      	cmp	r4, #0
 8006c38:	d1e0      	bne.n	8006bfc <ip_reass_enqueue_new_datagram+0x10>
 8006c3a:	e7f4      	b.n	8006c26 <ip_reass_enqueue_new_datagram+0x3a>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8006c3c:	2004      	movs	r0, #4
 8006c3e:	f000 fc93 	bl	8007568 <memp_malloc>
 8006c42:	4604      	mov	r4, r0
 8006c44:	e7f7      	b.n	8006c36 <ip_reass_enqueue_new_datagram+0x4a>
 8006c46:	bf00      	nop
 8006c48:	20003f38 	.word	0x20003f38

08006c4c <ip_reass_tmr>:
{
 8006c4c:	b538      	push	{r3, r4, r5, lr}
  r = reassdatagrams;
 8006c4e:	4b09      	ldr	r3, [pc, #36]	; (8006c74 <ip_reass_tmr+0x28>)
 8006c50:	6818      	ldr	r0, [r3, #0]
  struct ip_reassdata *r, *prev = NULL;
 8006c52:	2400      	movs	r4, #0
  while (r != NULL) {
 8006c54:	e004      	b.n	8006c60 <ip_reass_tmr+0x14>
      r = r->next;
 8006c56:	6805      	ldr	r5, [r0, #0]
      ip_reass_free_complete_datagram(tmp, prev);
 8006c58:	4621      	mov	r1, r4
 8006c5a:	f7ff fe03 	bl	8006864 <ip_reass_free_complete_datagram>
      r = r->next;
 8006c5e:	4628      	mov	r0, r5
  while (r != NULL) {
 8006c60:	b138      	cbz	r0, 8006c72 <ip_reass_tmr+0x26>
    if (r->timer > 0) {
 8006c62:	7fc3      	ldrb	r3, [r0, #31]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d0f6      	beq.n	8006c56 <ip_reass_tmr+0xa>
      r->timer--;
 8006c68:	3b01      	subs	r3, #1
 8006c6a:	77c3      	strb	r3, [r0, #31]
      prev = r;
 8006c6c:	4604      	mov	r4, r0
      r = r->next;
 8006c6e:	6800      	ldr	r0, [r0, #0]
 8006c70:	e7f6      	b.n	8006c60 <ip_reass_tmr+0x14>
}
 8006c72:	bd38      	pop	{r3, r4, r5, pc}
 8006c74:	20003f38 	.word	0x20003f38

08006c78 <ip4_reass>:
{
 8006c78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c7c:	4681      	mov	r9, r0
  fraghdr = (struct ip_hdr*)p->payload;
 8006c7e:	6845      	ldr	r5, [r0, #4]
  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 8006c80:	782b      	ldrb	r3, [r5, #0]
 8006c82:	f003 030f 	and.w	r3, r3, #15
 8006c86:	2b05      	cmp	r3, #5
 8006c88:	d124      	bne.n	8006cd4 <ip4_reass+0x5c>
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8006c8a:	88e8      	ldrh	r0, [r5, #6]
 8006c8c:	f7fe fd76 	bl	800577c <lwip_htons>
 8006c90:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8006c94:	00c7      	lsls	r7, r0, #3
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8006c96:	8868      	ldrh	r0, [r5, #2]
 8006c98:	f7fe fd70 	bl	800577c <lwip_htons>
 8006c9c:	782e      	ldrb	r6, [r5, #0]
 8006c9e:	f006 060f 	and.w	r6, r6, #15
 8006ca2:	eba0 0686 	sub.w	r6, r0, r6, lsl #2
 8006ca6:	b2b6      	uxth	r6, r6
  clen = pbuf_clen(p);
 8006ca8:	4648      	mov	r0, r9
 8006caa:	f001 f813 	bl	8007cd4 <pbuf_clen>
 8006cae:	4680      	mov	r8, r0
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8006cb0:	4b59      	ldr	r3, [pc, #356]	; (8006e18 <ip4_reass+0x1a0>)
 8006cb2:	881b      	ldrh	r3, [r3, #0]
 8006cb4:	4403      	add	r3, r0
 8006cb6:	2b0a      	cmp	r3, #10
 8006cb8:	dc02      	bgt.n	8006cc0 <ip4_reass+0x48>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8006cba:	4b58      	ldr	r3, [pc, #352]	; (8006e1c <ip4_reass+0x1a4>)
 8006cbc:	681c      	ldr	r4, [r3, #0]
 8006cbe:	e011      	b.n	8006ce4 <ip4_reass+0x6c>
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8006cc0:	4601      	mov	r1, r0
 8006cc2:	4628      	mov	r0, r5
 8006cc4:	f7ff fe54 	bl	8006970 <ip_reass_remove_oldest_datagram>
 8006cc8:	b120      	cbz	r0, 8006cd4 <ip4_reass+0x5c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8006cca:	4b53      	ldr	r3, [pc, #332]	; (8006e18 <ip4_reass+0x1a0>)
 8006ccc:	881b      	ldrh	r3, [r3, #0]
 8006cce:	4443      	add	r3, r8
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8006cd0:	2b0a      	cmp	r3, #10
 8006cd2:	ddf2      	ble.n	8006cba <ip4_reass+0x42>
  pbuf_free(p);
 8006cd4:	4648      	mov	r0, r9
 8006cd6:	f000 fe37 	bl	8007948 <pbuf_free>
  return NULL;
 8006cda:	2700      	movs	r7, #0
}
 8006cdc:	4638      	mov	r0, r7
 8006cde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8006ce2:	6824      	ldr	r4, [r4, #0]
 8006ce4:	b15c      	cbz	r4, 8006cfe <ip4_reass+0x86>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8006ce6:	6962      	ldr	r2, [r4, #20]
 8006ce8:	68eb      	ldr	r3, [r5, #12]
 8006cea:	429a      	cmp	r2, r3
 8006cec:	d1f9      	bne.n	8006ce2 <ip4_reass+0x6a>
 8006cee:	69a2      	ldr	r2, [r4, #24]
 8006cf0:	692b      	ldr	r3, [r5, #16]
 8006cf2:	429a      	cmp	r2, r3
 8006cf4:	d1f5      	bne.n	8006ce2 <ip4_reass+0x6a>
 8006cf6:	89a2      	ldrh	r2, [r4, #12]
 8006cf8:	88ab      	ldrh	r3, [r5, #4]
 8006cfa:	429a      	cmp	r2, r3
 8006cfc:	d1f1      	bne.n	8006ce2 <ip4_reass+0x6a>
  if (ipr == NULL) {
 8006cfe:	2c00      	cmp	r4, #0
 8006d00:	d048      	beq.n	8006d94 <ip4_reass+0x11c>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8006d02:	88e8      	ldrh	r0, [r5, #6]
 8006d04:	f7fe fd3a 	bl	800577c <lwip_htons>
 8006d08:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8006d0c:	2800      	cmp	r0, #0
 8006d0e:	d049      	beq.n	8006da4 <ip4_reass+0x12c>
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8006d10:	88ed      	ldrh	r5, [r5, #6]
 8006d12:	f005 0520 	and.w	r5, r5, #32
 8006d16:	2d00      	cmp	r5, #0
 8006d18:	bf0c      	ite	eq
 8006d1a:	2201      	moveq	r2, #1
 8006d1c:	2200      	movne	r2, #0
  if (is_last) {
 8006d1e:	d107      	bne.n	8006d30 <ip4_reass+0xb8>
    u16_t datagram_len = (u16_t)(offset + len);
 8006d20:	19bb      	adds	r3, r7, r6
 8006d22:	b29b      	uxth	r3, r3
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8006d24:	429f      	cmp	r7, r3
 8006d26:	d8d5      	bhi.n	8006cd4 <ip4_reass+0x5c>
 8006d28:	f64f 71eb 	movw	r1, #65515	; 0xffeb
 8006d2c:	428b      	cmp	r3, r1
 8006d2e:	d8d1      	bhi.n	8006cd4 <ip4_reass+0x5c>
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8006d30:	4649      	mov	r1, r9
 8006d32:	4620      	mov	r0, r4
 8006d34:	f7ff fe8a 	bl	8006a4c <ip_reass_chain_frag_into_datagram_and_validate>
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8006d38:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8006d3c:	d0ca      	beq.n	8006cd4 <ip4_reass+0x5c>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8006d3e:	4b36      	ldr	r3, [pc, #216]	; (8006e18 <ip4_reass+0x1a0>)
 8006d40:	881a      	ldrh	r2, [r3, #0]
 8006d42:	4490      	add	r8, r2
 8006d44:	f8a3 8000 	strh.w	r8, [r3]
  if (is_last) {
 8006d48:	b92d      	cbnz	r5, 8006d56 <ip4_reass+0xde>
    u16_t datagram_len = (u16_t)(offset + len);
 8006d4a:	443e      	add	r6, r7
    ipr->datagram_len = datagram_len;
 8006d4c:	83a6      	strh	r6, [r4, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8006d4e:	7fa3      	ldrb	r3, [r4, #30]
 8006d50:	f043 0301 	orr.w	r3, r3, #1
 8006d54:	77a3      	strb	r3, [r4, #30]
  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8006d56:	2801      	cmp	r0, #1
 8006d58:	d15b      	bne.n	8006e12 <ip4_reass+0x19a>
    ipr->datagram_len += IP_HLEN;
 8006d5a:	8ba3      	ldrh	r3, [r4, #28]
 8006d5c:	3314      	adds	r3, #20
 8006d5e:	83a3      	strh	r3, [r4, #28]
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 8006d60:	6863      	ldr	r3, [r4, #4]
 8006d62:	685e      	ldr	r6, [r3, #4]
 8006d64:	6835      	ldr	r5, [r6, #0]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8006d66:	4623      	mov	r3, r4
 8006d68:	f853 2f08 	ldr.w	r2, [r3, #8]!
 8006d6c:	685f      	ldr	r7, [r3, #4]
 8006d6e:	6898      	ldr	r0, [r3, #8]
 8006d70:	68d9      	ldr	r1, [r3, #12]
 8006d72:	6032      	str	r2, [r6, #0]
 8006d74:	6077      	str	r7, [r6, #4]
 8006d76:	60b0      	str	r0, [r6, #8]
 8006d78:	60f1      	str	r1, [r6, #12]
 8006d7a:	691a      	ldr	r2, [r3, #16]
 8006d7c:	6132      	str	r2, [r6, #16]
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 8006d7e:	8ba0      	ldrh	r0, [r4, #28]
 8006d80:	f7fe fcfc 	bl	800577c <lwip_htons>
 8006d84:	8070      	strh	r0, [r6, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8006d86:	2300      	movs	r3, #0
 8006d88:	71b3      	strb	r3, [r6, #6]
 8006d8a:	71f3      	strb	r3, [r6, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8006d8c:	72b3      	strb	r3, [r6, #10]
 8006d8e:	72f3      	strb	r3, [r6, #11]
    p = ipr->p;
 8006d90:	6867      	ldr	r7, [r4, #4]
    while (r != NULL) {
 8006d92:	e026      	b.n	8006de2 <ip4_reass+0x16a>
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8006d94:	4641      	mov	r1, r8
 8006d96:	4628      	mov	r0, r5
 8006d98:	f7ff ff28 	bl	8006bec <ip_reass_enqueue_new_datagram>
    if (ipr == NULL) {
 8006d9c:	4604      	mov	r4, r0
 8006d9e:	2800      	cmp	r0, #0
 8006da0:	d1b6      	bne.n	8006d10 <ip4_reass+0x98>
 8006da2:	e797      	b.n	8006cd4 <ip4_reass+0x5c>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8006da4:	89e0      	ldrh	r0, [r4, #14]
 8006da6:	f7fe fce9 	bl	800577c <lwip_htons>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8006daa:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8006dae:	2800      	cmp	r0, #0
 8006db0:	d0ae      	beq.n	8006d10 <ip4_reass+0x98>
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8006db2:	682a      	ldr	r2, [r5, #0]
 8006db4:	f8d5 e004 	ldr.w	lr, [r5, #4]
 8006db8:	68a8      	ldr	r0, [r5, #8]
 8006dba:	68e9      	ldr	r1, [r5, #12]
 8006dbc:	60a2      	str	r2, [r4, #8]
 8006dbe:	f8c4 e00c 	str.w	lr, [r4, #12]
 8006dc2:	6120      	str	r0, [r4, #16]
 8006dc4:	6161      	str	r1, [r4, #20]
 8006dc6:	692a      	ldr	r2, [r5, #16]
 8006dc8:	61a2      	str	r2, [r4, #24]
 8006dca:	e7a1      	b.n	8006d10 <ip4_reass+0x98>
      iprh = (struct ip_reass_helper*)r->payload;
 8006dcc:	686e      	ldr	r6, [r5, #4]
      pbuf_header(r, -IP_HLEN);
 8006dce:	f06f 0113 	mvn.w	r1, #19
 8006dd2:	4628      	mov	r0, r5
 8006dd4:	f000 fdae 	bl	8007934 <pbuf_header>
      pbuf_cat(p, r);
 8006dd8:	4629      	mov	r1, r5
 8006dda:	4638      	mov	r0, r7
 8006ddc:	f000 ffa0 	bl	8007d20 <pbuf_cat>
      r = iprh->next_pbuf;
 8006de0:	6835      	ldr	r5, [r6, #0]
    while (r != NULL) {
 8006de2:	2d00      	cmp	r5, #0
 8006de4:	d1f2      	bne.n	8006dcc <ip4_reass+0x154>
    if (ipr == reassdatagrams) {
 8006de6:	4b0d      	ldr	r3, [pc, #52]	; (8006e1c <ip4_reass+0x1a4>)
 8006de8:	6819      	ldr	r1, [r3, #0]
 8006dea:	428c      	cmp	r4, r1
 8006dec:	d005      	beq.n	8006dfa <ip4_reass+0x182>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8006dee:	b129      	cbz	r1, 8006dfc <ip4_reass+0x184>
        if (ipr_prev->next == ipr) {
 8006df0:	680b      	ldr	r3, [r1, #0]
 8006df2:	429c      	cmp	r4, r3
 8006df4:	d002      	beq.n	8006dfc <ip4_reass+0x184>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8006df6:	4619      	mov	r1, r3
 8006df8:	e7f9      	b.n	8006dee <ip4_reass+0x176>
      ipr_prev = NULL;
 8006dfa:	2100      	movs	r1, #0
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8006dfc:	4620      	mov	r0, r4
 8006dfe:	f7ff fd0d 	bl	800681c <ip_reass_dequeue_datagram>
    ip_reass_pbufcount -= pbuf_clen(p);
 8006e02:	4638      	mov	r0, r7
 8006e04:	f000 ff66 	bl	8007cd4 <pbuf_clen>
 8006e08:	4a03      	ldr	r2, [pc, #12]	; (8006e18 <ip4_reass+0x1a0>)
 8006e0a:	8813      	ldrh	r3, [r2, #0]
 8006e0c:	1a18      	subs	r0, r3, r0
 8006e0e:	8010      	strh	r0, [r2, #0]
    return p;
 8006e10:	e764      	b.n	8006cdc <ip4_reass+0x64>
  return NULL;
 8006e12:	2700      	movs	r7, #0
 8006e14:	e762      	b.n	8006cdc <ip4_reass+0x64>
 8006e16:	bf00      	nop
 8006e18:	20003f34 	.word	0x20003f34
 8006e1c:	20003f38 	.word	0x20003f38

08006e20 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8006e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e24:	b08d      	sub	sp, #52	; 0x34
 8006e26:	4605      	mov	r5, r0
 8006e28:	9107      	str	r1, [sp, #28]
 8006e2a:	920b      	str	r2, [sp, #44]	; 0x2c
  u16_t newpbuflen = 0;
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 8006e2c:	8c4b      	ldrh	r3, [r1, #34]	; 0x22
 8006e2e:	3b14      	subs	r3, #20
 8006e30:	d420      	bmi.n	8006e74 <ip4_frag+0x54>
 8006e32:	10db      	asrs	r3, r3, #3
 8006e34:	9309      	str	r3, [sp, #36]	; 0x24
 8006e36:	b29b      	uxth	r3, r3
 8006e38:	930a      	str	r3, [sp, #40]	; 0x28
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 8006e3a:	f8d5 a004 	ldr.w	sl, [r5, #4]
  iphdr = original_iphdr;
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 8006e3e:	f89a 3000 	ldrb.w	r3, [sl]
 8006e42:	f003 030f 	and.w	r3, r3, #15
 8006e46:	2b05      	cmp	r3, #5
 8006e48:	d116      	bne.n	8006e78 <ip4_frag+0x58>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8006e4a:	f8ba 0006 	ldrh.w	r0, [sl, #6]
 8006e4e:	f7fe fc95 	bl	800577c <lwip_htons>
  ofo = tmp & IP_OFFMASK;
 8006e52:	f3c0 030c 	ubfx	r3, r0, #0, #13
 8006e56:	9306      	str	r3, [sp, #24]
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 8006e58:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 8006e5c:	d116      	bne.n	8006e8c <ip4_frag+0x6c>

  left = p->tot_len - IP_HLEN;
 8006e5e:	f8b5 9008 	ldrh.w	r9, [r5, #8]
 8006e62:	f1a9 0914 	sub.w	r9, r9, #20
 8006e66:	fa1f fb89 	uxth.w	fp, r9
  u16_t poff = IP_HLEN;
 8006e6a:	f04f 0814 	mov.w	r8, #20
  u16_t newpbuflen = 0;
 8006e6e:	2400      	movs	r4, #0
 8006e70:	46d9      	mov	r9, fp

  while (left) {
 8006e72:	e08c      	b.n	8006f8e <ip4_frag+0x16e>
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 8006e74:	3307      	adds	r3, #7
 8006e76:	e7dc      	b.n	8006e32 <ip4_frag+0x12>
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 8006e78:	4b5e      	ldr	r3, [pc, #376]	; (8006ff4 <ip4_frag+0x1d4>)
 8006e7a:	f240 22e1 	movw	r2, #737	; 0x2e1
 8006e7e:	495e      	ldr	r1, [pc, #376]	; (8006ff8 <ip4_frag+0x1d8>)
 8006e80:	485e      	ldr	r0, [pc, #376]	; (8006ffc <ip4_frag+0x1dc>)
 8006e82:	f005 feb4 	bl	800cbee <iprintf>
 8006e86:	f06f 0005 	mvn.w	r0, #5
 8006e8a:	e043      	b.n	8006f14 <ip4_frag+0xf4>
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 8006e8c:	4b59      	ldr	r3, [pc, #356]	; (8006ff4 <ip4_frag+0x1d4>)
 8006e8e:	f240 22e6 	movw	r2, #742	; 0x2e6
 8006e92:	495b      	ldr	r1, [pc, #364]	; (8007000 <ip4_frag+0x1e0>)
 8006e94:	4859      	ldr	r0, [pc, #356]	; (8006ffc <ip4_frag+0x1dc>)
 8006e96:	f005 feaa 	bl	800cbee <iprintf>
 8006e9a:	f06f 0005 	mvn.w	r0, #5
 8006e9e:	e039      	b.n	8006f14 <ip4_frag+0xf4>
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
    if (rambuf == NULL) {
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8006ea0:	4b54      	ldr	r3, [pc, #336]	; (8006ff4 <ip4_frag+0x1d4>)
 8006ea2:	f240 3209 	movw	r2, #777	; 0x309
 8006ea6:	4957      	ldr	r1, [pc, #348]	; (8007004 <ip4_frag+0x1e4>)
 8006ea8:	4854      	ldr	r0, [pc, #336]	; (8006ffc <ip4_frag+0x1dc>)
 8006eaa:	f005 fea0 	bl	800cbee <iprintf>
 8006eae:	e086      	b.n	8006fbe <ip4_frag+0x19e>
      if (!newpbuflen) {
        poff = 0;
        p = p->next;
        continue;
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8006eb0:	f7ff fe96 	bl	8006be0 <ip_frag_alloc_pbuf_custom_ref>
      if (pcr == NULL) {
 8006eb4:	4607      	mov	r7, r0
 8006eb6:	b340      	cbz	r0, 8006f0a <ip4_frag+0xea>
        pbuf_free(rambuf);
        goto memerr;
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
        (u8_t*)p->payload + poff, newpbuflen);
 8006eb8:	686b      	ldr	r3, [r5, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8006eba:	4443      	add	r3, r8
 8006ebc:	9401      	str	r4, [sp, #4]
 8006ebe:	9300      	str	r3, [sp, #0]
 8006ec0:	4603      	mov	r3, r0
 8006ec2:	2202      	movs	r2, #2
 8006ec4:	4621      	mov	r1, r4
 8006ec6:	2004      	movs	r0, #4
 8006ec8:	f000 fcf8 	bl	80078bc <pbuf_alloced_custom>
      if (newpbuf == NULL) {
 8006ecc:	9003      	str	r0, [sp, #12]
 8006ece:	b320      	cbz	r0, 8006f1a <ip4_frag+0xfa>
        ip_frag_free_pbuf_custom_ref(pcr);
        pbuf_free(rambuf);
        goto memerr;
      }
      pbuf_ref(p);
 8006ed0:	4628      	mov	r0, r5
 8006ed2:	f000 ff09 	bl	8007ce8 <pbuf_ref>
      pcr->original = p;
 8006ed6:	617d      	str	r5, [r7, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8006ed8:	4b4b      	ldr	r3, [pc, #300]	; (8007008 <ip4_frag+0x1e8>)
 8006eda:	613b      	str	r3, [r7, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8006edc:	9903      	ldr	r1, [sp, #12]
 8006ede:	9804      	ldr	r0, [sp, #16]
 8006ee0:	f000 ff1e 	bl	8007d20 <pbuf_cat>
      left_to_copy -= newpbuflen;
 8006ee4:	1b36      	subs	r6, r6, r4
 8006ee6:	b2b6      	uxth	r6, r6
      if (left_to_copy) {
 8006ee8:	b116      	cbz	r6, 8006ef0 <ip4_frag+0xd0>
        poff = 0;
        p = p->next;
 8006eea:	682d      	ldr	r5, [r5, #0]
        poff = 0;
 8006eec:	f04f 0800 	mov.w	r8, #0
    while (left_to_copy) {
 8006ef0:	b1e6      	cbz	r6, 8006f2c <ip4_frag+0x10c>
      u16_t plen = p->len - poff;
 8006ef2:	896c      	ldrh	r4, [r5, #10]
 8006ef4:	eba4 0408 	sub.w	r4, r4, r8
 8006ef8:	b2a4      	uxth	r4, r4
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8006efa:	42b4      	cmp	r4, r6
 8006efc:	bf28      	it	cs
 8006efe:	4634      	movcs	r4, r6
      if (!newpbuflen) {
 8006f00:	2c00      	cmp	r4, #0
 8006f02:	d1d5      	bne.n	8006eb0 <ip4_frag+0x90>
        p = p->next;
 8006f04:	682d      	ldr	r5, [r5, #0]
        poff = 0;
 8006f06:	46a0      	mov	r8, r4
        continue;
 8006f08:	e7f2      	b.n	8006ef0 <ip4_frag+0xd0>
        pbuf_free(rambuf);
 8006f0a:	9804      	ldr	r0, [sp, #16]
 8006f0c:	f000 fd1c 	bl	8007948 <pbuf_free>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8006f10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8006f14:	b00d      	add	sp, #52	; 0x34
 8006f16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        ip_frag_free_pbuf_custom_ref(pcr);
 8006f1a:	4638      	mov	r0, r7
 8006f1c:	f7ff fd66 	bl	80069ec <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8006f20:	9804      	ldr	r0, [sp, #16]
 8006f22:	f000 fd11 	bl	8007948 <pbuf_free>
  return ERR_MEM;
 8006f26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        goto memerr;
 8006f2a:	e7f3      	b.n	8006f14 <ip4_frag+0xf4>
    poff += newpbuflen;
 8006f2c:	44a0      	add	r8, r4
 8006f2e:	fa1f f888 	uxth.w	r8, r8
    last = (left <= netif->mtu - IP_HLEN);
 8006f32:	9b07      	ldr	r3, [sp, #28]
 8006f34:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8006f36:	3b14      	subs	r3, #20
    tmp = (IP_OFFMASK & (ofo));
 8006f38:	9a06      	ldr	r2, [sp, #24]
 8006f3a:	f3c2 000c 	ubfx	r0, r2, #0, #13
    if (!last) {
 8006f3e:	9a08      	ldr	r2, [sp, #32]
 8006f40:	429a      	cmp	r2, r3
 8006f42:	dd01      	ble.n	8006f48 <ip4_frag+0x128>
      tmp = tmp | IP_MF;
 8006f44:	f440 5000 	orr.w	r0, r0, #8192	; 0x2000
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8006f48:	f7fe fc18 	bl	800577c <lwip_htons>
 8006f4c:	f8ab 0006 	strh.w	r0, [fp, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 8006f50:	9e05      	ldr	r6, [sp, #20]
 8006f52:	f106 0014 	add.w	r0, r6, #20
 8006f56:	b280      	uxth	r0, r0
 8006f58:	f7fe fc10 	bl	800577c <lwip_htons>
 8006f5c:	f8ab 0002 	strh.w	r0, [fp, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8006f60:	2300      	movs	r3, #0
 8006f62:	f88b 300a 	strb.w	r3, [fp, #10]
 8006f66:	f88b 300b 	strb.w	r3, [fp, #11]
    netif->output(netif, rambuf, dest);
 8006f6a:	9807      	ldr	r0, [sp, #28]
 8006f6c:	6943      	ldr	r3, [r0, #20]
 8006f6e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006f70:	9f04      	ldr	r7, [sp, #16]
 8006f72:	4639      	mov	r1, r7
 8006f74:	4798      	blx	r3
    pbuf_free(rambuf);
 8006f76:	4638      	mov	r0, r7
 8006f78:	f000 fce6 	bl	8007948 <pbuf_free>
    left -= fragsize;
 8006f7c:	eba9 0306 	sub.w	r3, r9, r6
 8006f80:	fa1f f983 	uxth.w	r9, r3
    ofo += nfb;
 8006f84:	9b06      	ldr	r3, [sp, #24]
 8006f86:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006f88:	4413      	add	r3, r2
 8006f8a:	b29b      	uxth	r3, r3
 8006f8c:	9306      	str	r3, [sp, #24]
  while (left) {
 8006f8e:	f1b9 0f00 	cmp.w	r9, #0
 8006f92:	d029      	beq.n	8006fe8 <ip4_frag+0x1c8>
    fragsize = LWIP_MIN(left, nfb * 8);
 8006f94:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8006f98:	00db      	lsls	r3, r3, #3
 8006f9a:	f8cd 9020 	str.w	r9, [sp, #32]
 8006f9e:	454b      	cmp	r3, r9
 8006fa0:	bfa8      	it	ge
 8006fa2:	464b      	movge	r3, r9
 8006fa4:	b29b      	uxth	r3, r3
 8006fa6:	9305      	str	r3, [sp, #20]
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8006fa8:	2200      	movs	r2, #0
 8006faa:	2114      	movs	r1, #20
 8006fac:	2002      	movs	r0, #2
 8006fae:	f000 fd37 	bl	8007a20 <pbuf_alloc>
    if (rambuf == NULL) {
 8006fb2:	9004      	str	r0, [sp, #16]
 8006fb4:	b1d0      	cbz	r0, 8006fec <ip4_frag+0x1cc>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8006fb6:	896b      	ldrh	r3, [r5, #10]
 8006fb8:	2b13      	cmp	r3, #19
 8006fba:	f67f af71 	bls.w	8006ea0 <ip4_frag+0x80>
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8006fbe:	9f04      	ldr	r7, [sp, #16]
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	f8da 2000 	ldr.w	r2, [sl]
 8006fc6:	f8da 6004 	ldr.w	r6, [sl, #4]
 8006fca:	f8da 0008 	ldr.w	r0, [sl, #8]
 8006fce:	f8da 100c 	ldr.w	r1, [sl, #12]
 8006fd2:	601a      	str	r2, [r3, #0]
 8006fd4:	605e      	str	r6, [r3, #4]
 8006fd6:	6098      	str	r0, [r3, #8]
 8006fd8:	60d9      	str	r1, [r3, #12]
 8006fda:	f8da 2010 	ldr.w	r2, [sl, #16]
 8006fde:	611a      	str	r2, [r3, #16]
    iphdr = (struct ip_hdr *)rambuf->payload;
 8006fe0:	f8d7 b004 	ldr.w	fp, [r7, #4]
    left_to_copy = fragsize;
 8006fe4:	9e05      	ldr	r6, [sp, #20]
    while (left_to_copy) {
 8006fe6:	e783      	b.n	8006ef0 <ip4_frag+0xd0>
  return ERR_OK;
 8006fe8:	2000      	movs	r0, #0
 8006fea:	e793      	b.n	8006f14 <ip4_frag+0xf4>
  return ERR_MEM;
 8006fec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006ff0:	e790      	b.n	8006f14 <ip4_frag+0xf4>
 8006ff2:	bf00      	nop
 8006ff4:	0800de90 	.word	0x0800de90
 8006ff8:	0800dda0 	.word	0x0800dda0
 8006ffc:	0800d378 	.word	0x0800d378
 8007000:	0800ddc8 	.word	0x0800ddc8
 8007004:	0800dde4 	.word	0x0800dde4
 8007008:	08006a19 	.word	0x08006a19

0800700c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800700c:	b510      	push	{r4, lr}
 800700e:	4604      	mov	r4, r0
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8007010:	4b2d      	ldr	r3, [pc, #180]	; (80070c8 <plug_holes+0xbc>)
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	4283      	cmp	r3, r0
 8007016:	d831      	bhi.n	800707c <plug_holes+0x70>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8007018:	4b2c      	ldr	r3, [pc, #176]	; (80070cc <plug_holes+0xc0>)
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	429c      	cmp	r4, r3
 800701e:	d235      	bcs.n	800708c <plug_holes+0x80>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8007020:	7923      	ldrb	r3, [r4, #4]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d13a      	bne.n	800709c <plug_holes+0x90>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8007026:	8823      	ldrh	r3, [r4, #0]
 8007028:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800702c:	d83e      	bhi.n	80070ac <plug_holes+0xa0>

  nmem = (struct mem *)(void *)&ram[mem->next];
 800702e:	4b26      	ldr	r3, [pc, #152]	; (80070c8 <plug_holes+0xbc>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	8821      	ldrh	r1, [r4, #0]
 8007034:	185a      	adds	r2, r3, r1
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8007036:	4294      	cmp	r4, r2
 8007038:	d00f      	beq.n	800705a <plug_holes+0x4e>
 800703a:	7910      	ldrb	r0, [r2, #4]
 800703c:	b968      	cbnz	r0, 800705a <plug_holes+0x4e>
 800703e:	4823      	ldr	r0, [pc, #140]	; (80070cc <plug_holes+0xc0>)
 8007040:	6800      	ldr	r0, [r0, #0]
 8007042:	4282      	cmp	r2, r0
 8007044:	d009      	beq.n	800705a <plug_holes+0x4e>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8007046:	4822      	ldr	r0, [pc, #136]	; (80070d0 <plug_holes+0xc4>)
 8007048:	6800      	ldr	r0, [r0, #0]
 800704a:	4282      	cmp	r2, r0
 800704c:	d036      	beq.n	80070bc <plug_holes+0xb0>
      lfree = mem;
    }
    mem->next = nmem->next;
 800704e:	5a5a      	ldrh	r2, [r3, r1]
 8007050:	8022      	strh	r2, [r4, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 8007052:	5a5a      	ldrh	r2, [r3, r1]
 8007054:	441a      	add	r2, r3
 8007056:	1ae1      	subs	r1, r4, r3
 8007058:	8051      	strh	r1, [r2, #2]
  }

  /* plug hole backward */
  pmem = (struct mem *)(void *)&ram[mem->prev];
 800705a:	8861      	ldrh	r1, [r4, #2]
 800705c:	185a      	adds	r2, r3, r1
  if (pmem != mem && pmem->used == 0) {
 800705e:	4294      	cmp	r4, r2
 8007060:	d00b      	beq.n	800707a <plug_holes+0x6e>
 8007062:	7910      	ldrb	r0, [r2, #4]
 8007064:	b948      	cbnz	r0, 800707a <plug_holes+0x6e>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8007066:	481a      	ldr	r0, [pc, #104]	; (80070d0 <plug_holes+0xc4>)
 8007068:	6800      	ldr	r0, [r0, #0]
 800706a:	4284      	cmp	r4, r0
 800706c:	d029      	beq.n	80070c2 <plug_holes+0xb6>
      lfree = pmem;
    }
    pmem->next = mem->next;
 800706e:	8820      	ldrh	r0, [r4, #0]
 8007070:	5258      	strh	r0, [r3, r1]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 8007072:	8821      	ldrh	r1, [r4, #0]
 8007074:	4419      	add	r1, r3
 8007076:	1ad3      	subs	r3, r2, r3
 8007078:	804b      	strh	r3, [r1, #2]
 800707a:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800707c:	4b15      	ldr	r3, [pc, #84]	; (80070d4 <plug_holes+0xc8>)
 800707e:	f240 125d 	movw	r2, #349	; 0x15d
 8007082:	4915      	ldr	r1, [pc, #84]	; (80070d8 <plug_holes+0xcc>)
 8007084:	4815      	ldr	r0, [pc, #84]	; (80070dc <plug_holes+0xd0>)
 8007086:	f005 fdb2 	bl	800cbee <iprintf>
 800708a:	e7c5      	b.n	8007018 <plug_holes+0xc>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800708c:	4b11      	ldr	r3, [pc, #68]	; (80070d4 <plug_holes+0xc8>)
 800708e:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8007092:	4913      	ldr	r1, [pc, #76]	; (80070e0 <plug_holes+0xd4>)
 8007094:	4811      	ldr	r0, [pc, #68]	; (80070dc <plug_holes+0xd0>)
 8007096:	f005 fdaa 	bl	800cbee <iprintf>
 800709a:	e7c1      	b.n	8007020 <plug_holes+0x14>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800709c:	4b0d      	ldr	r3, [pc, #52]	; (80070d4 <plug_holes+0xc8>)
 800709e:	f240 125f 	movw	r2, #351	; 0x15f
 80070a2:	4910      	ldr	r1, [pc, #64]	; (80070e4 <plug_holes+0xd8>)
 80070a4:	480d      	ldr	r0, [pc, #52]	; (80070dc <plug_holes+0xd0>)
 80070a6:	f005 fda2 	bl	800cbee <iprintf>
 80070aa:	e7bc      	b.n	8007026 <plug_holes+0x1a>
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80070ac:	4b09      	ldr	r3, [pc, #36]	; (80070d4 <plug_holes+0xc8>)
 80070ae:	f44f 72b1 	mov.w	r2, #354	; 0x162
 80070b2:	490d      	ldr	r1, [pc, #52]	; (80070e8 <plug_holes+0xdc>)
 80070b4:	4809      	ldr	r0, [pc, #36]	; (80070dc <plug_holes+0xd0>)
 80070b6:	f005 fd9a 	bl	800cbee <iprintf>
 80070ba:	e7b8      	b.n	800702e <plug_holes+0x22>
      lfree = mem;
 80070bc:	4a04      	ldr	r2, [pc, #16]	; (80070d0 <plug_holes+0xc4>)
 80070be:	6014      	str	r4, [r2, #0]
 80070c0:	e7c5      	b.n	800704e <plug_holes+0x42>
      lfree = pmem;
 80070c2:	4803      	ldr	r0, [pc, #12]	; (80070d0 <plug_holes+0xc4>)
 80070c4:	6002      	str	r2, [r0, #0]
 80070c6:	e7d2      	b.n	800706e <plug_holes+0x62>
 80070c8:	20003f44 	.word	0x20003f44
 80070cc:	20003f48 	.word	0x20003f48
 80070d0:	20003f3c 	.word	0x20003f3c
 80070d4:	0800e094 	.word	0x0800e094
 80070d8:	0800e0c4 	.word	0x0800e0c4
 80070dc:	0800d378 	.word	0x0800d378
 80070e0:	0800e0dc 	.word	0x0800e0dc
 80070e4:	0800e0f8 	.word	0x0800e0f8
 80070e8:	0800e114 	.word	0x0800e114

080070ec <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 80070ec:	b508      	push	{r3, lr}

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80070ee:	4b11      	ldr	r3, [pc, #68]	; (8007134 <mem_init+0x48>)
 80070f0:	f023 0303 	bic.w	r3, r3, #3
 80070f4:	4a10      	ldr	r2, [pc, #64]	; (8007138 <mem_init+0x4c>)
 80070f6:	6013      	str	r3, [r2, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
  mem->next = MEM_SIZE_ALIGNED;
 80070f8:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 80070fc:	8019      	strh	r1, [r3, #0]
  mem->prev = 0;
 80070fe:	2200      	movs	r2, #0
 8007100:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8007102:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 8007104:	185a      	adds	r2, r3, r1
 8007106:	480d      	ldr	r0, [pc, #52]	; (800713c <mem_init+0x50>)
 8007108:	6002      	str	r2, [r0, #0]
  ram_end->used = 1;
 800710a:	2001      	movs	r0, #1
 800710c:	7110      	strb	r0, [r2, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800710e:	f8a3 1640 	strh.w	r1, [r3, #1600]	; 0x640
  ram_end->prev = MEM_SIZE_ALIGNED;
 8007112:	8051      	strh	r1, [r2, #2]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8007114:	4a0a      	ldr	r2, [pc, #40]	; (8007140 <mem_init+0x54>)
 8007116:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8007118:	480a      	ldr	r0, [pc, #40]	; (8007144 <mem_init+0x58>)
 800711a:	f004 ff4b 	bl	800bfb4 <sys_mutex_new>
 800711e:	b900      	cbnz	r0, 8007122 <mem_init+0x36>
 8007120:	bd08      	pop	{r3, pc}
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8007122:	4b09      	ldr	r3, [pc, #36]	; (8007148 <mem_init+0x5c>)
 8007124:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8007128:	4908      	ldr	r1, [pc, #32]	; (800714c <mem_init+0x60>)
 800712a:	4809      	ldr	r0, [pc, #36]	; (8007150 <mem_init+0x64>)
 800712c:	f005 fd5f 	bl	800cbee <iprintf>
  }
}
 8007130:	e7f6      	b.n	8007120 <mem_init+0x34>
 8007132:	bf00      	nop
 8007134:	20004287 	.word	0x20004287
 8007138:	20003f44 	.word	0x20003f44
 800713c:	20003f48 	.word	0x20003f48
 8007140:	20003f3c 	.word	0x20003f3c
 8007144:	20003f40 	.word	0x20003f40
 8007148:	0800e094 	.word	0x0800e094
 800714c:	0800dfa0 	.word	0x0800dfa0
 8007150:	0800d378 	.word	0x0800d378

08007154 <mem_free>:
mem_free(void *rmem)
{
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8007154:	2800      	cmp	r0, #0
 8007156:	d048      	beq.n	80071ea <mem_free+0x96>
{
 8007158:	b538      	push	{r3, r4, r5, lr}
 800715a:	4604      	mov	r4, r0
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 800715c:	f010 0f03 	tst.w	r0, #3
 8007160:	d11b      	bne.n	800719a <mem_free+0x46>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8007162:	4b22      	ldr	r3, [pc, #136]	; (80071ec <mem_free+0x98>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	429c      	cmp	r4, r3
 8007168:	d303      	bcc.n	8007172 <mem_free+0x1e>
 800716a:	4b21      	ldr	r3, [pc, #132]	; (80071f0 <mem_free+0x9c>)
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	429c      	cmp	r4, r3
 8007170:	d306      	bcc.n	8007180 <mem_free+0x2c>
 8007172:	4b20      	ldr	r3, [pc, #128]	; (80071f4 <mem_free+0xa0>)
 8007174:	f240 12af 	movw	r2, #431	; 0x1af
 8007178:	491f      	ldr	r1, [pc, #124]	; (80071f8 <mem_free+0xa4>)
 800717a:	4820      	ldr	r0, [pc, #128]	; (80071fc <mem_free+0xa8>)
 800717c:	f005 fd37 	bl	800cbee <iprintf>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8007180:	4b1a      	ldr	r3, [pc, #104]	; (80071ec <mem_free+0x98>)
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	429c      	cmp	r4, r3
 8007186:	d303      	bcc.n	8007190 <mem_free+0x3c>
 8007188:	4b19      	ldr	r3, [pc, #100]	; (80071f0 <mem_free+0x9c>)
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	429c      	cmp	r4, r3
 800718e:	d30c      	bcc.n	80071aa <mem_free+0x56>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 8007190:	f004 ff42 	bl	800c018 <sys_arch_protect>
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
 8007194:	f004 ff4c 	bl	800c030 <sys_arch_unprotect>
    return;
 8007198:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 800719a:	4b16      	ldr	r3, [pc, #88]	; (80071f4 <mem_free+0xa0>)
 800719c:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 80071a0:	4917      	ldr	r1, [pc, #92]	; (8007200 <mem_free+0xac>)
 80071a2:	4816      	ldr	r0, [pc, #88]	; (80071fc <mem_free+0xa8>)
 80071a4:	f005 fd23 	bl	800cbee <iprintf>
 80071a8:	e7db      	b.n	8007162 <mem_free+0xe>
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 80071aa:	4816      	ldr	r0, [pc, #88]	; (8007204 <mem_free+0xb0>)
 80071ac:	f004 ff13 	bl	800bfd6 <sys_mutex_lock>
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 80071b0:	f1a4 0508 	sub.w	r5, r4, #8
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 80071b4:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 80071b8:	b17b      	cbz	r3, 80071da <mem_free+0x86>
  /* ... and is now unused. */
  mem->used = 0;
 80071ba:	2300      	movs	r3, #0
 80071bc:	f804 3c04 	strb.w	r3, [r4, #-4]

  if (mem < lfree) {
 80071c0:	4b11      	ldr	r3, [pc, #68]	; (8007208 <mem_free+0xb4>)
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	429d      	cmp	r5, r3
 80071c6:	d201      	bcs.n	80071cc <mem_free+0x78>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 80071c8:	4b0f      	ldr	r3, [pc, #60]	; (8007208 <mem_free+0xb4>)
 80071ca:	601d      	str	r5, [r3, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 80071cc:	4628      	mov	r0, r5
 80071ce:	f7ff ff1d 	bl	800700c <plug_holes>
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 80071d2:	480c      	ldr	r0, [pc, #48]	; (8007204 <mem_free+0xb0>)
 80071d4:	f004 ff06 	bl	800bfe4 <sys_mutex_unlock>
 80071d8:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 80071da:	4b06      	ldr	r3, [pc, #24]	; (80071f4 <mem_free+0xa0>)
 80071dc:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 80071e0:	490a      	ldr	r1, [pc, #40]	; (800720c <mem_free+0xb8>)
 80071e2:	4806      	ldr	r0, [pc, #24]	; (80071fc <mem_free+0xa8>)
 80071e4:	f005 fd03 	bl	800cbee <iprintf>
 80071e8:	e7e7      	b.n	80071ba <mem_free+0x66>
 80071ea:	4770      	bx	lr
 80071ec:	20003f44 	.word	0x20003f44
 80071f0:	20003f48 	.word	0x20003f48
 80071f4:	0800e094 	.word	0x0800e094
 80071f8:	0800df74 	.word	0x0800df74
 80071fc:	0800d378 	.word	0x0800d378
 8007200:	0800df50 	.word	0x0800df50
 8007204:	20003f40 	.word	0x20003f40
 8007208:	20003f3c 	.word	0x20003f3c
 800720c:	0800df8c 	.word	0x0800df8c

08007210 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 8007210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007212:	4605      	mov	r5, r0
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 8007214:	1ccc      	adds	r4, r1, #3
 8007216:	b2a4      	uxth	r4, r4
 8007218:	f024 0403 	bic.w	r4, r4, #3
 800721c:	b2a4      	uxth	r4, r4

  if (newsize < MIN_SIZE_ALIGNED) {
 800721e:	2c0b      	cmp	r4, #11
 8007220:	d800      	bhi.n	8007224 <mem_trim+0x14>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8007222:	240c      	movs	r4, #12
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 8007224:	f5b4 6fc8 	cmp.w	r4, #1600	; 0x640
 8007228:	d879      	bhi.n	800731e <mem_trim+0x10e>
    return NULL;
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800722a:	4b3f      	ldr	r3, [pc, #252]	; (8007328 <mem_trim+0x118>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	42ab      	cmp	r3, r5
 8007230:	d803      	bhi.n	800723a <mem_trim+0x2a>
 8007232:	4b3e      	ldr	r3, [pc, #248]	; (800732c <mem_trim+0x11c>)
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	429d      	cmp	r5, r3
 8007238:	d306      	bcc.n	8007248 <mem_trim+0x38>
 800723a:	4b3d      	ldr	r3, [pc, #244]	; (8007330 <mem_trim+0x120>)
 800723c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8007240:	493c      	ldr	r1, [pc, #240]	; (8007334 <mem_trim+0x124>)
 8007242:	483d      	ldr	r0, [pc, #244]	; (8007338 <mem_trim+0x128>)
 8007244:	f005 fcd3 	bl	800cbee <iprintf>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8007248:	4b37      	ldr	r3, [pc, #220]	; (8007328 <mem_trim+0x118>)
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	429d      	cmp	r5, r3
 800724e:	d336      	bcc.n	80072be <mem_trim+0xae>
 8007250:	4a36      	ldr	r2, [pc, #216]	; (800732c <mem_trim+0x11c>)
 8007252:	6812      	ldr	r2, [r2, #0]
 8007254:	4295      	cmp	r5, r2
 8007256:	d232      	bcs.n	80072be <mem_trim+0xae>
    SYS_ARCH_UNPROTECT(lev);
    return rmem;
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8007258:	f1a5 0708 	sub.w	r7, r5, #8
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
 800725c:	1aff      	subs	r7, r7, r3
 800725e:	b2bf      	uxth	r7, r7

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 8007260:	f835 6c08 	ldrh.w	r6, [r5, #-8]
 8007264:	1bf6      	subs	r6, r6, r7
 8007266:	b2b6      	uxth	r6, r6
 8007268:	3e08      	subs	r6, #8
 800726a:	b2b6      	uxth	r6, r6
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800726c:	42b4      	cmp	r4, r6
 800726e:	d82c      	bhi.n	80072ca <mem_trim+0xba>
  if (newsize > size) {
 8007270:	42b4      	cmp	r4, r6
 8007272:	d856      	bhi.n	8007322 <mem_trim+0x112>
    /* not supported */
    return NULL;
  }
  if (newsize == size) {
 8007274:	d027      	beq.n	80072c6 <mem_trim+0xb6>
    /* No change in size, simply return */
    return rmem;
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8007276:	4831      	ldr	r0, [pc, #196]	; (800733c <mem_trim+0x12c>)
 8007278:	f004 fead 	bl	800bfd6 <sys_mutex_lock>

  mem2 = (struct mem *)(void *)&ram[mem->next];
 800727c:	4b2a      	ldr	r3, [pc, #168]	; (8007328 <mem_trim+0x118>)
 800727e:	681a      	ldr	r2, [r3, #0]
 8007280:	f835 3c08 	ldrh.w	r3, [r5, #-8]
 8007284:	18d1      	adds	r1, r2, r3
  if (mem2->used == 0) {
 8007286:	7908      	ldrb	r0, [r1, #4]
 8007288:	bb58      	cbnz	r0, 80072e2 <mem_trim+0xd2>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
 800728a:	5ad0      	ldrh	r0, [r2, r3]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800728c:	19e3      	adds	r3, r4, r7
 800728e:	b29b      	uxth	r3, r3
 8007290:	3308      	adds	r3, #8
 8007292:	b29b      	uxth	r3, r3
    if (lfree == mem2) {
 8007294:	4c2a      	ldr	r4, [pc, #168]	; (8007340 <mem_trim+0x130>)
 8007296:	6824      	ldr	r4, [r4, #0]
 8007298:	42a1      	cmp	r1, r4
 800729a:	d01e      	beq.n	80072da <mem_trim+0xca>
      lfree = (struct mem *)(void *)&ram[ptr2];
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
 800729c:	18d1      	adds	r1, r2, r3
    mem2->used = 0;
 800729e:	2400      	movs	r4, #0
 80072a0:	710c      	strb	r4, [r1, #4]
    /* restore the next pointer */
    mem2->next = next;
 80072a2:	52d0      	strh	r0, [r2, r3]
    /* link it back to mem */
    mem2->prev = ptr;
 80072a4:	804f      	strh	r7, [r1, #2]
    /* link mem to it */
    mem->next = ptr2;
 80072a6:	f825 3c08 	strh.w	r3, [r5, #-8]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80072aa:	5ad1      	ldrh	r1, [r2, r3]
 80072ac:	f5b1 6fc8 	cmp.w	r1, #1600	; 0x640
 80072b0:	d001      	beq.n	80072b6 <mem_trim+0xa6>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 80072b2:	440a      	add	r2, r1
 80072b4:	8053      	strh	r3, [r2, #2]
    -> the remaining space stays unused since it is too small
  } */
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 80072b6:	4821      	ldr	r0, [pc, #132]	; (800733c <mem_trim+0x12c>)
 80072b8:	f004 fe94 	bl	800bfe4 <sys_mutex_unlock>
  return rmem;
 80072bc:	e003      	b.n	80072c6 <mem_trim+0xb6>
    SYS_ARCH_PROTECT(lev);
 80072be:	f004 feab 	bl	800c018 <sys_arch_protect>
    SYS_ARCH_UNPROTECT(lev);
 80072c2:	f004 feb5 	bl	800c030 <sys_arch_unprotect>
}
 80072c6:	4628      	mov	r0, r5
 80072c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80072ca:	4b19      	ldr	r3, [pc, #100]	; (8007330 <mem_trim+0x120>)
 80072cc:	f240 2206 	movw	r2, #518	; 0x206
 80072d0:	491c      	ldr	r1, [pc, #112]	; (8007344 <mem_trim+0x134>)
 80072d2:	4819      	ldr	r0, [pc, #100]	; (8007338 <mem_trim+0x128>)
 80072d4:	f005 fc8b 	bl	800cbee <iprintf>
 80072d8:	e7ca      	b.n	8007270 <mem_trim+0x60>
      lfree = (struct mem *)(void *)&ram[ptr2];
 80072da:	18d1      	adds	r1, r2, r3
 80072dc:	4c18      	ldr	r4, [pc, #96]	; (8007340 <mem_trim+0x130>)
 80072de:	6021      	str	r1, [r4, #0]
 80072e0:	e7dc      	b.n	800729c <mem_trim+0x8c>
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80072e2:	f104 0314 	add.w	r3, r4, #20
 80072e6:	42b3      	cmp	r3, r6
 80072e8:	d8e5      	bhi.n	80072b6 <mem_trim+0xa6>
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 80072ea:	19e3      	adds	r3, r4, r7
 80072ec:	b29b      	uxth	r3, r3
 80072ee:	3308      	adds	r3, #8
 80072f0:	b29b      	uxth	r3, r3
    mem2 = (struct mem *)(void *)&ram[ptr2];
 80072f2:	18d1      	adds	r1, r2, r3
    if (mem2 < lfree) {
 80072f4:	4812      	ldr	r0, [pc, #72]	; (8007340 <mem_trim+0x130>)
 80072f6:	6800      	ldr	r0, [r0, #0]
 80072f8:	4281      	cmp	r1, r0
 80072fa:	d201      	bcs.n	8007300 <mem_trim+0xf0>
      lfree = mem2;
 80072fc:	4810      	ldr	r0, [pc, #64]	; (8007340 <mem_trim+0x130>)
 80072fe:	6001      	str	r1, [r0, #0]
    mem2->used = 0;
 8007300:	2000      	movs	r0, #0
 8007302:	7108      	strb	r0, [r1, #4]
    mem2->next = mem->next;
 8007304:	f835 0c08 	ldrh.w	r0, [r5, #-8]
 8007308:	52d0      	strh	r0, [r2, r3]
    mem2->prev = ptr;
 800730a:	804f      	strh	r7, [r1, #2]
    mem->next = ptr2;
 800730c:	f825 3c08 	strh.w	r3, [r5, #-8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8007310:	5ad1      	ldrh	r1, [r2, r3]
 8007312:	f5b1 6fc8 	cmp.w	r1, #1600	; 0x640
 8007316:	d0ce      	beq.n	80072b6 <mem_trim+0xa6>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8007318:	440a      	add	r2, r1
 800731a:	8053      	strh	r3, [r2, #2]
 800731c:	e7cb      	b.n	80072b6 <mem_trim+0xa6>
    return NULL;
 800731e:	2500      	movs	r5, #0
 8007320:	e7d1      	b.n	80072c6 <mem_trim+0xb6>
    return NULL;
 8007322:	2500      	movs	r5, #0
 8007324:	e7cf      	b.n	80072c6 <mem_trim+0xb6>
 8007326:	bf00      	nop
 8007328:	20003f44 	.word	0x20003f44
 800732c:	20003f48 	.word	0x20003f48
 8007330:	0800e094 	.word	0x0800e094
 8007334:	0800e05c 	.word	0x0800e05c
 8007338:	0800d378 	.word	0x0800d378
 800733c:	20003f40 	.word	0x20003f40
 8007340:	20003f3c 	.word	0x20003f3c
 8007344:	0800e074 	.word	0x0800e074

08007348 <mem_malloc>:
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 8007348:	2800      	cmp	r0, #0
 800734a:	f000 808e 	beq.w	800746a <mem_malloc+0x122>
{
 800734e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007350:	4605      	mov	r5, r0
    return NULL;
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 8007352:	3503      	adds	r5, #3
 8007354:	b2ad      	uxth	r5, r5
 8007356:	f025 0503 	bic.w	r5, r5, #3
 800735a:	b2ad      	uxth	r5, r5

  if (size < MIN_SIZE_ALIGNED) {
 800735c:	2d0b      	cmp	r5, #11
 800735e:	d800      	bhi.n	8007362 <mem_malloc+0x1a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8007360:	250c      	movs	r5, #12
  }

  if (size > MEM_SIZE_ALIGNED) {
 8007362:	f5b5 6fc8 	cmp.w	r5, #1600	; 0x640
 8007366:	f200 8082 	bhi.w	800746e <mem_malloc+0x126>
    return NULL;
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800736a:	4842      	ldr	r0, [pc, #264]	; (8007474 <mem_malloc+0x12c>)
 800736c:	f004 fe33 	bl	800bfd6 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8007370:	4b41      	ldr	r3, [pc, #260]	; (8007478 <mem_malloc+0x130>)
 8007372:	6818      	ldr	r0, [r3, #0]
 8007374:	4b41      	ldr	r3, [pc, #260]	; (800747c <mem_malloc+0x134>)
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	1a1b      	subs	r3, r3, r0
 800737a:	b29b      	uxth	r3, r3
 800737c:	e049      	b.n	8007412 <mem_malloc+0xca>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800737e:	2301      	movs	r3, #1
 8007380:	7123      	strb	r3, [r4, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8007382:	4b3e      	ldr	r3, [pc, #248]	; (800747c <mem_malloc+0x134>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	429c      	cmp	r4, r3
 8007388:	d014      	beq.n	80073b4 <mem_malloc+0x6c>
          }
          lfree = cur;
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800738a:	483a      	ldr	r0, [pc, #232]	; (8007474 <mem_malloc+0x12c>)
 800738c:	f004 fe2a 	bl	800bfe4 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8007390:	4426      	add	r6, r4
 8007392:	3608      	adds	r6, #8
 8007394:	4b3a      	ldr	r3, [pc, #232]	; (8007480 <mem_malloc+0x138>)
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	429e      	cmp	r6, r3
 800739a:	d821      	bhi.n	80073e0 <mem_malloc+0x98>
         (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800739c:	f014 0503 	ands.w	r5, r4, #3
 80073a0:	d126      	bne.n	80073f0 <mem_malloc+0xa8>
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 80073a2:	2d00      	cmp	r5, #0
 80073a4:	d12c      	bne.n	8007400 <mem_malloc+0xb8>
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 80073a6:	f104 0008 	add.w	r0, r4, #8
 80073aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            cur = (struct mem *)(void *)&ram[cur->next];
 80073ac:	4a32      	ldr	r2, [pc, #200]	; (8007478 <mem_malloc+0x130>)
 80073ae:	6812      	ldr	r2, [r2, #0]
 80073b0:	881b      	ldrh	r3, [r3, #0]
 80073b2:	4413      	add	r3, r2
          while (cur->used && cur != ram_end) {
 80073b4:	791a      	ldrb	r2, [r3, #4]
 80073b6:	b11a      	cbz	r2, 80073c0 <mem_malloc+0x78>
 80073b8:	4931      	ldr	r1, [pc, #196]	; (8007480 <mem_malloc+0x138>)
 80073ba:	6809      	ldr	r1, [r1, #0]
 80073bc:	428b      	cmp	r3, r1
 80073be:	d1f5      	bne.n	80073ac <mem_malloc+0x64>
          lfree = cur;
 80073c0:	492e      	ldr	r1, [pc, #184]	; (800747c <mem_malloc+0x134>)
 80073c2:	600b      	str	r3, [r1, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80073c4:	492e      	ldr	r1, [pc, #184]	; (8007480 <mem_malloc+0x138>)
 80073c6:	6809      	ldr	r1, [r1, #0]
 80073c8:	428b      	cmp	r3, r1
 80073ca:	d0de      	beq.n	800738a <mem_malloc+0x42>
 80073cc:	2a00      	cmp	r2, #0
 80073ce:	d0dc      	beq.n	800738a <mem_malloc+0x42>
 80073d0:	4b2c      	ldr	r3, [pc, #176]	; (8007484 <mem_malloc+0x13c>)
 80073d2:	f240 22cf 	movw	r2, #719	; 0x2cf
 80073d6:	492c      	ldr	r1, [pc, #176]	; (8007488 <mem_malloc+0x140>)
 80073d8:	482c      	ldr	r0, [pc, #176]	; (800748c <mem_malloc+0x144>)
 80073da:	f005 fc08 	bl	800cbee <iprintf>
 80073de:	e7d4      	b.n	800738a <mem_malloc+0x42>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80073e0:	4b28      	ldr	r3, [pc, #160]	; (8007484 <mem_malloc+0x13c>)
 80073e2:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 80073e6:	492a      	ldr	r1, [pc, #168]	; (8007490 <mem_malloc+0x148>)
 80073e8:	4828      	ldr	r0, [pc, #160]	; (800748c <mem_malloc+0x144>)
 80073ea:	f005 fc00 	bl	800cbee <iprintf>
 80073ee:	e7d5      	b.n	800739c <mem_malloc+0x54>
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80073f0:	4b24      	ldr	r3, [pc, #144]	; (8007484 <mem_malloc+0x13c>)
 80073f2:	f240 22d6 	movw	r2, #726	; 0x2d6
 80073f6:	4927      	ldr	r1, [pc, #156]	; (8007494 <mem_malloc+0x14c>)
 80073f8:	4824      	ldr	r0, [pc, #144]	; (800748c <mem_malloc+0x144>)
 80073fa:	f005 fbf8 	bl	800cbee <iprintf>
 80073fe:	e7d0      	b.n	80073a2 <mem_malloc+0x5a>
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8007400:	4b20      	ldr	r3, [pc, #128]	; (8007484 <mem_malloc+0x13c>)
 8007402:	f44f 7236 	mov.w	r2, #728	; 0x2d8
 8007406:	4924      	ldr	r1, [pc, #144]	; (8007498 <mem_malloc+0x150>)
 8007408:	4820      	ldr	r0, [pc, #128]	; (800748c <mem_malloc+0x144>)
 800740a:	f005 fbf0 	bl	800cbee <iprintf>
 800740e:	e7ca      	b.n	80073a6 <mem_malloc+0x5e>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 8007410:	8823      	ldrh	r3, [r4, #0]
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8007412:	461f      	mov	r7, r3
 8007414:	462e      	mov	r6, r5
 8007416:	f5c5 61c8 	rsb	r1, r5, #1600	; 0x640
 800741a:	428b      	cmp	r3, r1
 800741c:	d220      	bcs.n	8007460 <mem_malloc+0x118>
      mem = (struct mem *)(void *)&ram[ptr];
 800741e:	18c4      	adds	r4, r0, r3
      if ((!mem->used) &&
 8007420:	7921      	ldrb	r1, [r4, #4]
 8007422:	2900      	cmp	r1, #0
 8007424:	d1f4      	bne.n	8007410 <mem_malloc+0xc8>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8007426:	5ac2      	ldrh	r2, [r0, r3]
 8007428:	1bd2      	subs	r2, r2, r7
 800742a:	3a08      	subs	r2, #8
      if ((!mem->used) &&
 800742c:	4296      	cmp	r6, r2
 800742e:	d8ef      	bhi.n	8007410 <mem_malloc+0xc8>
        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8007430:	f106 0114 	add.w	r1, r6, #20
 8007434:	428a      	cmp	r2, r1
 8007436:	d3a2      	bcc.n	800737e <mem_malloc+0x36>
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 8007438:	18ea      	adds	r2, r5, r3
 800743a:	b292      	uxth	r2, r2
 800743c:	3208      	adds	r2, #8
 800743e:	b292      	uxth	r2, r2
          mem2 = (struct mem *)(void *)&ram[ptr2];
 8007440:	1881      	adds	r1, r0, r2
          mem2->used = 0;
 8007442:	2500      	movs	r5, #0
 8007444:	710d      	strb	r5, [r1, #4]
          mem2->next = mem->next;
 8007446:	8825      	ldrh	r5, [r4, #0]
 8007448:	5285      	strh	r5, [r0, r2]
          mem2->prev = ptr;
 800744a:	804b      	strh	r3, [r1, #2]
          mem->next = ptr2;
 800744c:	8022      	strh	r2, [r4, #0]
          mem->used = 1;
 800744e:	2301      	movs	r3, #1
 8007450:	7123      	strb	r3, [r4, #4]
          if (mem2->next != MEM_SIZE_ALIGNED) {
 8007452:	5a83      	ldrh	r3, [r0, r2]
 8007454:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007458:	d093      	beq.n	8007382 <mem_malloc+0x3a>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800745a:	4418      	add	r0, r3
 800745c:	8042      	strh	r2, [r0, #2]
 800745e:	e790      	b.n	8007382 <mem_malloc+0x3a>
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8007460:	4804      	ldr	r0, [pc, #16]	; (8007474 <mem_malloc+0x12c>)
 8007462:	f004 fdbf 	bl	800bfe4 <sys_mutex_unlock>
  return NULL;
 8007466:	2000      	movs	r0, #0
 8007468:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return NULL;
 800746a:	2000      	movs	r0, #0
 800746c:	4770      	bx	lr
    return NULL;
 800746e:	2000      	movs	r0, #0
}
 8007470:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007472:	bf00      	nop
 8007474:	20003f40 	.word	0x20003f40
 8007478:	20003f44 	.word	0x20003f44
 800747c:	20003f3c 	.word	0x20003f3c
 8007480:	20003f48 	.word	0x20003f48
 8007484:	0800e094 	.word	0x0800e094
 8007488:	0800dfbc 	.word	0x0800dfbc
 800748c:	0800d378 	.word	0x0800d378
 8007490:	0800dfd8 	.word	0x0800dfd8
 8007494:	0800e008 	.word	0x0800e008
 8007498:	0800e038 	.word	0x0800e038

0800749c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
 800749c:	b538      	push	{r3, r4, r5, lr}
 800749e:	4604      	mov	r4, r0

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 80074a0:	f004 fdba 	bl	800c018 <sys_arch_protect>
 80074a4:	4605      	mov	r5, r0

  memp = *desc->tab;
 80074a6:	68a3      	ldr	r3, [r4, #8]
 80074a8:	681c      	ldr	r4, [r3, #0]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80074aa:	b18c      	cbz	r4, 80074d0 <do_memp_malloc_pool+0x34>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80074ac:	6822      	ldr	r2, [r4, #0]
 80074ae:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80074b0:	f014 0f03 	tst.w	r4, #3
 80074b4:	d104      	bne.n	80074c0 <do_memp_malloc_pool+0x24>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 80074b6:	4628      	mov	r0, r5
 80074b8:	f004 fdba 	bl	800c030 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t*)memp + MEMP_SIZE);
 80074bc:	4620      	mov	r0, r4
 80074be:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80074c0:	4b05      	ldr	r3, [pc, #20]	; (80074d8 <do_memp_malloc_pool+0x3c>)
 80074c2:	f240 1249 	movw	r2, #329	; 0x149
 80074c6:	4905      	ldr	r1, [pc, #20]	; (80074dc <do_memp_malloc_pool+0x40>)
 80074c8:	4805      	ldr	r0, [pc, #20]	; (80074e0 <do_memp_malloc_pool+0x44>)
 80074ca:	f005 fb90 	bl	800cbee <iprintf>
 80074ce:	e7f2      	b.n	80074b6 <do_memp_malloc_pool+0x1a>
#if MEMP_STATS
    desc->stats->err++;
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
 80074d0:	f004 fdae 	bl	800c030 <sys_arch_unprotect>
  return NULL;
 80074d4:	2000      	movs	r0, #0
}
 80074d6:	bd38      	pop	{r3, r4, r5, pc}
 80074d8:	0800e160 	.word	0x0800e160
 80074dc:	0800e190 	.word	0x0800e190
 80074e0:	0800d378 	.word	0x0800d378

080074e4 <do_memp_free_pool>:
  return memp;
}

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
{
 80074e4:	b538      	push	{r3, r4, r5, lr}
 80074e6:	4605      	mov	r5, r0
 80074e8:	460c      	mov	r4, r1
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80074ea:	f011 0f03 	tst.w	r1, #3
 80074ee:	d109      	bne.n	8007504 <do_memp_free_pool+0x20>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);

  SYS_ARCH_PROTECT(old_level);
 80074f0:	f004 fd92 	bl	800c018 <sys_arch_protect>
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80074f4:	68ab      	ldr	r3, [r5, #8]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	6023      	str	r3, [r4, #0]
  *desc->tab = memp;
 80074fa:	68ab      	ldr	r3, [r5, #8]
 80074fc:	601c      	str	r4, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 80074fe:	f004 fd97 	bl	800c030 <sys_arch_unprotect>
 8007502:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("memp_free: mem properly aligned",
 8007504:	4b03      	ldr	r3, [pc, #12]	; (8007514 <do_memp_free_pool+0x30>)
 8007506:	f240 129d 	movw	r2, #413	; 0x19d
 800750a:	4903      	ldr	r1, [pc, #12]	; (8007518 <do_memp_free_pool+0x34>)
 800750c:	4803      	ldr	r0, [pc, #12]	; (800751c <do_memp_free_pool+0x38>)
 800750e:	f005 fb6e 	bl	800cbee <iprintf>
 8007512:	e7ed      	b.n	80074f0 <do_memp_free_pool+0xc>
 8007514:	0800e160 	.word	0x0800e160
 8007518:	0800e140 	.word	0x0800e140
 800751c:	0800d378 	.word	0x0800d378

08007520 <memp_init_pool>:
  *desc->tab = NULL;
 8007520:	6883      	ldr	r3, [r0, #8]
 8007522:	2200      	movs	r2, #0
 8007524:	601a      	str	r2, [r3, #0]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 8007526:	6843      	ldr	r3, [r0, #4]
 8007528:	3303      	adds	r3, #3
 800752a:	f023 0303 	bic.w	r3, r3, #3
  for (i = 0; i < desc->num; ++i) {
 800752e:	e007      	b.n	8007540 <memp_init_pool+0x20>
    memp->next = *desc->tab;
 8007530:	6881      	ldr	r1, [r0, #8]
 8007532:	6809      	ldr	r1, [r1, #0]
 8007534:	6019      	str	r1, [r3, #0]
    *desc->tab = memp;
 8007536:	6881      	ldr	r1, [r0, #8]
 8007538:	600b      	str	r3, [r1, #0]
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800753a:	8801      	ldrh	r1, [r0, #0]
 800753c:	440b      	add	r3, r1
  for (i = 0; i < desc->num; ++i) {
 800753e:	3201      	adds	r2, #1
 8007540:	8841      	ldrh	r1, [r0, #2]
 8007542:	428a      	cmp	r2, r1
 8007544:	dbf4      	blt.n	8007530 <memp_init_pool+0x10>
}
 8007546:	4770      	bx	lr

08007548 <memp_init>:
{
 8007548:	b510      	push	{r4, lr}
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800754a:	2400      	movs	r4, #0
 800754c:	e006      	b.n	800755c <memp_init+0x14>
    memp_init_pool(memp_pools[i]);
 800754e:	4b05      	ldr	r3, [pc, #20]	; (8007564 <memp_init+0x1c>)
 8007550:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8007554:	f7ff ffe4 	bl	8007520 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8007558:	3401      	adds	r4, #1
 800755a:	b2a4      	uxth	r4, r4
 800755c:	2c0c      	cmp	r4, #12
 800755e:	d9f6      	bls.n	800754e <memp_init+0x6>
}
 8007560:	bd10      	pop	{r4, pc}
 8007562:	bf00      	nop
 8007564:	0800e28c 	.word	0x0800e28c

08007568 <memp_malloc>:
{
 8007568:	b508      	push	{r3, lr}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800756a:	280c      	cmp	r0, #12
 800756c:	d805      	bhi.n	800757a <memp_malloc+0x12>
  memp = do_memp_malloc_pool(memp_pools[type]);
 800756e:	4b07      	ldr	r3, [pc, #28]	; (800758c <memp_malloc+0x24>)
 8007570:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8007574:	f7ff ff92 	bl	800749c <do_memp_malloc_pool>
}
 8007578:	bd08      	pop	{r3, pc}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800757a:	4b05      	ldr	r3, [pc, #20]	; (8007590 <memp_malloc+0x28>)
 800757c:	f240 1287 	movw	r2, #391	; 0x187
 8007580:	4904      	ldr	r1, [pc, #16]	; (8007594 <memp_malloc+0x2c>)
 8007582:	4805      	ldr	r0, [pc, #20]	; (8007598 <memp_malloc+0x30>)
 8007584:	f005 fb33 	bl	800cbee <iprintf>
 8007588:	2000      	movs	r0, #0
 800758a:	bd08      	pop	{r3, pc}
 800758c:	0800e28c 	.word	0x0800e28c
 8007590:	0800e160 	.word	0x0800e160
 8007594:	0800e26c 	.word	0x0800e26c
 8007598:	0800d378 	.word	0x0800d378

0800759c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800759c:	b508      	push	{r3, lr}
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800759e:	280c      	cmp	r0, #12
 80075a0:	d806      	bhi.n	80075b0 <memp_free+0x14>

  if (mem == NULL) {
 80075a2:	b121      	cbz	r1, 80075ae <memp_free+0x12>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80075a4:	4b06      	ldr	r3, [pc, #24]	; (80075c0 <memp_free+0x24>)
 80075a6:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80075aa:	f7ff ff9b 	bl	80074e4 <do_memp_free_pool>
 80075ae:	bd08      	pop	{r3, pc}
  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80075b0:	4b04      	ldr	r3, [pc, #16]	; (80075c4 <memp_free+0x28>)
 80075b2:	f240 12db 	movw	r2, #475	; 0x1db
 80075b6:	4904      	ldr	r1, [pc, #16]	; (80075c8 <memp_free+0x2c>)
 80075b8:	4804      	ldr	r0, [pc, #16]	; (80075cc <memp_free+0x30>)
 80075ba:	f005 fb18 	bl	800cbee <iprintf>
 80075be:	bd08      	pop	{r3, pc}
 80075c0:	0800e28c 	.word	0x0800e28c
 80075c4:	0800e160 	.word	0x0800e160
 80075c8:	0800e250 	.word	0x0800e250
 80075cc:	0800d378 	.word	0x0800d378

080075d0 <netif_issue_reports>:
 */
static void
netif_issue_reports(struct netif* netif, u8_t report_type)
{
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80075d0:	f011 0f01 	tst.w	r1, #1
 80075d4:	d00c      	beq.n	80075f0 <netif_issue_reports+0x20>
{
 80075d6:	b508      	push	{r3, lr}
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80075d8:	6843      	ldr	r3, [r0, #4]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80075da:	b123      	cbz	r3, 80075e6 <netif_issue_reports+0x16>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80075dc:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
 80075e0:	f013 0f08 	tst.w	r3, #8
 80075e4:	d100      	bne.n	80075e8 <netif_issue_reports+0x18>
 80075e6:	bd08      	pop	{r3, pc}
      etharp_gratuitous(netif);
 80075e8:	1d01      	adds	r1, r0, #4
 80075ea:	f7fe fb33 	bl	8005c54 <etharp_request>
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
 80075ee:	e7fa      	b.n	80075e6 <netif_issue_reports+0x16>
 80075f0:	4770      	bx	lr

080075f2 <netif_init>:
{
 80075f2:	4770      	bx	lr

080075f4 <netif_set_ipaddr>:
{
 80075f4:	b570      	push	{r4, r5, r6, lr}
 80075f6:	b082      	sub	sp, #8
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 80075f8:	460d      	mov	r5, r1
 80075fa:	b1c1      	cbz	r1, 800762e <netif_set_ipaddr+0x3a>
 80075fc:	680a      	ldr	r2, [r1, #0]
 80075fe:	9201      	str	r2, [sp, #4]
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 8007600:	6842      	ldr	r2, [r0, #4]
 8007602:	9901      	ldr	r1, [sp, #4]
 8007604:	4291      	cmp	r1, r2
 8007606:	d010      	beq.n	800762a <netif_set_ipaddr+0x36>
 8007608:	4604      	mov	r4, r0
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 800760a:	1d06      	adds	r6, r0, #4
 800760c:	a901      	add	r1, sp, #4
 800760e:	4630      	mov	r0, r6
 8007610:	f001 fc62 	bl	8008ed8 <tcp_netif_ip_addr_changed>
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 8007614:	a901      	add	r1, sp, #4
 8007616:	4630      	mov	r0, r6
 8007618:	f004 fb54 	bl	800bcc4 <udp_netif_ip_addr_changed>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800761c:	b15d      	cbz	r5, 8007636 <netif_set_ipaddr+0x42>
 800761e:	682b      	ldr	r3, [r5, #0]
 8007620:	6063      	str	r3, [r4, #4]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8007622:	2101      	movs	r1, #1
 8007624:	4620      	mov	r0, r4
 8007626:	f7ff ffd3 	bl	80075d0 <netif_issue_reports>
}
 800762a:	b002      	add	sp, #8
 800762c:	bd70      	pop	{r4, r5, r6, pc}
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 800762e:	4a03      	ldr	r2, [pc, #12]	; (800763c <netif_set_ipaddr+0x48>)
 8007630:	6812      	ldr	r2, [r2, #0]
 8007632:	9201      	str	r2, [sp, #4]
 8007634:	e7e4      	b.n	8007600 <netif_set_ipaddr+0xc>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8007636:	2300      	movs	r3, #0
 8007638:	e7f2      	b.n	8007620 <netif_set_ipaddr+0x2c>
 800763a:	bf00      	nop
 800763c:	0800dd9c 	.word	0x0800dd9c

08007640 <netif_set_gw>:
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8007640:	b111      	cbz	r1, 8007648 <netif_set_gw+0x8>
 8007642:	680b      	ldr	r3, [r1, #0]
 8007644:	60c3      	str	r3, [r0, #12]
 8007646:	4770      	bx	lr
 8007648:	2300      	movs	r3, #0
 800764a:	e7fb      	b.n	8007644 <netif_set_gw+0x4>

0800764c <netif_set_netmask>:
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800764c:	b111      	cbz	r1, 8007654 <netif_set_netmask+0x8>
 800764e:	680b      	ldr	r3, [r1, #0]
 8007650:	6083      	str	r3, [r0, #8]
 8007652:	4770      	bx	lr
 8007654:	2300      	movs	r3, #0
 8007656:	e7fb      	b.n	8007650 <netif_set_netmask+0x4>

08007658 <netif_set_addr>:
{
 8007658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800765a:	4604      	mov	r4, r0
 800765c:	4617      	mov	r7, r2
 800765e:	461e      	mov	r6, r3
  if (ip4_addr_isany(ipaddr)) {
 8007660:	460d      	mov	r5, r1
 8007662:	b109      	cbz	r1, 8007668 <netif_set_addr+0x10>
 8007664:	680b      	ldr	r3, [r1, #0]
 8007666:	b963      	cbnz	r3, 8007682 <netif_set_addr+0x2a>
    netif_set_ipaddr(netif, ipaddr);
 8007668:	4629      	mov	r1, r5
 800766a:	4620      	mov	r0, r4
 800766c:	f7ff ffc2 	bl	80075f4 <netif_set_ipaddr>
    netif_set_netmask(netif, netmask);
 8007670:	4639      	mov	r1, r7
 8007672:	4620      	mov	r0, r4
 8007674:	f7ff ffea 	bl	800764c <netif_set_netmask>
    netif_set_gw(netif, gw);
 8007678:	4631      	mov	r1, r6
 800767a:	4620      	mov	r0, r4
 800767c:	f7ff ffe0 	bl	8007640 <netif_set_gw>
 8007680:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    netif_set_netmask(netif, netmask);
 8007682:	4611      	mov	r1, r2
 8007684:	f7ff ffe2 	bl	800764c <netif_set_netmask>
    netif_set_gw(netif, gw);
 8007688:	4631      	mov	r1, r6
 800768a:	4620      	mov	r0, r4
 800768c:	f7ff ffd8 	bl	8007640 <netif_set_gw>
    netif_set_ipaddr(netif, ipaddr);
 8007690:	4629      	mov	r1, r5
 8007692:	4620      	mov	r0, r4
 8007694:	f7ff ffae 	bl	80075f4 <netif_set_ipaddr>
 8007698:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800769c <netif_add>:
{
 800769c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076a0:	4604      	mov	r4, r0
 80076a2:	460e      	mov	r6, r1
 80076a4:	4617      	mov	r7, r2
 80076a6:	4698      	mov	r8, r3
 80076a8:	9d07      	ldr	r5, [sp, #28]
  LWIP_ASSERT("No init function given", init != NULL);
 80076aa:	b315      	cbz	r5, 80076f2 <netif_add+0x56>
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80076ac:	2300      	movs	r3, #0
 80076ae:	6063      	str	r3, [r4, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80076b0:	60a3      	str	r3, [r4, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80076b2:	60e3      	str	r3, [r4, #12]
  netif->flags = 0;
 80076b4:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 80076b8:	2303      	movs	r3, #3
 80076ba:	f884 3020 	strb.w	r3, [r4, #32]
  netif->state = state;
 80076be:	9b06      	ldr	r3, [sp, #24]
 80076c0:	61e3      	str	r3, [r4, #28]
  netif->num = netif_num++;
 80076c2:	4a11      	ldr	r2, [pc, #68]	; (8007708 <netif_add+0x6c>)
 80076c4:	7813      	ldrb	r3, [r2, #0]
 80076c6:	1c59      	adds	r1, r3, #1
 80076c8:	7011      	strb	r1, [r2, #0]
 80076ca:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
  netif->input = input;
 80076ce:	9b08      	ldr	r3, [sp, #32]
 80076d0:	6123      	str	r3, [r4, #16]
  netif_set_addr(netif, ipaddr, netmask, gw);
 80076d2:	4643      	mov	r3, r8
 80076d4:	463a      	mov	r2, r7
 80076d6:	4631      	mov	r1, r6
 80076d8:	4620      	mov	r0, r4
 80076da:	f7ff ffbd 	bl	8007658 <netif_set_addr>
  if (init(netif) != ERR_OK) {
 80076de:	4620      	mov	r0, r4
 80076e0:	47a8      	blx	r5
 80076e2:	b968      	cbnz	r0, 8007700 <netif_add+0x64>
  netif->next = netif_list;
 80076e4:	4b09      	ldr	r3, [pc, #36]	; (800770c <netif_add+0x70>)
 80076e6:	681a      	ldr	r2, [r3, #0]
 80076e8:	6022      	str	r2, [r4, #0]
  netif_list = netif;
 80076ea:	601c      	str	r4, [r3, #0]
  return netif;
 80076ec:	4620      	mov	r0, r4
 80076ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("No init function given", init != NULL);
 80076f2:	4b07      	ldr	r3, [pc, #28]	; (8007710 <netif_add+0x74>)
 80076f4:	22fb      	movs	r2, #251	; 0xfb
 80076f6:	4907      	ldr	r1, [pc, #28]	; (8007714 <netif_add+0x78>)
 80076f8:	4807      	ldr	r0, [pc, #28]	; (8007718 <netif_add+0x7c>)
 80076fa:	f005 fa78 	bl	800cbee <iprintf>
 80076fe:	e7d5      	b.n	80076ac <netif_add+0x10>
    return NULL;
 8007700:	2000      	movs	r0, #0
}
 8007702:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007706:	bf00      	nop
 8007708:	20003f80 	.word	0x20003f80
 800770c:	2000796c 	.word	0x2000796c
 8007710:	0800e2c0 	.word	0x0800e2c0
 8007714:	0800e2f4 	.word	0x0800e2f4
 8007718:	0800d378 	.word	0x0800d378

0800771c <netif_set_default>:
  netif_default = netif;
 800771c:	4b01      	ldr	r3, [pc, #4]	; (8007724 <netif_set_default+0x8>)
 800771e:	6018      	str	r0, [r3, #0]
 8007720:	4770      	bx	lr
 8007722:	bf00      	nop
 8007724:	20007970 	.word	0x20007970

08007728 <netif_set_up>:
{
 8007728:	b508      	push	{r3, lr}
  if (!(netif->flags & NETIF_FLAG_UP)) {
 800772a:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
 800772e:	f013 0f01 	tst.w	r3, #1
 8007732:	d106      	bne.n	8007742 <netif_set_up+0x1a>
    netif->flags |= NETIF_FLAG_UP;
 8007734:	f043 0301 	orr.w	r3, r3, #1
 8007738:	f880 302b 	strb.w	r3, [r0, #43]	; 0x2b
    if (netif->flags & NETIF_FLAG_LINK_UP) {
 800773c:	f013 0f04 	tst.w	r3, #4
 8007740:	d100      	bne.n	8007744 <netif_set_up+0x1c>
 8007742:	bd08      	pop	{r3, pc}
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 8007744:	2103      	movs	r1, #3
 8007746:	f7ff ff43 	bl	80075d0 <netif_issue_reports>
}
 800774a:	e7fa      	b.n	8007742 <netif_set_up+0x1a>

0800774c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800774c:	b508      	push	{r3, lr}
  if (netif->flags & NETIF_FLAG_UP) {
 800774e:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
 8007752:	f013 0f01 	tst.w	r3, #1
 8007756:	d006      	beq.n	8007766 <netif_set_down+0x1a>
    netif->flags &= ~NETIF_FLAG_UP;
 8007758:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800775c:	f880 302b 	strb.w	r3, [r0, #43]	; 0x2b
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8007760:	f013 0f08 	tst.w	r3, #8
 8007764:	d100      	bne.n	8007768 <netif_set_down+0x1c>
 8007766:	bd08      	pop	{r3, pc}
      etharp_cleanup_netif(netif);
 8007768:	f7fe fa00 	bl	8005b6c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800776c:	e7fb      	b.n	8007766 <netif_set_down+0x1a>
	...

08007770 <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8007770:	b570      	push	{r4, r5, r6, lr}
 8007772:	460c      	mov	r4, r1
 8007774:	4616      	mov	r6, r2
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8007776:	4605      	mov	r5, r0
 8007778:	b1c0      	cbz	r0, 80077ac <pbuf_header_impl+0x3c>
  if ((header_size_increment == 0) || (p == NULL)) {
 800777a:	2c00      	cmp	r4, #0
 800777c:	d04e      	beq.n	800781c <pbuf_header_impl+0xac>
 800777e:	2d00      	cmp	r5, #0
 8007780:	d04e      	beq.n	8007820 <pbuf_header_impl+0xb0>
    return 0;
  }

  if (header_size_increment < 0) {
 8007782:	2c00      	cmp	r4, #0
 8007784:	db1a      	blt.n	80077bc <pbuf_header_impl+0x4c>
    increment_magnitude = (u16_t)-header_size_increment;
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
  } else {
    increment_magnitude = (u16_t)header_size_increment;
 8007786:	b2a2      	uxth	r2, r4
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
 8007788:	7b2b      	ldrb	r3, [r5, #12]
  /* remember current payload pointer */
  payload = p->payload;
 800778a:	6869      	ldr	r1, [r5, #4]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
 800778c:	b32b      	cbz	r3, 80077da <pbuf_header_impl+0x6a>
 800778e:	2b03      	cmp	r3, #3
 8007790:	d023      	beq.n	80077da <pbuf_header_impl+0x6a>
      p->payload = payload;
      /* bail out unsuccessfully */
      return 1;
    }
  /* pbuf types referring to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 8007792:	3b01      	subs	r3, #1
 8007794:	b29b      	uxth	r3, r3
 8007796:	2b01      	cmp	r3, #1
 8007798:	d837      	bhi.n	800780a <pbuf_header_impl+0x9a>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 800779a:	2c00      	cmp	r4, #0
 800779c:	db2f      	blt.n	80077fe <pbuf_header_impl+0x8e>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
    } else if ((header_size_increment > 0) && force) {
 800779e:	2c00      	cmp	r4, #0
 80077a0:	dd40      	ble.n	8007824 <pbuf_header_impl+0xb4>
 80077a2:	2e00      	cmp	r6, #0
 80077a4:	d040      	beq.n	8007828 <pbuf_header_impl+0xb8>
      p->payload = (u8_t *)p->payload - header_size_increment;
 80077a6:	1b09      	subs	r1, r1, r4
 80077a8:	6069      	str	r1, [r5, #4]
 80077aa:	e01c      	b.n	80077e6 <pbuf_header_impl+0x76>
  LWIP_ASSERT("p != NULL", p != NULL);
 80077ac:	4b1f      	ldr	r3, [pc, #124]	; (800782c <pbuf_header_impl+0xbc>)
 80077ae:	f240 223f 	movw	r2, #575	; 0x23f
 80077b2:	491f      	ldr	r1, [pc, #124]	; (8007830 <pbuf_header_impl+0xc0>)
 80077b4:	481f      	ldr	r0, [pc, #124]	; (8007834 <pbuf_header_impl+0xc4>)
 80077b6:	f005 fa1a 	bl	800cbee <iprintf>
 80077ba:	e7de      	b.n	800777a <pbuf_header_impl+0xa>
    increment_magnitude = (u16_t)-header_size_increment;
 80077bc:	b2a2      	uxth	r2, r4
 80077be:	4252      	negs	r2, r2
 80077c0:	b292      	uxth	r2, r2
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80077c2:	896b      	ldrh	r3, [r5, #10]
 80077c4:	429a      	cmp	r2, r3
 80077c6:	d9df      	bls.n	8007788 <pbuf_header_impl+0x18>
 80077c8:	4b18      	ldr	r3, [pc, #96]	; (800782c <pbuf_header_impl+0xbc>)
 80077ca:	f240 2247 	movw	r2, #583	; 0x247
 80077ce:	491a      	ldr	r1, [pc, #104]	; (8007838 <pbuf_header_impl+0xc8>)
 80077d0:	4818      	ldr	r0, [pc, #96]	; (8007834 <pbuf_header_impl+0xc4>)
 80077d2:	f005 fa0c 	bl	800cbee <iprintf>
 80077d6:	2001      	movs	r0, #1
 80077d8:	bd70      	pop	{r4, r5, r6, pc}
    p->payload = (u8_t *)p->payload - header_size_increment;
 80077da:	1b0b      	subs	r3, r1, r4
 80077dc:	606b      	str	r3, [r5, #4]
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80077de:	f105 0210 	add.w	r2, r5, #16
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d308      	bcc.n	80077f8 <pbuf_header_impl+0x88>
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
    return 1;
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
 80077e6:	b2a4      	uxth	r4, r4
 80077e8:	896b      	ldrh	r3, [r5, #10]
 80077ea:	4423      	add	r3, r4
 80077ec:	816b      	strh	r3, [r5, #10]
  p->tot_len += header_size_increment;
 80077ee:	892b      	ldrh	r3, [r5, #8]
 80077f0:	441c      	add	r4, r3
 80077f2:	812c      	strh	r4, [r5, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 80077f4:	2000      	movs	r0, #0
 80077f6:	bd70      	pop	{r4, r5, r6, pc}
      p->payload = payload;
 80077f8:	6069      	str	r1, [r5, #4]
      return 1;
 80077fa:	2001      	movs	r0, #1
 80077fc:	bd70      	pop	{r4, r5, r6, pc}
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 80077fe:	896b      	ldrh	r3, [r5, #10]
 8007800:	429a      	cmp	r2, r3
 8007802:	d8cc      	bhi.n	800779e <pbuf_header_impl+0x2e>
      p->payload = (u8_t *)p->payload - header_size_increment;
 8007804:	1b09      	subs	r1, r1, r4
 8007806:	6069      	str	r1, [r5, #4]
 8007808:	e7ed      	b.n	80077e6 <pbuf_header_impl+0x76>
    LWIP_ASSERT("bad pbuf type", 0);
 800780a:	4b08      	ldr	r3, [pc, #32]	; (800782c <pbuf_header_impl+0xbc>)
 800780c:	f240 2277 	movw	r2, #631	; 0x277
 8007810:	490a      	ldr	r1, [pc, #40]	; (800783c <pbuf_header_impl+0xcc>)
 8007812:	4808      	ldr	r0, [pc, #32]	; (8007834 <pbuf_header_impl+0xc4>)
 8007814:	f005 f9eb 	bl	800cbee <iprintf>
    return 1;
 8007818:	2001      	movs	r0, #1
 800781a:	bd70      	pop	{r4, r5, r6, pc}
    return 0;
 800781c:	2000      	movs	r0, #0
 800781e:	bd70      	pop	{r4, r5, r6, pc}
 8007820:	2000      	movs	r0, #0
 8007822:	bd70      	pop	{r4, r5, r6, pc}
      return 1;
 8007824:	2001      	movs	r0, #1
 8007826:	bd70      	pop	{r4, r5, r6, pc}
 8007828:	2001      	movs	r0, #1
}
 800782a:	bd70      	pop	{r4, r5, r6, pc}
 800782c:	0800e5c4 	.word	0x0800e5c4
 8007830:	0800d664 	.word	0x0800d664
 8007834:	0800d378 	.word	0x0800d378
 8007838:	0800e5f4 	.word	0x0800e5f4
 800783c:	0800e614 	.word	0x0800e614

08007840 <pbuf_pool_is_empty>:
{
 8007840:	b510      	push	{r4, lr}
  SYS_ARCH_PROTECT(old_level);
 8007842:	f004 fbe9 	bl	800c018 <sys_arch_protect>
  queued = pbuf_free_ooseq_pending;
 8007846:	4b0c      	ldr	r3, [pc, #48]	; (8007878 <pbuf_pool_is_empty+0x38>)
 8007848:	781c      	ldrb	r4, [r3, #0]
 800784a:	b2e4      	uxtb	r4, r4
  pbuf_free_ooseq_pending = 1;
 800784c:	2201      	movs	r2, #1
 800784e:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8007850:	f004 fbee 	bl	800c030 <sys_arch_unprotect>
  if (!queued) {
 8007854:	b104      	cbz	r4, 8007858 <pbuf_pool_is_empty+0x18>
 8007856:	bd10      	pop	{r4, pc}
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8007858:	2200      	movs	r2, #0
 800785a:	4611      	mov	r1, r2
 800785c:	4807      	ldr	r0, [pc, #28]	; (800787c <pbuf_pool_is_empty+0x3c>)
 800785e:	f7fd fee9 	bl	8005634 <tcpip_callback_with_block>
 8007862:	2800      	cmp	r0, #0
 8007864:	d0f7      	beq.n	8007856 <pbuf_pool_is_empty+0x16>
 8007866:	f004 fbd7 	bl	800c018 <sys_arch_protect>
 800786a:	2200      	movs	r2, #0
 800786c:	4b02      	ldr	r3, [pc, #8]	; (8007878 <pbuf_pool_is_empty+0x38>)
 800786e:	701a      	strb	r2, [r3, #0]
 8007870:	f004 fbde 	bl	800c030 <sys_arch_unprotect>
}
 8007874:	e7ef      	b.n	8007856 <pbuf_pool_is_empty+0x16>
 8007876:	bf00      	nop
 8007878:	20007974 	.word	0x20007974
 800787c:	080078b5 	.word	0x080078b5

08007880 <pbuf_free_ooseq>:
{
 8007880:	b510      	push	{r4, lr}
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8007882:	f004 fbc9 	bl	800c018 <sys_arch_protect>
 8007886:	2200      	movs	r2, #0
 8007888:	4b08      	ldr	r3, [pc, #32]	; (80078ac <pbuf_free_ooseq+0x2c>)
 800788a:	701a      	strb	r2, [r3, #0]
 800788c:	f004 fbd0 	bl	800c030 <sys_arch_unprotect>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8007890:	4b07      	ldr	r3, [pc, #28]	; (80078b0 <pbuf_free_ooseq+0x30>)
 8007892:	681c      	ldr	r4, [r3, #0]
 8007894:	b144      	cbz	r4, 80078a8 <pbuf_free_ooseq+0x28>
    if (NULL != pcb->ooseq) {
 8007896:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8007898:	b908      	cbnz	r0, 800789e <pbuf_free_ooseq+0x1e>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800789a:	68e4      	ldr	r4, [r4, #12]
 800789c:	e7fa      	b.n	8007894 <pbuf_free_ooseq+0x14>
      tcp_segs_free(pcb->ooseq);
 800789e:	f000 fc86 	bl	80081ae <tcp_segs_free>
      pcb->ooseq = NULL;
 80078a2:	2300      	movs	r3, #0
 80078a4:	6723      	str	r3, [r4, #112]	; 0x70
      return;
 80078a6:	bd10      	pop	{r4, pc}
 80078a8:	bd10      	pop	{r4, pc}
 80078aa:	bf00      	nop
 80078ac:	20007974 	.word	0x20007974
 80078b0:	2000797c 	.word	0x2000797c

080078b4 <pbuf_free_ooseq_callback>:
{
 80078b4:	b508      	push	{r3, lr}
  pbuf_free_ooseq();
 80078b6:	f7ff ffe3 	bl	8007880 <pbuf_free_ooseq>
 80078ba:	bd08      	pop	{r3, pc}

080078bc <pbuf_alloced_custom>:
{
 80078bc:	b570      	push	{r4, r5, r6, lr}
 80078be:	9c04      	ldr	r4, [sp, #16]
  switch (l) {
 80078c0:	2804      	cmp	r0, #4
 80078c2:	d80a      	bhi.n	80078da <pbuf_alloced_custom+0x1e>
 80078c4:	e8df f000 	tbb	[pc, r0]
 80078c8:	05031412 	.word	0x05031412
 80078cc:	07          	.byte	0x07
 80078cd:	00          	.byte	0x00
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 80078ce:	200e      	movs	r0, #14
    break;
 80078d0:	e00f      	b.n	80078f2 <pbuf_alloced_custom+0x36>
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 80078d2:	2000      	movs	r0, #0
    break;
 80078d4:	e00d      	b.n	80078f2 <pbuf_alloced_custom+0x36>
    offset = 0;
 80078d6:	2000      	movs	r0, #0
    break;
 80078d8:	e00b      	b.n	80078f2 <pbuf_alloced_custom+0x36>
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 80078da:	4b13      	ldr	r3, [pc, #76]	; (8007928 <pbuf_alloced_custom+0x6c>)
 80078dc:	f240 12c5 	movw	r2, #453	; 0x1c5
 80078e0:	4912      	ldr	r1, [pc, #72]	; (800792c <pbuf_alloced_custom+0x70>)
 80078e2:	4813      	ldr	r0, [pc, #76]	; (8007930 <pbuf_alloced_custom+0x74>)
 80078e4:	f005 f983 	bl	800cbee <iprintf>
    return NULL;
 80078e8:	2000      	movs	r0, #0
 80078ea:	bd70      	pop	{r4, r5, r6, pc}
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 80078ec:	2036      	movs	r0, #54	; 0x36
 80078ee:	e000      	b.n	80078f2 <pbuf_alloced_custom+0x36>
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 80078f0:	2022      	movs	r0, #34	; 0x22
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80078f2:	3003      	adds	r0, #3
 80078f4:	f020 0003 	bic.w	r0, r0, #3
 80078f8:	180e      	adds	r6, r1, r0
 80078fa:	f8bd 5014 	ldrh.w	r5, [sp, #20]
 80078fe:	42ae      	cmp	r6, r5
 8007900:	d810      	bhi.n	8007924 <pbuf_alloced_custom+0x68>
  p->pbuf.next = NULL;
 8007902:	2500      	movs	r5, #0
 8007904:	601d      	str	r5, [r3, #0]
  if (payload_mem != NULL) {
 8007906:	b154      	cbz	r4, 800791e <pbuf_alloced_custom+0x62>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8007908:	4420      	add	r0, r4
 800790a:	6058      	str	r0, [r3, #4]
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 800790c:	2002      	movs	r0, #2
 800790e:	7358      	strb	r0, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 8007910:	8119      	strh	r1, [r3, #8]
 8007912:	8159      	strh	r1, [r3, #10]
  p->pbuf.type = type;
 8007914:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 8007916:	2201      	movs	r2, #1
 8007918:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 800791a:	4618      	mov	r0, r3
 800791c:	bd70      	pop	{r4, r5, r6, pc}
    p->pbuf.payload = NULL;
 800791e:	2000      	movs	r0, #0
 8007920:	6058      	str	r0, [r3, #4]
 8007922:	e7f3      	b.n	800790c <pbuf_alloced_custom+0x50>
    return NULL;
 8007924:	2000      	movs	r0, #0
}
 8007926:	bd70      	pop	{r4, r5, r6, pc}
 8007928:	0800e5c4 	.word	0x0800e5c4
 800792c:	0800e3f0 	.word	0x0800e3f0
 8007930:	0800d378 	.word	0x0800d378

08007934 <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
 8007934:	b508      	push	{r3, lr}
   return pbuf_header_impl(p, header_size_increment, 0);
 8007936:	2200      	movs	r2, #0
 8007938:	f7ff ff1a 	bl	8007770 <pbuf_header_impl>
}
 800793c:	bd08      	pop	{r3, pc}

0800793e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800793e:	b508      	push	{r3, lr}
   return pbuf_header_impl(p, header_size_increment, 1);
 8007940:	2201      	movs	r2, #1
 8007942:	f7ff ff15 	bl	8007770 <pbuf_header_impl>
}
 8007946:	bd08      	pop	{r3, pc}

08007948 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8007948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800794a:	b128      	cbz	r0, 8007958 <pbuf_free+0x10>
 800794c:	4604      	mov	r4, r0
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  LWIP_ASSERT("pbuf_free: sane type",
 800794e:	7b03      	ldrb	r3, [r0, #12]
 8007950:	2b03      	cmp	r3, #3
 8007952:	d80b      	bhi.n	800796c <pbuf_free+0x24>
{
 8007954:	2600      	movs	r6, #0
 8007956:	e01f      	b.n	8007998 <pbuf_free+0x50>
    LWIP_ASSERT("p != NULL", p != NULL);
 8007958:	4b2b      	ldr	r3, [pc, #172]	; (8007a08 <pbuf_free+0xc0>)
 800795a:	f240 22d2 	movw	r2, #722	; 0x2d2
 800795e:	492b      	ldr	r1, [pc, #172]	; (8007a0c <pbuf_free+0xc4>)
 8007960:	482b      	ldr	r0, [pc, #172]	; (8007a10 <pbuf_free+0xc8>)
 8007962:	f005 f944 	bl	800cbee <iprintf>
    return 0;
 8007966:	2600      	movs	r6, #0
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
}
 8007968:	4630      	mov	r0, r6
 800796a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("pbuf_free: sane type",
 800796c:	4b26      	ldr	r3, [pc, #152]	; (8007a08 <pbuf_free+0xc0>)
 800796e:	f240 22de 	movw	r2, #734	; 0x2de
 8007972:	4928      	ldr	r1, [pc, #160]	; (8007a14 <pbuf_free+0xcc>)
 8007974:	4826      	ldr	r0, [pc, #152]	; (8007a10 <pbuf_free+0xc8>)
 8007976:	f005 f93a 	bl	800cbee <iprintf>
 800797a:	e7eb      	b.n	8007954 <pbuf_free+0xc>
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800797c:	4b22      	ldr	r3, [pc, #136]	; (8007a08 <pbuf_free+0xc0>)
 800797e:	f240 22eb 	movw	r2, #747	; 0x2eb
 8007982:	4925      	ldr	r1, [pc, #148]	; (8007a18 <pbuf_free+0xd0>)
 8007984:	4822      	ldr	r0, [pc, #136]	; (8007a10 <pbuf_free+0xc8>)
 8007986:	f005 f932 	bl	800cbee <iprintf>
 800798a:	e00d      	b.n	80079a8 <pbuf_free+0x60>
        pc->custom_free_function(p);
 800798c:	6923      	ldr	r3, [r4, #16]
 800798e:	4620      	mov	r0, r4
 8007990:	4798      	blx	r3
      count++;
 8007992:	3601      	adds	r6, #1
 8007994:	b2f6      	uxtb	r6, r6
      p = q;
 8007996:	462c      	mov	r4, r5
  while (p != NULL) {
 8007998:	2c00      	cmp	r4, #0
 800799a:	d0e5      	beq.n	8007968 <pbuf_free+0x20>
    SYS_ARCH_PROTECT(old_level);
 800799c:	f004 fb3c 	bl	800c018 <sys_arch_protect>
 80079a0:	4607      	mov	r7, r0
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80079a2:	89e3      	ldrh	r3, [r4, #14]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d0e9      	beq.n	800797c <pbuf_free+0x34>
    ref = --(p->ref);
 80079a8:	89e5      	ldrh	r5, [r4, #14]
 80079aa:	3d01      	subs	r5, #1
 80079ac:	b2ad      	uxth	r5, r5
 80079ae:	81e5      	strh	r5, [r4, #14]
    SYS_ARCH_UNPROTECT(old_level);
 80079b0:	4638      	mov	r0, r7
 80079b2:	f004 fb3d 	bl	800c030 <sys_arch_unprotect>
    if (ref == 0) {
 80079b6:	bb25      	cbnz	r5, 8007a02 <pbuf_free+0xba>
      q = p->next;
 80079b8:	6825      	ldr	r5, [r4, #0]
      type = p->type;
 80079ba:	7b23      	ldrb	r3, [r4, #12]
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80079bc:	7b62      	ldrb	r2, [r4, #13]
 80079be:	f012 0f02 	tst.w	r2, #2
 80079c2:	d00a      	beq.n	80079da <pbuf_free+0x92>
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80079c4:	6923      	ldr	r3, [r4, #16]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d1e0      	bne.n	800798c <pbuf_free+0x44>
 80079ca:	4b0f      	ldr	r3, [pc, #60]	; (8007a08 <pbuf_free+0xc0>)
 80079cc:	f240 22f9 	movw	r2, #761	; 0x2f9
 80079d0:	4912      	ldr	r1, [pc, #72]	; (8007a1c <pbuf_free+0xd4>)
 80079d2:	480f      	ldr	r0, [pc, #60]	; (8007a10 <pbuf_free+0xc8>)
 80079d4:	f005 f90b 	bl	800cbee <iprintf>
 80079d8:	e7d8      	b.n	800798c <pbuf_free+0x44>
        if (type == PBUF_POOL) {
 80079da:	2b03      	cmp	r3, #3
 80079dc:	d007      	beq.n	80079ee <pbuf_free+0xa6>
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 80079de:	3b01      	subs	r3, #1
 80079e0:	b29b      	uxth	r3, r3
 80079e2:	2b01      	cmp	r3, #1
 80079e4:	d908      	bls.n	80079f8 <pbuf_free+0xb0>
          mem_free(p);
 80079e6:	4620      	mov	r0, r4
 80079e8:	f7ff fbb4 	bl	8007154 <mem_free>
 80079ec:	e7d1      	b.n	8007992 <pbuf_free+0x4a>
          memp_free(MEMP_PBUF_POOL, p);
 80079ee:	4621      	mov	r1, r4
 80079f0:	200c      	movs	r0, #12
 80079f2:	f7ff fdd3 	bl	800759c <memp_free>
 80079f6:	e7cc      	b.n	8007992 <pbuf_free+0x4a>
          memp_free(MEMP_PBUF, p);
 80079f8:	4621      	mov	r1, r4
 80079fa:	200b      	movs	r0, #11
 80079fc:	f7ff fdce 	bl	800759c <memp_free>
 8007a00:	e7c7      	b.n	8007992 <pbuf_free+0x4a>
      p = NULL;
 8007a02:	2400      	movs	r4, #0
 8007a04:	e7c8      	b.n	8007998 <pbuf_free+0x50>
 8007a06:	bf00      	nop
 8007a08:	0800e5c4 	.word	0x0800e5c4
 8007a0c:	0800d664 	.word	0x0800d664
 8007a10:	0800d378 	.word	0x0800d378
 8007a14:	0800e570 	.word	0x0800e570
 8007a18:	0800e588 	.word	0x0800e588
 8007a1c:	0800e5a0 	.word	0x0800e5a0

08007a20 <pbuf_alloc>:
{
 8007a20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a24:	460d      	mov	r5, r1
 8007a26:	4617      	mov	r7, r2
  switch (layer) {
 8007a28:	2804      	cmp	r0, #4
 8007a2a:	d80a      	bhi.n	8007a42 <pbuf_alloc+0x22>
 8007a2c:	e8df f000 	tbb	[pc, r0]
 8007a30:	05031412 	.word	0x05031412
 8007a34:	07          	.byte	0x07
 8007a35:	00          	.byte	0x00
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 8007a36:	240e      	movs	r4, #14
    break;
 8007a38:	e00f      	b.n	8007a5a <pbuf_alloc+0x3a>
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 8007a3a:	2400      	movs	r4, #0
    break;
 8007a3c:	e00d      	b.n	8007a5a <pbuf_alloc+0x3a>
    offset = 0;
 8007a3e:	2400      	movs	r4, #0
    break;
 8007a40:	e00b      	b.n	8007a5a <pbuf_alloc+0x3a>
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 8007a42:	4b64      	ldr	r3, [pc, #400]	; (8007bd4 <pbuf_alloc+0x1b4>)
 8007a44:	f44f 728b 	mov.w	r2, #278	; 0x116
 8007a48:	4963      	ldr	r1, [pc, #396]	; (8007bd8 <pbuf_alloc+0x1b8>)
 8007a4a:	4864      	ldr	r0, [pc, #400]	; (8007bdc <pbuf_alloc+0x1bc>)
 8007a4c:	f005 f8cf 	bl	800cbee <iprintf>
    return NULL;
 8007a50:	2600      	movs	r6, #0
 8007a52:	e0b1      	b.n	8007bb8 <pbuf_alloc+0x198>
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 8007a54:	2436      	movs	r4, #54	; 0x36
 8007a56:	e000      	b.n	8007a5a <pbuf_alloc+0x3a>
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 8007a58:	2422      	movs	r4, #34	; 0x22
  switch (type) {
 8007a5a:	2f03      	cmp	r7, #3
 8007a5c:	f200 80af 	bhi.w	8007bbe <pbuf_alloc+0x19e>
 8007a60:	e8df f007 	tbb	[pc, r7]
 8007a64:	029b9b7b 	.word	0x029b9b7b
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8007a68:	200c      	movs	r0, #12
 8007a6a:	f7ff fd7d 	bl	8007568 <memp_malloc>
    if (p == NULL) {
 8007a6e:	4606      	mov	r6, r0
 8007a70:	b1f8      	cbz	r0, 8007ab2 <pbuf_alloc+0x92>
    p->type = type;
 8007a72:	7307      	strb	r7, [r0, #12]
    p->next = NULL;
 8007a74:	2300      	movs	r3, #0
 8007a76:	6003      	str	r3, [r0, #0]
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 8007a78:	f104 0310 	add.w	r3, r4, #16
 8007a7c:	4403      	add	r3, r0
 8007a7e:	3303      	adds	r3, #3
 8007a80:	f023 0303 	bic.w	r3, r3, #3
 8007a84:	6043      	str	r3, [r0, #4]
    p->tot_len = length;
 8007a86:	8105      	strh	r5, [r0, #8]
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 8007a88:	1ce2      	adds	r2, r4, #3
 8007a8a:	f022 0203 	bic.w	r2, r2, #3
 8007a8e:	f5c2 7214 	rsb	r2, r2, #592	; 0x250
 8007a92:	42aa      	cmp	r2, r5
 8007a94:	bf28      	it	cs
 8007a96:	462a      	movcs	r2, r5
 8007a98:	b292      	uxth	r2, r2
 8007a9a:	8142      	strh	r2, [r0, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8007a9c:	4413      	add	r3, r2
 8007a9e:	f500 7818 	add.w	r8, r0, #608	; 0x260
 8007aa2:	4543      	cmp	r3, r8
 8007aa4:	d808      	bhi.n	8007ab8 <pbuf_alloc+0x98>
    p->ref = 1;
 8007aa6:	2301      	movs	r3, #1
 8007aa8:	81f3      	strh	r3, [r6, #14]
    rem_len = length - p->len;
 8007aaa:	8973      	ldrh	r3, [r6, #10]
 8007aac:	1aed      	subs	r5, r5, r3
    r = p;
 8007aae:	46b1      	mov	r9, r6
    while (rem_len > 0) {
 8007ab0:	e026      	b.n	8007b00 <pbuf_alloc+0xe0>
      PBUF_POOL_IS_EMPTY();
 8007ab2:	f7ff fec5 	bl	8007840 <pbuf_pool_is_empty>
      return NULL;
 8007ab6:	e07f      	b.n	8007bb8 <pbuf_alloc+0x198>
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8007ab8:	4b46      	ldr	r3, [pc, #280]	; (8007bd4 <pbuf_alloc+0x1b4>)
 8007aba:	f44f 7298 	mov.w	r2, #304	; 0x130
 8007abe:	4948      	ldr	r1, [pc, #288]	; (8007be0 <pbuf_alloc+0x1c0>)
 8007ac0:	4846      	ldr	r0, [pc, #280]	; (8007bdc <pbuf_alloc+0x1bc>)
 8007ac2:	f005 f894 	bl	800cbee <iprintf>
 8007ac6:	e7ee      	b.n	8007aa6 <pbuf_alloc+0x86>
        PBUF_POOL_IS_EMPTY();
 8007ac8:	f7ff feba 	bl	8007840 <pbuf_pool_is_empty>
        pbuf_free(p);
 8007acc:	4630      	mov	r0, r6
 8007ace:	f7ff ff3b 	bl	8007948 <pbuf_free>
        return NULL;
 8007ad2:	4626      	mov	r6, r4
 8007ad4:	e070      	b.n	8007bb8 <pbuf_alloc+0x198>
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 8007ad6:	4b3f      	ldr	r3, [pc, #252]	; (8007bd4 <pbuf_alloc+0x1b4>)
 8007ad8:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 8007adc:	4941      	ldr	r1, [pc, #260]	; (8007be4 <pbuf_alloc+0x1c4>)
 8007ade:	483f      	ldr	r0, [pc, #252]	; (8007bdc <pbuf_alloc+0x1bc>)
 8007ae0:	f005 f885 	bl	800cbee <iprintf>
 8007ae4:	e01e      	b.n	8007b24 <pbuf_alloc+0x104>
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8007ae6:	4b3b      	ldr	r3, [pc, #236]	; (8007bd4 <pbuf_alloc+0x1b4>)
 8007ae8:	f44f 72a9 	mov.w	r2, #338	; 0x152
 8007aec:	493e      	ldr	r1, [pc, #248]	; (8007be8 <pbuf_alloc+0x1c8>)
 8007aee:	483b      	ldr	r0, [pc, #236]	; (8007bdc <pbuf_alloc+0x1bc>)
 8007af0:	f005 f87d 	bl	800cbee <iprintf>
 8007af4:	e024      	b.n	8007b40 <pbuf_alloc+0x120>
      q->ref = 1;
 8007af6:	2301      	movs	r3, #1
 8007af8:	81e3      	strh	r3, [r4, #14]
      rem_len -= q->len;
 8007afa:	8963      	ldrh	r3, [r4, #10]
 8007afc:	1aed      	subs	r5, r5, r3
      r = q;
 8007afe:	46a1      	mov	r9, r4
    while (rem_len > 0) {
 8007b00:	2d00      	cmp	r5, #0
 8007b02:	dd55      	ble.n	8007bb0 <pbuf_alloc+0x190>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8007b04:	200c      	movs	r0, #12
 8007b06:	f7ff fd2f 	bl	8007568 <memp_malloc>
      if (q == NULL) {
 8007b0a:	4604      	mov	r4, r0
 8007b0c:	2800      	cmp	r0, #0
 8007b0e:	d0db      	beq.n	8007ac8 <pbuf_alloc+0xa8>
      q->type = type;
 8007b10:	7307      	strb	r7, [r0, #12]
      q->flags = 0;
 8007b12:	2300      	movs	r3, #0
 8007b14:	7343      	strb	r3, [r0, #13]
      q->next = NULL;
 8007b16:	6003      	str	r3, [r0, #0]
      r->next = q;
 8007b18:	f8c9 0000 	str.w	r0, [r9]
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 8007b1c:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8007b20:	429d      	cmp	r5, r3
 8007b22:	dcd8      	bgt.n	8007ad6 <pbuf_alloc+0xb6>
      q->tot_len = (u16_t)rem_len;
 8007b24:	b2ab      	uxth	r3, r5
 8007b26:	8123      	strh	r3, [r4, #8]
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 8007b28:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8007b2c:	bf28      	it	cs
 8007b2e:	f44f 7314 	movcs.w	r3, #592	; 0x250
 8007b32:	8163      	strh	r3, [r4, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 8007b34:	f104 0310 	add.w	r3, r4, #16
 8007b38:	6063      	str	r3, [r4, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8007b3a:	f013 0f03 	tst.w	r3, #3
 8007b3e:	d1d2      	bne.n	8007ae6 <pbuf_alloc+0xc6>
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8007b40:	6873      	ldr	r3, [r6, #4]
 8007b42:	8972      	ldrh	r2, [r6, #10]
 8007b44:	4413      	add	r3, r2
 8007b46:	4598      	cmp	r8, r3
 8007b48:	d2d5      	bcs.n	8007af6 <pbuf_alloc+0xd6>
 8007b4a:	4b22      	ldr	r3, [pc, #136]	; (8007bd4 <pbuf_alloc+0x1b4>)
 8007b4c:	f240 1255 	movw	r2, #341	; 0x155
 8007b50:	4923      	ldr	r1, [pc, #140]	; (8007be0 <pbuf_alloc+0x1c0>)
 8007b52:	4822      	ldr	r0, [pc, #136]	; (8007bdc <pbuf_alloc+0x1bc>)
 8007b54:	f005 f84b 	bl	800cbee <iprintf>
 8007b58:	e7cd      	b.n	8007af6 <pbuf_alloc+0xd6>
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 8007b5a:	f104 0013 	add.w	r0, r4, #19
 8007b5e:	f020 0003 	bic.w	r0, r0, #3
 8007b62:	b283      	uxth	r3, r0
 8007b64:	1cea      	adds	r2, r5, #3
 8007b66:	b290      	uxth	r0, r2
 8007b68:	f020 0003 	bic.w	r0, r0, #3
 8007b6c:	4418      	add	r0, r3
 8007b6e:	b280      	uxth	r0, r0
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 8007b70:	f022 0203 	bic.w	r2, r2, #3
 8007b74:	4290      	cmp	r0, r2
 8007b76:	d32b      	bcc.n	8007bd0 <pbuf_alloc+0x1b0>
      p = (struct pbuf*)mem_malloc(alloc_len);
 8007b78:	f7ff fbe6 	bl	8007348 <mem_malloc>
    if (p == NULL) {
 8007b7c:	4606      	mov	r6, r0
 8007b7e:	b1d8      	cbz	r0, 8007bb8 <pbuf_alloc+0x198>
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 8007b80:	f104 0310 	add.w	r3, r4, #16
 8007b84:	4403      	add	r3, r0
 8007b86:	3303      	adds	r3, #3
 8007b88:	f023 0303 	bic.w	r3, r3, #3
 8007b8c:	6043      	str	r3, [r0, #4]
    p->len = p->tot_len = length;
 8007b8e:	8105      	strh	r5, [r0, #8]
 8007b90:	8145      	strh	r5, [r0, #10]
    p->next = NULL;
 8007b92:	2300      	movs	r3, #0
 8007b94:	6003      	str	r3, [r0, #0]
    p->type = type;
 8007b96:	7307      	strb	r7, [r0, #12]
 8007b98:	e00a      	b.n	8007bb0 <pbuf_alloc+0x190>
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8007b9a:	200b      	movs	r0, #11
 8007b9c:	f7ff fce4 	bl	8007568 <memp_malloc>
    if (p == NULL) {
 8007ba0:	4606      	mov	r6, r0
 8007ba2:	b148      	cbz	r0, 8007bb8 <pbuf_alloc+0x198>
    p->payload = NULL;
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	6043      	str	r3, [r0, #4]
    p->len = p->tot_len = length;
 8007ba8:	8105      	strh	r5, [r0, #8]
 8007baa:	8145      	strh	r5, [r0, #10]
    p->next = NULL;
 8007bac:	6003      	str	r3, [r0, #0]
    p->type = type;
 8007bae:	7307      	strb	r7, [r0, #12]
  p->ref = 1;
 8007bb0:	2301      	movs	r3, #1
 8007bb2:	81f3      	strh	r3, [r6, #14]
  p->flags = 0;
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	7373      	strb	r3, [r6, #13]
}
 8007bb8:	4630      	mov	r0, r6
 8007bba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8007bbe:	4b05      	ldr	r3, [pc, #20]	; (8007bd4 <pbuf_alloc+0x1b4>)
 8007bc0:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 8007bc4:	4909      	ldr	r1, [pc, #36]	; (8007bec <pbuf_alloc+0x1cc>)
 8007bc6:	4805      	ldr	r0, [pc, #20]	; (8007bdc <pbuf_alloc+0x1bc>)
 8007bc8:	f005 f811 	bl	800cbee <iprintf>
    return NULL;
 8007bcc:	2600      	movs	r6, #0
 8007bce:	e7f3      	b.n	8007bb8 <pbuf_alloc+0x198>
        return NULL;
 8007bd0:	2600      	movs	r6, #0
 8007bd2:	e7f1      	b.n	8007bb8 <pbuf_alloc+0x198>
 8007bd4:	0800e5c4 	.word	0x0800e5c4
 8007bd8:	0800e30c 	.word	0x0800e30c
 8007bdc:	0800d378 	.word	0x0800d378
 8007be0:	0800e328 	.word	0x0800e328
 8007be4:	0800e390 	.word	0x0800e390
 8007be8:	0800e3a4 	.word	0x0800e3a4
 8007bec:	0800e3d4 	.word	0x0800e3d4

08007bf0 <pbuf_realloc>:
{
 8007bf0:	b570      	push	{r4, r5, r6, lr}
 8007bf2:	460d      	mov	r5, r1
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8007bf4:	4604      	mov	r4, r0
 8007bf6:	b198      	cbz	r0, 8007c20 <pbuf_realloc+0x30>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 8007bf8:	7b23      	ldrb	r3, [r4, #12]
 8007bfa:	2b03      	cmp	r3, #3
 8007bfc:	d00b      	beq.n	8007c16 <pbuf_realloc+0x26>
 8007bfe:	2b01      	cmp	r3, #1
 8007c00:	d009      	beq.n	8007c16 <pbuf_realloc+0x26>
 8007c02:	b143      	cbz	r3, 8007c16 <pbuf_realloc+0x26>
 8007c04:	2b02      	cmp	r3, #2
 8007c06:	d006      	beq.n	8007c16 <pbuf_realloc+0x26>
 8007c08:	4b2b      	ldr	r3, [pc, #172]	; (8007cb8 <pbuf_realloc+0xc8>)
 8007c0a:	f240 12f7 	movw	r2, #503	; 0x1f7
 8007c0e:	492b      	ldr	r1, [pc, #172]	; (8007cbc <pbuf_realloc+0xcc>)
 8007c10:	482b      	ldr	r0, [pc, #172]	; (8007cc0 <pbuf_realloc+0xd0>)
 8007c12:	f004 ffec 	bl	800cbee <iprintf>
  if (new_len >= p->tot_len) {
 8007c16:	8926      	ldrh	r6, [r4, #8]
 8007c18:	42ae      	cmp	r6, r5
 8007c1a:	d938      	bls.n	8007c8e <pbuf_realloc+0x9e>
  grow = new_len - p->tot_len;
 8007c1c:	1bae      	subs	r6, r5, r6
  while (rem_len > q->len) {
 8007c1e:	e00d      	b.n	8007c3c <pbuf_realloc+0x4c>
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8007c20:	4b25      	ldr	r3, [pc, #148]	; (8007cb8 <pbuf_realloc+0xc8>)
 8007c22:	f240 12f3 	movw	r2, #499	; 0x1f3
 8007c26:	4927      	ldr	r1, [pc, #156]	; (8007cc4 <pbuf_realloc+0xd4>)
 8007c28:	4825      	ldr	r0, [pc, #148]	; (8007cc0 <pbuf_realloc+0xd0>)
 8007c2a:	f004 ffe0 	bl	800cbee <iprintf>
 8007c2e:	e7e3      	b.n	8007bf8 <pbuf_realloc+0x8>
    q->tot_len += (u16_t)grow;
 8007c30:	8923      	ldrh	r3, [r4, #8]
 8007c32:	fa13 f386 	uxtah	r3, r3, r6
 8007c36:	8123      	strh	r3, [r4, #8]
    q = q->next;
 8007c38:	6824      	ldr	r4, [r4, #0]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8007c3a:	b184      	cbz	r4, 8007c5e <pbuf_realloc+0x6e>
  while (rem_len > q->len) {
 8007c3c:	8961      	ldrh	r1, [r4, #10]
 8007c3e:	428d      	cmp	r5, r1
 8007c40:	d915      	bls.n	8007c6e <pbuf_realloc+0x7e>
    rem_len -= q->len;
 8007c42:	1a69      	subs	r1, r5, r1
 8007c44:	b28d      	uxth	r5, r1
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 8007c46:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8007c4a:	429e      	cmp	r6, r3
 8007c4c:	ddf0      	ble.n	8007c30 <pbuf_realloc+0x40>
 8007c4e:	4b1a      	ldr	r3, [pc, #104]	; (8007cb8 <pbuf_realloc+0xc8>)
 8007c50:	f240 220b 	movw	r2, #523	; 0x20b
 8007c54:	491c      	ldr	r1, [pc, #112]	; (8007cc8 <pbuf_realloc+0xd8>)
 8007c56:	481a      	ldr	r0, [pc, #104]	; (8007cc0 <pbuf_realloc+0xd0>)
 8007c58:	f004 ffc9 	bl	800cbee <iprintf>
 8007c5c:	e7e8      	b.n	8007c30 <pbuf_realloc+0x40>
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8007c5e:	4b16      	ldr	r3, [pc, #88]	; (8007cb8 <pbuf_realloc+0xc8>)
 8007c60:	f240 220f 	movw	r2, #527	; 0x20f
 8007c64:	4919      	ldr	r1, [pc, #100]	; (8007ccc <pbuf_realloc+0xdc>)
 8007c66:	4816      	ldr	r0, [pc, #88]	; (8007cc0 <pbuf_realloc+0xd0>)
 8007c68:	f004 ffc1 	bl	800cbee <iprintf>
 8007c6c:	e7e6      	b.n	8007c3c <pbuf_realloc+0x4c>
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 8007c6e:	7b23      	ldrb	r3, [r4, #12]
 8007c70:	b92b      	cbnz	r3, 8007c7e <pbuf_realloc+0x8e>
 8007c72:	428d      	cmp	r5, r1
 8007c74:	d003      	beq.n	8007c7e <pbuf_realloc+0x8e>
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8007c76:	7b63      	ldrb	r3, [r4, #13]
 8007c78:	f013 0f02 	tst.w	r3, #2
 8007c7c:	d008      	beq.n	8007c90 <pbuf_realloc+0xa0>
  q->len = rem_len;
 8007c7e:	8165      	strh	r5, [r4, #10]
  q->tot_len = q->len;
 8007c80:	8125      	strh	r5, [r4, #8]
  if (q->next != NULL) {
 8007c82:	6820      	ldr	r0, [r4, #0]
 8007c84:	b108      	cbz	r0, 8007c8a <pbuf_realloc+0x9a>
    pbuf_free(q->next);
 8007c86:	f7ff fe5f 	bl	8007948 <pbuf_free>
  q->next = NULL;
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	6023      	str	r3, [r4, #0]
 8007c8e:	bd70      	pop	{r4, r5, r6, pc}
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 8007c90:	6863      	ldr	r3, [r4, #4]
 8007c92:	1b1b      	subs	r3, r3, r4
 8007c94:	fa15 f183 	uxtah	r1, r5, r3
 8007c98:	b289      	uxth	r1, r1
 8007c9a:	4620      	mov	r0, r4
 8007c9c:	f7ff fab8 	bl	8007210 <mem_trim>
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8007ca0:	4604      	mov	r4, r0
 8007ca2:	2800      	cmp	r0, #0
 8007ca4:	d1eb      	bne.n	8007c7e <pbuf_realloc+0x8e>
 8007ca6:	4b04      	ldr	r3, [pc, #16]	; (8007cb8 <pbuf_realloc+0xc8>)
 8007ca8:	f240 221d 	movw	r2, #541	; 0x21d
 8007cac:	4908      	ldr	r1, [pc, #32]	; (8007cd0 <pbuf_realloc+0xe0>)
 8007cae:	4804      	ldr	r0, [pc, #16]	; (8007cc0 <pbuf_realloc+0xd0>)
 8007cb0:	f004 ff9d 	bl	800cbee <iprintf>
 8007cb4:	e7e3      	b.n	8007c7e <pbuf_realloc+0x8e>
 8007cb6:	bf00      	nop
 8007cb8:	0800e5c4 	.word	0x0800e5c4
 8007cbc:	0800e63c 	.word	0x0800e63c
 8007cc0:	0800d378 	.word	0x0800d378
 8007cc4:	0800e624 	.word	0x0800e624
 8007cc8:	0800e658 	.word	0x0800e658
 8007ccc:	0800e66c 	.word	0x0800e66c
 8007cd0:	0800e684 	.word	0x0800e684

08007cd4 <pbuf_clen>:
u16_t
pbuf_clen(const struct pbuf *p)
{
  u16_t len;

  len = 0;
 8007cd4:	2300      	movs	r3, #0
  while (p != NULL) {
 8007cd6:	e002      	b.n	8007cde <pbuf_clen+0xa>
    ++len;
 8007cd8:	3301      	adds	r3, #1
 8007cda:	b29b      	uxth	r3, r3
    p = p->next;
 8007cdc:	6800      	ldr	r0, [r0, #0]
  while (p != NULL) {
 8007cde:	2800      	cmp	r0, #0
 8007ce0:	d1fa      	bne.n	8007cd8 <pbuf_clen+0x4>
  }
  return len;
}
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	4770      	bx	lr
	...

08007ce8 <pbuf_ref>:
 */
void
pbuf_ref(struct pbuf *p)
{
  /* pbuf given? */
  if (p != NULL) {
 8007ce8:	b198      	cbz	r0, 8007d12 <pbuf_ref+0x2a>
{
 8007cea:	b510      	push	{r4, lr}
 8007cec:	4604      	mov	r4, r0
    SYS_ARCH_INC(p->ref, 1);
 8007cee:	f004 f993 	bl	800c018 <sys_arch_protect>
 8007cf2:	89e3      	ldrh	r3, [r4, #14]
 8007cf4:	3301      	adds	r3, #1
 8007cf6:	81e3      	strh	r3, [r4, #14]
 8007cf8:	f004 f99a 	bl	800c030 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8007cfc:	89e3      	ldrh	r3, [r4, #14]
 8007cfe:	b103      	cbz	r3, 8007d02 <pbuf_ref+0x1a>
 8007d00:	bd10      	pop	{r4, pc}
 8007d02:	4b04      	ldr	r3, [pc, #16]	; (8007d14 <pbuf_ref+0x2c>)
 8007d04:	f240 3239 	movw	r2, #825	; 0x339
 8007d08:	4903      	ldr	r1, [pc, #12]	; (8007d18 <pbuf_ref+0x30>)
 8007d0a:	4804      	ldr	r0, [pc, #16]	; (8007d1c <pbuf_ref+0x34>)
 8007d0c:	f004 ff6f 	bl	800cbee <iprintf>
  }
}
 8007d10:	e7f6      	b.n	8007d00 <pbuf_ref+0x18>
 8007d12:	4770      	bx	lr
 8007d14:	0800e5c4 	.word	0x0800e5c4
 8007d18:	0800e6a0 	.word	0x0800e6a0
 8007d1c:	0800d378 	.word	0x0800d378

08007d20 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8007d20:	b538      	push	{r3, r4, r5, lr}
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8007d22:	b110      	cbz	r0, 8007d2a <pbuf_cat+0xa>
 8007d24:	460d      	mov	r5, r1
 8007d26:	4604      	mov	r4, r0
 8007d28:	b961      	cbnz	r1, 8007d44 <pbuf_cat+0x24>
 8007d2a:	4b15      	ldr	r3, [pc, #84]	; (8007d80 <pbuf_cat+0x60>)
 8007d2c:	f240 324d 	movw	r2, #845	; 0x34d
 8007d30:	4914      	ldr	r1, [pc, #80]	; (8007d84 <pbuf_cat+0x64>)
 8007d32:	4815      	ldr	r0, [pc, #84]	; (8007d88 <pbuf_cat+0x68>)
 8007d34:	f004 ff5b 	bl	800cbee <iprintf>
 8007d38:	bd38      	pop	{r3, r4, r5, pc}
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 8007d3a:	892b      	ldrh	r3, [r5, #8]
 8007d3c:	8921      	ldrh	r1, [r4, #8]
 8007d3e:	440b      	add	r3, r1
 8007d40:	8123      	strh	r3, [r4, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8007d42:	4614      	mov	r4, r2
 8007d44:	6822      	ldr	r2, [r4, #0]
 8007d46:	2a00      	cmp	r2, #0
 8007d48:	d1f7      	bne.n	8007d3a <pbuf_cat+0x1a>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8007d4a:	8922      	ldrh	r2, [r4, #8]
 8007d4c:	8963      	ldrh	r3, [r4, #10]
 8007d4e:	429a      	cmp	r2, r3
 8007d50:	d006      	beq.n	8007d60 <pbuf_cat+0x40>
 8007d52:	4b0b      	ldr	r3, [pc, #44]	; (8007d80 <pbuf_cat+0x60>)
 8007d54:	f240 3255 	movw	r2, #853	; 0x355
 8007d58:	490c      	ldr	r1, [pc, #48]	; (8007d8c <pbuf_cat+0x6c>)
 8007d5a:	480b      	ldr	r0, [pc, #44]	; (8007d88 <pbuf_cat+0x68>)
 8007d5c:	f004 ff47 	bl	800cbee <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8007d60:	6823      	ldr	r3, [r4, #0]
 8007d62:	b133      	cbz	r3, 8007d72 <pbuf_cat+0x52>
 8007d64:	4b06      	ldr	r3, [pc, #24]	; (8007d80 <pbuf_cat+0x60>)
 8007d66:	f240 3256 	movw	r2, #854	; 0x356
 8007d6a:	4909      	ldr	r1, [pc, #36]	; (8007d90 <pbuf_cat+0x70>)
 8007d6c:	4806      	ldr	r0, [pc, #24]	; (8007d88 <pbuf_cat+0x68>)
 8007d6e:	f004 ff3e 	bl	800cbee <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
 8007d72:	892b      	ldrh	r3, [r5, #8]
 8007d74:	8922      	ldrh	r2, [r4, #8]
 8007d76:	4413      	add	r3, r2
 8007d78:	8123      	strh	r3, [r4, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8007d7a:	6025      	str	r5, [r4, #0]
 8007d7c:	bd38      	pop	{r3, r4, r5, pc}
 8007d7e:	bf00      	nop
 8007d80:	0800e5c4 	.word	0x0800e5c4
 8007d84:	0800e414 	.word	0x0800e414
 8007d88:	0800d378 	.word	0x0800d378
 8007d8c:	0800e44c 	.word	0x0800e44c
 8007d90:	0800e47c 	.word	0x0800e47c

08007d94 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8007d94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8007d98:	b150      	cbz	r0, 8007db0 <pbuf_copy+0x1c>
 8007d9a:	460d      	mov	r5, r1
 8007d9c:	4607      	mov	r7, r0
 8007d9e:	b139      	cbz	r1, 8007db0 <pbuf_copy+0x1c>
 8007da0:	8902      	ldrh	r2, [r0, #8]
 8007da2:	890b      	ldrh	r3, [r1, #8]
 8007da4:	429a      	cmp	r2, r3
 8007da6:	d303      	bcc.n	8007db0 <pbuf_copy+0x1c>
 8007da8:	f04f 0800 	mov.w	r8, #0
 8007dac:	4646      	mov	r6, r8
 8007dae:	e02c      	b.n	8007e0a <pbuf_copy+0x76>
 8007db0:	4b3f      	ldr	r3, [pc, #252]	; (8007eb0 <pbuf_copy+0x11c>)
 8007db2:	f240 32bd 	movw	r2, #957	; 0x3bd
 8007db6:	493f      	ldr	r1, [pc, #252]	; (8007eb4 <pbuf_copy+0x120>)
 8007db8:	483f      	ldr	r0, [pc, #252]	; (8007eb8 <pbuf_copy+0x124>)
 8007dba:	f004 ff18 	bl	800cbee <iprintf>
 8007dbe:	f06f 000f 	mvn.w	r0, #15
 8007dc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8007dc6:	1b9b      	subs	r3, r3, r6
 8007dc8:	b29c      	uxth	r4, r3
 8007dca:	e026      	b.n	8007e1a <pbuf_copy+0x86>
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
    offset_to += len;
    offset_from += len;
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8007dcc:	4b38      	ldr	r3, [pc, #224]	; (8007eb0 <pbuf_copy+0x11c>)
 8007dce:	f240 32cd 	movw	r2, #973	; 0x3cd
 8007dd2:	493a      	ldr	r1, [pc, #232]	; (8007ebc <pbuf_copy+0x128>)
 8007dd4:	4838      	ldr	r0, [pc, #224]	; (8007eb8 <pbuf_copy+0x124>)
 8007dd6:	f004 ff0a 	bl	800cbee <iprintf>
 8007dda:	e02d      	b.n	8007e38 <pbuf_copy+0xa4>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8007ddc:	4b34      	ldr	r3, [pc, #208]	; (8007eb0 <pbuf_copy+0x11c>)
 8007dde:	f240 32ce 	movw	r2, #974	; 0x3ce
 8007de2:	4937      	ldr	r1, [pc, #220]	; (8007ec0 <pbuf_copy+0x12c>)
 8007de4:	4834      	ldr	r0, [pc, #208]	; (8007eb8 <pbuf_copy+0x124>)
 8007de6:	f004 ff02 	bl	800cbee <iprintf>
 8007dea:	e028      	b.n	8007e3e <pbuf_copy+0xaa>
    if (offset_from >= p_from->len) {
      /* on to next p_from (if any) */
      offset_from = 0;
      p_from = p_from->next;
    }
    if (offset_to == p_to->len) {
 8007dec:	897b      	ldrh	r3, [r7, #10]
 8007dee:	429e      	cmp	r6, r3
 8007df0:	d02c      	beq.n	8007e4c <pbuf_copy+0xb8>
      offset_to = 0;
      p_to = p_to->next;
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8007df2:	b11d      	cbz	r5, 8007dfc <pbuf_copy+0x68>
 8007df4:	896a      	ldrh	r2, [r5, #10]
 8007df6:	892b      	ldrh	r3, [r5, #8]
 8007df8:	429a      	cmp	r2, r3
 8007dfa:	d039      	beq.n	8007e70 <pbuf_copy+0xdc>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8007dfc:	b11f      	cbz	r7, 8007e06 <pbuf_copy+0x72>
 8007dfe:	897a      	ldrh	r2, [r7, #10]
 8007e00:	893b      	ldrh	r3, [r7, #8]
 8007e02:	429a      	cmp	r2, r3
 8007e04:	d042      	beq.n	8007e8c <pbuf_copy+0xf8>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8007e06:	2d00      	cmp	r5, #0
 8007e08:	d04e      	beq.n	8007ea8 <pbuf_copy+0x114>
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8007e0a:	897b      	ldrh	r3, [r7, #10]
 8007e0c:	1b99      	subs	r1, r3, r6
 8007e0e:	896c      	ldrh	r4, [r5, #10]
 8007e10:	eba4 0208 	sub.w	r2, r4, r8
 8007e14:	4291      	cmp	r1, r2
 8007e16:	dbd6      	blt.n	8007dc6 <pbuf_copy+0x32>
      len = p_from->len - offset_from;
 8007e18:	b294      	uxth	r4, r2
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 8007e1a:	6878      	ldr	r0, [r7, #4]
 8007e1c:	6869      	ldr	r1, [r5, #4]
 8007e1e:	4622      	mov	r2, r4
 8007e20:	4441      	add	r1, r8
 8007e22:	4430      	add	r0, r6
 8007e24:	f005 f84f 	bl	800cec6 <memcpy>
    offset_to += len;
 8007e28:	4426      	add	r6, r4
 8007e2a:	b2b6      	uxth	r6, r6
    offset_from += len;
 8007e2c:	4444      	add	r4, r8
 8007e2e:	fa1f f884 	uxth.w	r8, r4
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8007e32:	897b      	ldrh	r3, [r7, #10]
 8007e34:	429e      	cmp	r6, r3
 8007e36:	d8c9      	bhi.n	8007dcc <pbuf_copy+0x38>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8007e38:	896b      	ldrh	r3, [r5, #10]
 8007e3a:	4598      	cmp	r8, r3
 8007e3c:	d8ce      	bhi.n	8007ddc <pbuf_copy+0x48>
    if (offset_from >= p_from->len) {
 8007e3e:	896b      	ldrh	r3, [r5, #10]
 8007e40:	4598      	cmp	r8, r3
 8007e42:	d3d3      	bcc.n	8007dec <pbuf_copy+0x58>
      p_from = p_from->next;
 8007e44:	682d      	ldr	r5, [r5, #0]
      offset_from = 0;
 8007e46:	f04f 0800 	mov.w	r8, #0
 8007e4a:	e7cf      	b.n	8007dec <pbuf_copy+0x58>
      p_to = p_to->next;
 8007e4c:	683f      	ldr	r7, [r7, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 8007e4e:	b10f      	cbz	r7, 8007e54 <pbuf_copy+0xc0>
      offset_to = 0;
 8007e50:	2600      	movs	r6, #0
 8007e52:	e7ce      	b.n	8007df2 <pbuf_copy+0x5e>
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 8007e54:	b90d      	cbnz	r5, 8007e5a <pbuf_copy+0xc6>
      offset_to = 0;
 8007e56:	2600      	movs	r6, #0
 8007e58:	e7cb      	b.n	8007df2 <pbuf_copy+0x5e>
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 8007e5a:	4b15      	ldr	r3, [pc, #84]	; (8007eb0 <pbuf_copy+0x11c>)
 8007e5c:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8007e60:	4918      	ldr	r1, [pc, #96]	; (8007ec4 <pbuf_copy+0x130>)
 8007e62:	4815      	ldr	r0, [pc, #84]	; (8007eb8 <pbuf_copy+0x124>)
 8007e64:	f004 fec3 	bl	800cbee <iprintf>
 8007e68:	f06f 000f 	mvn.w	r0, #15
 8007e6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8007e70:	682b      	ldr	r3, [r5, #0]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d0c2      	beq.n	8007dfc <pbuf_copy+0x68>
 8007e76:	4b0e      	ldr	r3, [pc, #56]	; (8007eb0 <pbuf_copy+0x11c>)
 8007e78:	f240 32de 	movw	r2, #990	; 0x3de
 8007e7c:	4912      	ldr	r1, [pc, #72]	; (8007ec8 <pbuf_copy+0x134>)
 8007e7e:	480e      	ldr	r0, [pc, #56]	; (8007eb8 <pbuf_copy+0x124>)
 8007e80:	f004 feb5 	bl	800cbee <iprintf>
 8007e84:	f06f 0005 	mvn.w	r0, #5
 8007e88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d0b9      	beq.n	8007e06 <pbuf_copy+0x72>
 8007e92:	4b07      	ldr	r3, [pc, #28]	; (8007eb0 <pbuf_copy+0x11c>)
 8007e94:	f240 32e3 	movw	r2, #995	; 0x3e3
 8007e98:	490b      	ldr	r1, [pc, #44]	; (8007ec8 <pbuf_copy+0x134>)
 8007e9a:	4807      	ldr	r0, [pc, #28]	; (8007eb8 <pbuf_copy+0x124>)
 8007e9c:	f004 fea7 	bl	800cbee <iprintf>
 8007ea0:	f06f 0005 	mvn.w	r0, #5
 8007ea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8007ea8:	2000      	movs	r0, #0
}
 8007eaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007eae:	bf00      	nop
 8007eb0:	0800e5c4 	.word	0x0800e5c4
 8007eb4:	0800e48c 	.word	0x0800e48c
 8007eb8:	0800d378 	.word	0x0800d378
 8007ebc:	0800e4bc 	.word	0x0800e4bc
 8007ec0:	0800e4d4 	.word	0x0800e4d4
 8007ec4:	0800e4f0 	.word	0x0800e4f0
 8007ec8:	0800e500 	.word	0x0800e500

08007ecc <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8007ecc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8007ed0:	b128      	cbz	r0, 8007ede <pbuf_copy_partial+0x12>
 8007ed2:	460f      	mov	r7, r1
 8007ed4:	4690      	mov	r8, r2
 8007ed6:	4605      	mov	r5, r0
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8007ed8:	b161      	cbz	r1, 8007ef4 <pbuf_copy_partial+0x28>
 8007eda:	2600      	movs	r6, #0
 8007edc:	e027      	b.n	8007f2e <pbuf_copy_partial+0x62>
  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8007ede:	4b1a      	ldr	r3, [pc, #104]	; (8007f48 <pbuf_copy_partial+0x7c>)
 8007ee0:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8007ee4:	4919      	ldr	r1, [pc, #100]	; (8007f4c <pbuf_copy_partial+0x80>)
 8007ee6:	481a      	ldr	r0, [pc, #104]	; (8007f50 <pbuf_copy_partial+0x84>)
 8007ee8:	f004 fe81 	bl	800cbee <iprintf>
 8007eec:	2600      	movs	r6, #0
      len -= buf_copy_len;
      offset = 0;
    }
  }
  return copied_total;
}
 8007eee:	4630      	mov	r0, r6
 8007ef0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8007ef4:	4b14      	ldr	r3, [pc, #80]	; (8007f48 <pbuf_copy_partial+0x7c>)
 8007ef6:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8007efa:	4916      	ldr	r1, [pc, #88]	; (8007f54 <pbuf_copy_partial+0x88>)
 8007efc:	4814      	ldr	r0, [pc, #80]	; (8007f50 <pbuf_copy_partial+0x84>)
 8007efe:	f004 fe76 	bl	800cbee <iprintf>
 8007f02:	2600      	movs	r6, #0
 8007f04:	e7f3      	b.n	8007eee <pbuf_copy_partial+0x22>
      buf_copy_len = p->len - offset;
 8007f06:	896a      	ldrh	r2, [r5, #10]
 8007f08:	1ad2      	subs	r2, r2, r3
 8007f0a:	b294      	uxth	r4, r2
      if (buf_copy_len > len) {
 8007f0c:	45a0      	cmp	r8, r4
 8007f0e:	d200      	bcs.n	8007f12 <pbuf_copy_partial+0x46>
        buf_copy_len = len;
 8007f10:	4644      	mov	r4, r8
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 8007f12:	6869      	ldr	r1, [r5, #4]
 8007f14:	4622      	mov	r2, r4
 8007f16:	4419      	add	r1, r3
 8007f18:	19b8      	adds	r0, r7, r6
 8007f1a:	f004 ffd4 	bl	800cec6 <memcpy>
      copied_total += buf_copy_len;
 8007f1e:	4426      	add	r6, r4
 8007f20:	b2b6      	uxth	r6, r6
      len -= buf_copy_len;
 8007f22:	eba8 0404 	sub.w	r4, r8, r4
 8007f26:	fa1f f884 	uxth.w	r8, r4
      offset = 0;
 8007f2a:	2300      	movs	r3, #0
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8007f2c:	682d      	ldr	r5, [r5, #0]
 8007f2e:	f1b8 0f00 	cmp.w	r8, #0
 8007f32:	d0dc      	beq.n	8007eee <pbuf_copy_partial+0x22>
 8007f34:	2d00      	cmp	r5, #0
 8007f36:	d0da      	beq.n	8007eee <pbuf_copy_partial+0x22>
    if ((offset != 0) && (offset >= p->len)) {
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d0e4      	beq.n	8007f06 <pbuf_copy_partial+0x3a>
 8007f3c:	8969      	ldrh	r1, [r5, #10]
 8007f3e:	428b      	cmp	r3, r1
 8007f40:	d3e1      	bcc.n	8007f06 <pbuf_copy_partial+0x3a>
      offset -= p->len;
 8007f42:	1a5b      	subs	r3, r3, r1
 8007f44:	b29b      	uxth	r3, r3
 8007f46:	e7f1      	b.n	8007f2c <pbuf_copy_partial+0x60>
 8007f48:	0800e5c4 	.word	0x0800e5c4
 8007f4c:	0800e52c 	.word	0x0800e52c
 8007f50:	0800d378 	.word	0x0800d378
 8007f54:	0800e54c 	.word	0x0800e54c

08007f58 <tcp_remove_listener>:
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
   struct tcp_pcb *pcb;
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8007f58:	e000      	b.n	8007f5c <tcp_remove_listener+0x4>
 8007f5a:	68c0      	ldr	r0, [r0, #12]
 8007f5c:	b128      	cbz	r0, 8007f6a <tcp_remove_listener+0x12>
      if (pcb->listener == lpcb) {
 8007f5e:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8007f60:	428b      	cmp	r3, r1
 8007f62:	d1fa      	bne.n	8007f5a <tcp_remove_listener+0x2>
         pcb->listener = NULL;
 8007f64:	2300      	movs	r3, #0
 8007f66:	6783      	str	r3, [r0, #120]	; 0x78
 8007f68:	e7f7      	b.n	8007f5a <tcp_remove_listener+0x2>
      }
   }
}
 8007f6a:	4770      	bx	lr

08007f6c <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8007f6c:	b410      	push	{r4}
  u8_t i;
  u16_t n = 0;
 8007f6e:	2400      	movs	r4, #0
 8007f70:	e009      	b.n	8007f86 <tcp_new_port+0x1a>
  struct tcp_pcb *pcb;

again:
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8007f72:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8007f76:	4b14      	ldr	r3, [pc, #80]	; (8007fc8 <tcp_new_port+0x5c>)
 8007f78:	801a      	strh	r2, [r3, #0]
 8007f7a:	e00c      	b.n	8007f96 <tcp_new_port+0x2a>
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
      if (pcb->local_port == tcp_port) {
        if (++n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8007f7c:	3401      	adds	r4, #1
 8007f7e:	b2a4      	uxth	r4, r4
 8007f80:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
 8007f84:	d21e      	bcs.n	8007fc4 <tcp_new_port+0x58>
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
 8007f86:	4a10      	ldr	r2, [pc, #64]	; (8007fc8 <tcp_new_port+0x5c>)
 8007f88:	8813      	ldrh	r3, [r2, #0]
 8007f8a:	1c59      	adds	r1, r3, #1
 8007f8c:	8011      	strh	r1, [r2, #0]
 8007f8e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007f92:	4293      	cmp	r3, r2
 8007f94:	d0ed      	beq.n	8007f72 <tcp_new_port+0x6>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8007f96:	2000      	movs	r0, #0
 8007f98:	2803      	cmp	r0, #3
 8007f9a:	d80e      	bhi.n	8007fba <tcp_new_port+0x4e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8007f9c:	4b0b      	ldr	r3, [pc, #44]	; (8007fcc <tcp_new_port+0x60>)
 8007f9e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	b133      	cbz	r3, 8007fb4 <tcp_new_port+0x48>
      if (pcb->local_port == tcp_port) {
 8007fa6:	8ad9      	ldrh	r1, [r3, #22]
 8007fa8:	4a07      	ldr	r2, [pc, #28]	; (8007fc8 <tcp_new_port+0x5c>)
 8007faa:	8812      	ldrh	r2, [r2, #0]
 8007fac:	4291      	cmp	r1, r2
 8007fae:	d0e5      	beq.n	8007f7c <tcp_new_port+0x10>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8007fb0:	68db      	ldr	r3, [r3, #12]
 8007fb2:	e7f7      	b.n	8007fa4 <tcp_new_port+0x38>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8007fb4:	3001      	adds	r0, #1
 8007fb6:	b2c0      	uxtb	r0, r0
 8007fb8:	e7ee      	b.n	8007f98 <tcp_new_port+0x2c>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8007fba:	4b03      	ldr	r3, [pc, #12]	; (8007fc8 <tcp_new_port+0x5c>)
 8007fbc:	8818      	ldrh	r0, [r3, #0]
}
 8007fbe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007fc2:	4770      	bx	lr
          return 0;
 8007fc4:	2000      	movs	r0, #0
 8007fc6:	e7fa      	b.n	8007fbe <tcp_new_port+0x52>
 8007fc8:	2000000c 	.word	0x2000000c
 8007fcc:	0800e7d0 	.word	0x0800e7d0

08007fd0 <tcp_listen_closed>:
{
 8007fd0:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8007fd2:	4605      	mov	r5, r0
 8007fd4:	b150      	cbz	r0, 8007fec <tcp_listen_closed+0x1c>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8007fd6:	7d2b      	ldrb	r3, [r5, #20]
 8007fd8:	2b01      	cmp	r3, #1
 8007fda:	d005      	beq.n	8007fe8 <tcp_listen_closed+0x18>
 8007fdc:	4b0c      	ldr	r3, [pc, #48]	; (8008010 <tcp_listen_closed+0x40>)
 8007fde:	22c1      	movs	r2, #193	; 0xc1
 8007fe0:	490c      	ldr	r1, [pc, #48]	; (8008014 <tcp_listen_closed+0x44>)
 8007fe2:	480d      	ldr	r0, [pc, #52]	; (8008018 <tcp_listen_closed+0x48>)
 8007fe4:	f004 fe03 	bl	800cbee <iprintf>
{
 8007fe8:	2401      	movs	r4, #1
 8007fea:	e00e      	b.n	800800a <tcp_listen_closed+0x3a>
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8007fec:	4b08      	ldr	r3, [pc, #32]	; (8008010 <tcp_listen_closed+0x40>)
 8007fee:	22c0      	movs	r2, #192	; 0xc0
 8007ff0:	490a      	ldr	r1, [pc, #40]	; (800801c <tcp_listen_closed+0x4c>)
 8007ff2:	4809      	ldr	r0, [pc, #36]	; (8008018 <tcp_listen_closed+0x48>)
 8007ff4:	f004 fdfb 	bl	800cbee <iprintf>
 8007ff8:	e7ed      	b.n	8007fd6 <tcp_listen_closed+0x6>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 8007ffa:	4b09      	ldr	r3, [pc, #36]	; (8008020 <tcp_listen_closed+0x50>)
 8007ffc:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8008000:	4629      	mov	r1, r5
 8008002:	6818      	ldr	r0, [r3, #0]
 8008004:	f7ff ffa8 	bl	8007f58 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8008008:	3401      	adds	r4, #1
 800800a:	2c03      	cmp	r4, #3
 800800c:	d9f5      	bls.n	8007ffa <tcp_listen_closed+0x2a>
}
 800800e:	bd38      	pop	{r3, r4, r5, pc}
 8008010:	0800e77c 	.word	0x0800e77c
 8008014:	0800e7b8 	.word	0x0800e7b8
 8008018:	0800d378 	.word	0x0800d378
 800801c:	0800e7ac 	.word	0x0800e7ac
 8008020:	0800e7d0 	.word	0x0800e7d0

08008024 <tcp_close_shutdown_fin>:
{
 8008024:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8008026:	4604      	mov	r4, r0
 8008028:	b140      	cbz	r0, 800803c <tcp_close_shutdown_fin+0x18>
  switch (pcb->state) {
 800802a:	7d23      	ldrb	r3, [r4, #20]
 800802c:	2b04      	cmp	r3, #4
 800802e:	d01a      	beq.n	8008066 <tcp_close_shutdown_fin+0x42>
 8008030:	2b07      	cmp	r3, #7
 8008032:	d021      	beq.n	8008078 <tcp_close_shutdown_fin+0x54>
 8008034:	2b03      	cmp	r3, #3
 8008036:	d009      	beq.n	800804c <tcp_close_shutdown_fin+0x28>
    return ERR_OK;
 8008038:	2500      	movs	r5, #0
 800803a:	e012      	b.n	8008062 <tcp_close_shutdown_fin+0x3e>
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800803c:	4b18      	ldr	r3, [pc, #96]	; (80080a0 <tcp_close_shutdown_fin+0x7c>)
 800803e:	f240 124d 	movw	r2, #333	; 0x14d
 8008042:	4918      	ldr	r1, [pc, #96]	; (80080a4 <tcp_close_shutdown_fin+0x80>)
 8008044:	4818      	ldr	r0, [pc, #96]	; (80080a8 <tcp_close_shutdown_fin+0x84>)
 8008046:	f004 fdd2 	bl	800cbee <iprintf>
 800804a:	e7ee      	b.n	800802a <tcp_close_shutdown_fin+0x6>
    err = tcp_send_fin(pcb);
 800804c:	4620      	mov	r0, r4
 800804e:	f003 f85d 	bl	800b10c <tcp_send_fin>
    if (err == ERR_OK) {
 8008052:	4605      	mov	r5, r0
 8008054:	b908      	cbnz	r0, 800805a <tcp_close_shutdown_fin+0x36>
      pcb->state = FIN_WAIT_1;
 8008056:	2305      	movs	r3, #5
 8008058:	7523      	strb	r3, [r4, #20]
  if (err == ERR_OK) {
 800805a:	b1b5      	cbz	r5, 800808a <tcp_close_shutdown_fin+0x66>
  } else if (err == ERR_MEM) {
 800805c:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8008060:	d017      	beq.n	8008092 <tcp_close_shutdown_fin+0x6e>
}
 8008062:	4628      	mov	r0, r5
 8008064:	bd38      	pop	{r3, r4, r5, pc}
    err = tcp_send_fin(pcb);
 8008066:	4620      	mov	r0, r4
 8008068:	f003 f850 	bl	800b10c <tcp_send_fin>
    if (err == ERR_OK) {
 800806c:	4605      	mov	r5, r0
 800806e:	2800      	cmp	r0, #0
 8008070:	d1f3      	bne.n	800805a <tcp_close_shutdown_fin+0x36>
      pcb->state = FIN_WAIT_1;
 8008072:	2305      	movs	r3, #5
 8008074:	7523      	strb	r3, [r4, #20]
 8008076:	e7f0      	b.n	800805a <tcp_close_shutdown_fin+0x36>
    err = tcp_send_fin(pcb);
 8008078:	4620      	mov	r0, r4
 800807a:	f003 f847 	bl	800b10c <tcp_send_fin>
    if (err == ERR_OK) {
 800807e:	4605      	mov	r5, r0
 8008080:	2800      	cmp	r0, #0
 8008082:	d1ea      	bne.n	800805a <tcp_close_shutdown_fin+0x36>
      pcb->state = LAST_ACK;
 8008084:	2309      	movs	r3, #9
 8008086:	7523      	strb	r3, [r4, #20]
 8008088:	e7e7      	b.n	800805a <tcp_close_shutdown_fin+0x36>
    tcp_output(pcb);
 800808a:	4620      	mov	r0, r4
 800808c:	f003 f89a 	bl	800b1c4 <tcp_output>
 8008090:	e7e7      	b.n	8008062 <tcp_close_shutdown_fin+0x3e>
    pcb->flags |= TF_CLOSEPEND;
 8008092:	7ea3      	ldrb	r3, [r4, #26]
 8008094:	f043 0308 	orr.w	r3, r3, #8
 8008098:	76a3      	strb	r3, [r4, #26]
    return ERR_OK;
 800809a:	2500      	movs	r5, #0
 800809c:	e7e1      	b.n	8008062 <tcp_close_shutdown_fin+0x3e>
 800809e:	bf00      	nop
 80080a0:	0800e77c 	.word	0x0800e77c
 80080a4:	0800e7ac 	.word	0x0800e7ac
 80080a8:	0800d378 	.word	0x0800d378

080080ac <tcp_init>:
{
 80080ac:	4770      	bx	lr
	...

080080b0 <tcp_update_rcv_ann_wnd>:
{
 80080b0:	b538      	push	{r3, r4, r5, lr}
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80080b2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80080b4:	8d04      	ldrh	r4, [r0, #40]	; 0x28
 80080b6:	192a      	adds	r2, r5, r4
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80080b8:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80080ba:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 80080bc:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 80080c0:	d901      	bls.n	80080c6 <tcp_update_rcv_ann_wnd+0x16>
 80080c2:	f44f 6386 	mov.w	r3, #1072	; 0x430
 80080c6:	440b      	add	r3, r1
 80080c8:	1ad3      	subs	r3, r2, r3
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	db02      	blt.n	80080d4 <tcp_update_rcv_ann_wnd+0x24>
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 80080ce:	8544      	strh	r4, [r0, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 80080d0:	1a50      	subs	r0, r2, r1
 80080d2:	bd38      	pop	{r3, r4, r5, pc}
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80080d4:	1a6b      	subs	r3, r5, r1
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	dd03      	ble.n	80080e2 <tcp_update_rcv_ann_wnd+0x32>
      pcb->rcv_ann_wnd = 0;
 80080da:	2200      	movs	r2, #0
 80080dc:	8542      	strh	r2, [r0, #42]	; 0x2a
    return 0;
 80080de:	4610      	mov	r0, r2
 80080e0:	bd38      	pop	{r3, r4, r5, pc}
 80080e2:	4604      	mov	r4, r0
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80080e4:	1b4d      	subs	r5, r1, r5
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80080e6:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 80080ea:	d202      	bcs.n	80080f2 <tcp_update_rcv_ann_wnd+0x42>
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80080ec:	8565      	strh	r5, [r4, #42]	; 0x2a
    return 0;
 80080ee:	2000      	movs	r0, #0
}
 80080f0:	bd38      	pop	{r3, r4, r5, pc}
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80080f2:	4b04      	ldr	r3, [pc, #16]	; (8008104 <tcp_update_rcv_ann_wnd+0x54>)
 80080f4:	f44f 7242 	mov.w	r2, #776	; 0x308
 80080f8:	4903      	ldr	r1, [pc, #12]	; (8008108 <tcp_update_rcv_ann_wnd+0x58>)
 80080fa:	4804      	ldr	r0, [pc, #16]	; (800810c <tcp_update_rcv_ann_wnd+0x5c>)
 80080fc:	f004 fd77 	bl	800cbee <iprintf>
 8008100:	e7f4      	b.n	80080ec <tcp_update_rcv_ann_wnd+0x3c>
 8008102:	bf00      	nop
 8008104:	0800e77c 	.word	0x0800e77c
 8008108:	0800ea50 	.word	0x0800ea50
 800810c:	0800d378 	.word	0x0800d378

08008110 <tcp_recved>:
{
 8008110:	b538      	push	{r3, r4, r5, lr}
 8008112:	4605      	mov	r5, r0
 8008114:	460c      	mov	r4, r1
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8008116:	7d03      	ldrb	r3, [r0, #20]
 8008118:	2b01      	cmp	r3, #1
 800811a:	d010      	beq.n	800813e <tcp_recved+0x2e>
  pcb->rcv_wnd += len;
 800811c:	8d29      	ldrh	r1, [r5, #40]	; 0x28
 800811e:	4421      	add	r1, r4
 8008120:	b289      	uxth	r1, r1
 8008122:	8529      	strh	r1, [r5, #40]	; 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 8008124:	f5b1 6f06 	cmp.w	r1, #2144	; 0x860
 8008128:	d911      	bls.n	800814e <tcp_recved+0x3e>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800812a:	f44f 6306 	mov.w	r3, #2144	; 0x860
 800812e:	852b      	strh	r3, [r5, #40]	; 0x28
  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8008130:	4628      	mov	r0, r5
 8008132:	f7ff ffbd 	bl	80080b0 <tcp_update_rcv_ann_wnd>
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8008136:	f5b0 7f06 	cmp.w	r0, #536	; 0x218
 800813a:	da1b      	bge.n	8008174 <tcp_recved+0x64>
 800813c:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800813e:	4b11      	ldr	r3, [pc, #68]	; (8008184 <tcp_recved+0x74>)
 8008140:	f44f 7248 	mov.w	r2, #800	; 0x320
 8008144:	4910      	ldr	r1, [pc, #64]	; (8008188 <tcp_recved+0x78>)
 8008146:	4811      	ldr	r0, [pc, #68]	; (800818c <tcp_recved+0x7c>)
 8008148:	f004 fd51 	bl	800cbee <iprintf>
 800814c:	e7e6      	b.n	800811c <tcp_recved+0xc>
  } else if (pcb->rcv_wnd == 0) {
 800814e:	2900      	cmp	r1, #0
 8008150:	d1ee      	bne.n	8008130 <tcp_recved+0x20>
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 8008152:	7d2b      	ldrb	r3, [r5, #20]
 8008154:	2b07      	cmp	r3, #7
 8008156:	d009      	beq.n	800816c <tcp_recved+0x5c>
 8008158:	2b09      	cmp	r3, #9
 800815a:	d007      	beq.n	800816c <tcp_recved+0x5c>
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 800815c:	4b09      	ldr	r3, [pc, #36]	; (8008184 <tcp_recved+0x74>)
 800815e:	f240 322d 	movw	r2, #813	; 0x32d
 8008162:	490b      	ldr	r1, [pc, #44]	; (8008190 <tcp_recved+0x80>)
 8008164:	4809      	ldr	r0, [pc, #36]	; (800818c <tcp_recved+0x7c>)
 8008166:	f004 fd42 	bl	800cbee <iprintf>
 800816a:	e7e1      	b.n	8008130 <tcp_recved+0x20>
      pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800816c:	f44f 6306 	mov.w	r3, #2144	; 0x860
 8008170:	852b      	strh	r3, [r5, #40]	; 0x28
 8008172:	e7dd      	b.n	8008130 <tcp_recved+0x20>
    tcp_ack_now(pcb);
 8008174:	7eab      	ldrb	r3, [r5, #26]
 8008176:	f043 0302 	orr.w	r3, r3, #2
 800817a:	76ab      	strb	r3, [r5, #26]
    tcp_output(pcb);
 800817c:	4628      	mov	r0, r5
 800817e:	f003 f821 	bl	800b1c4 <tcp_output>
}
 8008182:	e7db      	b.n	800813c <tcp_recved+0x2c>
 8008184:	0800e77c 	.word	0x0800e77c
 8008188:	0800e87c 	.word	0x0800e87c
 800818c:	0800d378 	.word	0x0800d378
 8008190:	0800e8a4 	.word	0x0800e8a4

08008194 <tcp_seg_free>:
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
  if (seg != NULL) {
 8008194:	b150      	cbz	r0, 80081ac <tcp_seg_free+0x18>
{
 8008196:	b510      	push	{r4, lr}
 8008198:	4604      	mov	r4, r0
    if (seg->p != NULL) {
 800819a:	6840      	ldr	r0, [r0, #4]
 800819c:	b108      	cbz	r0, 80081a2 <tcp_seg_free+0xe>
      pbuf_free(seg->p);
 800819e:	f7ff fbd3 	bl	8007948 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 80081a2:	4621      	mov	r1, r4
 80081a4:	2003      	movs	r0, #3
 80081a6:	f7ff f9f9 	bl	800759c <memp_free>
 80081aa:	bd10      	pop	{r4, pc}
 80081ac:	4770      	bx	lr

080081ae <tcp_segs_free>:
  while (seg != NULL) {
 80081ae:	b138      	cbz	r0, 80081c0 <tcp_segs_free+0x12>
{
 80081b0:	b510      	push	{r4, lr}
    struct tcp_seg *next = seg->next;
 80081b2:	6804      	ldr	r4, [r0, #0]
    tcp_seg_free(seg);
 80081b4:	f7ff ffee 	bl	8008194 <tcp_seg_free>
    seg = next;
 80081b8:	4620      	mov	r0, r4
  while (seg != NULL) {
 80081ba:	2c00      	cmp	r4, #0
 80081bc:	d1f9      	bne.n	80081b2 <tcp_segs_free+0x4>
}
 80081be:	bd10      	pop	{r4, pc}
 80081c0:	4770      	bx	lr

080081c2 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 80081c2:	b538      	push	{r3, r4, r5, lr}
 80081c4:	4605      	mov	r5, r0
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 80081c6:	2003      	movs	r0, #3
 80081c8:	f7ff f9ce 	bl	8007568 <memp_malloc>
  if (cseg == NULL) {
 80081cc:	4604      	mov	r4, r0
 80081ce:	b150      	cbz	r0, 80081e6 <tcp_seg_copy+0x24>
    return NULL;
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80081d0:	6828      	ldr	r0, [r5, #0]
 80081d2:	6869      	ldr	r1, [r5, #4]
 80081d4:	68aa      	ldr	r2, [r5, #8]
 80081d6:	68eb      	ldr	r3, [r5, #12]
 80081d8:	6020      	str	r0, [r4, #0]
 80081da:	6061      	str	r1, [r4, #4]
 80081dc:	60a2      	str	r2, [r4, #8]
 80081de:	60e3      	str	r3, [r4, #12]
  pbuf_ref(cseg->p);
 80081e0:	6860      	ldr	r0, [r4, #4]
 80081e2:	f7ff fd81 	bl	8007ce8 <pbuf_ref>
  return cseg;
}
 80081e6:	4620      	mov	r0, r4
 80081e8:	bd38      	pop	{r3, r4, r5, pc}

080081ea <tcp_arg>:
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 80081ea:	b100      	cbz	r0, 80081ee <tcp_arg+0x4>
    pcb->callback_arg = arg;
 80081ec:	6101      	str	r1, [r0, #16]
 80081ee:	4770      	bx	lr

080081f0 <tcp_recv>:
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
  if (pcb != NULL) {
 80081f0:	b180      	cbz	r0, 8008214 <tcp_recv+0x24>
{
 80081f2:	b538      	push	{r3, r4, r5, lr}
 80081f4:	4604      	mov	r4, r0
 80081f6:	460d      	mov	r5, r1
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 80081f8:	7d03      	ldrb	r3, [r0, #20]
 80081fa:	2b01      	cmp	r3, #1
 80081fc:	d002      	beq.n	8008204 <tcp_recv+0x14>
    pcb->recv = recv;
 80081fe:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
 8008202:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8008204:	4b04      	ldr	r3, [pc, #16]	; (8008218 <tcp_recv+0x28>)
 8008206:	f240 62bb 	movw	r2, #1723	; 0x6bb
 800820a:	4904      	ldr	r1, [pc, #16]	; (800821c <tcp_recv+0x2c>)
 800820c:	4804      	ldr	r0, [pc, #16]	; (8008220 <tcp_recv+0x30>)
 800820e:	f004 fcee 	bl	800cbee <iprintf>
 8008212:	e7f4      	b.n	80081fe <tcp_recv+0xe>
 8008214:	4770      	bx	lr
 8008216:	bf00      	nop
 8008218:	0800e77c 	.word	0x0800e77c
 800821c:	0800e854 	.word	0x0800e854
 8008220:	0800d378 	.word	0x0800d378

08008224 <tcp_sent>:
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
  if (pcb != NULL) {
 8008224:	b178      	cbz	r0, 8008246 <tcp_sent+0x22>
{
 8008226:	b538      	push	{r3, r4, r5, lr}
 8008228:	4604      	mov	r4, r0
 800822a:	460d      	mov	r5, r1
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800822c:	7d03      	ldrb	r3, [r0, #20]
 800822e:	2b01      	cmp	r3, #1
 8008230:	d001      	beq.n	8008236 <tcp_sent+0x12>
    pcb->sent = sent;
 8008232:	67e5      	str	r5, [r4, #124]	; 0x7c
 8008234:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8008236:	4b04      	ldr	r3, [pc, #16]	; (8008248 <tcp_sent+0x24>)
 8008238:	f240 62cc 	movw	r2, #1740	; 0x6cc
 800823c:	4903      	ldr	r1, [pc, #12]	; (800824c <tcp_sent+0x28>)
 800823e:	4804      	ldr	r0, [pc, #16]	; (8008250 <tcp_sent+0x2c>)
 8008240:	f004 fcd5 	bl	800cbee <iprintf>
 8008244:	e7f5      	b.n	8008232 <tcp_sent+0xe>
 8008246:	4770      	bx	lr
 8008248:	0800e77c 	.word	0x0800e77c
 800824c:	0800e8c8 	.word	0x0800e8c8
 8008250:	0800d378 	.word	0x0800d378

08008254 <tcp_err>:
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
  if (pcb != NULL) {
 8008254:	b180      	cbz	r0, 8008278 <tcp_err+0x24>
{
 8008256:	b538      	push	{r3, r4, r5, lr}
 8008258:	4604      	mov	r4, r0
 800825a:	460d      	mov	r5, r1
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800825c:	7d03      	ldrb	r3, [r0, #20]
 800825e:	2b01      	cmp	r3, #1
 8008260:	d002      	beq.n	8008268 <tcp_err+0x14>
    pcb->errf = err;
 8008262:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
 8008266:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8008268:	4b04      	ldr	r3, [pc, #16]	; (800827c <tcp_err+0x28>)
 800826a:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 800826e:	4904      	ldr	r1, [pc, #16]	; (8008280 <tcp_err+0x2c>)
 8008270:	4804      	ldr	r0, [pc, #16]	; (8008284 <tcp_err+0x30>)
 8008272:	f004 fcbc 	bl	800cbee <iprintf>
 8008276:	e7f4      	b.n	8008262 <tcp_err+0xe>
 8008278:	4770      	bx	lr
 800827a:	bf00      	nop
 800827c:	0800e77c 	.word	0x0800e77c
 8008280:	0800e744 	.word	0x0800e744
 8008284:	0800d378 	.word	0x0800d378

08008288 <tcp_accept>:
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8008288:	b110      	cbz	r0, 8008290 <tcp_accept+0x8>
 800828a:	7d02      	ldrb	r2, [r0, #20]
 800828c:	2a01      	cmp	r2, #1
 800828e:	d000      	beq.n	8008292 <tcp_accept+0xa>
 8008290:	4770      	bx	lr
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen*)pcb;
    lpcb->accept = accept;
 8008292:	6181      	str	r1, [r0, #24]
  }
}
 8008294:	e7fc      	b.n	8008290 <tcp_accept+0x8>
	...

08008298 <tcp_poll>:
 * timer interval, which is called twice a second.
 *
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8008298:	b570      	push	{r4, r5, r6, lr}
 800829a:	4604      	mov	r4, r0
 800829c:	460e      	mov	r6, r1
 800829e:	4615      	mov	r5, r2
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 80082a0:	7d03      	ldrb	r3, [r0, #20]
 80082a2:	2b01      	cmp	r3, #1
 80082a4:	d003      	beq.n	80082ae <tcp_poll+0x16>
#if LWIP_CALLBACK_API
  pcb->poll = poll;
 80082a6:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 80082aa:	7725      	strb	r5, [r4, #28]
 80082ac:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 80082ae:	4b04      	ldr	r3, [pc, #16]	; (80082c0 <tcp_poll+0x28>)
 80082b0:	f240 7203 	movw	r2, #1795	; 0x703
 80082b4:	4903      	ldr	r1, [pc, #12]	; (80082c4 <tcp_poll+0x2c>)
 80082b6:	4804      	ldr	r0, [pc, #16]	; (80082c8 <tcp_poll+0x30>)
 80082b8:	f004 fc99 	bl	800cbee <iprintf>
 80082bc:	e7f3      	b.n	80082a6 <tcp_poll+0xe>
 80082be:	bf00      	nop
 80082c0:	0800e77c 	.word	0x0800e77c
 80082c4:	0800e834 	.word	0x0800e834
 80082c8:	0800d378 	.word	0x0800d378

080082cc <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80082cc:	b538      	push	{r3, r4, r5, lr}
  if (pcb->state != CLOSED &&
 80082ce:	7d03      	ldrb	r3, [r0, #20]
 80082d0:	b1e3      	cbz	r3, 800830c <tcp_pcb_purge+0x40>
 80082d2:	2b0a      	cmp	r3, #10
 80082d4:	d01a      	beq.n	800830c <tcp_pcb_purge+0x40>
     pcb->state != TIME_WAIT &&
 80082d6:	2b01      	cmp	r3, #1
 80082d8:	d018      	beq.n	800830c <tcp_pcb_purge+0x40>
 80082da:	4604      	mov	r4, r0

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 80082dc:	6f40      	ldr	r0, [r0, #116]	; 0x74
 80082de:	b118      	cbz	r0, 80082e8 <tcp_pcb_purge+0x1c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 80082e0:	f7ff fb32 	bl	8007948 <pbuf_free>
      pcb->refused_data = NULL;
 80082e4:	2300      	movs	r3, #0
 80082e6:	6763      	str	r3, [r4, #116]	; 0x74
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 80082e8:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80082ea:	f7ff ff60 	bl	80081ae <tcp_segs_free>
    pcb->ooseq = NULL;
 80082ee:	2500      	movs	r5, #0
 80082f0:	6725      	str	r5, [r4, #112]	; 0x70
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 80082f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80082f6:	8623      	strh	r3, [r4, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 80082f8:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 80082fa:	f7ff ff58 	bl	80081ae <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 80082fe:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8008300:	f7ff ff55 	bl	80081ae <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8008304:	66a5      	str	r5, [r4, #104]	; 0x68
 8008306:	66e5      	str	r5, [r4, #108]	; 0x6c
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8008308:	f8a4 5064 	strh.w	r5, [r4, #100]	; 0x64
 800830c:	bd38      	pop	{r3, r4, r5, pc}
	...

08008310 <tcp_slowtmr>:
{
 8008310:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008314:	b082      	sub	sp, #8
  ++tcp_ticks;
 8008316:	4aae      	ldr	r2, [pc, #696]	; (80085d0 <tcp_slowtmr+0x2c0>)
 8008318:	6813      	ldr	r3, [r2, #0]
 800831a:	3301      	adds	r3, #1
 800831c:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800831e:	4aad      	ldr	r2, [pc, #692]	; (80085d4 <tcp_slowtmr+0x2c4>)
 8008320:	7813      	ldrb	r3, [r2, #0]
 8008322:	3301      	adds	r3, #1
 8008324:	7013      	strb	r3, [r2, #0]
  pcb = tcp_active_pcbs;
 8008326:	4bac      	ldr	r3, [pc, #688]	; (80085d8 <tcp_slowtmr+0x2c8>)
 8008328:	681c      	ldr	r4, [r3, #0]
  prev = NULL;
 800832a:	2600      	movs	r6, #0
  while (pcb != NULL) {
 800832c:	e018      	b.n	8008360 <tcp_slowtmr+0x50>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800832e:	4bab      	ldr	r3, [pc, #684]	; (80085dc <tcp_slowtmr+0x2cc>)
 8008330:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 8008334:	49aa      	ldr	r1, [pc, #680]	; (80085e0 <tcp_slowtmr+0x2d0>)
 8008336:	48ab      	ldr	r0, [pc, #684]	; (80085e4 <tcp_slowtmr+0x2d4>)
 8008338:	f004 fc59 	bl	800cbee <iprintf>
 800833c:	e016      	b.n	800836c <tcp_slowtmr+0x5c>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800833e:	4ba7      	ldr	r3, [pc, #668]	; (80085dc <tcp_slowtmr+0x2cc>)
 8008340:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8008344:	49a8      	ldr	r1, [pc, #672]	; (80085e8 <tcp_slowtmr+0x2d8>)
 8008346:	48a7      	ldr	r0, [pc, #668]	; (80085e4 <tcp_slowtmr+0x2d4>)
 8008348:	f004 fc51 	bl	800cbee <iprintf>
 800834c:	e011      	b.n	8008372 <tcp_slowtmr+0x62>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800834e:	4ba3      	ldr	r3, [pc, #652]	; (80085dc <tcp_slowtmr+0x2cc>)
 8008350:	f240 32f2 	movw	r2, #1010	; 0x3f2
 8008354:	49a5      	ldr	r1, [pc, #660]	; (80085ec <tcp_slowtmr+0x2dc>)
 8008356:	48a3      	ldr	r0, [pc, #652]	; (80085e4 <tcp_slowtmr+0x2d4>)
 8008358:	f004 fc49 	bl	800cbee <iprintf>
 800835c:	e00c      	b.n	8008378 <tcp_slowtmr+0x68>
      pcb = pcb->next;
 800835e:	68e4      	ldr	r4, [r4, #12]
  while (pcb != NULL) {
 8008360:	2c00      	cmp	r4, #0
 8008362:	f000 817c 	beq.w	800865e <tcp_slowtmr+0x34e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8008366:	7d23      	ldrb	r3, [r4, #20]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d0e0      	beq.n	800832e <tcp_slowtmr+0x1e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800836c:	7d23      	ldrb	r3, [r4, #20]
 800836e:	2b01      	cmp	r3, #1
 8008370:	d0e5      	beq.n	800833e <tcp_slowtmr+0x2e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8008372:	7d23      	ldrb	r3, [r4, #20]
 8008374:	2b0a      	cmp	r3, #10
 8008376:	d0ea      	beq.n	800834e <tcp_slowtmr+0x3e>
    if (pcb->last_timer == tcp_timer_ctr) {
 8008378:	7f62      	ldrb	r2, [r4, #29]
 800837a:	4b96      	ldr	r3, [pc, #600]	; (80085d4 <tcp_slowtmr+0x2c4>)
 800837c:	781b      	ldrb	r3, [r3, #0]
 800837e:	429a      	cmp	r2, r3
 8008380:	d0ed      	beq.n	800835e <tcp_slowtmr+0x4e>
    pcb->last_timer = tcp_timer_ctr;
 8008382:	7763      	strb	r3, [r4, #29]
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8008384:	7d23      	ldrb	r3, [r4, #20]
 8008386:	2b02      	cmp	r3, #2
 8008388:	d016      	beq.n	80083b8 <tcp_slowtmr+0xa8>
    else if (pcb->nrtx >= TCP_MAXRTX) {
 800838a:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 800838e:	2a0b      	cmp	r2, #11
 8008390:	d860      	bhi.n	8008454 <tcp_slowtmr+0x144>
      if (pcb->persist_backoff > 0) {
 8008392:	f894 5095 	ldrb.w	r5, [r4, #149]	; 0x95
 8008396:	b335      	cbz	r5, 80083e6 <tcp_slowtmr+0xd6>
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 8008398:	3d01      	subs	r5, #1
 800839a:	4b95      	ldr	r3, [pc, #596]	; (80085f0 <tcp_slowtmr+0x2e0>)
 800839c:	5d5a      	ldrb	r2, [r3, r5]
        if (pcb->persist_cnt < backoff_cnt) {
 800839e:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
 80083a2:	429a      	cmp	r2, r3
 80083a4:	d902      	bls.n	80083ac <tcp_slowtmr+0x9c>
          pcb->persist_cnt++;
 80083a6:	3301      	adds	r3, #1
 80083a8:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
        if (pcb->persist_cnt >= backoff_cnt) {
 80083ac:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
 80083b0:	429a      	cmp	r2, r3
 80083b2:	d907      	bls.n	80083c4 <tcp_slowtmr+0xb4>
    pcb_remove = 0;
 80083b4:	2500      	movs	r5, #0
 80083b6:	e04e      	b.n	8008456 <tcp_slowtmr+0x146>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80083b8:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 80083bc:	2a05      	cmp	r2, #5
 80083be:	d9e4      	bls.n	800838a <tcp_slowtmr+0x7a>
      ++pcb_remove;
 80083c0:	2501      	movs	r5, #1
 80083c2:	e048      	b.n	8008456 <tcp_slowtmr+0x146>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 80083c4:	4620      	mov	r0, r4
 80083c6:	f003 f94c 	bl	800b662 <tcp_zero_window_probe>
 80083ca:	2800      	cmp	r0, #0
 80083cc:	d150      	bne.n	8008470 <tcp_slowtmr+0x160>
            pcb->persist_cnt = 0;
 80083ce:	2300      	movs	r3, #0
 80083d0:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80083d4:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 80083d8:	2b06      	cmp	r3, #6
 80083da:	d84b      	bhi.n	8008474 <tcp_slowtmr+0x164>
              pcb->persist_backoff++;
 80083dc:	3301      	adds	r3, #1
 80083de:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
    pcb_remove = 0;
 80083e2:	2500      	movs	r5, #0
 80083e4:	e037      	b.n	8008456 <tcp_slowtmr+0x146>
        if (pcb->rtime >= 0) {
 80083e6:	f9b4 1030 	ldrsh.w	r1, [r4, #48]	; 0x30
 80083ea:	2900      	cmp	r1, #0
 80083ec:	db01      	blt.n	80083f2 <tcp_slowtmr+0xe2>
          ++pcb->rtime;
 80083ee:	3101      	adds	r1, #1
 80083f0:	8621      	strh	r1, [r4, #48]	; 0x30
        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 80083f2:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 80083f4:	b379      	cbz	r1, 8008456 <tcp_slowtmr+0x146>
 80083f6:	f9b4 0030 	ldrsh.w	r0, [r4, #48]	; 0x30
 80083fa:	f9b4 1040 	ldrsh.w	r1, [r4, #64]	; 0x40
 80083fe:	4288      	cmp	r0, r1
 8008400:	db29      	blt.n	8008456 <tcp_slowtmr+0x146>
          if (pcb->state != SYN_SENT) {
 8008402:	2b02      	cmp	r3, #2
 8008404:	d00d      	beq.n	8008422 <tcp_slowtmr+0x112>
            u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff)-1);
 8008406:	2a0c      	cmp	r2, #12
 8008408:	bf28      	it	cs
 800840a:	220c      	movcs	r2, #12
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800840c:	f9b4 103c 	ldrsh.w	r1, [r4, #60]	; 0x3c
 8008410:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	; 0x3e
 8008414:	eb03 03e1 	add.w	r3, r3, r1, asr #3
 8008418:	4976      	ldr	r1, [pc, #472]	; (80085f4 <tcp_slowtmr+0x2e4>)
 800841a:	5c8a      	ldrb	r2, [r1, r2]
 800841c:	4093      	lsls	r3, r2
 800841e:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
          pcb->rtime = 0;
 8008422:	2300      	movs	r3, #0
 8008424:	8623      	strh	r3, [r4, #48]	; 0x30
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8008426:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
 800842a:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 800842e:	4293      	cmp	r3, r2
 8008430:	bf28      	it	cs
 8008432:	4613      	movcs	r3, r2
          pcb->ssthresh = eff_wnd >> 1;
 8008434:	085b      	lsrs	r3, r3, #1
 8008436:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800843a:	8e61      	ldrh	r1, [r4, #50]	; 0x32
 800843c:	004a      	lsls	r2, r1, #1
 800843e:	b292      	uxth	r2, r2
 8008440:	4293      	cmp	r3, r2
 8008442:	d201      	bcs.n	8008448 <tcp_slowtmr+0x138>
            pcb->ssthresh = (pcb->mss << 1);
 8008444:	f8a4 204a 	strh.w	r2, [r4, #74]	; 0x4a
          pcb->cwnd = pcb->mss;
 8008448:	f8a4 1048 	strh.w	r1, [r4, #72]	; 0x48
          tcp_rexmit_rto(pcb);
 800844c:	4620      	mov	r0, r4
 800844e:	f003 f86b 	bl	800b528 <tcp_rexmit_rto>
 8008452:	e000      	b.n	8008456 <tcp_slowtmr+0x146>
      ++pcb_remove;
 8008454:	2501      	movs	r5, #1
    if (pcb->state == FIN_WAIT_2) {
 8008456:	7d23      	ldrb	r3, [r4, #20]
 8008458:	2b06      	cmp	r3, #6
 800845a:	d00d      	beq.n	8008478 <tcp_slowtmr+0x168>
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800845c:	7a22      	ldrb	r2, [r4, #8]
 800845e:	f012 0f08 	tst.w	r2, #8
 8008462:	d043      	beq.n	80084ec <tcp_slowtmr+0x1dc>
 8008464:	2b04      	cmp	r3, #4
 8008466:	d014      	beq.n	8008492 <tcp_slowtmr+0x182>
       ((pcb->state == ESTABLISHED) ||
 8008468:	2b07      	cmp	r3, #7
 800846a:	d012      	beq.n	8008492 <tcp_slowtmr+0x182>
    pcb_reset = 0;
 800846c:	2700      	movs	r7, #0
 800846e:	e03e      	b.n	80084ee <tcp_slowtmr+0x1de>
    pcb_remove = 0;
 8008470:	2500      	movs	r5, #0
 8008472:	e7f0      	b.n	8008456 <tcp_slowtmr+0x146>
 8008474:	2500      	movs	r5, #0
 8008476:	e7ee      	b.n	8008456 <tcp_slowtmr+0x146>
      if (pcb->flags & TF_RXCLOSED) {
 8008478:	7ea2      	ldrb	r2, [r4, #26]
 800847a:	f012 0f10 	tst.w	r2, #16
 800847e:	d0ed      	beq.n	800845c <tcp_slowtmr+0x14c>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008480:	6a21      	ldr	r1, [r4, #32]
 8008482:	4a53      	ldr	r2, [pc, #332]	; (80085d0 <tcp_slowtmr+0x2c0>)
 8008484:	6812      	ldr	r2, [r2, #0]
 8008486:	1a52      	subs	r2, r2, r1
 8008488:	2a28      	cmp	r2, #40	; 0x28
 800848a:	d9e7      	bls.n	800845c <tcp_slowtmr+0x14c>
          ++pcb_remove;
 800848c:	3501      	adds	r5, #1
 800848e:	b2ed      	uxtb	r5, r5
 8008490:	e7e4      	b.n	800845c <tcp_slowtmr+0x14c>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008492:	4b4f      	ldr	r3, [pc, #316]	; (80085d0 <tcp_slowtmr+0x2c0>)
 8008494:	681a      	ldr	r2, [r3, #0]
 8008496:	6a23      	ldr	r3, [r4, #32]
 8008498:	1ad2      	subs	r2, r2, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 800849a:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 800849e:	f501 2324 	add.w	r3, r1, #671744	; 0xa4000
 80084a2:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 80084a6:	4854      	ldr	r0, [pc, #336]	; (80085f8 <tcp_slowtmr+0x2e8>)
 80084a8:	fba0 0303 	umull	r0, r3, r0, r3
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80084ac:	ebb2 1f53 	cmp.w	r2, r3, lsr #5
 80084b0:	d903      	bls.n	80084ba <tcp_slowtmr+0x1aa>
        ++pcb_remove;
 80084b2:	3501      	adds	r5, #1
 80084b4:	b2ed      	uxtb	r5, r5
        ++pcb_reset;
 80084b6:	2701      	movs	r7, #1
 80084b8:	e019      	b.n	80084ee <tcp_slowtmr+0x1de>
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80084ba:	f894 3096 	ldrb.w	r3, [r4, #150]	; 0x96
 80084be:	484f      	ldr	r0, [pc, #316]	; (80085fc <tcp_slowtmr+0x2ec>)
 80084c0:	fb00 1303 	mla	r3, r0, r3, r1
                / TCP_SLOW_INTERVAL)
 80084c4:	494c      	ldr	r1, [pc, #304]	; (80085f8 <tcp_slowtmr+0x2e8>)
 80084c6:	fba1 1303 	umull	r1, r3, r1, r3
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80084ca:	ebb2 1f53 	cmp.w	r2, r3, lsr #5
 80084ce:	d801      	bhi.n	80084d4 <tcp_slowtmr+0x1c4>
    pcb_reset = 0;
 80084d0:	2700      	movs	r7, #0
 80084d2:	e00c      	b.n	80084ee <tcp_slowtmr+0x1de>
        err = tcp_keepalive(pcb);
 80084d4:	4620      	mov	r0, r4
 80084d6:	f003 f898 	bl	800b60a <tcp_keepalive>
        if (err == ERR_OK) {
 80084da:	2800      	cmp	r0, #0
 80084dc:	d13a      	bne.n	8008554 <tcp_slowtmr+0x244>
          pcb->keep_cnt_sent++;
 80084de:	f894 3096 	ldrb.w	r3, [r4, #150]	; 0x96
 80084e2:	3301      	adds	r3, #1
 80084e4:	f884 3096 	strb.w	r3, [r4, #150]	; 0x96
    pcb_reset = 0;
 80084e8:	2700      	movs	r7, #0
 80084ea:	e000      	b.n	80084ee <tcp_slowtmr+0x1de>
 80084ec:	2700      	movs	r7, #0
    if (pcb->ooseq != NULL &&
 80084ee:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80084f0:	b150      	cbz	r0, 8008508 <tcp_slowtmr+0x1f8>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 80084f2:	4b37      	ldr	r3, [pc, #220]	; (80085d0 <tcp_slowtmr+0x2c0>)
 80084f4:	681a      	ldr	r2, [r3, #0]
 80084f6:	6a23      	ldr	r3, [r4, #32]
 80084f8:	1ad2      	subs	r2, r2, r3
 80084fa:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 80084fe:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8008502:	0059      	lsls	r1, r3, #1
    if (pcb->ooseq != NULL &&
 8008504:	428a      	cmp	r2, r1
 8008506:	d227      	bcs.n	8008558 <tcp_slowtmr+0x248>
    if (pcb->state == SYN_RCVD) {
 8008508:	7d23      	ldrb	r3, [r4, #20]
 800850a:	2b03      	cmp	r3, #3
 800850c:	d029      	beq.n	8008562 <tcp_slowtmr+0x252>
    if (pcb->state == LAST_ACK) {
 800850e:	2b09      	cmp	r3, #9
 8008510:	d030      	beq.n	8008574 <tcp_slowtmr+0x264>
    if (pcb_remove) {
 8008512:	2d00      	cmp	r5, #0
 8008514:	d137      	bne.n	8008586 <tcp_slowtmr+0x276>
      pcb = pcb->next;
 8008516:	68e5      	ldr	r5, [r4, #12]
      ++prev->polltmr;
 8008518:	7ee3      	ldrb	r3, [r4, #27]
 800851a:	3301      	adds	r3, #1
 800851c:	b2db      	uxtb	r3, r3
 800851e:	76e3      	strb	r3, [r4, #27]
      if (prev->polltmr >= prev->pollinterval) {
 8008520:	7f22      	ldrb	r2, [r4, #28]
 8008522:	4293      	cmp	r3, r2
 8008524:	f0c0 8098 	bcc.w	8008658 <tcp_slowtmr+0x348>
        prev->polltmr = 0;
 8008528:	2300      	movs	r3, #0
 800852a:	76e3      	strb	r3, [r4, #27]
        tcp_active_pcbs_changed = 0;
 800852c:	4a34      	ldr	r2, [pc, #208]	; (8008600 <tcp_slowtmr+0x2f0>)
 800852e:	7013      	strb	r3, [r2, #0]
        TCP_EVENT_POLL(prev, err);
 8008530:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8008534:	2b00      	cmp	r3, #0
 8008536:	f000 8087 	beq.w	8008648 <tcp_slowtmr+0x338>
 800853a:	4621      	mov	r1, r4
 800853c:	6920      	ldr	r0, [r4, #16]
 800853e:	4798      	blx	r3
        if (tcp_active_pcbs_changed) {
 8008540:	4b2f      	ldr	r3, [pc, #188]	; (8008600 <tcp_slowtmr+0x2f0>)
 8008542:	781b      	ldrb	r3, [r3, #0]
 8008544:	2b00      	cmp	r3, #0
 8008546:	f47f aeee 	bne.w	8008326 <tcp_slowtmr+0x16>
        if (err == ERR_OK) {
 800854a:	2800      	cmp	r0, #0
 800854c:	d07e      	beq.n	800864c <tcp_slowtmr+0x33c>
      prev = pcb;
 800854e:	4626      	mov	r6, r4
      pcb = pcb->next;
 8008550:	462c      	mov	r4, r5
 8008552:	e705      	b.n	8008360 <tcp_slowtmr+0x50>
    pcb_reset = 0;
 8008554:	2700      	movs	r7, #0
 8008556:	e7ca      	b.n	80084ee <tcp_slowtmr+0x1de>
      tcp_segs_free(pcb->ooseq);
 8008558:	f7ff fe29 	bl	80081ae <tcp_segs_free>
      pcb->ooseq = NULL;
 800855c:	2300      	movs	r3, #0
 800855e:	6723      	str	r3, [r4, #112]	; 0x70
 8008560:	e7d2      	b.n	8008508 <tcp_slowtmr+0x1f8>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008562:	6a21      	ldr	r1, [r4, #32]
 8008564:	4a1a      	ldr	r2, [pc, #104]	; (80085d0 <tcp_slowtmr+0x2c0>)
 8008566:	6812      	ldr	r2, [r2, #0]
 8008568:	1a52      	subs	r2, r2, r1
 800856a:	2a28      	cmp	r2, #40	; 0x28
 800856c:	d9cf      	bls.n	800850e <tcp_slowtmr+0x1fe>
        ++pcb_remove;
 800856e:	3501      	adds	r5, #1
 8008570:	b2ed      	uxtb	r5, r5
 8008572:	e7cc      	b.n	800850e <tcp_slowtmr+0x1fe>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8008574:	6a22      	ldr	r2, [r4, #32]
 8008576:	4b16      	ldr	r3, [pc, #88]	; (80085d0 <tcp_slowtmr+0x2c0>)
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	1a9b      	subs	r3, r3, r2
 800857c:	2bf0      	cmp	r3, #240	; 0xf0
 800857e:	d9c8      	bls.n	8008512 <tcp_slowtmr+0x202>
        ++pcb_remove;
 8008580:	3501      	adds	r5, #1
 8008582:	b2ed      	uxtb	r5, r5
 8008584:	e7c5      	b.n	8008512 <tcp_slowtmr+0x202>
      tcp_err_fn err_fn = pcb->errf;
 8008586:	f8d4 508c 	ldr.w	r5, [r4, #140]	; 0x8c
      tcp_pcb_purge(pcb);
 800858a:	4620      	mov	r0, r4
 800858c:	f7ff fe9e 	bl	80082cc <tcp_pcb_purge>
      if (prev != NULL) {
 8008590:	2e00      	cmp	r6, #0
 8008592:	d03f      	beq.n	8008614 <tcp_slowtmr+0x304>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8008594:	4b10      	ldr	r3, [pc, #64]	; (80085d8 <tcp_slowtmr+0x2c8>)
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	429c      	cmp	r4, r3
 800859a:	d033      	beq.n	8008604 <tcp_slowtmr+0x2f4>
        prev->next = pcb->next;
 800859c:	68e3      	ldr	r3, [r4, #12]
 800859e:	60f3      	str	r3, [r6, #12]
      if (pcb_reset) {
 80085a0:	2f00      	cmp	r7, #0
 80085a2:	d146      	bne.n	8008632 <tcp_slowtmr+0x322>
      err_arg = pcb->callback_arg;
 80085a4:	f8d4 8010 	ldr.w	r8, [r4, #16]
      pcb = pcb->next;
 80085a8:	68e7      	ldr	r7, [r4, #12]
      memp_free(MEMP_TCP_PCB, pcb2);
 80085aa:	4621      	mov	r1, r4
 80085ac:	2001      	movs	r0, #1
 80085ae:	f7fe fff5 	bl	800759c <memp_free>
      tcp_active_pcbs_changed = 0;
 80085b2:	2200      	movs	r2, #0
 80085b4:	4b12      	ldr	r3, [pc, #72]	; (8008600 <tcp_slowtmr+0x2f0>)
 80085b6:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 80085b8:	b11d      	cbz	r5, 80085c2 <tcp_slowtmr+0x2b2>
 80085ba:	f06f 010c 	mvn.w	r1, #12
 80085be:	4640      	mov	r0, r8
 80085c0:	47a8      	blx	r5
      if (tcp_active_pcbs_changed) {
 80085c2:	4b0f      	ldr	r3, [pc, #60]	; (8008600 <tcp_slowtmr+0x2f0>)
 80085c4:	781b      	ldrb	r3, [r3, #0]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	f47f aead 	bne.w	8008326 <tcp_slowtmr+0x16>
      pcb = pcb->next;
 80085cc:	463c      	mov	r4, r7
 80085ce:	e6c7      	b.n	8008360 <tcp_slowtmr+0x50>
 80085d0:	20007980 	.word	0x20007980
 80085d4:	20003f82 	.word	0x20003f82
 80085d8:	2000797c 	.word	0x2000797c
 80085dc:	0800e77c 	.word	0x0800e77c
 80085e0:	0800e8f0 	.word	0x0800e8f0
 80085e4:	0800d378 	.word	0x0800d378
 80085e8:	0800e91c 	.word	0x0800e91c
 80085ec:	0800e948 	.word	0x0800e948
 80085f0:	0800e82c 	.word	0x0800e82c
 80085f4:	0800e6e8 	.word	0x0800e6e8
 80085f8:	10624dd3 	.word	0x10624dd3
 80085fc:	000124f8 	.word	0x000124f8
 8008600:	20007978 	.word	0x20007978
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8008604:	4b39      	ldr	r3, [pc, #228]	; (80086ec <tcp_slowtmr+0x3dc>)
 8008606:	f240 4289 	movw	r2, #1161	; 0x489
 800860a:	4939      	ldr	r1, [pc, #228]	; (80086f0 <tcp_slowtmr+0x3e0>)
 800860c:	4839      	ldr	r0, [pc, #228]	; (80086f4 <tcp_slowtmr+0x3e4>)
 800860e:	f004 faee 	bl	800cbee <iprintf>
 8008612:	e7c3      	b.n	800859c <tcp_slowtmr+0x28c>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8008614:	4b38      	ldr	r3, [pc, #224]	; (80086f8 <tcp_slowtmr+0x3e8>)
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	429c      	cmp	r4, r3
 800861a:	d006      	beq.n	800862a <tcp_slowtmr+0x31a>
 800861c:	4b33      	ldr	r3, [pc, #204]	; (80086ec <tcp_slowtmr+0x3dc>)
 800861e:	f240 428d 	movw	r2, #1165	; 0x48d
 8008622:	4936      	ldr	r1, [pc, #216]	; (80086fc <tcp_slowtmr+0x3ec>)
 8008624:	4833      	ldr	r0, [pc, #204]	; (80086f4 <tcp_slowtmr+0x3e4>)
 8008626:	f004 fae2 	bl	800cbee <iprintf>
        tcp_active_pcbs = pcb->next;
 800862a:	68e2      	ldr	r2, [r4, #12]
 800862c:	4b32      	ldr	r3, [pc, #200]	; (80086f8 <tcp_slowtmr+0x3e8>)
 800862e:	601a      	str	r2, [r3, #0]
 8008630:	e7b6      	b.n	80085a0 <tcp_slowtmr+0x290>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8008632:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008634:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8008636:	8b23      	ldrh	r3, [r4, #24]
 8008638:	9301      	str	r3, [sp, #4]
 800863a:	8ae3      	ldrh	r3, [r4, #22]
 800863c:	9300      	str	r3, [sp, #0]
 800863e:	1d23      	adds	r3, r4, #4
 8008640:	4622      	mov	r2, r4
 8008642:	f002 ff1b 	bl	800b47c <tcp_rst>
 8008646:	e7ad      	b.n	80085a4 <tcp_slowtmr+0x294>
        TCP_EVENT_POLL(prev, err);
 8008648:	2000      	movs	r0, #0
 800864a:	e779      	b.n	8008540 <tcp_slowtmr+0x230>
          tcp_output(prev);
 800864c:	4620      	mov	r0, r4
 800864e:	f002 fdb9 	bl	800b1c4 <tcp_output>
      prev = pcb;
 8008652:	4626      	mov	r6, r4
      pcb = pcb->next;
 8008654:	462c      	mov	r4, r5
 8008656:	e683      	b.n	8008360 <tcp_slowtmr+0x50>
      prev = pcb;
 8008658:	4626      	mov	r6, r4
      pcb = pcb->next;
 800865a:	462c      	mov	r4, r5
 800865c:	e680      	b.n	8008360 <tcp_slowtmr+0x50>
  pcb = tcp_tw_pcbs;
 800865e:	4b28      	ldr	r3, [pc, #160]	; (8008700 <tcp_slowtmr+0x3f0>)
 8008660:	681d      	ldr	r5, [r3, #0]
  while (pcb != NULL) {
 8008662:	e003      	b.n	800866c <tcp_slowtmr+0x35c>
      ++pcb_remove;
 8008664:	2301      	movs	r3, #1
    if (pcb_remove) {
 8008666:	b9ab      	cbnz	r3, 8008694 <tcp_slowtmr+0x384>
      prev = pcb;
 8008668:	462c      	mov	r4, r5
      pcb = pcb->next;
 800866a:	68ed      	ldr	r5, [r5, #12]
  while (pcb != NULL) {
 800866c:	2d00      	cmp	r5, #0
 800866e:	d039      	beq.n	80086e4 <tcp_slowtmr+0x3d4>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8008670:	7d2b      	ldrb	r3, [r5, #20]
 8008672:	2b0a      	cmp	r3, #10
 8008674:	d006      	beq.n	8008684 <tcp_slowtmr+0x374>
 8008676:	4b1d      	ldr	r3, [pc, #116]	; (80086ec <tcp_slowtmr+0x3dc>)
 8008678:	f240 42bd 	movw	r2, #1213	; 0x4bd
 800867c:	4921      	ldr	r1, [pc, #132]	; (8008704 <tcp_slowtmr+0x3f4>)
 800867e:	481d      	ldr	r0, [pc, #116]	; (80086f4 <tcp_slowtmr+0x3e4>)
 8008680:	f004 fab5 	bl	800cbee <iprintf>
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8008684:	6a2a      	ldr	r2, [r5, #32]
 8008686:	4b20      	ldr	r3, [pc, #128]	; (8008708 <tcp_slowtmr+0x3f8>)
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	1a9b      	subs	r3, r3, r2
 800868c:	2bf0      	cmp	r3, #240	; 0xf0
 800868e:	d8e9      	bhi.n	8008664 <tcp_slowtmr+0x354>
    pcb_remove = 0;
 8008690:	2300      	movs	r3, #0
 8008692:	e7e8      	b.n	8008666 <tcp_slowtmr+0x356>
      tcp_pcb_purge(pcb);
 8008694:	4628      	mov	r0, r5
 8008696:	f7ff fe19 	bl	80082cc <tcp_pcb_purge>
      if (prev != NULL) {
 800869a:	b1a4      	cbz	r4, 80086c6 <tcp_slowtmr+0x3b6>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800869c:	4b18      	ldr	r3, [pc, #96]	; (8008700 <tcp_slowtmr+0x3f0>)
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	429d      	cmp	r5, r3
 80086a2:	d008      	beq.n	80086b6 <tcp_slowtmr+0x3a6>
        prev->next = pcb->next;
 80086a4:	68eb      	ldr	r3, [r5, #12]
 80086a6:	60e3      	str	r3, [r4, #12]
      pcb = pcb->next;
 80086a8:	68ee      	ldr	r6, [r5, #12]
      memp_free(MEMP_TCP_PCB, pcb2);
 80086aa:	4629      	mov	r1, r5
 80086ac:	2001      	movs	r0, #1
 80086ae:	f7fe ff75 	bl	800759c <memp_free>
      pcb = pcb->next;
 80086b2:	4635      	mov	r5, r6
 80086b4:	e7da      	b.n	800866c <tcp_slowtmr+0x35c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 80086b6:	4b0d      	ldr	r3, [pc, #52]	; (80086ec <tcp_slowtmr+0x3dc>)
 80086b8:	f240 42cb 	movw	r2, #1227	; 0x4cb
 80086bc:	4913      	ldr	r1, [pc, #76]	; (800870c <tcp_slowtmr+0x3fc>)
 80086be:	480d      	ldr	r0, [pc, #52]	; (80086f4 <tcp_slowtmr+0x3e4>)
 80086c0:	f004 fa95 	bl	800cbee <iprintf>
 80086c4:	e7ee      	b.n	80086a4 <tcp_slowtmr+0x394>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 80086c6:	4b0e      	ldr	r3, [pc, #56]	; (8008700 <tcp_slowtmr+0x3f0>)
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	429d      	cmp	r5, r3
 80086cc:	d006      	beq.n	80086dc <tcp_slowtmr+0x3cc>
 80086ce:	4b07      	ldr	r3, [pc, #28]	; (80086ec <tcp_slowtmr+0x3dc>)
 80086d0:	f240 42cf 	movw	r2, #1231	; 0x4cf
 80086d4:	490e      	ldr	r1, [pc, #56]	; (8008710 <tcp_slowtmr+0x400>)
 80086d6:	4807      	ldr	r0, [pc, #28]	; (80086f4 <tcp_slowtmr+0x3e4>)
 80086d8:	f004 fa89 	bl	800cbee <iprintf>
        tcp_tw_pcbs = pcb->next;
 80086dc:	68ea      	ldr	r2, [r5, #12]
 80086de:	4b08      	ldr	r3, [pc, #32]	; (8008700 <tcp_slowtmr+0x3f0>)
 80086e0:	601a      	str	r2, [r3, #0]
 80086e2:	e7e1      	b.n	80086a8 <tcp_slowtmr+0x398>
}
 80086e4:	b002      	add	sp, #8
 80086e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086ea:	bf00      	nop
 80086ec:	0800e77c 	.word	0x0800e77c
 80086f0:	0800e978 	.word	0x0800e978
 80086f4:	0800d378 	.word	0x0800d378
 80086f8:	2000797c 	.word	0x2000797c
 80086fc:	0800e9a4 	.word	0x0800e9a4
 8008700:	2000798c 	.word	0x2000798c
 8008704:	0800e9d0 	.word	0x0800e9d0
 8008708:	20007980 	.word	0x20007980
 800870c:	0800ea00 	.word	0x0800ea00
 8008710:	0800ea28 	.word	0x0800ea28

08008714 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8008714:	b510      	push	{r4, lr}
 8008716:	460c      	mov	r4, r1
  TCP_RMV(pcblist, pcb);
 8008718:	6803      	ldr	r3, [r0, #0]
 800871a:	428b      	cmp	r3, r1
 800871c:	d005      	beq.n	800872a <tcp_pcb_remove+0x16>
 800871e:	b14b      	cbz	r3, 8008734 <tcp_pcb_remove+0x20>
 8008720:	68da      	ldr	r2, [r3, #12]
 8008722:	4294      	cmp	r4, r2
 8008724:	d004      	beq.n	8008730 <tcp_pcb_remove+0x1c>
 8008726:	4613      	mov	r3, r2
 8008728:	e7f9      	b.n	800871e <tcp_pcb_remove+0xa>
 800872a:	68db      	ldr	r3, [r3, #12]
 800872c:	6003      	str	r3, [r0, #0]
 800872e:	e001      	b.n	8008734 <tcp_pcb_remove+0x20>
 8008730:	68e2      	ldr	r2, [r4, #12]
 8008732:	60da      	str	r2, [r3, #12]
 8008734:	2300      	movs	r3, #0
 8008736:	60e3      	str	r3, [r4, #12]

  tcp_pcb_purge(pcb);
 8008738:	4620      	mov	r0, r4
 800873a:	f7ff fdc7 	bl	80082cc <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 800873e:	7d23      	ldrb	r3, [r4, #20]
 8008740:	2b0a      	cmp	r3, #10
 8008742:	d005      	beq.n	8008750 <tcp_pcb_remove+0x3c>
 8008744:	2b01      	cmp	r3, #1
 8008746:	d003      	beq.n	8008750 <tcp_pcb_remove+0x3c>
     pcb->state != LISTEN &&
     pcb->flags & TF_ACK_DELAY) {
 8008748:	7ea3      	ldrb	r3, [r4, #26]
     pcb->state != LISTEN &&
 800874a:	f013 0f01 	tst.w	r3, #1
 800874e:	d121      	bne.n	8008794 <tcp_pcb_remove+0x80>
    pcb->flags |= TF_ACK_NOW;
    tcp_output(pcb);
  }

  if (pcb->state != LISTEN) {
 8008750:	7d23      	ldrb	r3, [r4, #20]
 8008752:	2b01      	cmp	r3, #1
 8008754:	d01a      	beq.n	800878c <tcp_pcb_remove+0x78>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8008756:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8008758:	b133      	cbz	r3, 8008768 <tcp_pcb_remove+0x54>
 800875a:	4b12      	ldr	r3, [pc, #72]	; (80087a4 <tcp_pcb_remove+0x90>)
 800875c:	f240 7253 	movw	r2, #1875	; 0x753
 8008760:	4911      	ldr	r1, [pc, #68]	; (80087a8 <tcp_pcb_remove+0x94>)
 8008762:	4812      	ldr	r0, [pc, #72]	; (80087ac <tcp_pcb_remove+0x98>)
 8008764:	f004 fa43 	bl	800cbee <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8008768:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800876a:	b133      	cbz	r3, 800877a <tcp_pcb_remove+0x66>
 800876c:	4b0d      	ldr	r3, [pc, #52]	; (80087a4 <tcp_pcb_remove+0x90>)
 800876e:	f240 7254 	movw	r2, #1876	; 0x754
 8008772:	490f      	ldr	r1, [pc, #60]	; (80087b0 <tcp_pcb_remove+0x9c>)
 8008774:	480d      	ldr	r0, [pc, #52]	; (80087ac <tcp_pcb_remove+0x98>)
 8008776:	f004 fa3a 	bl	800cbee <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800877a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800877c:	b133      	cbz	r3, 800878c <tcp_pcb_remove+0x78>
 800877e:	4b09      	ldr	r3, [pc, #36]	; (80087a4 <tcp_pcb_remove+0x90>)
 8008780:	f240 7256 	movw	r2, #1878	; 0x756
 8008784:	490b      	ldr	r1, [pc, #44]	; (80087b4 <tcp_pcb_remove+0xa0>)
 8008786:	4809      	ldr	r0, [pc, #36]	; (80087ac <tcp_pcb_remove+0x98>)
 8008788:	f004 fa31 	bl	800cbee <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800878c:	2300      	movs	r3, #0
 800878e:	7523      	strb	r3, [r4, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8008790:	82e3      	strh	r3, [r4, #22]
 8008792:	bd10      	pop	{r4, pc}
    pcb->flags |= TF_ACK_NOW;
 8008794:	f043 0302 	orr.w	r3, r3, #2
 8008798:	76a3      	strb	r3, [r4, #26]
    tcp_output(pcb);
 800879a:	4620      	mov	r0, r4
 800879c:	f002 fd12 	bl	800b1c4 <tcp_output>
 80087a0:	e7d6      	b.n	8008750 <tcp_pcb_remove+0x3c>
 80087a2:	bf00      	nop
 80087a4:	0800e77c 	.word	0x0800e77c
 80087a8:	0800e7e0 	.word	0x0800e7e0
 80087ac:	0800d378 	.word	0x0800d378
 80087b0:	0800e7f8 	.word	0x0800e7f8
 80087b4:	0800e814 	.word	0x0800e814

080087b8 <tcp_close_shutdown>:
{
 80087b8:	b510      	push	{r4, lr}
 80087ba:	b082      	sub	sp, #8
 80087bc:	4604      	mov	r4, r0
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 80087be:	b121      	cbz	r1, 80087ca <tcp_close_shutdown+0x12>
 80087c0:	7d03      	ldrb	r3, [r0, #20]
 80087c2:	2b04      	cmp	r3, #4
 80087c4:	d00c      	beq.n	80087e0 <tcp_close_shutdown+0x28>
 80087c6:	2b07      	cmp	r3, #7
 80087c8:	d00a      	beq.n	80087e0 <tcp_close_shutdown+0x28>
  switch (pcb->state) {
 80087ca:	7d23      	ldrb	r3, [r4, #20]
 80087cc:	2b01      	cmp	r3, #1
 80087ce:	d072      	beq.n	80088b6 <tcp_close_shutdown+0xfe>
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d055      	beq.n	8008880 <tcp_close_shutdown+0xc8>
 80087d4:	2b02      	cmp	r3, #2
 80087d6:	d07b      	beq.n	80088d0 <tcp_close_shutdown+0x118>
    return tcp_close_shutdown_fin(pcb);
 80087d8:	4620      	mov	r0, r4
 80087da:	f7ff fc23 	bl	8008024 <tcp_close_shutdown_fin>
 80087de:	e068      	b.n	80088b2 <tcp_close_shutdown+0xfa>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80087e0:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80087e2:	b1d3      	cbz	r3, 800881a <tcp_close_shutdown+0x62>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80087e4:	7ea3      	ldrb	r3, [r4, #26]
 80087e6:	f013 0f10 	tst.w	r3, #16
 80087ea:	d01b      	beq.n	8008824 <tcp_close_shutdown+0x6c>
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80087ec:	8b23      	ldrh	r3, [r4, #24]
 80087ee:	9301      	str	r3, [sp, #4]
 80087f0:	8ae3      	ldrh	r3, [r4, #22]
 80087f2:	9300      	str	r3, [sp, #0]
 80087f4:	1d23      	adds	r3, r4, #4
 80087f6:	4622      	mov	r2, r4
 80087f8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80087fa:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80087fc:	f002 fe3e 	bl	800b47c <tcp_rst>
      tcp_pcb_purge(pcb);
 8008800:	4620      	mov	r0, r4
 8008802:	f7ff fd63 	bl	80082cc <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8008806:	4b38      	ldr	r3, [pc, #224]	; (80088e8 <tcp_close_shutdown+0x130>)
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	429c      	cmp	r4, r3
 800880c:	d012      	beq.n	8008834 <tcp_close_shutdown+0x7c>
 800880e:	b1bb      	cbz	r3, 8008840 <tcp_close_shutdown+0x88>
 8008810:	68da      	ldr	r2, [r3, #12]
 8008812:	4294      	cmp	r4, r2
 8008814:	d012      	beq.n	800883c <tcp_close_shutdown+0x84>
 8008816:	4613      	mov	r3, r2
 8008818:	e7f9      	b.n	800880e <tcp_close_shutdown+0x56>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800881a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800881c:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8008820:	d1e0      	bne.n	80087e4 <tcp_close_shutdown+0x2c>
 8008822:	e7d2      	b.n	80087ca <tcp_close_shutdown+0x12>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8008824:	4b31      	ldr	r3, [pc, #196]	; (80088ec <tcp_close_shutdown+0x134>)
 8008826:	f240 120f 	movw	r2, #271	; 0x10f
 800882a:	4931      	ldr	r1, [pc, #196]	; (80088f0 <tcp_close_shutdown+0x138>)
 800882c:	4831      	ldr	r0, [pc, #196]	; (80088f4 <tcp_close_shutdown+0x13c>)
 800882e:	f004 f9de 	bl	800cbee <iprintf>
 8008832:	e7db      	b.n	80087ec <tcp_close_shutdown+0x34>
      TCP_RMV_ACTIVE(pcb);
 8008834:	68da      	ldr	r2, [r3, #12]
 8008836:	4b2c      	ldr	r3, [pc, #176]	; (80088e8 <tcp_close_shutdown+0x130>)
 8008838:	601a      	str	r2, [r3, #0]
 800883a:	e001      	b.n	8008840 <tcp_close_shutdown+0x88>
 800883c:	68e2      	ldr	r2, [r4, #12]
 800883e:	60da      	str	r2, [r3, #12]
 8008840:	2300      	movs	r3, #0
 8008842:	60e3      	str	r3, [r4, #12]
 8008844:	2201      	movs	r2, #1
 8008846:	4b2c      	ldr	r3, [pc, #176]	; (80088f8 <tcp_close_shutdown+0x140>)
 8008848:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 800884a:	7d23      	ldrb	r3, [r4, #20]
 800884c:	2b04      	cmp	r3, #4
 800884e:	d009      	beq.n	8008864 <tcp_close_shutdown+0xac>
        if (tcp_input_pcb == pcb) {
 8008850:	4b2a      	ldr	r3, [pc, #168]	; (80088fc <tcp_close_shutdown+0x144>)
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	429c      	cmp	r4, r3
 8008856:	d00f      	beq.n	8008878 <tcp_close_shutdown+0xc0>
          memp_free(MEMP_TCP_PCB, pcb);
 8008858:	4621      	mov	r1, r4
 800885a:	2001      	movs	r0, #1
 800885c:	f7fe fe9e 	bl	800759c <memp_free>
      return ERR_OK;
 8008860:	2000      	movs	r0, #0
 8008862:	e026      	b.n	80088b2 <tcp_close_shutdown+0xfa>
        pcb->state = TIME_WAIT;
 8008864:	230a      	movs	r3, #10
 8008866:	7523      	strb	r3, [r4, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8008868:	4b25      	ldr	r3, [pc, #148]	; (8008900 <tcp_close_shutdown+0x148>)
 800886a:	681a      	ldr	r2, [r3, #0]
 800886c:	60e2      	str	r2, [r4, #12]
 800886e:	601c      	str	r4, [r3, #0]
 8008870:	f003 f80a 	bl	800b888 <tcp_timer_needed>
      return ERR_OK;
 8008874:	2000      	movs	r0, #0
 8008876:	e01c      	b.n	80088b2 <tcp_close_shutdown+0xfa>
          tcp_trigger_input_pcb_close();
 8008878:	f001 ff54 	bl	800a724 <tcp_trigger_input_pcb_close>
      return ERR_OK;
 800887c:	2000      	movs	r0, #0
 800887e:	e018      	b.n	80088b2 <tcp_close_shutdown+0xfa>
    if (pcb->local_port != 0) {
 8008880:	8ae3      	ldrh	r3, [r4, #22]
 8008882:	b18b      	cbz	r3, 80088a8 <tcp_close_shutdown+0xf0>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8008884:	4b1f      	ldr	r3, [pc, #124]	; (8008904 <tcp_close_shutdown+0x14c>)
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	429c      	cmp	r4, r3
 800888a:	d005      	beq.n	8008898 <tcp_close_shutdown+0xe0>
 800888c:	b153      	cbz	r3, 80088a4 <tcp_close_shutdown+0xec>
 800888e:	68da      	ldr	r2, [r3, #12]
 8008890:	4294      	cmp	r4, r2
 8008892:	d005      	beq.n	80088a0 <tcp_close_shutdown+0xe8>
 8008894:	4613      	mov	r3, r2
 8008896:	e7f9      	b.n	800888c <tcp_close_shutdown+0xd4>
 8008898:	68da      	ldr	r2, [r3, #12]
 800889a:	4b1a      	ldr	r3, [pc, #104]	; (8008904 <tcp_close_shutdown+0x14c>)
 800889c:	601a      	str	r2, [r3, #0]
 800889e:	e001      	b.n	80088a4 <tcp_close_shutdown+0xec>
 80088a0:	68e2      	ldr	r2, [r4, #12]
 80088a2:	60da      	str	r2, [r3, #12]
 80088a4:	2300      	movs	r3, #0
 80088a6:	60e3      	str	r3, [r4, #12]
    memp_free(MEMP_TCP_PCB, pcb);
 80088a8:	4621      	mov	r1, r4
 80088aa:	2001      	movs	r0, #1
 80088ac:	f7fe fe76 	bl	800759c <memp_free>
  return ERR_OK;
 80088b0:	2000      	movs	r0, #0
}
 80088b2:	b002      	add	sp, #8
 80088b4:	bd10      	pop	{r4, pc}
    tcp_listen_closed(pcb);
 80088b6:	4620      	mov	r0, r4
 80088b8:	f7ff fb8a 	bl	8007fd0 <tcp_listen_closed>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80088bc:	4621      	mov	r1, r4
 80088be:	4812      	ldr	r0, [pc, #72]	; (8008908 <tcp_close_shutdown+0x150>)
 80088c0:	f7ff ff28 	bl	8008714 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80088c4:	4621      	mov	r1, r4
 80088c6:	2002      	movs	r0, #2
 80088c8:	f7fe fe68 	bl	800759c <memp_free>
  return ERR_OK;
 80088cc:	2000      	movs	r0, #0
    break;
 80088ce:	e7f0      	b.n	80088b2 <tcp_close_shutdown+0xfa>
    TCP_PCB_REMOVE_ACTIVE(pcb);
 80088d0:	4621      	mov	r1, r4
 80088d2:	4805      	ldr	r0, [pc, #20]	; (80088e8 <tcp_close_shutdown+0x130>)
 80088d4:	f7ff ff1e 	bl	8008714 <tcp_pcb_remove>
 80088d8:	2001      	movs	r0, #1
 80088da:	4b07      	ldr	r3, [pc, #28]	; (80088f8 <tcp_close_shutdown+0x140>)
 80088dc:	7018      	strb	r0, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 80088de:	4621      	mov	r1, r4
 80088e0:	f7fe fe5c 	bl	800759c <memp_free>
  return ERR_OK;
 80088e4:	2000      	movs	r0, #0
    break;
 80088e6:	e7e4      	b.n	80088b2 <tcp_close_shutdown+0xfa>
 80088e8:	2000797c 	.word	0x2000797c
 80088ec:	0800e77c 	.word	0x0800e77c
 80088f0:	0800e6f8 	.word	0x0800e6f8
 80088f4:	0800d378 	.word	0x0800d378
 80088f8:	20007978 	.word	0x20007978
 80088fc:	20007990 	.word	0x20007990
 8008900:	2000798c 	.word	0x2000798c
 8008904:	20007988 	.word	0x20007988
 8008908:	20007984 	.word	0x20007984

0800890c <tcp_close>:
{
 800890c:	b508      	push	{r3, lr}
  if (pcb->state != LISTEN) {
 800890e:	7d03      	ldrb	r3, [r0, #20]
 8008910:	2b01      	cmp	r3, #1
 8008912:	d003      	beq.n	800891c <tcp_close+0x10>
    pcb->flags |= TF_RXCLOSED;
 8008914:	7e83      	ldrb	r3, [r0, #26]
 8008916:	f043 0310 	orr.w	r3, r3, #16
 800891a:	7683      	strb	r3, [r0, #26]
  return tcp_close_shutdown(pcb, 1);
 800891c:	2101      	movs	r1, #1
 800891e:	f7ff ff4b 	bl	80087b8 <tcp_close_shutdown>
}
 8008922:	bd08      	pop	{r3, pc}

08008924 <tcp_recv_null>:
{
 8008924:	b510      	push	{r4, lr}
 8008926:	4608      	mov	r0, r1
  if (p != NULL) {
 8008928:	b142      	cbz	r2, 800893c <tcp_recv_null+0x18>
 800892a:	4614      	mov	r4, r2
    tcp_recved(pcb, p->tot_len);
 800892c:	8911      	ldrh	r1, [r2, #8]
 800892e:	f7ff fbef 	bl	8008110 <tcp_recved>
    pbuf_free(p);
 8008932:	4620      	mov	r0, r4
 8008934:	f7ff f808 	bl	8007948 <pbuf_free>
  return ERR_OK;
 8008938:	2000      	movs	r0, #0
 800893a:	bd10      	pop	{r4, pc}
  } else if (err == ERR_OK) {
 800893c:	b10b      	cbz	r3, 8008942 <tcp_recv_null+0x1e>
  return ERR_OK;
 800893e:	2000      	movs	r0, #0
}
 8008940:	bd10      	pop	{r4, pc}
    return tcp_close(pcb);
 8008942:	f7ff ffe3 	bl	800890c <tcp_close>
 8008946:	bd10      	pop	{r4, pc}

08008948 <tcp_process_refused_data>:
{
 8008948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800894a:	4604      	mov	r4, r0
    u8_t refused_flags = pcb->refused_data->flags;
 800894c:	6f46      	ldr	r6, [r0, #116]	; 0x74
 800894e:	7b77      	ldrb	r7, [r6, #13]
    pcb->refused_data = NULL;
 8008950:	2300      	movs	r3, #0
 8008952:	6743      	str	r3, [r0, #116]	; 0x74
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8008954:	f8d0 5080 	ldr.w	r5, [r0, #128]	; 0x80
 8008958:	b1dd      	cbz	r5, 8008992 <tcp_process_refused_data+0x4a>
 800895a:	4632      	mov	r2, r6
 800895c:	4601      	mov	r1, r0
 800895e:	6900      	ldr	r0, [r0, #16]
 8008960:	47a8      	blx	r5
 8008962:	4605      	mov	r5, r0
    if (err == ERR_OK) {
 8008964:	b9fd      	cbnz	r5, 80089a6 <tcp_process_refused_data+0x5e>
      if (refused_flags & PBUF_FLAG_TCP_FIN
 8008966:	f017 0f20 	tst.w	r7, #32
 800896a:	d022      	beq.n	80089b2 <tcp_process_refused_data+0x6a>
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800896c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800896e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8008972:	d001      	beq.n	8008978 <tcp_process_refused_data+0x30>
          pcb->rcv_wnd++;
 8008974:	3301      	adds	r3, #1
 8008976:	8523      	strh	r3, [r4, #40]	; 0x28
        TCP_EVENT_CLOSED(pcb, err);
 8008978:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
 800897c:	b18e      	cbz	r6, 80089a2 <tcp_process_refused_data+0x5a>
 800897e:	2300      	movs	r3, #0
 8008980:	461a      	mov	r2, r3
 8008982:	4621      	mov	r1, r4
 8008984:	6920      	ldr	r0, [r4, #16]
 8008986:	47b0      	blx	r6
        if (err == ERR_ABRT) {
 8008988:	f110 0f0d 	cmn.w	r0, #13
 800898c:	d111      	bne.n	80089b2 <tcp_process_refused_data+0x6a>
          return ERR_ABRT;
 800898e:	4605      	mov	r5, r0
 8008990:	e00f      	b.n	80089b2 <tcp_process_refused_data+0x6a>
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8008992:	2300      	movs	r3, #0
 8008994:	4632      	mov	r2, r6
 8008996:	4601      	mov	r1, r0
 8008998:	4618      	mov	r0, r3
 800899a:	f7ff ffc3 	bl	8008924 <tcp_recv_null>
 800899e:	4605      	mov	r5, r0
 80089a0:	e7e0      	b.n	8008964 <tcp_process_refused_data+0x1c>
        TCP_EVENT_CLOSED(pcb, err);
 80089a2:	4628      	mov	r0, r5
 80089a4:	e7f0      	b.n	8008988 <tcp_process_refused_data+0x40>
    } else if (err == ERR_ABRT) {
 80089a6:	f115 0f0d 	cmn.w	r5, #13
 80089aa:	d002      	beq.n	80089b2 <tcp_process_refused_data+0x6a>
      pcb->refused_data = refused_data;
 80089ac:	6766      	str	r6, [r4, #116]	; 0x74
      return ERR_INPROGRESS;
 80089ae:	f06f 0504 	mvn.w	r5, #4
}
 80089b2:	4628      	mov	r0, r5
 80089b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080089b8 <tcp_fasttmr>:
{
 80089b8:	b570      	push	{r4, r5, r6, lr}
  ++tcp_timer_ctr;
 80089ba:	4a1c      	ldr	r2, [pc, #112]	; (8008a2c <tcp_fasttmr+0x74>)
 80089bc:	7813      	ldrb	r3, [r2, #0]
 80089be:	3301      	adds	r3, #1
 80089c0:	7013      	strb	r3, [r2, #0]
  pcb = tcp_active_pcbs;
 80089c2:	4b1b      	ldr	r3, [pc, #108]	; (8008a30 <tcp_fasttmr+0x78>)
 80089c4:	681c      	ldr	r4, [r3, #0]
  while (pcb != NULL) {
 80089c6:	e013      	b.n	80089f0 <tcp_fasttmr+0x38>
        tcp_ack_now(pcb);
 80089c8:	f043 0302 	orr.w	r3, r3, #2
 80089cc:	76a3      	strb	r3, [r4, #26]
        tcp_output(pcb);
 80089ce:	4620      	mov	r0, r4
 80089d0:	f002 fbf8 	bl	800b1c4 <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 80089d4:	7ea3      	ldrb	r3, [r4, #26]
 80089d6:	f023 0303 	bic.w	r3, r3, #3
 80089da:	76a3      	strb	r3, [r4, #26]
 80089dc:	e013      	b.n	8008a06 <tcp_fasttmr+0x4e>
        pcb->flags &= ~(TF_CLOSEPEND);
 80089de:	f023 0308 	bic.w	r3, r3, #8
 80089e2:	76a3      	strb	r3, [r4, #26]
        tcp_close_shutdown_fin(pcb);
 80089e4:	4620      	mov	r0, r4
 80089e6:	f7ff fb1d 	bl	8008024 <tcp_close_shutdown_fin>
 80089ea:	e010      	b.n	8008a0e <tcp_fasttmr+0x56>
      pcb = pcb->next;
 80089ec:	68e5      	ldr	r5, [r4, #12]
{
 80089ee:	462c      	mov	r4, r5
  while (pcb != NULL) {
 80089f0:	b1dc      	cbz	r4, 8008a2a <tcp_fasttmr+0x72>
    if (pcb->last_timer != tcp_timer_ctr) {
 80089f2:	7f62      	ldrb	r2, [r4, #29]
 80089f4:	4b0d      	ldr	r3, [pc, #52]	; (8008a2c <tcp_fasttmr+0x74>)
 80089f6:	781b      	ldrb	r3, [r3, #0]
 80089f8:	429a      	cmp	r2, r3
 80089fa:	d0f7      	beq.n	80089ec <tcp_fasttmr+0x34>
      pcb->last_timer = tcp_timer_ctr;
 80089fc:	7763      	strb	r3, [r4, #29]
      if (pcb->flags & TF_ACK_DELAY) {
 80089fe:	7ea3      	ldrb	r3, [r4, #26]
 8008a00:	f013 0f01 	tst.w	r3, #1
 8008a04:	d1e0      	bne.n	80089c8 <tcp_fasttmr+0x10>
      if (pcb->flags & TF_CLOSEPEND) {
 8008a06:	7ea3      	ldrb	r3, [r4, #26]
 8008a08:	f013 0f08 	tst.w	r3, #8
 8008a0c:	d1e7      	bne.n	80089de <tcp_fasttmr+0x26>
      next = pcb->next;
 8008a0e:	68e5      	ldr	r5, [r4, #12]
      if (pcb->refused_data != NULL) {
 8008a10:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d0eb      	beq.n	80089ee <tcp_fasttmr+0x36>
        tcp_active_pcbs_changed = 0;
 8008a16:	4e07      	ldr	r6, [pc, #28]	; (8008a34 <tcp_fasttmr+0x7c>)
 8008a18:	2300      	movs	r3, #0
 8008a1a:	7033      	strb	r3, [r6, #0]
        tcp_process_refused_data(pcb);
 8008a1c:	4620      	mov	r0, r4
 8008a1e:	f7ff ff93 	bl	8008948 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8008a22:	7833      	ldrb	r3, [r6, #0]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d0e2      	beq.n	80089ee <tcp_fasttmr+0x36>
 8008a28:	e7cb      	b.n	80089c2 <tcp_fasttmr+0xa>
}
 8008a2a:	bd70      	pop	{r4, r5, r6, pc}
 8008a2c:	20003f82 	.word	0x20003f82
 8008a30:	2000797c 	.word	0x2000797c
 8008a34:	20007978 	.word	0x20007978

08008a38 <tcp_tmr>:
{
 8008a38:	b508      	push	{r3, lr}
  tcp_fasttmr();
 8008a3a:	f7ff ffbd 	bl	80089b8 <tcp_fasttmr>
  if (++tcp_timer & 1) {
 8008a3e:	4a06      	ldr	r2, [pc, #24]	; (8008a58 <tcp_tmr+0x20>)
 8008a40:	7813      	ldrb	r3, [r2, #0]
 8008a42:	3301      	adds	r3, #1
 8008a44:	b2db      	uxtb	r3, r3
 8008a46:	7013      	strb	r3, [r2, #0]
 8008a48:	f013 0f01 	tst.w	r3, #1
 8008a4c:	d100      	bne.n	8008a50 <tcp_tmr+0x18>
 8008a4e:	bd08      	pop	{r3, pc}
    tcp_slowtmr();
 8008a50:	f7ff fc5e 	bl	8008310 <tcp_slowtmr>
}
 8008a54:	e7fb      	b.n	8008a4e <tcp_tmr+0x16>
 8008a56:	bf00      	nop
 8008a58:	20003f81 	.word	0x20003f81

08008a5c <tcp_shutdown>:
  if (pcb->state == LISTEN) {
 8008a5c:	7d03      	ldrb	r3, [r0, #20]
 8008a5e:	2b01      	cmp	r3, #1
 8008a60:	d020      	beq.n	8008aa4 <tcp_shutdown+0x48>
{
 8008a62:	b570      	push	{r4, r5, r6, lr}
 8008a64:	4616      	mov	r6, r2
 8008a66:	460d      	mov	r5, r1
 8008a68:	4604      	mov	r4, r0
  if (shut_rx) {
 8008a6a:	b151      	cbz	r1, 8008a82 <tcp_shutdown+0x26>
    pcb->flags |= TF_RXCLOSED;
 8008a6c:	7e83      	ldrb	r3, [r0, #26]
 8008a6e:	f043 0310 	orr.w	r3, r3, #16
 8008a72:	7683      	strb	r3, [r0, #26]
    if (shut_tx) {
 8008a74:	b992      	cbnz	r2, 8008a9c <tcp_shutdown+0x40>
    if (pcb->refused_data != NULL) {
 8008a76:	6f40      	ldr	r0, [r0, #116]	; 0x74
 8008a78:	b118      	cbz	r0, 8008a82 <tcp_shutdown+0x26>
      pbuf_free(pcb->refused_data);
 8008a7a:	f7fe ff65 	bl	8007948 <pbuf_free>
      pcb->refused_data = NULL;
 8008a7e:	2300      	movs	r3, #0
 8008a80:	6763      	str	r3, [r4, #116]	; 0x74
  if (shut_tx) {
 8008a82:	b196      	cbz	r6, 8008aaa <tcp_shutdown+0x4e>
    switch (pcb->state) {
 8008a84:	7d23      	ldrb	r3, [r4, #20]
 8008a86:	2b03      	cmp	r3, #3
 8008a88:	d311      	bcc.n	8008aae <tcp_shutdown+0x52>
 8008a8a:	2b04      	cmp	r3, #4
 8008a8c:	d901      	bls.n	8008a92 <tcp_shutdown+0x36>
 8008a8e:	2b07      	cmp	r3, #7
 8008a90:	d10d      	bne.n	8008aae <tcp_shutdown+0x52>
      return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 8008a92:	b2e9      	uxtb	r1, r5
 8008a94:	4620      	mov	r0, r4
 8008a96:	f7ff fe8f 	bl	80087b8 <tcp_close_shutdown>
 8008a9a:	bd70      	pop	{r4, r5, r6, pc}
      return tcp_close_shutdown(pcb, 1);
 8008a9c:	2101      	movs	r1, #1
 8008a9e:	f7ff fe8b 	bl	80087b8 <tcp_close_shutdown>
 8008aa2:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_CONN;
 8008aa4:	f06f 000a 	mvn.w	r0, #10
 8008aa8:	4770      	bx	lr
  return ERR_OK;
 8008aaa:	2000      	movs	r0, #0
 8008aac:	bd70      	pop	{r4, r5, r6, pc}
      return ERR_CONN;
 8008aae:	f06f 000a 	mvn.w	r0, #10
}
 8008ab2:	bd70      	pop	{r4, r5, r6, pc}

08008ab4 <tcp_abandon>:
{
 8008ab4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ab8:	b082      	sub	sp, #8
 8008aba:	4604      	mov	r4, r0
 8008abc:	460d      	mov	r5, r1
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8008abe:	7d03      	ldrb	r3, [r0, #20]
 8008ac0:	2b01      	cmp	r3, #1
 8008ac2:	d01a      	beq.n	8008afa <tcp_abandon+0x46>
  if (pcb->state == TIME_WAIT) {
 8008ac4:	7d23      	ldrb	r3, [r4, #20]
 8008ac6:	2b0a      	cmp	r3, #10
 8008ac8:	d01f      	beq.n	8008b0a <tcp_abandon+0x56>
    seqno = pcb->snd_nxt;
 8008aca:	f8d4 804c 	ldr.w	r8, [r4, #76]	; 0x4c
    ackno = pcb->rcv_nxt;
 8008ace:	f8d4 9024 	ldr.w	r9, [r4, #36]	; 0x24
    errf = pcb->errf;
 8008ad2:	f8d4 608c 	ldr.w	r6, [r4, #140]	; 0x8c
    errf_arg = pcb->callback_arg;
 8008ad6:	6927      	ldr	r7, [r4, #16]
    if (pcb->state == CLOSED) {
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d141      	bne.n	8008b60 <tcp_abandon+0xac>
      if (pcb->local_port != 0) {
 8008adc:	f8b4 a016 	ldrh.w	sl, [r4, #22]
 8008ae0:	f1ba 0f00 	cmp.w	sl, #0
 8008ae4:	d046      	beq.n	8008b74 <tcp_abandon+0xc0>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8008ae6:	4b2a      	ldr	r3, [pc, #168]	; (8008b90 <tcp_abandon+0xdc>)
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	429c      	cmp	r4, r3
 8008aec:	d016      	beq.n	8008b1c <tcp_abandon+0x68>
 8008aee:	b1db      	cbz	r3, 8008b28 <tcp_abandon+0x74>
 8008af0:	68da      	ldr	r2, [r3, #12]
 8008af2:	4294      	cmp	r4, r2
 8008af4:	d016      	beq.n	8008b24 <tcp_abandon+0x70>
 8008af6:	4613      	mov	r3, r2
 8008af8:	e7f9      	b.n	8008aee <tcp_abandon+0x3a>
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8008afa:	4b26      	ldr	r3, [pc, #152]	; (8008b94 <tcp_abandon+0xe0>)
 8008afc:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8008b00:	4925      	ldr	r1, [pc, #148]	; (8008b98 <tcp_abandon+0xe4>)
 8008b02:	4826      	ldr	r0, [pc, #152]	; (8008b9c <tcp_abandon+0xe8>)
 8008b04:	f004 f873 	bl	800cbee <iprintf>
 8008b08:	e7dc      	b.n	8008ac4 <tcp_abandon+0x10>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8008b0a:	4621      	mov	r1, r4
 8008b0c:	4824      	ldr	r0, [pc, #144]	; (8008ba0 <tcp_abandon+0xec>)
 8008b0e:	f7ff fe01 	bl	8008714 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 8008b12:	4621      	mov	r1, r4
 8008b14:	2001      	movs	r0, #1
 8008b16:	f7fe fd41 	bl	800759c <memp_free>
 8008b1a:	e01e      	b.n	8008b5a <tcp_abandon+0xa6>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8008b1c:	68da      	ldr	r2, [r3, #12]
 8008b1e:	4b1c      	ldr	r3, [pc, #112]	; (8008b90 <tcp_abandon+0xdc>)
 8008b20:	601a      	str	r2, [r3, #0]
 8008b22:	e001      	b.n	8008b28 <tcp_abandon+0x74>
 8008b24:	68e2      	ldr	r2, [r4, #12]
 8008b26:	60da      	str	r2, [r3, #12]
 8008b28:	2500      	movs	r5, #0
 8008b2a:	60e5      	str	r5, [r4, #12]
    u16_t local_port = 0;
 8008b2c:	46aa      	mov	sl, r5
    if (pcb->unacked != NULL) {
 8008b2e:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8008b30:	b108      	cbz	r0, 8008b36 <tcp_abandon+0x82>
      tcp_segs_free(pcb->unacked);
 8008b32:	f7ff fb3c 	bl	80081ae <tcp_segs_free>
    if (pcb->unsent != NULL) {
 8008b36:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8008b38:	b108      	cbz	r0, 8008b3e <tcp_abandon+0x8a>
      tcp_segs_free(pcb->unsent);
 8008b3a:	f7ff fb38 	bl	80081ae <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 8008b3e:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8008b40:	b108      	cbz	r0, 8008b46 <tcp_abandon+0x92>
      tcp_segs_free(pcb->ooseq);
 8008b42:	f7ff fb34 	bl	80081ae <tcp_segs_free>
    if (send_rst) {
 8008b46:	b9bd      	cbnz	r5, 8008b78 <tcp_abandon+0xc4>
    memp_free(MEMP_TCP_PCB, pcb);
 8008b48:	4621      	mov	r1, r4
 8008b4a:	2001      	movs	r0, #1
 8008b4c:	f7fe fd26 	bl	800759c <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8008b50:	b11e      	cbz	r6, 8008b5a <tcp_abandon+0xa6>
 8008b52:	f06f 010c 	mvn.w	r1, #12
 8008b56:	4638      	mov	r0, r7
 8008b58:	47b0      	blx	r6
}
 8008b5a:	b002      	add	sp, #8
 8008b5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      local_port = pcb->local_port;
 8008b60:	f8b4 a016 	ldrh.w	sl, [r4, #22]
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8008b64:	4621      	mov	r1, r4
 8008b66:	480f      	ldr	r0, [pc, #60]	; (8008ba4 <tcp_abandon+0xf0>)
 8008b68:	f7ff fdd4 	bl	8008714 <tcp_pcb_remove>
 8008b6c:	2201      	movs	r2, #1
 8008b6e:	4b0e      	ldr	r3, [pc, #56]	; (8008ba8 <tcp_abandon+0xf4>)
 8008b70:	701a      	strb	r2, [r3, #0]
 8008b72:	e7dc      	b.n	8008b2e <tcp_abandon+0x7a>
    int send_rst = 0;
 8008b74:	2500      	movs	r5, #0
 8008b76:	e7da      	b.n	8008b2e <tcp_abandon+0x7a>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8008b78:	8b23      	ldrh	r3, [r4, #24]
 8008b7a:	9301      	str	r3, [sp, #4]
 8008b7c:	f8cd a000 	str.w	sl, [sp]
 8008b80:	1d23      	adds	r3, r4, #4
 8008b82:	4622      	mov	r2, r4
 8008b84:	4649      	mov	r1, r9
 8008b86:	4640      	mov	r0, r8
 8008b88:	f002 fc78 	bl	800b47c <tcp_rst>
 8008b8c:	e7dc      	b.n	8008b48 <tcp_abandon+0x94>
 8008b8e:	bf00      	nop
 8008b90:	20007988 	.word	0x20007988
 8008b94:	0800e77c 	.word	0x0800e77c
 8008b98:	0800e6b4 	.word	0x0800e6b4
 8008b9c:	0800d378 	.word	0x0800d378
 8008ba0:	2000798c 	.word	0x2000798c
 8008ba4:	2000797c 	.word	0x2000797c
 8008ba8:	20007978 	.word	0x20007978

08008bac <tcp_abort>:
{
 8008bac:	b508      	push	{r3, lr}
  tcp_abandon(pcb, 1);
 8008bae:	2101      	movs	r1, #1
 8008bb0:	f7ff ff80 	bl	8008ab4 <tcp_abandon>
 8008bb4:	bd08      	pop	{r3, pc}
	...

08008bb8 <tcp_kill_timewait>:
{
 8008bb8:	b510      	push	{r4, lr}
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008bba:	4b0a      	ldr	r3, [pc, #40]	; (8008be4 <tcp_kill_timewait+0x2c>)
 8008bbc:	681b      	ldr	r3, [r3, #0]
  inactivity = 0;
 8008bbe:	2400      	movs	r4, #0
  inactive = NULL;
 8008bc0:	4620      	mov	r0, r4
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008bc2:	e000      	b.n	8008bc6 <tcp_kill_timewait+0xe>
 8008bc4:	68db      	ldr	r3, [r3, #12]
 8008bc6:	b143      	cbz	r3, 8008bda <tcp_kill_timewait+0x22>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8008bc8:	6a19      	ldr	r1, [r3, #32]
 8008bca:	4a07      	ldr	r2, [pc, #28]	; (8008be8 <tcp_kill_timewait+0x30>)
 8008bcc:	6812      	ldr	r2, [r2, #0]
 8008bce:	1a52      	subs	r2, r2, r1
 8008bd0:	4294      	cmp	r4, r2
 8008bd2:	d8f7      	bhi.n	8008bc4 <tcp_kill_timewait+0xc>
      inactivity = tcp_ticks - pcb->tmr;
 8008bd4:	4614      	mov	r4, r2
      inactive = pcb;
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	e7f4      	b.n	8008bc4 <tcp_kill_timewait+0xc>
  if (inactive != NULL) {
 8008bda:	b108      	cbz	r0, 8008be0 <tcp_kill_timewait+0x28>
    tcp_abort(inactive);
 8008bdc:	f7ff ffe6 	bl	8008bac <tcp_abort>
 8008be0:	bd10      	pop	{r4, pc}
 8008be2:	bf00      	nop
 8008be4:	2000798c 	.word	0x2000798c
 8008be8:	20007980 	.word	0x20007980

08008bec <tcp_kill_prio>:
{
 8008bec:	b570      	push	{r4, r5, r6, lr}
 8008bee:	4602      	mov	r2, r0
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8008bf0:	f010 0f80 	tst.w	r0, #128	; 0x80
 8008bf4:	d000      	beq.n	8008bf8 <tcp_kill_prio+0xc>
 8008bf6:	227f      	movs	r2, #127	; 0x7f
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008bf8:	4b0b      	ldr	r3, [pc, #44]	; (8008c28 <tcp_kill_prio+0x3c>)
 8008bfa:	681b      	ldr	r3, [r3, #0]
  inactivity = 0;
 8008bfc:	2400      	movs	r4, #0
  inactive = NULL;
 8008bfe:	4620      	mov	r0, r4
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008c00:	b91b      	cbnz	r3, 8008c0a <tcp_kill_prio+0x1e>
  if (inactive != NULL) {
 8008c02:	b108      	cbz	r0, 8008c08 <tcp_kill_prio+0x1c>
    tcp_abort(inactive);
 8008c04:	f7ff ffd2 	bl	8008bac <tcp_abort>
 8008c08:	bd70      	pop	{r4, r5, r6, pc}
    if (pcb->prio <= mprio &&
 8008c0a:	7d5d      	ldrb	r5, [r3, #21]
 8008c0c:	42aa      	cmp	r2, r5
 8008c0e:	d308      	bcc.n	8008c22 <tcp_kill_prio+0x36>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8008c10:	6a1e      	ldr	r6, [r3, #32]
 8008c12:	4906      	ldr	r1, [pc, #24]	; (8008c2c <tcp_kill_prio+0x40>)
 8008c14:	6809      	ldr	r1, [r1, #0]
 8008c16:	1b89      	subs	r1, r1, r6
    if (pcb->prio <= mprio &&
 8008c18:	428c      	cmp	r4, r1
 8008c1a:	d802      	bhi.n	8008c22 <tcp_kill_prio+0x36>
      mprio = pcb->prio;
 8008c1c:	462a      	mov	r2, r5
      inactivity = tcp_ticks - pcb->tmr;
 8008c1e:	460c      	mov	r4, r1
      inactive = pcb;
 8008c20:	4618      	mov	r0, r3
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008c22:	68db      	ldr	r3, [r3, #12]
 8008c24:	e7ec      	b.n	8008c00 <tcp_kill_prio+0x14>
 8008c26:	bf00      	nop
 8008c28:	2000797c 	.word	0x2000797c
 8008c2c:	20007980 	.word	0x20007980

08008c30 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 8008c30:	b538      	push	{r3, r4, r5, lr}
 8008c32:	4604      	mov	r4, r0
 8008c34:	4608      	mov	r0, r1
  struct tcp_pcb *pcb;
  pcb = pcb_list;
  while (pcb != NULL) {
 8008c36:	e003      	b.n	8008c40 <tcp_netif_ip_addr_changed_pcblist+0x10>
      /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
      && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
      ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8008c38:	68c5      	ldr	r5, [r0, #12]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8008c3a:	f7ff ffb7 	bl	8008bac <tcp_abort>
      pcb = next;
 8008c3e:	4628      	mov	r0, r5
  while (pcb != NULL) {
 8008c40:	b128      	cbz	r0, 8008c4e <tcp_netif_ip_addr_changed_pcblist+0x1e>
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8008c42:	6802      	ldr	r2, [r0, #0]
 8008c44:	6823      	ldr	r3, [r4, #0]
 8008c46:	429a      	cmp	r2, r3
 8008c48:	d0f6      	beq.n	8008c38 <tcp_netif_ip_addr_changed_pcblist+0x8>
    } else {
      pcb = pcb->next;
 8008c4a:	68c0      	ldr	r0, [r0, #12]
 8008c4c:	e7f8      	b.n	8008c40 <tcp_netif_ip_addr_changed_pcblist+0x10>
    }
  }
}
 8008c4e:	bd38      	pop	{r3, r4, r5, pc}

08008c50 <tcp_kill_state>:
{
 8008c50:	b538      	push	{r3, r4, r5, lr}
 8008c52:	4604      	mov	r4, r0
  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8008c54:	f1a0 0308 	sub.w	r3, r0, #8
 8008c58:	b2db      	uxtb	r3, r3
 8008c5a:	2b01      	cmp	r3, #1
 8008c5c:	d906      	bls.n	8008c6c <tcp_kill_state+0x1c>
 8008c5e:	4b0f      	ldr	r3, [pc, #60]	; (8008c9c <tcp_kill_state+0x4c>)
 8008c60:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8008c64:	490e      	ldr	r1, [pc, #56]	; (8008ca0 <tcp_kill_state+0x50>)
 8008c66:	480f      	ldr	r0, [pc, #60]	; (8008ca4 <tcp_kill_state+0x54>)
 8008c68:	f003 ffc1 	bl	800cbee <iprintf>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008c6c:	4b0e      	ldr	r3, [pc, #56]	; (8008ca8 <tcp_kill_state+0x58>)
 8008c6e:	681b      	ldr	r3, [r3, #0]
  inactivity = 0;
 8008c70:	2100      	movs	r1, #0
  inactive = NULL;
 8008c72:	4608      	mov	r0, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008c74:	e000      	b.n	8008c78 <tcp_kill_state+0x28>
 8008c76:	68db      	ldr	r3, [r3, #12]
 8008c78:	b15b      	cbz	r3, 8008c92 <tcp_kill_state+0x42>
    if (pcb->state == state) {
 8008c7a:	7d1a      	ldrb	r2, [r3, #20]
 8008c7c:	4294      	cmp	r4, r2
 8008c7e:	d1fa      	bne.n	8008c76 <tcp_kill_state+0x26>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8008c80:	6a1d      	ldr	r5, [r3, #32]
 8008c82:	4a0a      	ldr	r2, [pc, #40]	; (8008cac <tcp_kill_state+0x5c>)
 8008c84:	6812      	ldr	r2, [r2, #0]
 8008c86:	1b52      	subs	r2, r2, r5
 8008c88:	4291      	cmp	r1, r2
 8008c8a:	d8f4      	bhi.n	8008c76 <tcp_kill_state+0x26>
        inactivity = tcp_ticks - pcb->tmr;
 8008c8c:	4611      	mov	r1, r2
        inactive = pcb;
 8008c8e:	4618      	mov	r0, r3
 8008c90:	e7f1      	b.n	8008c76 <tcp_kill_state+0x26>
  if (inactive != NULL) {
 8008c92:	b110      	cbz	r0, 8008c9a <tcp_kill_state+0x4a>
    tcp_abandon(inactive, 0);
 8008c94:	2100      	movs	r1, #0
 8008c96:	f7ff ff0d 	bl	8008ab4 <tcp_abandon>
 8008c9a:	bd38      	pop	{r3, r4, r5, pc}
 8008c9c:	0800e77c 	.word	0x0800e77c
 8008ca0:	0800e76c 	.word	0x0800e76c
 8008ca4:	0800d378 	.word	0x0800d378
 8008ca8:	2000797c 	.word	0x2000797c
 8008cac:	20007980 	.word	0x20007980

08008cb0 <tcp_alloc>:
{
 8008cb0:	b538      	push	{r3, r4, r5, lr}
 8008cb2:	4605      	mov	r5, r0
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008cb4:	2001      	movs	r0, #1
 8008cb6:	f7fe fc57 	bl	8007568 <memp_malloc>
  if (pcb == NULL) {
 8008cba:	4604      	mov	r4, r0
 8008cbc:	b368      	cbz	r0, 8008d1a <tcp_alloc+0x6a>
  if (pcb != NULL) {
 8008cbe:	b354      	cbz	r4, 8008d16 <tcp_alloc+0x66>
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8008cc0:	2298      	movs	r2, #152	; 0x98
 8008cc2:	2100      	movs	r1, #0
 8008cc4:	4620      	mov	r0, r4
 8008cc6:	f004 f909 	bl	800cedc <memset>
    pcb->prio = prio;
 8008cca:	7565      	strb	r5, [r4, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8008ccc:	f44f 6386 	mov.w	r3, #1072	; 0x430
 8008cd0:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8008cd4:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8008cd8:	8562      	strh	r2, [r4, #42]	; 0x2a
 8008cda:	8522      	strh	r2, [r4, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8008cdc:	22ff      	movs	r2, #255	; 0xff
 8008cde:	72a2      	strb	r2, [r4, #10]
    pcb->mss = INITIAL_MSS;
 8008ce0:	f44f 7206 	mov.w	r2, #536	; 0x218
 8008ce4:	8662      	strh	r2, [r4, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8008ce6:	2206      	movs	r2, #6
 8008ce8:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8008cec:	87e2      	strh	r2, [r4, #62]	; 0x3e
    pcb->rtime = -1;
 8008cee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008cf2:	8622      	strh	r2, [r4, #48]	; 0x30
    pcb->cwnd = 1;
 8008cf4:	2201      	movs	r2, #1
 8008cf6:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8008cfa:	4a19      	ldr	r2, [pc, #100]	; (8008d60 <tcp_alloc+0xb0>)
 8008cfc:	6812      	ldr	r2, [r2, #0]
 8008cfe:	6222      	str	r2, [r4, #32]
    pcb->last_timer = tcp_timer_ctr;
 8008d00:	4a18      	ldr	r2, [pc, #96]	; (8008d64 <tcp_alloc+0xb4>)
 8008d02:	7812      	ldrb	r2, [r2, #0]
 8008d04:	7762      	strb	r2, [r4, #29]
    pcb->ssthresh = TCP_SND_BUF;
 8008d06:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
    pcb->recv = tcp_recv_null;
 8008d0a:	4b17      	ldr	r3, [pc, #92]	; (8008d68 <tcp_alloc+0xb8>)
 8008d0c:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8008d10:	4b16      	ldr	r3, [pc, #88]	; (8008d6c <tcp_alloc+0xbc>)
 8008d12:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
}
 8008d16:	4620      	mov	r0, r4
 8008d18:	bd38      	pop	{r3, r4, r5, pc}
    tcp_kill_timewait();
 8008d1a:	f7ff ff4d 	bl	8008bb8 <tcp_kill_timewait>
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008d1e:	2001      	movs	r0, #1
 8008d20:	f7fe fc22 	bl	8007568 <memp_malloc>
    if (pcb == NULL) {
 8008d24:	4604      	mov	r4, r0
 8008d26:	2800      	cmp	r0, #0
 8008d28:	d1c9      	bne.n	8008cbe <tcp_alloc+0xe>
      tcp_kill_state(LAST_ACK);
 8008d2a:	2009      	movs	r0, #9
 8008d2c:	f7ff ff90 	bl	8008c50 <tcp_kill_state>
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008d30:	2001      	movs	r0, #1
 8008d32:	f7fe fc19 	bl	8007568 <memp_malloc>
      if (pcb == NULL) {
 8008d36:	4604      	mov	r4, r0
 8008d38:	2800      	cmp	r0, #0
 8008d3a:	d1c0      	bne.n	8008cbe <tcp_alloc+0xe>
        tcp_kill_state(CLOSING);
 8008d3c:	2008      	movs	r0, #8
 8008d3e:	f7ff ff87 	bl	8008c50 <tcp_kill_state>
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008d42:	2001      	movs	r0, #1
 8008d44:	f7fe fc10 	bl	8007568 <memp_malloc>
        if (pcb == NULL) {
 8008d48:	4604      	mov	r4, r0
 8008d4a:	2800      	cmp	r0, #0
 8008d4c:	d1b7      	bne.n	8008cbe <tcp_alloc+0xe>
          tcp_kill_prio(prio);
 8008d4e:	4628      	mov	r0, r5
 8008d50:	f7ff ff4c 	bl	8008bec <tcp_kill_prio>
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008d54:	2001      	movs	r0, #1
 8008d56:	f7fe fc07 	bl	8007568 <memp_malloc>
 8008d5a:	4604      	mov	r4, r0
 8008d5c:	e7af      	b.n	8008cbe <tcp_alloc+0xe>
 8008d5e:	bf00      	nop
 8008d60:	20007980 	.word	0x20007980
 8008d64:	20003f82 	.word	0x20003f82
 8008d68:	08008925 	.word	0x08008925
 8008d6c:	006ddd00 	.word	0x006ddd00

08008d70 <tcp_new_ip_type>:
{
 8008d70:	b508      	push	{r3, lr}
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8008d72:	2040      	movs	r0, #64	; 0x40
 8008d74:	f7ff ff9c 	bl	8008cb0 <tcp_alloc>
}
 8008d78:	bd08      	pop	{r3, pc}
	...

08008d7c <tcp_next_iss>:
  iss += tcp_ticks;       /* XXX */
 8008d7c:	4b03      	ldr	r3, [pc, #12]	; (8008d8c <tcp_next_iss+0x10>)
 8008d7e:	6818      	ldr	r0, [r3, #0]
 8008d80:	4a03      	ldr	r2, [pc, #12]	; (8008d90 <tcp_next_iss+0x14>)
 8008d82:	6812      	ldr	r2, [r2, #0]
 8008d84:	4410      	add	r0, r2
 8008d86:	6018      	str	r0, [r3, #0]
}
 8008d88:	4770      	bx	lr
 8008d8a:	bf00      	nop
 8008d8c:	20000008 	.word	0x20000008
 8008d90:	20007980 	.word	0x20007980

08008d94 <tcp_eff_send_mss_impl>:
{
 8008d94:	b510      	push	{r4, lr}
 8008d96:	4604      	mov	r4, r0
  outif = ip_route(src, dest);
 8008d98:	4608      	mov	r0, r1
 8008d9a:	f7fd fa99 	bl	80062d0 <ip4_route>
    if (outif == NULL) {
 8008d9e:	b138      	cbz	r0, 8008db0 <tcp_eff_send_mss_impl+0x1c>
    mtu = outif->mtu;
 8008da0:	8c43      	ldrh	r3, [r0, #34]	; 0x22
  if (mtu != 0) {
 8008da2:	b13b      	cbz	r3, 8008db4 <tcp_eff_send_mss_impl+0x20>
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 8008da4:	3b28      	subs	r3, #40	; 0x28
 8008da6:	b298      	uxth	r0, r3
    sendmss = LWIP_MIN(sendmss, mss_s);
 8008da8:	42a0      	cmp	r0, r4
 8008daa:	bf28      	it	cs
 8008dac:	4620      	movcs	r0, r4
 8008dae:	bd10      	pop	{r4, pc}
      return sendmss;
 8008db0:	4620      	mov	r0, r4
 8008db2:	bd10      	pop	{r4, pc}
 8008db4:	4620      	mov	r0, r4
}
 8008db6:	bd10      	pop	{r4, pc}

08008db8 <tcp_connect>:
{
 8008db8:	b570      	push	{r4, r5, r6, lr}
  if ((pcb == NULL) || (ipaddr == NULL)) {
 8008dba:	2800      	cmp	r0, #0
 8008dbc:	d070      	beq.n	8008ea0 <tcp_connect+0xe8>
 8008dbe:	4604      	mov	r4, r0
 8008dc0:	2900      	cmp	r1, #0
 8008dc2:	d070      	beq.n	8008ea6 <tcp_connect+0xee>
 8008dc4:	461d      	mov	r5, r3
  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 8008dc6:	7d03      	ldrb	r3, [r0, #20]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d149      	bne.n	8008e60 <tcp_connect+0xa8>
  ip_addr_set(&pcb->remote_ip, ipaddr);
 8008dcc:	680b      	ldr	r3, [r1, #0]
 8008dce:	6043      	str	r3, [r0, #4]
  pcb->remote_port = port;
 8008dd0:	8302      	strh	r2, [r0, #24]
  if (ip_addr_isany(&pcb->local_ip)) {
 8008dd2:	b108      	cbz	r0, 8008dd8 <tcp_connect+0x20>
 8008dd4:	6803      	ldr	r3, [r0, #0]
 8008dd6:	b963      	cbnz	r3, 8008df2 <tcp_connect+0x3a>
    ip_route_get_local_ip(&pcb->local_ip, &pcb->remote_ip, netif, local_ip);
 8008dd8:	1d20      	adds	r0, r4, #4
 8008dda:	f7fd fa79 	bl	80062d0 <ip4_route>
 8008dde:	4602      	mov	r2, r0
 8008de0:	2800      	cmp	r0, #0
 8008de2:	d047      	beq.n	8008e74 <tcp_connect+0xbc>
 8008de4:	1d03      	adds	r3, r0, #4
    if ((netif == NULL) || (local_ip == NULL)) {
 8008de6:	2a00      	cmp	r2, #0
 8008de8:	d060      	beq.n	8008eac <tcp_connect+0xf4>
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d061      	beq.n	8008eb2 <tcp_connect+0xfa>
    ip_addr_copy(pcb->local_ip, *local_ip);
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	6023      	str	r3, [r4, #0]
  old_local_port = pcb->local_port;
 8008df2:	8ae6      	ldrh	r6, [r4, #22]
  if (pcb->local_port == 0) {
 8008df4:	b926      	cbnz	r6, 8008e00 <tcp_connect+0x48>
    pcb->local_port = tcp_new_port();
 8008df6:	f7ff f8b9 	bl	8007f6c <tcp_new_port>
 8008dfa:	82e0      	strh	r0, [r4, #22]
    if (pcb->local_port == 0) {
 8008dfc:	2800      	cmp	r0, #0
 8008dfe:	d05b      	beq.n	8008eb8 <tcp_connect+0x100>
  iss = tcp_next_iss(pcb);
 8008e00:	4620      	mov	r0, r4
 8008e02:	f7ff ffbb 	bl	8008d7c <tcp_next_iss>
  pcb->rcv_nxt = 0;
 8008e06:	2200      	movs	r2, #0
 8008e08:	6262      	str	r2, [r4, #36]	; 0x24
  pcb->snd_nxt = iss;
 8008e0a:	64e0      	str	r0, [r4, #76]	; 0x4c
  pcb->lastack = iss - 1;
 8008e0c:	3801      	subs	r0, #1
 8008e0e:	6460      	str	r0, [r4, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 8008e10:	6560      	str	r0, [r4, #84]	; 0x54
  pcb->snd_lbb = iss - 1;
 8008e12:	65a0      	str	r0, [r4, #88]	; 0x58
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8008e14:	f44f 6306 	mov.w	r3, #2144	; 0x860
 8008e18:	8563      	strh	r3, [r4, #42]	; 0x2a
 8008e1a:	8523      	strh	r3, [r4, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8008e1c:	62e2      	str	r2, [r4, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 8008e1e:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
  pcb->mss = INITIAL_MSS;
 8008e22:	f44f 7006 	mov.w	r0, #536	; 0x218
 8008e26:	8660      	strh	r0, [r4, #50]	; 0x32
  pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8008e28:	1d21      	adds	r1, r4, #4
 8008e2a:	f7ff ffb3 	bl	8008d94 <tcp_eff_send_mss_impl>
 8008e2e:	8660      	strh	r0, [r4, #50]	; 0x32
  pcb->cwnd = 1;
 8008e30:	2301      	movs	r3, #1
 8008e32:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
  pcb->connected = connected;
 8008e36:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 8008e3a:	2102      	movs	r1, #2
 8008e3c:	4620      	mov	r0, r4
 8008e3e:	f002 f8b1 	bl	800afa4 <tcp_enqueue_flags>
  if (ret == ERR_OK) {
 8008e42:	4605      	mov	r5, r0
 8008e44:	bb50      	cbnz	r0, 8008e9c <tcp_connect+0xe4>
    pcb->state = SYN_SENT;
 8008e46:	2302      	movs	r3, #2
 8008e48:	7523      	strb	r3, [r4, #20]
    if (old_local_port != 0) {
 8008e4a:	b1de      	cbz	r6, 8008e84 <tcp_connect+0xcc>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8008e4c:	4b1c      	ldr	r3, [pc, #112]	; (8008ec0 <tcp_connect+0x108>)
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	429c      	cmp	r4, r3
 8008e52:	d011      	beq.n	8008e78 <tcp_connect+0xc0>
 8008e54:	b1b3      	cbz	r3, 8008e84 <tcp_connect+0xcc>
 8008e56:	68da      	ldr	r2, [r3, #12]
 8008e58:	4294      	cmp	r4, r2
 8008e5a:	d011      	beq.n	8008e80 <tcp_connect+0xc8>
 8008e5c:	4613      	mov	r3, r2
 8008e5e:	e7f9      	b.n	8008e54 <tcp_connect+0x9c>
  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 8008e60:	4b18      	ldr	r3, [pc, #96]	; (8008ec4 <tcp_connect+0x10c>)
 8008e62:	f44f 725e 	mov.w	r2, #888	; 0x378
 8008e66:	4918      	ldr	r1, [pc, #96]	; (8008ec8 <tcp_connect+0x110>)
 8008e68:	4818      	ldr	r0, [pc, #96]	; (8008ecc <tcp_connect+0x114>)
 8008e6a:	f003 fec0 	bl	800cbee <iprintf>
 8008e6e:	f06f 0509 	mvn.w	r5, #9
 8008e72:	e013      	b.n	8008e9c <tcp_connect+0xe4>
    ip_route_get_local_ip(&pcb->local_ip, &pcb->remote_ip, netif, local_ip);
 8008e74:	2300      	movs	r3, #0
 8008e76:	e7b6      	b.n	8008de6 <tcp_connect+0x2e>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8008e78:	68da      	ldr	r2, [r3, #12]
 8008e7a:	4b11      	ldr	r3, [pc, #68]	; (8008ec0 <tcp_connect+0x108>)
 8008e7c:	601a      	str	r2, [r3, #0]
 8008e7e:	e001      	b.n	8008e84 <tcp_connect+0xcc>
 8008e80:	68e2      	ldr	r2, [r4, #12]
 8008e82:	60da      	str	r2, [r3, #12]
    TCP_REG_ACTIVE(pcb);
 8008e84:	4b12      	ldr	r3, [pc, #72]	; (8008ed0 <tcp_connect+0x118>)
 8008e86:	681a      	ldr	r2, [r3, #0]
 8008e88:	60e2      	str	r2, [r4, #12]
 8008e8a:	601c      	str	r4, [r3, #0]
 8008e8c:	f002 fcfc 	bl	800b888 <tcp_timer_needed>
 8008e90:	2201      	movs	r2, #1
 8008e92:	4b10      	ldr	r3, [pc, #64]	; (8008ed4 <tcp_connect+0x11c>)
 8008e94:	701a      	strb	r2, [r3, #0]
    tcp_output(pcb);
 8008e96:	4620      	mov	r0, r4
 8008e98:	f002 f994 	bl	800b1c4 <tcp_output>
}
 8008e9c:	4628      	mov	r0, r5
 8008e9e:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_VAL;
 8008ea0:	f06f 0505 	mvn.w	r5, #5
 8008ea4:	e7fa      	b.n	8008e9c <tcp_connect+0xe4>
 8008ea6:	f06f 0505 	mvn.w	r5, #5
 8008eaa:	e7f7      	b.n	8008e9c <tcp_connect+0xe4>
      return ERR_RTE;
 8008eac:	f06f 0503 	mvn.w	r5, #3
 8008eb0:	e7f4      	b.n	8008e9c <tcp_connect+0xe4>
 8008eb2:	f06f 0503 	mvn.w	r5, #3
 8008eb6:	e7f1      	b.n	8008e9c <tcp_connect+0xe4>
      return ERR_BUF;
 8008eb8:	f06f 0501 	mvn.w	r5, #1
 8008ebc:	e7ee      	b.n	8008e9c <tcp_connect+0xe4>
 8008ebe:	bf00      	nop
 8008ec0:	20007988 	.word	0x20007988
 8008ec4:	0800e77c 	.word	0x0800e77c
 8008ec8:	0800e714 	.word	0x0800e714
 8008ecc:	0800d378 	.word	0x0800d378
 8008ed0:	2000797c 	.word	0x2000797c
 8008ed4:	20007978 	.word	0x20007978

08008ed8 <tcp_netif_ip_addr_changed>:
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 8008ed8:	b308      	cbz	r0, 8008f1e <tcp_netif_ip_addr_changed+0x46>
{
 8008eda:	b570      	push	{r4, r5, r6, lr}
 8008edc:	4604      	mov	r4, r0
  if (!ip_addr_isany(old_addr)) {
 8008ede:	6803      	ldr	r3, [r0, #0]
 8008ee0:	b903      	cbnz	r3, 8008ee4 <tcp_netif_ip_addr_changed+0xc>
 8008ee2:	bd70      	pop	{r4, r5, r6, pc}
 8008ee4:	460e      	mov	r6, r1
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8008ee6:	4b0e      	ldr	r3, [pc, #56]	; (8008f20 <tcp_netif_ip_addr_changed+0x48>)
 8008ee8:	6819      	ldr	r1, [r3, #0]
 8008eea:	f7ff fea1 	bl	8008c30 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8008eee:	4b0d      	ldr	r3, [pc, #52]	; (8008f24 <tcp_netif_ip_addr_changed+0x4c>)
 8008ef0:	6819      	ldr	r1, [r3, #0]
 8008ef2:	4620      	mov	r0, r4
 8008ef4:	f7ff fe9c 	bl	8008c30 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8008ef8:	2e00      	cmp	r6, #0
 8008efa:	d0f2      	beq.n	8008ee2 <tcp_netif_ip_addr_changed+0xa>
 8008efc:	6833      	ldr	r3, [r6, #0]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d0ef      	beq.n	8008ee2 <tcp_netif_ip_addr_changed+0xa>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 8008f02:	4b09      	ldr	r3, [pc, #36]	; (8008f28 <tcp_netif_ip_addr_changed+0x50>)
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	e000      	b.n	8008f0a <tcp_netif_ip_addr_changed+0x32>
{
 8008f08:	4613      	mov	r3, r2
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d0e9      	beq.n	8008ee2 <tcp_netif_ip_addr_changed+0xa>
        next = lpcb->next;
 8008f0e:	68da      	ldr	r2, [r3, #12]
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8008f10:	681d      	ldr	r5, [r3, #0]
 8008f12:	6820      	ldr	r0, [r4, #0]
 8008f14:	4285      	cmp	r5, r0
 8008f16:	d1f7      	bne.n	8008f08 <tcp_netif_ip_addr_changed+0x30>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8008f18:	6831      	ldr	r1, [r6, #0]
 8008f1a:	6019      	str	r1, [r3, #0]
 8008f1c:	e7f4      	b.n	8008f08 <tcp_netif_ip_addr_changed+0x30>
 8008f1e:	4770      	bx	lr
 8008f20:	2000797c 	.word	0x2000797c
 8008f24:	20007988 	.word	0x20007988
 8008f28:	20007984 	.word	0x20007984

08008f2c <tcp_getoptbyte>:
}

static u8_t
tcp_getoptbyte(void)
{
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 8008f2c:	4b0e      	ldr	r3, [pc, #56]	; (8008f68 <tcp_getoptbyte+0x3c>)
 8008f2e:	6819      	ldr	r1, [r3, #0]
 8008f30:	b189      	cbz	r1, 8008f56 <tcp_getoptbyte+0x2a>
 8008f32:	4b0e      	ldr	r3, [pc, #56]	; (8008f6c <tcp_getoptbyte+0x40>)
 8008f34:	881b      	ldrh	r3, [r3, #0]
 8008f36:	4a0e      	ldr	r2, [pc, #56]	; (8008f70 <tcp_getoptbyte+0x44>)
 8008f38:	8812      	ldrh	r2, [r2, #0]
 8008f3a:	4293      	cmp	r3, r2
 8008f3c:	d30b      	bcc.n	8008f56 <tcp_getoptbyte+0x2a>
{
 8008f3e:	b410      	push	{r4}
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
    return opts[tcp_optidx++];
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 8008f40:	1c5c      	adds	r4, r3, #1
 8008f42:	480a      	ldr	r0, [pc, #40]	; (8008f6c <tcp_getoptbyte+0x40>)
 8008f44:	8004      	strh	r4, [r0, #0]
 8008f46:	b2db      	uxtb	r3, r3
 8008f48:	b2d2      	uxtb	r2, r2
 8008f4a:	1a9b      	subs	r3, r3, r2
 8008f4c:	b2db      	uxtb	r3, r3
    return tcphdr_opt2[idx];
 8008f4e:	5cc8      	ldrb	r0, [r1, r3]
  }
}
 8008f50:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008f54:	4770      	bx	lr
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 8008f56:	4b07      	ldr	r3, [pc, #28]	; (8008f74 <tcp_getoptbyte+0x48>)
 8008f58:	681b      	ldr	r3, [r3, #0]
    return opts[tcp_optidx++];
 8008f5a:	4904      	ldr	r1, [pc, #16]	; (8008f6c <tcp_getoptbyte+0x40>)
 8008f5c:	880a      	ldrh	r2, [r1, #0]
 8008f5e:	1c50      	adds	r0, r2, #1
 8008f60:	8008      	strh	r0, [r1, #0]
 8008f62:	4413      	add	r3, r2
 8008f64:	7d18      	ldrb	r0, [r3, #20]
 8008f66:	4770      	bx	lr
 8008f68:	20003fb8 	.word	0x20003fb8
 8008f6c:	20003fac 	.word	0x20003fac
 8008f70:	20003fb4 	.word	0x20003fb4
 8008f74:	20003fb0 	.word	0x20003fb0

08008f78 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8008f78:	b538      	push	{r3, r4, r5, lr}
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8008f7a:	4b1f      	ldr	r3, [pc, #124]	; (8008ff8 <tcp_parseopt+0x80>)
 8008f7c:	881b      	ldrh	r3, [r3, #0]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d038      	beq.n	8008ff4 <tcp_parseopt+0x7c>
 8008f82:	4605      	mov	r5, r0
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8008f84:	2200      	movs	r2, #0
 8008f86:	4b1d      	ldr	r3, [pc, #116]	; (8008ffc <tcp_parseopt+0x84>)
 8008f88:	801a      	strh	r2, [r3, #0]
 8008f8a:	4b1c      	ldr	r3, [pc, #112]	; (8008ffc <tcp_parseopt+0x84>)
 8008f8c:	881a      	ldrh	r2, [r3, #0]
 8008f8e:	4b1a      	ldr	r3, [pc, #104]	; (8008ff8 <tcp_parseopt+0x80>)
 8008f90:	881b      	ldrh	r3, [r3, #0]
 8008f92:	429a      	cmp	r2, r3
 8008f94:	d22e      	bcs.n	8008ff4 <tcp_parseopt+0x7c>
      u8_t opt = tcp_getoptbyte();
 8008f96:	f7ff ffc9 	bl	8008f2c <tcp_getoptbyte>
      switch (opt) {
 8008f9a:	2801      	cmp	r0, #1
 8008f9c:	d0f5      	beq.n	8008f8a <tcp_parseopt+0x12>
 8008f9e:	b348      	cbz	r0, 8008ff4 <tcp_parseopt+0x7c>
 8008fa0:	2802      	cmp	r0, #2
 8008fa2:	d11d      	bne.n	8008fe0 <tcp_parseopt+0x68>
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8008fa4:	f7ff ffc2 	bl	8008f2c <tcp_getoptbyte>
 8008fa8:	2804      	cmp	r0, #4
 8008faa:	d123      	bne.n	8008ff4 <tcp_parseopt+0x7c>
 8008fac:	4b13      	ldr	r3, [pc, #76]	; (8008ffc <tcp_parseopt+0x84>)
 8008fae:	881b      	ldrh	r3, [r3, #0]
 8008fb0:	3302      	adds	r3, #2
 8008fb2:	4a11      	ldr	r2, [pc, #68]	; (8008ff8 <tcp_parseopt+0x80>)
 8008fb4:	8812      	ldrh	r2, [r2, #0]
 8008fb6:	4293      	cmp	r3, r2
 8008fb8:	dc1c      	bgt.n	8008ff4 <tcp_parseopt+0x7c>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
 8008fba:	f7ff ffb7 	bl	8008f2c <tcp_getoptbyte>
 8008fbe:	b283      	uxth	r3, r0
 8008fc0:	021b      	lsls	r3, r3, #8
 8008fc2:	b29c      	uxth	r4, r3
        mss |= tcp_getoptbyte();
 8008fc4:	f7ff ffb2 	bl	8008f2c <tcp_getoptbyte>
 8008fc8:	b280      	uxth	r0, r0
 8008fca:	ea44 0300 	orr.w	r3, r4, r0
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8008fce:	1e5a      	subs	r2, r3, #1
 8008fd0:	b292      	uxth	r2, r2
 8008fd2:	f5b2 7f06 	cmp.w	r2, #536	; 0x218
 8008fd6:	d301      	bcc.n	8008fdc <tcp_parseopt+0x64>
 8008fd8:	f44f 7306 	mov.w	r3, #536	; 0x218
 8008fdc:	866b      	strh	r3, [r5, #50]	; 0x32
        break;
 8008fde:	e7d4      	b.n	8008f8a <tcp_parseopt+0x12>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
 8008fe0:	f7ff ffa4 	bl	8008f2c <tcp_getoptbyte>
        if (data < 2) {
 8008fe4:	2801      	cmp	r0, #1
 8008fe6:	d905      	bls.n	8008ff4 <tcp_parseopt+0x7c>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
 8008fe8:	4b04      	ldr	r3, [pc, #16]	; (8008ffc <tcp_parseopt+0x84>)
 8008fea:	881a      	ldrh	r2, [r3, #0]
 8008fec:	4410      	add	r0, r2
 8008fee:	3802      	subs	r0, #2
 8008ff0:	8018      	strh	r0, [r3, #0]
 8008ff2:	e7ca      	b.n	8008f8a <tcp_parseopt+0x12>
 8008ff4:	bd38      	pop	{r3, r4, r5, pc}
 8008ff6:	bf00      	nop
 8008ff8:	20003fbc 	.word	0x20003fbc
 8008ffc:	20003fac 	.word	0x20003fac

08009000 <tcp_input_delayed_close>:
  if (recv_flags & TF_CLOSED) {
 8009000:	4b0e      	ldr	r3, [pc, #56]	; (800903c <tcp_input_delayed_close+0x3c>)
 8009002:	781b      	ldrb	r3, [r3, #0]
 8009004:	f013 0f10 	tst.w	r3, #16
 8009008:	d016      	beq.n	8009038 <tcp_input_delayed_close+0x38>
{
 800900a:	b510      	push	{r4, lr}
 800900c:	4604      	mov	r4, r0
    if (!(pcb->flags & TF_RXCLOSED)) {
 800900e:	7e83      	ldrb	r3, [r0, #26]
 8009010:	f013 0f10 	tst.w	r3, #16
 8009014:	d106      	bne.n	8009024 <tcp_input_delayed_close+0x24>
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8009016:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 800901a:	b11b      	cbz	r3, 8009024 <tcp_input_delayed_close+0x24>
 800901c:	f06f 010e 	mvn.w	r1, #14
 8009020:	6900      	ldr	r0, [r0, #16]
 8009022:	4798      	blx	r3
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8009024:	4621      	mov	r1, r4
 8009026:	4806      	ldr	r0, [pc, #24]	; (8009040 <tcp_input_delayed_close+0x40>)
 8009028:	f7ff fb74 	bl	8008714 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 800902c:	4621      	mov	r1, r4
 800902e:	2001      	movs	r0, #1
 8009030:	f7fe fab4 	bl	800759c <memp_free>
    return 1;
 8009034:	2001      	movs	r0, #1
 8009036:	bd10      	pop	{r4, pc}
  return 0;
 8009038:	2000      	movs	r0, #0
 800903a:	4770      	bx	lr
 800903c:	20003fa4 	.word	0x20003fa4
 8009040:	2000797c 	.word	0x2000797c

08009044 <tcp_timewait_input>:
  if (flags & TCP_RST) {
 8009044:	4b1c      	ldr	r3, [pc, #112]	; (80090b8 <tcp_timewait_input+0x74>)
 8009046:	781b      	ldrb	r3, [r3, #0]
 8009048:	f013 0f04 	tst.w	r3, #4
 800904c:	d132      	bne.n	80090b4 <tcp_timewait_input+0x70>
{
 800904e:	b510      	push	{r4, lr}
 8009050:	b082      	sub	sp, #8
  if (flags & TCP_SYN) {
 8009052:	f013 0f02 	tst.w	r3, #2
 8009056:	d01c      	beq.n	8009092 <tcp_timewait_input+0x4e>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8009058:	4b18      	ldr	r3, [pc, #96]	; (80090bc <tcp_timewait_input+0x78>)
 800905a:	6819      	ldr	r1, [r3, #0]
 800905c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800905e:	1aca      	subs	r2, r1, r3
 8009060:	2a00      	cmp	r2, #0
 8009062:	db1c      	blt.n	800909e <tcp_timewait_input+0x5a>
 8009064:	8d02      	ldrh	r2, [r0, #40]	; 0x28
 8009066:	4413      	add	r3, r2
 8009068:	1acb      	subs	r3, r1, r3
 800906a:	2b00      	cmp	r3, #0
 800906c:	dc17      	bgt.n	800909e <tcp_timewait_input+0x5a>
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800906e:	4b14      	ldr	r3, [pc, #80]	; (80090c0 <tcp_timewait_input+0x7c>)
 8009070:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8009072:	4a14      	ldr	r2, [pc, #80]	; (80090c4 <tcp_timewait_input+0x80>)
 8009074:	4814      	ldr	r0, [pc, #80]	; (80090c8 <tcp_timewait_input+0x84>)
 8009076:	8800      	ldrh	r0, [r0, #0]
 8009078:	881c      	ldrh	r4, [r3, #0]
 800907a:	9401      	str	r4, [sp, #4]
 800907c:	885b      	ldrh	r3, [r3, #2]
 800907e:	9300      	str	r3, [sp, #0]
 8009080:	4613      	mov	r3, r2
 8009082:	3204      	adds	r2, #4
 8009084:	4401      	add	r1, r0
 8009086:	4811      	ldr	r0, [pc, #68]	; (80090cc <tcp_timewait_input+0x88>)
 8009088:	6800      	ldr	r0, [r0, #0]
 800908a:	f002 f9f7 	bl	800b47c <tcp_rst>
}
 800908e:	b002      	add	sp, #8
 8009090:	bd10      	pop	{r4, pc}
  } else if (flags & TCP_FIN) {
 8009092:	f013 0f01 	tst.w	r3, #1
 8009096:	d002      	beq.n	800909e <tcp_timewait_input+0x5a>
    pcb->tmr = tcp_ticks;
 8009098:	4b0d      	ldr	r3, [pc, #52]	; (80090d0 <tcp_timewait_input+0x8c>)
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	6203      	str	r3, [r0, #32]
  if ((tcplen > 0)) {
 800909e:	4b0a      	ldr	r3, [pc, #40]	; (80090c8 <tcp_timewait_input+0x84>)
 80090a0:	881b      	ldrh	r3, [r3, #0]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d0f3      	beq.n	800908e <tcp_timewait_input+0x4a>
    pcb->flags |= TF_ACK_NOW;
 80090a6:	7e83      	ldrb	r3, [r0, #26]
 80090a8:	f043 0302 	orr.w	r3, r3, #2
 80090ac:	7683      	strb	r3, [r0, #26]
    tcp_output(pcb);
 80090ae:	f002 f889 	bl	800b1c4 <tcp_output>
 80090b2:	e7ec      	b.n	800908e <tcp_timewait_input+0x4a>
 80090b4:	4770      	bx	lr
 80090b6:	bf00      	nop
 80090b8:	20003f88 	.word	0x20003f88
 80090bc:	20003fa8 	.word	0x20003fa8
 80090c0:	20003fb0 	.word	0x20003fb0
 80090c4:	2000427c 	.word	0x2000427c
 80090c8:	20003fbe 	.word	0x20003fbe
 80090cc:	20003f84 	.word	0x20003f84
 80090d0:	20007980 	.word	0x20007980

080090d4 <tcp_listen_input>:
  if (flags & TCP_RST) {
 80090d4:	4b3c      	ldr	r3, [pc, #240]	; (80091c8 <tcp_listen_input+0xf4>)
 80090d6:	781b      	ldrb	r3, [r3, #0]
 80090d8:	f013 0f04 	tst.w	r3, #4
 80090dc:	d173      	bne.n	80091c6 <tcp_listen_input+0xf2>
{
 80090de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80090e0:	b083      	sub	sp, #12
 80090e2:	4605      	mov	r5, r0
  if (flags & TCP_ACK) {
 80090e4:	f013 0f10 	tst.w	r3, #16
 80090e8:	d104      	bne.n	80090f4 <tcp_listen_input+0x20>
  } else if (flags & TCP_SYN) {
 80090ea:	f013 0f02 	tst.w	r3, #2
 80090ee:	d114      	bne.n	800911a <tcp_listen_input+0x46>
}
 80090f0:	b003      	add	sp, #12
 80090f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80090f4:	4b35      	ldr	r3, [pc, #212]	; (80091cc <tcp_listen_input+0xf8>)
 80090f6:	681b      	ldr	r3, [r3, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80090f8:	4a35      	ldr	r2, [pc, #212]	; (80091d0 <tcp_listen_input+0xfc>)
 80090fa:	4936      	ldr	r1, [pc, #216]	; (80091d4 <tcp_listen_input+0x100>)
 80090fc:	880c      	ldrh	r4, [r1, #0]
 80090fe:	4936      	ldr	r1, [pc, #216]	; (80091d8 <tcp_listen_input+0x104>)
 8009100:	6809      	ldr	r1, [r1, #0]
 8009102:	4836      	ldr	r0, [pc, #216]	; (80091dc <tcp_listen_input+0x108>)
 8009104:	6800      	ldr	r0, [r0, #0]
 8009106:	881d      	ldrh	r5, [r3, #0]
 8009108:	9501      	str	r5, [sp, #4]
 800910a:	885b      	ldrh	r3, [r3, #2]
 800910c:	9300      	str	r3, [sp, #0]
 800910e:	4613      	mov	r3, r2
 8009110:	3204      	adds	r2, #4
 8009112:	4421      	add	r1, r4
 8009114:	f002 f9b2 	bl	800b47c <tcp_rst>
 8009118:	e7ea      	b.n	80090f0 <tcp_listen_input+0x1c>
    npcb = tcp_alloc(pcb->prio);
 800911a:	7d40      	ldrb	r0, [r0, #21]
 800911c:	f7ff fdc8 	bl	8008cb0 <tcp_alloc>
    if (npcb == NULL) {
 8009120:	4604      	mov	r4, r0
 8009122:	2800      	cmp	r0, #0
 8009124:	d041      	beq.n	80091aa <tcp_listen_input+0xd6>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8009126:	4b2e      	ldr	r3, [pc, #184]	; (80091e0 <tcp_listen_input+0x10c>)
 8009128:	695a      	ldr	r2, [r3, #20]
 800912a:	6002      	str	r2, [r0, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800912c:	691b      	ldr	r3, [r3, #16]
 800912e:	6043      	str	r3, [r0, #4]
    npcb->local_port = pcb->local_port;
 8009130:	8aeb      	ldrh	r3, [r5, #22]
 8009132:	82c3      	strh	r3, [r0, #22]
    npcb->remote_port = tcphdr->src;
 8009134:	4e25      	ldr	r6, [pc, #148]	; (80091cc <tcp_listen_input+0xf8>)
 8009136:	6833      	ldr	r3, [r6, #0]
 8009138:	881b      	ldrh	r3, [r3, #0]
 800913a:	8303      	strh	r3, [r0, #24]
    npcb->state = SYN_RCVD;
 800913c:	2303      	movs	r3, #3
 800913e:	7503      	strb	r3, [r0, #20]
    npcb->rcv_nxt = seqno + 1;
 8009140:	4f25      	ldr	r7, [pc, #148]	; (80091d8 <tcp_listen_input+0x104>)
 8009142:	683b      	ldr	r3, [r7, #0]
 8009144:	3301      	adds	r3, #1
 8009146:	6243      	str	r3, [r0, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8009148:	62c3      	str	r3, [r0, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800914a:	f7ff fe17 	bl	8008d7c <tcp_next_iss>
    npcb->snd_wl2 = iss;
 800914e:	6560      	str	r0, [r4, #84]	; 0x54
    npcb->snd_nxt = iss;
 8009150:	64e0      	str	r0, [r4, #76]	; 0x4c
    npcb->lastack = iss;
 8009152:	6460      	str	r0, [r4, #68]	; 0x44
    npcb->snd_lbb = iss;
 8009154:	65a0      	str	r0, [r4, #88]	; 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	3b01      	subs	r3, #1
 800915a:	6523      	str	r3, [r4, #80]	; 0x50
    npcb->callback_arg = pcb->callback_arg;
 800915c:	692b      	ldr	r3, [r5, #16]
 800915e:	6123      	str	r3, [r4, #16]
    npcb->listener = pcb;
 8009160:	67a5      	str	r5, [r4, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8009162:	7a2b      	ldrb	r3, [r5, #8]
 8009164:	f003 030c 	and.w	r3, r3, #12
 8009168:	7223      	strb	r3, [r4, #8]
    TCP_REG_ACTIVE(npcb);
 800916a:	4b1e      	ldr	r3, [pc, #120]	; (80091e4 <tcp_listen_input+0x110>)
 800916c:	681a      	ldr	r2, [r3, #0]
 800916e:	60e2      	str	r2, [r4, #12]
 8009170:	601c      	str	r4, [r3, #0]
 8009172:	f002 fb89 	bl	800b888 <tcp_timer_needed>
 8009176:	2201      	movs	r2, #1
 8009178:	4b1b      	ldr	r3, [pc, #108]	; (80091e8 <tcp_listen_input+0x114>)
 800917a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800917c:	4620      	mov	r0, r4
 800917e:	f7ff fefb 	bl	8008f78 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8009182:	6833      	ldr	r3, [r6, #0]
 8009184:	89db      	ldrh	r3, [r3, #14]
 8009186:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
    npcb->snd_wnd_max = npcb->snd_wnd;
 800918a:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800918e:	1d21      	adds	r1, r4, #4
 8009190:	8e60      	ldrh	r0, [r4, #50]	; 0x32
 8009192:	f7ff fdff 	bl	8008d94 <tcp_eff_send_mss_impl>
 8009196:	8660      	strh	r0, [r4, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8009198:	2112      	movs	r1, #18
 800919a:	4620      	mov	r0, r4
 800919c:	f001 ff02 	bl	800afa4 <tcp_enqueue_flags>
    if (rc != ERR_OK) {
 80091a0:	b960      	cbnz	r0, 80091bc <tcp_listen_input+0xe8>
    tcp_output(npcb);
 80091a2:	4620      	mov	r0, r4
 80091a4:	f002 f80e 	bl	800b1c4 <tcp_output>
 80091a8:	e7a2      	b.n	80090f0 <tcp_listen_input+0x1c>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80091aa:	69ab      	ldr	r3, [r5, #24]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d09f      	beq.n	80090f0 <tcp_listen_input+0x1c>
 80091b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80091b4:	2100      	movs	r1, #0
 80091b6:	6928      	ldr	r0, [r5, #16]
 80091b8:	4798      	blx	r3
 80091ba:	e799      	b.n	80090f0 <tcp_listen_input+0x1c>
      tcp_abandon(npcb, 0);
 80091bc:	2100      	movs	r1, #0
 80091be:	4620      	mov	r0, r4
 80091c0:	f7ff fc78 	bl	8008ab4 <tcp_abandon>
      return;
 80091c4:	e794      	b.n	80090f0 <tcp_listen_input+0x1c>
 80091c6:	4770      	bx	lr
 80091c8:	20003f88 	.word	0x20003f88
 80091cc:	20003fb0 	.word	0x20003fb0
 80091d0:	2000427c 	.word	0x2000427c
 80091d4:	20003fbe 	.word	0x20003fbe
 80091d8:	20003fa8 	.word	0x20003fa8
 80091dc:	20003f84 	.word	0x20003f84
 80091e0:	2000426c 	.word	0x2000426c
 80091e4:	2000797c 	.word	0x2000797c
 80091e8:	20007978 	.word	0x20007978

080091ec <tcp_oos_insert_segment>:
{
 80091ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091ee:	4605      	mov	r5, r0
 80091f0:	460c      	mov	r4, r1
  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80091f2:	68c3      	ldr	r3, [r0, #12]
 80091f4:	8998      	ldrh	r0, [r3, #12]
 80091f6:	f7fc fac1 	bl	800577c <lwip_htons>
 80091fa:	f010 0f01 	tst.w	r0, #1
 80091fe:	d009      	beq.n	8009214 <tcp_oos_insert_segment+0x28>
    tcp_segs_free(next);
 8009200:	4620      	mov	r0, r4
 8009202:	f7fe ffd4 	bl	80081ae <tcp_segs_free>
    next = NULL;
 8009206:	2400      	movs	r4, #0
 8009208:	e02e      	b.n	8009268 <tcp_oos_insert_segment+0x7c>
      next = next->next;
 800920a:	6826      	ldr	r6, [r4, #0]
      tcp_seg_free(old_seg);
 800920c:	4620      	mov	r0, r4
 800920e:	f7fe ffc1 	bl	8008194 <tcp_seg_free>
      next = next->next;
 8009212:	4634      	mov	r4, r6
    while (next &&
 8009214:	b1c4      	cbz	r4, 8009248 <tcp_oos_insert_segment+0x5c>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8009216:	892b      	ldrh	r3, [r5, #8]
 8009218:	4a14      	ldr	r2, [pc, #80]	; (800926c <tcp_oos_insert_segment+0x80>)
 800921a:	6812      	ldr	r2, [r2, #0]
 800921c:	4413      	add	r3, r2
 800921e:	68e1      	ldr	r1, [r4, #12]
 8009220:	684a      	ldr	r2, [r1, #4]
 8009222:	8920      	ldrh	r0, [r4, #8]
 8009224:	4402      	add	r2, r0
 8009226:	1a9b      	subs	r3, r3, r2
    while (next &&
 8009228:	2b00      	cmp	r3, #0
 800922a:	db0d      	blt.n	8009248 <tcp_oos_insert_segment+0x5c>
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800922c:	8988      	ldrh	r0, [r1, #12]
 800922e:	f7fc faa5 	bl	800577c <lwip_htons>
 8009232:	f010 0f01 	tst.w	r0, #1
 8009236:	d0e8      	beq.n	800920a <tcp_oos_insert_segment+0x1e>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8009238:	68ef      	ldr	r7, [r5, #12]
 800923a:	89be      	ldrh	r6, [r7, #12]
 800923c:	2001      	movs	r0, #1
 800923e:	f7fc fa9d 	bl	800577c <lwip_htons>
 8009242:	4330      	orrs	r0, r6
 8009244:	81b8      	strh	r0, [r7, #12]
 8009246:	e7e0      	b.n	800920a <tcp_oos_insert_segment+0x1e>
    if (next &&
 8009248:	b174      	cbz	r4, 8009268 <tcp_oos_insert_segment+0x7c>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800924a:	892b      	ldrh	r3, [r5, #8]
 800924c:	4a07      	ldr	r2, [pc, #28]	; (800926c <tcp_oos_insert_segment+0x80>)
 800924e:	6811      	ldr	r1, [r2, #0]
 8009250:	440b      	add	r3, r1
 8009252:	68e2      	ldr	r2, [r4, #12]
 8009254:	6852      	ldr	r2, [r2, #4]
 8009256:	1a9b      	subs	r3, r3, r2
    if (next &&
 8009258:	2b00      	cmp	r3, #0
 800925a:	dd05      	ble.n	8009268 <tcp_oos_insert_segment+0x7c>
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800925c:	1a52      	subs	r2, r2, r1
 800925e:	b291      	uxth	r1, r2
 8009260:	8129      	strh	r1, [r5, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8009262:	6868      	ldr	r0, [r5, #4]
 8009264:	f7fe fcc4 	bl	8007bf0 <pbuf_realloc>
  cseg->next = next;
 8009268:	602c      	str	r4, [r5, #0]
 800926a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800926c:	20003fa8 	.word	0x20003fa8

08009270 <tcp_receive>:
{
 8009270:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009274:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8009276:	7d03      	ldrb	r3, [r0, #20]
 8009278:	2b03      	cmp	r3, #3
 800927a:	d979      	bls.n	8009370 <tcp_receive+0x100>
  if (flags & TCP_ACK) {
 800927c:	4bae      	ldr	r3, [pc, #696]	; (8009538 <tcp_receive+0x2c8>)
 800927e:	781b      	ldrb	r3, [r3, #0]
 8009280:	f013 0f10 	tst.w	r3, #16
 8009284:	f000 81aa 	beq.w	80095dc <tcp_receive+0x36c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8009288:	f8b4 005c 	ldrh.w	r0, [r4, #92]	; 0x5c
 800928c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800928e:	1886      	adds	r6, r0, r2
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8009290:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8009292:	4baa      	ldr	r3, [pc, #680]	; (800953c <tcp_receive+0x2cc>)
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	1acd      	subs	r5, r1, r3
 8009298:	2d00      	cmp	r5, #0
 800929a:	db7c      	blt.n	8009396 <tcp_receive+0x126>
 800929c:	4299      	cmp	r1, r3
 800929e:	d06f      	beq.n	8009380 <tcp_receive+0x110>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80092a0:	49a7      	ldr	r1, [pc, #668]	; (8009540 <tcp_receive+0x2d0>)
 80092a2:	6809      	ldr	r1, [r1, #0]
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80092a4:	428a      	cmp	r2, r1
 80092a6:	d071      	beq.n	800938c <tcp_receive+0x11c>
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80092a8:	4ba5      	ldr	r3, [pc, #660]	; (8009540 <tcp_receive+0x2d0>)
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80092ae:	1a5a      	subs	r2, r3, r1
 80092b0:	2a00      	cmp	r2, #0
 80092b2:	f340 8095 	ble.w	80093e0 <tcp_receive+0x170>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 80092b6:	2a01      	cmp	r2, #1
 80092b8:	d404      	bmi.n	80092c4 <tcp_receive+0x54>
 80092ba:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80092bc:	1a9a      	subs	r2, r3, r2
 80092be:	2a00      	cmp	r2, #0
 80092c0:	f340 80cc 	ble.w	800945c <tcp_receive+0x1ec>
      tcp_send_empty_ack(pcb);
 80092c4:	4620      	mov	r0, r4
 80092c6:	f001 ff43 	bl	800b150 <tcp_send_empty_ack>
    while (pcb->unsent != NULL &&
 80092ca:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	f000 8176 	beq.w	80095be <tcp_receive+0x34e>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 80092d2:	4a9b      	ldr	r2, [pc, #620]	; (8009540 <tcp_receive+0x2d0>)
 80092d4:	6815      	ldr	r5, [r2, #0]
 80092d6:	68db      	ldr	r3, [r3, #12]
 80092d8:	6858      	ldr	r0, [r3, #4]
 80092da:	f7fc fa52 	bl	8005782 <lwip_htonl>
 80092de:	4606      	mov	r6, r0
 80092e0:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80092e2:	891f      	ldrh	r7, [r3, #8]
 80092e4:	68db      	ldr	r3, [r3, #12]
 80092e6:	8998      	ldrh	r0, [r3, #12]
 80092e8:	f7fc fa48 	bl	800577c <lwip_htons>
 80092ec:	f010 0f03 	tst.w	r0, #3
 80092f0:	f000 8163 	beq.w	80095ba <tcp_receive+0x34a>
 80092f4:	2301      	movs	r3, #1
 80092f6:	443b      	add	r3, r7
 80092f8:	441e      	add	r6, r3
 80092fa:	1bad      	subs	r5, r5, r6
    while (pcb->unsent != NULL &&
 80092fc:	2d00      	cmp	r5, #0
 80092fe:	f2c0 815e 	blt.w	80095be <tcp_receive+0x34e>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8009302:	4b8f      	ldr	r3, [pc, #572]	; (8009540 <tcp_receive+0x2d0>)
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8009308:	1a9b      	subs	r3, r3, r2
 800930a:	2b00      	cmp	r3, #0
 800930c:	f300 8157 	bgt.w	80095be <tcp_receive+0x34e>
      next = pcb->unsent;
 8009310:	6ea5      	ldr	r5, [r4, #104]	; 0x68
      pcb->unsent = pcb->unsent->next;
 8009312:	682b      	ldr	r3, [r5, #0]
 8009314:	66a3      	str	r3, [r4, #104]	; 0x68
      if (pcb->unsent == NULL) {
 8009316:	2b00      	cmp	r3, #0
 8009318:	f000 8144 	beq.w	80095a4 <tcp_receive+0x334>
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800931c:	f8b4 6062 	ldrh.w	r6, [r4, #98]	; 0x62
 8009320:	6868      	ldr	r0, [r5, #4]
 8009322:	f7fe fcd7 	bl	8007cd4 <pbuf_clen>
 8009326:	4286      	cmp	r6, r0
 8009328:	f0c0 813f 	bcc.w	80095aa <tcp_receive+0x33a>
      pcb->snd_queuelen -= pbuf_clen(next->p);
 800932c:	6868      	ldr	r0, [r5, #4]
 800932e:	f7fe fcd1 	bl	8007cd4 <pbuf_clen>
 8009332:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8009336:	1a18      	subs	r0, r3, r0
 8009338:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
      recv_acked += next->len;
 800933c:	892b      	ldrh	r3, [r5, #8]
 800933e:	4a81      	ldr	r2, [pc, #516]	; (8009544 <tcp_receive+0x2d4>)
 8009340:	8811      	ldrh	r1, [r2, #0]
 8009342:	440b      	add	r3, r1
 8009344:	8013      	strh	r3, [r2, #0]
      tcp_seg_free(next);
 8009346:	4628      	mov	r0, r5
 8009348:	f7fe ff24 	bl	8008194 <tcp_seg_free>
      if (pcb->snd_queuelen != 0) {
 800934c:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8009350:	2b00      	cmp	r3, #0
 8009352:	d0ba      	beq.n	80092ca <tcp_receive+0x5a>
        LWIP_ASSERT("tcp_receive: valid queue length",
 8009354:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8009356:	2b00      	cmp	r3, #0
 8009358:	d1b7      	bne.n	80092ca <tcp_receive+0x5a>
 800935a:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800935c:	2b00      	cmp	r3, #0
 800935e:	d1b4      	bne.n	80092ca <tcp_receive+0x5a>
 8009360:	4b79      	ldr	r3, [pc, #484]	; (8009548 <tcp_receive+0x2d8>)
 8009362:	f240 42dd 	movw	r2, #1245	; 0x4dd
 8009366:	4979      	ldr	r1, [pc, #484]	; (800954c <tcp_receive+0x2dc>)
 8009368:	4879      	ldr	r0, [pc, #484]	; (8009550 <tcp_receive+0x2e0>)
 800936a:	f003 fc40 	bl	800cbee <iprintf>
 800936e:	e7ac      	b.n	80092ca <tcp_receive+0x5a>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8009370:	4b75      	ldr	r3, [pc, #468]	; (8009548 <tcp_receive+0x2d8>)
 8009372:	f44f 6281 	mov.w	r2, #1032	; 0x408
 8009376:	4977      	ldr	r1, [pc, #476]	; (8009554 <tcp_receive+0x2e4>)
 8009378:	4875      	ldr	r0, [pc, #468]	; (8009550 <tcp_receive+0x2e0>)
 800937a:	f003 fc38 	bl	800cbee <iprintf>
 800937e:	e77d      	b.n	800927c <tcp_receive+0xc>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009380:	496f      	ldr	r1, [pc, #444]	; (8009540 <tcp_receive+0x2d0>)
 8009382:	6809      	ldr	r1, [r1, #0]
 8009384:	1a51      	subs	r1, r2, r1
 8009386:	2900      	cmp	r1, #0
 8009388:	da8a      	bge.n	80092a0 <tcp_receive+0x30>
 800938a:	e004      	b.n	8009396 <tcp_receive+0x126>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800938c:	4a72      	ldr	r2, [pc, #456]	; (8009558 <tcp_receive+0x2e8>)
 800938e:	6812      	ldr	r2, [r2, #0]
 8009390:	89d2      	ldrh	r2, [r2, #14]
 8009392:	4290      	cmp	r0, r2
 8009394:	d288      	bcs.n	80092a8 <tcp_receive+0x38>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8009396:	4a70      	ldr	r2, [pc, #448]	; (8009558 <tcp_receive+0x2e8>)
 8009398:	6812      	ldr	r2, [r2, #0]
 800939a:	89d2      	ldrh	r2, [r2, #14]
 800939c:	b291      	uxth	r1, r2
 800939e:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80093a2:	f8b4 005e 	ldrh.w	r0, [r4, #94]	; 0x5e
 80093a6:	4281      	cmp	r1, r0
 80093a8:	d901      	bls.n	80093ae <tcp_receive+0x13e>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80093aa:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
      pcb->snd_wl1 = seqno;
 80093ae:	6523      	str	r3, [r4, #80]	; 0x50
      pcb->snd_wl2 = ackno;
 80093b0:	4b63      	ldr	r3, [pc, #396]	; (8009540 <tcp_receive+0x2d0>)
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	6563      	str	r3, [r4, #84]	; 0x54
      if (pcb->snd_wnd == 0) {
 80093b6:	b951      	cbnz	r1, 80093ce <tcp_receive+0x15e>
        if (pcb->persist_backoff == 0) {
 80093b8:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 80093bc:	2b00      	cmp	r3, #0
 80093be:	f47f af73 	bne.w	80092a8 <tcp_receive+0x38>
          pcb->persist_cnt = 0;
 80093c2:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
          pcb->persist_backoff = 1;
 80093c6:	2301      	movs	r3, #1
 80093c8:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
 80093cc:	e76c      	b.n	80092a8 <tcp_receive+0x38>
      } else if (pcb->persist_backoff > 0) {
 80093ce:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	f43f af68 	beq.w	80092a8 <tcp_receive+0x38>
          pcb->persist_backoff = 0;
 80093d8:	2300      	movs	r3, #0
 80093da:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
 80093de:	e763      	b.n	80092a8 <tcp_receive+0x38>
      if (tcplen == 0) {
 80093e0:	4a5e      	ldr	r2, [pc, #376]	; (800955c <tcp_receive+0x2ec>)
 80093e2:	8812      	ldrh	r2, [r2, #0]
 80093e4:	bb7a      	cbnz	r2, 8009446 <tcp_receive+0x1d6>
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80093e6:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80093e8:	f8b4 005c 	ldrh.w	r0, [r4, #92]	; 0x5c
 80093ec:	4402      	add	r2, r0
 80093ee:	4296      	cmp	r6, r2
 80093f0:	d001      	beq.n	80093f6 <tcp_receive+0x186>
  int found_dupack = 0;
 80093f2:	2300      	movs	r3, #0
 80093f4:	e028      	b.n	8009448 <tcp_receive+0x1d8>
          if (pcb->rtime >= 0) {
 80093f6:	f9b4 2030 	ldrsh.w	r2, [r4, #48]	; 0x30
 80093fa:	2a00      	cmp	r2, #0
 80093fc:	db2a      	blt.n	8009454 <tcp_receive+0x1e4>
            if (pcb->lastack == ackno) {
 80093fe:	428b      	cmp	r3, r1
 8009400:	d001      	beq.n	8009406 <tcp_receive+0x196>
  int found_dupack = 0;
 8009402:	2300      	movs	r3, #0
 8009404:	e020      	b.n	8009448 <tcp_receive+0x1d8>
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8009406:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800940a:	1c53      	adds	r3, r2, #1
 800940c:	b2db      	uxtb	r3, r3
 800940e:	429a      	cmp	r2, r3
 8009410:	d201      	bcs.n	8009416 <tcp_receive+0x1a6>
                ++pcb->dupacks;
 8009412:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
              if (pcb->dupacks > 3) {
 8009416:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800941a:	2b03      	cmp	r3, #3
 800941c:	d90a      	bls.n	8009434 <tcp_receive+0x1c4>
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 800941e:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 8009422:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8009424:	4413      	add	r3, r2
 8009426:	b29b      	uxth	r3, r3
 8009428:	429a      	cmp	r2, r3
 800942a:	d215      	bcs.n	8009458 <tcp_receive+0x1e8>
                  pcb->cwnd += pcb->mss;
 800942c:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
              found_dupack = 1;
 8009430:	2301      	movs	r3, #1
 8009432:	e009      	b.n	8009448 <tcp_receive+0x1d8>
              } else if (pcb->dupacks == 3) {
 8009434:	2b03      	cmp	r3, #3
 8009436:	d001      	beq.n	800943c <tcp_receive+0x1cc>
              found_dupack = 1;
 8009438:	2301      	movs	r3, #1
 800943a:	e005      	b.n	8009448 <tcp_receive+0x1d8>
                tcp_rexmit_fast(pcb);
 800943c:	4620      	mov	r0, r4
 800943e:	f002 f8b8 	bl	800b5b2 <tcp_rexmit_fast>
              found_dupack = 1;
 8009442:	2301      	movs	r3, #1
 8009444:	e000      	b.n	8009448 <tcp_receive+0x1d8>
  int found_dupack = 0;
 8009446:	2300      	movs	r3, #0
      if (!found_dupack) {
 8009448:	2b00      	cmp	r3, #0
 800944a:	f47f af3e 	bne.w	80092ca <tcp_receive+0x5a>
        pcb->dupacks = 0;
 800944e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009452:	e73a      	b.n	80092ca <tcp_receive+0x5a>
  int found_dupack = 0;
 8009454:	2300      	movs	r3, #0
 8009456:	e7f7      	b.n	8009448 <tcp_receive+0x1d8>
              found_dupack = 1;
 8009458:	2301      	movs	r3, #1
 800945a:	e7f5      	b.n	8009448 <tcp_receive+0x1d8>
      if (pcb->flags & TF_INFR) {
 800945c:	7ea2      	ldrb	r2, [r4, #26]
 800945e:	f012 0f04 	tst.w	r2, #4
 8009462:	d006      	beq.n	8009472 <tcp_receive+0x202>
        pcb->flags &= ~TF_INFR;
 8009464:	f022 0204 	bic.w	r2, r2, #4
 8009468:	76a2      	strb	r2, [r4, #26]
        pcb->cwnd = pcb->ssthresh;
 800946a:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
 800946e:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
      pcb->nrtx = 0;
 8009472:	2100      	movs	r1, #0
 8009474:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8009478:	f9b4 003c 	ldrsh.w	r0, [r4, #60]	; 0x3c
 800947c:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800947e:	eb02 02e0 	add.w	r2, r2, r0, asr #3
 8009482:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
      pcb->dupacks = 0;
 8009486:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
      pcb->lastack = ackno;
 800948a:	6463      	str	r3, [r4, #68]	; 0x44
      if (pcb->state >= ESTABLISHED) {
 800948c:	7d23      	ldrb	r3, [r4, #20]
 800948e:	2b03      	cmp	r3, #3
 8009490:	d90c      	bls.n	80094ac <tcp_receive+0x23c>
        if (pcb->cwnd < pcb->ssthresh) {
 8009492:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 8009496:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
 800949a:	429a      	cmp	r2, r3
 800949c:	d260      	bcs.n	8009560 <tcp_receive+0x2f0>
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 800949e:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 80094a0:	4413      	add	r3, r2
 80094a2:	b29b      	uxth	r3, r3
 80094a4:	429a      	cmp	r2, r3
 80094a6:	d201      	bcs.n	80094ac <tcp_receive+0x23c>
            pcb->cwnd += pcb->mss;
 80094a8:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      while (pcb->unacked != NULL &&
 80094ac:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d06d      	beq.n	800958e <tcp_receive+0x31e>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 80094b2:	68db      	ldr	r3, [r3, #12]
 80094b4:	6858      	ldr	r0, [r3, #4]
 80094b6:	f7fc f964 	bl	8005782 <lwip_htonl>
 80094ba:	4605      	mov	r5, r0
 80094bc:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80094be:	891e      	ldrh	r6, [r3, #8]
 80094c0:	68db      	ldr	r3, [r3, #12]
 80094c2:	8998      	ldrh	r0, [r3, #12]
 80094c4:	f7fc f95a 	bl	800577c <lwip_htons>
 80094c8:	f010 0f03 	tst.w	r0, #3
 80094cc:	d05d      	beq.n	800958a <tcp_receive+0x31a>
 80094ce:	2301      	movs	r3, #1
 80094d0:	4433      	add	r3, r6
 80094d2:	441d      	add	r5, r3
 80094d4:	4b1a      	ldr	r3, [pc, #104]	; (8009540 <tcp_receive+0x2d0>)
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	1aed      	subs	r5, r5, r3
      while (pcb->unacked != NULL &&
 80094da:	2d00      	cmp	r5, #0
 80094dc:	dc57      	bgt.n	800958e <tcp_receive+0x31e>
        next = pcb->unacked;
 80094de:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
        pcb->unacked = pcb->unacked->next;
 80094e0:	682b      	ldr	r3, [r5, #0]
 80094e2:	66e3      	str	r3, [r4, #108]	; 0x6c
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 80094e4:	f8b4 6062 	ldrh.w	r6, [r4, #98]	; 0x62
 80094e8:	6868      	ldr	r0, [r5, #4]
 80094ea:	f7fe fbf3 	bl	8007cd4 <pbuf_clen>
 80094ee:	4286      	cmp	r6, r0
 80094f0:	d343      	bcc.n	800957a <tcp_receive+0x30a>
        pcb->snd_queuelen -= pbuf_clen(next->p);
 80094f2:	6868      	ldr	r0, [r5, #4]
 80094f4:	f7fe fbee 	bl	8007cd4 <pbuf_clen>
 80094f8:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 80094fc:	1a18      	subs	r0, r3, r0
 80094fe:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
        recv_acked += next->len;
 8009502:	892b      	ldrh	r3, [r5, #8]
 8009504:	4a0f      	ldr	r2, [pc, #60]	; (8009544 <tcp_receive+0x2d4>)
 8009506:	8811      	ldrh	r1, [r2, #0]
 8009508:	440b      	add	r3, r1
 800950a:	8013      	strh	r3, [r2, #0]
        tcp_seg_free(next);
 800950c:	4628      	mov	r0, r5
 800950e:	f7fe fe41 	bl	8008194 <tcp_seg_free>
        if (pcb->snd_queuelen != 0) {
 8009512:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8009516:	2b00      	cmp	r3, #0
 8009518:	d0c8      	beq.n	80094ac <tcp_receive+0x23c>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 800951a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800951c:	2b00      	cmp	r3, #0
 800951e:	d1c5      	bne.n	80094ac <tcp_receive+0x23c>
 8009520:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8009522:	2b00      	cmp	r3, #0
 8009524:	d1c2      	bne.n	80094ac <tcp_receive+0x23c>
 8009526:	4b08      	ldr	r3, [pc, #32]	; (8009548 <tcp_receive+0x2d8>)
 8009528:	f240 42a7 	movw	r2, #1191	; 0x4a7
 800952c:	4907      	ldr	r1, [pc, #28]	; (800954c <tcp_receive+0x2dc>)
 800952e:	4808      	ldr	r0, [pc, #32]	; (8009550 <tcp_receive+0x2e0>)
 8009530:	f003 fb5d 	bl	800cbee <iprintf>
 8009534:	e7ba      	b.n	80094ac <tcp_receive+0x23c>
 8009536:	bf00      	nop
 8009538:	20003f88 	.word	0x20003f88
 800953c:	20003fa8 	.word	0x20003fa8
 8009540:	20003f84 	.word	0x20003f84
 8009544:	20003f9c 	.word	0x20003f9c
 8009548:	0800ec34 	.word	0x0800ec34
 800954c:	0800ecac 	.word	0x0800ecac
 8009550:	0800d378 	.word	0x0800d378
 8009554:	0800ec68 	.word	0x0800ec68
 8009558:	20003fb0 	.word	0x20003fb0
 800955c:	20003fbe 	.word	0x20003fbe
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 8009560:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8009562:	fb03 f303 	mul.w	r3, r3, r3
 8009566:	fb93 f3f2 	sdiv	r3, r3, r2
 800956a:	fa12 f383 	uxtah	r3, r2, r3
 800956e:	b29b      	uxth	r3, r3
          if (new_cwnd > pcb->cwnd) {
 8009570:	429a      	cmp	r2, r3
 8009572:	d29b      	bcs.n	80094ac <tcp_receive+0x23c>
            pcb->cwnd = new_cwnd;
 8009574:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
 8009578:	e798      	b.n	80094ac <tcp_receive+0x23c>
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800957a:	4ba2      	ldr	r3, [pc, #648]	; (8009804 <tcp_receive+0x594>)
 800957c:	f240 429e 	movw	r2, #1182	; 0x49e
 8009580:	49a1      	ldr	r1, [pc, #644]	; (8009808 <tcp_receive+0x598>)
 8009582:	48a2      	ldr	r0, [pc, #648]	; (800980c <tcp_receive+0x59c>)
 8009584:	f003 fb33 	bl	800cbee <iprintf>
 8009588:	e7b3      	b.n	80094f2 <tcp_receive+0x282>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 800958a:	2300      	movs	r3, #0
 800958c:	e7a0      	b.n	80094d0 <tcp_receive+0x260>
      if (pcb->unacked == NULL) {
 800958e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8009590:	b123      	cbz	r3, 800959c <tcp_receive+0x32c>
        pcb->rtime = 0;
 8009592:	2300      	movs	r3, #0
 8009594:	8623      	strh	r3, [r4, #48]	; 0x30
      pcb->polltmr = 0;
 8009596:	2300      	movs	r3, #0
 8009598:	76e3      	strb	r3, [r4, #27]
 800959a:	e696      	b.n	80092ca <tcp_receive+0x5a>
        pcb->rtime = -1;
 800959c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80095a0:	8623      	strh	r3, [r4, #48]	; 0x30
 80095a2:	e7f8      	b.n	8009596 <tcp_receive+0x326>
        pcb->unsent_oversize = 0;
 80095a4:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
 80095a8:	e6b8      	b.n	800931c <tcp_receive+0xac>
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 80095aa:	4b96      	ldr	r3, [pc, #600]	; (8009804 <tcp_receive+0x594>)
 80095ac:	f240 42d5 	movw	r2, #1237	; 0x4d5
 80095b0:	4995      	ldr	r1, [pc, #596]	; (8009808 <tcp_receive+0x598>)
 80095b2:	4896      	ldr	r0, [pc, #600]	; (800980c <tcp_receive+0x59c>)
 80095b4:	f003 fb1b 	bl	800cbee <iprintf>
 80095b8:	e6b8      	b.n	800932c <tcp_receive+0xbc>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 80095ba:	2300      	movs	r3, #0
 80095bc:	e69b      	b.n	80092f6 <tcp_receive+0x86>
    pcb->snd_buf += recv_acked;
 80095be:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 80095c2:	4a93      	ldr	r2, [pc, #588]	; (8009810 <tcp_receive+0x5a0>)
 80095c4:	8812      	ldrh	r2, [r2, #0]
 80095c6:	4413      	add	r3, r2
 80095c8:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80095cc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80095ce:	b12b      	cbz	r3, 80095dc <tcp_receive+0x36c>
 80095d0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80095d2:	4990      	ldr	r1, [pc, #576]	; (8009814 <tcp_receive+0x5a4>)
 80095d4:	6809      	ldr	r1, [r1, #0]
 80095d6:	1a52      	subs	r2, r2, r1
 80095d8:	2a00      	cmp	r2, #0
 80095da:	db29      	blt.n	8009630 <tcp_receive+0x3c0>
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80095dc:	4b8e      	ldr	r3, [pc, #568]	; (8009818 <tcp_receive+0x5a8>)
 80095de:	881b      	ldrh	r3, [r3, #0]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	f000 834b 	beq.w	8009c7c <tcp_receive+0xa0c>
 80095e6:	7d22      	ldrb	r2, [r4, #20]
 80095e8:	2a06      	cmp	r2, #6
 80095ea:	f200 8347 	bhi.w	8009c7c <tcp_receive+0xa0c>
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80095ee:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80095f0:	4a8a      	ldr	r2, [pc, #552]	; (800981c <tcp_receive+0x5ac>)
 80095f2:	6812      	ldr	r2, [r2, #0]
 80095f4:	1a8e      	subs	r6, r1, r2
 80095f6:	2e01      	cmp	r6, #1
 80095f8:	d404      	bmi.n	8009604 <tcp_receive+0x394>
 80095fa:	4413      	add	r3, r2
 80095fc:	1acb      	subs	r3, r1, r3
 80095fe:	3301      	adds	r3, #1
 8009600:	2b00      	cmp	r3, #0
 8009602:	dd36      	ble.n	8009672 <tcp_receive+0x402>
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8009604:	1a52      	subs	r2, r2, r1
 8009606:	2a00      	cmp	r2, #0
 8009608:	f2c0 8093 	blt.w	8009732 <tcp_receive+0x4c2>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800960c:	4b83      	ldr	r3, [pc, #524]	; (800981c <tcp_receive+0x5ac>)
 800960e:	6819      	ldr	r1, [r3, #0]
 8009610:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8009612:	1a8b      	subs	r3, r1, r2
 8009614:	2b00      	cmp	r3, #0
 8009616:	db06      	blt.n	8009626 <tcp_receive+0x3b6>
 8009618:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800961a:	4413      	add	r3, r2
 800961c:	1acb      	subs	r3, r1, r3
 800961e:	3301      	adds	r3, #1
 8009620:	2b00      	cmp	r3, #0
 8009622:	f340 808b 	ble.w	800973c <tcp_receive+0x4cc>
      tcp_send_empty_ack(pcb);
 8009626:	4620      	mov	r0, r4
 8009628:	f001 fd92 	bl	800b150 <tcp_send_empty_ack>
 800962c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8009630:	4a7b      	ldr	r2, [pc, #492]	; (8009820 <tcp_receive+0x5b0>)
 8009632:	6812      	ldr	r2, [r2, #0]
 8009634:	1ad2      	subs	r2, r2, r3
 8009636:	b292      	uxth	r2, r2
      m = m - (pcb->sa >> 3);
 8009638:	f9b4 103c 	ldrsh.w	r1, [r4, #60]	; 0x3c
 800963c:	eba2 02e1 	sub.w	r2, r2, r1, asr #3
 8009640:	b292      	uxth	r2, r2
 8009642:	b213      	sxth	r3, r2
      pcb->sa += m;
 8009644:	4411      	add	r1, r2
 8009646:	b209      	sxth	r1, r1
 8009648:	87a1      	strh	r1, [r4, #60]	; 0x3c
      if (m < 0) {
 800964a:	2b00      	cmp	r3, #0
 800964c:	db0e      	blt.n	800966c <tcp_receive+0x3fc>
      m = m - (pcb->sv >> 2);
 800964e:	f9b4 203e 	ldrsh.w	r2, [r4, #62]	; 0x3e
 8009652:	eba3 03a2 	sub.w	r3, r3, r2, asr #2
      pcb->sv += m;
 8009656:	fa12 f383 	uxtah	r3, r2, r3
 800965a:	b29b      	uxth	r3, r3
 800965c:	87e3      	strh	r3, [r4, #62]	; 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800965e:	eb03 03e1 	add.w	r3, r3, r1, asr #3
 8009662:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
      pcb->rttest = 0;
 8009666:	2300      	movs	r3, #0
 8009668:	6363      	str	r3, [r4, #52]	; 0x34
 800966a:	e7b7      	b.n	80095dc <tcp_receive+0x36c>
        m = -m;
 800966c:	4253      	negs	r3, r2
 800966e:	b21b      	sxth	r3, r3
 8009670:	e7ed      	b.n	800964e <tcp_receive+0x3de>
      struct pbuf *p = inseg.p;
 8009672:	4b6c      	ldr	r3, [pc, #432]	; (8009824 <tcp_receive+0x5b4>)
 8009674:	685d      	ldr	r5, [r3, #4]
      off = pcb->rcv_nxt - seqno;
 8009676:	4637      	mov	r7, r6
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8009678:	b195      	cbz	r5, 80096a0 <tcp_receive+0x430>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 800967a:	f647 73fe 	movw	r3, #32766	; 0x7ffe
 800967e:	429e      	cmp	r6, r3
 8009680:	dc16      	bgt.n	80096b0 <tcp_receive+0x440>
      if (inseg.p->len < off) {
 8009682:	4b68      	ldr	r3, [pc, #416]	; (8009824 <tcp_receive+0x5b4>)
 8009684:	6858      	ldr	r0, [r3, #4]
 8009686:	8943      	ldrh	r3, [r0, #10]
 8009688:	429e      	cmp	r6, r3
 800968a:	dd44      	ble.n	8009716 <tcp_receive+0x4a6>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800968c:	8903      	ldrh	r3, [r0, #8]
 800968e:	429e      	cmp	r6, r3
 8009690:	dc16      	bgt.n	80096c0 <tcp_receive+0x450>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8009692:	4b64      	ldr	r3, [pc, #400]	; (8009824 <tcp_receive+0x5b4>)
 8009694:	685b      	ldr	r3, [r3, #4]
 8009696:	891a      	ldrh	r2, [r3, #8]
 8009698:	b2b6      	uxth	r6, r6
 800969a:	1b92      	subs	r2, r2, r6
 800969c:	b292      	uxth	r2, r2
        while (p->len < off) {
 800969e:	e01c      	b.n	80096da <tcp_receive+0x46a>
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 80096a0:	4b58      	ldr	r3, [pc, #352]	; (8009804 <tcp_receive+0x594>)
 80096a2:	f240 523c 	movw	r2, #1340	; 0x53c
 80096a6:	4960      	ldr	r1, [pc, #384]	; (8009828 <tcp_receive+0x5b8>)
 80096a8:	4858      	ldr	r0, [pc, #352]	; (800980c <tcp_receive+0x59c>)
 80096aa:	f003 faa0 	bl	800cbee <iprintf>
 80096ae:	e7e4      	b.n	800967a <tcp_receive+0x40a>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 80096b0:	4b54      	ldr	r3, [pc, #336]	; (8009804 <tcp_receive+0x594>)
 80096b2:	f240 523d 	movw	r2, #1341	; 0x53d
 80096b6:	495d      	ldr	r1, [pc, #372]	; (800982c <tcp_receive+0x5bc>)
 80096b8:	4854      	ldr	r0, [pc, #336]	; (800980c <tcp_receive+0x59c>)
 80096ba:	f003 fa98 	bl	800cbee <iprintf>
 80096be:	e7e0      	b.n	8009682 <tcp_receive+0x412>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80096c0:	4b50      	ldr	r3, [pc, #320]	; (8009804 <tcp_receive+0x594>)
 80096c2:	f240 523f 	movw	r2, #1343	; 0x53f
 80096c6:	495a      	ldr	r1, [pc, #360]	; (8009830 <tcp_receive+0x5c0>)
 80096c8:	4850      	ldr	r0, [pc, #320]	; (800980c <tcp_receive+0x59c>)
 80096ca:	f003 fa90 	bl	800cbee <iprintf>
 80096ce:	e7e0      	b.n	8009692 <tcp_receive+0x422>
          off -= p->len;
 80096d0:	1aff      	subs	r7, r7, r3
          p->tot_len = new_tot_len;
 80096d2:	812a      	strh	r2, [r5, #8]
          p->len = 0;
 80096d4:	2300      	movs	r3, #0
 80096d6:	816b      	strh	r3, [r5, #10]
          p = p->next;
 80096d8:	682d      	ldr	r5, [r5, #0]
        while (p->len < off) {
 80096da:	896b      	ldrh	r3, [r5, #10]
 80096dc:	429f      	cmp	r7, r3
 80096de:	dcf7      	bgt.n	80096d0 <tcp_receive+0x460>
        if (pbuf_header(p, (s16_t)-off)) {
 80096e0:	4279      	negs	r1, r7
 80096e2:	b209      	sxth	r1, r1
 80096e4:	4628      	mov	r0, r5
 80096e6:	f7fe f925 	bl	8007934 <pbuf_header>
 80096ea:	b960      	cbnz	r0, 8009706 <tcp_receive+0x496>
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 80096ec:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80096ee:	484b      	ldr	r0, [pc, #300]	; (800981c <tcp_receive+0x5ac>)
 80096f0:	6803      	ldr	r3, [r0, #0]
 80096f2:	1a9b      	subs	r3, r3, r2
 80096f4:	494b      	ldr	r1, [pc, #300]	; (8009824 <tcp_receive+0x5b4>)
 80096f6:	890d      	ldrh	r5, [r1, #8]
 80096f8:	fa15 f383 	uxtah	r3, r5, r3
 80096fc:	810b      	strh	r3, [r1, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80096fe:	68cb      	ldr	r3, [r1, #12]
 8009700:	6002      	str	r2, [r0, #0]
 8009702:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8009704:	e782      	b.n	800960c <tcp_receive+0x39c>
          LWIP_ASSERT("pbuf_header failed", 0);
 8009706:	4b3f      	ldr	r3, [pc, #252]	; (8009804 <tcp_receive+0x594>)
 8009708:	f240 524c 	movw	r2, #1356	; 0x54c
 800970c:	4949      	ldr	r1, [pc, #292]	; (8009834 <tcp_receive+0x5c4>)
 800970e:	483f      	ldr	r0, [pc, #252]	; (800980c <tcp_receive+0x59c>)
 8009710:	f003 fa6d 	bl	800cbee <iprintf>
 8009714:	e7ea      	b.n	80096ec <tcp_receive+0x47c>
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 8009716:	4271      	negs	r1, r6
 8009718:	b209      	sxth	r1, r1
 800971a:	f7fe f90b 	bl	8007934 <pbuf_header>
 800971e:	2800      	cmp	r0, #0
 8009720:	d0e4      	beq.n	80096ec <tcp_receive+0x47c>
          LWIP_ASSERT("pbuf_header failed", 0);
 8009722:	4b38      	ldr	r3, [pc, #224]	; (8009804 <tcp_receive+0x594>)
 8009724:	f240 5251 	movw	r2, #1361	; 0x551
 8009728:	4942      	ldr	r1, [pc, #264]	; (8009834 <tcp_receive+0x5c4>)
 800972a:	4838      	ldr	r0, [pc, #224]	; (800980c <tcp_receive+0x59c>)
 800972c:	f003 fa5f 	bl	800cbee <iprintf>
 8009730:	e7dc      	b.n	80096ec <tcp_receive+0x47c>
        tcp_ack_now(pcb);
 8009732:	7ea3      	ldrb	r3, [r4, #26]
 8009734:	f043 0302 	orr.w	r3, r3, #2
 8009738:	76a3      	strb	r3, [r4, #26]
 800973a:	e767      	b.n	800960c <tcp_receive+0x39c>
      if (pcb->rcv_nxt == seqno) {
 800973c:	4291      	cmp	r1, r2
 800973e:	d008      	beq.n	8009752 <tcp_receive+0x4e2>
        tcp_send_empty_ack(pcb);
 8009740:	4620      	mov	r0, r4
 8009742:	f001 fd05 	bl	800b150 <tcp_send_empty_ack>
        if (pcb->ooseq == NULL) {
 8009746:	6f25      	ldr	r5, [r4, #112]	; 0x70
 8009748:	2d00      	cmp	r5, #0
 800974a:	f000 81ad 	beq.w	8009aa8 <tcp_receive+0x838>
 800974e:	2600      	movs	r6, #0
 8009750:	e1e4      	b.n	8009b1c <tcp_receive+0x8ac>
        tcplen = TCP_TCPLEN(&inseg);
 8009752:	4b34      	ldr	r3, [pc, #208]	; (8009824 <tcp_receive+0x5b4>)
 8009754:	891d      	ldrh	r5, [r3, #8]
 8009756:	68db      	ldr	r3, [r3, #12]
 8009758:	8998      	ldrh	r0, [r3, #12]
 800975a:	f7fc f80f 	bl	800577c <lwip_htons>
 800975e:	f010 0f03 	tst.w	r0, #3
 8009762:	d015      	beq.n	8009790 <tcp_receive+0x520>
 8009764:	2301      	movs	r3, #1
 8009766:	442b      	add	r3, r5
 8009768:	b29b      	uxth	r3, r3
 800976a:	4a2b      	ldr	r2, [pc, #172]	; (8009818 <tcp_receive+0x5a8>)
 800976c:	8013      	strh	r3, [r2, #0]
        if (tcplen > pcb->rcv_wnd) {
 800976e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8009770:	4293      	cmp	r3, r2
 8009772:	d80f      	bhi.n	8009794 <tcp_receive+0x524>
        if (pcb->ooseq != NULL) {
 8009774:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8009776:	2b00      	cmp	r3, #0
 8009778:	f000 80ed 	beq.w	8009956 <tcp_receive+0x6e6>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800977c:	4b29      	ldr	r3, [pc, #164]	; (8009824 <tcp_receive+0x5b4>)
 800977e:	68db      	ldr	r3, [r3, #12]
 8009780:	8998      	ldrh	r0, [r3, #12]
 8009782:	f7fb fffb 	bl	800577c <lwip_htons>
 8009786:	f010 0f01 	tst.w	r0, #1
 800978a:	d168      	bne.n	800985e <tcp_receive+0x5ee>
            next = pcb->ooseq;
 800978c:	6f25      	ldr	r5, [r4, #112]	; 0x70
            while (next &&
 800978e:	e077      	b.n	8009880 <tcp_receive+0x610>
        tcplen = TCP_TCPLEN(&inseg);
 8009790:	2300      	movs	r3, #0
 8009792:	e7e8      	b.n	8009766 <tcp_receive+0x4f6>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009794:	4b23      	ldr	r3, [pc, #140]	; (8009824 <tcp_receive+0x5b4>)
 8009796:	68db      	ldr	r3, [r3, #12]
 8009798:	8998      	ldrh	r0, [r3, #12]
 800979a:	f7fb ffef 	bl	800577c <lwip_htons>
 800979e:	f010 0f01 	tst.w	r0, #1
 80097a2:	d14b      	bne.n	800983c <tcp_receive+0x5cc>
          inseg.len = (u16_t)pcb->rcv_wnd;
 80097a4:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80097a6:	4b1f      	ldr	r3, [pc, #124]	; (8009824 <tcp_receive+0x5b4>)
 80097a8:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80097aa:	68db      	ldr	r3, [r3, #12]
 80097ac:	8998      	ldrh	r0, [r3, #12]
 80097ae:	f7fb ffe5 	bl	800577c <lwip_htons>
 80097b2:	f010 0f02 	tst.w	r0, #2
 80097b6:	d003      	beq.n	80097c0 <tcp_receive+0x550>
            inseg.len -= 1;
 80097b8:	4a1a      	ldr	r2, [pc, #104]	; (8009824 <tcp_receive+0x5b4>)
 80097ba:	8913      	ldrh	r3, [r2, #8]
 80097bc:	3b01      	subs	r3, #1
 80097be:	8113      	strh	r3, [r2, #8]
          pbuf_realloc(inseg.p, inseg.len);
 80097c0:	4d18      	ldr	r5, [pc, #96]	; (8009824 <tcp_receive+0x5b4>)
 80097c2:	8929      	ldrh	r1, [r5, #8]
 80097c4:	6868      	ldr	r0, [r5, #4]
 80097c6:	f7fe fa13 	bl	8007bf0 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80097ca:	892e      	ldrh	r6, [r5, #8]
 80097cc:	68eb      	ldr	r3, [r5, #12]
 80097ce:	8998      	ldrh	r0, [r3, #12]
 80097d0:	f7fb ffd4 	bl	800577c <lwip_htons>
 80097d4:	f010 0f03 	tst.w	r0, #3
 80097d8:	d03f      	beq.n	800985a <tcp_receive+0x5ea>
 80097da:	2301      	movs	r3, #1
 80097dc:	4433      	add	r3, r6
 80097de:	b29b      	uxth	r3, r3
 80097e0:	4a0d      	ldr	r2, [pc, #52]	; (8009818 <tcp_receive+0x5a8>)
 80097e2:	8013      	strh	r3, [r2, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80097e4:	4a0d      	ldr	r2, [pc, #52]	; (800981c <tcp_receive+0x5ac>)
 80097e6:	6812      	ldr	r2, [r2, #0]
 80097e8:	4413      	add	r3, r2
 80097ea:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80097ec:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 80097ee:	440a      	add	r2, r1
 80097f0:	4293      	cmp	r3, r2
 80097f2:	d0bf      	beq.n	8009774 <tcp_receive+0x504>
 80097f4:	4b03      	ldr	r3, [pc, #12]	; (8009804 <tcp_receive+0x594>)
 80097f6:	f240 527f 	movw	r2, #1407	; 0x57f
 80097fa:	490f      	ldr	r1, [pc, #60]	; (8009838 <tcp_receive+0x5c8>)
 80097fc:	4803      	ldr	r0, [pc, #12]	; (800980c <tcp_receive+0x59c>)
 80097fe:	f003 f9f6 	bl	800cbee <iprintf>
 8009802:	e7b7      	b.n	8009774 <tcp_receive+0x504>
 8009804:	0800ec34 	.word	0x0800ec34
 8009808:	0800ec84 	.word	0x0800ec84
 800980c:	0800d378 	.word	0x0800d378
 8009810:	20003f9c 	.word	0x20003f9c
 8009814:	20003f84 	.word	0x20003f84
 8009818:	20003fbe 	.word	0x20003fbe
 800981c:	20003fa8 	.word	0x20003fa8
 8009820:	20007980 	.word	0x20007980
 8009824:	20003f8c 	.word	0x20003f8c
 8009828:	0800eccc 	.word	0x0800eccc
 800982c:	0800ecdc 	.word	0x0800ecdc
 8009830:	0800ecec 	.word	0x0800ecec
 8009834:	0800ecfc 	.word	0x0800ecfc
 8009838:	0800ed10 	.word	0x0800ed10
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800983c:	4ba9      	ldr	r3, [pc, #676]	; (8009ae4 <tcp_receive+0x874>)
 800983e:	68de      	ldr	r6, [r3, #12]
 8009840:	89b0      	ldrh	r0, [r6, #12]
 8009842:	f420 557c 	bic.w	r5, r0, #16128	; 0x3f00
 8009846:	b2ad      	uxth	r5, r5
 8009848:	f7fb ff98 	bl	800577c <lwip_htons>
 800984c:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 8009850:	f7fb ff94 	bl	800577c <lwip_htons>
 8009854:	4328      	orrs	r0, r5
 8009856:	81b0      	strh	r0, [r6, #12]
 8009858:	e7a4      	b.n	80097a4 <tcp_receive+0x534>
          tcplen = TCP_TCPLEN(&inseg);
 800985a:	2300      	movs	r3, #0
 800985c:	e7be      	b.n	80097dc <tcp_receive+0x56c>
            while (pcb->ooseq != NULL) {
 800985e:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8009860:	2800      	cmp	r0, #0
 8009862:	d078      	beq.n	8009956 <tcp_receive+0x6e6>
              pcb->ooseq = pcb->ooseq->next;
 8009864:	6803      	ldr	r3, [r0, #0]
 8009866:	6723      	str	r3, [r4, #112]	; 0x70
              tcp_seg_free(old_ooseq);
 8009868:	f7fe fc94 	bl	8008194 <tcp_seg_free>
 800986c:	e7f7      	b.n	800985e <tcp_receive+0x5ee>
                tcplen = TCP_TCPLEN(&inseg);
 800986e:	2300      	movs	r3, #0
 8009870:	443b      	add	r3, r7
 8009872:	4a9d      	ldr	r2, [pc, #628]	; (8009ae8 <tcp_receive+0x878>)
 8009874:	8013      	strh	r3, [r2, #0]
              next = next->next;
 8009876:	682e      	ldr	r6, [r5, #0]
              tcp_seg_free(prev);
 8009878:	4628      	mov	r0, r5
 800987a:	f7fe fc8b 	bl	8008194 <tcp_seg_free>
              next = next->next;
 800987e:	4635      	mov	r5, r6
            while (next &&
 8009880:	b375      	cbz	r5, 80098e0 <tcp_receive+0x670>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8009882:	4b99      	ldr	r3, [pc, #612]	; (8009ae8 <tcp_receive+0x878>)
 8009884:	881b      	ldrh	r3, [r3, #0]
 8009886:	4a99      	ldr	r2, [pc, #612]	; (8009aec <tcp_receive+0x87c>)
 8009888:	6812      	ldr	r2, [r2, #0]
 800988a:	4413      	add	r3, r2
 800988c:	68e9      	ldr	r1, [r5, #12]
 800988e:	684a      	ldr	r2, [r1, #4]
 8009890:	8928      	ldrh	r0, [r5, #8]
 8009892:	4402      	add	r2, r0
 8009894:	1a9b      	subs	r3, r3, r2
            while (next &&
 8009896:	2b00      	cmp	r3, #0
 8009898:	db22      	blt.n	80098e0 <tcp_receive+0x670>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800989a:	8988      	ldrh	r0, [r1, #12]
 800989c:	f7fb ff6e 	bl	800577c <lwip_htons>
 80098a0:	f010 0f01 	tst.w	r0, #1
 80098a4:	d0e7      	beq.n	8009876 <tcp_receive+0x606>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80098a6:	4b8f      	ldr	r3, [pc, #572]	; (8009ae4 <tcp_receive+0x874>)
 80098a8:	68db      	ldr	r3, [r3, #12]
 80098aa:	8998      	ldrh	r0, [r3, #12]
 80098ac:	f7fb ff66 	bl	800577c <lwip_htons>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80098b0:	f010 0f02 	tst.w	r0, #2
 80098b4:	d1df      	bne.n	8009876 <tcp_receive+0x606>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80098b6:	4e8b      	ldr	r6, [pc, #556]	; (8009ae4 <tcp_receive+0x874>)
 80098b8:	f8d6 800c 	ldr.w	r8, [r6, #12]
 80098bc:	f8b8 700c 	ldrh.w	r7, [r8, #12]
 80098c0:	2001      	movs	r0, #1
 80098c2:	f7fb ff5b 	bl	800577c <lwip_htons>
 80098c6:	4338      	orrs	r0, r7
 80098c8:	f8a8 000c 	strh.w	r0, [r8, #12]
                tcplen = TCP_TCPLEN(&inseg);
 80098cc:	8937      	ldrh	r7, [r6, #8]
 80098ce:	68f3      	ldr	r3, [r6, #12]
 80098d0:	8998      	ldrh	r0, [r3, #12]
 80098d2:	f7fb ff53 	bl	800577c <lwip_htons>
 80098d6:	f010 0f03 	tst.w	r0, #3
 80098da:	d0c8      	beq.n	800986e <tcp_receive+0x5fe>
 80098dc:	2301      	movs	r3, #1
 80098de:	e7c7      	b.n	8009870 <tcp_receive+0x600>
            if (next &&
 80098e0:	2d00      	cmp	r5, #0
 80098e2:	d037      	beq.n	8009954 <tcp_receive+0x6e4>
                TCP_SEQ_GT(seqno + tcplen,
 80098e4:	4b81      	ldr	r3, [pc, #516]	; (8009aec <tcp_receive+0x87c>)
 80098e6:	6819      	ldr	r1, [r3, #0]
 80098e8:	4b7f      	ldr	r3, [pc, #508]	; (8009ae8 <tcp_receive+0x878>)
 80098ea:	881b      	ldrh	r3, [r3, #0]
 80098ec:	440b      	add	r3, r1
 80098ee:	68ea      	ldr	r2, [r5, #12]
 80098f0:	6852      	ldr	r2, [r2, #4]
 80098f2:	1a9b      	subs	r3, r3, r2
            if (next &&
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	dd2d      	ble.n	8009954 <tcp_receive+0x6e4>
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80098f8:	1a52      	subs	r2, r2, r1
 80098fa:	4b7a      	ldr	r3, [pc, #488]	; (8009ae4 <tcp_receive+0x874>)
 80098fc:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80098fe:	68db      	ldr	r3, [r3, #12]
 8009900:	8998      	ldrh	r0, [r3, #12]
 8009902:	f7fb ff3b 	bl	800577c <lwip_htons>
 8009906:	f010 0f02 	tst.w	r0, #2
 800990a:	d003      	beq.n	8009914 <tcp_receive+0x6a4>
                inseg.len -= 1;
 800990c:	4a75      	ldr	r2, [pc, #468]	; (8009ae4 <tcp_receive+0x874>)
 800990e:	8913      	ldrh	r3, [r2, #8]
 8009910:	3b01      	subs	r3, #1
 8009912:	8113      	strh	r3, [r2, #8]
              pbuf_realloc(inseg.p, inseg.len);
 8009914:	4e73      	ldr	r6, [pc, #460]	; (8009ae4 <tcp_receive+0x874>)
 8009916:	8931      	ldrh	r1, [r6, #8]
 8009918:	6870      	ldr	r0, [r6, #4]
 800991a:	f7fe f969 	bl	8007bf0 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800991e:	8937      	ldrh	r7, [r6, #8]
 8009920:	68f3      	ldr	r3, [r6, #12]
 8009922:	8998      	ldrh	r0, [r3, #12]
 8009924:	f7fb ff2a 	bl	800577c <lwip_htons>
 8009928:	f010 0f03 	tst.w	r0, #3
 800992c:	d03b      	beq.n	80099a6 <tcp_receive+0x736>
 800992e:	2301      	movs	r3, #1
 8009930:	443b      	add	r3, r7
 8009932:	b29b      	uxth	r3, r3
 8009934:	4a6c      	ldr	r2, [pc, #432]	; (8009ae8 <tcp_receive+0x878>)
 8009936:	8013      	strh	r3, [r2, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8009938:	4a6c      	ldr	r2, [pc, #432]	; (8009aec <tcp_receive+0x87c>)
 800993a:	6812      	ldr	r2, [r2, #0]
 800993c:	4413      	add	r3, r2
 800993e:	68ea      	ldr	r2, [r5, #12]
 8009940:	6852      	ldr	r2, [r2, #4]
 8009942:	4293      	cmp	r3, r2
 8009944:	d006      	beq.n	8009954 <tcp_receive+0x6e4>
 8009946:	4b6a      	ldr	r3, [pc, #424]	; (8009af0 <tcp_receive+0x880>)
 8009948:	f240 52af 	movw	r2, #1455	; 0x5af
 800994c:	4969      	ldr	r1, [pc, #420]	; (8009af4 <tcp_receive+0x884>)
 800994e:	486a      	ldr	r0, [pc, #424]	; (8009af8 <tcp_receive+0x888>)
 8009950:	f003 f94d 	bl	800cbee <iprintf>
            pcb->ooseq = next;
 8009954:	6725      	str	r5, [r4, #112]	; 0x70
        pcb->rcv_nxt = seqno + tcplen;
 8009956:	4b64      	ldr	r3, [pc, #400]	; (8009ae8 <tcp_receive+0x878>)
 8009958:	881a      	ldrh	r2, [r3, #0]
 800995a:	4b64      	ldr	r3, [pc, #400]	; (8009aec <tcp_receive+0x87c>)
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	4413      	add	r3, r2
 8009960:	6263      	str	r3, [r4, #36]	; 0x24
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8009962:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8009964:	429a      	cmp	r2, r3
 8009966:	d820      	bhi.n	80099aa <tcp_receive+0x73a>
        pcb->rcv_wnd -= tcplen;
 8009968:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800996a:	4a5f      	ldr	r2, [pc, #380]	; (8009ae8 <tcp_receive+0x878>)
 800996c:	8812      	ldrh	r2, [r2, #0]
 800996e:	1a9b      	subs	r3, r3, r2
 8009970:	8523      	strh	r3, [r4, #40]	; 0x28
        tcp_update_rcv_ann_wnd(pcb);
 8009972:	4620      	mov	r0, r4
 8009974:	f7fe fb9c 	bl	80080b0 <tcp_update_rcv_ann_wnd>
        if (inseg.p->tot_len > 0) {
 8009978:	4b5a      	ldr	r3, [pc, #360]	; (8009ae4 <tcp_receive+0x874>)
 800997a:	685b      	ldr	r3, [r3, #4]
 800997c:	891a      	ldrh	r2, [r3, #8]
 800997e:	b122      	cbz	r2, 800998a <tcp_receive+0x71a>
          recv_data = inseg.p;
 8009980:	4a5e      	ldr	r2, [pc, #376]	; (8009afc <tcp_receive+0x88c>)
 8009982:	6013      	str	r3, [r2, #0]
          inseg.p = NULL;
 8009984:	2200      	movs	r2, #0
 8009986:	4b57      	ldr	r3, [pc, #348]	; (8009ae4 <tcp_receive+0x874>)
 8009988:	605a      	str	r2, [r3, #4]
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800998a:	4b56      	ldr	r3, [pc, #344]	; (8009ae4 <tcp_receive+0x874>)
 800998c:	68db      	ldr	r3, [r3, #12]
 800998e:	8998      	ldrh	r0, [r3, #12]
 8009990:	f7fb fef4 	bl	800577c <lwip_htons>
 8009994:	f010 0f01 	tst.w	r0, #1
 8009998:	d035      	beq.n	8009a06 <tcp_receive+0x796>
          recv_flags |= TF_GOT_FIN;
 800999a:	4a59      	ldr	r2, [pc, #356]	; (8009b00 <tcp_receive+0x890>)
 800999c:	7813      	ldrb	r3, [r2, #0]
 800999e:	f043 0320 	orr.w	r3, r3, #32
 80099a2:	7013      	strb	r3, [r2, #0]
 80099a4:	e02f      	b.n	8009a06 <tcp_receive+0x796>
              tcplen = TCP_TCPLEN(&inseg);
 80099a6:	2300      	movs	r3, #0
 80099a8:	e7c2      	b.n	8009930 <tcp_receive+0x6c0>
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80099aa:	4b51      	ldr	r3, [pc, #324]	; (8009af0 <tcp_receive+0x880>)
 80099ac:	f240 52b9 	movw	r2, #1465	; 0x5b9
 80099b0:	4954      	ldr	r1, [pc, #336]	; (8009b04 <tcp_receive+0x894>)
 80099b2:	4851      	ldr	r0, [pc, #324]	; (8009af8 <tcp_receive+0x888>)
 80099b4:	f003 f91b 	bl	800cbee <iprintf>
 80099b8:	e7d6      	b.n	8009968 <tcp_receive+0x6f8>
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80099ba:	2300      	movs	r3, #0
 80099bc:	e035      	b.n	8009a2a <tcp_receive+0x7ba>
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80099be:	2300      	movs	r3, #0
 80099c0:	e041      	b.n	8009a46 <tcp_receive+0x7d6>
 80099c2:	4b4b      	ldr	r3, [pc, #300]	; (8009af0 <tcp_receive+0x880>)
 80099c4:	f240 52de 	movw	r2, #1502	; 0x5de
 80099c8:	494f      	ldr	r1, [pc, #316]	; (8009b08 <tcp_receive+0x898>)
 80099ca:	484b      	ldr	r0, [pc, #300]	; (8009af8 <tcp_receive+0x888>)
 80099cc:	f003 f90f 	bl	800cbee <iprintf>
 80099d0:	e03c      	b.n	8009a4c <tcp_receive+0x7dc>
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80099d2:	2300      	movs	r3, #0
 80099d4:	e043      	b.n	8009a5e <tcp_receive+0x7ee>
              recv_data = cseg->p;
 80099d6:	4b49      	ldr	r3, [pc, #292]	; (8009afc <tcp_receive+0x88c>)
 80099d8:	6019      	str	r1, [r3, #0]
            cseg->p = NULL;
 80099da:	2300      	movs	r3, #0
 80099dc:	606b      	str	r3, [r5, #4]
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80099de:	68eb      	ldr	r3, [r5, #12]
 80099e0:	8998      	ldrh	r0, [r3, #12]
 80099e2:	f7fb fecb 	bl	800577c <lwip_htons>
 80099e6:	f010 0f01 	tst.w	r0, #1
 80099ea:	d007      	beq.n	80099fc <tcp_receive+0x78c>
            recv_flags |= TF_GOT_FIN;
 80099ec:	4a44      	ldr	r2, [pc, #272]	; (8009b00 <tcp_receive+0x890>)
 80099ee:	7813      	ldrb	r3, [r2, #0]
 80099f0:	f043 0320 	orr.w	r3, r3, #32
 80099f4:	7013      	strb	r3, [r2, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80099f6:	7d23      	ldrb	r3, [r4, #20]
 80099f8:	2b04      	cmp	r3, #4
 80099fa:	d042      	beq.n	8009a82 <tcp_receive+0x812>
          pcb->ooseq = cseg->next;
 80099fc:	682b      	ldr	r3, [r5, #0]
 80099fe:	6723      	str	r3, [r4, #112]	; 0x70
          tcp_seg_free(cseg);
 8009a00:	4628      	mov	r0, r5
 8009a02:	f7fe fbc7 	bl	8008194 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8009a06:	6f25      	ldr	r5, [r4, #112]	; 0x70
 8009a08:	2d00      	cmp	r5, #0
 8009a0a:	d03d      	beq.n	8009a88 <tcp_receive+0x818>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8009a0c:	68ea      	ldr	r2, [r5, #12]
 8009a0e:	6853      	ldr	r3, [r2, #4]
 8009a10:	6a61      	ldr	r1, [r4, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8009a12:	428b      	cmp	r3, r1
 8009a14:	d138      	bne.n	8009a88 <tcp_receive+0x818>
          seqno = pcb->ooseq->tcphdr->seqno;
 8009a16:	4935      	ldr	r1, [pc, #212]	; (8009aec <tcp_receive+0x87c>)
 8009a18:	600b      	str	r3, [r1, #0]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8009a1a:	892e      	ldrh	r6, [r5, #8]
 8009a1c:	8990      	ldrh	r0, [r2, #12]
 8009a1e:	f7fb fead 	bl	800577c <lwip_htons>
 8009a22:	f010 0f03 	tst.w	r0, #3
 8009a26:	d0c8      	beq.n	80099ba <tcp_receive+0x74a>
 8009a28:	2301      	movs	r3, #1
 8009a2a:	199a      	adds	r2, r3, r6
 8009a2c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a2e:	4413      	add	r3, r2
 8009a30:	6263      	str	r3, [r4, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8009a32:	8d26      	ldrh	r6, [r4, #40]	; 0x28
 8009a34:	892f      	ldrh	r7, [r5, #8]
 8009a36:	68eb      	ldr	r3, [r5, #12]
 8009a38:	8998      	ldrh	r0, [r3, #12]
 8009a3a:	f7fb fe9f 	bl	800577c <lwip_htons>
 8009a3e:	f010 0f03 	tst.w	r0, #3
 8009a42:	d0bc      	beq.n	80099be <tcp_receive+0x74e>
 8009a44:	2301      	movs	r3, #1
 8009a46:	443b      	add	r3, r7
 8009a48:	429e      	cmp	r6, r3
 8009a4a:	d3ba      	bcc.n	80099c2 <tcp_receive+0x752>
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8009a4c:	892e      	ldrh	r6, [r5, #8]
 8009a4e:	68eb      	ldr	r3, [r5, #12]
 8009a50:	8998      	ldrh	r0, [r3, #12]
 8009a52:	f7fb fe93 	bl	800577c <lwip_htons>
 8009a56:	f010 0f03 	tst.w	r0, #3
 8009a5a:	d0ba      	beq.n	80099d2 <tcp_receive+0x762>
 8009a5c:	2301      	movs	r3, #1
 8009a5e:	199a      	adds	r2, r3, r6
 8009a60:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8009a62:	1a9b      	subs	r3, r3, r2
 8009a64:	8523      	strh	r3, [r4, #40]	; 0x28
          tcp_update_rcv_ann_wnd(pcb);
 8009a66:	4620      	mov	r0, r4
 8009a68:	f7fe fb22 	bl	80080b0 <tcp_update_rcv_ann_wnd>
          if (cseg->p->tot_len > 0) {
 8009a6c:	6869      	ldr	r1, [r5, #4]
 8009a6e:	890b      	ldrh	r3, [r1, #8]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d0b4      	beq.n	80099de <tcp_receive+0x76e>
            if (recv_data) {
 8009a74:	4b21      	ldr	r3, [pc, #132]	; (8009afc <tcp_receive+0x88c>)
 8009a76:	6818      	ldr	r0, [r3, #0]
 8009a78:	2800      	cmp	r0, #0
 8009a7a:	d0ac      	beq.n	80099d6 <tcp_receive+0x766>
              pbuf_cat(recv_data, cseg->p);
 8009a7c:	f7fe f950 	bl	8007d20 <pbuf_cat>
 8009a80:	e7ab      	b.n	80099da <tcp_receive+0x76a>
              pcb->state = CLOSE_WAIT;
 8009a82:	2307      	movs	r3, #7
 8009a84:	7523      	strb	r3, [r4, #20]
 8009a86:	e7b9      	b.n	80099fc <tcp_receive+0x78c>
        tcp_ack(pcb);
 8009a88:	7ea3      	ldrb	r3, [r4, #26]
 8009a8a:	f013 0f01 	tst.w	r3, #1
 8009a8e:	d006      	beq.n	8009a9e <tcp_receive+0x82e>
 8009a90:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8009a94:	f043 0302 	orr.w	r3, r3, #2
 8009a98:	76a3      	strb	r3, [r4, #26]
 8009a9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a9e:	f043 0301 	orr.w	r3, r3, #1
 8009aa2:	76a3      	strb	r3, [r4, #26]
 8009aa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          pcb->ooseq = tcp_seg_copy(&inseg);
 8009aa8:	480e      	ldr	r0, [pc, #56]	; (8009ae4 <tcp_receive+0x874>)
 8009aaa:	f7fe fb8a 	bl	80081c2 <tcp_seg_copy>
 8009aae:	6720      	str	r0, [r4, #112]	; 0x70
 8009ab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
              if (inseg.len > next->len) {
 8009ab4:	4b0b      	ldr	r3, [pc, #44]	; (8009ae4 <tcp_receive+0x874>)
 8009ab6:	891a      	ldrh	r2, [r3, #8]
 8009ab8:	892b      	ldrh	r3, [r5, #8]
 8009aba:	429a      	cmp	r2, r3
 8009abc:	f240 80ee 	bls.w	8009c9c <tcp_receive+0xa2c>
                cseg = tcp_seg_copy(&inseg);
 8009ac0:	4808      	ldr	r0, [pc, #32]	; (8009ae4 <tcp_receive+0x874>)
 8009ac2:	f7fe fb7e 	bl	80081c2 <tcp_seg_copy>
                if (cseg != NULL) {
 8009ac6:	4603      	mov	r3, r0
 8009ac8:	2800      	cmp	r0, #0
 8009aca:	f000 80e7 	beq.w	8009c9c <tcp_receive+0xa2c>
                  if (prev != NULL) {
 8009ace:	b136      	cbz	r6, 8009ade <tcp_receive+0x86e>
                    prev->next = cseg;
 8009ad0:	6030      	str	r0, [r6, #0]
                  tcp_oos_insert_segment(cseg, next);
 8009ad2:	4629      	mov	r1, r5
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	f7ff fb89 	bl	80091ec <tcp_oos_insert_segment>
 8009ada:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                    pcb->ooseq = cseg;
 8009ade:	6720      	str	r0, [r4, #112]	; 0x70
 8009ae0:	e7f7      	b.n	8009ad2 <tcp_receive+0x862>
 8009ae2:	bf00      	nop
 8009ae4:	20003f8c 	.word	0x20003f8c
 8009ae8:	20003fbe 	.word	0x20003fbe
 8009aec:	20003fa8 	.word	0x20003fa8
 8009af0:	0800ec34 	.word	0x0800ec34
 8009af4:	0800ed48 	.word	0x0800ed48
 8009af8:	0800d378 	.word	0x0800d378
 8009afc:	20003fa0 	.word	0x20003fa0
 8009b00:	20003fa4 	.word	0x20003fa4
 8009b04:	0800ed84 	.word	0x0800ed84
 8009b08:	0800eda4 	.word	0x0800eda4
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8009b0c:	1a5a      	subs	r2, r3, r1
 8009b0e:	2a00      	cmp	r2, #0
 8009b10:	db35      	blt.n	8009b7e <tcp_receive+0x90e>
              if (next->next == NULL &&
 8009b12:	682a      	ldr	r2, [r5, #0]
 8009b14:	462e      	mov	r6, r5
 8009b16:	2a00      	cmp	r2, #0
 8009b18:	d03d      	beq.n	8009b96 <tcp_receive+0x926>
 8009b1a:	4615      	mov	r5, r2
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8009b1c:	2d00      	cmp	r5, #0
 8009b1e:	f000 80ab 	beq.w	8009c78 <tcp_receive+0xa08>
            if (seqno == next->tcphdr->seqno) {
 8009b22:	68e8      	ldr	r0, [r5, #12]
 8009b24:	6841      	ldr	r1, [r0, #4]
 8009b26:	4b5e      	ldr	r3, [pc, #376]	; (8009ca0 <tcp_receive+0xa30>)
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	4299      	cmp	r1, r3
 8009b2c:	d0c2      	beq.n	8009ab4 <tcp_receive+0x844>
              if (prev == NULL) {
 8009b2e:	2e00      	cmp	r6, #0
 8009b30:	d0ec      	beq.n	8009b0c <tcp_receive+0x89c>
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 8009b32:	68f2      	ldr	r2, [r6, #12]
 8009b34:	6852      	ldr	r2, [r2, #4]
 8009b36:	1a9a      	subs	r2, r3, r2
 8009b38:	2a01      	cmp	r2, #1
 8009b3a:	d4ea      	bmi.n	8009b12 <tcp_receive+0x8a2>
 8009b3c:	1a5a      	subs	r2, r3, r1
 8009b3e:	3201      	adds	r2, #1
 8009b40:	2a00      	cmp	r2, #0
 8009b42:	dce6      	bgt.n	8009b12 <tcp_receive+0x8a2>
                  cseg = tcp_seg_copy(&inseg);
 8009b44:	4857      	ldr	r0, [pc, #348]	; (8009ca4 <tcp_receive+0xa34>)
 8009b46:	f7fe fb3c 	bl	80081c2 <tcp_seg_copy>
                  if (cseg != NULL) {
 8009b4a:	4604      	mov	r4, r0
 8009b4c:	2800      	cmp	r0, #0
 8009b4e:	f000 80a5 	beq.w	8009c9c <tcp_receive+0xa2c>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8009b52:	68f3      	ldr	r3, [r6, #12]
 8009b54:	6859      	ldr	r1, [r3, #4]
 8009b56:	8932      	ldrh	r2, [r6, #8]
 8009b58:	440a      	add	r2, r1
 8009b5a:	4b51      	ldr	r3, [pc, #324]	; (8009ca0 <tcp_receive+0xa30>)
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	1ad2      	subs	r2, r2, r3
 8009b60:	2a00      	cmp	r2, #0
 8009b62:	dd05      	ble.n	8009b70 <tcp_receive+0x900>
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8009b64:	1a5b      	subs	r3, r3, r1
 8009b66:	b299      	uxth	r1, r3
 8009b68:	8131      	strh	r1, [r6, #8]
                      pbuf_realloc(prev->p, prev->len);
 8009b6a:	6870      	ldr	r0, [r6, #4]
 8009b6c:	f7fe f840 	bl	8007bf0 <pbuf_realloc>
                    prev->next = cseg;
 8009b70:	6034      	str	r4, [r6, #0]
                    tcp_oos_insert_segment(cseg, next);
 8009b72:	4629      	mov	r1, r5
 8009b74:	4620      	mov	r0, r4
 8009b76:	f7ff fb39 	bl	80091ec <tcp_oos_insert_segment>
 8009b7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                  cseg = tcp_seg_copy(&inseg);
 8009b7e:	4849      	ldr	r0, [pc, #292]	; (8009ca4 <tcp_receive+0xa34>)
 8009b80:	f7fe fb1f 	bl	80081c2 <tcp_seg_copy>
                  if (cseg != NULL) {
 8009b84:	2800      	cmp	r0, #0
 8009b86:	f000 8089 	beq.w	8009c9c <tcp_receive+0xa2c>
                    pcb->ooseq = cseg;
 8009b8a:	6720      	str	r0, [r4, #112]	; 0x70
                    tcp_oos_insert_segment(cseg, next);
 8009b8c:	4629      	mov	r1, r5
 8009b8e:	f7ff fb2d 	bl	80091ec <tcp_oos_insert_segment>
 8009b92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8009b96:	1a5b      	subs	r3, r3, r1
              if (next->next == NULL &&
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	dc01      	bgt.n	8009ba0 <tcp_receive+0x930>
 8009b9c:	4615      	mov	r5, r2
 8009b9e:	e7bd      	b.n	8009b1c <tcp_receive+0x8ac>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8009ba0:	8980      	ldrh	r0, [r0, #12]
 8009ba2:	f7fb fdeb 	bl	800577c <lwip_htons>
 8009ba6:	f010 0f01 	tst.w	r0, #1
 8009baa:	d177      	bne.n	8009c9c <tcp_receive+0xa2c>
                next->next = tcp_seg_copy(&inseg);
 8009bac:	483d      	ldr	r0, [pc, #244]	; (8009ca4 <tcp_receive+0xa34>)
 8009bae:	f7fe fb08 	bl	80081c2 <tcp_seg_copy>
 8009bb2:	6028      	str	r0, [r5, #0]
                if (next->next != NULL) {
 8009bb4:	2800      	cmp	r0, #0
 8009bb6:	d071      	beq.n	8009c9c <tcp_receive+0xa2c>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8009bb8:	68eb      	ldr	r3, [r5, #12]
 8009bba:	6859      	ldr	r1, [r3, #4]
 8009bbc:	892a      	ldrh	r2, [r5, #8]
 8009bbe:	440a      	add	r2, r1
 8009bc0:	4b37      	ldr	r3, [pc, #220]	; (8009ca0 <tcp_receive+0xa30>)
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	1ad2      	subs	r2, r2, r3
 8009bc6:	2a00      	cmp	r2, #0
 8009bc8:	dd05      	ble.n	8009bd6 <tcp_receive+0x966>
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8009bca:	1a5b      	subs	r3, r3, r1
 8009bcc:	b299      	uxth	r1, r3
 8009bce:	8129      	strh	r1, [r5, #8]
                    pbuf_realloc(next->p, next->len);
 8009bd0:	6868      	ldr	r0, [r5, #4]
 8009bd2:	f7fe f80d 	bl	8007bf0 <pbuf_realloc>
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8009bd6:	4b34      	ldr	r3, [pc, #208]	; (8009ca8 <tcp_receive+0xa38>)
 8009bd8:	881b      	ldrh	r3, [r3, #0]
 8009bda:	4a31      	ldr	r2, [pc, #196]	; (8009ca0 <tcp_receive+0xa30>)
 8009bdc:	6812      	ldr	r2, [r2, #0]
 8009bde:	4413      	add	r3, r2
 8009be0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8009be2:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 8009be4:	440a      	add	r2, r1
 8009be6:	1a9b      	subs	r3, r3, r2
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	dd57      	ble.n	8009c9c <tcp_receive+0xa2c>
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8009bec:	682b      	ldr	r3, [r5, #0]
 8009bee:	68db      	ldr	r3, [r3, #12]
 8009bf0:	8998      	ldrh	r0, [r3, #12]
 8009bf2:	f7fb fdc3 	bl	800577c <lwip_htons>
 8009bf6:	f010 0f01 	tst.w	r0, #1
 8009bfa:	d12c      	bne.n	8009c56 <tcp_receive+0x9e6>
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8009bfc:	682a      	ldr	r2, [r5, #0]
 8009bfe:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009c00:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8009c02:	440b      	add	r3, r1
 8009c04:	b29b      	uxth	r3, r3
 8009c06:	4926      	ldr	r1, [pc, #152]	; (8009ca0 <tcp_receive+0xa30>)
 8009c08:	6809      	ldr	r1, [r1, #0]
 8009c0a:	1a5b      	subs	r3, r3, r1
 8009c0c:	8113      	strh	r3, [r2, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8009c0e:	682b      	ldr	r3, [r5, #0]
 8009c10:	8919      	ldrh	r1, [r3, #8]
 8009c12:	6858      	ldr	r0, [r3, #4]
 8009c14:	f7fd ffec 	bl	8007bf0 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8009c18:	682b      	ldr	r3, [r5, #0]
 8009c1a:	891d      	ldrh	r5, [r3, #8]
 8009c1c:	68db      	ldr	r3, [r3, #12]
 8009c1e:	8998      	ldrh	r0, [r3, #12]
 8009c20:	f7fb fdac 	bl	800577c <lwip_htons>
 8009c24:	f010 0f03 	tst.w	r0, #3
 8009c28:	d024      	beq.n	8009c74 <tcp_receive+0xa04>
 8009c2a:	2301      	movs	r3, #1
 8009c2c:	442b      	add	r3, r5
 8009c2e:	b29b      	uxth	r3, r3
 8009c30:	4a1d      	ldr	r2, [pc, #116]	; (8009ca8 <tcp_receive+0xa38>)
 8009c32:	8013      	strh	r3, [r2, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8009c34:	4a1a      	ldr	r2, [pc, #104]	; (8009ca0 <tcp_receive+0xa30>)
 8009c36:	6812      	ldr	r2, [r2, #0]
 8009c38:	4413      	add	r3, r2
 8009c3a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8009c3c:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 8009c3e:	440a      	add	r2, r1
 8009c40:	4293      	cmp	r3, r2
 8009c42:	d02b      	beq.n	8009c9c <tcp_receive+0xa2c>
 8009c44:	4b19      	ldr	r3, [pc, #100]	; (8009cac <tcp_receive+0xa3c>)
 8009c46:	f240 627b 	movw	r2, #1659	; 0x67b
 8009c4a:	4919      	ldr	r1, [pc, #100]	; (8009cb0 <tcp_receive+0xa40>)
 8009c4c:	4819      	ldr	r0, [pc, #100]	; (8009cb4 <tcp_receive+0xa44>)
 8009c4e:	f002 ffce 	bl	800cbee <iprintf>
 8009c52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8009c56:	682b      	ldr	r3, [r5, #0]
 8009c58:	68df      	ldr	r7, [r3, #12]
 8009c5a:	89b8      	ldrh	r0, [r7, #12]
 8009c5c:	f420 567c 	bic.w	r6, r0, #16128	; 0x3f00
 8009c60:	b2b6      	uxth	r6, r6
 8009c62:	f7fb fd8b 	bl	800577c <lwip_htons>
 8009c66:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 8009c6a:	f7fb fd87 	bl	800577c <lwip_htons>
 8009c6e:	4330      	orrs	r0, r6
 8009c70:	81b8      	strh	r0, [r7, #12]
 8009c72:	e7c3      	b.n	8009bfc <tcp_receive+0x98c>
                    tcplen = TCP_TCPLEN(next->next);
 8009c74:	2300      	movs	r3, #0
 8009c76:	e7d9      	b.n	8009c2c <tcp_receive+0x9bc>
 8009c78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8009c7c:	4b08      	ldr	r3, [pc, #32]	; (8009ca0 <tcp_receive+0xa30>)
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8009c82:	1a99      	subs	r1, r3, r2
 8009c84:	2900      	cmp	r1, #0
 8009c86:	db05      	blt.n	8009c94 <tcp_receive+0xa24>
 8009c88:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 8009c8a:	440a      	add	r2, r1
 8009c8c:	1a9b      	subs	r3, r3, r2
 8009c8e:	3301      	adds	r3, #1
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	dd03      	ble.n	8009c9c <tcp_receive+0xa2c>
      tcp_ack_now(pcb);
 8009c94:	7ea3      	ldrb	r3, [r4, #26]
 8009c96:	f043 0302 	orr.w	r3, r3, #2
 8009c9a:	76a3      	strb	r3, [r4, #26]
 8009c9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ca0:	20003fa8 	.word	0x20003fa8
 8009ca4:	20003f8c 	.word	0x20003f8c
 8009ca8:	20003fbe 	.word	0x20003fbe
 8009cac:	0800ec34 	.word	0x0800ec34
 8009cb0:	0800ed10 	.word	0x0800ed10
 8009cb4:	0800d378 	.word	0x0800d378

08009cb8 <tcp_process>:
{
 8009cb8:	b570      	push	{r4, r5, r6, lr}
 8009cba:	b082      	sub	sp, #8
 8009cbc:	4604      	mov	r4, r0
  if (flags & TCP_RST) {
 8009cbe:	4ba3      	ldr	r3, [pc, #652]	; (8009f4c <tcp_process+0x294>)
 8009cc0:	781b      	ldrb	r3, [r3, #0]
 8009cc2:	f013 0f04 	tst.w	r3, #4
 8009cc6:	d03d      	beq.n	8009d44 <tcp_process+0x8c>
    if (pcb->state == SYN_SENT) {
 8009cc8:	7d01      	ldrb	r1, [r0, #20]
 8009cca:	2902      	cmp	r1, #2
 8009ccc:	d012      	beq.n	8009cf4 <tcp_process+0x3c>
      if (seqno == pcb->rcv_nxt) {
 8009cce:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8009cd0:	4b9f      	ldr	r3, [pc, #636]	; (8009f50 <tcp_process+0x298>)
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	429a      	cmp	r2, r3
 8009cd6:	d01c      	beq.n	8009d12 <tcp_process+0x5a>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8009cd8:	1a98      	subs	r0, r3, r2
 8009cda:	2800      	cmp	r0, #0
 8009cdc:	db1b      	blt.n	8009d16 <tcp_process+0x5e>
 8009cde:	8d20      	ldrh	r0, [r4, #40]	; 0x28
 8009ce0:	4402      	add	r2, r0
 8009ce2:	1a9b      	subs	r3, r3, r2
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	dd0c      	ble.n	8009d02 <tcp_process+0x4a>
  u8_t acceptable = 0;
 8009ce8:	2300      	movs	r3, #0
    if (acceptable) {
 8009cea:	b9b3      	cbnz	r3, 8009d1a <tcp_process+0x62>
      return ERR_OK;
 8009cec:	2500      	movs	r5, #0
}
 8009cee:	4628      	mov	r0, r5
 8009cf0:	b002      	add	sp, #8
 8009cf2:	bd70      	pop	{r4, r5, r6, pc}
      if (ackno == pcb->snd_nxt) {
 8009cf4:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8009cf6:	4b97      	ldr	r3, [pc, #604]	; (8009f54 <tcp_process+0x29c>)
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	429a      	cmp	r2, r3
 8009cfc:	d007      	beq.n	8009d0e <tcp_process+0x56>
  u8_t acceptable = 0;
 8009cfe:	2300      	movs	r3, #0
 8009d00:	e7f3      	b.n	8009cea <tcp_process+0x32>
        tcp_ack_now(pcb);
 8009d02:	7ea3      	ldrb	r3, [r4, #26]
 8009d04:	f043 0302 	orr.w	r3, r3, #2
 8009d08:	76a3      	strb	r3, [r4, #26]
  u8_t acceptable = 0;
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	e7ed      	b.n	8009cea <tcp_process+0x32>
        acceptable = 1;
 8009d0e:	2301      	movs	r3, #1
 8009d10:	e7eb      	b.n	8009cea <tcp_process+0x32>
        acceptable = 1;
 8009d12:	2301      	movs	r3, #1
 8009d14:	e7e9      	b.n	8009cea <tcp_process+0x32>
  u8_t acceptable = 0;
 8009d16:	2300      	movs	r3, #0
 8009d18:	e7e7      	b.n	8009cea <tcp_process+0x32>
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8009d1a:	b159      	cbz	r1, 8009d34 <tcp_process+0x7c>
      recv_flags |= TF_RESET;
 8009d1c:	4a8e      	ldr	r2, [pc, #568]	; (8009f58 <tcp_process+0x2a0>)
 8009d1e:	7813      	ldrb	r3, [r2, #0]
 8009d20:	f043 0308 	orr.w	r3, r3, #8
 8009d24:	7013      	strb	r3, [r2, #0]
      pcb->flags &= ~TF_ACK_DELAY;
 8009d26:	7ea3      	ldrb	r3, [r4, #26]
 8009d28:	f023 0301 	bic.w	r3, r3, #1
 8009d2c:	76a3      	strb	r3, [r4, #26]
      return ERR_RST;
 8009d2e:	f06f 050d 	mvn.w	r5, #13
 8009d32:	e7dc      	b.n	8009cee <tcp_process+0x36>
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8009d34:	4b89      	ldr	r3, [pc, #548]	; (8009f5c <tcp_process+0x2a4>)
 8009d36:	f240 22e7 	movw	r2, #743	; 0x2e7
 8009d3a:	4989      	ldr	r1, [pc, #548]	; (8009f60 <tcp_process+0x2a8>)
 8009d3c:	4889      	ldr	r0, [pc, #548]	; (8009f64 <tcp_process+0x2ac>)
 8009d3e:	f002 ff56 	bl	800cbee <iprintf>
 8009d42:	e7eb      	b.n	8009d1c <tcp_process+0x64>
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8009d44:	f013 0f02 	tst.w	r3, #2
 8009d48:	d00a      	beq.n	8009d60 <tcp_process+0xa8>
 8009d4a:	7d03      	ldrb	r3, [r0, #20]
 8009d4c:	3b02      	subs	r3, #2
 8009d4e:	b2db      	uxtb	r3, r3
 8009d50:	2b01      	cmp	r3, #1
 8009d52:	d905      	bls.n	8009d60 <tcp_process+0xa8>
    tcp_ack_now(pcb);
 8009d54:	7e83      	ldrb	r3, [r0, #26]
 8009d56:	f043 0302 	orr.w	r3, r3, #2
 8009d5a:	7683      	strb	r3, [r0, #26]
    return ERR_OK;
 8009d5c:	2500      	movs	r5, #0
 8009d5e:	e7c6      	b.n	8009cee <tcp_process+0x36>
  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8009d60:	7ea3      	ldrb	r3, [r4, #26]
 8009d62:	f013 0f10 	tst.w	r3, #16
 8009d66:	d102      	bne.n	8009d6e <tcp_process+0xb6>
    pcb->tmr = tcp_ticks;
 8009d68:	4b7f      	ldr	r3, [pc, #508]	; (8009f68 <tcp_process+0x2b0>)
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	6223      	str	r3, [r4, #32]
  pcb->keep_cnt_sent = 0;
 8009d6e:	2300      	movs	r3, #0
 8009d70:	f884 3096 	strb.w	r3, [r4, #150]	; 0x96
  tcp_parseopt(pcb);
 8009d74:	4620      	mov	r0, r4
 8009d76:	f7ff f8ff 	bl	8008f78 <tcp_parseopt>
  switch (pcb->state) {
 8009d7a:	7d23      	ldrb	r3, [r4, #20]
 8009d7c:	3b02      	subs	r3, #2
 8009d7e:	2b07      	cmp	r3, #7
 8009d80:	f200 8219 	bhi.w	800a1b6 <tcp_process+0x4fe>
 8009d84:	e8df f013 	tbh	[pc, r3, lsl #1]
 8009d88:	009b0008 	.word	0x009b0008
 8009d8c:	01460135 	.word	0x01460135
 8009d90:	0135019c 	.word	0x0135019c
 8009d94:	01fd01ca 	.word	0x01fd01ca
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8009d98:	4b6c      	ldr	r3, [pc, #432]	; (8009f4c <tcp_process+0x294>)
 8009d9a:	781b      	ldrb	r3, [r3, #0]
 8009d9c:	f003 0212 	and.w	r2, r3, #18
 8009da0:	2a12      	cmp	r2, #18
 8009da2:	d004      	beq.n	8009dae <tcp_process+0xf6>
    else if (flags & TCP_ACK) {
 8009da4:	f013 0f10 	tst.w	r3, #16
 8009da8:	d16b      	bne.n	8009e82 <tcp_process+0x1ca>
  return ERR_OK;
 8009daa:	2500      	movs	r5, #0
 8009dac:	e79f      	b.n	8009cee <tcp_process+0x36>
        && (ackno == pcb->lastack + 1)) {
 8009dae:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8009db0:	3201      	adds	r2, #1
 8009db2:	4968      	ldr	r1, [pc, #416]	; (8009f54 <tcp_process+0x29c>)
 8009db4:	6809      	ldr	r1, [r1, #0]
 8009db6:	428a      	cmp	r2, r1
 8009db8:	d1f4      	bne.n	8009da4 <tcp_process+0xec>
      pcb->rcv_nxt = seqno + 1;
 8009dba:	4b65      	ldr	r3, [pc, #404]	; (8009f50 <tcp_process+0x298>)
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	1c5a      	adds	r2, r3, #1
 8009dc0:	6262      	str	r2, [r4, #36]	; 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8009dc2:	62e2      	str	r2, [r4, #44]	; 0x2c
      pcb->lastack = ackno;
 8009dc4:	6461      	str	r1, [r4, #68]	; 0x44
      pcb->snd_wnd = tcphdr->wnd;
 8009dc6:	4a69      	ldr	r2, [pc, #420]	; (8009f6c <tcp_process+0x2b4>)
 8009dc8:	6812      	ldr	r2, [r2, #0]
 8009dca:	89d2      	ldrh	r2, [r2, #14]
 8009dcc:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 8009dd0:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8009dd4:	3b01      	subs	r3, #1
 8009dd6:	6523      	str	r3, [r4, #80]	; 0x50
      pcb->state = ESTABLISHED;
 8009dd8:	2304      	movs	r3, #4
 8009dda:	7523      	strb	r3, [r4, #20]
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8009ddc:	18e1      	adds	r1, r4, r3
 8009dde:	8e60      	ldrh	r0, [r4, #50]	; 0x32
 8009de0:	f7fe ffd8 	bl	8008d94 <tcp_eff_send_mss_impl>
 8009de4:	8660      	strh	r0, [r4, #50]	; 0x32
      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8009de6:	0043      	lsls	r3, r0, #1
 8009de8:	f241 121c 	movw	r2, #4380	; 0x111c
 8009dec:	4293      	cmp	r3, r2
 8009dee:	bf38      	it	cc
 8009df0:	4613      	movcc	r3, r2
 8009df2:	0080      	lsls	r0, r0, #2
 8009df4:	4283      	cmp	r3, r0
 8009df6:	bf28      	it	cs
 8009df8:	4603      	movcs	r3, r0
 8009dfa:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8009dfe:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8009e02:	b31b      	cbz	r3, 8009e4c <tcp_process+0x194>
      --pcb->snd_queuelen;
 8009e04:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8009e08:	3b01      	subs	r3, #1
 8009e0a:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
      rseg = pcb->unacked;
 8009e0e:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
      if (rseg == NULL) {
 8009e10:	b325      	cbz	r5, 8009e5c <tcp_process+0x1a4>
        pcb->unacked = rseg->next;
 8009e12:	682b      	ldr	r3, [r5, #0]
 8009e14:	66e3      	str	r3, [r4, #108]	; 0x6c
      tcp_seg_free(rseg);
 8009e16:	4628      	mov	r0, r5
 8009e18:	f7fe f9bc 	bl	8008194 <tcp_seg_free>
      if (pcb->unacked == NULL) {
 8009e1c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8009e1e:	b353      	cbz	r3, 8009e76 <tcp_process+0x1be>
        pcb->rtime = 0;
 8009e20:	2300      	movs	r3, #0
 8009e22:	8623      	strh	r3, [r4, #48]	; 0x30
        pcb->nrtx = 0;
 8009e24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8009e28:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8009e2c:	b33b      	cbz	r3, 8009e7e <tcp_process+0x1c6>
 8009e2e:	2200      	movs	r2, #0
 8009e30:	4621      	mov	r1, r4
 8009e32:	6920      	ldr	r0, [r4, #16]
 8009e34:	4798      	blx	r3
 8009e36:	4605      	mov	r5, r0
      if (err == ERR_ABRT) {
 8009e38:	f115 0f0d 	cmn.w	r5, #13
 8009e3c:	f43f af57 	beq.w	8009cee <tcp_process+0x36>
      tcp_ack_now(pcb);
 8009e40:	7ea3      	ldrb	r3, [r4, #26]
 8009e42:	f043 0302 	orr.w	r3, r3, #2
 8009e46:	76a3      	strb	r3, [r4, #26]
  return ERR_OK;
 8009e48:	2500      	movs	r5, #0
      tcp_ack_now(pcb);
 8009e4a:	e750      	b.n	8009cee <tcp_process+0x36>
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8009e4c:	4b43      	ldr	r3, [pc, #268]	; (8009f5c <tcp_process+0x2a4>)
 8009e4e:	f240 321a 	movw	r2, #794	; 0x31a
 8009e52:	4947      	ldr	r1, [pc, #284]	; (8009f70 <tcp_process+0x2b8>)
 8009e54:	4843      	ldr	r0, [pc, #268]	; (8009f64 <tcp_process+0x2ac>)
 8009e56:	f002 feca 	bl	800cbee <iprintf>
 8009e5a:	e7d3      	b.n	8009e04 <tcp_process+0x14c>
        rseg = pcb->unsent;
 8009e5c:	6ea5      	ldr	r5, [r4, #104]	; 0x68
        LWIP_ASSERT("no segment to free", rseg != NULL);
 8009e5e:	b115      	cbz	r5, 8009e66 <tcp_process+0x1ae>
        pcb->unsent = rseg->next;
 8009e60:	682b      	ldr	r3, [r5, #0]
 8009e62:	66a3      	str	r3, [r4, #104]	; 0x68
 8009e64:	e7d7      	b.n	8009e16 <tcp_process+0x15e>
        LWIP_ASSERT("no segment to free", rseg != NULL);
 8009e66:	4b3d      	ldr	r3, [pc, #244]	; (8009f5c <tcp_process+0x2a4>)
 8009e68:	f240 3222 	movw	r2, #802	; 0x322
 8009e6c:	4941      	ldr	r1, [pc, #260]	; (8009f74 <tcp_process+0x2bc>)
 8009e6e:	483d      	ldr	r0, [pc, #244]	; (8009f64 <tcp_process+0x2ac>)
 8009e70:	f002 febd 	bl	800cbee <iprintf>
 8009e74:	e7f4      	b.n	8009e60 <tcp_process+0x1a8>
        pcb->rtime = -1;
 8009e76:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009e7a:	8623      	strh	r3, [r4, #48]	; 0x30
 8009e7c:	e7d4      	b.n	8009e28 <tcp_process+0x170>
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8009e7e:	2500      	movs	r5, #0
 8009e80:	e7da      	b.n	8009e38 <tcp_process+0x180>
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009e82:	4b3a      	ldr	r3, [pc, #232]	; (8009f6c <tcp_process+0x2b4>)
 8009e84:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8009e86:	4a3c      	ldr	r2, [pc, #240]	; (8009f78 <tcp_process+0x2c0>)
 8009e88:	493c      	ldr	r1, [pc, #240]	; (8009f7c <tcp_process+0x2c4>)
 8009e8a:	880d      	ldrh	r5, [r1, #0]
 8009e8c:	4930      	ldr	r1, [pc, #192]	; (8009f50 <tcp_process+0x298>)
 8009e8e:	6809      	ldr	r1, [r1, #0]
 8009e90:	4830      	ldr	r0, [pc, #192]	; (8009f54 <tcp_process+0x29c>)
 8009e92:	6800      	ldr	r0, [r0, #0]
 8009e94:	881e      	ldrh	r6, [r3, #0]
 8009e96:	9601      	str	r6, [sp, #4]
 8009e98:	885b      	ldrh	r3, [r3, #2]
 8009e9a:	9300      	str	r3, [sp, #0]
 8009e9c:	4613      	mov	r3, r2
 8009e9e:	3204      	adds	r2, #4
 8009ea0:	4429      	add	r1, r5
 8009ea2:	f001 faeb 	bl	800b47c <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 8009ea6:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8009eaa:	2b05      	cmp	r3, #5
 8009eac:	d901      	bls.n	8009eb2 <tcp_process+0x1fa>
  return ERR_OK;
 8009eae:	2500      	movs	r5, #0
 8009eb0:	e71d      	b.n	8009cee <tcp_process+0x36>
        pcb->rtime = 0;
 8009eb2:	2500      	movs	r5, #0
 8009eb4:	8625      	strh	r5, [r4, #48]	; 0x30
        tcp_rexmit_rto(pcb);
 8009eb6:	4620      	mov	r0, r4
 8009eb8:	f001 fb36 	bl	800b528 <tcp_rexmit_rto>
 8009ebc:	e717      	b.n	8009cee <tcp_process+0x36>
    if (flags & TCP_ACK) {
 8009ebe:	4b23      	ldr	r3, [pc, #140]	; (8009f4c <tcp_process+0x294>)
 8009ec0:	781b      	ldrb	r3, [r3, #0]
 8009ec2:	f013 0f10 	tst.w	r3, #16
 8009ec6:	f000 8083 	beq.w	8009fd0 <tcp_process+0x318>
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 8009eca:	4b22      	ldr	r3, [pc, #136]	; (8009f54 <tcp_process+0x29c>)
 8009ecc:	6818      	ldr	r0, [r3, #0]
 8009ece:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8009ed0:	1ac3      	subs	r3, r0, r3
 8009ed2:	2b01      	cmp	r3, #1
 8009ed4:	d403      	bmi.n	8009ede <tcp_process+0x226>
 8009ed6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8009ed8:	1ac3      	subs	r3, r0, r3
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	dd11      	ble.n	8009f02 <tcp_process+0x24a>
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009ede:	4b23      	ldr	r3, [pc, #140]	; (8009f6c <tcp_process+0x2b4>)
 8009ee0:	681b      	ldr	r3, [r3, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8009ee2:	4a25      	ldr	r2, [pc, #148]	; (8009f78 <tcp_process+0x2c0>)
 8009ee4:	4925      	ldr	r1, [pc, #148]	; (8009f7c <tcp_process+0x2c4>)
 8009ee6:	880c      	ldrh	r4, [r1, #0]
 8009ee8:	4919      	ldr	r1, [pc, #100]	; (8009f50 <tcp_process+0x298>)
 8009eea:	6809      	ldr	r1, [r1, #0]
 8009eec:	881d      	ldrh	r5, [r3, #0]
 8009eee:	9501      	str	r5, [sp, #4]
 8009ef0:	885b      	ldrh	r3, [r3, #2]
 8009ef2:	9300      	str	r3, [sp, #0]
 8009ef4:	4613      	mov	r3, r2
 8009ef6:	3204      	adds	r2, #4
 8009ef8:	4421      	add	r1, r4
 8009efa:	f001 fabf 	bl	800b47c <tcp_rst>
  return ERR_OK;
 8009efe:	2500      	movs	r5, #0
 8009f00:	e6f5      	b.n	8009cee <tcp_process+0x36>
        pcb->state = ESTABLISHED;
 8009f02:	2304      	movs	r3, #4
 8009f04:	7523      	strb	r3, [r4, #20]
        LWIP_ASSERT("pcb->listener->accept != NULL",
 8009f06:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8009f08:	b10b      	cbz	r3, 8009f0e <tcp_process+0x256>
 8009f0a:	699b      	ldr	r3, [r3, #24]
 8009f0c:	b19b      	cbz	r3, 8009f36 <tcp_process+0x27e>
        if (pcb->listener == NULL) {
 8009f0e:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8009f10:	b1cb      	cbz	r3, 8009f46 <tcp_process+0x28e>
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8009f12:	699b      	ldr	r3, [r3, #24]
 8009f14:	b3b3      	cbz	r3, 8009f84 <tcp_process+0x2cc>
 8009f16:	2200      	movs	r2, #0
 8009f18:	4621      	mov	r1, r4
 8009f1a:	6920      	ldr	r0, [r4, #16]
 8009f1c:	4798      	blx	r3
 8009f1e:	4605      	mov	r5, r0
        if (err != ERR_OK) {
 8009f20:	b39d      	cbz	r5, 8009f8a <tcp_process+0x2d2>
          if (err != ERR_ABRT) {
 8009f22:	f115 0f0d 	cmn.w	r5, #13
 8009f26:	f43f aee2 	beq.w	8009cee <tcp_process+0x36>
            tcp_abort(pcb);
 8009f2a:	4620      	mov	r0, r4
 8009f2c:	f7fe fe3e 	bl	8008bac <tcp_abort>
          return ERR_ABRT;
 8009f30:	f06f 050c 	mvn.w	r5, #12
 8009f34:	e6db      	b.n	8009cee <tcp_process+0x36>
        LWIP_ASSERT("pcb->listener->accept != NULL",
 8009f36:	4b09      	ldr	r3, [pc, #36]	; (8009f5c <tcp_process+0x2a4>)
 8009f38:	f240 3251 	movw	r2, #849	; 0x351
 8009f3c:	4910      	ldr	r1, [pc, #64]	; (8009f80 <tcp_process+0x2c8>)
 8009f3e:	4809      	ldr	r0, [pc, #36]	; (8009f64 <tcp_process+0x2ac>)
 8009f40:	f002 fe55 	bl	800cbee <iprintf>
 8009f44:	e7e3      	b.n	8009f0e <tcp_process+0x256>
          err = ERR_VAL;
 8009f46:	f06f 0505 	mvn.w	r5, #5
 8009f4a:	e7e9      	b.n	8009f20 <tcp_process+0x268>
 8009f4c:	20003f88 	.word	0x20003f88
 8009f50:	20003fa8 	.word	0x20003fa8
 8009f54:	20003f84 	.word	0x20003f84
 8009f58:	20003fa4 	.word	0x20003fa4
 8009f5c:	0800ec34 	.word	0x0800ec34
 8009f60:	0800ebc8 	.word	0x0800ebc8
 8009f64:	0800d378 	.word	0x0800d378
 8009f68:	20007980 	.word	0x20007980
 8009f6c:	20003fb0 	.word	0x20003fb0
 8009f70:	0800ebe8 	.word	0x0800ebe8
 8009f74:	0800ec00 	.word	0x0800ec00
 8009f78:	2000427c 	.word	0x2000427c
 8009f7c:	20003fbe 	.word	0x20003fbe
 8009f80:	0800ec14 	.word	0x0800ec14
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8009f84:	f06f 050f 	mvn.w	r5, #15
 8009f88:	e7ca      	b.n	8009f20 <tcp_process+0x268>
        tcp_receive(pcb);
 8009f8a:	4620      	mov	r0, r4
 8009f8c:	f7ff f970 	bl	8009270 <tcp_receive>
        if (recv_acked != 0) {
 8009f90:	4b8f      	ldr	r3, [pc, #572]	; (800a1d0 <tcp_process+0x518>)
 8009f92:	881b      	ldrh	r3, [r3, #0]
 8009f94:	b113      	cbz	r3, 8009f9c <tcp_process+0x2e4>
          recv_acked--;
 8009f96:	3b01      	subs	r3, #1
 8009f98:	4a8d      	ldr	r2, [pc, #564]	; (800a1d0 <tcp_process+0x518>)
 8009f9a:	8013      	strh	r3, [r2, #0]
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8009f9c:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 8009f9e:	0053      	lsls	r3, r2, #1
 8009fa0:	f241 111c 	movw	r1, #4380	; 0x111c
 8009fa4:	428b      	cmp	r3, r1
 8009fa6:	bf38      	it	cc
 8009fa8:	460b      	movcc	r3, r1
 8009faa:	0092      	lsls	r2, r2, #2
 8009fac:	4293      	cmp	r3, r2
 8009fae:	bf28      	it	cs
 8009fb0:	4613      	movcs	r3, r2
 8009fb2:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
        if (recv_flags & TF_GOT_FIN) {
 8009fb6:	4b87      	ldr	r3, [pc, #540]	; (800a1d4 <tcp_process+0x51c>)
 8009fb8:	781b      	ldrb	r3, [r3, #0]
 8009fba:	f013 0f20 	tst.w	r3, #32
 8009fbe:	f43f ae96 	beq.w	8009cee <tcp_process+0x36>
          tcp_ack_now(pcb);
 8009fc2:	7ea3      	ldrb	r3, [r4, #26]
 8009fc4:	f043 0302 	orr.w	r3, r3, #2
 8009fc8:	76a3      	strb	r3, [r4, #26]
          pcb->state = CLOSE_WAIT;
 8009fca:	2307      	movs	r3, #7
 8009fcc:	7523      	strb	r3, [r4, #20]
 8009fce:	e68e      	b.n	8009cee <tcp_process+0x36>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8009fd0:	f013 0f02 	tst.w	r3, #2
 8009fd4:	f000 80f1 	beq.w	800a1ba <tcp_process+0x502>
 8009fd8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009fda:	3b01      	subs	r3, #1
 8009fdc:	4a7e      	ldr	r2, [pc, #504]	; (800a1d8 <tcp_process+0x520>)
 8009fde:	6812      	ldr	r2, [r2, #0]
 8009fe0:	4293      	cmp	r3, r2
 8009fe2:	d001      	beq.n	8009fe8 <tcp_process+0x330>
  return ERR_OK;
 8009fe4:	2500      	movs	r5, #0
 8009fe6:	e682      	b.n	8009cee <tcp_process+0x36>
      tcp_rexmit(pcb);
 8009fe8:	4620      	mov	r0, r4
 8009fea:	f001 fab8 	bl	800b55e <tcp_rexmit>
  return ERR_OK;
 8009fee:	2500      	movs	r5, #0
 8009ff0:	e67d      	b.n	8009cee <tcp_process+0x36>
    tcp_receive(pcb);
 8009ff2:	4620      	mov	r0, r4
 8009ff4:	f7ff f93c 	bl	8009270 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 8009ff8:	4b76      	ldr	r3, [pc, #472]	; (800a1d4 <tcp_process+0x51c>)
 8009ffa:	781b      	ldrb	r3, [r3, #0]
 8009ffc:	f013 0f20 	tst.w	r3, #32
 800a000:	f000 80dd 	beq.w	800a1be <tcp_process+0x506>
      tcp_ack_now(pcb);
 800a004:	7ea3      	ldrb	r3, [r4, #26]
 800a006:	f043 0302 	orr.w	r3, r3, #2
 800a00a:	76a3      	strb	r3, [r4, #26]
      pcb->state = CLOSE_WAIT;
 800a00c:	2307      	movs	r3, #7
 800a00e:	7523      	strb	r3, [r4, #20]
  return ERR_OK;
 800a010:	2500      	movs	r5, #0
 800a012:	e66c      	b.n	8009cee <tcp_process+0x36>
    tcp_receive(pcb);
 800a014:	4620      	mov	r0, r4
 800a016:	f7ff f92b 	bl	8009270 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 800a01a:	4b6e      	ldr	r3, [pc, #440]	; (800a1d4 <tcp_process+0x51c>)
 800a01c:	781b      	ldrb	r3, [r3, #0]
 800a01e:	f013 0f20 	tst.w	r3, #32
 800a022:	d038      	beq.n	800a096 <tcp_process+0x3de>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a024:	4b6d      	ldr	r3, [pc, #436]	; (800a1dc <tcp_process+0x524>)
 800a026:	781b      	ldrb	r3, [r3, #0]
 800a028:	f013 0f10 	tst.w	r3, #16
 800a02c:	d004      	beq.n	800a038 <tcp_process+0x380>
 800a02e:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800a030:	4b6b      	ldr	r3, [pc, #428]	; (800a1e0 <tcp_process+0x528>)
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	429a      	cmp	r2, r3
 800a036:	d007      	beq.n	800a048 <tcp_process+0x390>
        tcp_ack_now(pcb);
 800a038:	7ea3      	ldrb	r3, [r4, #26]
 800a03a:	f043 0302 	orr.w	r3, r3, #2
 800a03e:	76a3      	strb	r3, [r4, #26]
        pcb->state = CLOSING;
 800a040:	2308      	movs	r3, #8
 800a042:	7523      	strb	r3, [r4, #20]
  return ERR_OK;
 800a044:	2500      	movs	r5, #0
 800a046:	e652      	b.n	8009cee <tcp_process+0x36>
          pcb->unsent == NULL) {
 800a048:	6ea3      	ldr	r3, [r4, #104]	; 0x68
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d1f4      	bne.n	800a038 <tcp_process+0x380>
        tcp_ack_now(pcb);
 800a04e:	7ea3      	ldrb	r3, [r4, #26]
 800a050:	f043 0302 	orr.w	r3, r3, #2
 800a054:	76a3      	strb	r3, [r4, #26]
        tcp_pcb_purge(pcb);
 800a056:	4620      	mov	r0, r4
 800a058:	f7fe f938 	bl	80082cc <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800a05c:	4b61      	ldr	r3, [pc, #388]	; (800a1e4 <tcp_process+0x52c>)
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	429c      	cmp	r4, r3
 800a062:	d005      	beq.n	800a070 <tcp_process+0x3b8>
 800a064:	b153      	cbz	r3, 800a07c <tcp_process+0x3c4>
 800a066:	68da      	ldr	r2, [r3, #12]
 800a068:	4294      	cmp	r4, r2
 800a06a:	d005      	beq.n	800a078 <tcp_process+0x3c0>
 800a06c:	4613      	mov	r3, r2
 800a06e:	e7f9      	b.n	800a064 <tcp_process+0x3ac>
 800a070:	68da      	ldr	r2, [r3, #12]
 800a072:	4b5c      	ldr	r3, [pc, #368]	; (800a1e4 <tcp_process+0x52c>)
 800a074:	601a      	str	r2, [r3, #0]
 800a076:	e001      	b.n	800a07c <tcp_process+0x3c4>
 800a078:	68e2      	ldr	r2, [r4, #12]
 800a07a:	60da      	str	r2, [r3, #12]
 800a07c:	2201      	movs	r2, #1
 800a07e:	4b5a      	ldr	r3, [pc, #360]	; (800a1e8 <tcp_process+0x530>)
 800a080:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800a082:	230a      	movs	r3, #10
 800a084:	7523      	strb	r3, [r4, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800a086:	4b59      	ldr	r3, [pc, #356]	; (800a1ec <tcp_process+0x534>)
 800a088:	681a      	ldr	r2, [r3, #0]
 800a08a:	60e2      	str	r2, [r4, #12]
 800a08c:	601c      	str	r4, [r3, #0]
 800a08e:	f001 fbfb 	bl	800b888 <tcp_timer_needed>
  return ERR_OK;
 800a092:	2500      	movs	r5, #0
        TCP_REG(&tcp_tw_pcbs, pcb);
 800a094:	e62b      	b.n	8009cee <tcp_process+0x36>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a096:	4b51      	ldr	r3, [pc, #324]	; (800a1dc <tcp_process+0x524>)
 800a098:	781b      	ldrb	r3, [r3, #0]
 800a09a:	f013 0f10 	tst.w	r3, #16
 800a09e:	f000 8090 	beq.w	800a1c2 <tcp_process+0x50a>
 800a0a2:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800a0a4:	4b4e      	ldr	r3, [pc, #312]	; (800a1e0 <tcp_process+0x528>)
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	429a      	cmp	r2, r3
 800a0aa:	d001      	beq.n	800a0b0 <tcp_process+0x3f8>
  return ERR_OK;
 800a0ac:	2500      	movs	r5, #0
 800a0ae:	e61e      	b.n	8009cee <tcp_process+0x36>
               pcb->unsent == NULL) {
 800a0b0:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a0b2:	b10b      	cbz	r3, 800a0b8 <tcp_process+0x400>
  return ERR_OK;
 800a0b4:	2500      	movs	r5, #0
 800a0b6:	e61a      	b.n	8009cee <tcp_process+0x36>
      pcb->state = FIN_WAIT_2;
 800a0b8:	2306      	movs	r3, #6
 800a0ba:	7523      	strb	r3, [r4, #20]
  return ERR_OK;
 800a0bc:	2500      	movs	r5, #0
 800a0be:	e616      	b.n	8009cee <tcp_process+0x36>
    tcp_receive(pcb);
 800a0c0:	4620      	mov	r0, r4
 800a0c2:	f7ff f8d5 	bl	8009270 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 800a0c6:	4b43      	ldr	r3, [pc, #268]	; (800a1d4 <tcp_process+0x51c>)
 800a0c8:	781b      	ldrb	r3, [r3, #0]
 800a0ca:	f013 0f20 	tst.w	r3, #32
 800a0ce:	d101      	bne.n	800a0d4 <tcp_process+0x41c>
  return ERR_OK;
 800a0d0:	2500      	movs	r5, #0
 800a0d2:	e60c      	b.n	8009cee <tcp_process+0x36>
      tcp_ack_now(pcb);
 800a0d4:	7ea3      	ldrb	r3, [r4, #26]
 800a0d6:	f043 0302 	orr.w	r3, r3, #2
 800a0da:	76a3      	strb	r3, [r4, #26]
      tcp_pcb_purge(pcb);
 800a0dc:	4620      	mov	r0, r4
 800a0de:	f7fe f8f5 	bl	80082cc <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800a0e2:	4b40      	ldr	r3, [pc, #256]	; (800a1e4 <tcp_process+0x52c>)
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	429c      	cmp	r4, r3
 800a0e8:	d005      	beq.n	800a0f6 <tcp_process+0x43e>
 800a0ea:	b153      	cbz	r3, 800a102 <tcp_process+0x44a>
 800a0ec:	68da      	ldr	r2, [r3, #12]
 800a0ee:	4294      	cmp	r4, r2
 800a0f0:	d005      	beq.n	800a0fe <tcp_process+0x446>
 800a0f2:	4613      	mov	r3, r2
 800a0f4:	e7f9      	b.n	800a0ea <tcp_process+0x432>
 800a0f6:	68da      	ldr	r2, [r3, #12]
 800a0f8:	4b3a      	ldr	r3, [pc, #232]	; (800a1e4 <tcp_process+0x52c>)
 800a0fa:	601a      	str	r2, [r3, #0]
 800a0fc:	e001      	b.n	800a102 <tcp_process+0x44a>
 800a0fe:	68e2      	ldr	r2, [r4, #12]
 800a100:	60da      	str	r2, [r3, #12]
 800a102:	2201      	movs	r2, #1
 800a104:	4b38      	ldr	r3, [pc, #224]	; (800a1e8 <tcp_process+0x530>)
 800a106:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 800a108:	230a      	movs	r3, #10
 800a10a:	7523      	strb	r3, [r4, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 800a10c:	4b37      	ldr	r3, [pc, #220]	; (800a1ec <tcp_process+0x534>)
 800a10e:	681a      	ldr	r2, [r3, #0]
 800a110:	60e2      	str	r2, [r4, #12]
 800a112:	601c      	str	r4, [r3, #0]
 800a114:	f001 fbb8 	bl	800b888 <tcp_timer_needed>
  return ERR_OK;
 800a118:	2500      	movs	r5, #0
 800a11a:	e5e8      	b.n	8009cee <tcp_process+0x36>
    tcp_receive(pcb);
 800a11c:	4620      	mov	r0, r4
 800a11e:	f7ff f8a7 	bl	8009270 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800a122:	4b2e      	ldr	r3, [pc, #184]	; (800a1dc <tcp_process+0x524>)
 800a124:	781b      	ldrb	r3, [r3, #0]
 800a126:	f013 0f10 	tst.w	r3, #16
 800a12a:	d04c      	beq.n	800a1c6 <tcp_process+0x50e>
 800a12c:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800a12e:	4b2c      	ldr	r3, [pc, #176]	; (800a1e0 <tcp_process+0x528>)
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	429a      	cmp	r2, r3
 800a134:	d001      	beq.n	800a13a <tcp_process+0x482>
  return ERR_OK;
 800a136:	2500      	movs	r5, #0
 800a138:	e5d9      	b.n	8009cee <tcp_process+0x36>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800a13a:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800a13c:	b10b      	cbz	r3, 800a142 <tcp_process+0x48a>
  return ERR_OK;
 800a13e:	2500      	movs	r5, #0
 800a140:	e5d5      	b.n	8009cee <tcp_process+0x36>
      tcp_pcb_purge(pcb);
 800a142:	4620      	mov	r0, r4
 800a144:	f7fe f8c2 	bl	80082cc <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800a148:	4b26      	ldr	r3, [pc, #152]	; (800a1e4 <tcp_process+0x52c>)
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	429c      	cmp	r4, r3
 800a14e:	d005      	beq.n	800a15c <tcp_process+0x4a4>
 800a150:	b153      	cbz	r3, 800a168 <tcp_process+0x4b0>
 800a152:	68da      	ldr	r2, [r3, #12]
 800a154:	4294      	cmp	r4, r2
 800a156:	d005      	beq.n	800a164 <tcp_process+0x4ac>
 800a158:	4613      	mov	r3, r2
 800a15a:	e7f9      	b.n	800a150 <tcp_process+0x498>
 800a15c:	68da      	ldr	r2, [r3, #12]
 800a15e:	4b21      	ldr	r3, [pc, #132]	; (800a1e4 <tcp_process+0x52c>)
 800a160:	601a      	str	r2, [r3, #0]
 800a162:	e001      	b.n	800a168 <tcp_process+0x4b0>
 800a164:	68e2      	ldr	r2, [r4, #12]
 800a166:	60da      	str	r2, [r3, #12]
 800a168:	2201      	movs	r2, #1
 800a16a:	4b1f      	ldr	r3, [pc, #124]	; (800a1e8 <tcp_process+0x530>)
 800a16c:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 800a16e:	230a      	movs	r3, #10
 800a170:	7523      	strb	r3, [r4, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 800a172:	4b1e      	ldr	r3, [pc, #120]	; (800a1ec <tcp_process+0x534>)
 800a174:	681a      	ldr	r2, [r3, #0]
 800a176:	60e2      	str	r2, [r4, #12]
 800a178:	601c      	str	r4, [r3, #0]
 800a17a:	f001 fb85 	bl	800b888 <tcp_timer_needed>
  return ERR_OK;
 800a17e:	2500      	movs	r5, #0
 800a180:	e5b5      	b.n	8009cee <tcp_process+0x36>
    tcp_receive(pcb);
 800a182:	4620      	mov	r0, r4
 800a184:	f7ff f874 	bl	8009270 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800a188:	4b14      	ldr	r3, [pc, #80]	; (800a1dc <tcp_process+0x524>)
 800a18a:	781b      	ldrb	r3, [r3, #0]
 800a18c:	f013 0f10 	tst.w	r3, #16
 800a190:	d01b      	beq.n	800a1ca <tcp_process+0x512>
 800a192:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800a194:	4b12      	ldr	r3, [pc, #72]	; (800a1e0 <tcp_process+0x528>)
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	429a      	cmp	r2, r3
 800a19a:	d001      	beq.n	800a1a0 <tcp_process+0x4e8>
  return ERR_OK;
 800a19c:	2500      	movs	r5, #0
 800a19e:	e5a6      	b.n	8009cee <tcp_process+0x36>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800a1a0:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800a1a2:	b10b      	cbz	r3, 800a1a8 <tcp_process+0x4f0>
  return ERR_OK;
 800a1a4:	2500      	movs	r5, #0
 800a1a6:	e5a2      	b.n	8009cee <tcp_process+0x36>
      recv_flags |= TF_CLOSED;
 800a1a8:	4a0a      	ldr	r2, [pc, #40]	; (800a1d4 <tcp_process+0x51c>)
 800a1aa:	7813      	ldrb	r3, [r2, #0]
 800a1ac:	f043 0310 	orr.w	r3, r3, #16
 800a1b0:	7013      	strb	r3, [r2, #0]
  return ERR_OK;
 800a1b2:	2500      	movs	r5, #0
 800a1b4:	e59b      	b.n	8009cee <tcp_process+0x36>
 800a1b6:	2500      	movs	r5, #0
 800a1b8:	e599      	b.n	8009cee <tcp_process+0x36>
 800a1ba:	2500      	movs	r5, #0
 800a1bc:	e597      	b.n	8009cee <tcp_process+0x36>
 800a1be:	2500      	movs	r5, #0
 800a1c0:	e595      	b.n	8009cee <tcp_process+0x36>
 800a1c2:	2500      	movs	r5, #0
 800a1c4:	e593      	b.n	8009cee <tcp_process+0x36>
 800a1c6:	2500      	movs	r5, #0
 800a1c8:	e591      	b.n	8009cee <tcp_process+0x36>
 800a1ca:	2500      	movs	r5, #0
 800a1cc:	e58f      	b.n	8009cee <tcp_process+0x36>
 800a1ce:	bf00      	nop
 800a1d0:	20003f9c 	.word	0x20003f9c
 800a1d4:	20003fa4 	.word	0x20003fa4
 800a1d8:	20003fa8 	.word	0x20003fa8
 800a1dc:	20003f88 	.word	0x20003f88
 800a1e0:	20003f84 	.word	0x20003f84
 800a1e4:	2000797c 	.word	0x2000797c
 800a1e8:	20007978 	.word	0x20007978
 800a1ec:	2000798c 	.word	0x2000798c

0800a1f0 <tcp_input>:
{
 800a1f0:	b570      	push	{r4, r5, r6, lr}
 800a1f2:	b082      	sub	sp, #8
 800a1f4:	4604      	mov	r4, r0
  tcphdr = (struct tcp_hdr *)p->payload;
 800a1f6:	6842      	ldr	r2, [r0, #4]
 800a1f8:	4b9f      	ldr	r3, [pc, #636]	; (800a478 <tcp_input+0x288>)
 800a1fa:	601a      	str	r2, [r3, #0]
  if (p->len < TCP_HLEN) {
 800a1fc:	8943      	ldrh	r3, [r0, #10]
 800a1fe:	2b13      	cmp	r3, #19
 800a200:	d93e      	bls.n	800a280 <tcp_input+0x90>
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800a202:	4b9e      	ldr	r3, [pc, #632]	; (800a47c <tcp_input+0x28c>)
 800a204:	6819      	ldr	r1, [r3, #0]
 800a206:	6958      	ldr	r0, [r3, #20]
 800a208:	f7fc fa1d 	bl	8006646 <ip4_addr_isbroadcast_u32>
 800a20c:	2800      	cmp	r0, #0
 800a20e:	d137      	bne.n	800a280 <tcp_input+0x90>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800a210:	4b9a      	ldr	r3, [pc, #616]	; (800a47c <tcp_input+0x28c>)
 800a212:	695b      	ldr	r3, [r3, #20]
 800a214:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800a218:	2be0      	cmp	r3, #224	; 0xe0
 800a21a:	d031      	beq.n	800a280 <tcp_input+0x90>
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 800a21c:	4b96      	ldr	r3, [pc, #600]	; (800a478 <tcp_input+0x288>)
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	8998      	ldrh	r0, [r3, #12]
 800a222:	f7fb faab 	bl	800577c <lwip_htons>
 800a226:	f3c0 310f 	ubfx	r1, r0, #12, #16
 800a22a:	0089      	lsls	r1, r1, #2
 800a22c:	b2c9      	uxtb	r1, r1
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800a22e:	2913      	cmp	r1, #19
 800a230:	d926      	bls.n	800a280 <tcp_input+0x90>
 800a232:	b289      	uxth	r1, r1
 800a234:	8923      	ldrh	r3, [r4, #8]
 800a236:	4299      	cmp	r1, r3
 800a238:	d822      	bhi.n	800a280 <tcp_input+0x90>
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 800a23a:	f1a1 0314 	sub.w	r3, r1, #20
 800a23e:	b29b      	uxth	r3, r3
 800a240:	4a8f      	ldr	r2, [pc, #572]	; (800a480 <tcp_input+0x290>)
 800a242:	8013      	strh	r3, [r2, #0]
  tcphdr_opt2 = NULL;
 800a244:	2000      	movs	r0, #0
 800a246:	4a8f      	ldr	r2, [pc, #572]	; (800a484 <tcp_input+0x294>)
 800a248:	6010      	str	r0, [r2, #0]
  if (p->len >= hdrlen_bytes) {
 800a24a:	8962      	ldrh	r2, [r4, #10]
 800a24c:	4291      	cmp	r1, r2
 800a24e:	d91c      	bls.n	800a28a <tcp_input+0x9a>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800a250:	6823      	ldr	r3, [r4, #0]
 800a252:	2b00      	cmp	r3, #0
 800a254:	d051      	beq.n	800a2fa <tcp_input+0x10a>
    pbuf_header(p, -TCP_HLEN);
 800a256:	f06f 0113 	mvn.w	r1, #19
 800a25a:	4620      	mov	r0, r4
 800a25c:	f7fd fb6a 	bl	8007934 <pbuf_header>
    tcphdr_opt1len = p->len;
 800a260:	8961      	ldrh	r1, [r4, #10]
 800a262:	4b89      	ldr	r3, [pc, #548]	; (800a488 <tcp_input+0x298>)
 800a264:	8019      	strh	r1, [r3, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 800a266:	4b86      	ldr	r3, [pc, #536]	; (800a480 <tcp_input+0x290>)
 800a268:	881d      	ldrh	r5, [r3, #0]
 800a26a:	1a6d      	subs	r5, r5, r1
 800a26c:	b2ad      	uxth	r5, r5
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 800a26e:	4249      	negs	r1, r1
 800a270:	b209      	sxth	r1, r1
 800a272:	4620      	mov	r0, r4
 800a274:	f7fd fb5e 	bl	8007934 <pbuf_header>
    if (opt2len > p->next->len) {
 800a278:	6820      	ldr	r0, [r4, #0]
 800a27a:	8943      	ldrh	r3, [r0, #10]
 800a27c:	429d      	cmp	r5, r3
 800a27e:	d943      	bls.n	800a308 <tcp_input+0x118>
  pbuf_free(p);
 800a280:	4620      	mov	r0, r4
 800a282:	f7fd fb61 	bl	8007948 <pbuf_free>
}
 800a286:	b002      	add	sp, #8
 800a288:	bd70      	pop	{r4, r5, r6, pc}
    tcphdr_opt1len = tcphdr_optlen;
 800a28a:	4a7f      	ldr	r2, [pc, #508]	; (800a488 <tcp_input+0x298>)
 800a28c:	8013      	strh	r3, [r2, #0]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 800a28e:	4249      	negs	r1, r1
 800a290:	4620      	mov	r0, r4
 800a292:	f7fd fb4f 	bl	8007934 <pbuf_header>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800a296:	4d78      	ldr	r5, [pc, #480]	; (800a478 <tcp_input+0x288>)
 800a298:	682e      	ldr	r6, [r5, #0]
 800a29a:	8830      	ldrh	r0, [r6, #0]
 800a29c:	f7fb fa6e 	bl	800577c <lwip_htons>
 800a2a0:	8030      	strh	r0, [r6, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800a2a2:	682e      	ldr	r6, [r5, #0]
 800a2a4:	8870      	ldrh	r0, [r6, #2]
 800a2a6:	f7fb fa69 	bl	800577c <lwip_htons>
 800a2aa:	8070      	strh	r0, [r6, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800a2ac:	682e      	ldr	r6, [r5, #0]
 800a2ae:	6870      	ldr	r0, [r6, #4]
 800a2b0:	f7fb fa67 	bl	8005782 <lwip_htonl>
 800a2b4:	6070      	str	r0, [r6, #4]
 800a2b6:	4b75      	ldr	r3, [pc, #468]	; (800a48c <tcp_input+0x29c>)
 800a2b8:	6018      	str	r0, [r3, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800a2ba:	682e      	ldr	r6, [r5, #0]
 800a2bc:	68b0      	ldr	r0, [r6, #8]
 800a2be:	f7fb fa60 	bl	8005782 <lwip_htonl>
 800a2c2:	60b0      	str	r0, [r6, #8]
 800a2c4:	4b72      	ldr	r3, [pc, #456]	; (800a490 <tcp_input+0x2a0>)
 800a2c6:	6018      	str	r0, [r3, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800a2c8:	682e      	ldr	r6, [r5, #0]
 800a2ca:	89f0      	ldrh	r0, [r6, #14]
 800a2cc:	f7fb fa56 	bl	800577c <lwip_htons>
 800a2d0:	81f0      	strh	r0, [r6, #14]
  flags = TCPH_FLAGS(tcphdr);
 800a2d2:	682b      	ldr	r3, [r5, #0]
 800a2d4:	8998      	ldrh	r0, [r3, #12]
 800a2d6:	f7fb fa51 	bl	800577c <lwip_htons>
 800a2da:	f000 033f 	and.w	r3, r0, #63	; 0x3f
 800a2de:	4a6d      	ldr	r2, [pc, #436]	; (800a494 <tcp_input+0x2a4>)
 800a2e0:	7013      	strb	r3, [r2, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 800a2e2:	8922      	ldrh	r2, [r4, #8]
 800a2e4:	f013 0303 	ands.w	r3, r3, #3
 800a2e8:	bf18      	it	ne
 800a2ea:	2301      	movne	r3, #1
 800a2ec:	4413      	add	r3, r2
 800a2ee:	4a6a      	ldr	r2, [pc, #424]	; (800a498 <tcp_input+0x2a8>)
 800a2f0:	8013      	strh	r3, [r2, #0]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a2f2:	4b6a      	ldr	r3, [pc, #424]	; (800a49c <tcp_input+0x2ac>)
 800a2f4:	681d      	ldr	r5, [r3, #0]
  prev = NULL;
 800a2f6:	2600      	movs	r6, #0
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a2f8:	e033      	b.n	800a362 <tcp_input+0x172>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800a2fa:	4b69      	ldr	r3, [pc, #420]	; (800a4a0 <tcp_input+0x2b0>)
 800a2fc:	22b2      	movs	r2, #178	; 0xb2
 800a2fe:	4969      	ldr	r1, [pc, #420]	; (800a4a4 <tcp_input+0x2b4>)
 800a300:	4869      	ldr	r0, [pc, #420]	; (800a4a8 <tcp_input+0x2b8>)
 800a302:	f002 fc74 	bl	800cbee <iprintf>
 800a306:	e7a6      	b.n	800a256 <tcp_input+0x66>
    tcphdr_opt2 = (u8_t*)p->next->payload;
 800a308:	6842      	ldr	r2, [r0, #4]
 800a30a:	4b5e      	ldr	r3, [pc, #376]	; (800a484 <tcp_input+0x294>)
 800a30c:	601a      	str	r2, [r3, #0]
    pbuf_header(p->next, -(s16_t)opt2len);
 800a30e:	4269      	negs	r1, r5
 800a310:	b209      	sxth	r1, r1
 800a312:	f7fd fb0f 	bl	8007934 <pbuf_header>
    p->tot_len -= opt2len;
 800a316:	8923      	ldrh	r3, [r4, #8]
 800a318:	1b5d      	subs	r5, r3, r5
 800a31a:	8125      	strh	r5, [r4, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 800a31c:	8963      	ldrh	r3, [r4, #10]
 800a31e:	b95b      	cbnz	r3, 800a338 <tcp_input+0x148>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800a320:	8922      	ldrh	r2, [r4, #8]
 800a322:	6823      	ldr	r3, [r4, #0]
 800a324:	891b      	ldrh	r3, [r3, #8]
 800a326:	429a      	cmp	r2, r3
 800a328:	d0b5      	beq.n	800a296 <tcp_input+0xa6>
 800a32a:	4b5d      	ldr	r3, [pc, #372]	; (800a4a0 <tcp_input+0x2b0>)
 800a32c:	22d0      	movs	r2, #208	; 0xd0
 800a32e:	495f      	ldr	r1, [pc, #380]	; (800a4ac <tcp_input+0x2bc>)
 800a330:	485d      	ldr	r0, [pc, #372]	; (800a4a8 <tcp_input+0x2b8>)
 800a332:	f002 fc5c 	bl	800cbee <iprintf>
 800a336:	e7ae      	b.n	800a296 <tcp_input+0xa6>
    LWIP_ASSERT("p->len == 0", p->len == 0);
 800a338:	4b59      	ldr	r3, [pc, #356]	; (800a4a0 <tcp_input+0x2b0>)
 800a33a:	22cf      	movs	r2, #207	; 0xcf
 800a33c:	495c      	ldr	r1, [pc, #368]	; (800a4b0 <tcp_input+0x2c0>)
 800a33e:	485a      	ldr	r0, [pc, #360]	; (800a4a8 <tcp_input+0x2b8>)
 800a340:	f002 fc55 	bl	800cbee <iprintf>
 800a344:	e7ec      	b.n	800a320 <tcp_input+0x130>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800a346:	7d2b      	ldrb	r3, [r5, #20]
 800a348:	2b0a      	cmp	r3, #10
 800a34a:	d016      	beq.n	800a37a <tcp_input+0x18a>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800a34c:	7d2b      	ldrb	r3, [r5, #20]
 800a34e:	2b01      	cmp	r3, #1
 800a350:	d01a      	beq.n	800a388 <tcp_input+0x198>
    if (pcb->remote_port == tcphdr->src &&
 800a352:	8b29      	ldrh	r1, [r5, #24]
 800a354:	4b48      	ldr	r3, [pc, #288]	; (800a478 <tcp_input+0x288>)
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	881a      	ldrh	r2, [r3, #0]
 800a35a:	4291      	cmp	r1, r2
 800a35c:	d01b      	beq.n	800a396 <tcp_input+0x1a6>
    prev = pcb;
 800a35e:	462e      	mov	r6, r5
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a360:	68ed      	ldr	r5, [r5, #12]
 800a362:	2d00      	cmp	r5, #0
 800a364:	d032      	beq.n	800a3cc <tcp_input+0x1dc>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800a366:	7d2b      	ldrb	r3, [r5, #20]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d1ec      	bne.n	800a346 <tcp_input+0x156>
 800a36c:	4b4c      	ldr	r3, [pc, #304]	; (800a4a0 <tcp_input+0x2b0>)
 800a36e:	22e2      	movs	r2, #226	; 0xe2
 800a370:	4950      	ldr	r1, [pc, #320]	; (800a4b4 <tcp_input+0x2c4>)
 800a372:	484d      	ldr	r0, [pc, #308]	; (800a4a8 <tcp_input+0x2b8>)
 800a374:	f002 fc3b 	bl	800cbee <iprintf>
 800a378:	e7e5      	b.n	800a346 <tcp_input+0x156>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800a37a:	4b49      	ldr	r3, [pc, #292]	; (800a4a0 <tcp_input+0x2b0>)
 800a37c:	22e3      	movs	r2, #227	; 0xe3
 800a37e:	494e      	ldr	r1, [pc, #312]	; (800a4b8 <tcp_input+0x2c8>)
 800a380:	4849      	ldr	r0, [pc, #292]	; (800a4a8 <tcp_input+0x2b8>)
 800a382:	f002 fc34 	bl	800cbee <iprintf>
 800a386:	e7e1      	b.n	800a34c <tcp_input+0x15c>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800a388:	4b45      	ldr	r3, [pc, #276]	; (800a4a0 <tcp_input+0x2b0>)
 800a38a:	22e4      	movs	r2, #228	; 0xe4
 800a38c:	494b      	ldr	r1, [pc, #300]	; (800a4bc <tcp_input+0x2cc>)
 800a38e:	4846      	ldr	r0, [pc, #280]	; (800a4a8 <tcp_input+0x2b8>)
 800a390:	f002 fc2d 	bl	800cbee <iprintf>
 800a394:	e7dd      	b.n	800a352 <tcp_input+0x162>
        pcb->local_port == tcphdr->dest &&
 800a396:	8aea      	ldrh	r2, [r5, #22]
 800a398:	885b      	ldrh	r3, [r3, #2]
    if (pcb->remote_port == tcphdr->src &&
 800a39a:	429a      	cmp	r2, r3
 800a39c:	d1df      	bne.n	800a35e <tcp_input+0x16e>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a39e:	686a      	ldr	r2, [r5, #4]
 800a3a0:	4b36      	ldr	r3, [pc, #216]	; (800a47c <tcp_input+0x28c>)
 800a3a2:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800a3a4:	429a      	cmp	r2, r3
 800a3a6:	d1da      	bne.n	800a35e <tcp_input+0x16e>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800a3a8:	682a      	ldr	r2, [r5, #0]
 800a3aa:	4b34      	ldr	r3, [pc, #208]	; (800a47c <tcp_input+0x28c>)
 800a3ac:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a3ae:	429a      	cmp	r2, r3
 800a3b0:	d1d5      	bne.n	800a35e <tcp_input+0x16e>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800a3b2:	68eb      	ldr	r3, [r5, #12]
 800a3b4:	429d      	cmp	r5, r3
 800a3b6:	d04d      	beq.n	800a454 <tcp_input+0x264>
      if (prev != NULL) {
 800a3b8:	b12e      	cbz	r6, 800a3c6 <tcp_input+0x1d6>
        prev->next = pcb->next;
 800a3ba:	68eb      	ldr	r3, [r5, #12]
 800a3bc:	60f3      	str	r3, [r6, #12]
        pcb->next = tcp_active_pcbs;
 800a3be:	4b37      	ldr	r3, [pc, #220]	; (800a49c <tcp_input+0x2ac>)
 800a3c0:	681a      	ldr	r2, [r3, #0]
 800a3c2:	60ea      	str	r2, [r5, #12]
        tcp_active_pcbs = pcb;
 800a3c4:	601d      	str	r5, [r3, #0]
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800a3c6:	68eb      	ldr	r3, [r5, #12]
 800a3c8:	429d      	cmp	r5, r3
 800a3ca:	d04a      	beq.n	800a462 <tcp_input+0x272>
  if (pcb == NULL) {
 800a3cc:	2d00      	cmp	r5, #0
 800a3ce:	d04f      	beq.n	800a470 <tcp_input+0x280>
  if (pcb != NULL) {
 800a3d0:	2d00      	cmp	r5, #0
 800a3d2:	f000 8168 	beq.w	800a6a6 <tcp_input+0x4b6>
    inseg.next = NULL;
 800a3d6:	4a3a      	ldr	r2, [pc, #232]	; (800a4c0 <tcp_input+0x2d0>)
 800a3d8:	2300      	movs	r3, #0
 800a3da:	6013      	str	r3, [r2, #0]
    inseg.len = p->tot_len;
 800a3dc:	8921      	ldrh	r1, [r4, #8]
 800a3de:	8111      	strh	r1, [r2, #8]
    inseg.p = p;
 800a3e0:	6054      	str	r4, [r2, #4]
    inseg.tcphdr = tcphdr;
 800a3e2:	4925      	ldr	r1, [pc, #148]	; (800a478 <tcp_input+0x288>)
 800a3e4:	6809      	ldr	r1, [r1, #0]
 800a3e6:	60d1      	str	r1, [r2, #12]
    recv_data = NULL;
 800a3e8:	4a36      	ldr	r2, [pc, #216]	; (800a4c4 <tcp_input+0x2d4>)
 800a3ea:	6013      	str	r3, [r2, #0]
    recv_flags = 0;
 800a3ec:	4a36      	ldr	r2, [pc, #216]	; (800a4c8 <tcp_input+0x2d8>)
 800a3ee:	7013      	strb	r3, [r2, #0]
    recv_acked = 0;
 800a3f0:	4a36      	ldr	r2, [pc, #216]	; (800a4cc <tcp_input+0x2dc>)
 800a3f2:	8013      	strh	r3, [r2, #0]
    if (flags & TCP_PSH) {
 800a3f4:	4b27      	ldr	r3, [pc, #156]	; (800a494 <tcp_input+0x2a4>)
 800a3f6:	781b      	ldrb	r3, [r3, #0]
 800a3f8:	f013 0f08 	tst.w	r3, #8
 800a3fc:	d003      	beq.n	800a406 <tcp_input+0x216>
      p->flags |= PBUF_FLAG_PUSH;
 800a3fe:	7b63      	ldrb	r3, [r4, #13]
 800a400:	f043 0301 	orr.w	r3, r3, #1
 800a404:	7363      	strb	r3, [r4, #13]
    if (pcb->refused_data != NULL) {
 800a406:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800a408:	2b00      	cmp	r3, #0
 800a40a:	f000 80b9 	beq.w	800a580 <tcp_input+0x390>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800a40e:	4628      	mov	r0, r5
 800a410:	f7fe fa9a 	bl	8008948 <tcp_process_refused_data>
 800a414:	f110 0f0d 	cmn.w	r0, #13
 800a418:	d008      	beq.n	800a42c <tcp_input+0x23c>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800a41a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	f000 80af 	beq.w	800a580 <tcp_input+0x390>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800a422:	4b1d      	ldr	r3, [pc, #116]	; (800a498 <tcp_input+0x2a8>)
 800a424:	881b      	ldrh	r3, [r3, #0]
 800a426:	2b00      	cmp	r3, #0
 800a428:	f000 80aa 	beq.w	800a580 <tcp_input+0x390>
        if (pcb->rcv_ann_wnd == 0) {
 800a42c:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 800a42e:	2b00      	cmp	r3, #0
 800a430:	f000 80a2 	beq.w	800a578 <tcp_input+0x388>
    tcp_input_pcb = NULL;
 800a434:	2300      	movs	r3, #0
 800a436:	4a26      	ldr	r2, [pc, #152]	; (800a4d0 <tcp_input+0x2e0>)
 800a438:	6013      	str	r3, [r2, #0]
    recv_data = NULL;
 800a43a:	4a22      	ldr	r2, [pc, #136]	; (800a4c4 <tcp_input+0x2d4>)
 800a43c:	6013      	str	r3, [r2, #0]
    if (inseg.p != NULL)
 800a43e:	4b20      	ldr	r3, [pc, #128]	; (800a4c0 <tcp_input+0x2d0>)
 800a440:	6858      	ldr	r0, [r3, #4]
 800a442:	2800      	cmp	r0, #0
 800a444:	f43f af1f 	beq.w	800a286 <tcp_input+0x96>
      pbuf_free(inseg.p);
 800a448:	f7fd fa7e 	bl	8007948 <pbuf_free>
      inseg.p = NULL;
 800a44c:	2200      	movs	r2, #0
 800a44e:	4b1c      	ldr	r3, [pc, #112]	; (800a4c0 <tcp_input+0x2d0>)
 800a450:	605a      	str	r2, [r3, #4]
 800a452:	e718      	b.n	800a286 <tcp_input+0x96>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800a454:	4b12      	ldr	r3, [pc, #72]	; (800a4a0 <tcp_input+0x2b0>)
 800a456:	22ec      	movs	r2, #236	; 0xec
 800a458:	491e      	ldr	r1, [pc, #120]	; (800a4d4 <tcp_input+0x2e4>)
 800a45a:	4813      	ldr	r0, [pc, #76]	; (800a4a8 <tcp_input+0x2b8>)
 800a45c:	f002 fbc7 	bl	800cbee <iprintf>
 800a460:	e7aa      	b.n	800a3b8 <tcp_input+0x1c8>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800a462:	4b0f      	ldr	r3, [pc, #60]	; (800a4a0 <tcp_input+0x2b0>)
 800a464:	22f4      	movs	r2, #244	; 0xf4
 800a466:	491c      	ldr	r1, [pc, #112]	; (800a4d8 <tcp_input+0x2e8>)
 800a468:	480f      	ldr	r0, [pc, #60]	; (800a4a8 <tcp_input+0x2b8>)
 800a46a:	f002 fbc0 	bl	800cbee <iprintf>
 800a46e:	e7ad      	b.n	800a3cc <tcp_input+0x1dc>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a470:	4b1a      	ldr	r3, [pc, #104]	; (800a4dc <tcp_input+0x2ec>)
 800a472:	681d      	ldr	r5, [r3, #0]
 800a474:	e03b      	b.n	800a4ee <tcp_input+0x2fe>
 800a476:	bf00      	nop
 800a478:	20003fb0 	.word	0x20003fb0
 800a47c:	2000426c 	.word	0x2000426c
 800a480:	20003fbc 	.word	0x20003fbc
 800a484:	20003fb8 	.word	0x20003fb8
 800a488:	20003fb4 	.word	0x20003fb4
 800a48c:	20003fa8 	.word	0x20003fa8
 800a490:	20003f84 	.word	0x20003f84
 800a494:	20003f88 	.word	0x20003f88
 800a498:	20003fbe 	.word	0x20003fbe
 800a49c:	2000797c 	.word	0x2000797c
 800a4a0:	0800ec34 	.word	0x0800ec34
 800a4a4:	0800ea6c 	.word	0x0800ea6c
 800a4a8:	0800d378 	.word	0x0800d378
 800a4ac:	0800ea88 	.word	0x0800ea88
 800a4b0:	0800ea7c 	.word	0x0800ea7c
 800a4b4:	0800eaa8 	.word	0x0800eaa8
 800a4b8:	0800ead0 	.word	0x0800ead0
 800a4bc:	0800eafc 	.word	0x0800eafc
 800a4c0:	20003f8c 	.word	0x20003f8c
 800a4c4:	20003fa0 	.word	0x20003fa0
 800a4c8:	20003fa4 	.word	0x20003fa4
 800a4cc:	20003f9c 	.word	0x20003f9c
 800a4d0:	20007990 	.word	0x20007990
 800a4d4:	0800eb24 	.word	0x0800eb24
 800a4d8:	0800eb50 	.word	0x0800eb50
 800a4dc:	2000798c 	.word	0x2000798c
      if (pcb->remote_port == tcphdr->src &&
 800a4e0:	8b29      	ldrh	r1, [r5, #24]
 800a4e2:	4b80      	ldr	r3, [pc, #512]	; (800a6e4 <tcp_input+0x4f4>)
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	881a      	ldrh	r2, [r3, #0]
 800a4e8:	4291      	cmp	r1, r2
 800a4ea:	d00b      	beq.n	800a504 <tcp_input+0x314>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a4ec:	68ed      	ldr	r5, [r5, #12]
 800a4ee:	b1f5      	cbz	r5, 800a52e <tcp_input+0x33e>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800a4f0:	7d2b      	ldrb	r3, [r5, #20]
 800a4f2:	2b0a      	cmp	r3, #10
 800a4f4:	d0f4      	beq.n	800a4e0 <tcp_input+0x2f0>
 800a4f6:	4b7c      	ldr	r3, [pc, #496]	; (800a6e8 <tcp_input+0x4f8>)
 800a4f8:	22fe      	movs	r2, #254	; 0xfe
 800a4fa:	497c      	ldr	r1, [pc, #496]	; (800a6ec <tcp_input+0x4fc>)
 800a4fc:	487c      	ldr	r0, [pc, #496]	; (800a6f0 <tcp_input+0x500>)
 800a4fe:	f002 fb76 	bl	800cbee <iprintf>
 800a502:	e7ed      	b.n	800a4e0 <tcp_input+0x2f0>
          pcb->local_port == tcphdr->dest &&
 800a504:	8aea      	ldrh	r2, [r5, #22]
 800a506:	885b      	ldrh	r3, [r3, #2]
      if (pcb->remote_port == tcphdr->src &&
 800a508:	429a      	cmp	r2, r3
 800a50a:	d1ef      	bne.n	800a4ec <tcp_input+0x2fc>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a50c:	686a      	ldr	r2, [r5, #4]
 800a50e:	4b79      	ldr	r3, [pc, #484]	; (800a6f4 <tcp_input+0x504>)
 800a510:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800a512:	429a      	cmp	r2, r3
 800a514:	d1ea      	bne.n	800a4ec <tcp_input+0x2fc>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800a516:	682a      	ldr	r2, [r5, #0]
 800a518:	4b76      	ldr	r3, [pc, #472]	; (800a6f4 <tcp_input+0x504>)
 800a51a:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a51c:	429a      	cmp	r2, r3
 800a51e:	d1e5      	bne.n	800a4ec <tcp_input+0x2fc>
        tcp_timewait_input(pcb);
 800a520:	4628      	mov	r0, r5
 800a522:	f7fe fd8f 	bl	8009044 <tcp_timewait_input>
        pbuf_free(p);
 800a526:	4620      	mov	r0, r4
 800a528:	f7fd fa0e 	bl	8007948 <pbuf_free>
        return;
 800a52c:	e6ab      	b.n	800a286 <tcp_input+0x96>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a52e:	4b72      	ldr	r3, [pc, #456]	; (800a6f8 <tcp_input+0x508>)
 800a530:	681e      	ldr	r6, [r3, #0]
 800a532:	4630      	mov	r0, r6
    prev = NULL;
 800a534:	4629      	mov	r1, r5
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a536:	e001      	b.n	800a53c <tcp_input+0x34c>
      prev = (struct tcp_pcb *)lpcb;
 800a538:	4601      	mov	r1, r0
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a53a:	68c0      	ldr	r0, [r0, #12]
 800a53c:	b168      	cbz	r0, 800a55a <tcp_input+0x36a>
      if (lpcb->local_port == tcphdr->dest) {
 800a53e:	8ac2      	ldrh	r2, [r0, #22]
 800a540:	4b68      	ldr	r3, [pc, #416]	; (800a6e4 <tcp_input+0x4f4>)
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	885b      	ldrh	r3, [r3, #2]
 800a546:	429a      	cmp	r2, r3
 800a548:	d1f6      	bne.n	800a538 <tcp_input+0x348>
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800a54a:	6803      	ldr	r3, [r0, #0]
 800a54c:	4a69      	ldr	r2, [pc, #420]	; (800a6f4 <tcp_input+0x504>)
 800a54e:	6952      	ldr	r2, [r2, #20]
 800a550:	4293      	cmp	r3, r2
 800a552:	d002      	beq.n	800a55a <tcp_input+0x36a>
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800a554:	b108      	cbz	r0, 800a55a <tcp_input+0x36a>
 800a556:	2b00      	cmp	r3, #0
 800a558:	d1ee      	bne.n	800a538 <tcp_input+0x348>
    if (lpcb != NULL) {
 800a55a:	2800      	cmp	r0, #0
 800a55c:	f43f af38 	beq.w	800a3d0 <tcp_input+0x1e0>
      if (prev != NULL) {
 800a560:	b121      	cbz	r1, 800a56c <tcp_input+0x37c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800a562:	68c3      	ldr	r3, [r0, #12]
 800a564:	60cb      	str	r3, [r1, #12]
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800a566:	60c6      	str	r6, [r0, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800a568:	4b63      	ldr	r3, [pc, #396]	; (800a6f8 <tcp_input+0x508>)
 800a56a:	6018      	str	r0, [r3, #0]
      tcp_listen_input(lpcb);
 800a56c:	f7fe fdb2 	bl	80090d4 <tcp_listen_input>
      pbuf_free(p);
 800a570:	4620      	mov	r0, r4
 800a572:	f7fd f9e9 	bl	8007948 <pbuf_free>
      return;
 800a576:	e686      	b.n	800a286 <tcp_input+0x96>
          tcp_send_empty_ack(pcb);
 800a578:	4628      	mov	r0, r5
 800a57a:	f000 fde9 	bl	800b150 <tcp_send_empty_ack>
 800a57e:	e759      	b.n	800a434 <tcp_input+0x244>
    tcp_input_pcb = pcb;
 800a580:	4b5e      	ldr	r3, [pc, #376]	; (800a6fc <tcp_input+0x50c>)
 800a582:	601d      	str	r5, [r3, #0]
    err = tcp_process(pcb);
 800a584:	4628      	mov	r0, r5
 800a586:	f7ff fb97 	bl	8009cb8 <tcp_process>
    if (err != ERR_ABRT) {
 800a58a:	f110 0f0d 	cmn.w	r0, #13
 800a58e:	f43f af51 	beq.w	800a434 <tcp_input+0x244>
      if (recv_flags & TF_RESET) {
 800a592:	4b5b      	ldr	r3, [pc, #364]	; (800a700 <tcp_input+0x510>)
 800a594:	781b      	ldrb	r3, [r3, #0]
 800a596:	f013 0f08 	tst.w	r3, #8
 800a59a:	d00f      	beq.n	800a5bc <tcp_input+0x3cc>
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800a59c:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 800a5a0:	b11b      	cbz	r3, 800a5aa <tcp_input+0x3ba>
 800a5a2:	f06f 010d 	mvn.w	r1, #13
 800a5a6:	6928      	ldr	r0, [r5, #16]
 800a5a8:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800a5aa:	4629      	mov	r1, r5
 800a5ac:	4855      	ldr	r0, [pc, #340]	; (800a704 <tcp_input+0x514>)
 800a5ae:	f7fe f8b1 	bl	8008714 <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 800a5b2:	4629      	mov	r1, r5
 800a5b4:	2001      	movs	r0, #1
 800a5b6:	f7fc fff1 	bl	800759c <memp_free>
 800a5ba:	e73b      	b.n	800a434 <tcp_input+0x244>
        if (recv_acked > 0) {
 800a5bc:	4b52      	ldr	r3, [pc, #328]	; (800a708 <tcp_input+0x518>)
 800a5be:	881a      	ldrh	r2, [r3, #0]
 800a5c0:	b162      	cbz	r2, 800a5dc <tcp_input+0x3ec>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800a5c2:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d048      	beq.n	800a65a <tcp_input+0x46a>
 800a5c8:	4629      	mov	r1, r5
 800a5ca:	6928      	ldr	r0, [r5, #16]
 800a5cc:	4798      	blx	r3
            if (err == ERR_ABRT) {
 800a5ce:	f110 0f0d 	cmn.w	r0, #13
 800a5d2:	f43f af2f 	beq.w	800a434 <tcp_input+0x244>
          recv_acked = 0;
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	4b4b      	ldr	r3, [pc, #300]	; (800a708 <tcp_input+0x518>)
 800a5da:	801a      	strh	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800a5dc:	4628      	mov	r0, r5
 800a5de:	f7fe fd0f 	bl	8009000 <tcp_input_delayed_close>
 800a5e2:	2800      	cmp	r0, #0
 800a5e4:	f47f af26 	bne.w	800a434 <tcp_input+0x244>
        if (recv_data != NULL) {
 800a5e8:	4b48      	ldr	r3, [pc, #288]	; (800a70c <tcp_input+0x51c>)
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	b1eb      	cbz	r3, 800a62a <tcp_input+0x43a>
          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800a5ee:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800a5f0:	b133      	cbz	r3, 800a600 <tcp_input+0x410>
 800a5f2:	4b3d      	ldr	r3, [pc, #244]	; (800a6e8 <tcp_input+0x4f8>)
 800a5f4:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 800a5f8:	4945      	ldr	r1, [pc, #276]	; (800a710 <tcp_input+0x520>)
 800a5fa:	483d      	ldr	r0, [pc, #244]	; (800a6f0 <tcp_input+0x500>)
 800a5fc:	f002 faf7 	bl	800cbee <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800a600:	7eab      	ldrb	r3, [r5, #26]
 800a602:	f013 0f10 	tst.w	r3, #16
 800a606:	d12a      	bne.n	800a65e <tcp_input+0x46e>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800a608:	f8d5 4080 	ldr.w	r4, [r5, #128]	; 0x80
 800a60c:	b37c      	cbz	r4, 800a66e <tcp_input+0x47e>
 800a60e:	2300      	movs	r3, #0
 800a610:	4a3e      	ldr	r2, [pc, #248]	; (800a70c <tcp_input+0x51c>)
 800a612:	6812      	ldr	r2, [r2, #0]
 800a614:	4629      	mov	r1, r5
 800a616:	6928      	ldr	r0, [r5, #16]
 800a618:	47a0      	blx	r4
          if (err == ERR_ABRT) {
 800a61a:	f110 0f0d 	cmn.w	r0, #13
 800a61e:	f43f af09 	beq.w	800a434 <tcp_input+0x244>
          if (err != ERR_OK) {
 800a622:	b110      	cbz	r0, 800a62a <tcp_input+0x43a>
            pcb->refused_data = recv_data;
 800a624:	4b39      	ldr	r3, [pc, #228]	; (800a70c <tcp_input+0x51c>)
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	676b      	str	r3, [r5, #116]	; 0x74
        if (recv_flags & TF_GOT_FIN) {
 800a62a:	4b35      	ldr	r3, [pc, #212]	; (800a700 <tcp_input+0x510>)
 800a62c:	781b      	ldrb	r3, [r3, #0]
 800a62e:	f013 0f20 	tst.w	r3, #32
 800a632:	d005      	beq.n	800a640 <tcp_input+0x450>
          if (pcb->refused_data != NULL) {
 800a634:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800a636:	b313      	cbz	r3, 800a67e <tcp_input+0x48e>
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800a638:	7b5a      	ldrb	r2, [r3, #13]
 800a63a:	f042 0220 	orr.w	r2, r2, #32
 800a63e:	735a      	strb	r2, [r3, #13]
        tcp_input_pcb = NULL;
 800a640:	2200      	movs	r2, #0
 800a642:	4b2e      	ldr	r3, [pc, #184]	; (800a6fc <tcp_input+0x50c>)
 800a644:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800a646:	4628      	mov	r0, r5
 800a648:	f7fe fcda 	bl	8009000 <tcp_input_delayed_close>
 800a64c:	2800      	cmp	r0, #0
 800a64e:	f47f aef1 	bne.w	800a434 <tcp_input+0x244>
        tcp_output(pcb);
 800a652:	4628      	mov	r0, r5
 800a654:	f000 fdb6 	bl	800b1c4 <tcp_output>
 800a658:	e6ec      	b.n	800a434 <tcp_input+0x244>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800a65a:	2000      	movs	r0, #0
 800a65c:	e7b7      	b.n	800a5ce <tcp_input+0x3de>
            pbuf_free(recv_data);
 800a65e:	4b2b      	ldr	r3, [pc, #172]	; (800a70c <tcp_input+0x51c>)
 800a660:	6818      	ldr	r0, [r3, #0]
 800a662:	f7fd f971 	bl	8007948 <pbuf_free>
            tcp_abort(pcb);
 800a666:	4628      	mov	r0, r5
 800a668:	f7fe faa0 	bl	8008bac <tcp_abort>
            goto aborted;
 800a66c:	e6e2      	b.n	800a434 <tcp_input+0x244>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800a66e:	2300      	movs	r3, #0
 800a670:	4a26      	ldr	r2, [pc, #152]	; (800a70c <tcp_input+0x51c>)
 800a672:	6812      	ldr	r2, [r2, #0]
 800a674:	4629      	mov	r1, r5
 800a676:	4618      	mov	r0, r3
 800a678:	f7fe f954 	bl	8008924 <tcp_recv_null>
 800a67c:	e7cd      	b.n	800a61a <tcp_input+0x42a>
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800a67e:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 800a680:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800a684:	d001      	beq.n	800a68a <tcp_input+0x49a>
              pcb->rcv_wnd++;
 800a686:	3301      	adds	r3, #1
 800a688:	852b      	strh	r3, [r5, #40]	; 0x28
            TCP_EVENT_CLOSED(pcb, err);
 800a68a:	f8d5 4080 	ldr.w	r4, [r5, #128]	; 0x80
 800a68e:	b144      	cbz	r4, 800a6a2 <tcp_input+0x4b2>
 800a690:	2300      	movs	r3, #0
 800a692:	461a      	mov	r2, r3
 800a694:	4629      	mov	r1, r5
 800a696:	6928      	ldr	r0, [r5, #16]
 800a698:	47a0      	blx	r4
            if (err == ERR_ABRT) {
 800a69a:	f110 0f0d 	cmn.w	r0, #13
 800a69e:	d1cf      	bne.n	800a640 <tcp_input+0x450>
 800a6a0:	e6c8      	b.n	800a434 <tcp_input+0x244>
            TCP_EVENT_CLOSED(pcb, err);
 800a6a2:	2000      	movs	r0, #0
 800a6a4:	e7f9      	b.n	800a69a <tcp_input+0x4aa>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800a6a6:	4b0f      	ldr	r3, [pc, #60]	; (800a6e4 <tcp_input+0x4f4>)
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	8998      	ldrh	r0, [r3, #12]
 800a6ac:	f7fb f866 	bl	800577c <lwip_htons>
 800a6b0:	f010 0f04 	tst.w	r0, #4
 800a6b4:	d003      	beq.n	800a6be <tcp_input+0x4ce>
    pbuf_free(p);
 800a6b6:	4620      	mov	r0, r4
 800a6b8:	f7fd f946 	bl	8007948 <pbuf_free>
 800a6bc:	e5e3      	b.n	800a286 <tcp_input+0x96>
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a6be:	4b09      	ldr	r3, [pc, #36]	; (800a6e4 <tcp_input+0x4f4>)
 800a6c0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800a6c2:	4a14      	ldr	r2, [pc, #80]	; (800a714 <tcp_input+0x524>)
 800a6c4:	4914      	ldr	r1, [pc, #80]	; (800a718 <tcp_input+0x528>)
 800a6c6:	8808      	ldrh	r0, [r1, #0]
 800a6c8:	4914      	ldr	r1, [pc, #80]	; (800a71c <tcp_input+0x52c>)
 800a6ca:	6809      	ldr	r1, [r1, #0]
 800a6cc:	881d      	ldrh	r5, [r3, #0]
 800a6ce:	9501      	str	r5, [sp, #4]
 800a6d0:	885b      	ldrh	r3, [r3, #2]
 800a6d2:	9300      	str	r3, [sp, #0]
 800a6d4:	4613      	mov	r3, r2
 800a6d6:	3204      	adds	r2, #4
 800a6d8:	4401      	add	r1, r0
 800a6da:	4811      	ldr	r0, [pc, #68]	; (800a720 <tcp_input+0x530>)
 800a6dc:	6800      	ldr	r0, [r0, #0]
 800a6de:	f000 fecd 	bl	800b47c <tcp_rst>
 800a6e2:	e7e8      	b.n	800a6b6 <tcp_input+0x4c6>
 800a6e4:	20003fb0 	.word	0x20003fb0
 800a6e8:	0800ec34 	.word	0x0800ec34
 800a6ec:	0800eb7c 	.word	0x0800eb7c
 800a6f0:	0800d378 	.word	0x0800d378
 800a6f4:	2000426c 	.word	0x2000426c
 800a6f8:	20007984 	.word	0x20007984
 800a6fc:	20007990 	.word	0x20007990
 800a700:	20003fa4 	.word	0x20003fa4
 800a704:	2000797c 	.word	0x2000797c
 800a708:	20003f9c 	.word	0x20003f9c
 800a70c:	20003fa0 	.word	0x20003fa0
 800a710:	0800ebac 	.word	0x0800ebac
 800a714:	2000427c 	.word	0x2000427c
 800a718:	20003fbe 	.word	0x20003fbe
 800a71c:	20003fa8 	.word	0x20003fa8
 800a720:	20003f84 	.word	0x20003f84

0800a724 <tcp_trigger_input_pcb_close>:
}

void
tcp_trigger_input_pcb_close(void)
{
  recv_flags |= TF_CLOSED;
 800a724:	4a02      	ldr	r2, [pc, #8]	; (800a730 <tcp_trigger_input_pcb_close+0xc>)
 800a726:	7813      	ldrb	r3, [r2, #0]
 800a728:	f043 0310 	orr.w	r3, r3, #16
 800a72c:	7013      	strb	r3, [r2, #0]
 800a72e:	4770      	bx	lr
 800a730:	20003fa4 	.word	0x20003fa4

0800a734 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800a734:	b508      	push	{r3, lr}
  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800a736:	7d03      	ldrb	r3, [r0, #20]
 800a738:	2b04      	cmp	r3, #4
 800a73a:	d005      	beq.n	800a748 <tcp_write_checks+0x14>
 800a73c:	2b07      	cmp	r3, #7
 800a73e:	d003      	beq.n	800a748 <tcp_write_checks+0x14>
      (pcb->state != CLOSE_WAIT) &&
 800a740:	2b02      	cmp	r3, #2
 800a742:	d001      	beq.n	800a748 <tcp_write_checks+0x14>
      (pcb->state != SYN_SENT) &&
 800a744:	2b03      	cmp	r3, #3
 800a746:	d139      	bne.n	800a7bc <tcp_write_checks+0x88>
      (pcb->state != SYN_RCVD)) {
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
  } else if (len == 0) {
 800a748:	2900      	cmp	r1, #0
 800a74a:	d03a      	beq.n	800a7c2 <tcp_write_checks+0x8e>
    return ERR_OK;
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800a74c:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 800a750:	4299      	cmp	r1, r3
 800a752:	d808      	bhi.n	800a766 <tcp_write_checks+0x32>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 800a754:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800a758:	2b08      	cmp	r3, #8
 800a75a:	d80b      	bhi.n	800a774 <tcp_write_checks+0x40>
      pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
    return ERR_MEM;
  }
  if (pcb->snd_queuelen != 0) {
 800a75c:	b1f3      	cbz	r3, 800a79c <tcp_write_checks+0x68>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800a75e:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800a760:	b17b      	cbz	r3, 800a782 <tcp_write_checks+0x4e>
      pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
      pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800a762:	2000      	movs	r0, #0
 800a764:	bd08      	pop	{r3, pc}
    pcb->flags |= TF_NAGLEMEMERR;
 800a766:	7e83      	ldrb	r3, [r0, #26]
 800a768:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a76c:	7683      	strb	r3, [r0, #26]
    return ERR_MEM;
 800a76e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a772:	bd08      	pop	{r3, pc}
    pcb->flags |= TF_NAGLEMEMERR;
 800a774:	7e83      	ldrb	r3, [r0, #26]
 800a776:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a77a:	7683      	strb	r3, [r0, #26]
    return ERR_MEM;
 800a77c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a780:	bd08      	pop	{r3, pc}
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800a782:	6e83      	ldr	r3, [r0, #104]	; 0x68
 800a784:	b10b      	cbz	r3, 800a78a <tcp_write_checks+0x56>
  return ERR_OK;
 800a786:	2000      	movs	r0, #0
 800a788:	bd08      	pop	{r3, pc}
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800a78a:	4b0f      	ldr	r3, [pc, #60]	; (800a7c8 <tcp_write_checks+0x94>)
 800a78c:	f44f 72ab 	mov.w	r2, #342	; 0x156
 800a790:	490e      	ldr	r1, [pc, #56]	; (800a7cc <tcp_write_checks+0x98>)
 800a792:	480f      	ldr	r0, [pc, #60]	; (800a7d0 <tcp_write_checks+0x9c>)
 800a794:	f002 fa2b 	bl	800cbee <iprintf>
  return ERR_OK;
 800a798:	2000      	movs	r0, #0
 800a79a:	bd08      	pop	{r3, pc}
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800a79c:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800a79e:	b143      	cbz	r3, 800a7b2 <tcp_write_checks+0x7e>
 800a7a0:	4b09      	ldr	r3, [pc, #36]	; (800a7c8 <tcp_write_checks+0x94>)
 800a7a2:	f240 1259 	movw	r2, #345	; 0x159
 800a7a6:	490b      	ldr	r1, [pc, #44]	; (800a7d4 <tcp_write_checks+0xa0>)
 800a7a8:	4809      	ldr	r0, [pc, #36]	; (800a7d0 <tcp_write_checks+0x9c>)
 800a7aa:	f002 fa20 	bl	800cbee <iprintf>
  return ERR_OK;
 800a7ae:	2000      	movs	r0, #0
 800a7b0:	bd08      	pop	{r3, pc}
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800a7b2:	6e83      	ldr	r3, [r0, #104]	; 0x68
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d1f3      	bne.n	800a7a0 <tcp_write_checks+0x6c>
  return ERR_OK;
 800a7b8:	2000      	movs	r0, #0
}
 800a7ba:	bd08      	pop	{r3, pc}
    return ERR_CONN;
 800a7bc:	f06f 000a 	mvn.w	r0, #10
 800a7c0:	bd08      	pop	{r3, pc}
    return ERR_OK;
 800a7c2:	2000      	movs	r0, #0
 800a7c4:	bd08      	pop	{r3, pc}
 800a7c6:	bf00      	nop
 800a7c8:	0800f144 	.word	0x0800f144
 800a7cc:	0800f178 	.word	0x0800f178
 800a7d0:	0800d378 	.word	0x0800d378
 800a7d4:	0800f1b4 	.word	0x0800f1b4

0800a7d8 <tcp_pbuf_prealloc>:
{
 800a7d8:	b570      	push	{r4, r5, r6, lr}
 800a7da:	460c      	mov	r4, r1
 800a7dc:	461e      	mov	r6, r3
 800a7de:	f89d 3018 	ldrb.w	r3, [sp, #24]
  if (length < max_length) {
 800a7e2:	4291      	cmp	r1, r2
 800a7e4:	d215      	bcs.n	800a812 <tcp_pbuf_prealloc+0x3a>
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800a7e6:	f89d 1014 	ldrb.w	r1, [sp, #20]
 800a7ea:	f011 0f02 	tst.w	r1, #2
 800a7ee:	d108      	bne.n	800a802 <tcp_pbuf_prealloc+0x2a>
        (!(pcb->flags & TF_NODELAY) &&
 800a7f0:	9904      	ldr	r1, [sp, #16]
 800a7f2:	7e89      	ldrb	r1, [r1, #26]
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800a7f4:	f011 0f40 	tst.w	r1, #64	; 0x40
 800a7f8:	d126      	bne.n	800a848 <tcp_pbuf_prealloc+0x70>
        (!(pcb->flags & TF_NODELAY) &&
 800a7fa:	b113      	cbz	r3, 800a802 <tcp_pbuf_prealloc+0x2a>
          pcb->unsent != NULL ||
 800a7fc:	9b04      	ldr	r3, [sp, #16]
 800a7fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
         (!first_seg ||
 800a800:	b1e3      	cbz	r3, 800a83c <tcp_pbuf_prealloc+0x64>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800a802:	f204 211b 	addw	r1, r4, #539	; 0x21b
 800a806:	f021 0103 	bic.w	r1, r1, #3
 800a80a:	428a      	cmp	r2, r1
 800a80c:	bf28      	it	cs
 800a80e:	460a      	movcs	r2, r1
 800a810:	b291      	uxth	r1, r2
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800a812:	2200      	movs	r2, #0
 800a814:	f7fd f904 	bl	8007a20 <pbuf_alloc>
  if (p == NULL) {
 800a818:	4605      	mov	r5, r0
 800a81a:	b168      	cbz	r0, 800a838 <tcp_pbuf_prealloc+0x60>
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800a81c:	6803      	ldr	r3, [r0, #0]
 800a81e:	b133      	cbz	r3, 800a82e <tcp_pbuf_prealloc+0x56>
 800a820:	4b0a      	ldr	r3, [pc, #40]	; (800a84c <tcp_pbuf_prealloc+0x74>)
 800a822:	f44f 7288 	mov.w	r2, #272	; 0x110
 800a826:	490a      	ldr	r1, [pc, #40]	; (800a850 <tcp_pbuf_prealloc+0x78>)
 800a828:	480a      	ldr	r0, [pc, #40]	; (800a854 <tcp_pbuf_prealloc+0x7c>)
 800a82a:	f002 f9e0 	bl	800cbee <iprintf>
  *oversize = p->len - length;
 800a82e:	896b      	ldrh	r3, [r5, #10]
 800a830:	1b1b      	subs	r3, r3, r4
 800a832:	8033      	strh	r3, [r6, #0]
  p->len = p->tot_len = length;
 800a834:	812c      	strh	r4, [r5, #8]
 800a836:	816c      	strh	r4, [r5, #10]
}
 800a838:	4628      	mov	r0, r5
 800a83a:	bd70      	pop	{r4, r5, r6, pc}
          pcb->unacked != NULL))) {
 800a83c:	9b04      	ldr	r3, [sp, #16]
 800a83e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
          pcb->unsent != NULL ||
 800a840:	2b00      	cmp	r3, #0
 800a842:	d1de      	bne.n	800a802 <tcp_pbuf_prealloc+0x2a>
  u16_t alloc = length;
 800a844:	4621      	mov	r1, r4
 800a846:	e7e4      	b.n	800a812 <tcp_pbuf_prealloc+0x3a>
 800a848:	4621      	mov	r1, r4
 800a84a:	e7e2      	b.n	800a812 <tcp_pbuf_prealloc+0x3a>
 800a84c:	0800f144 	.word	0x0800f144
 800a850:	0800ef54 	.word	0x0800ef54
 800a854:	0800d378 	.word	0x0800d378

0800a858 <tcp_create_segment>:
{
 800a858:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a85c:	4680      	mov	r8, r0
 800a85e:	460e      	mov	r6, r1
 800a860:	4617      	mov	r7, r2
 800a862:	4699      	mov	r9, r3
 800a864:	f89d a020 	ldrb.w	sl, [sp, #32]
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800a868:	f01a 0f01 	tst.w	sl, #1
 800a86c:	d03c      	beq.n	800a8e8 <tcp_create_segment+0x90>
 800a86e:	2504      	movs	r5, #4
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800a870:	2003      	movs	r0, #3
 800a872:	f7fc fe79 	bl	8007568 <memp_malloc>
 800a876:	4604      	mov	r4, r0
 800a878:	2800      	cmp	r0, #0
 800a87a:	d037      	beq.n	800a8ec <tcp_create_segment+0x94>
  seg->flags = optflags;
 800a87c:	f880 a00a 	strb.w	sl, [r0, #10]
  seg->next = NULL;
 800a880:	2300      	movs	r3, #0
 800a882:	6003      	str	r3, [r0, #0]
  seg->p = p;
 800a884:	6046      	str	r6, [r0, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800a886:	8933      	ldrh	r3, [r6, #8]
 800a888:	fa1f fa85 	uxth.w	sl, r5
 800a88c:	4553      	cmp	r3, sl
 800a88e:	d331      	bcc.n	800a8f4 <tcp_create_segment+0x9c>
  seg->len = p->tot_len - optlen;
 800a890:	8933      	ldrh	r3, [r6, #8]
 800a892:	eba3 030a 	sub.w	r3, r3, sl
 800a896:	8123      	strh	r3, [r4, #8]
  if (pbuf_header(p, TCP_HLEN)) {
 800a898:	2114      	movs	r1, #20
 800a89a:	4630      	mov	r0, r6
 800a89c:	f7fd f84a 	bl	8007934 <pbuf_header>
 800a8a0:	bb78      	cbnz	r0, 800a902 <tcp_create_segment+0xaa>
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800a8a2:	6863      	ldr	r3, [r4, #4]
 800a8a4:	685e      	ldr	r6, [r3, #4]
 800a8a6:	60e6      	str	r6, [r4, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800a8a8:	f8b8 0016 	ldrh.w	r0, [r8, #22]
 800a8ac:	f7fa ff66 	bl	800577c <lwip_htons>
 800a8b0:	8030      	strh	r0, [r6, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800a8b2:	68e6      	ldr	r6, [r4, #12]
 800a8b4:	f8b8 0018 	ldrh.w	r0, [r8, #24]
 800a8b8:	f7fa ff60 	bl	800577c <lwip_htons>
 800a8bc:	8070      	strh	r0, [r6, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800a8be:	68e6      	ldr	r6, [r4, #12]
 800a8c0:	4648      	mov	r0, r9
 800a8c2:	f7fa ff5e 	bl	8005782 <lwip_htonl>
 800a8c6:	6070      	str	r0, [r6, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 800a8c8:	68e6      	ldr	r6, [r4, #12]
 800a8ca:	08a8      	lsrs	r0, r5, #2
 800a8cc:	3005      	adds	r0, #5
 800a8ce:	0300      	lsls	r0, r0, #12
 800a8d0:	b280      	uxth	r0, r0
 800a8d2:	4338      	orrs	r0, r7
 800a8d4:	f7fa ff52 	bl	800577c <lwip_htons>
 800a8d8:	81b0      	strh	r0, [r6, #12]
  seg->tcphdr->urgp = 0;
 800a8da:	68e3      	ldr	r3, [r4, #12]
 800a8dc:	2200      	movs	r2, #0
 800a8de:	749a      	strb	r2, [r3, #18]
 800a8e0:	74da      	strb	r2, [r3, #19]
}
 800a8e2:	4620      	mov	r0, r4
 800a8e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800a8e8:	2500      	movs	r5, #0
 800a8ea:	e7c1      	b.n	800a870 <tcp_create_segment+0x18>
    pbuf_free(p);
 800a8ec:	4630      	mov	r0, r6
 800a8ee:	f7fd f82b 	bl	8007948 <pbuf_free>
    return NULL;
 800a8f2:	e7f6      	b.n	800a8e2 <tcp_create_segment+0x8a>
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800a8f4:	4b05      	ldr	r3, [pc, #20]	; (800a90c <tcp_create_segment+0xb4>)
 800a8f6:	22ba      	movs	r2, #186	; 0xba
 800a8f8:	4905      	ldr	r1, [pc, #20]	; (800a910 <tcp_create_segment+0xb8>)
 800a8fa:	4806      	ldr	r0, [pc, #24]	; (800a914 <tcp_create_segment+0xbc>)
 800a8fc:	f002 f977 	bl	800cbee <iprintf>
 800a900:	e7c6      	b.n	800a890 <tcp_create_segment+0x38>
    tcp_seg_free(seg);
 800a902:	4620      	mov	r0, r4
 800a904:	f7fd fc46 	bl	8008194 <tcp_seg_free>
    return NULL;
 800a908:	2400      	movs	r4, #0
 800a90a:	e7ea      	b.n	800a8e2 <tcp_create_segment+0x8a>
 800a90c:	0800f144 	.word	0x0800f144
 800a910:	0800edcc 	.word	0x0800edcc
 800a914:	0800d378 	.word	0x0800d378

0800a918 <tcp_output_alloc_header>:
{
 800a918:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a91c:	4606      	mov	r6, r0
 800a91e:	460c      	mov	r4, r1
 800a920:	4698      	mov	r8, r3
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800a922:	4411      	add	r1, r2
 800a924:	b289      	uxth	r1, r1
 800a926:	3114      	adds	r1, #20
 800a928:	2200      	movs	r2, #0
 800a92a:	b289      	uxth	r1, r1
 800a92c:	2001      	movs	r0, #1
 800a92e:	f7fd f877 	bl	8007a20 <pbuf_alloc>
  if (p != NULL) {
 800a932:	4607      	mov	r7, r0
 800a934:	b348      	cbz	r0, 800a98a <tcp_output_alloc_header+0x72>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800a936:	8942      	ldrh	r2, [r0, #10]
 800a938:	f104 0314 	add.w	r3, r4, #20
 800a93c:	429a      	cmp	r2, r3
 800a93e:	db27      	blt.n	800a990 <tcp_output_alloc_header+0x78>
    tcphdr = (struct tcp_hdr *)p->payload;
 800a940:	687d      	ldr	r5, [r7, #4]
    tcphdr->src = lwip_htons(pcb->local_port);
 800a942:	8af0      	ldrh	r0, [r6, #22]
 800a944:	f7fa ff1a 	bl	800577c <lwip_htons>
 800a948:	8028      	strh	r0, [r5, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 800a94a:	8b30      	ldrh	r0, [r6, #24]
 800a94c:	f7fa ff16 	bl	800577c <lwip_htons>
 800a950:	8068      	strh	r0, [r5, #2]
    tcphdr->seqno = seqno_be;
 800a952:	f8c5 8004 	str.w	r8, [r5, #4]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800a956:	6a70      	ldr	r0, [r6, #36]	; 0x24
 800a958:	f7fa ff13 	bl	8005782 <lwip_htonl>
 800a95c:	60a8      	str	r0, [r5, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 800a95e:	08a0      	lsrs	r0, r4, #2
 800a960:	3005      	adds	r0, #5
 800a962:	0300      	lsls	r0, r0, #12
 800a964:	b280      	uxth	r0, r0
 800a966:	f040 0010 	orr.w	r0, r0, #16
 800a96a:	f7fa ff07 	bl	800577c <lwip_htons>
 800a96e:	81a8      	strh	r0, [r5, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800a970:	8d70      	ldrh	r0, [r6, #42]	; 0x2a
 800a972:	f7fa ff03 	bl	800577c <lwip_htons>
 800a976:	81e8      	strh	r0, [r5, #14]
    tcphdr->chksum = 0;
 800a978:	2300      	movs	r3, #0
 800a97a:	742b      	strb	r3, [r5, #16]
 800a97c:	746b      	strb	r3, [r5, #17]
    tcphdr->urgp = 0;
 800a97e:	74ab      	strb	r3, [r5, #18]
 800a980:	74eb      	strb	r3, [r5, #19]
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800a982:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a984:	8d72      	ldrh	r2, [r6, #42]	; 0x2a
 800a986:	4413      	add	r3, r2
 800a988:	62f3      	str	r3, [r6, #44]	; 0x2c
}
 800a98a:	4638      	mov	r0, r7
 800a98c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800a990:	4b03      	ldr	r3, [pc, #12]	; (800a9a0 <tcp_output_alloc_header+0x88>)
 800a992:	2273      	movs	r2, #115	; 0x73
 800a994:	4903      	ldr	r1, [pc, #12]	; (800a9a4 <tcp_output_alloc_header+0x8c>)
 800a996:	4804      	ldr	r0, [pc, #16]	; (800a9a8 <tcp_output_alloc_header+0x90>)
 800a998:	f002 f929 	bl	800cbee <iprintf>
 800a99c:	e7d0      	b.n	800a940 <tcp_output_alloc_header+0x28>
 800a99e:	bf00      	nop
 800a9a0:	0800f144 	.word	0x0800f144
 800a9a4:	0800ef24 	.word	0x0800ef24
 800a9a8:	0800d378 	.word	0x0800d378

0800a9ac <tcp_output_segment>:
{
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 800a9ac:	6843      	ldr	r3, [r0, #4]
 800a9ae:	89db      	ldrh	r3, [r3, #14]
 800a9b0:	2b01      	cmp	r3, #1
 800a9b2:	d001      	beq.n	800a9b8 <tcp_output_segment+0xc>
    /* This can happen if the pbuf of this segment is still referenced by the
       netif driver due to deferred transmission. Since this function modifies
       p->len, we must not continue in this case. */
    return ERR_OK;
 800a9b4:	2000      	movs	r0, #0
 800a9b6:	4770      	bx	lr
{
 800a9b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a9ba:	b085      	sub	sp, #20
 800a9bc:	4616      	mov	r6, r2
 800a9be:	460d      	mov	r5, r1
 800a9c0:	4604      	mov	r4, r0
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800a9c2:	68c7      	ldr	r7, [r0, #12]
 800a9c4:	6a48      	ldr	r0, [r1, #36]	; 0x24
 800a9c6:	f7fa fedc 	bl	8005782 <lwip_htonl>
 800a9ca:	60b8      	str	r0, [r7, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800a9cc:	68e7      	ldr	r7, [r4, #12]
 800a9ce:	8d68      	ldrh	r0, [r5, #42]	; 0x2a
 800a9d0:	f7fa fed4 	bl	800577c <lwip_htons>
 800a9d4:	81f8      	strh	r0, [r7, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800a9d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a9d8:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
 800a9da:	4413      	add	r3, r2
 800a9dc:	62eb      	str	r3, [r5, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800a9de:	68e7      	ldr	r7, [r4, #12]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800a9e0:	7aa3      	ldrb	r3, [r4, #10]
 800a9e2:	f013 0f01 	tst.w	r3, #1
 800a9e6:	d126      	bne.n	800aa36 <tcp_output_segment+0x8a>
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800a9e8:	f9b5 3030 	ldrsh.w	r3, [r5, #48]	; 0x30
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	db2d      	blt.n	800aa4c <tcp_output_segment+0xa0>
    pcb->rtime = 0;
  }

  if (pcb->rttest == 0) {
 800a9f0:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d02d      	beq.n	800aa52 <tcp_output_segment+0xa6>
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800a9f6:	68e3      	ldr	r3, [r4, #12]
 800a9f8:	6862      	ldr	r2, [r4, #4]
 800a9fa:	6851      	ldr	r1, [r2, #4]
 800a9fc:	1a5b      	subs	r3, r3, r1
 800a9fe:	b29b      	uxth	r3, r3
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800aa00:	8951      	ldrh	r1, [r2, #10]
 800aa02:	1ac9      	subs	r1, r1, r3
 800aa04:	8151      	strh	r1, [r2, #10]
  seg->p->tot_len -= len;
 800aa06:	6861      	ldr	r1, [r4, #4]
 800aa08:	890a      	ldrh	r2, [r1, #8]
 800aa0a:	1ad3      	subs	r3, r2, r3
 800aa0c:	810b      	strh	r3, [r1, #8]

  seg->p->payload = seg->tcphdr;
 800aa0e:	6863      	ldr	r3, [r4, #4]
 800aa10:	68e2      	ldr	r2, [r4, #12]
 800aa12:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800aa14:	68e3      	ldr	r3, [r4, #12]
 800aa16:	2200      	movs	r2, #0
 800aa18:	741a      	strb	r2, [r3, #16]
 800aa1a:	745a      	strb	r2, [r3, #17]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800aa1c:	6860      	ldr	r0, [r4, #4]
 800aa1e:	7aab      	ldrb	r3, [r5, #10]
 800aa20:	7a6a      	ldrb	r2, [r5, #9]
 800aa22:	9602      	str	r6, [sp, #8]
 800aa24:	2106      	movs	r1, #6
 800aa26:	9101      	str	r1, [sp, #4]
 800aa28:	9200      	str	r2, [sp, #0]
 800aa2a:	1d2a      	adds	r2, r5, #4
 800aa2c:	4629      	mov	r1, r5
 800aa2e:	f7fb fdf5 	bl	800661c <ip4_output_if>
    pcb->tos, IP_PROTO_TCP, netif);
  NETIF_SET_HWADDRHINT(netif, NULL);
  return err;
}
 800aa32:	b005      	add	sp, #20
 800aa34:	bdf0      	pop	{r4, r5, r6, r7, pc}
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 800aa36:	1d29      	adds	r1, r5, #4
 800aa38:	f44f 7006 	mov.w	r0, #536	; 0x218
 800aa3c:	f7fe f9aa 	bl	8008d94 <tcp_eff_send_mss_impl>
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800aa40:	f040 7001 	orr.w	r0, r0, #33816576	; 0x2040000
 800aa44:	f7fa fe9d 	bl	8005782 <lwip_htonl>
 800aa48:	6178      	str	r0, [r7, #20]
 800aa4a:	e7cd      	b.n	800a9e8 <tcp_output_segment+0x3c>
    pcb->rtime = 0;
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	862b      	strh	r3, [r5, #48]	; 0x30
 800aa50:	e7ce      	b.n	800a9f0 <tcp_output_segment+0x44>
    pcb->rttest = tcp_ticks;
 800aa52:	4b04      	ldr	r3, [pc, #16]	; (800aa64 <tcp_output_segment+0xb8>)
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	636b      	str	r3, [r5, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800aa58:	68e3      	ldr	r3, [r4, #12]
 800aa5a:	6858      	ldr	r0, [r3, #4]
 800aa5c:	f7fa fe91 	bl	8005782 <lwip_htonl>
 800aa60:	63a8      	str	r0, [r5, #56]	; 0x38
 800aa62:	e7c8      	b.n	800a9f6 <tcp_output_segment+0x4a>
 800aa64:	20007980 	.word	0x20007980

0800aa68 <tcp_write>:
{
 800aa68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa6c:	b091      	sub	sp, #68	; 0x44
 800aa6e:	4681      	mov	r9, r0
 800aa70:	9108      	str	r1, [sp, #32]
 800aa72:	4692      	mov	sl, r2
 800aa74:	9306      	str	r3, [sp, #24]
  u16_t oversize = 0;
 800aa76:	2300      	movs	r3, #0
 800aa78:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
 800aa7c:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 800aa80:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 800aa82:	9205      	str	r2, [sp, #20]
 800aa84:	085b      	lsrs	r3, r3, #1
 800aa86:	4293      	cmp	r3, r2
 800aa88:	bf28      	it	cs
 800aa8a:	4613      	movcs	r3, r2
  mss_local = mss_local ? mss_local : pcb->mss;
 800aa8c:	b103      	cbz	r3, 800aa90 <tcp_write+0x28>
 800aa8e:	9305      	str	r3, [sp, #20]
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800aa90:	9b08      	ldr	r3, [sp, #32]
 800aa92:	b1cb      	cbz	r3, 800aac8 <tcp_write+0x60>
  err = tcp_write_checks(pcb, len);
 800aa94:	4651      	mov	r1, sl
 800aa96:	4648      	mov	r0, r9
 800aa98:	f7ff fe4c 	bl	800a734 <tcp_write_checks>
  if (err != ERR_OK) {
 800aa9c:	9009      	str	r0, [sp, #36]	; 0x24
 800aa9e:	2800      	cmp	r0, #0
 800aaa0:	f040 81b2 	bne.w	800ae08 <tcp_write+0x3a0>
  queuelen = pcb->snd_queuelen;
 800aaa4:	f8b9 6062 	ldrh.w	r6, [r9, #98]	; 0x62
  if (pcb->unsent != NULL) {
 800aaa8:	f8d9 b068 	ldr.w	fp, [r9, #104]	; 0x68
 800aaac:	f1bb 0f00 	cmp.w	fp, #0
 800aab0:	d116      	bne.n	800aae0 <tcp_write+0x78>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800aab2:	f8b9 4064 	ldrh.w	r4, [r9, #100]	; 0x64
 800aab6:	2c00      	cmp	r4, #0
 800aab8:	f040 80d8 	bne.w	800ac6c <tcp_write+0x204>
  u16_t extendlen = 0;
 800aabc:	940b      	str	r4, [sp, #44]	; 0x2c
  u16_t oversize_used = 0;
 800aabe:	940a      	str	r4, [sp, #40]	; 0x28
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800aac0:	46d8      	mov	r8, fp
  struct pbuf *concat_p = NULL;
 800aac2:	2300      	movs	r3, #0
 800aac4:	930c      	str	r3, [sp, #48]	; 0x30
 800aac6:	e0e3      	b.n	800ac90 <tcp_write+0x228>
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800aac8:	4bb1      	ldr	r3, [pc, #708]	; (800ad90 <tcp_write+0x328>)
 800aaca:	f44f 72c9 	mov.w	r2, #402	; 0x192
 800aace:	49b1      	ldr	r1, [pc, #708]	; (800ad94 <tcp_write+0x32c>)
 800aad0:	48b1      	ldr	r0, [pc, #708]	; (800ad98 <tcp_write+0x330>)
 800aad2:	f002 f88c 	bl	800cbee <iprintf>
 800aad6:	f06f 030f 	mvn.w	r3, #15
 800aada:	9309      	str	r3, [sp, #36]	; 0x24
 800aadc:	e194      	b.n	800ae08 <tcp_write+0x3a0>
         last_unsent = last_unsent->next);
 800aade:	46bb      	mov	fp, r7
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800aae0:	f8db 7000 	ldr.w	r7, [fp]
 800aae4:	2f00      	cmp	r7, #0
 800aae6:	d1fa      	bne.n	800aade <tcp_write+0x76>
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 800aae8:	f89b 300a 	ldrb.w	r3, [fp, #10]
 800aaec:	f013 0f01 	tst.w	r3, #1
 800aaf0:	d051      	beq.n	800ab96 <tcp_write+0x12e>
 800aaf2:	2404      	movs	r4, #4
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800aaf4:	f8bb 3008 	ldrh.w	r3, [fp, #8]
 800aaf8:	4423      	add	r3, r4
 800aafa:	9a05      	ldr	r2, [sp, #20]
 800aafc:	429a      	cmp	r2, r3
 800aafe:	db4c      	blt.n	800ab9a <tcp_write+0x132>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800ab00:	f8bb 3008 	ldrh.w	r3, [fp, #8]
 800ab04:	441c      	add	r4, r3
 800ab06:	b2a4      	uxth	r4, r4
 800ab08:	9b05      	ldr	r3, [sp, #20]
 800ab0a:	1b1c      	subs	r4, r3, r4
 800ab0c:	b2a3      	uxth	r3, r4
 800ab0e:	461a      	mov	r2, r3
 800ab10:	930b      	str	r3, [sp, #44]	; 0x2c
    oversize = pcb->unsent_oversize;
 800ab12:	f8b9 3064 	ldrh.w	r3, [r9, #100]	; 0x64
 800ab16:	930a      	str	r3, [sp, #40]	; 0x28
 800ab18:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
    if (oversize > 0) {
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d04e      	beq.n	800abbe <tcp_write+0x156>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800ab20:	429a      	cmp	r2, r3
 800ab22:	d342      	bcc.n	800abaa <tcp_write+0x142>
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800ab24:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800ab28:	459a      	cmp	sl, r3
 800ab2a:	d946      	bls.n	800abba <tcp_write+0x152>
 800ab2c:	461a      	mov	r2, r3
 800ab2e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800ab30:	4282      	cmp	r2, r0
 800ab32:	bfa8      	it	ge
 800ab34:	4602      	movge	r2, r0
 800ab36:	b292      	uxth	r2, r2
 800ab38:	920a      	str	r2, [sp, #40]	; 0x28
      oversize -= oversize_used;
 800ab3a:	1a9b      	subs	r3, r3, r2
 800ab3c:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
      space -= oversize_used;
 800ab40:	1a83      	subs	r3, r0, r2
 800ab42:	b29b      	uxth	r3, r3
 800ab44:	930b      	str	r3, [sp, #44]	; 0x2c
      seg = last_unsent;
 800ab46:	46d8      	mov	r8, fp
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800ab48:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800ab4c:	b14b      	cbz	r3, 800ab62 <tcp_write+0xfa>
 800ab4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab50:	4553      	cmp	r3, sl
 800ab52:	d006      	beq.n	800ab62 <tcp_write+0xfa>
 800ab54:	4b8e      	ldr	r3, [pc, #568]	; (800ad90 <tcp_write+0x328>)
 800ab56:	f240 12e1 	movw	r2, #481	; 0x1e1
 800ab5a:	4990      	ldr	r1, [pc, #576]	; (800ad9c <tcp_write+0x334>)
 800ab5c:	488e      	ldr	r0, [pc, #568]	; (800ad98 <tcp_write+0x330>)
 800ab5e:	f002 f846 	bl	800cbee <iprintf>
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800ab62:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ab64:	4552      	cmp	r2, sl
 800ab66:	f080 808f 	bcs.w	800ac88 <tcp_write+0x220>
 800ab6a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ab6c:	2900      	cmp	r1, #0
 800ab6e:	f000 8094 	beq.w	800ac9a <tcp_write+0x232>
 800ab72:	f8bb 3008 	ldrh.w	r3, [fp, #8]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	f000 8093 	beq.w	800aca2 <tcp_write+0x23a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800ab7c:	ebaa 0502 	sub.w	r5, sl, r2
 800ab80:	428d      	cmp	r5, r1
 800ab82:	bfa8      	it	ge
 800ab84:	460d      	movge	r5, r1
 800ab86:	b2ac      	uxth	r4, r5
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800ab88:	9b06      	ldr	r3, [sp, #24]
 800ab8a:	f013 0f01 	tst.w	r3, #1
 800ab8e:	d118      	bne.n	800abc2 <tcp_write+0x15a>
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800ab90:	f8db 3004 	ldr.w	r3, [fp, #4]
 800ab94:	e038      	b.n	800ac08 <tcp_write+0x1a0>
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 800ab96:	2400      	movs	r4, #0
 800ab98:	e7ac      	b.n	800aaf4 <tcp_write+0x8c>
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800ab9a:	4b7d      	ldr	r3, [pc, #500]	; (800ad90 <tcp_write+0x328>)
 800ab9c:	f240 12c7 	movw	r2, #455	; 0x1c7
 800aba0:	497f      	ldr	r1, [pc, #508]	; (800ada0 <tcp_write+0x338>)
 800aba2:	487d      	ldr	r0, [pc, #500]	; (800ad98 <tcp_write+0x330>)
 800aba4:	f002 f823 	bl	800cbee <iprintf>
 800aba8:	e7aa      	b.n	800ab00 <tcp_write+0x98>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800abaa:	4b79      	ldr	r3, [pc, #484]	; (800ad90 <tcp_write+0x328>)
 800abac:	f240 12d9 	movw	r2, #473	; 0x1d9
 800abb0:	497c      	ldr	r1, [pc, #496]	; (800ada4 <tcp_write+0x33c>)
 800abb2:	4879      	ldr	r0, [pc, #484]	; (800ad98 <tcp_write+0x330>)
 800abb4:	f002 f81b 	bl	800cbee <iprintf>
 800abb8:	e7b4      	b.n	800ab24 <tcp_write+0xbc>
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800abba:	4652      	mov	r2, sl
 800abbc:	e7b7      	b.n	800ab2e <tcp_write+0xc6>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800abbe:	46b8      	mov	r8, r7
 800abc0:	e7c2      	b.n	800ab48 <tcp_write+0xe0>
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800abc2:	2301      	movs	r3, #1
 800abc4:	9302      	str	r3, [sp, #8]
 800abc6:	9b06      	ldr	r3, [sp, #24]
 800abc8:	9301      	str	r3, [sp, #4]
 800abca:	f8cd 9000 	str.w	r9, [sp]
 800abce:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 800abd2:	460a      	mov	r2, r1
 800abd4:	4621      	mov	r1, r4
 800abd6:	2004      	movs	r0, #4
 800abd8:	f7ff fdfe 	bl	800a7d8 <tcp_pbuf_prealloc>
 800abdc:	4603      	mov	r3, r0
 800abde:	900c      	str	r0, [sp, #48]	; 0x30
 800abe0:	2800      	cmp	r0, #0
 800abe2:	f000 80f0 	beq.w	800adc6 <tcp_write+0x35e>
        TCP_DATA_COPY2(concat_p->payload, (const u8_t*)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800abe6:	4622      	mov	r2, r4
 800abe8:	9908      	ldr	r1, [sp, #32]
 800abea:	980a      	ldr	r0, [sp, #40]	; 0x28
 800abec:	4401      	add	r1, r0
 800abee:	461d      	mov	r5, r3
 800abf0:	6858      	ldr	r0, [r3, #4]
 800abf2:	f002 f968 	bl	800cec6 <memcpy>
        queuelen += pbuf_clen(concat_p);
 800abf6:	4628      	mov	r0, r5
 800abf8:	f7fd f86c 	bl	8007cd4 <pbuf_clen>
 800abfc:	4406      	add	r6, r0
 800abfe:	b2b6      	uxth	r6, r6
  u16_t extendlen = 0;
 800ac00:	2300      	movs	r3, #0
 800ac02:	930b      	str	r3, [sp, #44]	; 0x2c
 800ac04:	e01a      	b.n	800ac3c <tcp_write+0x1d4>
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800ac06:	4613      	mov	r3, r2
 800ac08:	681a      	ldr	r2, [r3, #0]
 800ac0a:	2a00      	cmp	r2, #0
 800ac0c:	d1fb      	bne.n	800ac06 <tcp_write+0x19e>
 800ac0e:	920c      	str	r2, [sp, #48]	; 0x30
        if (p->type == PBUF_ROM && (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800ac10:	7b1a      	ldrb	r2, [r3, #12]
 800ac12:	2a01      	cmp	r2, #1
 800ac14:	d017      	beq.n	800ac46 <tcp_write+0x1de>
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800ac16:	2201      	movs	r2, #1
 800ac18:	4621      	mov	r1, r4
 800ac1a:	2004      	movs	r0, #4
 800ac1c:	f7fc ff00 	bl	8007a20 <pbuf_alloc>
 800ac20:	900c      	str	r0, [sp, #48]	; 0x30
 800ac22:	2800      	cmp	r0, #0
 800ac24:	f000 80cf 	beq.w	800adc6 <tcp_write+0x35e>
          ((struct pbuf_rom*)concat_p)->payload = (const u8_t*)arg + pos;
 800ac28:	9b08      	ldr	r3, [sp, #32]
 800ac2a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ac2c:	440b      	add	r3, r1
 800ac2e:	6043      	str	r3, [r0, #4]
          queuelen += pbuf_clen(concat_p);
 800ac30:	f7fd f850 	bl	8007cd4 <pbuf_clen>
 800ac34:	4406      	add	r6, r0
 800ac36:	b2b6      	uxth	r6, r6
  u16_t extendlen = 0;
 800ac38:	2300      	movs	r3, #0
 800ac3a:	930b      	str	r3, [sp, #44]	; 0x2c
      pos += seglen;
 800ac3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac3e:	441c      	add	r4, r3
 800ac40:	b2a4      	uxth	r4, r4
      seg = last_unsent;
 800ac42:	46d8      	mov	r8, fp
 800ac44:	e024      	b.n	800ac90 <tcp_write+0x228>
        if (p->type == PBUF_ROM && (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800ac46:	685a      	ldr	r2, [r3, #4]
 800ac48:	895b      	ldrh	r3, [r3, #10]
 800ac4a:	4413      	add	r3, r2
 800ac4c:	9a08      	ldr	r2, [sp, #32]
 800ac4e:	429a      	cmp	r2, r3
 800ac50:	d1e1      	bne.n	800ac16 <tcp_write+0x1ae>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800ac52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac54:	b90b      	cbnz	r3, 800ac5a <tcp_write+0x1f2>
          extendlen = seglen;
 800ac56:	940b      	str	r4, [sp, #44]	; 0x2c
 800ac58:	e7f0      	b.n	800ac3c <tcp_write+0x1d4>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800ac5a:	4b4d      	ldr	r3, [pc, #308]	; (800ad90 <tcp_write+0x328>)
 800ac5c:	f44f 7203 	mov.w	r2, #524	; 0x20c
 800ac60:	4951      	ldr	r1, [pc, #324]	; (800ada8 <tcp_write+0x340>)
 800ac62:	484d      	ldr	r0, [pc, #308]	; (800ad98 <tcp_write+0x330>)
 800ac64:	f001 ffc3 	bl	800cbee <iprintf>
          extendlen = seglen;
 800ac68:	940b      	str	r4, [sp, #44]	; 0x2c
 800ac6a:	e7e7      	b.n	800ac3c <tcp_write+0x1d4>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800ac6c:	4b48      	ldr	r3, [pc, #288]	; (800ad90 <tcp_write+0x328>)
 800ac6e:	f240 2225 	movw	r2, #549	; 0x225
 800ac72:	494e      	ldr	r1, [pc, #312]	; (800adac <tcp_write+0x344>)
 800ac74:	4848      	ldr	r0, [pc, #288]	; (800ad98 <tcp_write+0x330>)
 800ac76:	f001 ffba 	bl	800cbee <iprintf>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800ac7a:	46d8      	mov	r8, fp
  u16_t extendlen = 0;
 800ac7c:	2300      	movs	r3, #0
 800ac7e:	930b      	str	r3, [sp, #44]	; 0x2c
  u16_t oversize_used = 0;
 800ac80:	930a      	str	r3, [sp, #40]	; 0x28
  u16_t pos = 0; /* position in 'arg' data */
 800ac82:	461c      	mov	r4, r3
  struct pbuf *concat_p = NULL;
 800ac84:	930c      	str	r3, [sp, #48]	; 0x30
 800ac86:	e003      	b.n	800ac90 <tcp_write+0x228>
 800ac88:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  u16_t extendlen = 0;
 800ac8a:	2300      	movs	r3, #0
 800ac8c:	930b      	str	r3, [sp, #44]	; 0x2c
  struct pbuf *concat_p = NULL;
 800ac8e:	930c      	str	r3, [sp, #48]	; 0x30
      queue = seg;
 800ac90:	2700      	movs	r7, #0
 800ac92:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 800ac96:	46bb      	mov	fp, r7
 800ac98:	e060      	b.n	800ad5c <tcp_write+0x2f4>
 800ac9a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  struct pbuf *concat_p = NULL;
 800ac9c:	2300      	movs	r3, #0
 800ac9e:	930c      	str	r3, [sp, #48]	; 0x30
 800aca0:	e7f6      	b.n	800ac90 <tcp_write+0x228>
  u16_t extendlen = 0;
 800aca2:	930b      	str	r3, [sp, #44]	; 0x2c
 800aca4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  struct pbuf *concat_p = NULL;
 800aca6:	2300      	movs	r3, #0
 800aca8:	930c      	str	r3, [sp, #48]	; 0x30
 800acaa:	e7f1      	b.n	800ac90 <tcp_write+0x228>
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800acac:	fab7 f387 	clz	r3, r7
 800acb0:	095b      	lsrs	r3, r3, #5
 800acb2:	9302      	str	r3, [sp, #8]
 800acb4:	9b06      	ldr	r3, [sp, #24]
 800acb6:	9301      	str	r3, [sp, #4]
 800acb8:	f8cd 9000 	str.w	r9, [sp]
 800acbc:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 800acc0:	9a05      	ldr	r2, [sp, #20]
 800acc2:	4629      	mov	r1, r5
 800acc4:	2000      	movs	r0, #0
 800acc6:	f7ff fd87 	bl	800a7d8 <tcp_pbuf_prealloc>
 800acca:	4680      	mov	r8, r0
 800accc:	2800      	cmp	r0, #0
 800acce:	d07a      	beq.n	800adc6 <tcp_write+0x35e>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800acd0:	8943      	ldrh	r3, [r0, #10]
 800acd2:	429d      	cmp	r5, r3
 800acd4:	d807      	bhi.n	800ace6 <tcp_write+0x27e>
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t*)arg + pos, seglen, &chksum, &chksum_swapped);
 800acd6:	462a      	mov	r2, r5
 800acd8:	9b08      	ldr	r3, [sp, #32]
 800acda:	1919      	adds	r1, r3, r4
 800acdc:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800ace0:	f002 f8f1 	bl	800cec6 <memcpy>
 800ace4:	e01d      	b.n	800ad22 <tcp_write+0x2ba>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800ace6:	4b2a      	ldr	r3, [pc, #168]	; (800ad90 <tcp_write+0x328>)
 800ace8:	f240 2241 	movw	r2, #577	; 0x241
 800acec:	4930      	ldr	r1, [pc, #192]	; (800adb0 <tcp_write+0x348>)
 800acee:	482a      	ldr	r0, [pc, #168]	; (800ad98 <tcp_write+0x330>)
 800acf0:	f001 ff7d 	bl	800cbee <iprintf>
 800acf4:	e7ef      	b.n	800acd6 <tcp_write+0x26e>
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800acf6:	2201      	movs	r2, #1
 800acf8:	4629      	mov	r1, r5
 800acfa:	2000      	movs	r0, #0
 800acfc:	f7fc fe90 	bl	8007a20 <pbuf_alloc>
 800ad00:	9007      	str	r0, [sp, #28]
 800ad02:	2800      	cmp	r0, #0
 800ad04:	d05f      	beq.n	800adc6 <tcp_write+0x35e>
      ((struct pbuf_rom*)p2)->payload = (const u8_t*)arg + pos;
 800ad06:	9b08      	ldr	r3, [sp, #32]
 800ad08:	4423      	add	r3, r4
 800ad0a:	6043      	str	r3, [r0, #4]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800ad0c:	2200      	movs	r2, #0
 800ad0e:	4611      	mov	r1, r2
 800ad10:	4610      	mov	r0, r2
 800ad12:	f7fc fe85 	bl	8007a20 <pbuf_alloc>
 800ad16:	4680      	mov	r8, r0
 800ad18:	2800      	cmp	r0, #0
 800ad1a:	d04d      	beq.n	800adb8 <tcp_write+0x350>
      pbuf_cat(p/*header*/, p2/*data*/);
 800ad1c:	9907      	ldr	r1, [sp, #28]
 800ad1e:	f7fc ffff 	bl	8007d20 <pbuf_cat>
    queuelen += pbuf_clen(p);
 800ad22:	4640      	mov	r0, r8
 800ad24:	f7fc ffd6 	bl	8007cd4 <pbuf_clen>
 800ad28:	4406      	add	r6, r0
 800ad2a:	b2b6      	uxth	r6, r6
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 800ad2c:	2e09      	cmp	r6, #9
 800ad2e:	d847      	bhi.n	800adc0 <tcp_write+0x358>
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800ad30:	f8d9 3058 	ldr.w	r3, [r9, #88]	; 0x58
 800ad34:	2200      	movs	r2, #0
 800ad36:	9200      	str	r2, [sp, #0]
 800ad38:	4423      	add	r3, r4
 800ad3a:	4641      	mov	r1, r8
 800ad3c:	4648      	mov	r0, r9
 800ad3e:	f7ff fd8b 	bl	800a858 <tcp_create_segment>
 800ad42:	4680      	mov	r8, r0
 800ad44:	2800      	cmp	r0, #0
 800ad46:	d03e      	beq.n	800adc6 <tcp_write+0x35e>
    if (queue == NULL) {
 800ad48:	2f00      	cmp	r7, #0
 800ad4a:	d069      	beq.n	800ae20 <tcp_write+0x3b8>
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800ad4c:	f1bb 0f00 	cmp.w	fp, #0
 800ad50:	d05e      	beq.n	800ae10 <tcp_write+0x3a8>
      prev_seg->next = seg;
 800ad52:	f8cb 8000 	str.w	r8, [fp]
    pos += seglen;
 800ad56:	442c      	add	r4, r5
 800ad58:	b2a4      	uxth	r4, r4
    prev_seg = seg;
 800ad5a:	46c3      	mov	fp, r8
  while (pos < len) {
 800ad5c:	4554      	cmp	r4, sl
 800ad5e:	d261      	bcs.n	800ae24 <tcp_write+0x3bc>
    u16_t left = len - pos;
 800ad60:	ebaa 0504 	sub.w	r5, sl, r4
 800ad64:	b2ad      	uxth	r5, r5
    u16_t seglen = LWIP_MIN(left, max_len);
 800ad66:	9b05      	ldr	r3, [sp, #20]
 800ad68:	429d      	cmp	r5, r3
 800ad6a:	bf28      	it	cs
 800ad6c:	461d      	movcs	r5, r3
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800ad6e:	9b06      	ldr	r3, [sp, #24]
 800ad70:	f013 0f01 	tst.w	r3, #1
 800ad74:	d19a      	bne.n	800acac <tcp_write+0x244>
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800ad76:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d0bb      	beq.n	800acf6 <tcp_write+0x28e>
 800ad7e:	4b04      	ldr	r3, [pc, #16]	; (800ad90 <tcp_write+0x328>)
 800ad80:	f240 224b 	movw	r2, #587	; 0x24b
 800ad84:	490b      	ldr	r1, [pc, #44]	; (800adb4 <tcp_write+0x34c>)
 800ad86:	4804      	ldr	r0, [pc, #16]	; (800ad98 <tcp_write+0x330>)
 800ad88:	f001 ff31 	bl	800cbee <iprintf>
 800ad8c:	e7b3      	b.n	800acf6 <tcp_write+0x28e>
 800ad8e:	bf00      	nop
 800ad90:	0800f144 	.word	0x0800f144
 800ad94:	0800ef68 	.word	0x0800ef68
 800ad98:	0800d378 	.word	0x0800d378
 800ad9c:	0800efd4 	.word	0x0800efd4
 800ada0:	0800ef9c 	.word	0x0800ef9c
 800ada4:	0800efb4 	.word	0x0800efb4
 800ada8:	0800eff4 	.word	0x0800eff4
 800adac:	0800f020 	.word	0x0800f020
 800adb0:	0800f050 	.word	0x0800f050
 800adb4:	0800f090 	.word	0x0800f090
        pbuf_free(p2);
 800adb8:	9807      	ldr	r0, [sp, #28]
 800adba:	f7fc fdc5 	bl	8007948 <pbuf_free>
        goto memerr;
 800adbe:	e002      	b.n	800adc6 <tcp_write+0x35e>
      pbuf_free(p);
 800adc0:	4640      	mov	r0, r8
 800adc2:	f7fc fdc1 	bl	8007948 <pbuf_free>
  pcb->flags |= TF_NAGLEMEMERR;
 800adc6:	f899 301a 	ldrb.w	r3, [r9, #26]
 800adca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800adce:	f889 301a 	strb.w	r3, [r9, #26]
  if (concat_p != NULL) {
 800add2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800add4:	b113      	cbz	r3, 800addc <tcp_write+0x374>
    pbuf_free(concat_p);
 800add6:	4618      	mov	r0, r3
 800add8:	f7fc fdb6 	bl	8007948 <pbuf_free>
  if (queue != NULL) {
 800addc:	b117      	cbz	r7, 800ade4 <tcp_write+0x37c>
    tcp_segs_free(queue);
 800adde:	4638      	mov	r0, r7
 800ade0:	f7fd f9e5 	bl	80081ae <tcp_segs_free>
  if (pcb->snd_queuelen != 0) {
 800ade4:	f8b9 3062 	ldrh.w	r3, [r9, #98]	; 0x62
 800ade8:	2b00      	cmp	r3, #0
 800adea:	f000 80c6 	beq.w	800af7a <tcp_write+0x512>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800adee:	f8d9 306c 	ldr.w	r3, [r9, #108]	; 0x6c
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	f040 80c5 	bne.w	800af82 <tcp_write+0x51a>
 800adf8:	f8d9 3068 	ldr.w	r3, [r9, #104]	; 0x68
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	f000 80b1 	beq.w	800af64 <tcp_write+0x4fc>
  return ERR_MEM;
 800ae02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ae06:	9309      	str	r3, [sp, #36]	; 0x24
}
 800ae08:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ae0a:	b011      	add	sp, #68	; 0x44
 800ae0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800ae10:	4b5e      	ldr	r3, [pc, #376]	; (800af8c <tcp_write+0x524>)
 800ae12:	f240 2285 	movw	r2, #645	; 0x285
 800ae16:	495e      	ldr	r1, [pc, #376]	; (800af90 <tcp_write+0x528>)
 800ae18:	485e      	ldr	r0, [pc, #376]	; (800af94 <tcp_write+0x52c>)
 800ae1a:	f001 fee8 	bl	800cbee <iprintf>
 800ae1e:	e798      	b.n	800ad52 <tcp_write+0x2ea>
      queue = seg;
 800ae20:	4607      	mov	r7, r0
 800ae22:	e798      	b.n	800ad56 <tcp_write+0x2ee>
 800ae24:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
  if (oversize_used > 0) {
 800ae28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae2a:	b1e3      	cbz	r3, 800ae66 <tcp_write+0x3fe>
    for (p = last_unsent->p; p; p = p->next) {
 800ae2c:	f8db 4004 	ldr.w	r4, [fp, #4]
 800ae30:	461d      	mov	r5, r3
 800ae32:	e000      	b.n	800ae36 <tcp_write+0x3ce>
 800ae34:	6824      	ldr	r4, [r4, #0]
 800ae36:	b184      	cbz	r4, 800ae5a <tcp_write+0x3f2>
      p->tot_len += oversize_used;
 800ae38:	8923      	ldrh	r3, [r4, #8]
 800ae3a:	442b      	add	r3, r5
 800ae3c:	8123      	strh	r3, [r4, #8]
      if (p->next == NULL) {
 800ae3e:	6823      	ldr	r3, [r4, #0]
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d1f7      	bne.n	800ae34 <tcp_write+0x3cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800ae44:	6860      	ldr	r0, [r4, #4]
 800ae46:	8963      	ldrh	r3, [r4, #10]
 800ae48:	462a      	mov	r2, r5
 800ae4a:	9908      	ldr	r1, [sp, #32]
 800ae4c:	4418      	add	r0, r3
 800ae4e:	f002 f83a 	bl	800cec6 <memcpy>
        p->len += oversize_used;
 800ae52:	8963      	ldrh	r3, [r4, #10]
 800ae54:	442b      	add	r3, r5
 800ae56:	8163      	strh	r3, [r4, #10]
 800ae58:	e7ec      	b.n	800ae34 <tcp_write+0x3cc>
    last_unsent->len += oversize_used;
 800ae5a:	f8bb 3008 	ldrh.w	r3, [fp, #8]
 800ae5e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ae60:	441a      	add	r2, r3
 800ae62:	f8ab 2008 	strh.w	r2, [fp, #8]
  pcb->unsent_oversize = oversize;
 800ae66:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800ae6a:	f8a9 3064 	strh.w	r3, [r9, #100]	; 0x64
  if (concat_p != NULL) {
 800ae6e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d03f      	beq.n	800aef4 <tcp_write+0x48c>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800ae74:	f1bb 0f00 	cmp.w	fp, #0
 800ae78:	d034      	beq.n	800aee4 <tcp_write+0x47c>
    pbuf_cat(last_unsent->p, concat_p);
 800ae7a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800ae7c:	4621      	mov	r1, r4
 800ae7e:	f8db 0004 	ldr.w	r0, [fp, #4]
 800ae82:	f7fc ff4d 	bl	8007d20 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800ae86:	8923      	ldrh	r3, [r4, #8]
 800ae88:	f8bb 2008 	ldrh.w	r2, [fp, #8]
 800ae8c:	4413      	add	r3, r2
 800ae8e:	f8ab 3008 	strh.w	r3, [fp, #8]
  if (last_unsent == NULL) {
 800ae92:	f1bb 0f00 	cmp.w	fp, #0
 800ae96:	d056      	beq.n	800af46 <tcp_write+0x4de>
    last_unsent->next = queue;
 800ae98:	f8cb 7000 	str.w	r7, [fp]
  pcb->snd_lbb += len;
 800ae9c:	f8d9 3058 	ldr.w	r3, [r9, #88]	; 0x58
 800aea0:	4453      	add	r3, sl
 800aea2:	f8c9 3058 	str.w	r3, [r9, #88]	; 0x58
  pcb->snd_buf -= len;
 800aea6:	f8b9 3060 	ldrh.w	r3, [r9, #96]	; 0x60
 800aeaa:	eba3 0a0a 	sub.w	sl, r3, sl
 800aeae:	f8a9 a060 	strh.w	sl, [r9, #96]	; 0x60
  pcb->snd_queuelen = queuelen;
 800aeb2:	f8a9 6062 	strh.w	r6, [r9, #98]	; 0x62
  if (pcb->snd_queuelen != 0) {
 800aeb6:	b11e      	cbz	r6, 800aec0 <tcp_write+0x458>
    LWIP_ASSERT("tcp_write: valid queue length",
 800aeb8:	f8d9 306c 	ldr.w	r3, [r9, #108]	; 0x6c
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d045      	beq.n	800af4c <tcp_write+0x4e4>
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE)==0)) {
 800aec0:	f1b8 0f00 	cmp.w	r8, #0
 800aec4:	d0a0      	beq.n	800ae08 <tcp_write+0x3a0>
 800aec6:	f8d8 400c 	ldr.w	r4, [r8, #12]
 800aeca:	2c00      	cmp	r4, #0
 800aecc:	d09c      	beq.n	800ae08 <tcp_write+0x3a0>
 800aece:	9b06      	ldr	r3, [sp, #24]
 800aed0:	f013 0f02 	tst.w	r3, #2
 800aed4:	d198      	bne.n	800ae08 <tcp_write+0x3a0>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800aed6:	89a5      	ldrh	r5, [r4, #12]
 800aed8:	2008      	movs	r0, #8
 800aeda:	f7fa fc4f 	bl	800577c <lwip_htons>
 800aede:	4328      	orrs	r0, r5
 800aee0:	81a0      	strh	r0, [r4, #12]
 800aee2:	e791      	b.n	800ae08 <tcp_write+0x3a0>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800aee4:	4b29      	ldr	r3, [pc, #164]	; (800af8c <tcp_write+0x524>)
 800aee6:	f240 22bb 	movw	r2, #699	; 0x2bb
 800aeea:	492b      	ldr	r1, [pc, #172]	; (800af98 <tcp_write+0x530>)
 800aeec:	4829      	ldr	r0, [pc, #164]	; (800af94 <tcp_write+0x52c>)
 800aeee:	f001 fe7e 	bl	800cbee <iprintf>
 800aef2:	e7c2      	b.n	800ae7a <tcp_write+0x412>
  } else if (extendlen > 0) {
 800aef4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d0cb      	beq.n	800ae92 <tcp_write+0x42a>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800aefa:	f1bb 0f00 	cmp.w	fp, #0
 800aefe:	d006      	beq.n	800af0e <tcp_write+0x4a6>
 800af00:	f8db 3004 	ldr.w	r3, [fp, #4]
 800af04:	b11b      	cbz	r3, 800af0e <tcp_write+0x4a6>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800af06:	f8db 3004 	ldr.w	r3, [fp, #4]
 800af0a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800af0c:	e00b      	b.n	800af26 <tcp_write+0x4be>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800af0e:	4b1f      	ldr	r3, [pc, #124]	; (800af8c <tcp_write+0x524>)
 800af10:	f240 22c1 	movw	r2, #705	; 0x2c1
 800af14:	4921      	ldr	r1, [pc, #132]	; (800af9c <tcp_write+0x534>)
 800af16:	481f      	ldr	r0, [pc, #124]	; (800af94 <tcp_write+0x52c>)
 800af18:	f001 fe69 	bl	800cbee <iprintf>
 800af1c:	e7f3      	b.n	800af06 <tcp_write+0x49e>
      p->tot_len += extendlen;
 800af1e:	891a      	ldrh	r2, [r3, #8]
 800af20:	4402      	add	r2, r0
 800af22:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800af24:	460b      	mov	r3, r1
 800af26:	6819      	ldr	r1, [r3, #0]
 800af28:	2900      	cmp	r1, #0
 800af2a:	d1f8      	bne.n	800af1e <tcp_write+0x4b6>
    p->tot_len += extendlen;
 800af2c:	891a      	ldrh	r2, [r3, #8]
 800af2e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800af30:	4402      	add	r2, r0
 800af32:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800af34:	895a      	ldrh	r2, [r3, #10]
 800af36:	4402      	add	r2, r0
 800af38:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800af3a:	f8bb 3008 	ldrh.w	r3, [fp, #8]
 800af3e:	4403      	add	r3, r0
 800af40:	f8ab 3008 	strh.w	r3, [fp, #8]
 800af44:	e7a5      	b.n	800ae92 <tcp_write+0x42a>
    pcb->unsent = queue;
 800af46:	f8c9 7068 	str.w	r7, [r9, #104]	; 0x68
 800af4a:	e7a7      	b.n	800ae9c <tcp_write+0x434>
    LWIP_ASSERT("tcp_write: valid queue length",
 800af4c:	f8d9 3068 	ldr.w	r3, [r9, #104]	; 0x68
 800af50:	2b00      	cmp	r3, #0
 800af52:	d1b5      	bne.n	800aec0 <tcp_write+0x458>
 800af54:	4b0d      	ldr	r3, [pc, #52]	; (800af8c <tcp_write+0x524>)
 800af56:	f240 22ed 	movw	r2, #749	; 0x2ed
 800af5a:	4911      	ldr	r1, [pc, #68]	; (800afa0 <tcp_write+0x538>)
 800af5c:	480d      	ldr	r0, [pc, #52]	; (800af94 <tcp_write+0x52c>)
 800af5e:	f001 fe46 	bl	800cbee <iprintf>
 800af62:	e7ad      	b.n	800aec0 <tcp_write+0x458>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800af64:	4b09      	ldr	r3, [pc, #36]	; (800af8c <tcp_write+0x524>)
 800af66:	f240 3202 	movw	r2, #770	; 0x302
 800af6a:	490d      	ldr	r1, [pc, #52]	; (800afa0 <tcp_write+0x538>)
 800af6c:	4809      	ldr	r0, [pc, #36]	; (800af94 <tcp_write+0x52c>)
 800af6e:	f001 fe3e 	bl	800cbee <iprintf>
  return ERR_MEM;
 800af72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800af76:	9309      	str	r3, [sp, #36]	; 0x24
 800af78:	e746      	b.n	800ae08 <tcp_write+0x3a0>
 800af7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800af7e:	9309      	str	r3, [sp, #36]	; 0x24
 800af80:	e742      	b.n	800ae08 <tcp_write+0x3a0>
 800af82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800af86:	9309      	str	r3, [sp, #36]	; 0x24
 800af88:	e73e      	b.n	800ae08 <tcp_write+0x3a0>
 800af8a:	bf00      	nop
 800af8c:	0800f144 	.word	0x0800f144
 800af90:	0800f0a0 	.word	0x0800f0a0
 800af94:	0800d378 	.word	0x0800d378
 800af98:	0800f0b4 	.word	0x0800f0b4
 800af9c:	0800f0ec 	.word	0x0800f0ec
 800afa0:	0800f124 	.word	0x0800f124

0800afa4 <tcp_enqueue_flags>:
{
 800afa4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800afa8:	b083      	sub	sp, #12
 800afaa:	4604      	mov	r4, r0
 800afac:	460d      	mov	r5, r1
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800afae:	f011 0703 	ands.w	r7, r1, #3
 800afb2:	d030      	beq.n	800b016 <tcp_enqueue_flags+0x72>
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 800afb4:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800afb8:	2b08      	cmp	r3, #8
 800afba:	d902      	bls.n	800afc2 <tcp_enqueue_flags+0x1e>
 800afbc:	f015 0f01 	tst.w	r5, #1
 800afc0:	d031      	beq.n	800b026 <tcp_enqueue_flags+0x82>
  if (flags & TCP_SYN) {
 800afc2:	f015 0f02 	tst.w	r5, #2
 800afc6:	d135      	bne.n	800b034 <tcp_enqueue_flags+0x90>
  u8_t optflags = 0;
 800afc8:	f04f 0900 	mov.w	r9, #0
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800afcc:	f1b9 0f00 	cmp.w	r9, #0
 800afd0:	d033      	beq.n	800b03a <tcp_enqueue_flags+0x96>
 800afd2:	2604      	movs	r6, #4
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800afd4:	b2b6      	uxth	r6, r6
 800afd6:	2200      	movs	r2, #0
 800afd8:	4631      	mov	r1, r6
 800afda:	4610      	mov	r0, r2
 800afdc:	f7fc fd20 	bl	8007a20 <pbuf_alloc>
 800afe0:	4680      	mov	r8, r0
 800afe2:	b360      	cbz	r0, 800b03e <tcp_enqueue_flags+0x9a>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800afe4:	8943      	ldrh	r3, [r0, #10]
 800afe6:	429e      	cmp	r6, r3
 800afe8:	d830      	bhi.n	800b04c <tcp_enqueue_flags+0xa8>
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800afea:	f8cd 9000 	str.w	r9, [sp]
 800afee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800aff0:	462a      	mov	r2, r5
 800aff2:	4641      	mov	r1, r8
 800aff4:	4620      	mov	r0, r4
 800aff6:	f7ff fc2f 	bl	800a858 <tcp_create_segment>
 800affa:	4606      	mov	r6, r0
 800affc:	b370      	cbz	r0, 800b05c <tcp_enqueue_flags+0xb8>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800affe:	68c3      	ldr	r3, [r0, #12]
 800b000:	f013 0f03 	tst.w	r3, #3
 800b004:	d131      	bne.n	800b06a <tcp_enqueue_flags+0xc6>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800b006:	8933      	ldrh	r3, [r6, #8]
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d136      	bne.n	800b07a <tcp_enqueue_flags+0xd6>
  if (pcb->unsent == NULL) {
 800b00c:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 800b00e:	2a00      	cmp	r2, #0
 800b010:	d13c      	bne.n	800b08c <tcp_enqueue_flags+0xe8>
    pcb->unsent = seg;
 800b012:	66a6      	str	r6, [r4, #104]	; 0x68
 800b014:	e03e      	b.n	800b094 <tcp_enqueue_flags+0xf0>
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800b016:	4b36      	ldr	r3, [pc, #216]	; (800b0f0 <tcp_enqueue_flags+0x14c>)
 800b018:	f240 321b 	movw	r2, #795	; 0x31b
 800b01c:	4935      	ldr	r1, [pc, #212]	; (800b0f4 <tcp_enqueue_flags+0x150>)
 800b01e:	4836      	ldr	r0, [pc, #216]	; (800b0f8 <tcp_enqueue_flags+0x154>)
 800b020:	f001 fde5 	bl	800cbee <iprintf>
 800b024:	e7c6      	b.n	800afb4 <tcp_enqueue_flags+0x10>
    pcb->flags |= TF_NAGLEMEMERR;
 800b026:	7ea3      	ldrb	r3, [r4, #26]
 800b028:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b02c:	76a3      	strb	r3, [r4, #26]
    return ERR_MEM;
 800b02e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b032:	e04a      	b.n	800b0ca <tcp_enqueue_flags+0x126>
    optflags = TF_SEG_OPTS_MSS;
 800b034:	f04f 0901 	mov.w	r9, #1
 800b038:	e7c8      	b.n	800afcc <tcp_enqueue_flags+0x28>
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800b03a:	2600      	movs	r6, #0
 800b03c:	e7ca      	b.n	800afd4 <tcp_enqueue_flags+0x30>
    pcb->flags |= TF_NAGLEMEMERR;
 800b03e:	7ea3      	ldrb	r3, [r4, #26]
 800b040:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b044:	76a3      	strb	r3, [r4, #26]
    return ERR_MEM;
 800b046:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b04a:	e03e      	b.n	800b0ca <tcp_enqueue_flags+0x126>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800b04c:	4b28      	ldr	r3, [pc, #160]	; (800b0f0 <tcp_enqueue_flags+0x14c>)
 800b04e:	f240 3241 	movw	r2, #833	; 0x341
 800b052:	492a      	ldr	r1, [pc, #168]	; (800b0fc <tcp_enqueue_flags+0x158>)
 800b054:	4828      	ldr	r0, [pc, #160]	; (800b0f8 <tcp_enqueue_flags+0x154>)
 800b056:	f001 fdca 	bl	800cbee <iprintf>
 800b05a:	e7c6      	b.n	800afea <tcp_enqueue_flags+0x46>
    pcb->flags |= TF_NAGLEMEMERR;
 800b05c:	7ea3      	ldrb	r3, [r4, #26]
 800b05e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b062:	76a3      	strb	r3, [r4, #26]
    return ERR_MEM;
 800b064:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b068:	e02f      	b.n	800b0ca <tcp_enqueue_flags+0x126>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800b06a:	4b21      	ldr	r3, [pc, #132]	; (800b0f0 <tcp_enqueue_flags+0x14c>)
 800b06c:	f240 3249 	movw	r2, #841	; 0x349
 800b070:	4923      	ldr	r1, [pc, #140]	; (800b100 <tcp_enqueue_flags+0x15c>)
 800b072:	4821      	ldr	r0, [pc, #132]	; (800b0f8 <tcp_enqueue_flags+0x154>)
 800b074:	f001 fdbb 	bl	800cbee <iprintf>
 800b078:	e7c5      	b.n	800b006 <tcp_enqueue_flags+0x62>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800b07a:	4b1d      	ldr	r3, [pc, #116]	; (800b0f0 <tcp_enqueue_flags+0x14c>)
 800b07c:	f240 324a 	movw	r2, #842	; 0x34a
 800b080:	4920      	ldr	r1, [pc, #128]	; (800b104 <tcp_enqueue_flags+0x160>)
 800b082:	481d      	ldr	r0, [pc, #116]	; (800b0f8 <tcp_enqueue_flags+0x154>)
 800b084:	f001 fdb3 	bl	800cbee <iprintf>
 800b088:	e7c0      	b.n	800b00c <tcp_enqueue_flags+0x68>
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800b08a:	461a      	mov	r2, r3
 800b08c:	6813      	ldr	r3, [r2, #0]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d1fb      	bne.n	800b08a <tcp_enqueue_flags+0xe6>
    useg->next = seg;
 800b092:	6016      	str	r6, [r2, #0]
  pcb->unsent_oversize = 0;
 800b094:	2300      	movs	r3, #0
 800b096:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800b09a:	b117      	cbz	r7, 800b0a2 <tcp_enqueue_flags+0xfe>
    pcb->snd_lbb++;
 800b09c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b09e:	3301      	adds	r3, #1
 800b0a0:	65a3      	str	r3, [r4, #88]	; 0x58
  if (flags & TCP_FIN) {
 800b0a2:	f015 0f01 	tst.w	r5, #1
 800b0a6:	d003      	beq.n	800b0b0 <tcp_enqueue_flags+0x10c>
    pcb->flags |= TF_FIN;
 800b0a8:	7ea3      	ldrb	r3, [r4, #26]
 800b0aa:	f043 0320 	orr.w	r3, r3, #32
 800b0ae:	76a3      	strb	r3, [r4, #26]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800b0b0:	6870      	ldr	r0, [r6, #4]
 800b0b2:	f7fc fe0f 	bl	8007cd4 <pbuf_clen>
 800b0b6:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800b0ba:	4418      	add	r0, r3
 800b0bc:	b280      	uxth	r0, r0
 800b0be:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
  if (pcb->snd_queuelen != 0) {
 800b0c2:	b190      	cbz	r0, 800b0ea <tcp_enqueue_flags+0x146>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800b0c4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800b0c6:	b11b      	cbz	r3, 800b0d0 <tcp_enqueue_flags+0x12c>
  return ERR_OK;
 800b0c8:	2000      	movs	r0, #0
}
 800b0ca:	b003      	add	sp, #12
 800b0cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800b0d0:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800b0d2:	b10b      	cbz	r3, 800b0d8 <tcp_enqueue_flags+0x134>
  return ERR_OK;
 800b0d4:	2000      	movs	r0, #0
 800b0d6:	e7f8      	b.n	800b0ca <tcp_enqueue_flags+0x126>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800b0d8:	4b05      	ldr	r3, [pc, #20]	; (800b0f0 <tcp_enqueue_flags+0x14c>)
 800b0da:	f240 326d 	movw	r2, #877	; 0x36d
 800b0de:	490a      	ldr	r1, [pc, #40]	; (800b108 <tcp_enqueue_flags+0x164>)
 800b0e0:	4805      	ldr	r0, [pc, #20]	; (800b0f8 <tcp_enqueue_flags+0x154>)
 800b0e2:	f001 fd84 	bl	800cbee <iprintf>
  return ERR_OK;
 800b0e6:	2000      	movs	r0, #0
 800b0e8:	e7ef      	b.n	800b0ca <tcp_enqueue_flags+0x126>
 800b0ea:	2000      	movs	r0, #0
 800b0ec:	e7ed      	b.n	800b0ca <tcp_enqueue_flags+0x126>
 800b0ee:	bf00      	nop
 800b0f0:	0800f144 	.word	0x0800f144
 800b0f4:	0800ede4 	.word	0x0800ede4
 800b0f8:	0800d378 	.word	0x0800d378
 800b0fc:	0800ee3c 	.word	0x0800ee3c
 800b100:	0800ee78 	.word	0x0800ee78
 800b104:	0800ee90 	.word	0x0800ee90
 800b108:	0800eebc 	.word	0x0800eebc

0800b10c <tcp_send_fin>:
{
 800b10c:	b570      	push	{r4, r5, r6, lr}
 800b10e:	4605      	mov	r5, r0
  if (pcb->unsent != NULL) {
 800b110:	6e84      	ldr	r4, [r0, #104]	; 0x68
 800b112:	b90c      	cbnz	r4, 800b118 <tcp_send_fin+0xc>
 800b114:	e00a      	b.n	800b12c <tcp_send_fin+0x20>
         last_unsent = last_unsent->next);
 800b116:	461c      	mov	r4, r3
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800b118:	6823      	ldr	r3, [r4, #0]
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d1fb      	bne.n	800b116 <tcp_send_fin+0xa>
    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800b11e:	68e3      	ldr	r3, [r4, #12]
 800b120:	8998      	ldrh	r0, [r3, #12]
 800b122:	f7fa fb2b 	bl	800577c <lwip_htons>
 800b126:	f010 0f07 	tst.w	r0, #7
 800b12a:	d004      	beq.n	800b136 <tcp_send_fin+0x2a>
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800b12c:	2101      	movs	r1, #1
 800b12e:	4628      	mov	r0, r5
 800b130:	f7ff ff38 	bl	800afa4 <tcp_enqueue_flags>
}
 800b134:	bd70      	pop	{r4, r5, r6, pc}
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800b136:	68e6      	ldr	r6, [r4, #12]
 800b138:	89b4      	ldrh	r4, [r6, #12]
 800b13a:	2001      	movs	r0, #1
 800b13c:	f7fa fb1e 	bl	800577c <lwip_htons>
 800b140:	4320      	orrs	r0, r4
 800b142:	81b0      	strh	r0, [r6, #12]
      pcb->flags |= TF_FIN;
 800b144:	7eab      	ldrb	r3, [r5, #26]
 800b146:	f043 0320 	orr.w	r3, r3, #32
 800b14a:	76ab      	strb	r3, [r5, #26]
      return ERR_OK;
 800b14c:	2000      	movs	r0, #0
 800b14e:	bd70      	pop	{r4, r5, r6, pc}

0800b150 <tcp_send_empty_ack>:
{
 800b150:	b570      	push	{r4, r5, r6, lr}
 800b152:	b084      	sub	sp, #16
 800b154:	4604      	mov	r4, r0
  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800b156:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 800b158:	f7fa fb13 	bl	8005782 <lwip_htonl>
 800b15c:	4603      	mov	r3, r0
 800b15e:	2200      	movs	r2, #0
 800b160:	4611      	mov	r1, r2
 800b162:	4620      	mov	r0, r4
 800b164:	f7ff fbd8 	bl	800a918 <tcp_output_alloc_header>
  if (p == NULL) {
 800b168:	b1e0      	cbz	r0, 800b1a4 <tcp_send_empty_ack+0x54>
 800b16a:	4606      	mov	r6, r0
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800b16c:	1d25      	adds	r5, r4, #4
 800b16e:	4628      	mov	r0, r5
 800b170:	f7fb f8ae 	bl	80062d0 <ip4_route>
  if (netif == NULL) {
 800b174:	b1e8      	cbz	r0, 800b1b2 <tcp_send_empty_ack+0x62>
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 800b176:	7aa3      	ldrb	r3, [r4, #10]
 800b178:	7a61      	ldrb	r1, [r4, #9]
 800b17a:	9002      	str	r0, [sp, #8]
 800b17c:	2206      	movs	r2, #6
 800b17e:	9201      	str	r2, [sp, #4]
 800b180:	9100      	str	r1, [sp, #0]
 800b182:	462a      	mov	r2, r5
 800b184:	4621      	mov	r1, r4
 800b186:	4630      	mov	r0, r6
 800b188:	f7fb fa48 	bl	800661c <ip4_output_if>
 800b18c:	4605      	mov	r5, r0
  pbuf_free(p);
 800b18e:	4630      	mov	r0, r6
 800b190:	f7fc fbda 	bl	8007948 <pbuf_free>
  if (err != ERR_OK) {
 800b194:	b985      	cbnz	r5, 800b1b8 <tcp_send_empty_ack+0x68>
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800b196:	7ea3      	ldrb	r3, [r4, #26]
 800b198:	f023 0303 	bic.w	r3, r3, #3
 800b19c:	76a3      	strb	r3, [r4, #26]
}
 800b19e:	4628      	mov	r0, r5
 800b1a0:	b004      	add	sp, #16
 800b1a2:	bd70      	pop	{r4, r5, r6, pc}
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 800b1a4:	7ea3      	ldrb	r3, [r4, #26]
 800b1a6:	f043 0303 	orr.w	r3, r3, #3
 800b1aa:	76a3      	strb	r3, [r4, #26]
    return ERR_BUF;
 800b1ac:	f06f 0501 	mvn.w	r5, #1
 800b1b0:	e7f5      	b.n	800b19e <tcp_send_empty_ack+0x4e>
    err = ERR_RTE;
 800b1b2:	f06f 0503 	mvn.w	r5, #3
 800b1b6:	e7ea      	b.n	800b18e <tcp_send_empty_ack+0x3e>
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 800b1b8:	7ea3      	ldrb	r3, [r4, #26]
 800b1ba:	f043 0303 	orr.w	r3, r3, #3
 800b1be:	76a3      	strb	r3, [r4, #26]
 800b1c0:	e7ed      	b.n	800b19e <tcp_send_empty_ack+0x4e>
	...

0800b1c4 <tcp_output>:
{
 800b1c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b1c8:	4605      	mov	r5, r0
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800b1ca:	7d03      	ldrb	r3, [r0, #20]
 800b1cc:	2b01      	cmp	r3, #1
 800b1ce:	d01e      	beq.n	800b20e <tcp_output+0x4a>
  if (tcp_input_pcb == pcb) {
 800b1d0:	4ba5      	ldr	r3, [pc, #660]	; (800b468 <tcp_output+0x2a4>)
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	429d      	cmp	r5, r3
 800b1d6:	f000 813e 	beq.w	800b456 <tcp_output+0x292>
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800b1da:	f8b5 305c 	ldrh.w	r3, [r5, #92]	; 0x5c
 800b1de:	f8b5 7048 	ldrh.w	r7, [r5, #72]	; 0x48
 800b1e2:	42bb      	cmp	r3, r7
 800b1e4:	d200      	bcs.n	800b1e8 <tcp_output+0x24>
 800b1e6:	461f      	mov	r7, r3
  seg = pcb->unsent;
 800b1e8:	6eac      	ldr	r4, [r5, #104]	; 0x68
  if (pcb->flags & TF_ACK_NOW &&
 800b1ea:	7eab      	ldrb	r3, [r5, #26]
 800b1ec:	f013 0f02 	tst.w	r3, #2
 800b1f0:	d00a      	beq.n	800b208 <tcp_output+0x44>
 800b1f2:	b1a4      	cbz	r4, 800b21e <tcp_output+0x5a>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 800b1f4:	68e3      	ldr	r3, [r4, #12]
 800b1f6:	6858      	ldr	r0, [r3, #4]
 800b1f8:	f7fa fac3 	bl	8005782 <lwip_htonl>
 800b1fc:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800b1fe:	1ac3      	subs	r3, r0, r3
 800b200:	8920      	ldrh	r0, [r4, #8]
 800b202:	4403      	add	r3, r0
     (seg == NULL ||
 800b204:	429f      	cmp	r7, r3
 800b206:	d30a      	bcc.n	800b21e <tcp_output+0x5a>
  useg = pcb->unacked;
 800b208:	6eee      	ldr	r6, [r5, #108]	; 0x6c
  if (useg != NULL) {
 800b20a:	b976      	cbnz	r6, 800b22a <tcp_output+0x66>
 800b20c:	e010      	b.n	800b230 <tcp_output+0x6c>
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800b20e:	4b97      	ldr	r3, [pc, #604]	; (800b46c <tcp_output+0x2a8>)
 800b210:	f240 32ed 	movw	r2, #1005	; 0x3ed
 800b214:	4996      	ldr	r1, [pc, #600]	; (800b470 <tcp_output+0x2ac>)
 800b216:	4897      	ldr	r0, [pc, #604]	; (800b474 <tcp_output+0x2b0>)
 800b218:	f001 fce9 	bl	800cbee <iprintf>
 800b21c:	e7d8      	b.n	800b1d0 <tcp_output+0xc>
     return tcp_send_empty_ack(pcb);
 800b21e:	4628      	mov	r0, r5
 800b220:	f7ff ff96 	bl	800b150 <tcp_send_empty_ack>
 800b224:	4603      	mov	r3, r0
 800b226:	e03f      	b.n	800b2a8 <tcp_output+0xe4>
    for (; useg->next != NULL; useg = useg->next);
 800b228:	461e      	mov	r6, r3
 800b22a:	6833      	ldr	r3, [r6, #0]
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d1fb      	bne.n	800b228 <tcp_output+0x64>
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800b230:	1d28      	adds	r0, r5, #4
 800b232:	f7fb f84d 	bl	80062d0 <ip4_route>
  if (netif == NULL) {
 800b236:	4680      	mov	r8, r0
 800b238:	2800      	cmp	r0, #0
 800b23a:	f000 810e 	beq.w	800b45a <tcp_output+0x296>
  if (ip_addr_isany(&pcb->local_ip)) {
 800b23e:	b10d      	cbz	r5, 800b244 <tcp_output+0x80>
 800b240:	682b      	ldr	r3, [r5, #0]
 800b242:	b933      	cbnz	r3, 800b252 <tcp_output+0x8e>
    if (local_ip == NULL) {
 800b244:	f118 0f04 	cmn.w	r8, #4
 800b248:	f000 810a 	beq.w	800b460 <tcp_output+0x29c>
    ip_addr_copy(pcb->local_ip, *local_ip);
 800b24c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b250:	602b      	str	r3, [r5, #0]
  if (seg != NULL &&
 800b252:	2c00      	cmp	r4, #0
 800b254:	f000 80a2 	beq.w	800b39c <tcp_output+0x1d8>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 800b258:	68e3      	ldr	r3, [r4, #12]
 800b25a:	6858      	ldr	r0, [r3, #4]
 800b25c:	f7fa fa91 	bl	8005782 <lwip_htonl>
 800b260:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800b262:	1ac3      	subs	r3, r0, r3
 800b264:	8920      	ldrh	r0, [r4, #8]
 800b266:	4403      	add	r3, r0
  if (seg != NULL &&
 800b268:	429f      	cmp	r7, r3
 800b26a:	f080 8097 	bcs.w	800b39c <tcp_output+0x1d8>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 800b26e:	2f00      	cmp	r7, #0
 800b270:	f000 8094 	beq.w	800b39c <tcp_output+0x1d8>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 800b274:	f8b5 305c 	ldrh.w	r3, [r5, #92]	; 0x5c
 800b278:	429f      	cmp	r7, r3
 800b27a:	f040 808f 	bne.w	800b39c <tcp_output+0x1d8>
 800b27e:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 800b280:	2b00      	cmp	r3, #0
 800b282:	f040 808b 	bne.w	800b39c <tcp_output+0x1d8>
    if (pcb->persist_backoff == 0) {
 800b286:	f895 3095 	ldrb.w	r3, [r5, #149]	; 0x95
 800b28a:	b923      	cbnz	r3, 800b296 <tcp_output+0xd2>
      pcb->persist_cnt = 0;
 800b28c:	f885 3094 	strb.w	r3, [r5, #148]	; 0x94
      pcb->persist_backoff = 1;
 800b290:	2301      	movs	r3, #1
 800b292:	f885 3095 	strb.w	r3, [r5, #149]	; 0x95
  if (pcb->unsent == NULL) {
 800b296:	6eab      	ldr	r3, [r5, #104]	; 0x68
 800b298:	2b00      	cmp	r3, #0
 800b29a:	f000 80d9 	beq.w	800b450 <tcp_output+0x28c>
  pcb->flags &= ~TF_NAGLEMEMERR;
 800b29e:	7eab      	ldrb	r3, [r5, #26]
 800b2a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b2a4:	76ab      	strb	r3, [r5, #26]
  return ERR_OK;
 800b2a6:	2300      	movs	r3, #0
}
 800b2a8:	4618      	mov	r0, r3
 800b2aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    LWIP_ASSERT("RST not expected here!",
 800b2ae:	4b6f      	ldr	r3, [pc, #444]	; (800b46c <tcp_output+0x2a8>)
 800b2b0:	f240 4246 	movw	r2, #1094	; 0x446
 800b2b4:	4970      	ldr	r1, [pc, #448]	; (800b478 <tcp_output+0x2b4>)
 800b2b6:	486f      	ldr	r0, [pc, #444]	; (800b474 <tcp_output+0x2b0>)
 800b2b8:	f001 fc99 	bl	800cbee <iprintf>
 800b2bc:	e084      	b.n	800b3c8 <tcp_output+0x204>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800b2be:	891a      	ldrh	r2, [r3, #8]
 800b2c0:	8e6b      	ldrh	r3, [r5, #50]	; 0x32
 800b2c2:	429a      	cmp	r2, r3
 800b2c4:	f080 8091 	bcs.w	800b3ea <tcp_output+0x226>
 800b2c8:	f8b5 3060 	ldrh.w	r3, [r5, #96]	; 0x60
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	f000 808e 	beq.w	800b3ee <tcp_output+0x22a>
 800b2d2:	f8b5 3062 	ldrh.w	r3, [r5, #98]	; 0x62
 800b2d6:	2b08      	cmp	r3, #8
 800b2d8:	f240 808b 	bls.w	800b3f2 <tcp_output+0x22e>
 800b2dc:	2301      	movs	r3, #1
 800b2de:	e002      	b.n	800b2e6 <tcp_output+0x122>
 800b2e0:	2301      	movs	r3, #1
 800b2e2:	e000      	b.n	800b2e6 <tcp_output+0x122>
 800b2e4:	2301      	movs	r3, #1
 800b2e6:	b91b      	cbnz	r3, 800b2f0 <tcp_output+0x12c>
      ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800b2e8:	7eab      	ldrb	r3, [r5, #26]
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800b2ea:	f013 0fa0 	tst.w	r3, #160	; 0xa0
 800b2ee:	d0d2      	beq.n	800b296 <tcp_output+0xd2>
    if (pcb->state != SYN_SENT) {
 800b2f0:	7d2b      	ldrb	r3, [r5, #20]
 800b2f2:	2b02      	cmp	r3, #2
 800b2f4:	d00a      	beq.n	800b30c <tcp_output+0x148>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800b2f6:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 800b2fa:	f8ba 900c 	ldrh.w	r9, [sl, #12]
 800b2fe:	2010      	movs	r0, #16
 800b300:	f7fa fa3c 	bl	800577c <lwip_htons>
 800b304:	ea49 0000 	orr.w	r0, r9, r0
 800b308:	f8aa 000c 	strh.w	r0, [sl, #12]
    err = tcp_output_segment(seg, pcb, netif);
 800b30c:	4642      	mov	r2, r8
 800b30e:	4629      	mov	r1, r5
 800b310:	4620      	mov	r0, r4
 800b312:	f7ff fb4b 	bl	800a9ac <tcp_output_segment>
    if (err != ERR_OK) {
 800b316:	4603      	mov	r3, r0
 800b318:	2800      	cmp	r0, #0
 800b31a:	d16c      	bne.n	800b3f6 <tcp_output+0x232>
    pcb->unsent = seg->next;
 800b31c:	6823      	ldr	r3, [r4, #0]
 800b31e:	66ab      	str	r3, [r5, #104]	; 0x68
    if (pcb->state != SYN_SENT) {
 800b320:	7d2b      	ldrb	r3, [r5, #20]
 800b322:	2b02      	cmp	r3, #2
 800b324:	d003      	beq.n	800b32e <tcp_output+0x16a>
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800b326:	7eab      	ldrb	r3, [r5, #26]
 800b328:	f023 0303 	bic.w	r3, r3, #3
 800b32c:	76ab      	strb	r3, [r5, #26]
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800b32e:	68e3      	ldr	r3, [r4, #12]
 800b330:	6858      	ldr	r0, [r3, #4]
 800b332:	f7fa fa26 	bl	8005782 <lwip_htonl>
 800b336:	4681      	mov	r9, r0
 800b338:	f8b4 a008 	ldrh.w	sl, [r4, #8]
 800b33c:	68e3      	ldr	r3, [r4, #12]
 800b33e:	8998      	ldrh	r0, [r3, #12]
 800b340:	f7fa fa1c 	bl	800577c <lwip_htons>
 800b344:	f010 0f03 	tst.w	r0, #3
 800b348:	d05a      	beq.n	800b400 <tcp_output+0x23c>
 800b34a:	2001      	movs	r0, #1
 800b34c:	4450      	add	r0, sl
 800b34e:	4448      	add	r0, r9
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800b350:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800b352:	1a1b      	subs	r3, r3, r0
 800b354:	2b00      	cmp	r3, #0
 800b356:	db55      	blt.n	800b404 <tcp_output+0x240>
    if (TCP_TCPLEN(seg) > 0) {
 800b358:	f8b4 9008 	ldrh.w	r9, [r4, #8]
 800b35c:	68e3      	ldr	r3, [r4, #12]
 800b35e:	8998      	ldrh	r0, [r3, #12]
 800b360:	f7fa fa0c 	bl	800577c <lwip_htons>
 800b364:	f010 0f03 	tst.w	r0, #3
 800b368:	d04e      	beq.n	800b408 <tcp_output+0x244>
 800b36a:	2301      	movs	r3, #1
 800b36c:	eb13 0f09 	cmn.w	r3, r9
 800b370:	d06a      	beq.n	800b448 <tcp_output+0x284>
      seg->next = NULL;
 800b372:	2300      	movs	r3, #0
 800b374:	6023      	str	r3, [r4, #0]
      if (pcb->unacked == NULL) {
 800b376:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d047      	beq.n	800b40c <tcp_output+0x248>
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800b37c:	68e3      	ldr	r3, [r4, #12]
 800b37e:	6858      	ldr	r0, [r3, #4]
 800b380:	f7fa f9ff 	bl	8005782 <lwip_htonl>
 800b384:	4681      	mov	r9, r0
 800b386:	68f3      	ldr	r3, [r6, #12]
 800b388:	6858      	ldr	r0, [r3, #4]
 800b38a:	f7fa f9fa 	bl	8005782 <lwip_htonl>
 800b38e:	eba9 0000 	sub.w	r0, r9, r0
 800b392:	2800      	cmp	r0, #0
 800b394:	db3d      	blt.n	800b412 <tcp_output+0x24e>
          useg->next = seg;
 800b396:	6034      	str	r4, [r6, #0]
          useg = useg->next;
 800b398:	4626      	mov	r6, r4
    seg = pcb->unsent;
 800b39a:	6eac      	ldr	r4, [r5, #104]	; 0x68
  while (seg != NULL &&
 800b39c:	2c00      	cmp	r4, #0
 800b39e:	f43f af7a 	beq.w	800b296 <tcp_output+0xd2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800b3a2:	68e3      	ldr	r3, [r4, #12]
 800b3a4:	6858      	ldr	r0, [r3, #4]
 800b3a6:	f7fa f9ec 	bl	8005782 <lwip_htonl>
 800b3aa:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800b3ac:	1ac0      	subs	r0, r0, r3
 800b3ae:	8923      	ldrh	r3, [r4, #8]
 800b3b0:	4418      	add	r0, r3
  while (seg != NULL &&
 800b3b2:	4287      	cmp	r7, r0
 800b3b4:	f4ff af6f 	bcc.w	800b296 <tcp_output+0xd2>
    LWIP_ASSERT("RST not expected here!",
 800b3b8:	68e3      	ldr	r3, [r4, #12]
 800b3ba:	8998      	ldrh	r0, [r3, #12]
 800b3bc:	f7fa f9de 	bl	800577c <lwip_htons>
 800b3c0:	f010 0f04 	tst.w	r0, #4
 800b3c4:	f47f af73 	bne.w	800b2ae <tcp_output+0xea>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800b3c8:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d088      	beq.n	800b2e0 <tcp_output+0x11c>
 800b3ce:	7eab      	ldrb	r3, [r5, #26]
 800b3d0:	f013 0f44 	tst.w	r3, #68	; 0x44
 800b3d4:	d186      	bne.n	800b2e4 <tcp_output+0x120>
 800b3d6:	6eab      	ldr	r3, [r5, #104]	; 0x68
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	f43f af75 	beq.w	800b2c8 <tcp_output+0x104>
 800b3de:	681a      	ldr	r2, [r3, #0]
 800b3e0:	2a00      	cmp	r2, #0
 800b3e2:	f43f af6c 	beq.w	800b2be <tcp_output+0xfa>
 800b3e6:	2301      	movs	r3, #1
 800b3e8:	e77d      	b.n	800b2e6 <tcp_output+0x122>
 800b3ea:	2301      	movs	r3, #1
 800b3ec:	e77b      	b.n	800b2e6 <tcp_output+0x122>
 800b3ee:	2301      	movs	r3, #1
 800b3f0:	e779      	b.n	800b2e6 <tcp_output+0x122>
 800b3f2:	2300      	movs	r3, #0
 800b3f4:	e777      	b.n	800b2e6 <tcp_output+0x122>
      pcb->flags |= TF_NAGLEMEMERR;
 800b3f6:	7eaa      	ldrb	r2, [r5, #26]
 800b3f8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b3fc:	76aa      	strb	r2, [r5, #26]
      return err;
 800b3fe:	e753      	b.n	800b2a8 <tcp_output+0xe4>
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800b400:	2000      	movs	r0, #0
 800b402:	e7a3      	b.n	800b34c <tcp_output+0x188>
      pcb->snd_nxt = snd_nxt;
 800b404:	64e8      	str	r0, [r5, #76]	; 0x4c
 800b406:	e7a7      	b.n	800b358 <tcp_output+0x194>
    if (TCP_TCPLEN(seg) > 0) {
 800b408:	2300      	movs	r3, #0
 800b40a:	e7af      	b.n	800b36c <tcp_output+0x1a8>
        pcb->unacked = seg;
 800b40c:	66ec      	str	r4, [r5, #108]	; 0x6c
        useg = seg;
 800b40e:	4626      	mov	r6, r4
 800b410:	e7c3      	b.n	800b39a <tcp_output+0x1d6>
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800b412:	f105 0a6c 	add.w	sl, r5, #108	; 0x6c
          while (*cur_seg &&
 800b416:	e001      	b.n	800b41c <tcp_output+0x258>
              cur_seg = &((*cur_seg)->next );
 800b418:	f8da a000 	ldr.w	sl, [sl]
          while (*cur_seg &&
 800b41c:	f8da 3000 	ldr.w	r3, [sl]
 800b420:	b163      	cbz	r3, 800b43c <tcp_output+0x278>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800b422:	68db      	ldr	r3, [r3, #12]
 800b424:	6858      	ldr	r0, [r3, #4]
 800b426:	f7fa f9ac 	bl	8005782 <lwip_htonl>
 800b42a:	4681      	mov	r9, r0
 800b42c:	68e3      	ldr	r3, [r4, #12]
 800b42e:	6858      	ldr	r0, [r3, #4]
 800b430:	f7fa f9a7 	bl	8005782 <lwip_htonl>
 800b434:	eba9 0000 	sub.w	r0, r9, r0
          while (*cur_seg &&
 800b438:	2800      	cmp	r0, #0
 800b43a:	dbed      	blt.n	800b418 <tcp_output+0x254>
          seg->next = (*cur_seg);
 800b43c:	f8da 3000 	ldr.w	r3, [sl]
 800b440:	6023      	str	r3, [r4, #0]
          (*cur_seg) = seg;
 800b442:	f8ca 4000 	str.w	r4, [sl]
 800b446:	e7a8      	b.n	800b39a <tcp_output+0x1d6>
      tcp_seg_free(seg);
 800b448:	4620      	mov	r0, r4
 800b44a:	f7fc fea3 	bl	8008194 <tcp_seg_free>
 800b44e:	e7a4      	b.n	800b39a <tcp_output+0x1d6>
    pcb->unsent_oversize = 0;
 800b450:	f8a5 3064 	strh.w	r3, [r5, #100]	; 0x64
 800b454:	e723      	b.n	800b29e <tcp_output+0xda>
    return ERR_OK;
 800b456:	2300      	movs	r3, #0
 800b458:	e726      	b.n	800b2a8 <tcp_output+0xe4>
    return ERR_RTE;
 800b45a:	f06f 0303 	mvn.w	r3, #3
 800b45e:	e723      	b.n	800b2a8 <tcp_output+0xe4>
      return ERR_RTE;
 800b460:	f06f 0303 	mvn.w	r3, #3
 800b464:	e720      	b.n	800b2a8 <tcp_output+0xe4>
 800b466:	bf00      	nop
 800b468:	20007990 	.word	0x20007990
 800b46c:	0800f144 	.word	0x0800f144
 800b470:	0800eee4 	.word	0x0800eee4
 800b474:	0800d378 	.word	0x0800d378
 800b478:	0800ef0c 	.word	0x0800ef0c

0800b47c <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 800b47c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b480:	b085      	sub	sp, #20
 800b482:	4680      	mov	r8, r0
 800b484:	460f      	mov	r7, r1
 800b486:	4691      	mov	r9, r2
 800b488:	461e      	mov	r6, r3
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 800b48a:	2200      	movs	r2, #0
 800b48c:	2114      	movs	r1, #20
 800b48e:	2001      	movs	r0, #1
 800b490:	f7fc fac6 	bl	8007a20 <pbuf_alloc>
  if (p == NULL) {
 800b494:	b3b0      	cbz	r0, 800b504 <tcp_rst+0x88>
 800b496:	4605      	mov	r5, r0
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800b498:	8943      	ldrh	r3, [r0, #10]
 800b49a:	2b13      	cmp	r3, #19
 800b49c:	d935      	bls.n	800b50a <tcp_rst+0x8e>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
 800b49e:	686c      	ldr	r4, [r5, #4]
  tcphdr->src = lwip_htons(local_port);
 800b4a0:	f8bd 0030 	ldrh.w	r0, [sp, #48]	; 0x30
 800b4a4:	f7fa f96a 	bl	800577c <lwip_htons>
 800b4a8:	8020      	strh	r0, [r4, #0]
  tcphdr->dest = lwip_htons(remote_port);
 800b4aa:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 800b4ae:	f7fa f965 	bl	800577c <lwip_htons>
 800b4b2:	8060      	strh	r0, [r4, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 800b4b4:	4640      	mov	r0, r8
 800b4b6:	f7fa f964 	bl	8005782 <lwip_htonl>
 800b4ba:	6060      	str	r0, [r4, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 800b4bc:	4638      	mov	r0, r7
 800b4be:	f7fa f960 	bl	8005782 <lwip_htonl>
 800b4c2:	60a0      	str	r0, [r4, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 800b4c4:	f245 0014 	movw	r0, #20500	; 0x5014
 800b4c8:	f7fa f958 	bl	800577c <lwip_htons>
 800b4cc:	81a0      	strh	r0, [r4, #12]
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 800b4ce:	2300      	movs	r3, #0
 800b4d0:	2208      	movs	r2, #8
 800b4d2:	73a2      	strb	r2, [r4, #14]
 800b4d4:	2260      	movs	r2, #96	; 0x60
 800b4d6:	73e2      	strb	r2, [r4, #15]
#endif
  tcphdr->chksum = 0;
 800b4d8:	7423      	strb	r3, [r4, #16]
 800b4da:	7463      	strb	r3, [r4, #17]
  tcphdr->urgp = 0;
 800b4dc:	74a3      	strb	r3, [r4, #18]
 800b4de:	74e3      	strb	r3, [r4, #19]

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 800b4e0:	4630      	mov	r0, r6
 800b4e2:	f7fa fef5 	bl	80062d0 <ip4_route>
  if (netif != NULL) {
 800b4e6:	b150      	cbz	r0, 800b4fe <tcp_rst+0x82>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 800b4e8:	9002      	str	r0, [sp, #8]
 800b4ea:	2306      	movs	r3, #6
 800b4ec:	9301      	str	r3, [sp, #4]
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	9300      	str	r3, [sp, #0]
 800b4f2:	23ff      	movs	r3, #255	; 0xff
 800b4f4:	4632      	mov	r2, r6
 800b4f6:	4649      	mov	r1, r9
 800b4f8:	4628      	mov	r0, r5
 800b4fa:	f7fb f88f 	bl	800661c <ip4_output_if>
  }
  pbuf_free(p);
 800b4fe:	4628      	mov	r0, r5
 800b500:	f7fc fa22 	bl	8007948 <pbuf_free>
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800b504:	b005      	add	sp, #20
 800b506:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800b50a:	4b04      	ldr	r3, [pc, #16]	; (800b51c <tcp_rst+0xa0>)
 800b50c:	f240 524d 	movw	r2, #1357	; 0x54d
 800b510:	4903      	ldr	r1, [pc, #12]	; (800b520 <tcp_rst+0xa4>)
 800b512:	4804      	ldr	r0, [pc, #16]	; (800b524 <tcp_rst+0xa8>)
 800b514:	f001 fb6b 	bl	800cbee <iprintf>
 800b518:	e7c1      	b.n	800b49e <tcp_rst+0x22>
 800b51a:	bf00      	nop
 800b51c:	0800f144 	.word	0x0800f144
 800b520:	0800ef24 	.word	0x0800ef24
 800b524:	0800d378 	.word	0x0800d378

0800b528 <tcp_rexmit_rto>:
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 800b528:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 800b52a:	b10a      	cbz	r2, 800b530 <tcp_rexmit_rto+0x8>
{
 800b52c:	b508      	push	{r3, lr}
 800b52e:	e001      	b.n	800b534 <tcp_rexmit_rto+0xc>
 800b530:	4770      	bx	lr
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 800b532:	461a      	mov	r2, r3
 800b534:	6813      	ldr	r3, [r2, #0]
 800b536:	2b00      	cmp	r3, #0
 800b538:	d1fb      	bne.n	800b532 <tcp_rexmit_rto+0xa>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800b53a:	6e83      	ldr	r3, [r0, #104]	; 0x68
 800b53c:	6013      	str	r3, [r2, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800b53e:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800b540:	6683      	str	r3, [r0, #104]	; 0x68
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800b542:	2300      	movs	r3, #0
 800b544:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800b546:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 800b54a:	2bff      	cmp	r3, #255	; 0xff
 800b54c:	d002      	beq.n	800b554 <tcp_rexmit_rto+0x2c>
    ++pcb->nrtx;
 800b54e:	3301      	adds	r3, #1
 800b550:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800b554:	2300      	movs	r3, #0
 800b556:	6343      	str	r3, [r0, #52]	; 0x34

  /* Do the actual retransmission */
  tcp_output(pcb);
 800b558:	f7ff fe34 	bl	800b1c4 <tcp_output>
 800b55c:	bd08      	pop	{r3, pc}

0800b55e <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 800b55e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 800b560:	6ec6      	ldr	r6, [r0, #108]	; 0x6c
 800b562:	b316      	cbz	r6, 800b5aa <tcp_rexmit+0x4c>
 800b564:	4607      	mov	r7, r0
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
  pcb->unacked = seg->next;
 800b566:	6833      	ldr	r3, [r6, #0]
 800b568:	66c3      	str	r3, [r0, #108]	; 0x6c

  cur_seg = &(pcb->unsent);
 800b56a:	f100 0568 	add.w	r5, r0, #104	; 0x68
  while (*cur_seg &&
 800b56e:	e000      	b.n	800b572 <tcp_rexmit+0x14>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
 800b570:	682d      	ldr	r5, [r5, #0]
  while (*cur_seg &&
 800b572:	682b      	ldr	r3, [r5, #0]
 800b574:	b15b      	cbz	r3, 800b58e <tcp_rexmit+0x30>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800b576:	68db      	ldr	r3, [r3, #12]
 800b578:	6858      	ldr	r0, [r3, #4]
 800b57a:	f7fa f902 	bl	8005782 <lwip_htonl>
 800b57e:	4604      	mov	r4, r0
 800b580:	68f3      	ldr	r3, [r6, #12]
 800b582:	6858      	ldr	r0, [r3, #4]
 800b584:	f7fa f8fd 	bl	8005782 <lwip_htonl>
 800b588:	1a20      	subs	r0, r4, r0
  while (*cur_seg &&
 800b58a:	2800      	cmp	r0, #0
 800b58c:	dbf0      	blt.n	800b570 <tcp_rexmit+0x12>
  }
  seg->next = *cur_seg;
 800b58e:	682b      	ldr	r3, [r5, #0]
 800b590:	6033      	str	r3, [r6, #0]
  *cur_seg = seg;
 800b592:	602e      	str	r6, [r5, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800b594:	6833      	ldr	r3, [r6, #0]
 800b596:	b14b      	cbz	r3, 800b5ac <tcp_rexmit+0x4e>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800b598:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800b59c:	2bff      	cmp	r3, #255	; 0xff
 800b59e:	d002      	beq.n	800b5a6 <tcp_rexmit+0x48>
    ++pcb->nrtx;
 800b5a0:	3301      	adds	r3, #1
 800b5a2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800b5a6:	2300      	movs	r3, #0
 800b5a8:	637b      	str	r3, [r7, #52]	; 0x34
 800b5aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    pcb->unsent_oversize = 0;
 800b5ac:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800b5b0:	e7f2      	b.n	800b598 <tcp_rexmit+0x3a>

0800b5b2 <tcp_rexmit_fast>:
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800b5b2:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800b5b4:	b11b      	cbz	r3, 800b5be <tcp_rexmit_fast+0xc>
 800b5b6:	7e83      	ldrb	r3, [r0, #26]
 800b5b8:	f013 0f04 	tst.w	r3, #4
 800b5bc:	d000      	beq.n	800b5c0 <tcp_rexmit_fast+0xe>
 800b5be:	4770      	bx	lr
{
 800b5c0:	b510      	push	{r4, lr}
 800b5c2:	4604      	mov	r4, r0
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 800b5c4:	f7ff ffcb 	bl	800b55e <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800b5c8:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 800b5cc:	f8b4 205c 	ldrh.w	r2, [r4, #92]	; 0x5c
 800b5d0:	4293      	cmp	r3, r2
 800b5d2:	d218      	bcs.n	800b606 <tcp_rexmit_fast+0x54>
 800b5d4:	085a      	lsrs	r2, r3, #1
 800b5d6:	f8a4 204a 	strh.w	r2, [r4, #74]	; 0x4a

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 800b5da:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800b5dc:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 800b5e0:	d202      	bcs.n	800b5e8 <tcp_rexmit_fast+0x36>
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
 800b5e2:	005a      	lsls	r2, r3, #1
 800b5e4:	f8a4 204a 	strh.w	r2, [r4, #74]	; 0x4a
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800b5e8:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
 800b5ec:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800b5f0:	fa12 f383 	uxtah	r3, r2, r3
 800b5f4:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
    pcb->flags |= TF_INFR;
 800b5f8:	7ea3      	ldrb	r3, [r4, #26]
 800b5fa:	f043 0304 	orr.w	r3, r3, #4
 800b5fe:	76a3      	strb	r3, [r4, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 800b600:	2300      	movs	r3, #0
 800b602:	8623      	strh	r3, [r4, #48]	; 0x30
 800b604:	bd10      	pop	{r4, pc}
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800b606:	0852      	lsrs	r2, r2, #1
 800b608:	e7e5      	b.n	800b5d6 <tcp_rexmit_fast+0x24>

0800b60a <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800b60a:	b570      	push	{r4, r5, r6, lr}
 800b60c:	b084      	sub	sp, #16
 800b60e:	4604      	mov	r4, r0
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 800b610:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 800b612:	3801      	subs	r0, #1
 800b614:	f7fa f8b5 	bl	8005782 <lwip_htonl>
 800b618:	4603      	mov	r3, r0
 800b61a:	2200      	movs	r2, #0
 800b61c:	4611      	mov	r1, r2
 800b61e:	4620      	mov	r0, r4
 800b620:	f7ff f97a 	bl	800a918 <tcp_output_alloc_header>
  if (p == NULL) {
 800b624:	b1d0      	cbz	r0, 800b65c <tcp_keepalive+0x52>
 800b626:	4605      	mov	r5, r0
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800b628:	1d26      	adds	r6, r4, #4
 800b62a:	4630      	mov	r0, r6
 800b62c:	f7fa fe50 	bl	80062d0 <ip4_route>
  if (netif == NULL) {
 800b630:	b188      	cbz	r0, 800b656 <tcp_keepalive+0x4c>
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 800b632:	7aa3      	ldrb	r3, [r4, #10]
 800b634:	9002      	str	r0, [sp, #8]
 800b636:	2206      	movs	r2, #6
 800b638:	9201      	str	r2, [sp, #4]
 800b63a:	2200      	movs	r2, #0
 800b63c:	9200      	str	r2, [sp, #0]
 800b63e:	4632      	mov	r2, r6
 800b640:	4621      	mov	r1, r4
 800b642:	4628      	mov	r0, r5
 800b644:	f7fa ffea 	bl	800661c <ip4_output_if>
 800b648:	4604      	mov	r4, r0
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 800b64a:	4628      	mov	r0, r5
 800b64c:	f7fc f97c 	bl	8007948 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 800b650:	4620      	mov	r0, r4
 800b652:	b004      	add	sp, #16
 800b654:	bd70      	pop	{r4, r5, r6, pc}
    err = ERR_RTE;
 800b656:	f06f 0403 	mvn.w	r4, #3
 800b65a:	e7f6      	b.n	800b64a <tcp_keepalive+0x40>
    return ERR_MEM;
 800b65c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800b660:	e7f6      	b.n	800b650 <tcp_keepalive+0x46>

0800b662 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800b662:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b666:	b084      	sub	sp, #16
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 800b668:	6ec5      	ldr	r5, [r0, #108]	; 0x6c

  if (seg == NULL) {
 800b66a:	b175      	cbz	r5, 800b68a <tcp_zero_window_probe+0x28>
    seg = pcb->unsent;
  }
  if (seg == NULL) {
 800b66c:	2d00      	cmp	r5, #0
 800b66e:	d05d      	beq.n	800b72c <tcp_zero_window_probe+0xca>
 800b670:	4604      	mov	r4, r0
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800b672:	68eb      	ldr	r3, [r5, #12]
 800b674:	8998      	ldrh	r0, [r3, #12]
 800b676:	f7fa f881 	bl	800577c <lwip_htons>
 800b67a:	f010 0f01 	tst.w	r0, #1
 800b67e:	d006      	beq.n	800b68e <tcp_zero_window_probe+0x2c>
 800b680:	892b      	ldrh	r3, [r5, #8]
 800b682:	2b00      	cmp	r3, #0
 800b684:	d040      	beq.n	800b708 <tcp_zero_window_probe+0xa6>
 800b686:	2200      	movs	r2, #0
 800b688:	e002      	b.n	800b690 <tcp_zero_window_probe+0x2e>
    seg = pcb->unsent;
 800b68a:	6e85      	ldr	r5, [r0, #104]	; 0x68
 800b68c:	e7ee      	b.n	800b66c <tcp_zero_window_probe+0xa>
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800b68e:	2200      	movs	r2, #0
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800b690:	f002 06ff 	and.w	r6, r2, #255	; 0xff

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 800b694:	68eb      	ldr	r3, [r5, #12]
 800b696:	685b      	ldr	r3, [r3, #4]
 800b698:	f082 0201 	eor.w	r2, r2, #1
 800b69c:	2100      	movs	r1, #0
 800b69e:	4620      	mov	r0, r4
 800b6a0:	f7ff f93a 	bl	800a918 <tcp_output_alloc_header>
  if (p == NULL) {
 800b6a4:	4607      	mov	r7, r0
 800b6a6:	2800      	cmp	r0, #0
 800b6a8:	d042      	beq.n	800b730 <tcp_zero_window_probe+0xce>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800b6aa:	f8d0 8004 	ldr.w	r8, [r0, #4]

  if (is_fin) {
 800b6ae:	b36e      	cbz	r6, 800b70c <tcp_zero_window_probe+0xaa>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800b6b0:	f8b8 600c 	ldrh.w	r6, [r8, #12]
 800b6b4:	f426 567c 	bic.w	r6, r6, #16128	; 0x3f00
 800b6b8:	b2b6      	uxth	r6, r6
 800b6ba:	2011      	movs	r0, #17
 800b6bc:	f7fa f85e 	bl	800577c <lwip_htons>
 800b6c0:	4330      	orrs	r0, r6
 800b6c2:	f8a8 000c 	strh.w	r0, [r8, #12]
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800b6c6:	68eb      	ldr	r3, [r5, #12]
 800b6c8:	6858      	ldr	r0, [r3, #4]
 800b6ca:	f7fa f85a 	bl	8005782 <lwip_htonl>
 800b6ce:	3001      	adds	r0, #1
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800b6d0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800b6d2:	1a1b      	subs	r3, r3, r0
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	db24      	blt.n	800b722 <tcp_zero_window_probe+0xc0>
    pcb->snd_nxt = snd_nxt;
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800b6d8:	1d25      	adds	r5, r4, #4
 800b6da:	4628      	mov	r0, r5
 800b6dc:	f7fa fdf8 	bl	80062d0 <ip4_route>
  if (netif == NULL) {
 800b6e0:	b308      	cbz	r0, 800b726 <tcp_zero_window_probe+0xc4>
#endif
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800b6e2:	7aa3      	ldrb	r3, [r4, #10]
 800b6e4:	9002      	str	r0, [sp, #8]
 800b6e6:	2206      	movs	r2, #6
 800b6e8:	9201      	str	r2, [sp, #4]
 800b6ea:	2200      	movs	r2, #0
 800b6ec:	9200      	str	r2, [sp, #0]
 800b6ee:	462a      	mov	r2, r5
 800b6f0:	4621      	mov	r1, r4
 800b6f2:	4638      	mov	r0, r7
 800b6f4:	f7fa ff92 	bl	800661c <ip4_output_if>
 800b6f8:	4604      	mov	r4, r0
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 800b6fa:	4638      	mov	r0, r7
 800b6fc:	f7fc f924 	bl	8007948 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 800b700:	4620      	mov	r0, r4
 800b702:	b004      	add	sp, #16
 800b704:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800b708:	2201      	movs	r2, #1
 800b70a:	e7c1      	b.n	800b690 <tcp_zero_window_probe+0x2e>
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800b70c:	6868      	ldr	r0, [r5, #4]
 800b70e:	8903      	ldrh	r3, [r0, #8]
 800b710:	892a      	ldrh	r2, [r5, #8]
 800b712:	1a9b      	subs	r3, r3, r2
 800b714:	b29b      	uxth	r3, r3
 800b716:	2201      	movs	r2, #1
 800b718:	f108 0114 	add.w	r1, r8, #20
 800b71c:	f7fc fbd6 	bl	8007ecc <pbuf_copy_partial>
 800b720:	e7d1      	b.n	800b6c6 <tcp_zero_window_probe+0x64>
    pcb->snd_nxt = snd_nxt;
 800b722:	64e0      	str	r0, [r4, #76]	; 0x4c
 800b724:	e7d8      	b.n	800b6d8 <tcp_zero_window_probe+0x76>
    err = ERR_RTE;
 800b726:	f06f 0403 	mvn.w	r4, #3
 800b72a:	e7e6      	b.n	800b6fa <tcp_zero_window_probe+0x98>
    return ERR_OK;
 800b72c:	2400      	movs	r4, #0
 800b72e:	e7e7      	b.n	800b700 <tcp_zero_window_probe+0x9e>
    return ERR_MEM;
 800b730:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800b734:	e7e4      	b.n	800b700 <tcp_zero_window_probe+0x9e>
	...

0800b738 <sys_timeouts_sleeptime>:
#if !NO_SYS
static
#endif /* !NO_SYS */
u32_t
sys_timeouts_sleeptime(void)
{
 800b738:	b508      	push	{r3, lr}
  u32_t diff;
  if (next_timeout == NULL) {
 800b73a:	4b0a      	ldr	r3, [pc, #40]	; (800b764 <sys_timeouts_sleeptime+0x2c>)
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	b15b      	cbz	r3, 800b758 <sys_timeouts_sleeptime+0x20>
    return 0xffffffff;
  }
  diff = sys_now() - timeouts_last_time;
 800b740:	f000 fefa 	bl	800c538 <sys_now>
 800b744:	4b08      	ldr	r3, [pc, #32]	; (800b768 <sys_timeouts_sleeptime+0x30>)
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	1ac0      	subs	r0, r0, r3
  if (diff > next_timeout->time) {
 800b74a:	4b06      	ldr	r3, [pc, #24]	; (800b764 <sys_timeouts_sleeptime+0x2c>)
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	685b      	ldr	r3, [r3, #4]
 800b750:	4298      	cmp	r0, r3
 800b752:	d804      	bhi.n	800b75e <sys_timeouts_sleeptime+0x26>
    return 0;
  } else {
    return next_timeout->time - diff;
 800b754:	1a18      	subs	r0, r3, r0
 800b756:	bd08      	pop	{r3, pc}
    return 0xffffffff;
 800b758:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b75c:	bd08      	pop	{r3, pc}
    return 0;
 800b75e:	2000      	movs	r0, #0
  }
}
 800b760:	bd08      	pop	{r3, pc}
 800b762:	bf00      	nop
 800b764:	20003fc0 	.word	0x20003fc0
 800b768:	20003fc8 	.word	0x20003fc8

0800b76c <sys_check_timeouts>:
  if (next_timeout) {
 800b76c:	4b15      	ldr	r3, [pc, #84]	; (800b7c4 <sys_check_timeouts+0x58>)
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	b33b      	cbz	r3, 800b7c2 <sys_check_timeouts+0x56>
{
 800b772:	b570      	push	{r4, r5, r6, lr}
    now = sys_now();
 800b774:	f000 fee0 	bl	800c538 <sys_now>
    diff = now - timeouts_last_time;
 800b778:	4b13      	ldr	r3, [pc, #76]	; (800b7c8 <sys_check_timeouts+0x5c>)
 800b77a:	681c      	ldr	r4, [r3, #0]
 800b77c:	1b04      	subs	r4, r0, r4
 800b77e:	e005      	b.n	800b78c <sys_check_timeouts+0x20>
      had_one = 0;
 800b780:	2300      	movs	r3, #0
 800b782:	e002      	b.n	800b78a <sys_check_timeouts+0x1e>
 800b784:	2300      	movs	r3, #0
 800b786:	e000      	b.n	800b78a <sys_check_timeouts+0x1e>
        had_one = 1;
 800b788:	2301      	movs	r3, #1
    } while (had_one);
 800b78a:	b1cb      	cbz	r3, 800b7c0 <sys_check_timeouts+0x54>
      tmptimeout = next_timeout;
 800b78c:	4b0d      	ldr	r3, [pc, #52]	; (800b7c4 <sys_check_timeouts+0x58>)
 800b78e:	6819      	ldr	r1, [r3, #0]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 800b790:	2900      	cmp	r1, #0
 800b792:	d0f5      	beq.n	800b780 <sys_check_timeouts+0x14>
 800b794:	684b      	ldr	r3, [r1, #4]
 800b796:	429c      	cmp	r4, r3
 800b798:	d3f4      	bcc.n	800b784 <sys_check_timeouts+0x18>
        timeouts_last_time += tmptimeout->time;
 800b79a:	480b      	ldr	r0, [pc, #44]	; (800b7c8 <sys_check_timeouts+0x5c>)
 800b79c:	6802      	ldr	r2, [r0, #0]
 800b79e:	441a      	add	r2, r3
 800b7a0:	6002      	str	r2, [r0, #0]
        diff -= tmptimeout->time;
 800b7a2:	1ae4      	subs	r4, r4, r3
        next_timeout = tmptimeout->next;
 800b7a4:	680a      	ldr	r2, [r1, #0]
 800b7a6:	4b07      	ldr	r3, [pc, #28]	; (800b7c4 <sys_check_timeouts+0x58>)
 800b7a8:	601a      	str	r2, [r3, #0]
        handler = tmptimeout->h;
 800b7aa:	688d      	ldr	r5, [r1, #8]
        arg = tmptimeout->arg;
 800b7ac:	68ce      	ldr	r6, [r1, #12]
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800b7ae:	200a      	movs	r0, #10
 800b7b0:	f7fb fef4 	bl	800759c <memp_free>
        if (handler != NULL) {
 800b7b4:	2d00      	cmp	r5, #0
 800b7b6:	d0e7      	beq.n	800b788 <sys_check_timeouts+0x1c>
          handler(arg);
 800b7b8:	4630      	mov	r0, r6
 800b7ba:	47a8      	blx	r5
        had_one = 1;
 800b7bc:	2301      	movs	r3, #1
 800b7be:	e7e4      	b.n	800b78a <sys_check_timeouts+0x1e>
 800b7c0:	bd70      	pop	{r4, r5, r6, pc}
 800b7c2:	4770      	bx	lr
 800b7c4:	20003fc0 	.word	0x20003fc0
 800b7c8:	20003fc8 	.word	0x20003fc8

0800b7cc <sys_timeout>:
{
 800b7cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7d0:	4605      	mov	r5, r0
 800b7d2:	4688      	mov	r8, r1
 800b7d4:	4617      	mov	r7, r2
  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800b7d6:	200a      	movs	r0, #10
 800b7d8:	f7fb fec6 	bl	8007568 <memp_malloc>
  if (timeout == NULL) {
 800b7dc:	b308      	cbz	r0, 800b822 <sys_timeout+0x56>
 800b7de:	4604      	mov	r4, r0
  now = sys_now();
 800b7e0:	f000 feaa 	bl	800c538 <sys_now>
  if (next_timeout == NULL) {
 800b7e4:	4b23      	ldr	r3, [pc, #140]	; (800b874 <sys_timeout+0xa8>)
 800b7e6:	681e      	ldr	r6, [r3, #0]
 800b7e8:	b31e      	cbz	r6, 800b832 <sys_timeout+0x66>
    diff = now - timeouts_last_time;
 800b7ea:	4b23      	ldr	r3, [pc, #140]	; (800b878 <sys_timeout+0xac>)
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	1ac0      	subs	r0, r0, r3
  timeout->next = NULL;
 800b7f0:	2300      	movs	r3, #0
 800b7f2:	6023      	str	r3, [r4, #0]
  timeout->h = handler;
 800b7f4:	f8c4 8008 	str.w	r8, [r4, #8]
  timeout->arg = arg;
 800b7f8:	60e7      	str	r7, [r4, #12]
  timeout->time = msecs + diff;
 800b7fa:	4428      	add	r0, r5
 800b7fc:	6060      	str	r0, [r4, #4]
  if (next_timeout == NULL) {
 800b7fe:	b1e6      	cbz	r6, 800b83a <sys_timeout+0x6e>
  if (next_timeout->time > msecs) {
 800b800:	6873      	ldr	r3, [r6, #4]
 800b802:	429d      	cmp	r5, r3
 800b804:	d31d      	bcc.n	800b842 <sys_timeout+0x76>
 800b806:	4632      	mov	r2, r6
    for (t = next_timeout; t != NULL; t = t->next) {
 800b808:	2a00      	cmp	r2, #0
 800b80a:	d030      	beq.n	800b86e <sys_timeout+0xa2>
      timeout->time -= t->time;
 800b80c:	6851      	ldr	r1, [r2, #4]
 800b80e:	6863      	ldr	r3, [r4, #4]
 800b810:	1a5b      	subs	r3, r3, r1
 800b812:	6063      	str	r3, [r4, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 800b814:	6811      	ldr	r1, [r2, #0]
 800b816:	b1d9      	cbz	r1, 800b850 <sys_timeout+0x84>
 800b818:	6848      	ldr	r0, [r1, #4]
 800b81a:	4283      	cmp	r3, r0
 800b81c:	d318      	bcc.n	800b850 <sys_timeout+0x84>
    for (t = next_timeout; t != NULL; t = t->next) {
 800b81e:	460a      	mov	r2, r1
 800b820:	e7f2      	b.n	800b808 <sys_timeout+0x3c>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800b822:	4b16      	ldr	r3, [pc, #88]	; (800b87c <sys_timeout+0xb0>)
 800b824:	22d4      	movs	r2, #212	; 0xd4
 800b826:	4916      	ldr	r1, [pc, #88]	; (800b880 <sys_timeout+0xb4>)
 800b828:	4816      	ldr	r0, [pc, #88]	; (800b884 <sys_timeout+0xb8>)
 800b82a:	f001 f9e0 	bl	800cbee <iprintf>
 800b82e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    timeouts_last_time = now;
 800b832:	4b11      	ldr	r3, [pc, #68]	; (800b878 <sys_timeout+0xac>)
 800b834:	6018      	str	r0, [r3, #0]
    diff = 0;
 800b836:	2000      	movs	r0, #0
 800b838:	e7da      	b.n	800b7f0 <sys_timeout+0x24>
    next_timeout = timeout;
 800b83a:	4b0e      	ldr	r3, [pc, #56]	; (800b874 <sys_timeout+0xa8>)
 800b83c:	601c      	str	r4, [r3, #0]
    return;
 800b83e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    next_timeout->time -= msecs;
 800b842:	1b5d      	subs	r5, r3, r5
 800b844:	6075      	str	r5, [r6, #4]
    timeout->next = next_timeout;
 800b846:	6026      	str	r6, [r4, #0]
    next_timeout = timeout;
 800b848:	4b0a      	ldr	r3, [pc, #40]	; (800b874 <sys_timeout+0xa8>)
 800b84a:	601c      	str	r4, [r3, #0]
 800b84c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (t->next != NULL) {
 800b850:	b139      	cbz	r1, 800b862 <sys_timeout+0x96>
          t->next->time -= timeout->time;
 800b852:	6848      	ldr	r0, [r1, #4]
 800b854:	1ac3      	subs	r3, r0, r3
 800b856:	604b      	str	r3, [r1, #4]
        timeout->next = t->next;
 800b858:	6813      	ldr	r3, [r2, #0]
 800b85a:	6023      	str	r3, [r4, #0]
        t->next = timeout;
 800b85c:	6014      	str	r4, [r2, #0]
        break;
 800b85e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        } else if (timeout->time > msecs) {
 800b862:	429d      	cmp	r5, r3
 800b864:	d2f8      	bcs.n	800b858 <sys_timeout+0x8c>
          timeout->time = msecs + next_timeout->time;
 800b866:	6873      	ldr	r3, [r6, #4]
 800b868:	441d      	add	r5, r3
 800b86a:	6065      	str	r5, [r4, #4]
 800b86c:	e7f4      	b.n	800b858 <sys_timeout+0x8c>
 800b86e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b872:	bf00      	nop
 800b874:	20003fc0 	.word	0x20003fc0
 800b878:	20003fc8 	.word	0x20003fc8
 800b87c:	0800f200 	.word	0x0800f200
 800b880:	0800f234 	.word	0x0800f234
 800b884:	0800d378 	.word	0x0800d378

0800b888 <tcp_timer_needed>:
{
 800b888:	b508      	push	{r3, lr}
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800b88a:	4b0a      	ldr	r3, [pc, #40]	; (800b8b4 <tcp_timer_needed+0x2c>)
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	b953      	cbnz	r3, 800b8a6 <tcp_timer_needed+0x1e>
 800b890:	4b09      	ldr	r3, [pc, #36]	; (800b8b8 <tcp_timer_needed+0x30>)
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	b143      	cbz	r3, 800b8a8 <tcp_timer_needed+0x20>
    tcpip_tcp_timer_active = 1;
 800b896:	2201      	movs	r2, #1
 800b898:	4b06      	ldr	r3, [pc, #24]	; (800b8b4 <tcp_timer_needed+0x2c>)
 800b89a:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800b89c:	2200      	movs	r2, #0
 800b89e:	4907      	ldr	r1, [pc, #28]	; (800b8bc <tcp_timer_needed+0x34>)
 800b8a0:	20fa      	movs	r0, #250	; 0xfa
 800b8a2:	f7ff ff93 	bl	800b7cc <sys_timeout>
 800b8a6:	bd08      	pop	{r3, pc}
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800b8a8:	4b05      	ldr	r3, [pc, #20]	; (800b8c0 <tcp_timer_needed+0x38>)
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d1f2      	bne.n	800b896 <tcp_timer_needed+0xe>
 800b8b0:	e7f9      	b.n	800b8a6 <tcp_timer_needed+0x1e>
 800b8b2:	bf00      	nop
 800b8b4:	20003fc4 	.word	0x20003fc4
 800b8b8:	2000797c 	.word	0x2000797c
 800b8bc:	0800b8c5 	.word	0x0800b8c5
 800b8c0:	2000798c 	.word	0x2000798c

0800b8c4 <tcpip_tcp_timer>:
{
 800b8c4:	b508      	push	{r3, lr}
  tcp_tmr();
 800b8c6:	f7fd f8b7 	bl	8008a38 <tcp_tmr>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800b8ca:	4b08      	ldr	r3, [pc, #32]	; (800b8ec <tcpip_tcp_timer+0x28>)
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	b12b      	cbz	r3, 800b8dc <tcpip_tcp_timer+0x18>
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800b8d0:	2200      	movs	r2, #0
 800b8d2:	4907      	ldr	r1, [pc, #28]	; (800b8f0 <tcpip_tcp_timer+0x2c>)
 800b8d4:	20fa      	movs	r0, #250	; 0xfa
 800b8d6:	f7ff ff79 	bl	800b7cc <sys_timeout>
 800b8da:	bd08      	pop	{r3, pc}
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800b8dc:	4b05      	ldr	r3, [pc, #20]	; (800b8f4 <tcpip_tcp_timer+0x30>)
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d1f5      	bne.n	800b8d0 <tcpip_tcp_timer+0xc>
    tcpip_tcp_timer_active = 0;
 800b8e4:	2200      	movs	r2, #0
 800b8e6:	4b04      	ldr	r3, [pc, #16]	; (800b8f8 <tcpip_tcp_timer+0x34>)
 800b8e8:	601a      	str	r2, [r3, #0]
 800b8ea:	bd08      	pop	{r3, pc}
 800b8ec:	2000797c 	.word	0x2000797c
 800b8f0:	0800b8c5 	.word	0x0800b8c5
 800b8f4:	2000798c 	.word	0x2000798c
 800b8f8:	20003fc4 	.word	0x20003fc4

0800b8fc <sys_timeouts_init>:
{
 800b8fc:	b510      	push	{r4, lr}
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800b8fe:	2401      	movs	r4, #1
 800b900:	e008      	b.n	800b914 <sys_timeouts_init+0x18>
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 800b902:	4b08      	ldr	r3, [pc, #32]	; (800b924 <sys_timeouts_init+0x28>)
 800b904:	eb03 02c4 	add.w	r2, r3, r4, lsl #3
 800b908:	4907      	ldr	r1, [pc, #28]	; (800b928 <sys_timeouts_init+0x2c>)
 800b90a:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
 800b90e:	f7ff ff5d 	bl	800b7cc <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800b912:	3401      	adds	r4, #1
 800b914:	2c02      	cmp	r4, #2
 800b916:	d9f4      	bls.n	800b902 <sys_timeouts_init+0x6>
  timeouts_last_time = sys_now();
 800b918:	f000 fe0e 	bl	800c538 <sys_now>
 800b91c:	4b03      	ldr	r3, [pc, #12]	; (800b92c <sys_timeouts_init+0x30>)
 800b91e:	6018      	str	r0, [r3, #0]
 800b920:	bd10      	pop	{r4, pc}
 800b922:	bf00      	nop
 800b924:	0800f1e8 	.word	0x0800f1e8
 800b928:	0800b931 	.word	0x0800b931
 800b92c:	20003fc8 	.word	0x20003fc8

0800b930 <cyclic_timer>:
{
 800b930:	b510      	push	{r4, lr}
 800b932:	4604      	mov	r4, r0
  cyclic->handler();
 800b934:	6843      	ldr	r3, [r0, #4]
 800b936:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 800b938:	4622      	mov	r2, r4
 800b93a:	4902      	ldr	r1, [pc, #8]	; (800b944 <cyclic_timer+0x14>)
 800b93c:	6820      	ldr	r0, [r4, #0]
 800b93e:	f7ff ff45 	bl	800b7cc <sys_timeout>
 800b942:	bd10      	pop	{r4, pc}
 800b944:	0800b931 	.word	0x0800b931

0800b948 <sys_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
void
sys_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800b948:	b538      	push	{r3, r4, r5, lr}
 800b94a:	4604      	mov	r4, r0
 800b94c:	460d      	mov	r5, r1
 800b94e:	e007      	b.n	800b960 <sys_timeouts_mbox_fetch+0x18>
  u32_t sleeptime;

again:
  if (!next_timeout) {
    sys_arch_mbox_fetch(mbox, msg, 0);
 800b950:	2200      	movs	r2, #0
 800b952:	4629      	mov	r1, r5
 800b954:	4620      	mov	r0, r4
 800b956:	f000 fa8e 	bl	800be76 <sys_arch_mbox_fetch>
    return;
 800b95a:	bd38      	pop	{r3, r4, r5, pc}

  sleeptime = sys_timeouts_sleeptime();
  if (sleeptime == 0 || sys_arch_mbox_fetch(mbox, msg, sleeptime) == SYS_ARCH_TIMEOUT) {
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800b95c:	f7ff ff06 	bl	800b76c <sys_check_timeouts>
  if (!next_timeout) {
 800b960:	4b08      	ldr	r3, [pc, #32]	; (800b984 <sys_timeouts_mbox_fetch+0x3c>)
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	2b00      	cmp	r3, #0
 800b966:	d0f3      	beq.n	800b950 <sys_timeouts_mbox_fetch+0x8>
  sleeptime = sys_timeouts_sleeptime();
 800b968:	f7ff fee6 	bl	800b738 <sys_timeouts_sleeptime>
  if (sleeptime == 0 || sys_arch_mbox_fetch(mbox, msg, sleeptime) == SYS_ARCH_TIMEOUT) {
 800b96c:	4602      	mov	r2, r0
 800b96e:	2800      	cmp	r0, #0
 800b970:	d0f4      	beq.n	800b95c <sys_timeouts_mbox_fetch+0x14>
 800b972:	4629      	mov	r1, r5
 800b974:	4620      	mov	r0, r4
 800b976:	f000 fa7e 	bl	800be76 <sys_arch_mbox_fetch>
 800b97a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800b97e:	d0ed      	beq.n	800b95c <sys_timeouts_mbox_fetch+0x14>
 800b980:	bd38      	pop	{r3, r4, r5, pc}
 800b982:	bf00      	nop
 800b984:	20003fc0 	.word	0x20003fc0

0800b988 <udp_new_port>:
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
  u16_t n = 0;
 800b988:	2000      	movs	r0, #0
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800b98a:	4a10      	ldr	r2, [pc, #64]	; (800b9cc <udp_new_port+0x44>)
 800b98c:	8813      	ldrh	r3, [r2, #0]
 800b98e:	1c59      	adds	r1, r3, #1
 800b990:	8011      	strh	r1, [r2, #0]
 800b992:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b996:	4293      	cmp	r3, r2
 800b998:	d009      	beq.n	800b9ae <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800b99a:	4b0d      	ldr	r3, [pc, #52]	; (800b9d0 <udp_new_port+0x48>)
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	b193      	cbz	r3, 800b9c6 <udp_new_port+0x3e>
    if (pcb->local_port == udp_port) {
 800b9a0:	8a59      	ldrh	r1, [r3, #18]
 800b9a2:	4a0a      	ldr	r2, [pc, #40]	; (800b9cc <udp_new_port+0x44>)
 800b9a4:	8812      	ldrh	r2, [r2, #0]
 800b9a6:	4291      	cmp	r1, r2
 800b9a8:	d006      	beq.n	800b9b8 <udp_new_port+0x30>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800b9aa:	68db      	ldr	r3, [r3, #12]
 800b9ac:	e7f7      	b.n	800b99e <udp_new_port+0x16>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800b9ae:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800b9b2:	4b06      	ldr	r3, [pc, #24]	; (800b9cc <udp_new_port+0x44>)
 800b9b4:	801a      	strh	r2, [r3, #0]
 800b9b6:	e7f0      	b.n	800b99a <udp_new_port+0x12>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800b9b8:	3001      	adds	r0, #1
 800b9ba:	b280      	uxth	r0, r0
 800b9bc:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 800b9c0:	d3e3      	bcc.n	800b98a <udp_new_port+0x2>
        return 0;
 800b9c2:	2000      	movs	r0, #0
      }
      goto again;
    }
  }
  return udp_port;
}
 800b9c4:	4770      	bx	lr
  return udp_port;
 800b9c6:	4b01      	ldr	r3, [pc, #4]	; (800b9cc <udp_new_port+0x44>)
 800b9c8:	8818      	ldrh	r0, [r3, #0]
 800b9ca:	4770      	bx	lr
 800b9cc:	2000000e 	.word	0x2000000e
 800b9d0:	20007994 	.word	0x20007994

0800b9d4 <udp_input_local_match>:
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800b9d4:	b16a      	cbz	r2, 800b9f2 <udp_input_local_match+0x1e>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800b9d6:	b1a8      	cbz	r0, 800ba04 <udp_input_local_match+0x30>
 800b9d8:	6803      	ldr	r3, [r0, #0]
 800b9da:	b1ab      	cbz	r3, 800ba08 <udp_input_local_match+0x34>
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800b9dc:	4a10      	ldr	r2, [pc, #64]	; (800ba20 <udp_input_local_match+0x4c>)
 800b9de:	6952      	ldr	r2, [r2, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800b9e0:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800b9e4:	d012      	beq.n	800ba0c <udp_input_local_match+0x38>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800b9e6:	6889      	ldr	r1, [r1, #8]
 800b9e8:	4053      	eors	r3, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800b9ea:	420b      	tst	r3, r1
 800b9ec:	d010      	beq.n	800ba10 <udp_input_local_match+0x3c>
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
      return 1;
    }
  }

  return 0;
 800b9ee:	2000      	movs	r0, #0
 800b9f0:	4770      	bx	lr
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800b9f2:	b178      	cbz	r0, 800ba14 <udp_input_local_match+0x40>
 800b9f4:	6803      	ldr	r3, [r0, #0]
 800b9f6:	b17b      	cbz	r3, 800ba18 <udp_input_local_match+0x44>
 800b9f8:	4a09      	ldr	r2, [pc, #36]	; (800ba20 <udp_input_local_match+0x4c>)
 800b9fa:	6952      	ldr	r2, [r2, #20]
 800b9fc:	4293      	cmp	r3, r2
 800b9fe:	d00d      	beq.n	800ba1c <udp_input_local_match+0x48>
  return 0;
 800ba00:	2000      	movs	r0, #0
 800ba02:	4770      	bx	lr
          return 1;
 800ba04:	2001      	movs	r0, #1
 800ba06:	4770      	bx	lr
 800ba08:	2001      	movs	r0, #1
 800ba0a:	4770      	bx	lr
 800ba0c:	2001      	movs	r0, #1
 800ba0e:	4770      	bx	lr
 800ba10:	2001      	movs	r0, #1
 800ba12:	4770      	bx	lr
      return 1;
 800ba14:	2001      	movs	r0, #1
 800ba16:	4770      	bx	lr
 800ba18:	2001      	movs	r0, #1
 800ba1a:	4770      	bx	lr
 800ba1c:	2001      	movs	r0, #1
}
 800ba1e:	4770      	bx	lr
 800ba20:	2000426c 	.word	0x2000426c

0800ba24 <udp_init>:
{
 800ba24:	4770      	bx	lr
	...

0800ba28 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800ba28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba2c:	b085      	sub	sp, #20
 800ba2e:	4681      	mov	r9, r0
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800ba30:	8943      	ldrh	r3, [r0, #10]
 800ba32:	2b07      	cmp	r3, #7
 800ba34:	d917      	bls.n	800ba66 <udp_input+0x3e>
 800ba36:	460f      	mov	r7, r1
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
    goto end;
  }

  udphdr = (struct udp_hdr *)p->payload;
 800ba38:	6844      	ldr	r4, [r0, #4]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800ba3a:	4b46      	ldr	r3, [pc, #280]	; (800bb54 <udp_input+0x12c>)
 800ba3c:	6819      	ldr	r1, [r3, #0]
 800ba3e:	6958      	ldr	r0, [r3, #20]
 800ba40:	f7fa fe01 	bl	8006646 <ip4_addr_isbroadcast_u32>
 800ba44:	4680      	mov	r8, r0

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800ba46:	8820      	ldrh	r0, [r4, #0]
 800ba48:	f7f9 fe98 	bl	800577c <lwip_htons>
 800ba4c:	4682      	mov	sl, r0
  dest = lwip_ntohs(udphdr->dest);
 800ba4e:	8860      	ldrh	r0, [r4, #2]
 800ba50:	f7f9 fe94 	bl	800577c <lwip_htons>
 800ba54:	4606      	mov	r6, r0
  uncon_pcb = NULL;
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ba56:	4b40      	ldr	r3, [pc, #256]	; (800bb58 <udp_input+0x130>)
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	9303      	str	r3, [sp, #12]
 800ba5c:	461c      	mov	r4, r3
  uncon_pcb = NULL;
 800ba5e:	f04f 0b00 	mov.w	fp, #0
  prev = NULL;
 800ba62:	465d      	mov	r5, fp
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ba64:	e009      	b.n	800ba7a <udp_input+0x52>
    pbuf_free(p);
 800ba66:	f7fb ff6f 	bl	8007948 <pbuf_free>
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800ba6a:	b005      	add	sp, #20
 800ba6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if ((pcb->remote_port == src) &&
 800ba70:	8aa3      	ldrh	r3, [r4, #20]
 800ba72:	459a      	cmp	sl, r3
 800ba74:	d015      	beq.n	800baa2 <udp_input+0x7a>
    prev = pcb;
 800ba76:	4625      	mov	r5, r4
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ba78:	68e4      	ldr	r4, [r4, #12]
 800ba7a:	b1fc      	cbz	r4, 800babc <udp_input+0x94>
    if ((pcb->local_port == dest) &&
 800ba7c:	8a63      	ldrh	r3, [r4, #18]
 800ba7e:	429e      	cmp	r6, r3
 800ba80:	d1f9      	bne.n	800ba76 <udp_input+0x4e>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800ba82:	4642      	mov	r2, r8
 800ba84:	4639      	mov	r1, r7
 800ba86:	4620      	mov	r0, r4
 800ba88:	f7ff ffa4 	bl	800b9d4 <udp_input_local_match>
    if ((pcb->local_port == dest) &&
 800ba8c:	2800      	cmp	r0, #0
 800ba8e:	d0f2      	beq.n	800ba76 <udp_input+0x4e>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 800ba90:	7c23      	ldrb	r3, [r4, #16]
 800ba92:	f013 0f04 	tst.w	r3, #4
 800ba96:	d1eb      	bne.n	800ba70 <udp_input+0x48>
 800ba98:	f1bb 0f00 	cmp.w	fp, #0
 800ba9c:	d1e8      	bne.n	800ba70 <udp_input+0x48>
        uncon_pcb = pcb;
 800ba9e:	46a3      	mov	fp, r4
 800baa0:	e7e6      	b.n	800ba70 <udp_input+0x48>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800baa2:	6863      	ldr	r3, [r4, #4]
      if ((pcb->remote_port == src) &&
 800baa4:	b11b      	cbz	r3, 800baae <udp_input+0x86>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800baa6:	4a2b      	ldr	r2, [pc, #172]	; (800bb54 <udp_input+0x12c>)
 800baa8:	6912      	ldr	r2, [r2, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800baaa:	4293      	cmp	r3, r2
 800baac:	d1e3      	bne.n	800ba76 <udp_input+0x4e>
        if (prev != NULL) {
 800baae:	b12d      	cbz	r5, 800babc <udp_input+0x94>
          prev->next = pcb->next;
 800bab0:	68e3      	ldr	r3, [r4, #12]
 800bab2:	60eb      	str	r3, [r5, #12]
          pcb->next = udp_pcbs;
 800bab4:	9b03      	ldr	r3, [sp, #12]
 800bab6:	60e3      	str	r3, [r4, #12]
          udp_pcbs = pcb;
 800bab8:	4b27      	ldr	r3, [pc, #156]	; (800bb58 <udp_input+0x130>)
 800baba:	601c      	str	r4, [r3, #0]
  if (pcb == NULL) {
 800babc:	b1a4      	cbz	r4, 800bae8 <udp_input+0xc0>
  if (pcb != NULL) {
 800babe:	b1ac      	cbz	r4, 800baec <udp_input+0xc4>
    for_us = 1;
 800bac0:	2301      	movs	r3, #1
  if (for_us) {
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d041      	beq.n	800bb4a <udp_input+0x122>
    if (pbuf_header(p, -UDP_HLEN)) {
 800bac6:	f06f 0107 	mvn.w	r1, #7
 800baca:	4648      	mov	r0, r9
 800bacc:	f7fb ff32 	bl	8007934 <pbuf_header>
 800bad0:	b9a0      	cbnz	r0, 800bafc <udp_input+0xd4>
    if (pcb != NULL) {
 800bad2:	b314      	cbz	r4, 800bb1a <udp_input+0xf2>
      if (pcb->recv != NULL) {
 800bad4:	69a5      	ldr	r5, [r4, #24]
 800bad6:	b1e5      	cbz	r5, 800bb12 <udp_input+0xea>
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800bad8:	69e0      	ldr	r0, [r4, #28]
 800bada:	f8cd a000 	str.w	sl, [sp]
 800bade:	4b1f      	ldr	r3, [pc, #124]	; (800bb5c <udp_input+0x134>)
 800bae0:	464a      	mov	r2, r9
 800bae2:	4621      	mov	r1, r4
 800bae4:	47a8      	blx	r5
 800bae6:	e7c0      	b.n	800ba6a <udp_input+0x42>
    pcb = uncon_pcb;
 800bae8:	465c      	mov	r4, fp
 800baea:	e7e8      	b.n	800babe <udp_input+0x96>
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	4a19      	ldr	r2, [pc, #100]	; (800bb54 <udp_input+0x12c>)
 800baf0:	6952      	ldr	r2, [r2, #20]
 800baf2:	4293      	cmp	r3, r2
 800baf4:	bf14      	ite	ne
 800baf6:	2300      	movne	r3, #0
 800baf8:	2301      	moveq	r3, #1
 800bafa:	e7e2      	b.n	800bac2 <udp_input+0x9a>
      LWIP_ASSERT("pbuf_header failed\n", 0);
 800bafc:	4b18      	ldr	r3, [pc, #96]	; (800bb60 <udp_input+0x138>)
 800bafe:	f240 1255 	movw	r2, #341	; 0x155
 800bb02:	4918      	ldr	r1, [pc, #96]	; (800bb64 <udp_input+0x13c>)
 800bb04:	4818      	ldr	r0, [pc, #96]	; (800bb68 <udp_input+0x140>)
 800bb06:	f001 f872 	bl	800cbee <iprintf>
      pbuf_free(p);
 800bb0a:	4648      	mov	r0, r9
 800bb0c:	f7fb ff1c 	bl	8007948 <pbuf_free>
      goto end;
 800bb10:	e7ab      	b.n	800ba6a <udp_input+0x42>
        pbuf_free(p);
 800bb12:	4648      	mov	r0, r9
 800bb14:	f7fb ff18 	bl	8007948 <pbuf_free>
        goto end;
 800bb18:	e7a7      	b.n	800ba6a <udp_input+0x42>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800bb1a:	f1b8 0f00 	cmp.w	r8, #0
 800bb1e:	d110      	bne.n	800bb42 <udp_input+0x11a>
 800bb20:	4b0c      	ldr	r3, [pc, #48]	; (800bb54 <udp_input+0x12c>)
 800bb22:	695b      	ldr	r3, [r3, #20]
 800bb24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bb28:	2be0      	cmp	r3, #224	; 0xe0
 800bb2a:	d00a      	beq.n	800bb42 <udp_input+0x11a>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800bb2c:	4b09      	ldr	r3, [pc, #36]	; (800bb54 <udp_input+0x12c>)
 800bb2e:	8999      	ldrh	r1, [r3, #12]
 800bb30:	3108      	adds	r1, #8
 800bb32:	b209      	sxth	r1, r1
 800bb34:	4648      	mov	r0, r9
 800bb36:	f7fb ff02 	bl	800793e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800bb3a:	2103      	movs	r1, #3
 800bb3c:	4648      	mov	r0, r9
 800bb3e:	f7fa fbbb 	bl	80062b8 <icmp_dest_unreach>
      pbuf_free(p);
 800bb42:	4648      	mov	r0, r9
 800bb44:	f7fb ff00 	bl	8007948 <pbuf_free>
 800bb48:	e78f      	b.n	800ba6a <udp_input+0x42>
    pbuf_free(p);
 800bb4a:	4648      	mov	r0, r9
 800bb4c:	f7fb fefc 	bl	8007948 <pbuf_free>
  return;
 800bb50:	e78b      	b.n	800ba6a <udp_input+0x42>
 800bb52:	bf00      	nop
 800bb54:	2000426c 	.word	0x2000426c
 800bb58:	20007994 	.word	0x20007994
 800bb5c:	2000427c 	.word	0x2000427c
 800bb60:	0800f274 	.word	0x0800f274
 800bb64:	0800f2a4 	.word	0x0800f2a4
 800bb68:	0800d378 	.word	0x0800d378

0800bb6c <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800bb6c:	b570      	push	{r4, r5, r6, lr}
 800bb6e:	4604      	mov	r4, r0
  struct udp_pcb *ipcb;
  u8_t rebind;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800bb70:	460d      	mov	r5, r1
 800bb72:	b159      	cbz	r1, 800bb8c <udp_bind+0x20>
    ipaddr = IP4_ADDR_ANY;
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 800bb74:	2c00      	cmp	r4, #0
 800bb76:	d02c      	beq.n	800bbd2 <udp_bind+0x66>
 800bb78:	2d00      	cmp	r5, #0
 800bb7a:	d02d      	beq.n	800bbd8 <udp_bind+0x6c>
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800bb7c:	4b1a      	ldr	r3, [pc, #104]	; (800bbe8 <udp_bind+0x7c>)
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	4619      	mov	r1, r3
 800bb82:	b129      	cbz	r1, 800bb90 <udp_bind+0x24>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800bb84:	42a1      	cmp	r1, r4
 800bb86:	d013      	beq.n	800bbb0 <udp_bind+0x44>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800bb88:	68c9      	ldr	r1, [r1, #12]
 800bb8a:	e7fa      	b.n	800bb82 <udp_bind+0x16>
    ipaddr = IP4_ADDR_ANY;
 800bb8c:	4d17      	ldr	r5, [pc, #92]	; (800bbec <udp_bind+0x80>)
 800bb8e:	e7f1      	b.n	800bb74 <udp_bind+0x8>
  rebind = 0;
 800bb90:	2600      	movs	r6, #0
      break;
    }
  }

  /* no port specified? */
  if (port == 0) {
 800bb92:	b982      	cbnz	r2, 800bbb6 <udp_bind+0x4a>
    port = udp_new_port();
 800bb94:	f7ff fef8 	bl	800b988 <udp_new_port>
    if (port == 0) {
 800bb98:	4602      	mov	r2, r0
 800bb9a:	b300      	cbz	r0, 800bbde <udp_bind+0x72>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800bb9c:	682b      	ldr	r3, [r5, #0]
 800bb9e:	6023      	str	r3, [r4, #0]

  pcb->local_port = port;
 800bba0:	8262      	strh	r2, [r4, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800bba2:	b9fe      	cbnz	r6, 800bbe4 <udp_bind+0x78>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800bba4:	4b10      	ldr	r3, [pc, #64]	; (800bbe8 <udp_bind+0x7c>)
 800bba6:	681a      	ldr	r2, [r3, #0]
 800bba8:	60e2      	str	r2, [r4, #12]
    udp_pcbs = pcb;
 800bbaa:	601c      	str	r4, [r3, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, &pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800bbac:	2000      	movs	r0, #0
 800bbae:	bd70      	pop	{r4, r5, r6, pc}
      rebind = 1;
 800bbb0:	2601      	movs	r6, #1
 800bbb2:	e7ee      	b.n	800bb92 <udp_bind+0x26>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800bbb4:	68db      	ldr	r3, [r3, #12]
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d0f0      	beq.n	800bb9c <udp_bind+0x30>
      if (pcb != ipcb) {
 800bbba:	42a3      	cmp	r3, r4
 800bbbc:	d0fa      	beq.n	800bbb4 <udp_bind+0x48>
          if ((ipcb->local_port == port) &&
 800bbbe:	8a59      	ldrh	r1, [r3, #18]
 800bbc0:	428a      	cmp	r2, r1
 800bbc2:	d1f7      	bne.n	800bbb4 <udp_bind+0x48>
              ip_addr_cmp(&ipcb->local_ip, ipaddr)) {
 800bbc4:	6818      	ldr	r0, [r3, #0]
 800bbc6:	6829      	ldr	r1, [r5, #0]
          if ((ipcb->local_port == port) &&
 800bbc8:	4288      	cmp	r0, r1
 800bbca:	d1f3      	bne.n	800bbb4 <udp_bind+0x48>
            return ERR_USE;
 800bbcc:	f06f 0007 	mvn.w	r0, #7
 800bbd0:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_VAL;
 800bbd2:	f06f 0005 	mvn.w	r0, #5
 800bbd6:	bd70      	pop	{r4, r5, r6, pc}
 800bbd8:	f06f 0005 	mvn.w	r0, #5
 800bbdc:	bd70      	pop	{r4, r5, r6, pc}
      return ERR_USE;
 800bbde:	f06f 0007 	mvn.w	r0, #7
 800bbe2:	bd70      	pop	{r4, r5, r6, pc}
  return ERR_OK;
 800bbe4:	2000      	movs	r0, #0
}
 800bbe6:	bd70      	pop	{r4, r5, r6, pc}
 800bbe8:	20007994 	.word	0x20007994
 800bbec:	0800dd9c 	.word	0x0800dd9c

0800bbf0 <udp_connect>:
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
  struct udp_pcb *ipcb;

  if ((pcb == NULL) || (ipaddr == NULL)) {
 800bbf0:	b310      	cbz	r0, 800bc38 <udp_connect+0x48>
{
 800bbf2:	b570      	push	{r4, r5, r6, lr}
 800bbf4:	4604      	mov	r4, r0
  if ((pcb == NULL) || (ipaddr == NULL)) {
 800bbf6:	b319      	cbz	r1, 800bc40 <udp_connect+0x50>
 800bbf8:	4616      	mov	r6, r2
 800bbfa:	460d      	mov	r5, r1
    return ERR_VAL;
  }

  if (pcb->local_port == 0) {
 800bbfc:	8a42      	ldrh	r2, [r0, #18]
 800bbfe:	b172      	cbz	r2, 800bc1e <udp_connect+0x2e>
    if (err != ERR_OK) {
      return err;
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800bc00:	682b      	ldr	r3, [r5, #0]
 800bc02:	6063      	str	r3, [r4, #4]
  pcb->remote_port = port;
 800bc04:	82a6      	strh	r6, [r4, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800bc06:	7c23      	ldrb	r3, [r4, #16]
 800bc08:	f043 0304 	orr.w	r3, r3, #4
 800bc0c:	7423      	strb	r3, [r4, #16]
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                      &pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800bc0e:	4b0f      	ldr	r3, [pc, #60]	; (800bc4c <udp_connect+0x5c>)
 800bc10:	681a      	ldr	r2, [r3, #0]
 800bc12:	4613      	mov	r3, r2
 800bc14:	b153      	cbz	r3, 800bc2c <udp_connect+0x3c>
    if (pcb == ipcb) {
 800bc16:	42a3      	cmp	r3, r4
 800bc18:	d015      	beq.n	800bc46 <udp_connect+0x56>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800bc1a:	68db      	ldr	r3, [r3, #12]
 800bc1c:	e7fa      	b.n	800bc14 <udp_connect+0x24>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800bc1e:	4601      	mov	r1, r0
 800bc20:	f7ff ffa4 	bl	800bb6c <udp_bind>
    if (err != ERR_OK) {
 800bc24:	4603      	mov	r3, r0
 800bc26:	2800      	cmp	r0, #0
 800bc28:	d0ea      	beq.n	800bc00 <udp_connect+0x10>
 800bc2a:	e003      	b.n	800bc34 <udp_connect+0x44>
      /* already on the list, just return */
      return ERR_OK;
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 800bc2c:	60e2      	str	r2, [r4, #12]
  udp_pcbs = pcb;
 800bc2e:	4b07      	ldr	r3, [pc, #28]	; (800bc4c <udp_connect+0x5c>)
 800bc30:	601c      	str	r4, [r3, #0]
  return ERR_OK;
 800bc32:	2300      	movs	r3, #0
}
 800bc34:	4618      	mov	r0, r3
 800bc36:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_VAL;
 800bc38:	f06f 0305 	mvn.w	r3, #5
}
 800bc3c:	4618      	mov	r0, r3
 800bc3e:	4770      	bx	lr
    return ERR_VAL;
 800bc40:	f06f 0305 	mvn.w	r3, #5
 800bc44:	e7f6      	b.n	800bc34 <udp_connect+0x44>
      return ERR_OK;
 800bc46:	2300      	movs	r3, #0
 800bc48:	e7f4      	b.n	800bc34 <udp_connect+0x44>
 800bc4a:	bf00      	nop
 800bc4c:	20007994 	.word	0x20007994

0800bc50 <udp_disconnect>:
#if LWIP_IPV4 && LWIP_IPV6
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    ip_addr_copy(pcb->remote_ip, *IP_ANY_TYPE);
  } else {
#endif
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
 800bc50:	2300      	movs	r3, #0
 800bc52:	6043      	str	r3, [r0, #4]
#if LWIP_IPV4 && LWIP_IPV6
  }
#endif
  pcb->remote_port = 0;
 800bc54:	8283      	strh	r3, [r0, #20]
  /* mark PCB as unconnected */
  pcb->flags &= ~UDP_FLAGS_CONNECTED;
 800bc56:	7c03      	ldrb	r3, [r0, #16]
 800bc58:	f023 0304 	bic.w	r3, r3, #4
 800bc5c:	7403      	strb	r3, [r0, #16]
 800bc5e:	4770      	bx	lr

0800bc60 <udp_recv>:
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
  /* remember recv() callback and user data */
  pcb->recv = recv;
 800bc60:	6181      	str	r1, [r0, #24]
  pcb->recv_arg = recv_arg;
 800bc62:	61c2      	str	r2, [r0, #28]
 800bc64:	4770      	bx	lr
	...

0800bc68 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 800bc68:	b508      	push	{r3, lr}
 800bc6a:	4601      	mov	r1, r0
  struct udp_pcb *pcb2;

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800bc6c:	4b0b      	ldr	r3, [pc, #44]	; (800bc9c <udp_remove+0x34>)
 800bc6e:	681a      	ldr	r2, [r3, #0]
 800bc70:	4282      	cmp	r2, r0
 800bc72:	d109      	bne.n	800bc88 <udp_remove+0x20>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800bc74:	68d2      	ldr	r2, [r2, #12]
 800bc76:	601a      	str	r2, [r3, #0]
 800bc78:	e001      	b.n	800bc7e <udp_remove+0x16>
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
        /* remove pcb from list */
        pcb2->next = pcb->next;
 800bc7a:	68cb      	ldr	r3, [r1, #12]
 800bc7c:	60d3      	str	r3, [r2, #12]
        break;
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800bc7e:	2000      	movs	r0, #0
 800bc80:	f7fb fc8c 	bl	800759c <memp_free>
 800bc84:	bd08      	pop	{r3, pc}
 800bc86:	461a      	mov	r2, r3
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800bc88:	2a00      	cmp	r2, #0
 800bc8a:	d0f8      	beq.n	800bc7e <udp_remove+0x16>
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800bc8c:	68d3      	ldr	r3, [r2, #12]
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d0f9      	beq.n	800bc86 <udp_remove+0x1e>
 800bc92:	4299      	cmp	r1, r3
 800bc94:	d0f1      	beq.n	800bc7a <udp_remove+0x12>
 800bc96:	461a      	mov	r2, r3
 800bc98:	e7f6      	b.n	800bc88 <udp_remove+0x20>
 800bc9a:	bf00      	nop
 800bc9c:	20007994 	.word	0x20007994

0800bca0 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800bca0:	b510      	push	{r4, lr}
  struct udp_pcb *pcb;
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800bca2:	2000      	movs	r0, #0
 800bca4:	f7fb fc60 	bl	8007568 <memp_malloc>
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800bca8:	4604      	mov	r4, r0
 800bcaa:	b128      	cbz	r0, 800bcb8 <udp_new+0x18>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800bcac:	2220      	movs	r2, #32
 800bcae:	2100      	movs	r1, #0
 800bcb0:	f001 f914 	bl	800cedc <memset>
    pcb->ttl = UDP_TTL;
 800bcb4:	23ff      	movs	r3, #255	; 0xff
 800bcb6:	72a3      	strb	r3, [r4, #10]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
}
 800bcb8:	4620      	mov	r0, r4
 800bcba:	bd10      	pop	{r4, pc}

0800bcbc <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 800bcbc:	b508      	push	{r3, lr}
  struct udp_pcb *pcb;
  pcb = udp_new();
 800bcbe:	f7ff ffef 	bl	800bca0 <udp_new>
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
}
 800bcc2:	bd08      	pop	{r3, pc}

0800bcc4 <udp_netif_ip_addr_changed>:
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800bcc4:	b1a0      	cbz	r0, 800bcf0 <udp_netif_ip_addr_changed+0x2c>
{
 800bcc6:	b410      	push	{r4}
 800bcc8:	4604      	mov	r4, r0
  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800bcca:	6803      	ldr	r3, [r0, #0]
 800bccc:	b173      	cbz	r3, 800bcec <udp_netif_ip_addr_changed+0x28>
 800bcce:	b169      	cbz	r1, 800bcec <udp_netif_ip_addr_changed+0x28>
 800bcd0:	680b      	ldr	r3, [r1, #0]
 800bcd2:	b15b      	cbz	r3, 800bcec <udp_netif_ip_addr_changed+0x28>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800bcd4:	4b07      	ldr	r3, [pc, #28]	; (800bcf4 <udp_netif_ip_addr_changed+0x30>)
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	e000      	b.n	800bcdc <udp_netif_ip_addr_changed+0x18>
 800bcda:	68db      	ldr	r3, [r3, #12]
 800bcdc:	b133      	cbz	r3, 800bcec <udp_netif_ip_addr_changed+0x28>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800bcde:	6818      	ldr	r0, [r3, #0]
 800bce0:	6822      	ldr	r2, [r4, #0]
 800bce2:	4290      	cmp	r0, r2
 800bce4:	d1f9      	bne.n	800bcda <udp_netif_ip_addr_changed+0x16>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800bce6:	680a      	ldr	r2, [r1, #0]
 800bce8:	601a      	str	r2, [r3, #0]
 800bcea:	e7f6      	b.n	800bcda <udp_netif_ip_addr_changed+0x16>
      }
    }
  }
}
 800bcec:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bcf0:	4770      	bx	lr
 800bcf2:	bf00      	nop
 800bcf4:	20007994 	.word	0x20007994

0800bcf8 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800bcf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcfa:	4604      	mov	r4, r0
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 800bcfc:	8945      	ldrh	r5, [r0, #10]
 800bcfe:	2d0e      	cmp	r5, #14
 800bd00:	d916      	bls.n	800bd30 <ethernet_input+0x38>
 800bd02:	460f      	mov	r7, r1
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800bd04:	6840      	ldr	r0, [r0, #4]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0],  (unsigned)ethhdr->src.addr[1],  (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3],  (unsigned)ethhdr->src.addr[4],  (unsigned)ethhdr->src.addr[5],
     lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800bd06:	8986      	ldrh	r6, [r0, #12]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800bd08:	7803      	ldrb	r3, [r0, #0]
 800bd0a:	f013 0f01 	tst.w	r3, #1
 800bd0e:	d00a      	beq.n	800bd26 <ethernet_input+0x2e>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800bd10:	2b01      	cmp	r3, #1
 800bd12:	d012      	beq.n	800bd3a <ethernet_input+0x42>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800bd14:	2206      	movs	r2, #6
 800bd16:	4921      	ldr	r1, [pc, #132]	; (800bd9c <ethernet_input+0xa4>)
 800bd18:	f001 f8c6 	bl	800cea8 <memcmp>
 800bd1c:	b918      	cbnz	r0, 800bd26 <ethernet_input+0x2e>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800bd1e:	7b63      	ldrb	r3, [r4, #13]
 800bd20:	f043 0308 	orr.w	r3, r3, #8
 800bd24:	7363      	strb	r3, [r4, #13]
    }
  }

  switch (type) {
 800bd26:	2e08      	cmp	r6, #8
 800bd28:	d012      	beq.n	800bd50 <ethernet_input+0x58>
 800bd2a:	f5b6 6fc1 	cmp.w	r6, #1544	; 0x608
 800bd2e:	d022      	beq.n	800bd76 <ethernet_input+0x7e>
  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;

free_and_return:
  pbuf_free(p);
 800bd30:	4620      	mov	r0, r4
 800bd32:	f7fb fe09 	bl	8007948 <pbuf_free>
  return ERR_OK;
}
 800bd36:	2000      	movs	r0, #0
 800bd38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800bd3a:	7843      	ldrb	r3, [r0, #1]
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d1f2      	bne.n	800bd26 <ethernet_input+0x2e>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800bd40:	7883      	ldrb	r3, [r0, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800bd42:	2b5e      	cmp	r3, #94	; 0x5e
 800bd44:	d1ef      	bne.n	800bd26 <ethernet_input+0x2e>
        p->flags |= PBUF_FLAG_LLMCAST;
 800bd46:	7b63      	ldrb	r3, [r4, #13]
 800bd48:	f043 0310 	orr.w	r3, r3, #16
 800bd4c:	7363      	strb	r3, [r4, #13]
 800bd4e:	e7ea      	b.n	800bd26 <ethernet_input+0x2e>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800bd50:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bd54:	f013 0f08 	tst.w	r3, #8
 800bd58:	d0ea      	beq.n	800bd30 <ethernet_input+0x38>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 800bd5a:	2d0d      	cmp	r5, #13
 800bd5c:	dde8      	ble.n	800bd30 <ethernet_input+0x38>
 800bd5e:	f06f 010d 	mvn.w	r1, #13
 800bd62:	4620      	mov	r0, r4
 800bd64:	f7fb fde6 	bl	8007934 <pbuf_header>
 800bd68:	2800      	cmp	r0, #0
 800bd6a:	d1e1      	bne.n	800bd30 <ethernet_input+0x38>
        ip4_input(p, netif);
 800bd6c:	4639      	mov	r1, r7
 800bd6e:	4620      	mov	r0, r4
 800bd70:	f7fa fafe 	bl	8006370 <ip4_input>
      break;
 800bd74:	e7df      	b.n	800bd36 <ethernet_input+0x3e>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800bd76:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bd7a:	f013 0f08 	tst.w	r3, #8
 800bd7e:	d0d7      	beq.n	800bd30 <ethernet_input+0x38>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 800bd80:	2d0d      	cmp	r5, #13
 800bd82:	ddd5      	ble.n	800bd30 <ethernet_input+0x38>
 800bd84:	f06f 010d 	mvn.w	r1, #13
 800bd88:	4620      	mov	r0, r4
 800bd8a:	f7fb fdd3 	bl	8007934 <pbuf_header>
 800bd8e:	2800      	cmp	r0, #0
 800bd90:	d1ce      	bne.n	800bd30 <ethernet_input+0x38>
        etharp_input(p, netif);
 800bd92:	4639      	mov	r1, r7
 800bd94:	4620      	mov	r0, r4
 800bd96:	f7f9 ff05 	bl	8005ba4 <etharp_input>
      break;
 800bd9a:	e7cc      	b.n	800bd36 <ethernet_input+0x3e>
 800bd9c:	0800f2b8 	.word	0x0800f2b8

0800bda0 <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 800bda0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bda4:	4605      	mov	r5, r0
 800bda6:	460c      	mov	r4, r1
 800bda8:	4616      	mov	r6, r2
 800bdaa:	461f      	mov	r7, r3
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800bdac:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 800bdb0:	f7f9 fce4 	bl	800577c <lwip_htons>
 800bdb4:	4680      	mov	r8, r0

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 800bdb6:	210e      	movs	r1, #14
 800bdb8:	4620      	mov	r0, r4
 800bdba:	f7fb fdbb 	bl	8007934 <pbuf_header>
 800bdbe:	b9e0      	cbnz	r0, 800bdfa <ethernet_output+0x5a>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 800bdc0:	6863      	ldr	r3, [r4, #4]
  ethhdr->type = eth_type_be;
 800bdc2:	f8a3 800c 	strh.w	r8, [r3, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 800bdc6:	683a      	ldr	r2, [r7, #0]
 800bdc8:	601a      	str	r2, [r3, #0]
 800bdca:	88ba      	ldrh	r2, [r7, #4]
 800bdcc:	809a      	strh	r2, [r3, #4]
  ETHADDR16_COPY(&ethhdr->src,  src);
 800bdce:	6832      	ldr	r2, [r6, #0]
 800bdd0:	f8c3 2006 	str.w	r2, [r3, #6]
 800bdd4:	88b2      	ldrh	r2, [r6, #4]
 800bdd6:	815a      	strh	r2, [r3, #10]

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800bdd8:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 800bddc:	2b06      	cmp	r3, #6
 800bdde:	d006      	beq.n	800bdee <ethernet_output+0x4e>
 800bde0:	4b08      	ldr	r3, [pc, #32]	; (800be04 <ethernet_output+0x64>)
 800bde2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800bde6:	4908      	ldr	r1, [pc, #32]	; (800be08 <ethernet_output+0x68>)
 800bde8:	4808      	ldr	r0, [pc, #32]	; (800be0c <ethernet_output+0x6c>)
 800bdea:	f000 ff00 	bl	800cbee <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800bdee:	69ab      	ldr	r3, [r5, #24]
 800bdf0:	4621      	mov	r1, r4
 800bdf2:	4628      	mov	r0, r5
 800bdf4:	4798      	blx	r3
 800bdf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800bdfa:	f06f 0001 	mvn.w	r0, #1
}
 800bdfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be02:	bf00      	nop
 800be04:	0800f2c0 	.word	0x0800f2c0
 800be08:	0800f2f8 	.word	0x0800f2f8
 800be0c:	0800d378 	.word	0x0800d378

0800be10 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 800be10:	b510      	push	{r4, lr}
 800be12:	b084      	sub	sp, #16
 800be14:	4604      	mov	r4, r0
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 800be16:	9100      	str	r1, [sp, #0]
 800be18:	2304      	movs	r3, #4
 800be1a:	9301      	str	r3, [sp, #4]
 800be1c:	2100      	movs	r1, #0
 800be1e:	9102      	str	r1, [sp, #8]
 800be20:	9103      	str	r1, [sp, #12]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 800be22:	4668      	mov	r0, sp
 800be24:	f7f6 fb32 	bl	800248c <osMessageCreate>
 800be28:	6020      	str	r0, [r4, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 800be2a:	b110      	cbz	r0, 800be32 <sys_mbox_new+0x22>
    return ERR_MEM;

  return ERR_OK;
 800be2c:	2000      	movs	r0, #0
}
 800be2e:	b004      	add	sp, #16
 800be30:	bd10      	pop	{r4, pc}
    return ERR_MEM;
 800be32:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800be36:	e7fa      	b.n	800be2e <sys_mbox_new+0x1e>

0800be38 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 800be38:	b510      	push	{r4, lr}
 800be3a:	4604      	mov	r4, r0
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 800be3c:	6800      	ldr	r0, [r0, #0]
 800be3e:	f7f6 fbbb 	bl	80025b8 <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 800be42:	6820      	ldr	r0, [r4, #0]
 800be44:	f7f6 fbc5 	bl	80025d2 <osMessageDelete>
 800be48:	bd10      	pop	{r4, pc}

0800be4a <sys_mbox_post>:
}

/*-----------------------------------------------------------------------------------*/
//   Posts the "msg" to the mailbox.
void sys_mbox_post(sys_mbox_t *mbox, void *data)
{
 800be4a:	b538      	push	{r3, r4, r5, lr}
 800be4c:	4605      	mov	r5, r0
 800be4e:	460c      	mov	r4, r1
#if (osCMSIS < 0x20000U)
  while(osMessagePut(*mbox, (uint32_t)data, osWaitForever) != osOK);
 800be50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800be54:	4621      	mov	r1, r4
 800be56:	6828      	ldr	r0, [r5, #0]
 800be58:	f7f6 fb2c 	bl	80024b4 <osMessagePut>
 800be5c:	2800      	cmp	r0, #0
 800be5e:	d1f7      	bne.n	800be50 <sys_mbox_post+0x6>
#else
  while(osMessageQueuePut(*mbox, &data, 0, osWaitForever) != osOK);
#endif
}
 800be60:	bd38      	pop	{r3, r4, r5, pc}

0800be62 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 800be62:	b508      	push	{r3, lr}
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 800be64:	2200      	movs	r2, #0
 800be66:	6800      	ldr	r0, [r0, #0]
 800be68:	f7f6 fb24 	bl	80024b4 <osMessagePut>
 800be6c:	b900      	cbnz	r0, 800be70 <sys_mbox_trypost+0xe>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
}
 800be6e:	bd08      	pop	{r3, pc}
    result = ERR_MEM;
 800be70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800be74:	e7fb      	b.n	800be6e <sys_mbox_trypost+0xc>

0800be76 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 800be76:	b5f0      	push	{r4, r5, r6, r7, lr}
 800be78:	b089      	sub	sp, #36	; 0x24
 800be7a:	4606      	mov	r6, r0
 800be7c:	460f      	mov	r7, r1
 800be7e:	4615      	mov	r5, r2
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 800be80:	f7f6 f9b3 	bl	80021ea <osKernelSysTick>
 800be84:	4604      	mov	r4, r0
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 800be86:	b185      	cbz	r5, 800beaa <sys_arch_mbox_fetch+0x34>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 800be88:	462a      	mov	r2, r5
 800be8a:	6831      	ldr	r1, [r6, #0]
 800be8c:	a805      	add	r0, sp, #20
 800be8e:	f7f6 fb45 	bl	800251c <osMessageGet>

    if(event.status == osEventMessage)
 800be92:	9b05      	ldr	r3, [sp, #20]
 800be94:	2b10      	cmp	r3, #16
 800be96:	d002      	beq.n	800be9e <sys_arch_mbox_fetch+0x28>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 800be98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800be9c:	e015      	b.n	800beca <sys_arch_mbox_fetch+0x54>
      *msg = (void *)event.value.v;
 800be9e:	9b06      	ldr	r3, [sp, #24]
 800bea0:	603b      	str	r3, [r7, #0]
      return (osKernelSysTick() - starttime);
 800bea2:	f7f6 f9a2 	bl	80021ea <osKernelSysTick>
 800bea6:	1b00      	subs	r0, r0, r4
 800bea8:	e00f      	b.n	800beca <sys_arch_mbox_fetch+0x54>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 800beaa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800beae:	6831      	ldr	r1, [r6, #0]
 800beb0:	4668      	mov	r0, sp
 800beb2:	f7f6 fb33 	bl	800251c <osMessageGet>
 800beb6:	e89d 0007 	ldmia.w	sp, {r0, r1, r2}
 800beba:	ab08      	add	r3, sp, #32
 800bebc:	e903 0007 	stmdb	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 800bec0:	9b06      	ldr	r3, [sp, #24]
 800bec2:	603b      	str	r3, [r7, #0]
    return (osKernelSysTick() - starttime);
 800bec4:	f7f6 f991 	bl	80021ea <osKernelSysTick>
 800bec8:	1b00      	subs	r0, r0, r4
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 800beca:	b009      	add	sp, #36	; 0x24
 800becc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800bece <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 800bece:	b510      	push	{r4, lr}
 800bed0:	b084      	sub	sp, #16
 800bed2:	460c      	mov	r4, r1
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 800bed4:	2200      	movs	r2, #0
 800bed6:	6801      	ldr	r1, [r0, #0]
 800bed8:	a801      	add	r0, sp, #4
 800beda:	f7f6 fb1f 	bl	800251c <osMessageGet>

  if(event.status == osEventMessage)
 800bede:	9b01      	ldr	r3, [sp, #4]
 800bee0:	2b10      	cmp	r3, #16
 800bee2:	d003      	beq.n	800beec <sys_arch_mbox_tryfetch+0x1e>
#endif
    return ERR_OK;
  }
  else
  {
    return SYS_MBOX_EMPTY;
 800bee4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  }
}
 800bee8:	b004      	add	sp, #16
 800beea:	bd10      	pop	{r4, pc}
    *msg = (void *)event.value.v;
 800beec:	9b02      	ldr	r3, [sp, #8]
 800beee:	6023      	str	r3, [r4, #0]
    return ERR_OK;
 800bef0:	2000      	movs	r0, #0
 800bef2:	e7f9      	b.n	800bee8 <sys_arch_mbox_tryfetch+0x1a>

0800bef4 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
  if (*mbox == SYS_MBOX_NULL)
 800bef4:	6803      	ldr	r3, [r0, #0]
 800bef6:	b10b      	cbz	r3, 800befc <sys_mbox_valid+0x8>
    return 0;
  else
    return 1;
 800bef8:	2001      	movs	r0, #1
}
 800befa:	4770      	bx	lr
    return 0;
 800befc:	2000      	movs	r0, #0
 800befe:	4770      	bx	lr

0800bf00 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
  *mbox = SYS_MBOX_NULL;
 800bf00:	2300      	movs	r3, #0
 800bf02:	6003      	str	r3, [r0, #0]
 800bf04:	4770      	bx	lr

0800bf06 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 800bf06:	b530      	push	{r4, r5, lr}
 800bf08:	b083      	sub	sp, #12
 800bf0a:	4604      	mov	r4, r0
 800bf0c:	460d      	mov	r5, r1
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 800bf0e:	2300      	movs	r3, #0
 800bf10:	9300      	str	r3, [sp, #0]
 800bf12:	9301      	str	r3, [sp, #4]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 800bf14:	2101      	movs	r1, #1
 800bf16:	4668      	mov	r0, sp
 800bf18:	f7f6 fa20 	bl	800235c <osSemaphoreCreate>
 800bf1c:	6020      	str	r0, [r4, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 800bf1e:	b140      	cbz	r0, 800bf32 <sys_sem_new+0x2c>
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
  }

  if(count == 0)	// Means it can't be taken
 800bf20:	b115      	cbz	r5, 800bf28 <sys_sem_new+0x22>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 800bf22:	2000      	movs	r0, #0
}
 800bf24:	b003      	add	sp, #12
 800bf26:	bd30      	pop	{r4, r5, pc}
    osSemaphoreWait(*sem, 0);
 800bf28:	2100      	movs	r1, #0
 800bf2a:	f7f6 fa3d 	bl	80023a8 <osSemaphoreWait>
  return ERR_OK;
 800bf2e:	2000      	movs	r0, #0
 800bf30:	e7f8      	b.n	800bf24 <sys_sem_new+0x1e>
    return ERR_MEM;
 800bf32:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bf36:	e7f5      	b.n	800bf24 <sys_sem_new+0x1e>

0800bf38 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 800bf38:	b570      	push	{r4, r5, r6, lr}
 800bf3a:	4604      	mov	r4, r0
 800bf3c:	460e      	mov	r6, r1
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 800bf3e:	f7f6 f954 	bl	80021ea <osKernelSysTick>
 800bf42:	4605      	mov	r5, r0
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 800bf44:	b956      	cbnz	r6, 800bf5c <sys_arch_sem_wait+0x24>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 800bf46:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800bf4a:	6820      	ldr	r0, [r4, #0]
 800bf4c:	f7f6 fa2c 	bl	80023a8 <osSemaphoreWait>
 800bf50:	2800      	cmp	r0, #0
 800bf52:	d1f8      	bne.n	800bf46 <sys_arch_sem_wait+0xe>
    return (osKernelSysTick() - starttime);
 800bf54:	f7f6 f949 	bl	80021ea <osKernelSysTick>
 800bf58:	1b40      	subs	r0, r0, r5
 800bf5a:	bd70      	pop	{r4, r5, r6, pc}
    if(osSemaphoreWait (*sem, timeout) == osOK)
 800bf5c:	4631      	mov	r1, r6
 800bf5e:	6820      	ldr	r0, [r4, #0]
 800bf60:	f7f6 fa22 	bl	80023a8 <osSemaphoreWait>
 800bf64:	b110      	cbz	r0, 800bf6c <sys_arch_sem_wait+0x34>
      return SYS_ARCH_TIMEOUT;
 800bf66:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 800bf6a:	bd70      	pop	{r4, r5, r6, pc}
      return (osKernelSysTick() - starttime);
 800bf6c:	f7f6 f93d 	bl	80021ea <osKernelSysTick>
 800bf70:	1b40      	subs	r0, r0, r5
 800bf72:	bd70      	pop	{r4, r5, r6, pc}

0800bf74 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 800bf74:	b508      	push	{r3, lr}
  osSemaphoreRelease(*sem);
 800bf76:	6800      	ldr	r0, [r0, #0]
 800bf78:	f7f6 fa4e 	bl	8002418 <osSemaphoreRelease>
 800bf7c:	bd08      	pop	{r3, pc}

0800bf7e <sys_sem_free>:
}

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 800bf7e:	b508      	push	{r3, lr}
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 800bf80:	6800      	ldr	r0, [r0, #0]
 800bf82:	f7f6 fa77 	bl	8002474 <osSemaphoreDelete>
 800bf86:	bd08      	pop	{r3, pc}

0800bf88 <sys_sem_valid>:
}
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
  if (*sem == SYS_SEM_NULL)
 800bf88:	6803      	ldr	r3, [r0, #0]
 800bf8a:	b10b      	cbz	r3, 800bf90 <sys_sem_valid+0x8>
    return 0;
  else
    return 1;
 800bf8c:	2001      	movs	r0, #1
}
 800bf8e:	4770      	bx	lr
    return 0;
 800bf90:	2000      	movs	r0, #0
 800bf92:	4770      	bx	lr

0800bf94 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
  *sem = SYS_SEM_NULL;
 800bf94:	2300      	movs	r3, #0
 800bf96:	6003      	str	r3, [r0, #0]
 800bf98:	4770      	bx	lr
	...

0800bf9c <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 800bf9c:	b508      	push	{r3, lr}
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 800bf9e:	4803      	ldr	r0, [pc, #12]	; (800bfac <sys_init+0x10>)
 800bfa0:	f7f6 f96b 	bl	800227a <osMutexCreate>
 800bfa4:	4b02      	ldr	r3, [pc, #8]	; (800bfb0 <sys_init+0x14>)
 800bfa6:	6018      	str	r0, [r3, #0]
 800bfa8:	bd08      	pop	{r3, pc}
 800bfaa:	bf00      	nop
 800bfac:	0800f334 	.word	0x0800f334
 800bfb0:	2000799c 	.word	0x2000799c

0800bfb4 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 800bfb4:	b510      	push	{r4, lr}
 800bfb6:	b082      	sub	sp, #8
 800bfb8:	4604      	mov	r4, r0

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 800bfba:	2300      	movs	r3, #0
 800bfbc:	9300      	str	r3, [sp, #0]
 800bfbe:	9301      	str	r3, [sp, #4]
  *mutex = osMutexCreate(osMutex(MUTEX));
 800bfc0:	4668      	mov	r0, sp
 800bfc2:	f7f6 f95a 	bl	800227a <osMutexCreate>
 800bfc6:	6020      	str	r0, [r4, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 800bfc8:	b110      	cbz	r0, 800bfd0 <sys_mutex_new+0x1c>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 800bfca:	2000      	movs	r0, #0
}
 800bfcc:	b002      	add	sp, #8
 800bfce:	bd10      	pop	{r4, pc}
    return ERR_MEM;
 800bfd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bfd4:	e7fa      	b.n	800bfcc <sys_mutex_new+0x18>

0800bfd6 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 800bfd6:	b508      	push	{r3, lr}
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 800bfd8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800bfdc:	6800      	ldr	r0, [r0, #0]
 800bfde:	f7f6 f957 	bl	8002290 <osMutexWait>
 800bfe2:	bd08      	pop	{r3, pc}

0800bfe4 <sys_mutex_unlock>:
}

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 800bfe4:	b508      	push	{r3, lr}
  osMutexRelease(*mutex);
 800bfe6:	6800      	ldr	r0, [r0, #0]
 800bfe8:	f7f6 f98a 	bl	8002300 <osMutexRelease>
 800bfec:	bd08      	pop	{r3, pc}

0800bfee <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 800bfee:	b510      	push	{r4, lr}
 800bff0:	b088      	sub	sp, #32
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 800bff2:	2400      	movs	r4, #0
 800bff4:	9403      	str	r4, [sp, #12]
 800bff6:	9404      	str	r4, [sp, #16]
 800bff8:	9406      	str	r4, [sp, #24]
 800bffa:	9407      	str	r4, [sp, #28]
 800bffc:	9001      	str	r0, [sp, #4]
 800bffe:	9102      	str	r1, [sp, #8]
 800c000:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 800c004:	f8ad 100c 	strh.w	r1, [sp, #12]
 800c008:	9305      	str	r3, [sp, #20]
  return osThreadCreate(&os_thread_def, arg);
 800c00a:	4611      	mov	r1, r2
 800c00c:	a801      	add	r0, sp, #4
 800c00e:	f7f6 f8f6 	bl	80021fe <osThreadCreate>
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 800c012:	b008      	add	sp, #32
 800c014:	bd10      	pop	{r4, pc}
	...

0800c018 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 800c018:	b508      	push	{r3, lr}
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 800c01a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800c01e:	4b03      	ldr	r3, [pc, #12]	; (800c02c <sys_arch_protect+0x14>)
 800c020:	6818      	ldr	r0, [r3, #0]
 800c022:	f7f6 f935 	bl	8002290 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
}
 800c026:	2001      	movs	r0, #1
 800c028:	bd08      	pop	{r3, pc}
 800c02a:	bf00      	nop
 800c02c:	2000799c 	.word	0x2000799c

0800c030 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 800c030:	b508      	push	{r3, lr}
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 800c032:	4b02      	ldr	r3, [pc, #8]	; (800c03c <sys_arch_unprotect+0xc>)
 800c034:	6818      	ldr	r0, [r3, #0]
 800c036:	f7f6 f963 	bl	8002300 <osMutexRelease>
 800c03a:	bd08      	pop	{r3, pc}
 800c03c:	2000799c 	.word	0x2000799c

0800c040 <lets_connect>:
#include "connection.h"



int lets_connect(const char *addr, int port)
{
 800c040:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c042:	b085      	sub	sp, #20
 800c044:	4606      	mov	r6, r0
 800c046:	460d      	mov	r5, r1
	int socket_desc;
	struct sockaddr_in server;

	//Create socket
	socket_desc = socket(AF_INET , SOCK_STREAM , 0);
 800c048:	2200      	movs	r2, #0
 800c04a:	2101      	movs	r1, #1
 800c04c:	2002      	movs	r0, #2
 800c04e:	f7f9 fa0b 	bl	8005468 <lwip_socket>
 800c052:	4604      	mov	r4, r0
	if (socket_desc == -1)
 800c054:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800c058:	d01b      	beq.n	800c092 <lets_connect+0x52>
	{
		printf("Could not create socket\n");
		printf("code d'erreur (n°%d) -%s\n", errno, strerror(errno));
	}
	server.sin_addr.s_addr = inet_addr(addr);
 800c05a:	4630      	mov	r0, r6
 800c05c:	f7fa fbd0 	bl	8006800 <ipaddr_addr>
 800c060:	9001      	str	r0, [sp, #4]
	server.sin_family = AF_INET;
 800c062:	2302      	movs	r3, #2
 800c064:	f88d 3001 	strb.w	r3, [sp, #1]
	server.sin_port = htons(port);
 800c068:	b2a8      	uxth	r0, r5
 800c06a:	f7f9 fb87 	bl	800577c <lwip_htons>
 800c06e:	f8ad 0002 	strh.w	r0, [sp, #2]

	//Connect to remote server
	if (connect(socket_desc , (struct sockaddr *)&server , sizeof(server)) < 0)
 800c072:	2210      	movs	r2, #16
 800c074:	4669      	mov	r1, sp
 800c076:	4620      	mov	r0, r4
 800c078:	f7f9 f9a6 	bl	80053c8 <lwip_connect>
 800c07c:	2800      	cmp	r0, #0
 800c07e:	db16      	blt.n	800c0ae <lets_connect+0x6e>
	{
		printf("connect error\n");
		return 1;
	}

	printf("Connected\n");
 800c080:	480d      	ldr	r0, [pc, #52]	; (800c0b8 <lets_connect+0x78>)
 800c082:	f000 fdf3 	bl	800cc6c <puts>
	close(socket_desc);
 800c086:	4620      	mov	r0, r4
 800c088:	f7f9 f962 	bl	8005350 <lwip_close>

	return 0;
 800c08c:	2000      	movs	r0, #0
}
 800c08e:	b005      	add	sp, #20
 800c090:	bdf0      	pop	{r4, r5, r6, r7, pc}
		printf("Could not create socket\n");
 800c092:	480a      	ldr	r0, [pc, #40]	; (800c0bc <lets_connect+0x7c>)
 800c094:	f000 fdea 	bl	800cc6c <puts>
		printf("code d'erreur (n°%d) -%s\n", errno, strerror(errno));
 800c098:	4b09      	ldr	r3, [pc, #36]	; (800c0c0 <lets_connect+0x80>)
 800c09a:	681f      	ldr	r7, [r3, #0]
 800c09c:	4638      	mov	r0, r7
 800c09e:	f001 f90b 	bl	800d2b8 <strerror>
 800c0a2:	4602      	mov	r2, r0
 800c0a4:	4639      	mov	r1, r7
 800c0a6:	4807      	ldr	r0, [pc, #28]	; (800c0c4 <lets_connect+0x84>)
 800c0a8:	f000 fda1 	bl	800cbee <iprintf>
 800c0ac:	e7d5      	b.n	800c05a <lets_connect+0x1a>
		printf("connect error\n");
 800c0ae:	4806      	ldr	r0, [pc, #24]	; (800c0c8 <lets_connect+0x88>)
 800c0b0:	f000 fddc 	bl	800cc6c <puts>
		return 1;
 800c0b4:	2001      	movs	r0, #1
 800c0b6:	e7ea      	b.n	800c08e <lets_connect+0x4e>
 800c0b8:	0800f380 	.word	0x0800f380
 800c0bc:	0800f33c 	.word	0x0800f33c
 800c0c0:	20007998 	.word	0x20007998
 800c0c4:	0800f354 	.word	0x0800f354
 800c0c8:	0800f370 	.word	0x0800f370

0800c0cc <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800c0cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t byteslefttocopy = 0;
  uint32_t i=0;
  

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 800c0d0:	4834      	ldr	r0, [pc, #208]	; (800c1a4 <low_level_input+0xd8>)
 800c0d2:	f7f4 fcbd 	bl	8000a50 <HAL_ETH_GetReceivedFrame_IT>
 800c0d6:	2800      	cmp	r0, #0
 800c0d8:	d160      	bne.n	800c19c <low_level_input+0xd0>
    return NULL;
  
  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 800c0da:	4b32      	ldr	r3, [pc, #200]	; (800c1a4 <low_level_input+0xd8>)
 800c0dc:	8f99      	ldrh	r1, [r3, #60]	; 0x3c
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800c0de:	f8d3 8040 	ldr.w	r8, [r3, #64]	; 0x40
  
  if (len > 0)
 800c0e2:	b949      	cbnz	r1, 800c0f8 <low_level_input+0x2c>
  struct pbuf *p = NULL;
 800c0e4:	f04f 0a00 	mov.w	sl, #0
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
  }
  
  if (p != NULL)
 800c0e8:	f1ba 0f00 	cmp.w	sl, #0
 800c0ec:	d033      	beq.n	800c156 <low_level_input+0x8a>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800c0ee:	4b2d      	ldr	r3, [pc, #180]	; (800c1a4 <low_level_input+0xd8>)
 800c0f0:	6b1f      	ldr	r7, [r3, #48]	; 0x30
    bufferoffset = 0;
    for(q = p; q != NULL; q = q->next)
 800c0f2:	46d1      	mov	r9, sl
    bufferoffset = 0;
 800c0f4:	2400      	movs	r4, #0
    for(q = p; q != NULL; q = q->next)
 800c0f6:	e027      	b.n	800c148 <low_level_input+0x7c>
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800c0f8:	2203      	movs	r2, #3
 800c0fa:	2004      	movs	r0, #4
 800c0fc:	f7fb fc90 	bl	8007a20 <pbuf_alloc>
 800c100:	4682      	mov	sl, r0
 800c102:	e7f1      	b.n	800c0e8 <low_level_input+0x1c>
      
      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 800c104:	f8d9 0004 	ldr.w	r0, [r9, #4]
 800c108:	f5c4 62be 	rsb	r2, r4, #1520	; 0x5f0
 800c10c:	3204      	adds	r2, #4
 800c10e:	eb08 0104 	add.w	r1, r8, r4
 800c112:	4430      	add	r0, r6
 800c114:	f000 fed7 	bl	800cec6 <memcpy>
        
        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800c118:	68ff      	ldr	r7, [r7, #12]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 800c11a:	f8d7 8008 	ldr.w	r8, [r7, #8]
        
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 800c11e:	f2a5 52f4 	subw	r2, r5, #1524	; 0x5f4
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 800c122:	1b36      	subs	r6, r6, r4
 800c124:	f206 56f4 	addw	r6, r6, #1524	; 0x5f4
        bufferoffset = 0;
 800c128:	2400      	movs	r4, #0
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800c12a:	18a5      	adds	r5, r4, r2
 800c12c:	f240 53f4 	movw	r3, #1524	; 0x5f4
 800c130:	429d      	cmp	r5, r3
 800c132:	d8e7      	bhi.n	800c104 <low_level_input+0x38>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 800c134:	f8d9 0004 	ldr.w	r0, [r9, #4]
 800c138:	eb08 0104 	add.w	r1, r8, r4
 800c13c:	4430      	add	r0, r6
 800c13e:	f000 fec2 	bl	800cec6 <memcpy>
    for(q = p; q != NULL; q = q->next)
 800c142:	f8d9 9000 	ldr.w	r9, [r9]
      bufferoffset = bufferoffset + byteslefttocopy;
 800c146:	462c      	mov	r4, r5
    for(q = p; q != NULL; q = q->next)
 800c148:	f1b9 0f00 	cmp.w	r9, #0
 800c14c:	d003      	beq.n	800c156 <low_level_input+0x8a>
      byteslefttocopy = q->len;
 800c14e:	f8b9 200a 	ldrh.w	r2, [r9, #10]
      payloadoffset = 0;
 800c152:	2600      	movs	r6, #0
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800c154:	e7e9      	b.n	800c12a <low_level_input+0x5e>
    }
  }  
  
    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800c156:	4b13      	ldr	r3, [pc, #76]	; (800c1a4 <low_level_input+0xd8>)
 800c158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800c15a:	2100      	movs	r1, #0
 800c15c:	e005      	b.n	800c16a <low_level_input+0x9e>
    {  
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 800c15e:	681a      	ldr	r2, [r3, #0]
 800c160:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800c164:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800c166:	68db      	ldr	r3, [r3, #12]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800c168:	3101      	adds	r1, #1
 800c16a:	4a0e      	ldr	r2, [pc, #56]	; (800c1a4 <low_level_input+0xd8>)
 800c16c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800c16e:	4291      	cmp	r1, r2
 800c170:	d3f5      	bcc.n	800c15e <low_level_input+0x92>
    }
    
    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;  
 800c172:	4b0c      	ldr	r3, [pc, #48]	; (800c1a4 <low_level_input+0xd8>)
 800c174:	2200      	movs	r2, #0
 800c176:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	f241 0214 	movw	r2, #4116	; 0x1014
 800c17e:	589a      	ldr	r2, [r3, r2]
 800c180:	f012 0f80 	tst.w	r2, #128	; 0x80
 800c184:	d007      	beq.n	800c196 <low_level_input+0xca>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 800c186:	2180      	movs	r1, #128	; 0x80
 800c188:	f241 0214 	movw	r2, #4116	; 0x1014
 800c18c:	5099      	str	r1, [r3, r2]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 800c18e:	2100      	movs	r1, #0
 800c190:	f241 0208 	movw	r2, #4104	; 0x1008
 800c194:	5099      	str	r1, [r3, r2]
  }
  return p;
}
 800c196:	4650      	mov	r0, sl
 800c198:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return NULL;
 800c19c:	f04f 0a00 	mov.w	sl, #0
 800c1a0:	e7f9      	b.n	800c196 <low_level_input+0xca>
 800c1a2:	bf00      	nop
 800c1a4:	20009270 	.word	0x20009270

0800c1a8 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input( void const * argument ) 
{
 800c1a8:	b538      	push	{r3, r4, r5, lr}
 800c1aa:	4605      	mov	r5, r0
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
  
  for( ;; )
  {
    if (osSemaphoreWait( s_xSemaphore, TIME_WAITING_FOR_INPUT)==osOK)
 800c1ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800c1b0:	4b0b      	ldr	r3, [pc, #44]	; (800c1e0 <ethernetif_input+0x38>)
 800c1b2:	6818      	ldr	r0, [r3, #0]
 800c1b4:	f7f6 f8f8 	bl	80023a8 <osSemaphoreWait>
 800c1b8:	2800      	cmp	r0, #0
 800c1ba:	d1f7      	bne.n	800c1ac <ethernetif_input+0x4>
 800c1bc:	e001      	b.n	800c1c2 <ethernetif_input+0x1a>
          if (netif->input( p, netif) != ERR_OK )
          {
            pbuf_free(p);
          }
        }
      } while(p!=NULL);
 800c1be:	2c00      	cmp	r4, #0
 800c1c0:	d0f4      	beq.n	800c1ac <ethernetif_input+0x4>
        p = low_level_input( netif );
 800c1c2:	4628      	mov	r0, r5
 800c1c4:	f7ff ff82 	bl	800c0cc <low_level_input>
        if   (p != NULL)
 800c1c8:	4604      	mov	r4, r0
 800c1ca:	2800      	cmp	r0, #0
 800c1cc:	d0f7      	beq.n	800c1be <ethernetif_input+0x16>
          if (netif->input( p, netif) != ERR_OK )
 800c1ce:	692b      	ldr	r3, [r5, #16]
 800c1d0:	4629      	mov	r1, r5
 800c1d2:	4798      	blx	r3
 800c1d4:	2800      	cmp	r0, #0
 800c1d6:	d0f2      	beq.n	800c1be <ethernetif_input+0x16>
            pbuf_free(p);
 800c1d8:	4620      	mov	r0, r4
 800c1da:	f7fb fbb5 	bl	8007948 <pbuf_free>
 800c1de:	e7ee      	b.n	800c1be <ethernetif_input+0x16>
 800c1e0:	20003fcc 	.word	0x20003fcc

0800c1e4 <low_level_output>:
{
 800c1e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1e8:	468b      	mov	fp, r1
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800c1ea:	4b2c      	ldr	r3, [pc, #176]	; (800c29c <low_level_output+0xb8>)
 800c1ec:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 800c1ee:	f8d6 a008 	ldr.w	sl, [r6, #8]
  bufferoffset = 0;
 800c1f2:	2400      	movs	r4, #0
  uint32_t framelength = 0;
 800c1f4:	4627      	mov	r7, r4
  for(q = p; q != NULL; q = q->next)
 800c1f6:	f1bb 0f00 	cmp.w	fp, #0
 800c1fa:	d032      	beq.n	800c262 <low_level_output+0x7e>
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800c1fc:	6833      	ldr	r3, [r6, #0]
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	db35      	blt.n	800c26e <low_level_output+0x8a>
      byteslefttocopy = q->len;
 800c202:	f8bb 900a 	ldrh.w	r9, [fp, #10]
      payloadoffset = 0;
 800c206:	2500      	movs	r5, #0
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800c208:	eb04 0809 	add.w	r8, r4, r9
 800c20c:	f240 53f4 	movw	r3, #1524	; 0x5f4
 800c210:	4598      	cmp	r8, r3
 800c212:	d919      	bls.n	800c248 <low_level_output+0x64>
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800c214:	f8db 1004 	ldr.w	r1, [fp, #4]
 800c218:	f5c4 62be 	rsb	r2, r4, #1520	; 0x5f0
 800c21c:	3204      	adds	r2, #4
 800c21e:	4429      	add	r1, r5
 800c220:	eb0a 0004 	add.w	r0, sl, r4
 800c224:	f000 fe4f 	bl	800cec6 <memcpy>
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800c228:	68f6      	ldr	r6, [r6, #12]
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800c22a:	6833      	ldr	r3, [r6, #0]
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	db21      	blt.n	800c274 <low_level_output+0x90>
        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 800c230:	f8d6 a008 	ldr.w	sl, [r6, #8]
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800c234:	f2a8 59f4 	subw	r9, r8, #1524	; 0x5f4
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800c238:	1b2d      	subs	r5, r5, r4
 800c23a:	f205 55f4 	addw	r5, r5, #1524	; 0x5f4
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800c23e:	1b3f      	subs	r7, r7, r4
 800c240:	f207 57f4 	addw	r7, r7, #1524	; 0x5f4
        bufferoffset = 0;
 800c244:	2400      	movs	r4, #0
 800c246:	e7df      	b.n	800c208 <low_level_output+0x24>
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 800c248:	f8db 1004 	ldr.w	r1, [fp, #4]
 800c24c:	464a      	mov	r2, r9
 800c24e:	4429      	add	r1, r5
 800c250:	eb0a 0004 	add.w	r0, sl, r4
 800c254:	f000 fe37 	bl	800cec6 <memcpy>
      framelength = framelength + byteslefttocopy;
 800c258:	444f      	add	r7, r9
  for(q = p; q != NULL; q = q->next)
 800c25a:	f8db b000 	ldr.w	fp, [fp]
      bufferoffset = bufferoffset + byteslefttocopy;
 800c25e:	4644      	mov	r4, r8
 800c260:	e7c9      	b.n	800c1f6 <low_level_output+0x12>
  HAL_ETH_TransmitFrame(&heth, framelength);
 800c262:	4639      	mov	r1, r7
 800c264:	480d      	ldr	r0, [pc, #52]	; (800c29c <low_level_output+0xb8>)
 800c266:	f7f4 fb61 	bl	800092c <HAL_ETH_TransmitFrame>
  errval = ERR_OK;
 800c26a:	2000      	movs	r0, #0
 800c26c:	e004      	b.n	800c278 <low_level_output+0x94>
        errval = ERR_USE;
 800c26e:	f06f 0007 	mvn.w	r0, #7
 800c272:	e001      	b.n	800c278 <low_level_output+0x94>
          errval = ERR_USE;
 800c274:	f06f 0007 	mvn.w	r0, #7
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 800c278:	4b08      	ldr	r3, [pc, #32]	; (800c29c <low_level_output+0xb8>)
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	f241 0214 	movw	r2, #4116	; 0x1014
 800c280:	589a      	ldr	r2, [r3, r2]
 800c282:	f012 0f20 	tst.w	r2, #32
 800c286:	d007      	beq.n	800c298 <low_level_output+0xb4>
    heth.Instance->DMASR = ETH_DMASR_TUS;
 800c288:	2120      	movs	r1, #32
 800c28a:	f241 0214 	movw	r2, #4116	; 0x1014
 800c28e:	5099      	str	r1, [r3, r2]
    heth.Instance->DMATPDR = 0;
 800c290:	2100      	movs	r1, #0
 800c292:	f241 0204 	movw	r2, #4100	; 0x1004
 800c296:	5099      	str	r1, [r3, r2]
}
 800c298:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c29c:	20009270 	.word	0x20009270

0800c2a0 <low_level_init>:
{ 
 800c2a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c2a2:	b08d      	sub	sp, #52	; 0x34
 800c2a4:	4604      	mov	r4, r0
  uint32_t regvalue = 0;
 800c2a6:	2300      	movs	r3, #0
 800c2a8:	930b      	str	r3, [sp, #44]	; 0x2c
  heth.Instance = ETH;
 800c2aa:	483e      	ldr	r0, [pc, #248]	; (800c3a4 <low_level_init+0x104>)
 800c2ac:	4a3e      	ldr	r2, [pc, #248]	; (800c3a8 <low_level_init+0x108>)
 800c2ae:	6002      	str	r2, [r0, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800c2b0:	2201      	movs	r2, #1
 800c2b2:	6042      	str	r2, [r0, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 800c2b4:	8203      	strh	r3, [r0, #16]
  MACAddr[0] = 0x00;
 800c2b6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  MACAddr[1] = 0x80;
 800c2ba:	2180      	movs	r1, #128	; 0x80
 800c2bc:	f88d 1025 	strb.w	r1, [sp, #37]	; 0x25
  MACAddr[2] = 0xE1;
 800c2c0:	21e1      	movs	r1, #225	; 0xe1
 800c2c2:	f88d 1026 	strb.w	r1, [sp, #38]	; 0x26
  MACAddr[3] = 0x00;
 800c2c6:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
  MACAddr[4] = 0x00;
 800c2ca:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
  MACAddr[5] = 0x00;
 800c2ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
  heth.Init.MACAddr = &MACAddr[0];
 800c2d2:	a909      	add	r1, sp, #36	; 0x24
 800c2d4:	6141      	str	r1, [r0, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 800c2d6:	6182      	str	r2, [r0, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800c2d8:	61c3      	str	r3, [r0, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800c2da:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800c2de:	6203      	str	r3, [r0, #32]
  hal_eth_init_status = HAL_ETH_Init(&heth);
 800c2e0:	f7f4 fcc0 	bl	8000c64 <HAL_ETH_Init>
  if (hal_eth_init_status == HAL_OK)
 800c2e4:	b928      	cbnz	r0, 800c2f2 <low_level_init+0x52>
    netif->flags |= NETIF_FLAG_LINK_UP;
 800c2e6:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 800c2ea:	f043 0304 	orr.w	r3, r3, #4
 800c2ee:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800c2f2:	4f2c      	ldr	r7, [pc, #176]	; (800c3a4 <low_level_init+0x104>)
 800c2f4:	2304      	movs	r3, #4
 800c2f6:	4a2d      	ldr	r2, [pc, #180]	; (800c3ac <low_level_init+0x10c>)
 800c2f8:	492d      	ldr	r1, [pc, #180]	; (800c3b0 <low_level_init+0x110>)
 800c2fa:	4638      	mov	r0, r7
 800c2fc:	f7f4 faa6 	bl	800084c <HAL_ETH_DMATxDescListInit>
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 800c300:	2304      	movs	r3, #4
 800c302:	4a2c      	ldr	r2, [pc, #176]	; (800c3b4 <low_level_init+0x114>)
 800c304:	492c      	ldr	r1, [pc, #176]	; (800c3b8 <low_level_init+0x118>)
 800c306:	4638      	mov	r0, r7
 800c308:	f7f4 fad9 	bl	80008be <HAL_ETH_DMARxDescListInit>
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800c30c:	2306      	movs	r3, #6
 800c30e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800c312:	697b      	ldr	r3, [r7, #20]
 800c314:	781a      	ldrb	r2, [r3, #0]
 800c316:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800c31a:	785a      	ldrb	r2, [r3, #1]
 800c31c:	f884 2026 	strb.w	r2, [r4, #38]	; 0x26
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800c320:	789a      	ldrb	r2, [r3, #2]
 800c322:	f884 2027 	strb.w	r2, [r4, #39]	; 0x27
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800c326:	78da      	ldrb	r2, [r3, #3]
 800c328:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800c32c:	791a      	ldrb	r2, [r3, #4]
 800c32e:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800c332:	795b      	ldrb	r3, [r3, #5]
 800c334:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
  netif->mtu = 1500;
 800c338:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800c33c:	8463      	strh	r3, [r4, #34]	; 0x22
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800c33e:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 800c342:	f043 030a 	orr.w	r3, r3, #10
 800c346:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
  osSemaphoreDef(SEM);
 800c34a:	2300      	movs	r3, #0
 800c34c:	9307      	str	r3, [sp, #28]
 800c34e:	9308      	str	r3, [sp, #32]
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM) , 1 );
 800c350:	2101      	movs	r1, #1
 800c352:	a807      	add	r0, sp, #28
 800c354:	f7f6 f802 	bl	800235c <osSemaphoreCreate>
 800c358:	4b18      	ldr	r3, [pc, #96]	; (800c3bc <low_level_init+0x11c>)
 800c35a:	6018      	str	r0, [r3, #0]
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800c35c:	466d      	mov	r5, sp
 800c35e:	4e18      	ldr	r6, [pc, #96]	; (800c3c0 <low_level_init+0x120>)
 800c360:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800c362:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c364:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800c368:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 800c36c:	4621      	mov	r1, r4
 800c36e:	4668      	mov	r0, sp
 800c370:	f7f5 ff45 	bl	80021fe <osThreadCreate>
  HAL_ETH_Start(&heth);
 800c374:	4638      	mov	r0, r7
 800c376:	f7f4 fda1 	bl	8000ebc <HAL_ETH_Start>
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 800c37a:	aa0b      	add	r2, sp, #44	; 0x2c
 800c37c:	211d      	movs	r1, #29
 800c37e:	4638      	mov	r0, r7
 800c380:	f7f4 fbfa 	bl	8000b78 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 800c384:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c386:	f042 020b 	orr.w	r2, r2, #11
 800c38a:	920b      	str	r2, [sp, #44]	; 0x2c
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 800c38c:	211d      	movs	r1, #29
 800c38e:	4638      	mov	r0, r7
 800c390:	f7f4 fc2e 	bl	8000bf0 <HAL_ETH_WritePHYRegister>
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 800c394:	aa0b      	add	r2, sp, #44	; 0x2c
 800c396:	211d      	movs	r1, #29
 800c398:	4638      	mov	r0, r7
 800c39a:	f7f4 fbed 	bl	8000b78 <HAL_ETH_ReadPHYRegister>
}
 800c39e:	b00d      	add	sp, #52	; 0x34
 800c3a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c3a2:	bf00      	nop
 800c3a4:	20009270 	.word	0x20009270
 800c3a8:	40028000 	.word	0x40028000
 800c3ac:	200092b8 	.word	0x200092b8
 800c3b0:	200079a0 	.word	0x200079a0
 800c3b4:	20007a20 	.word	0x20007a20
 800c3b8:	200091f0 	.word	0x200091f0
 800c3bc:	20003fcc 	.word	0x20003fcc
 800c3c0:	0800d2e8 	.word	0x0800d2e8

0800c3c4 <HAL_ETH_MspInit>:
{
 800c3c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c3c6:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c3c8:	2300      	movs	r3, #0
 800c3ca:	9307      	str	r3, [sp, #28]
 800c3cc:	9308      	str	r3, [sp, #32]
 800c3ce:	9309      	str	r3, [sp, #36]	; 0x24
 800c3d0:	930a      	str	r3, [sp, #40]	; 0x28
 800c3d2:	930b      	str	r3, [sp, #44]	; 0x2c
  if(ethHandle->Instance==ETH)
 800c3d4:	6802      	ldr	r2, [r0, #0]
 800c3d6:	4b3d      	ldr	r3, [pc, #244]	; (800c4cc <HAL_ETH_MspInit+0x108>)
 800c3d8:	429a      	cmp	r2, r3
 800c3da:	d001      	beq.n	800c3e0 <HAL_ETH_MspInit+0x1c>
}
 800c3dc:	b00d      	add	sp, #52	; 0x34
 800c3de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ETH_CLK_ENABLE();
 800c3e0:	2400      	movs	r4, #0
 800c3e2:	9400      	str	r4, [sp, #0]
 800c3e4:	f5a3 4390 	sub.w	r3, r3, #18432	; 0x4800
 800c3e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c3ea:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800c3ee:	631a      	str	r2, [r3, #48]	; 0x30
 800c3f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c3f2:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 800c3f6:	9200      	str	r2, [sp, #0]
 800c3f8:	9a00      	ldr	r2, [sp, #0]
 800c3fa:	9401      	str	r4, [sp, #4]
 800c3fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c3fe:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800c402:	631a      	str	r2, [r3, #48]	; 0x30
 800c404:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c406:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 800c40a:	9201      	str	r2, [sp, #4]
 800c40c:	9a01      	ldr	r2, [sp, #4]
 800c40e:	9402      	str	r4, [sp, #8]
 800c410:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c412:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800c416:	631a      	str	r2, [r3, #48]	; 0x30
 800c418:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c41a:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800c41e:	9202      	str	r2, [sp, #8]
 800c420:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800c422:	9403      	str	r4, [sp, #12]
 800c424:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c426:	f042 0204 	orr.w	r2, r2, #4
 800c42a:	631a      	str	r2, [r3, #48]	; 0x30
 800c42c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c42e:	f002 0204 	and.w	r2, r2, #4
 800c432:	9203      	str	r2, [sp, #12]
 800c434:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c436:	9404      	str	r4, [sp, #16]
 800c438:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c43a:	f042 0201 	orr.w	r2, r2, #1
 800c43e:	631a      	str	r2, [r3, #48]	; 0x30
 800c440:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c442:	f002 0201 	and.w	r2, r2, #1
 800c446:	9204      	str	r2, [sp, #16]
 800c448:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c44a:	9405      	str	r4, [sp, #20]
 800c44c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c44e:	f042 0202 	orr.w	r2, r2, #2
 800c452:	631a      	str	r2, [r3, #48]	; 0x30
 800c454:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c456:	f002 0202 	and.w	r2, r2, #2
 800c45a:	9205      	str	r2, [sp, #20]
 800c45c:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800c45e:	9406      	str	r4, [sp, #24]
 800c460:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c462:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c466:	631a      	str	r2, [r3, #48]	; 0x30
 800c468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c46a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c46e:	9306      	str	r3, [sp, #24]
 800c470:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800c472:	2332      	movs	r3, #50	; 0x32
 800c474:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c476:	2702      	movs	r7, #2
 800c478:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c47a:	2603      	movs	r6, #3
 800c47c:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800c47e:	250b      	movs	r5, #11
 800c480:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c482:	a907      	add	r1, sp, #28
 800c484:	4812      	ldr	r0, [pc, #72]	; (800c4d0 <HAL_ETH_MspInit+0x10c>)
 800c486:	f7f4 fd3b 	bl	8000f00 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800c48a:	2386      	movs	r3, #134	; 0x86
 800c48c:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c48e:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c490:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c492:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800c494:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c496:	a907      	add	r1, sp, #28
 800c498:	480e      	ldr	r0, [pc, #56]	; (800c4d4 <HAL_ETH_MspInit+0x110>)
 800c49a:	f7f4 fd31 	bl	8000f00 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800c49e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c4a2:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c4a4:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c4a6:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c4a8:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800c4aa:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800c4ac:	a907      	add	r1, sp, #28
 800c4ae:	480a      	ldr	r0, [pc, #40]	; (800c4d8 <HAL_ETH_MspInit+0x114>)
 800c4b0:	f7f4 fd26 	bl	8000f00 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800c4b4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800c4b8:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c4ba:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c4bc:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c4be:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800c4c0:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800c4c2:	a907      	add	r1, sp, #28
 800c4c4:	4805      	ldr	r0, [pc, #20]	; (800c4dc <HAL_ETH_MspInit+0x118>)
 800c4c6:	f7f4 fd1b 	bl	8000f00 <HAL_GPIO_Init>
}
 800c4ca:	e787      	b.n	800c3dc <HAL_ETH_MspInit+0x18>
 800c4cc:	40028000 	.word	0x40028000
 800c4d0:	40020800 	.word	0x40020800
 800c4d4:	40020000 	.word	0x40020000
 800c4d8:	40020400 	.word	0x40020400
 800c4dc:	40021800 	.word	0x40021800

0800c4e0 <HAL_ETH_RxCpltCallback>:
{
 800c4e0:	b508      	push	{r3, lr}
  osSemaphoreRelease(s_xSemaphore);
 800c4e2:	4b02      	ldr	r3, [pc, #8]	; (800c4ec <HAL_ETH_RxCpltCallback+0xc>)
 800c4e4:	6818      	ldr	r0, [r3, #0]
 800c4e6:	f7f5 ff97 	bl	8002418 <osSemaphoreRelease>
 800c4ea:	bd08      	pop	{r3, pc}
 800c4ec:	20003fcc 	.word	0x20003fcc

0800c4f0 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800c4f0:	b510      	push	{r4, lr}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800c4f2:	4604      	mov	r4, r0
 800c4f4:	b170      	cbz	r0, 800c514 <ethernetif_init+0x24>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800c4f6:	2373      	movs	r3, #115	; 0x73
 800c4f8:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  netif->name[1] = IFNAME1;
 800c4fc:	2374      	movs	r3, #116	; 0x74
 800c4fe:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800c502:	4b08      	ldr	r3, [pc, #32]	; (800c524 <ethernetif_init+0x34>)
 800c504:	6163      	str	r3, [r4, #20]
 
#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800c506:	4b08      	ldr	r3, [pc, #32]	; (800c528 <ethernetif_init+0x38>)
 800c508:	61a3      	str	r3, [r4, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800c50a:	4620      	mov	r0, r4
 800c50c:	f7ff fec8 	bl	800c2a0 <low_level_init>

  return ERR_OK;
}
 800c510:	2000      	movs	r0, #0
 800c512:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800c514:	4b05      	ldr	r3, [pc, #20]	; (800c52c <ethernetif_init+0x3c>)
 800c516:	f240 222a 	movw	r2, #554	; 0x22a
 800c51a:	4905      	ldr	r1, [pc, #20]	; (800c530 <ethernetif_init+0x40>)
 800c51c:	4805      	ldr	r0, [pc, #20]	; (800c534 <ethernetif_init+0x44>)
 800c51e:	f000 fb66 	bl	800cbee <iprintf>
 800c522:	e7e8      	b.n	800c4f6 <ethernetif_init+0x6>
 800c524:	08005f79 	.word	0x08005f79
 800c528:	0800c1e5 	.word	0x0800c1e5
 800c52c:	0800f38c 	.word	0x0800f38c
 800c530:	0800db68 	.word	0x0800db68
 800c534:	0800d378 	.word	0x0800d378

0800c538 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 800c538:	b508      	push	{r3, lr}
  return HAL_GetTick();
 800c53a:	f7f4 f80f 	bl	800055c <HAL_GetTick>
}
 800c53e:	bd08      	pop	{r3, pc}

0800c540 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800c540:	b508      	push	{r3, lr}
  /* init code for LWIP */
  MX_LWIP_Init();
 800c542:	f000 f8b5 	bl	800c6b0 <MX_LWIP_Init>
  /* Infinite loop */
  for(;;)
  {
//	printf("bonjour\n");
//	osDelay(3000);
	lets_connect("10.1.0.123", 5001);
 800c546:	f241 3189 	movw	r1, #5001	; 0x1389
 800c54a:	4805      	ldr	r0, [pc, #20]	; (800c560 <StartDefaultTask+0x20>)
 800c54c:	f7ff fd78 	bl	800c040 <lets_connect>
	osDelay(2000);
 800c550:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800c554:	f7f5 fe88 	bl	8002268 <osDelay>
    osDelay(1);
 800c558:	2001      	movs	r0, #1
 800c55a:	f7f5 fe85 	bl	8002268 <osDelay>
 800c55e:	e7f2      	b.n	800c546 <StartDefaultTask+0x6>
 800c560:	0800f3a8 	.word	0x0800f3a8

0800c564 <vApplicationGetIdleTaskMemory>:
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800c564:	4b03      	ldr	r3, [pc, #12]	; (800c574 <vApplicationGetIdleTaskMemory+0x10>)
 800c566:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800c568:	4b03      	ldr	r3, [pc, #12]	; (800c578 <vApplicationGetIdleTaskMemory+0x14>)
 800c56a:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800c56c:	2380      	movs	r3, #128	; 0x80
 800c56e:	6013      	str	r3, [r2, #0]
 800c570:	4770      	bx	lr
 800c572:	bf00      	nop
 800c574:	200041d0 	.word	0x200041d0
 800c578:	20003fd0 	.word	0x20003fd0

0800c57c <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 800c57c:	b530      	push	{r4, r5, lr}
 800c57e:	b089      	sub	sp, #36	; 0x24
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800c580:	ac01      	add	r4, sp, #4
 800c582:	4d07      	ldr	r5, [pc, #28]	; (800c5a0 <MX_FREERTOS_Init+0x24>)
 800c584:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c586:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c588:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800c58c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800c590:	2100      	movs	r1, #0
 800c592:	a801      	add	r0, sp, #4
 800c594:	f7f5 fe33 	bl	80021fe <osThreadCreate>
 800c598:	4b02      	ldr	r3, [pc, #8]	; (800c5a4 <MX_FREERTOS_Init+0x28>)
 800c59a:	6018      	str	r0, [r3, #0]
}
 800c59c:	b009      	add	sp, #36	; 0x24
 800c59e:	bd30      	pop	{r4, r5, pc}
 800c5a0:	0800d304 	.word	0x0800d304
 800c5a4:	2000aa88 	.word	0x2000aa88

0800c5a8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800c5a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c5aa:	b08d      	sub	sp, #52	; 0x34

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c5ac:	2400      	movs	r4, #0
 800c5ae:	9407      	str	r4, [sp, #28]
 800c5b0:	9408      	str	r4, [sp, #32]
 800c5b2:	9409      	str	r4, [sp, #36]	; 0x24
 800c5b4:	940a      	str	r4, [sp, #40]	; 0x28
 800c5b6:	940b      	str	r4, [sp, #44]	; 0x2c

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800c5b8:	9401      	str	r4, [sp, #4]
 800c5ba:	4b38      	ldr	r3, [pc, #224]	; (800c69c <MX_GPIO_Init+0xf4>)
 800c5bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c5be:	f042 0204 	orr.w	r2, r2, #4
 800c5c2:	631a      	str	r2, [r3, #48]	; 0x30
 800c5c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c5c6:	f002 0204 	and.w	r2, r2, #4
 800c5ca:	9201      	str	r2, [sp, #4]
 800c5cc:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800c5ce:	9402      	str	r4, [sp, #8]
 800c5d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c5d2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c5d6:	631a      	str	r2, [r3, #48]	; 0x30
 800c5d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c5da:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800c5de:	9202      	str	r2, [sp, #8]
 800c5e0:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800c5e2:	9403      	str	r4, [sp, #12]
 800c5e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c5e6:	f042 0201 	orr.w	r2, r2, #1
 800c5ea:	631a      	str	r2, [r3, #48]	; 0x30
 800c5ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c5ee:	f002 0201 	and.w	r2, r2, #1
 800c5f2:	9203      	str	r2, [sp, #12]
 800c5f4:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800c5f6:	9404      	str	r4, [sp, #16]
 800c5f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c5fa:	f042 0202 	orr.w	r2, r2, #2
 800c5fe:	631a      	str	r2, [r3, #48]	; 0x30
 800c600:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c602:	f002 0202 	and.w	r2, r2, #2
 800c606:	9204      	str	r2, [sp, #16]
 800c608:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800c60a:	9405      	str	r4, [sp, #20]
 800c60c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c60e:	f042 0208 	orr.w	r2, r2, #8
 800c612:	631a      	str	r2, [r3, #48]	; 0x30
 800c614:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c616:	f002 0208 	and.w	r2, r2, #8
 800c61a:	9205      	str	r2, [sp, #20]
 800c61c:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800c61e:	9406      	str	r4, [sp, #24]
 800c620:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c622:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c626:	631a      	str	r2, [r3, #48]	; 0x30
 800c628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c62a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c62e:	9306      	str	r3, [sp, #24]
 800c630:	9b06      	ldr	r3, [sp, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800c632:	4f1b      	ldr	r7, [pc, #108]	; (800c6a0 <MX_GPIO_Init+0xf8>)
 800c634:	4622      	mov	r2, r4
 800c636:	f244 0181 	movw	r1, #16513	; 0x4081
 800c63a:	4638      	mov	r0, r7
 800c63c:	f7f4 fd52 	bl	80010e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800c640:	4d18      	ldr	r5, [pc, #96]	; (800c6a4 <MX_GPIO_Init+0xfc>)
 800c642:	4622      	mov	r2, r4
 800c644:	2140      	movs	r1, #64	; 0x40
 800c646:	4628      	mov	r0, r5
 800c648:	f7f4 fd4c 	bl	80010e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800c64c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c650:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800c652:	4b15      	ldr	r3, [pc, #84]	; (800c6a8 <MX_GPIO_Init+0x100>)
 800c654:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c656:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800c658:	a907      	add	r1, sp, #28
 800c65a:	4814      	ldr	r0, [pc, #80]	; (800c6ac <MX_GPIO_Init+0x104>)
 800c65c:	f7f4 fc50 	bl	8000f00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800c660:	f244 0381 	movw	r3, #16513	; 0x4081
 800c664:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c666:	2601      	movs	r6, #1
 800c668:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c66a:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c66c:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c66e:	a907      	add	r1, sp, #28
 800c670:	4638      	mov	r0, r7
 800c672:	f7f4 fc45 	bl	8000f00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800c676:	2340      	movs	r3, #64	; 0x40
 800c678:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c67a:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c67c:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c67e:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800c680:	a907      	add	r1, sp, #28
 800c682:	4628      	mov	r0, r5
 800c684:	f7f4 fc3c 	bl	8000f00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800c688:	2380      	movs	r3, #128	; 0x80
 800c68a:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c68c:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c68e:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800c690:	a907      	add	r1, sp, #28
 800c692:	4628      	mov	r0, r5
 800c694:	f7f4 fc34 	bl	8000f00 <HAL_GPIO_Init>

}
 800c698:	b00d      	add	sp, #52	; 0x34
 800c69a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c69c:	40023800 	.word	0x40023800
 800c6a0:	40020400 	.word	0x40020400
 800c6a4:	40021800 	.word	0x40021800
 800c6a8:	10110000 	.word	0x10110000
 800c6ac:	40020800 	.word	0x40020800

0800c6b0 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800c6b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c6b2:	b085      	sub	sp, #20
  /* IP addresses initialization */
  IP_ADDRESS[0] = 10;
 800c6b4:	4f3b      	ldr	r7, [pc, #236]	; (800c7a4 <MX_LWIP_Init+0xf4>)
 800c6b6:	220a      	movs	r2, #10
 800c6b8:	703a      	strb	r2, [r7, #0]
  IP_ADDRESS[1] = 1;
 800c6ba:	2301      	movs	r3, #1
 800c6bc:	707b      	strb	r3, [r7, #1]
  IP_ADDRESS[2] = 103;
 800c6be:	2167      	movs	r1, #103	; 0x67
 800c6c0:	70b9      	strb	r1, [r7, #2]
  IP_ADDRESS[3] = 101;
 800c6c2:	2165      	movs	r1, #101	; 0x65
 800c6c4:	70f9      	strb	r1, [r7, #3]
  NETMASK_ADDRESS[0] = 255;
 800c6c6:	4e38      	ldr	r6, [pc, #224]	; (800c7a8 <MX_LWIP_Init+0xf8>)
 800c6c8:	21ff      	movs	r1, #255	; 0xff
 800c6ca:	7031      	strb	r1, [r6, #0]
  NETMASK_ADDRESS[1] = 255;
 800c6cc:	7071      	strb	r1, [r6, #1]
  NETMASK_ADDRESS[2] = 0;
 800c6ce:	2400      	movs	r4, #0
 800c6d0:	70b4      	strb	r4, [r6, #2]
  NETMASK_ADDRESS[3] = 0;
 800c6d2:	70f4      	strb	r4, [r6, #3]
  GATEWAY_ADDRESS[0] = 10;
 800c6d4:	4d35      	ldr	r5, [pc, #212]	; (800c7ac <MX_LWIP_Init+0xfc>)
 800c6d6:	702a      	strb	r2, [r5, #0]
  GATEWAY_ADDRESS[1] = 1;
 800c6d8:	706b      	strb	r3, [r5, #1]
  GATEWAY_ADDRESS[2] = 1;
 800c6da:	70ab      	strb	r3, [r5, #2]
  GATEWAY_ADDRESS[3] = 1;
 800c6dc:	70eb      	strb	r3, [r5, #3]
  
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800c6de:	4621      	mov	r1, r4
 800c6e0:	4620      	mov	r0, r4
 800c6e2:	f7f9 f819 	bl	8005718 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800c6e6:	783a      	ldrb	r2, [r7, #0]
 800c6e8:	787b      	ldrb	r3, [r7, #1]
 800c6ea:	041b      	lsls	r3, r3, #16
 800c6ec:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800c6f0:	78ba      	ldrb	r2, [r7, #2]
 800c6f2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800c6f6:	78fa      	ldrb	r2, [r7, #3]
 800c6f8:	4313      	orrs	r3, r2
 800c6fa:	021a      	lsls	r2, r3, #8
 800c6fc:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 800c700:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
 800c704:	0a19      	lsrs	r1, r3, #8
 800c706:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 800c70a:	430a      	orrs	r2, r1
 800c70c:	ea42 6313 	orr.w	r3, r2, r3, lsr #24
 800c710:	4927      	ldr	r1, [pc, #156]	; (800c7b0 <MX_LWIP_Init+0x100>)
 800c712:	600b      	str	r3, [r1, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800c714:	7832      	ldrb	r2, [r6, #0]
 800c716:	7873      	ldrb	r3, [r6, #1]
 800c718:	041b      	lsls	r3, r3, #16
 800c71a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800c71e:	78b2      	ldrb	r2, [r6, #2]
 800c720:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800c724:	78f2      	ldrb	r2, [r6, #3]
 800c726:	4313      	orrs	r3, r2
 800c728:	021a      	lsls	r2, r3, #8
 800c72a:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 800c72e:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
 800c732:	0a18      	lsrs	r0, r3, #8
 800c734:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 800c738:	4302      	orrs	r2, r0
 800c73a:	ea42 6313 	orr.w	r3, r2, r3, lsr #24
 800c73e:	4a1d      	ldr	r2, [pc, #116]	; (800c7b4 <MX_LWIP_Init+0x104>)
 800c740:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800c742:	7828      	ldrb	r0, [r5, #0]
 800c744:	786b      	ldrb	r3, [r5, #1]
 800c746:	041b      	lsls	r3, r3, #16
 800c748:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800c74c:	78a8      	ldrb	r0, [r5, #2]
 800c74e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800c752:	78e8      	ldrb	r0, [r5, #3]
 800c754:	4303      	orrs	r3, r0
 800c756:	0218      	lsls	r0, r3, #8
 800c758:	f400 007f 	and.w	r0, r0, #16711680	; 0xff0000
 800c75c:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800c760:	0a1d      	lsrs	r5, r3, #8
 800c762:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 800c766:	4328      	orrs	r0, r5
 800c768:	ea40 6013 	orr.w	r0, r0, r3, lsr #24
 800c76c:	4b12      	ldr	r3, [pc, #72]	; (800c7b8 <MX_LWIP_Init+0x108>)
 800c76e:	6018      	str	r0, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800c770:	4d12      	ldr	r5, [pc, #72]	; (800c7bc <MX_LWIP_Init+0x10c>)
 800c772:	4813      	ldr	r0, [pc, #76]	; (800c7c0 <MX_LWIP_Init+0x110>)
 800c774:	9002      	str	r0, [sp, #8]
 800c776:	4813      	ldr	r0, [pc, #76]	; (800c7c4 <MX_LWIP_Init+0x114>)
 800c778:	9001      	str	r0, [sp, #4]
 800c77a:	9400      	str	r4, [sp, #0]
 800c77c:	4628      	mov	r0, r5
 800c77e:	f7fa ff8d 	bl	800769c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800c782:	4628      	mov	r0, r5
 800c784:	f7fa ffca 	bl	800771c <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800c788:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
 800c78c:	f013 0f04 	tst.w	r3, #4
 800c790:	d104      	bne.n	800c79c <MX_LWIP_Init+0xec>
    netif_set_up(&gnetif);
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800c792:	480a      	ldr	r0, [pc, #40]	; (800c7bc <MX_LWIP_Init+0x10c>)
 800c794:	f7fa ffda 	bl	800774c <netif_set_down>
  }

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800c798:	b005      	add	sp, #20
 800c79a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    netif_set_up(&gnetif);
 800c79c:	4628      	mov	r0, r5
 800c79e:	f7fa ffc3 	bl	8007728 <netif_set_up>
 800c7a2:	e7f9      	b.n	800c798 <MX_LWIP_Init+0xe8>
 800c7a4:	2000aac8 	.word	0x2000aac8
 800c7a8:	2000aac4 	.word	0x2000aac4
 800c7ac:	2000aa8c 	.word	0x2000aa8c
 800c7b0:	2000aac0 	.word	0x2000aac0
 800c7b4:	2000aacc 	.word	0x2000aacc
 800c7b8:	2000aad0 	.word	0x2000aad0
 800c7bc:	2000aa90 	.word	0x2000aa90
 800c7c0:	08005611 	.word	0x08005611
 800c7c4:	0800c4f1 	.word	0x0800c4f1

0800c7c8 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 800c7c8:	b508      	push	{r3, lr}
  /* ETH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800c7ca:	2200      	movs	r2, #0
 800c7cc:	2105      	movs	r1, #5
 800c7ce:	203d      	movs	r0, #61	; 0x3d
 800c7d0:	f7f3 fef0 	bl	80005b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ETH_IRQn);
 800c7d4:	203d      	movs	r0, #61	; 0x3d
 800c7d6:	f7f3 ff1f 	bl	8000618 <HAL_NVIC_EnableIRQ>
 800c7da:	bd08      	pop	{r3, pc}

0800c7dc <SystemClock_Config>:
{
 800c7dc:	b530      	push	{r4, r5, lr}
 800c7de:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800c7e0:	2230      	movs	r2, #48	; 0x30
 800c7e2:	2100      	movs	r1, #0
 800c7e4:	a808      	add	r0, sp, #32
 800c7e6:	f000 fb79 	bl	800cedc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800c7ea:	2400      	movs	r4, #0
 800c7ec:	9403      	str	r4, [sp, #12]
 800c7ee:	9404      	str	r4, [sp, #16]
 800c7f0:	9405      	str	r4, [sp, #20]
 800c7f2:	9406      	str	r4, [sp, #24]
 800c7f4:	9407      	str	r4, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 800c7f6:	9401      	str	r4, [sp, #4]
 800c7f8:	4b1c      	ldr	r3, [pc, #112]	; (800c86c <SystemClock_Config+0x90>)
 800c7fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c7fc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800c800:	641a      	str	r2, [r3, #64]	; 0x40
 800c802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c804:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c808:	9301      	str	r3, [sp, #4]
 800c80a:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800c80c:	9402      	str	r4, [sp, #8]
 800c80e:	4b18      	ldr	r3, [pc, #96]	; (800c870 <SystemClock_Config+0x94>)
 800c810:	681a      	ldr	r2, [r3, #0]
 800c812:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800c816:	601a      	str	r2, [r3, #0]
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800c81e:	9302      	str	r3, [sp, #8]
 800c820:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800c822:	2301      	movs	r3, #1
 800c824:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800c826:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800c82a:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800c82c:	2502      	movs	r5, #2
 800c82e:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800c830:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800c834:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800c836:	2304      	movs	r3, #4
 800c838:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800c83a:	23a8      	movs	r3, #168	; 0xa8
 800c83c:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800c83e:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800c840:	2307      	movs	r3, #7
 800c842:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800c844:	a808      	add	r0, sp, #32
 800c846:	f7f4 fce5 	bl	8001214 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800c84a:	230f      	movs	r3, #15
 800c84c:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800c84e:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800c850:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800c852:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800c856:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800c858:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c85c:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800c85e:	2105      	movs	r1, #5
 800c860:	a803      	add	r0, sp, #12
 800c862:	f7f4 ff0d 	bl	8001680 <HAL_RCC_ClockConfig>
}
 800c866:	b015      	add	sp, #84	; 0x54
 800c868:	bd30      	pop	{r4, r5, pc}
 800c86a:	bf00      	nop
 800c86c:	40023800 	.word	0x40023800
 800c870:	40007000 	.word	0x40007000

0800c874 <main>:
{
 800c874:	b508      	push	{r3, lr}
  HAL_Init();
 800c876:	f7f3 fe4b 	bl	8000510 <HAL_Init>
  SystemClock_Config();
 800c87a:	f7ff ffaf 	bl	800c7dc <SystemClock_Config>
  MX_GPIO_Init();
 800c87e:	f7ff fe93 	bl	800c5a8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800c882:	f000 fa0f 	bl	800cca4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800c886:	f000 fa61 	bl	800cd4c <MX_USB_OTG_FS_PCD_Init>
  MX_NVIC_Init();
 800c88a:	f7ff ff9d 	bl	800c7c8 <MX_NVIC_Init>
  MX_FREERTOS_Init();
 800c88e:	f7ff fe75 	bl	800c57c <MX_FREERTOS_Init>
  osKernelStart();
 800c892:	f7f5 fca5 	bl	80021e0 <osKernelStart>
 800c896:	e7fe      	b.n	800c896 <main+0x22>

0800c898 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c898:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800c89a:	6802      	ldr	r2, [r0, #0]
 800c89c:	4b03      	ldr	r3, [pc, #12]	; (800c8ac <HAL_TIM_PeriodElapsedCallback+0x14>)
 800c89e:	429a      	cmp	r2, r3
 800c8a0:	d000      	beq.n	800c8a4 <HAL_TIM_PeriodElapsedCallback+0xc>
 800c8a2:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 800c8a4:	f7f3 fe4e 	bl	8000544 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800c8a8:	e7fb      	b.n	800c8a2 <HAL_TIM_PeriodElapsedCallback+0xa>
 800c8aa:	bf00      	nop
 800c8ac:	40010000 	.word	0x40010000

0800c8b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800c8b0:	4770      	bx	lr

0800c8b2 <malloc>:
/* From :
 https://www.freertos.org/FreeRTOS_Support_Forum_Archive/Octobe
 r_2009/freertos_malloc_function_in_FreeRTOS_3444349.html */
/* Defining malloc/free should overwrite the standard versions
 provided by the compiler. */
void *malloc(size_t size) {
 800c8b2:	b508      	push	{r3, lr}
	/* Call the FreeRTOS version of malloc. */
	return pvPortMalloc(size);
 800c8b4:	f7f6 f904 	bl	8002ac0 <pvPortMalloc>
}
 800c8b8:	bd08      	pop	{r3, pc}

0800c8ba <free>:
void *calloc(size_t nmemb, size_t size) {
	/* Call the FreeRTOS version of calloc. */
	void * p = pvPortMalloc(size);
	return memset(p, 0, size);
}
void free(void *ptr) { /* Call the FreeRTOS version of free.*/
 800c8ba:	b508      	push	{r3, lr}
	vPortFree(ptr);
 800c8bc:	f7f6 f984 	bl	8002bc8 <vPortFree>
 800c8c0:	bd08      	pop	{r3, pc}
	...

0800c8c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800c8c4:	b500      	push	{lr}
 800c8c6:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c8c8:	2200      	movs	r2, #0
 800c8ca:	9200      	str	r2, [sp, #0]
 800c8cc:	4b0d      	ldr	r3, [pc, #52]	; (800c904 <HAL_MspInit+0x40>)
 800c8ce:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800c8d0:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 800c8d4:	6459      	str	r1, [r3, #68]	; 0x44
 800c8d6:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800c8d8:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 800c8dc:	9100      	str	r1, [sp, #0]
 800c8de:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800c8e0:	9201      	str	r2, [sp, #4]
 800c8e2:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800c8e4:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800c8e8:	6419      	str	r1, [r3, #64]	; 0x40
 800c8ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c8f0:	9301      	str	r3, [sp, #4]
 800c8f2:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800c8f4:	210f      	movs	r1, #15
 800c8f6:	f06f 0001 	mvn.w	r0, #1
 800c8fa:	f7f3 fe5b 	bl	80005b4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800c8fe:	b003      	add	sp, #12
 800c900:	f85d fb04 	ldr.w	pc, [sp], #4
 800c904:	40023800 	.word	0x40023800

0800c908 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800c908:	b510      	push	{r4, lr}
 800c90a:	b088      	sub	sp, #32
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 800c90c:	2200      	movs	r2, #0
 800c90e:	4601      	mov	r1, r0
 800c910:	2019      	movs	r0, #25
 800c912:	f7f3 fe4f 	bl	80005b4 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 800c916:	2019      	movs	r0, #25
 800c918:	f7f3 fe7e 	bl	8000618 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800c91c:	2400      	movs	r4, #0
 800c91e:	9401      	str	r4, [sp, #4]
 800c920:	4b14      	ldr	r3, [pc, #80]	; (800c974 <HAL_InitTick+0x6c>)
 800c922:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c924:	f042 0201 	orr.w	r2, r2, #1
 800c928:	645a      	str	r2, [r3, #68]	; 0x44
 800c92a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c92c:	f003 0301 	and.w	r3, r3, #1
 800c930:	9301      	str	r3, [sp, #4]
 800c932:	9b01      	ldr	r3, [sp, #4]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800c934:	a902      	add	r1, sp, #8
 800c936:	a803      	add	r0, sp, #12
 800c938:	f7f4 ff74 	bl	8001824 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800c93c:	f7f4 ff62 	bl	8001804 <HAL_RCC_GetPCLK2Freq>
 800c940:	0043      	lsls	r3, r0, #1
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800c942:	480d      	ldr	r0, [pc, #52]	; (800c978 <HAL_InitTick+0x70>)
 800c944:	fba0 2303 	umull	r2, r3, r0, r3
 800c948:	0c9b      	lsrs	r3, r3, #18
 800c94a:	3b01      	subs	r3, #1
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800c94c:	480b      	ldr	r0, [pc, #44]	; (800c97c <HAL_InitTick+0x74>)
 800c94e:	4a0c      	ldr	r2, [pc, #48]	; (800c980 <HAL_InitTick+0x78>)
 800c950:	6002      	str	r2, [r0, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 800c952:	f240 32e7 	movw	r2, #999	; 0x3e7
 800c956:	60c2      	str	r2, [r0, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800c958:	6043      	str	r3, [r0, #4]
  htim1.Init.ClockDivision = 0;
 800c95a:	6104      	str	r4, [r0, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c95c:	6084      	str	r4, [r0, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800c95e:	f7f5 f8b9 	bl	8001ad4 <HAL_TIM_Base_Init>
 800c962:	b110      	cbz	r0, 800c96a <HAL_InitTick+0x62>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
  }
  
  /* Return function status */
  return HAL_ERROR;
 800c964:	2001      	movs	r0, #1
}
 800c966:	b008      	add	sp, #32
 800c968:	bd10      	pop	{r4, pc}
    return HAL_TIM_Base_Start_IT(&htim1);
 800c96a:	4804      	ldr	r0, [pc, #16]	; (800c97c <HAL_InitTick+0x74>)
 800c96c:	f7f4 ff79 	bl	8001862 <HAL_TIM_Base_Start_IT>
 800c970:	e7f9      	b.n	800c966 <HAL_InitTick+0x5e>
 800c972:	bf00      	nop
 800c974:	40023800 	.word	0x40023800
 800c978:	431bde83 	.word	0x431bde83
 800c97c:	2000aad4 	.word	0x2000aad4
 800c980:	40010000 	.word	0x40010000

0800c984 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800c984:	4770      	bx	lr

0800c986 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800c986:	e7fe      	b.n	800c986 <HardFault_Handler>

0800c988 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800c988:	e7fe      	b.n	800c988 <MemManage_Handler>

0800c98a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800c98a:	e7fe      	b.n	800c98a <BusFault_Handler>

0800c98c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800c98c:	e7fe      	b.n	800c98c <UsageFault_Handler>

0800c98e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800c98e:	4770      	bx	lr

0800c990 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800c990:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800c992:	4802      	ldr	r0, [pc, #8]	; (800c99c <TIM1_UP_TIM10_IRQHandler+0xc>)
 800c994:	f7f4 ff7a 	bl	800188c <HAL_TIM_IRQHandler>
 800c998:	bd08      	pop	{r3, pc}
 800c99a:	bf00      	nop
 800c99c:	2000aad4 	.word	0x2000aad4

0800c9a0 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 800c9a0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 800c9a2:	4802      	ldr	r0, [pc, #8]	; (800c9ac <ETH_IRQHandler+0xc>)
 800c9a4:	f7f4 f8a2 	bl	8000aec <HAL_ETH_IRQHandler>
 800c9a8:	bd08      	pop	{r3, pc}
 800c9aa:	bf00      	nop
 800c9ac:	20009270 	.word	0x20009270

0800c9b0 <_write>:
	return len;
}

__attribute__((weak)) int _write(int file, char *ptr, int len)
// the new function for SWV output
{
 800c9b0:	b430      	push	{r4, r5}
	int i=0;
	for(i=0; i<len; i++)
 800c9b2:	2400      	movs	r4, #0
 800c9b4:	e00a      	b.n	800c9cc <_write+0x1c>
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
  {
    while (ITM->PORT[0U].u32 == 0UL)
    {
      __NOP();
 800c9b6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800c9b8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d0f9      	beq.n	800c9b6 <_write+0x6>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800c9c2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800c9c6:	7019      	strb	r1, [r3, #0]
 800c9c8:	3401      	adds	r4, #1
	ITM_SendChar((*ptr++)); // out char to serial
 800c9ca:	4629      	mov	r1, r5
	for(i=0; i<len; i++)
 800c9cc:	4294      	cmp	r4, r2
 800c9ce:	da10      	bge.n	800c9f2 <_write+0x42>
	ITM_SendChar((*ptr++)); // out char to serial
 800c9d0:	1c4d      	adds	r5, r1, #1
 800c9d2:	7809      	ldrb	r1, [r1, #0]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800c9d4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800c9d8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800c9dc:	f013 0f01 	tst.w	r3, #1
 800c9e0:	d0f2      	beq.n	800c9c8 <_write+0x18>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800c9e2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800c9e6:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800c9ea:	f013 0f01 	tst.w	r3, #1
 800c9ee:	d1e3      	bne.n	800c9b8 <_write+0x8>
 800c9f0:	e7ea      	b.n	800c9c8 <_write+0x18>
	return len;
}
 800c9f2:	4610      	mov	r0, r2
 800c9f4:	bc30      	pop	{r4, r5}
 800c9f6:	4770      	bx	lr

0800c9f8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800c9f8:	490f      	ldr	r1, [pc, #60]	; (800ca38 <SystemInit+0x40>)
 800c9fa:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800c9fe:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ca02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800ca06:	4b0d      	ldr	r3, [pc, #52]	; (800ca3c <SystemInit+0x44>)
 800ca08:	681a      	ldr	r2, [r3, #0]
 800ca0a:	f042 0201 	orr.w	r2, r2, #1
 800ca0e:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800ca10:	2000      	movs	r0, #0
 800ca12:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800ca14:	681a      	ldr	r2, [r3, #0]
 800ca16:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800ca1a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800ca1e:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800ca20:	4a07      	ldr	r2, [pc, #28]	; (800ca40 <SystemInit+0x48>)
 800ca22:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800ca24:	681a      	ldr	r2, [r3, #0]
 800ca26:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800ca2a:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800ca2c:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800ca2e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ca32:	608b      	str	r3, [r1, #8]
 800ca34:	4770      	bx	lr
 800ca36:	bf00      	nop
 800ca38:	e000ed00 	.word	0xe000ed00
 800ca3c:	40023800 	.word	0x40023800
 800ca40:	24003010 	.word	0x24003010

0800ca44 <ts_itoa>:
 **---------------------------------------------------------------------------
 **  Abstract: Convert integer to ascii
 **  Returns:  void
 **---------------------------------------------------------------------------
 */
void ts_itoa(char **buf, unsigned int d, int base) {
 800ca44:	b470      	push	{r4, r5, r6}
	int div = 1;
 800ca46:	2301      	movs	r3, #1
	while (d / div >= base)
 800ca48:	e001      	b.n	800ca4e <ts_itoa+0xa>
		div *= base;
 800ca4a:	fb02 f303 	mul.w	r3, r2, r3
	while (d / div >= base)
 800ca4e:	fbb1 f4f3 	udiv	r4, r1, r3
 800ca52:	4294      	cmp	r4, r2
 800ca54:	d2f9      	bcs.n	800ca4a <ts_itoa+0x6>
 800ca56:	e004      	b.n	800ca62 <ts_itoa+0x1e>
		d = d % div;
		div /= base;
		if (num > 9)
			*((*buf)++) = (num - 10) + 'A';
		else
			*((*buf)++) = num + '0';
 800ca58:	6805      	ldr	r5, [r0, #0]
 800ca5a:	1c6e      	adds	r6, r5, #1
 800ca5c:	6006      	str	r6, [r0, #0]
 800ca5e:	3430      	adds	r4, #48	; 0x30
 800ca60:	702c      	strb	r4, [r5, #0]
	while (div != 0) {
 800ca62:	b16b      	cbz	r3, 800ca80 <ts_itoa+0x3c>
		int num = d / div;
 800ca64:	fbb1 f4f3 	udiv	r4, r1, r3
		d = d % div;
 800ca68:	fb03 1114 	mls	r1, r3, r4, r1
		div /= base;
 800ca6c:	fb93 f3f2 	sdiv	r3, r3, r2
		if (num > 9)
 800ca70:	2c09      	cmp	r4, #9
 800ca72:	ddf1      	ble.n	800ca58 <ts_itoa+0x14>
			*((*buf)++) = (num - 10) + 'A';
 800ca74:	6805      	ldr	r5, [r0, #0]
 800ca76:	1c6e      	adds	r6, r5, #1
 800ca78:	6006      	str	r6, [r0, #0]
 800ca7a:	3437      	adds	r4, #55	; 0x37
 800ca7c:	702c      	strb	r4, [r5, #0]
 800ca7e:	e7f0      	b.n	800ca62 <ts_itoa+0x1e>
	}
}
 800ca80:	bc70      	pop	{r4, r5, r6}
 800ca82:	4770      	bx	lr

0800ca84 <ts_formatstring>:
 **---------------------------------------------------------------------------
 **  Abstract: Writes arguments va to buffer buf according to format fmt
 **  Returns:  Length of string
 **---------------------------------------------------------------------------
 */
int ts_formatstring(char *buf, const char *fmt, va_list va) {
 800ca84:	b530      	push	{r4, r5, lr}
 800ca86:	b083      	sub	sp, #12
 800ca88:	9001      	str	r0, [sp, #4]
 800ca8a:	460c      	mov	r4, r1
 800ca8c:	9200      	str	r2, [sp, #0]
	char *start_buf = buf;
 800ca8e:	4605      	mov	r5, r0
	while (*fmt) {
 800ca90:	e03e      	b.n	800cb10 <ts_formatstring+0x8c>
		/* Character needs formating? */
		if (*fmt == '%') {
			switch (*(++fmt)) {
 800ca92:	7863      	ldrb	r3, [r4, #1]
 800ca94:	2b64      	cmp	r3, #100	; 0x64
 800ca96:	d01c      	beq.n	800cad2 <ts_formatstring+0x4e>
 800ca98:	d90d      	bls.n	800cab6 <ts_formatstring+0x32>
 800ca9a:	2b73      	cmp	r3, #115	; 0x73
 800ca9c:	d04a      	beq.n	800cb34 <ts_formatstring+0xb0>
 800ca9e:	d916      	bls.n	800cace <ts_formatstring+0x4a>
 800caa0:	2b75      	cmp	r3, #117	; 0x75
 800caa2:	d121      	bne.n	800cae8 <ts_formatstring+0x64>
					*buf++ = *arg++;
				}
			}
				break;
			case 'u':
				ts_itoa(&buf, va_arg(va, unsigned int), 10);
 800caa4:	9b00      	ldr	r3, [sp, #0]
 800caa6:	1d1a      	adds	r2, r3, #4
 800caa8:	9200      	str	r2, [sp, #0]
 800caaa:	220a      	movs	r2, #10
 800caac:	6819      	ldr	r1, [r3, #0]
 800caae:	a801      	add	r0, sp, #4
 800cab0:	f7ff ffc8 	bl	800ca44 <ts_itoa>
				break;
 800cab4:	e02b      	b.n	800cb0e <ts_formatstring+0x8a>
			switch (*(++fmt)) {
 800cab6:	2b58      	cmp	r3, #88	; 0x58
 800cab8:	d018      	beq.n	800caec <ts_formatstring+0x68>
 800caba:	2b63      	cmp	r3, #99	; 0x63
 800cabc:	d01f      	beq.n	800cafe <ts_formatstring+0x7a>
 800cabe:	2b25      	cmp	r3, #37	; 0x25
 800cac0:	d125      	bne.n	800cb0e <ts_formatstring+0x8a>
			case 'x':
			case 'X':
				ts_itoa(&buf, va_arg(va, int), 16);
				break;
			case '%':
				*buf++ = '%';
 800cac2:	9b01      	ldr	r3, [sp, #4]
 800cac4:	1c5a      	adds	r2, r3, #1
 800cac6:	9201      	str	r2, [sp, #4]
 800cac8:	2225      	movs	r2, #37	; 0x25
 800caca:	701a      	strb	r2, [r3, #0]
				break;
 800cacc:	e01f      	b.n	800cb0e <ts_formatstring+0x8a>
			switch (*(++fmt)) {
 800cace:	2b69      	cmp	r3, #105	; 0x69
 800cad0:	d11d      	bne.n	800cb0e <ts_formatstring+0x8a>
				signed int val = va_arg(va, signed int);
 800cad2:	9b00      	ldr	r3, [sp, #0]
 800cad4:	1d1a      	adds	r2, r3, #4
 800cad6:	9200      	str	r2, [sp, #0]
 800cad8:	6819      	ldr	r1, [r3, #0]
				if (val < 0) {
 800cada:	2900      	cmp	r1, #0
 800cadc:	db23      	blt.n	800cb26 <ts_formatstring+0xa2>
				ts_itoa(&buf, val, 10);
 800cade:	220a      	movs	r2, #10
 800cae0:	a801      	add	r0, sp, #4
 800cae2:	f7ff ffaf 	bl	800ca44 <ts_itoa>
				break;
 800cae6:	e012      	b.n	800cb0e <ts_formatstring+0x8a>
			switch (*(++fmt)) {
 800cae8:	2b78      	cmp	r3, #120	; 0x78
 800caea:	d110      	bne.n	800cb0e <ts_formatstring+0x8a>
				ts_itoa(&buf, va_arg(va, int), 16);
 800caec:	9b00      	ldr	r3, [sp, #0]
 800caee:	1d1a      	adds	r2, r3, #4
 800caf0:	9200      	str	r2, [sp, #0]
 800caf2:	2210      	movs	r2, #16
 800caf4:	6819      	ldr	r1, [r3, #0]
 800caf6:	a801      	add	r0, sp, #4
 800caf8:	f7ff ffa4 	bl	800ca44 <ts_itoa>
				break;
 800cafc:	e007      	b.n	800cb0e <ts_formatstring+0x8a>
				*buf++ = va_arg(va, int);
 800cafe:	9b01      	ldr	r3, [sp, #4]
 800cb00:	1c5a      	adds	r2, r3, #1
 800cb02:	9201      	str	r2, [sp, #4]
 800cb04:	9a00      	ldr	r2, [sp, #0]
 800cb06:	1d11      	adds	r1, r2, #4
 800cb08:	9100      	str	r1, [sp, #0]
 800cb0a:	6812      	ldr	r2, [r2, #0]
 800cb0c:	701a      	strb	r2, [r3, #0]
			}
			fmt++;
 800cb0e:	3402      	adds	r4, #2
	while (*fmt) {
 800cb10:	7823      	ldrb	r3, [r4, #0]
 800cb12:	b1f3      	cbz	r3, 800cb52 <ts_formatstring+0xce>
		if (*fmt == '%') {
 800cb14:	2b25      	cmp	r3, #37	; 0x25
 800cb16:	d0bc      	beq.n	800ca92 <ts_formatstring+0xe>
		}
		/* Else just copy */
		else {
			*buf++ = *fmt++;
 800cb18:	9b01      	ldr	r3, [sp, #4]
 800cb1a:	1c5a      	adds	r2, r3, #1
 800cb1c:	9201      	str	r2, [sp, #4]
 800cb1e:	7822      	ldrb	r2, [r4, #0]
 800cb20:	701a      	strb	r2, [r3, #0]
 800cb22:	3401      	adds	r4, #1
 800cb24:	e7f4      	b.n	800cb10 <ts_formatstring+0x8c>
					val *= -1;
 800cb26:	4249      	negs	r1, r1
					*buf++ = '-';
 800cb28:	9b01      	ldr	r3, [sp, #4]
 800cb2a:	1c5a      	adds	r2, r3, #1
 800cb2c:	9201      	str	r2, [sp, #4]
 800cb2e:	222d      	movs	r2, #45	; 0x2d
 800cb30:	701a      	strb	r2, [r3, #0]
 800cb32:	e7d4      	b.n	800cade <ts_formatstring+0x5a>
				char * arg = va_arg(va, char *);
 800cb34:	9b00      	ldr	r3, [sp, #0]
 800cb36:	1d1a      	adds	r2, r3, #4
 800cb38:	9200      	str	r2, [sp, #0]
 800cb3a:	681b      	ldr	r3, [r3, #0]
				while (*arg) {
 800cb3c:	e005      	b.n	800cb4a <ts_formatstring+0xc6>
					*buf++ = *arg++;
 800cb3e:	9a01      	ldr	r2, [sp, #4]
 800cb40:	1c51      	adds	r1, r2, #1
 800cb42:	9101      	str	r1, [sp, #4]
 800cb44:	7819      	ldrb	r1, [r3, #0]
 800cb46:	7011      	strb	r1, [r2, #0]
 800cb48:	3301      	adds	r3, #1
				while (*arg) {
 800cb4a:	781a      	ldrb	r2, [r3, #0]
 800cb4c:	2a00      	cmp	r2, #0
 800cb4e:	d1f6      	bne.n	800cb3e <ts_formatstring+0xba>
 800cb50:	e7dd      	b.n	800cb0e <ts_formatstring+0x8a>
		}
	}
	*buf = 0;
 800cb52:	2200      	movs	r2, #0
 800cb54:	9b01      	ldr	r3, [sp, #4]
 800cb56:	701a      	strb	r2, [r3, #0]

	return (int) (buf - start_buf);
}
 800cb58:	9801      	ldr	r0, [sp, #4]
 800cb5a:	1b40      	subs	r0, r0, r5
 800cb5c:	b003      	add	sp, #12
 800cb5e:	bd30      	pop	{r4, r5, pc}

0800cb60 <ts_formatlength>:
 **  Abstract: Calculate maximum length of the resulting string from the
 **            format string and va_list va
 **  Returns:  Maximum length
 **---------------------------------------------------------------------------
 */
int ts_formatlength(const char *fmt, va_list va) {
 800cb60:	b082      	sub	sp, #8
 800cb62:	4603      	mov	r3, r0
 800cb64:	9101      	str	r1, [sp, #4]
	int length = 0;
 800cb66:	2000      	movs	r0, #0
	while (*fmt) {
 800cb68:	e01d      	b.n	800cba6 <ts_formatlength+0x46>
		if (*fmt == '%') {
			++fmt;
 800cb6a:	1c59      	adds	r1, r3, #1
			switch (*fmt) {
 800cb6c:	785b      	ldrb	r3, [r3, #1]
 800cb6e:	3b58      	subs	r3, #88	; 0x58
 800cb70:	2b20      	cmp	r3, #32
 800cb72:	d837      	bhi.n	800cbe4 <ts_formatlength+0x84>
 800cb74:	e8df f003 	tbb	[pc, r3]
 800cb78:	36363630 	.word	0x36363630
 800cb7c:	36363636 	.word	0x36363636
 800cb80:	11363636 	.word	0x11363636
 800cb84:	3636361d 	.word	0x3636361d
 800cb88:	36361d36 	.word	0x36361d36
 800cb8c:	36363636 	.word	0x36363636
 800cb90:	23363636 	.word	0x23363636
 800cb94:	36361d36 	.word	0x36361d36
 800cb98:	30          	.byte	0x30
 800cb99:	00          	.byte	0x00
			case 'c':
				va_arg(va, int);
 800cb9a:	9b01      	ldr	r3, [sp, #4]
 800cb9c:	3304      	adds	r3, #4
 800cb9e:	9301      	str	r3, [sp, #4]
				++length;
 800cba0:	3001      	adds	r0, #1
			++fmt;
 800cba2:	460b      	mov	r3, r1
				break;
			}
		} else {
			++length;
		}
		++fmt;
 800cba4:	3301      	adds	r3, #1
	while (*fmt) {
 800cba6:	781a      	ldrb	r2, [r3, #0]
 800cba8:	b1fa      	cbz	r2, 800cbea <ts_formatlength+0x8a>
		if (*fmt == '%') {
 800cbaa:	2a25      	cmp	r2, #37	; 0x25
 800cbac:	d0dd      	beq.n	800cb6a <ts_formatlength+0xa>
			++length;
 800cbae:	3001      	adds	r0, #1
 800cbb0:	e7f8      	b.n	800cba4 <ts_formatlength+0x44>
				length += 11;
 800cbb2:	300b      	adds	r0, #11
				va_arg(va, int);
 800cbb4:	9b01      	ldr	r3, [sp, #4]
 800cbb6:	3304      	adds	r3, #4
 800cbb8:	9301      	str	r3, [sp, #4]
			++fmt;
 800cbba:	460b      	mov	r3, r1
 800cbbc:	e7f2      	b.n	800cba4 <ts_formatlength+0x44>
				char * str = va_arg(va, char *);
 800cbbe:	9b01      	ldr	r3, [sp, #4]
 800cbc0:	1d1a      	adds	r2, r3, #4
 800cbc2:	9201      	str	r2, [sp, #4]
 800cbc4:	681b      	ldr	r3, [r3, #0]
				while (*str++)
 800cbc6:	e001      	b.n	800cbcc <ts_formatlength+0x6c>
					++length;
 800cbc8:	3001      	adds	r0, #1
				while (*str++)
 800cbca:	4613      	mov	r3, r2
 800cbcc:	1c5a      	adds	r2, r3, #1
 800cbce:	781b      	ldrb	r3, [r3, #0]
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d1f9      	bne.n	800cbc8 <ts_formatlength+0x68>
			++fmt;
 800cbd4:	460b      	mov	r3, r1
 800cbd6:	e7e5      	b.n	800cba4 <ts_formatlength+0x44>
				length += 8;
 800cbd8:	3008      	adds	r0, #8
				va_arg(va, unsigned int);
 800cbda:	9b01      	ldr	r3, [sp, #4]
 800cbdc:	3304      	adds	r3, #4
 800cbde:	9301      	str	r3, [sp, #4]
			++fmt;
 800cbe0:	460b      	mov	r3, r1
 800cbe2:	e7df      	b.n	800cba4 <ts_formatlength+0x44>
				++length;
 800cbe4:	3001      	adds	r0, #1
			++fmt;
 800cbe6:	460b      	mov	r3, r1
				break;
 800cbe8:	e7dc      	b.n	800cba4 <ts_formatlength+0x44>
	}
	return length;
}
 800cbea:	b002      	add	sp, #8
 800cbec:	4770      	bx	lr

0800cbee <iprintf>:
 **            standard output according to the format parameter.
 **  Returns:  Number of bytes written
 **
 **===========================================================================
 */
int iprintf(const char *fmt, ...) {
 800cbee:	b40f      	push	{r0, r1, r2, r3}
 800cbf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cbf2:	b083      	sub	sp, #12
 800cbf4:	af00      	add	r7, sp, #0
 800cbf6:	f107 0120 	add.w	r1, r7, #32
 800cbfa:	f851 5b04 	ldr.w	r5, [r1], #4
	int length = 0;
	va_list va;
	va_start(va, fmt);
 800cbfe:	6079      	str	r1, [r7, #4]
	length = ts_formatlength(fmt, va);
 800cc00:	4628      	mov	r0, r5
 800cc02:	f7ff ffad 	bl	800cb60 <ts_formatlength>
 800cc06:	4604      	mov	r4, r0
	va_end(va);
	if (length < 50) { // ok only for small default configMINIMAL_STACK_SIZE(128)
 800cc08:	2831      	cmp	r0, #49	; 0x31
 800cc0a:	dd19      	ble.n	800cc40 <iprintf+0x52>
		va_start(va, fmt);
		length = ts_formatstring(buf, fmt, va);
		length = _write(1, buf, length);
		va_end(va);
	} else {
		char * buf = malloc(length * sizeof(char));
 800cc0c:	f7ff fe51 	bl	800c8b2 <malloc>
		if (buf) {
 800cc10:	4606      	mov	r6, r0
 800cc12:	b170      	cbz	r0, 800cc32 <iprintf+0x44>
			va_start(va, fmt);
 800cc14:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800cc18:	607a      	str	r2, [r7, #4]
			length = ts_formatstring(buf, fmt, va);
 800cc1a:	4629      	mov	r1, r5
 800cc1c:	f7ff ff32 	bl	800ca84 <ts_formatstring>
			length = _write(1, buf, length);
 800cc20:	4602      	mov	r2, r0
 800cc22:	4631      	mov	r1, r6
 800cc24:	2001      	movs	r0, #1
 800cc26:	f7ff fec3 	bl	800c9b0 <_write>
 800cc2a:	4604      	mov	r4, r0
			va_end(va);
			free(buf);
 800cc2c:	4630      	mov	r0, r6
 800cc2e:	f7ff fe44 	bl	800c8ba <free>
		}
	}
	return length;
}
 800cc32:	4620      	mov	r0, r4
 800cc34:	370c      	adds	r7, #12
 800cc36:	46bd      	mov	sp, r7
 800cc38:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800cc3c:	b004      	add	sp, #16
 800cc3e:	4770      	bx	lr
	if (length < 50) { // ok only for small default configMINIMAL_STACK_SIZE(128)
 800cc40:	466e      	mov	r6, sp
		char buf[length];
 800cc42:	3407      	adds	r4, #7
 800cc44:	f024 0407 	bic.w	r4, r4, #7
 800cc48:	ebad 0d04 	sub.w	sp, sp, r4
		va_start(va, fmt);
 800cc4c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800cc50:	607a      	str	r2, [r7, #4]
		length = ts_formatstring(buf, fmt, va);
 800cc52:	4629      	mov	r1, r5
 800cc54:	4668      	mov	r0, sp
 800cc56:	f7ff ff15 	bl	800ca84 <ts_formatstring>
		length = _write(1, buf, length);
 800cc5a:	4602      	mov	r2, r0
 800cc5c:	4669      	mov	r1, sp
 800cc5e:	2001      	movs	r0, #1
 800cc60:	f7ff fea6 	bl	800c9b0 <_write>
 800cc64:	4604      	mov	r4, r0
 800cc66:	46b5      	mov	sp, r6
 800cc68:	e7e3      	b.n	800cc32 <iprintf+0x44>
	...

0800cc6c <puts>:
 **  Returns:  If successful, the result is a nonnegative integer; otherwise,
 **  the result is EOF.
 **
 **===========================================================================
 */
int puts(const char *s) {
 800cc6c:	b538      	push	{r3, r4, r5, lr}
 800cc6e:	4605      	mov	r5, r0
	int length = strlen(s);
 800cc70:	f7f3 fabe 	bl	80001f0 <strlen>
 800cc74:	4604      	mov	r4, r0
	int numbytes = 0;
	int res;

	numbytes = _write(1, (char*) s, length);
 800cc76:	4602      	mov	r2, r0
 800cc78:	4629      	mov	r1, r5
 800cc7a:	2001      	movs	r0, #1
 800cc7c:	f7ff fe98 	bl	800c9b0 <_write>
 800cc80:	4605      	mov	r5, r0
	numbytes += _write(1, "\n", 1);
 800cc82:	2201      	movs	r2, #1
 800cc84:	4906      	ldr	r1, [pc, #24]	; (800cca0 <puts+0x34>)
 800cc86:	4610      	mov	r0, r2
 800cc88:	f7ff fe92 	bl	800c9b0 <_write>
 800cc8c:	4428      	add	r0, r5

	if (numbytes == (length + 1)) {
 800cc8e:	3401      	adds	r4, #1
 800cc90:	42a0      	cmp	r0, r4
 800cc92:	d101      	bne.n	800cc98 <puts+0x2c>
		res = 0;
 800cc94:	2000      	movs	r0, #0
 800cc96:	bd38      	pop	{r3, r4, r5, pc}
	} else {
		res = EOF;
 800cc98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}

	return res;
}
 800cc9c:	bd38      	pop	{r3, r4, r5, pc}
 800cc9e:	bf00      	nop
 800cca0:	0800e918 	.word	0x0800e918

0800cca4 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800cca4:	b508      	push	{r3, lr}

  huart3.Instance = USART3;
 800cca6:	480a      	ldr	r0, [pc, #40]	; (800ccd0 <MX_USART3_UART_Init+0x2c>)
 800cca8:	4b0a      	ldr	r3, [pc, #40]	; (800ccd4 <MX_USART3_UART_Init+0x30>)
 800ccaa:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = 115200;
 800ccac:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800ccb0:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800ccb2:	2300      	movs	r3, #0
 800ccb4:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800ccb6:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800ccb8:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800ccba:	220c      	movs	r2, #12
 800ccbc:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800ccbe:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800ccc0:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800ccc2:	f7f5 f8c5 	bl	8001e50 <HAL_UART_Init>
 800ccc6:	b900      	cbnz	r0, 800ccca <MX_USART3_UART_Init+0x26>
 800ccc8:	bd08      	pop	{r3, pc}
  {
    Error_Handler();
 800ccca:	f7ff fdf1 	bl	800c8b0 <Error_Handler>
  }

}
 800ccce:	e7fb      	b.n	800ccc8 <MX_USART3_UART_Init+0x24>
 800ccd0:	2000ab14 	.word	0x2000ab14
 800ccd4:	40004800 	.word	0x40004800

0800ccd8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800ccd8:	b500      	push	{lr}
 800ccda:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ccdc:	2300      	movs	r3, #0
 800ccde:	9303      	str	r3, [sp, #12]
 800cce0:	9304      	str	r3, [sp, #16]
 800cce2:	9305      	str	r3, [sp, #20]
 800cce4:	9306      	str	r3, [sp, #24]
 800cce6:	9307      	str	r3, [sp, #28]
  if(uartHandle->Instance==USART3)
 800cce8:	6802      	ldr	r2, [r0, #0]
 800ccea:	4b16      	ldr	r3, [pc, #88]	; (800cd44 <HAL_UART_MspInit+0x6c>)
 800ccec:	429a      	cmp	r2, r3
 800ccee:	d002      	beq.n	800ccf6 <HAL_UART_MspInit+0x1e>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800ccf0:	b009      	add	sp, #36	; 0x24
 800ccf2:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART3_CLK_ENABLE();
 800ccf6:	2100      	movs	r1, #0
 800ccf8:	9101      	str	r1, [sp, #4]
 800ccfa:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
 800ccfe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cd00:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800cd04:	641a      	str	r2, [r3, #64]	; 0x40
 800cd06:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cd08:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 800cd0c:	9201      	str	r2, [sp, #4]
 800cd0e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800cd10:	9102      	str	r1, [sp, #8]
 800cd12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cd14:	f042 0208 	orr.w	r2, r2, #8
 800cd18:	631a      	str	r2, [r3, #48]	; 0x30
 800cd1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd1c:	f003 0308 	and.w	r3, r3, #8
 800cd20:	9302      	str	r3, [sp, #8]
 800cd22:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800cd24:	f44f 7340 	mov.w	r3, #768	; 0x300
 800cd28:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cd2a:	2302      	movs	r3, #2
 800cd2c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800cd2e:	2301      	movs	r3, #1
 800cd30:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cd32:	2303      	movs	r3, #3
 800cd34:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800cd36:	2307      	movs	r3, #7
 800cd38:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800cd3a:	a903      	add	r1, sp, #12
 800cd3c:	4802      	ldr	r0, [pc, #8]	; (800cd48 <HAL_UART_MspInit+0x70>)
 800cd3e:	f7f4 f8df 	bl	8000f00 <HAL_GPIO_Init>
}
 800cd42:	e7d5      	b.n	800ccf0 <HAL_UART_MspInit+0x18>
 800cd44:	40004800 	.word	0x40004800
 800cd48:	40020c00 	.word	0x40020c00

0800cd4c <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 800cd4c:	b508      	push	{r3, lr}

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800cd4e:	480c      	ldr	r0, [pc, #48]	; (800cd80 <MX_USB_OTG_FS_PCD_Init+0x34>)
 800cd50:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800cd54:	6003      	str	r3, [r0, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800cd56:	2304      	movs	r3, #4
 800cd58:	6043      	str	r3, [r0, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800cd5a:	2202      	movs	r2, #2
 800cd5c:	60c2      	str	r2, [r0, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800cd5e:	2300      	movs	r3, #0
 800cd60:	6103      	str	r3, [r0, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800cd62:	6182      	str	r2, [r0, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800cd64:	2201      	movs	r2, #1
 800cd66:	61c2      	str	r2, [r0, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800cd68:	6203      	str	r3, [r0, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800cd6a:	6243      	str	r3, [r0, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800cd6c:	62c2      	str	r2, [r0, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800cd6e:	6303      	str	r3, [r0, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800cd70:	f7f4 f9be 	bl	80010f0 <HAL_PCD_Init>
 800cd74:	b900      	cbnz	r0, 800cd78 <MX_USB_OTG_FS_PCD_Init+0x2c>
 800cd76:	bd08      	pop	{r3, pc}
  {
    Error_Handler();
 800cd78:	f7ff fd9a 	bl	800c8b0 <Error_Handler>
  }

}
 800cd7c:	e7fb      	b.n	800cd76 <MX_USB_OTG_FS_PCD_Init+0x2a>
 800cd7e:	bf00      	nop
 800cd80:	2000ab54 	.word	0x2000ab54

0800cd84 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800cd84:	b570      	push	{r4, r5, r6, lr}
 800cd86:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cd88:	2300      	movs	r3, #0
 800cd8a:	9303      	str	r3, [sp, #12]
 800cd8c:	9304      	str	r3, [sp, #16]
 800cd8e:	9305      	str	r3, [sp, #20]
 800cd90:	9306      	str	r3, [sp, #24]
 800cd92:	9307      	str	r3, [sp, #28]
  if(pcdHandle->Instance==USB_OTG_FS)
 800cd94:	6803      	ldr	r3, [r0, #0]
 800cd96:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cd9a:	d001      	beq.n	800cda0 <HAL_PCD_MspInit+0x1c>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800cd9c:	b008      	add	sp, #32
 800cd9e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cda0:	2500      	movs	r5, #0
 800cda2:	9501      	str	r5, [sp, #4]
 800cda4:	4c17      	ldr	r4, [pc, #92]	; (800ce04 <HAL_PCD_MspInit+0x80>)
 800cda6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800cda8:	f043 0301 	orr.w	r3, r3, #1
 800cdac:	6323      	str	r3, [r4, #48]	; 0x30
 800cdae:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800cdb0:	f003 0301 	and.w	r3, r3, #1
 800cdb4:	9301      	str	r3, [sp, #4]
 800cdb6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800cdb8:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800cdbc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cdbe:	2302      	movs	r3, #2
 800cdc0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cdc2:	2303      	movs	r3, #3
 800cdc4:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800cdc6:	230a      	movs	r3, #10
 800cdc8:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cdca:	4e0f      	ldr	r6, [pc, #60]	; (800ce08 <HAL_PCD_MspInit+0x84>)
 800cdcc:	a903      	add	r1, sp, #12
 800cdce:	4630      	mov	r0, r6
 800cdd0:	f7f4 f896 	bl	8000f00 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800cdd4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cdd8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800cdda:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cddc:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800cdde:	a903      	add	r1, sp, #12
 800cde0:	4630      	mov	r0, r6
 800cde2:	f7f4 f88d 	bl	8000f00 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800cde6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cde8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cdec:	6363      	str	r3, [r4, #52]	; 0x34
 800cdee:	9502      	str	r5, [sp, #8]
 800cdf0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800cdf2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800cdf6:	6463      	str	r3, [r4, #68]	; 0x44
 800cdf8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800cdfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cdfe:	9302      	str	r3, [sp, #8]
 800ce00:	9b02      	ldr	r3, [sp, #8]
}
 800ce02:	e7cb      	b.n	800cd9c <HAL_PCD_MspInit+0x18>
 800ce04:	40023800 	.word	0x40023800
 800ce08:	40020000 	.word	0x40020000

0800ce0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800ce0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 800ce44 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800ce10:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800ce12:	e003      	b.n	800ce1c <LoopCopyDataInit>

0800ce14 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800ce14:	4b0c      	ldr	r3, [pc, #48]	; (800ce48 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800ce16:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800ce18:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800ce1a:	3104      	adds	r1, #4

0800ce1c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800ce1c:	480b      	ldr	r0, [pc, #44]	; (800ce4c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800ce1e:	4b0c      	ldr	r3, [pc, #48]	; (800ce50 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800ce20:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800ce22:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800ce24:	d3f6      	bcc.n	800ce14 <CopyDataInit>
  ldr  r2, =_sbss
 800ce26:	4a0b      	ldr	r2, [pc, #44]	; (800ce54 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800ce28:	e002      	b.n	800ce30 <LoopFillZerobss>

0800ce2a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800ce2a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800ce2c:	f842 3b04 	str.w	r3, [r2], #4

0800ce30 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800ce30:	4b09      	ldr	r3, [pc, #36]	; (800ce58 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800ce32:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800ce34:	d3f9      	bcc.n	800ce2a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800ce36:	f7ff fddf 	bl	800c9f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800ce3a:	f000 f811 	bl	800ce60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800ce3e:	f7ff fd19 	bl	800c874 <main>
  bx  lr    
 800ce42:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800ce44:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 800ce48:	0800fa80 	.word	0x0800fa80
  ldr  r0, =_sdata
 800ce4c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800ce50:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 800ce54:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 800ce58:	2000af5c 	.word	0x2000af5c

0800ce5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800ce5c:	e7fe      	b.n	800ce5c <ADC_IRQHandler>
	...

0800ce60 <__libc_init_array>:
 800ce60:	b570      	push	{r4, r5, r6, lr}
 800ce62:	4e0d      	ldr	r6, [pc, #52]	; (800ce98 <__libc_init_array+0x38>)
 800ce64:	4c0d      	ldr	r4, [pc, #52]	; (800ce9c <__libc_init_array+0x3c>)
 800ce66:	1ba4      	subs	r4, r4, r6
 800ce68:	10a4      	asrs	r4, r4, #2
 800ce6a:	2500      	movs	r5, #0
 800ce6c:	42a5      	cmp	r5, r4
 800ce6e:	d109      	bne.n	800ce84 <__libc_init_array+0x24>
 800ce70:	4e0b      	ldr	r6, [pc, #44]	; (800cea0 <__libc_init_array+0x40>)
 800ce72:	4c0c      	ldr	r4, [pc, #48]	; (800cea4 <__libc_init_array+0x44>)
 800ce74:	f000 fa2c 	bl	800d2d0 <_init>
 800ce78:	1ba4      	subs	r4, r4, r6
 800ce7a:	10a4      	asrs	r4, r4, #2
 800ce7c:	2500      	movs	r5, #0
 800ce7e:	42a5      	cmp	r5, r4
 800ce80:	d105      	bne.n	800ce8e <__libc_init_array+0x2e>
 800ce82:	bd70      	pop	{r4, r5, r6, pc}
 800ce84:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ce88:	4798      	blx	r3
 800ce8a:	3501      	adds	r5, #1
 800ce8c:	e7ee      	b.n	800ce6c <__libc_init_array+0xc>
 800ce8e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ce92:	4798      	blx	r3
 800ce94:	3501      	adds	r5, #1
 800ce96:	e7f2      	b.n	800ce7e <__libc_init_array+0x1e>
 800ce98:	0800fa78 	.word	0x0800fa78
 800ce9c:	0800fa78 	.word	0x0800fa78
 800cea0:	0800fa78 	.word	0x0800fa78
 800cea4:	0800fa7c 	.word	0x0800fa7c

0800cea8 <memcmp>:
 800cea8:	b510      	push	{r4, lr}
 800ceaa:	3901      	subs	r1, #1
 800ceac:	4402      	add	r2, r0
 800ceae:	4290      	cmp	r0, r2
 800ceb0:	d101      	bne.n	800ceb6 <memcmp+0xe>
 800ceb2:	2000      	movs	r0, #0
 800ceb4:	bd10      	pop	{r4, pc}
 800ceb6:	f810 3b01 	ldrb.w	r3, [r0], #1
 800ceba:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800cebe:	42a3      	cmp	r3, r4
 800cec0:	d0f5      	beq.n	800ceae <memcmp+0x6>
 800cec2:	1b18      	subs	r0, r3, r4
 800cec4:	bd10      	pop	{r4, pc}

0800cec6 <memcpy>:
 800cec6:	b510      	push	{r4, lr}
 800cec8:	1e43      	subs	r3, r0, #1
 800ceca:	440a      	add	r2, r1
 800cecc:	4291      	cmp	r1, r2
 800cece:	d100      	bne.n	800ced2 <memcpy+0xc>
 800ced0:	bd10      	pop	{r4, pc}
 800ced2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ced6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ceda:	e7f7      	b.n	800cecc <memcpy+0x6>

0800cedc <memset>:
 800cedc:	4402      	add	r2, r0
 800cede:	4603      	mov	r3, r0
 800cee0:	4293      	cmp	r3, r2
 800cee2:	d100      	bne.n	800cee6 <memset+0xa>
 800cee4:	4770      	bx	lr
 800cee6:	f803 1b01 	strb.w	r1, [r3], #1
 800ceea:	e7f9      	b.n	800cee0 <memset+0x4>

0800ceec <_strerror_r>:
 800ceec:	b510      	push	{r4, lr}
 800ceee:	4604      	mov	r4, r0
 800cef0:	4608      	mov	r0, r1
 800cef2:	4611      	mov	r1, r2
 800cef4:	288e      	cmp	r0, #142	; 0x8e
 800cef6:	f200 812f 	bhi.w	800d158 <_strerror_r+0x26c>
 800cefa:	e8df f010 	tbh	[pc, r0, lsl #1]
 800cefe:	0138      	.short	0x0138
 800cf00:	0091008f 	.word	0x0091008f
 800cf04:	00950093 	.word	0x00950093
 800cf08:	00990097 	.word	0x00990097
 800cf0c:	009d009b 	.word	0x009d009b
 800cf10:	00a300a1 	.word	0x00a300a1
 800cf14:	00a900a7 	.word	0x00a900a7
 800cf18:	00ad00ab 	.word	0x00ad00ab
 800cf1c:	00af012d 	.word	0x00af012d
 800cf20:	00b300b1 	.word	0x00b300b1
 800cf24:	00b700b5 	.word	0x00b700b5
 800cf28:	00bf00bd 	.word	0x00bf00bd
 800cf2c:	00c700c5 	.word	0x00c700c5
 800cf30:	00cb00c9 	.word	0x00cb00c9
 800cf34:	00d100cd 	.word	0x00d100cd
 800cf38:	00d700d5 	.word	0x00d700d5
 800cf3c:	00db00d9 	.word	0x00db00d9
 800cf40:	00df00dd 	.word	0x00df00dd
 800cf44:	00e300e1 	.word	0x00e300e1
 800cf48:	012d012d 	.word	0x012d012d
 800cf4c:	012d012d 	.word	0x012d012d
 800cf50:	012d012d 	.word	0x012d012d
 800cf54:	012d012d 	.word	0x012d012d
 800cf58:	00eb00e7 	.word	0x00eb00e7
 800cf5c:	012d012d 	.word	0x012d012d
 800cf60:	012d012d 	.word	0x012d012d
 800cf64:	012d012d 	.word	0x012d012d
 800cf68:	012d012d 	.word	0x012d012d
 800cf6c:	012d012d 	.word	0x012d012d
 800cf70:	012d012d 	.word	0x012d012d
 800cf74:	00ed012d 	.word	0x00ed012d
 800cf78:	00ef0107 	.word	0x00ef0107
 800cf7c:	012d00f1 	.word	0x012d00f1
 800cf80:	012d012d 	.word	0x012d012d
 800cf84:	012d00f3 	.word	0x012d00f3
 800cf88:	012d012d 	.word	0x012d012d
 800cf8c:	012d00f5 	.word	0x012d00f5
 800cf90:	00f9012d 	.word	0x00f9012d
 800cf94:	012d012d 	.word	0x012d012d
 800cf98:	012d00fb 	.word	0x012d00fb
 800cf9c:	012d012d 	.word	0x012d012d
 800cfa0:	012d012d 	.word	0x012d012d
 800cfa4:	012d012d 	.word	0x012d012d
 800cfa8:	012d012d 	.word	0x012d012d
 800cfac:	00fd012d 	.word	0x00fd012d
 800cfb0:	00ff012d 	.word	0x00ff012d
 800cfb4:	01030101 	.word	0x01030101
 800cfb8:	012d012d 	.word	0x012d012d
 800cfbc:	012d0125 	.word	0x012d0125
 800cfc0:	012d012d 	.word	0x012d012d
 800cfc4:	012d012d 	.word	0x012d012d
 800cfc8:	012d012d 	.word	0x012d012d
 800cfcc:	0113012d 	.word	0x0113012d
 800cfd0:	01090105 	.word	0x01090105
 800cfd4:	010d010b 	.word	0x010d010b
 800cfd8:	012d010f 	.word	0x012d010f
 800cfdc:	01150111 	.word	0x01150111
 800cfe0:	00e90119 	.word	0x00e90119
 800cfe4:	012b00c1 	.word	0x012b00c1
 800cfe8:	00cf00b9 	.word	0x00cf00b9
 800cfec:	009f00bb 	.word	0x009f00bb
 800cff0:	012900a5 	.word	0x012900a5
 800cff4:	012d00f7 	.word	0x012d00f7
 800cff8:	00c30117 	.word	0x00c30117
 800cffc:	011b011d 	.word	0x011b011d
 800d000:	012d012d 	.word	0x012d012d
 800d004:	012d012d 	.word	0x012d012d
 800d008:	00d3012d 	.word	0x00d3012d
 800d00c:	012d012d 	.word	0x012d012d
 800d010:	00e5012d 	.word	0x00e5012d
 800d014:	011f0127 	.word	0x011f0127
 800d018:	01230121 	.word	0x01230121
 800d01c:	4855      	ldr	r0, [pc, #340]	; (800d174 <_strerror_r+0x288>)
 800d01e:	bd10      	pop	{r4, pc}
 800d020:	4855      	ldr	r0, [pc, #340]	; (800d178 <_strerror_r+0x28c>)
 800d022:	bd10      	pop	{r4, pc}
 800d024:	4855      	ldr	r0, [pc, #340]	; (800d17c <_strerror_r+0x290>)
 800d026:	bd10      	pop	{r4, pc}
 800d028:	4855      	ldr	r0, [pc, #340]	; (800d180 <_strerror_r+0x294>)
 800d02a:	bd10      	pop	{r4, pc}
 800d02c:	4855      	ldr	r0, [pc, #340]	; (800d184 <_strerror_r+0x298>)
 800d02e:	bd10      	pop	{r4, pc}
 800d030:	4855      	ldr	r0, [pc, #340]	; (800d188 <_strerror_r+0x29c>)
 800d032:	bd10      	pop	{r4, pc}
 800d034:	4855      	ldr	r0, [pc, #340]	; (800d18c <_strerror_r+0x2a0>)
 800d036:	bd10      	pop	{r4, pc}
 800d038:	4855      	ldr	r0, [pc, #340]	; (800d190 <_strerror_r+0x2a4>)
 800d03a:	bd10      	pop	{r4, pc}
 800d03c:	4855      	ldr	r0, [pc, #340]	; (800d194 <_strerror_r+0x2a8>)
 800d03e:	bd10      	pop	{r4, pc}
 800d040:	4855      	ldr	r0, [pc, #340]	; (800d198 <_strerror_r+0x2ac>)
 800d042:	bd10      	pop	{r4, pc}
 800d044:	4855      	ldr	r0, [pc, #340]	; (800d19c <_strerror_r+0x2b0>)
 800d046:	bd10      	pop	{r4, pc}
 800d048:	4855      	ldr	r0, [pc, #340]	; (800d1a0 <_strerror_r+0x2b4>)
 800d04a:	bd10      	pop	{r4, pc}
 800d04c:	4855      	ldr	r0, [pc, #340]	; (800d1a4 <_strerror_r+0x2b8>)
 800d04e:	bd10      	pop	{r4, pc}
 800d050:	4855      	ldr	r0, [pc, #340]	; (800d1a8 <_strerror_r+0x2bc>)
 800d052:	bd10      	pop	{r4, pc}
 800d054:	4855      	ldr	r0, [pc, #340]	; (800d1ac <_strerror_r+0x2c0>)
 800d056:	bd10      	pop	{r4, pc}
 800d058:	4855      	ldr	r0, [pc, #340]	; (800d1b0 <_strerror_r+0x2c4>)
 800d05a:	bd10      	pop	{r4, pc}
 800d05c:	4855      	ldr	r0, [pc, #340]	; (800d1b4 <_strerror_r+0x2c8>)
 800d05e:	bd10      	pop	{r4, pc}
 800d060:	4855      	ldr	r0, [pc, #340]	; (800d1b8 <_strerror_r+0x2cc>)
 800d062:	bd10      	pop	{r4, pc}
 800d064:	4855      	ldr	r0, [pc, #340]	; (800d1bc <_strerror_r+0x2d0>)
 800d066:	bd10      	pop	{r4, pc}
 800d068:	4855      	ldr	r0, [pc, #340]	; (800d1c0 <_strerror_r+0x2d4>)
 800d06a:	bd10      	pop	{r4, pc}
 800d06c:	4855      	ldr	r0, [pc, #340]	; (800d1c4 <_strerror_r+0x2d8>)
 800d06e:	bd10      	pop	{r4, pc}
 800d070:	4855      	ldr	r0, [pc, #340]	; (800d1c8 <_strerror_r+0x2dc>)
 800d072:	bd10      	pop	{r4, pc}
 800d074:	4855      	ldr	r0, [pc, #340]	; (800d1cc <_strerror_r+0x2e0>)
 800d076:	bd10      	pop	{r4, pc}
 800d078:	4855      	ldr	r0, [pc, #340]	; (800d1d0 <_strerror_r+0x2e4>)
 800d07a:	bd10      	pop	{r4, pc}
 800d07c:	4855      	ldr	r0, [pc, #340]	; (800d1d4 <_strerror_r+0x2e8>)
 800d07e:	bd10      	pop	{r4, pc}
 800d080:	4855      	ldr	r0, [pc, #340]	; (800d1d8 <_strerror_r+0x2ec>)
 800d082:	bd10      	pop	{r4, pc}
 800d084:	4855      	ldr	r0, [pc, #340]	; (800d1dc <_strerror_r+0x2f0>)
 800d086:	bd10      	pop	{r4, pc}
 800d088:	4855      	ldr	r0, [pc, #340]	; (800d1e0 <_strerror_r+0x2f4>)
 800d08a:	bd10      	pop	{r4, pc}
 800d08c:	4855      	ldr	r0, [pc, #340]	; (800d1e4 <_strerror_r+0x2f8>)
 800d08e:	bd10      	pop	{r4, pc}
 800d090:	4855      	ldr	r0, [pc, #340]	; (800d1e8 <_strerror_r+0x2fc>)
 800d092:	bd10      	pop	{r4, pc}
 800d094:	4855      	ldr	r0, [pc, #340]	; (800d1ec <_strerror_r+0x300>)
 800d096:	bd10      	pop	{r4, pc}
 800d098:	4855      	ldr	r0, [pc, #340]	; (800d1f0 <_strerror_r+0x304>)
 800d09a:	bd10      	pop	{r4, pc}
 800d09c:	4855      	ldr	r0, [pc, #340]	; (800d1f4 <_strerror_r+0x308>)
 800d09e:	bd10      	pop	{r4, pc}
 800d0a0:	4855      	ldr	r0, [pc, #340]	; (800d1f8 <_strerror_r+0x30c>)
 800d0a2:	bd10      	pop	{r4, pc}
 800d0a4:	4855      	ldr	r0, [pc, #340]	; (800d1fc <_strerror_r+0x310>)
 800d0a6:	bd10      	pop	{r4, pc}
 800d0a8:	4855      	ldr	r0, [pc, #340]	; (800d200 <_strerror_r+0x314>)
 800d0aa:	bd10      	pop	{r4, pc}
 800d0ac:	4855      	ldr	r0, [pc, #340]	; (800d204 <_strerror_r+0x318>)
 800d0ae:	bd10      	pop	{r4, pc}
 800d0b0:	4855      	ldr	r0, [pc, #340]	; (800d208 <_strerror_r+0x31c>)
 800d0b2:	bd10      	pop	{r4, pc}
 800d0b4:	4855      	ldr	r0, [pc, #340]	; (800d20c <_strerror_r+0x320>)
 800d0b6:	bd10      	pop	{r4, pc}
 800d0b8:	4855      	ldr	r0, [pc, #340]	; (800d210 <_strerror_r+0x324>)
 800d0ba:	bd10      	pop	{r4, pc}
 800d0bc:	4855      	ldr	r0, [pc, #340]	; (800d214 <_strerror_r+0x328>)
 800d0be:	bd10      	pop	{r4, pc}
 800d0c0:	4855      	ldr	r0, [pc, #340]	; (800d218 <_strerror_r+0x32c>)
 800d0c2:	bd10      	pop	{r4, pc}
 800d0c4:	4855      	ldr	r0, [pc, #340]	; (800d21c <_strerror_r+0x330>)
 800d0c6:	bd10      	pop	{r4, pc}
 800d0c8:	4855      	ldr	r0, [pc, #340]	; (800d220 <_strerror_r+0x334>)
 800d0ca:	bd10      	pop	{r4, pc}
 800d0cc:	4855      	ldr	r0, [pc, #340]	; (800d224 <_strerror_r+0x338>)
 800d0ce:	bd10      	pop	{r4, pc}
 800d0d0:	4855      	ldr	r0, [pc, #340]	; (800d228 <_strerror_r+0x33c>)
 800d0d2:	bd10      	pop	{r4, pc}
 800d0d4:	4855      	ldr	r0, [pc, #340]	; (800d22c <_strerror_r+0x340>)
 800d0d6:	bd10      	pop	{r4, pc}
 800d0d8:	4855      	ldr	r0, [pc, #340]	; (800d230 <_strerror_r+0x344>)
 800d0da:	bd10      	pop	{r4, pc}
 800d0dc:	4855      	ldr	r0, [pc, #340]	; (800d234 <_strerror_r+0x348>)
 800d0de:	bd10      	pop	{r4, pc}
 800d0e0:	4855      	ldr	r0, [pc, #340]	; (800d238 <_strerror_r+0x34c>)
 800d0e2:	bd10      	pop	{r4, pc}
 800d0e4:	4855      	ldr	r0, [pc, #340]	; (800d23c <_strerror_r+0x350>)
 800d0e6:	bd10      	pop	{r4, pc}
 800d0e8:	4855      	ldr	r0, [pc, #340]	; (800d240 <_strerror_r+0x354>)
 800d0ea:	bd10      	pop	{r4, pc}
 800d0ec:	4855      	ldr	r0, [pc, #340]	; (800d244 <_strerror_r+0x358>)
 800d0ee:	bd10      	pop	{r4, pc}
 800d0f0:	4855      	ldr	r0, [pc, #340]	; (800d248 <_strerror_r+0x35c>)
 800d0f2:	bd10      	pop	{r4, pc}
 800d0f4:	4855      	ldr	r0, [pc, #340]	; (800d24c <_strerror_r+0x360>)
 800d0f6:	bd10      	pop	{r4, pc}
 800d0f8:	4855      	ldr	r0, [pc, #340]	; (800d250 <_strerror_r+0x364>)
 800d0fa:	bd10      	pop	{r4, pc}
 800d0fc:	4855      	ldr	r0, [pc, #340]	; (800d254 <_strerror_r+0x368>)
 800d0fe:	bd10      	pop	{r4, pc}
 800d100:	4855      	ldr	r0, [pc, #340]	; (800d258 <_strerror_r+0x36c>)
 800d102:	bd10      	pop	{r4, pc}
 800d104:	4855      	ldr	r0, [pc, #340]	; (800d25c <_strerror_r+0x370>)
 800d106:	bd10      	pop	{r4, pc}
 800d108:	4855      	ldr	r0, [pc, #340]	; (800d260 <_strerror_r+0x374>)
 800d10a:	bd10      	pop	{r4, pc}
 800d10c:	4855      	ldr	r0, [pc, #340]	; (800d264 <_strerror_r+0x378>)
 800d10e:	bd10      	pop	{r4, pc}
 800d110:	4855      	ldr	r0, [pc, #340]	; (800d268 <_strerror_r+0x37c>)
 800d112:	bd10      	pop	{r4, pc}
 800d114:	4855      	ldr	r0, [pc, #340]	; (800d26c <_strerror_r+0x380>)
 800d116:	bd10      	pop	{r4, pc}
 800d118:	4855      	ldr	r0, [pc, #340]	; (800d270 <_strerror_r+0x384>)
 800d11a:	bd10      	pop	{r4, pc}
 800d11c:	4855      	ldr	r0, [pc, #340]	; (800d274 <_strerror_r+0x388>)
 800d11e:	bd10      	pop	{r4, pc}
 800d120:	4855      	ldr	r0, [pc, #340]	; (800d278 <_strerror_r+0x38c>)
 800d122:	bd10      	pop	{r4, pc}
 800d124:	4855      	ldr	r0, [pc, #340]	; (800d27c <_strerror_r+0x390>)
 800d126:	bd10      	pop	{r4, pc}
 800d128:	4855      	ldr	r0, [pc, #340]	; (800d280 <_strerror_r+0x394>)
 800d12a:	bd10      	pop	{r4, pc}
 800d12c:	4855      	ldr	r0, [pc, #340]	; (800d284 <_strerror_r+0x398>)
 800d12e:	bd10      	pop	{r4, pc}
 800d130:	4855      	ldr	r0, [pc, #340]	; (800d288 <_strerror_r+0x39c>)
 800d132:	bd10      	pop	{r4, pc}
 800d134:	4855      	ldr	r0, [pc, #340]	; (800d28c <_strerror_r+0x3a0>)
 800d136:	bd10      	pop	{r4, pc}
 800d138:	4855      	ldr	r0, [pc, #340]	; (800d290 <_strerror_r+0x3a4>)
 800d13a:	bd10      	pop	{r4, pc}
 800d13c:	4855      	ldr	r0, [pc, #340]	; (800d294 <_strerror_r+0x3a8>)
 800d13e:	bd10      	pop	{r4, pc}
 800d140:	4855      	ldr	r0, [pc, #340]	; (800d298 <_strerror_r+0x3ac>)
 800d142:	bd10      	pop	{r4, pc}
 800d144:	4855      	ldr	r0, [pc, #340]	; (800d29c <_strerror_r+0x3b0>)
 800d146:	bd10      	pop	{r4, pc}
 800d148:	4855      	ldr	r0, [pc, #340]	; (800d2a0 <_strerror_r+0x3b4>)
 800d14a:	bd10      	pop	{r4, pc}
 800d14c:	4855      	ldr	r0, [pc, #340]	; (800d2a4 <_strerror_r+0x3b8>)
 800d14e:	bd10      	pop	{r4, pc}
 800d150:	4855      	ldr	r0, [pc, #340]	; (800d2a8 <_strerror_r+0x3bc>)
 800d152:	bd10      	pop	{r4, pc}
 800d154:	4855      	ldr	r0, [pc, #340]	; (800d2ac <_strerror_r+0x3c0>)
 800d156:	bd10      	pop	{r4, pc}
 800d158:	2b00      	cmp	r3, #0
 800d15a:	bf14      	ite	ne
 800d15c:	461a      	movne	r2, r3
 800d15e:	4622      	moveq	r2, r4
 800d160:	f000 f8b4 	bl	800d2cc <_user_strerror>
 800d164:	4b52      	ldr	r3, [pc, #328]	; (800d2b0 <_strerror_r+0x3c4>)
 800d166:	2800      	cmp	r0, #0
 800d168:	bf08      	it	eq
 800d16a:	4618      	moveq	r0, r3
 800d16c:	bd10      	pop	{r4, pc}
 800d16e:	4851      	ldr	r0, [pc, #324]	; (800d2b4 <_strerror_r+0x3c8>)
 800d170:	bd10      	pop	{r4, pc}
 800d172:	bf00      	nop
 800d174:	0800f3e0 	.word	0x0800f3e0
 800d178:	0800f3ea 	.word	0x0800f3ea
 800d17c:	0800f404 	.word	0x0800f404
 800d180:	0800f414 	.word	0x0800f414
 800d184:	0800f42c 	.word	0x0800f42c
 800d188:	0800f436 	.word	0x0800f436
 800d18c:	0800f450 	.word	0x0800f450
 800d190:	0800f462 	.word	0x0800f462
 800d194:	0800f474 	.word	0x0800f474
 800d198:	0800f48d 	.word	0x0800f48d
 800d19c:	0800f49d 	.word	0x0800f49d
 800d1a0:	0800f4a9 	.word	0x0800f4a9
 800d1a4:	0800f4c6 	.word	0x0800f4c6
 800d1a8:	0800f4d8 	.word	0x0800f4d8
 800d1ac:	0800f4e9 	.word	0x0800f4e9
 800d1b0:	0800f4fb 	.word	0x0800f4fb
 800d1b4:	0800f507 	.word	0x0800f507
 800d1b8:	0800f51f 	.word	0x0800f51f
 800d1bc:	0800f52b 	.word	0x0800f52b
 800d1c0:	0800f53d 	.word	0x0800f53d
 800d1c4:	0800f54c 	.word	0x0800f54c
 800d1c8:	0800f55c 	.word	0x0800f55c
 800d1cc:	0800f569 	.word	0x0800f569
 800d1d0:	0800f588 	.word	0x0800f588
 800d1d4:	0800f597 	.word	0x0800f597
 800d1d8:	0800f5a8 	.word	0x0800f5a8
 800d1dc:	0800f5cc 	.word	0x0800f5cc
 800d1e0:	0800f5ea 	.word	0x0800f5ea
 800d1e4:	0800f608 	.word	0x0800f608
 800d1e8:	0800f628 	.word	0x0800f628
 800d1ec:	0800f63f 	.word	0x0800f63f
 800d1f0:	0800f64e 	.word	0x0800f64e
 800d1f4:	0800f65d 	.word	0x0800f65d
 800d1f8:	0800f671 	.word	0x0800f671
 800d1fc:	0800f689 	.word	0x0800f689
 800d200:	0800f697 	.word	0x0800f697
 800d204:	0800f6a4 	.word	0x0800f6a4
 800d208:	0800f6ba 	.word	0x0800f6ba
 800d20c:	0800f6c9 	.word	0x0800f6c9
 800d210:	0800f6d5 	.word	0x0800f6d5
 800d214:	0800f704 	.word	0x0800f704
 800d218:	0800f715 	.word	0x0800f715
 800d21c:	0800f730 	.word	0x0800f730
 800d220:	0800f743 	.word	0x0800f743
 800d224:	0800f759 	.word	0x0800f759
 800d228:	0800f762 	.word	0x0800f762
 800d22c:	0800f779 	.word	0x0800f779
 800d230:	0800f781 	.word	0x0800f781
 800d234:	0800f78e 	.word	0x0800f78e
 800d238:	0800f7a3 	.word	0x0800f7a3
 800d23c:	0800f7b7 	.word	0x0800f7b7
 800d240:	0800f7cf 	.word	0x0800f7cf
 800d244:	0800f7de 	.word	0x0800f7de
 800d248:	0800f7ef 	.word	0x0800f7ef
 800d24c:	0800f802 	.word	0x0800f802
 800d250:	0800f80e 	.word	0x0800f80e
 800d254:	0800f827 	.word	0x0800f827
 800d258:	0800f83b 	.word	0x0800f83b
 800d25c:	0800f856 	.word	0x0800f856
 800d260:	0800f86e 	.word	0x0800f86e
 800d264:	0800f888 	.word	0x0800f888
 800d268:	0800f890 	.word	0x0800f890
 800d26c:	0800f8c0 	.word	0x0800f8c0
 800d270:	0800f8df 	.word	0x0800f8df
 800d274:	0800f8fe 	.word	0x0800f8fe
 800d278:	0800f915 	.word	0x0800f915
 800d27c:	0800f928 	.word	0x0800f928
 800d280:	0800f941 	.word	0x0800f941
 800d284:	0800f958 	.word	0x0800f958
 800d288:	0800f96e 	.word	0x0800f96e
 800d28c:	0800f98f 	.word	0x0800f98f
 800d290:	0800f9a7 	.word	0x0800f9a7
 800d294:	0800f9c3 	.word	0x0800f9c3
 800d298:	0800f9d6 	.word	0x0800f9d6
 800d29c:	0800f9ec 	.word	0x0800f9ec
 800d2a0:	0800fa00 	.word	0x0800fa00
 800d2a4:	0800fa22 	.word	0x0800fa22
 800d2a8:	0800fa48 	.word	0x0800fa48
 800d2ac:	0800fa59 	.word	0x0800fa59
 800d2b0:	0800f88f 	.word	0x0800f88f
 800d2b4:	0800f3d8 	.word	0x0800f3d8

0800d2b8 <strerror>:
 800d2b8:	4601      	mov	r1, r0
 800d2ba:	4803      	ldr	r0, [pc, #12]	; (800d2c8 <strerror+0x10>)
 800d2bc:	2300      	movs	r3, #0
 800d2be:	461a      	mov	r2, r3
 800d2c0:	6800      	ldr	r0, [r0, #0]
 800d2c2:	f7ff be13 	b.w	800ceec <_strerror_r>
 800d2c6:	bf00      	nop
 800d2c8:	20000014 	.word	0x20000014

0800d2cc <_user_strerror>:
 800d2cc:	2000      	movs	r0, #0
 800d2ce:	4770      	bx	lr

0800d2d0 <_init>:
 800d2d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2d2:	bf00      	nop
 800d2d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d2d6:	bc08      	pop	{r3}
 800d2d8:	469e      	mov	lr, r3
 800d2da:	4770      	bx	lr

0800d2dc <_fini>:
 800d2dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2de:	bf00      	nop
 800d2e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d2e2:	bc08      	pop	{r3}
 800d2e4:	469e      	mov	lr, r3
 800d2e6:	4770      	bx	lr
