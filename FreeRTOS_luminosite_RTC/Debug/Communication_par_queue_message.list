
Communication_par_queue_message.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006050  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  08006200  08006200  00016200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006328  08006328  00016328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006330  08006330  00016330  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08006334  08006334  00016334  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  08006338  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
  8 .bss          000044ac  2000000c  2000000c  0002000c  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  200044b8  200044b8  0002000c  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001a9ef  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00003ac9  00000000  00000000  0003aa2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000015f8  00000000  00000000  0003e4f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001430  00000000  00000000  0003faf0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00009fb0  00000000  00000000  00040f20  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000075e4  00000000  00000000  0004aed0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  000524b4  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005b98  00000000  00000000  00052530  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000000c 	.word	0x2000000c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080061e8 	.word	0x080061e8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000010 	.word	0x20000010
 80001ec:	080061e8 	.word	0x080061e8

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000200:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000204:	f000 b97a 	b.w	80004fc <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	468c      	mov	ip, r1
 8000226:	460d      	mov	r5, r1
 8000228:	4604      	mov	r4, r0
 800022a:	9e08      	ldr	r6, [sp, #32]
 800022c:	2b00      	cmp	r3, #0
 800022e:	d151      	bne.n	80002d4 <__udivmoddi4+0xb4>
 8000230:	428a      	cmp	r2, r1
 8000232:	4617      	mov	r7, r2
 8000234:	d96d      	bls.n	8000312 <__udivmoddi4+0xf2>
 8000236:	fab2 fe82 	clz	lr, r2
 800023a:	f1be 0f00 	cmp.w	lr, #0
 800023e:	d00b      	beq.n	8000258 <__udivmoddi4+0x38>
 8000240:	f1ce 0c20 	rsb	ip, lr, #32
 8000244:	fa01 f50e 	lsl.w	r5, r1, lr
 8000248:	fa20 fc0c 	lsr.w	ip, r0, ip
 800024c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000250:	ea4c 0c05 	orr.w	ip, ip, r5
 8000254:	fa00 f40e 	lsl.w	r4, r0, lr
 8000258:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800025c:	0c25      	lsrs	r5, r4, #16
 800025e:	fbbc f8fa 	udiv	r8, ip, sl
 8000262:	fa1f f987 	uxth.w	r9, r7
 8000266:	fb0a cc18 	mls	ip, sl, r8, ip
 800026a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800026e:	fb08 f309 	mul.w	r3, r8, r9
 8000272:	42ab      	cmp	r3, r5
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x6c>
 8000276:	19ed      	adds	r5, r5, r7
 8000278:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 800027c:	f080 8123 	bcs.w	80004c6 <__udivmoddi4+0x2a6>
 8000280:	42ab      	cmp	r3, r5
 8000282:	f240 8120 	bls.w	80004c6 <__udivmoddi4+0x2a6>
 8000286:	f1a8 0802 	sub.w	r8, r8, #2
 800028a:	443d      	add	r5, r7
 800028c:	1aed      	subs	r5, r5, r3
 800028e:	b2a4      	uxth	r4, r4
 8000290:	fbb5 f0fa 	udiv	r0, r5, sl
 8000294:	fb0a 5510 	mls	r5, sl, r0, r5
 8000298:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800029c:	fb00 f909 	mul.w	r9, r0, r9
 80002a0:	45a1      	cmp	r9, r4
 80002a2:	d909      	bls.n	80002b8 <__udivmoddi4+0x98>
 80002a4:	19e4      	adds	r4, r4, r7
 80002a6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002aa:	f080 810a 	bcs.w	80004c2 <__udivmoddi4+0x2a2>
 80002ae:	45a1      	cmp	r9, r4
 80002b0:	f240 8107 	bls.w	80004c2 <__udivmoddi4+0x2a2>
 80002b4:	3802      	subs	r0, #2
 80002b6:	443c      	add	r4, r7
 80002b8:	eba4 0409 	sub.w	r4, r4, r9
 80002bc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002c0:	2100      	movs	r1, #0
 80002c2:	2e00      	cmp	r6, #0
 80002c4:	d061      	beq.n	800038a <__udivmoddi4+0x16a>
 80002c6:	fa24 f40e 	lsr.w	r4, r4, lr
 80002ca:	2300      	movs	r3, #0
 80002cc:	6034      	str	r4, [r6, #0]
 80002ce:	6073      	str	r3, [r6, #4]
 80002d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d907      	bls.n	80002e8 <__udivmoddi4+0xc8>
 80002d8:	2e00      	cmp	r6, #0
 80002da:	d054      	beq.n	8000386 <__udivmoddi4+0x166>
 80002dc:	2100      	movs	r1, #0
 80002de:	e886 0021 	stmia.w	r6, {r0, r5}
 80002e2:	4608      	mov	r0, r1
 80002e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e8:	fab3 f183 	clz	r1, r3
 80002ec:	2900      	cmp	r1, #0
 80002ee:	f040 808e 	bne.w	800040e <__udivmoddi4+0x1ee>
 80002f2:	42ab      	cmp	r3, r5
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0xdc>
 80002f6:	4282      	cmp	r2, r0
 80002f8:	f200 80fa 	bhi.w	80004f0 <__udivmoddi4+0x2d0>
 80002fc:	1a84      	subs	r4, r0, r2
 80002fe:	eb65 0503 	sbc.w	r5, r5, r3
 8000302:	2001      	movs	r0, #1
 8000304:	46ac      	mov	ip, r5
 8000306:	2e00      	cmp	r6, #0
 8000308:	d03f      	beq.n	800038a <__udivmoddi4+0x16a>
 800030a:	e886 1010 	stmia.w	r6, {r4, ip}
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	b912      	cbnz	r2, 800031a <__udivmoddi4+0xfa>
 8000314:	2701      	movs	r7, #1
 8000316:	fbb7 f7f2 	udiv	r7, r7, r2
 800031a:	fab7 fe87 	clz	lr, r7
 800031e:	f1be 0f00 	cmp.w	lr, #0
 8000322:	d134      	bne.n	800038e <__udivmoddi4+0x16e>
 8000324:	1beb      	subs	r3, r5, r7
 8000326:	0c3a      	lsrs	r2, r7, #16
 8000328:	fa1f fc87 	uxth.w	ip, r7
 800032c:	2101      	movs	r1, #1
 800032e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000332:	0c25      	lsrs	r5, r4, #16
 8000334:	fb02 3318 	mls	r3, r2, r8, r3
 8000338:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800033c:	fb0c f308 	mul.w	r3, ip, r8
 8000340:	42ab      	cmp	r3, r5
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x134>
 8000344:	19ed      	adds	r5, r5, r7
 8000346:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x132>
 800034c:	42ab      	cmp	r3, r5
 800034e:	f200 80d1 	bhi.w	80004f4 <__udivmoddi4+0x2d4>
 8000352:	4680      	mov	r8, r0
 8000354:	1aed      	subs	r5, r5, r3
 8000356:	b2a3      	uxth	r3, r4
 8000358:	fbb5 f0f2 	udiv	r0, r5, r2
 800035c:	fb02 5510 	mls	r5, r2, r0, r5
 8000360:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000364:	fb0c fc00 	mul.w	ip, ip, r0
 8000368:	45a4      	cmp	ip, r4
 800036a:	d907      	bls.n	800037c <__udivmoddi4+0x15c>
 800036c:	19e4      	adds	r4, r4, r7
 800036e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x15a>
 8000374:	45a4      	cmp	ip, r4
 8000376:	f200 80b8 	bhi.w	80004ea <__udivmoddi4+0x2ca>
 800037a:	4618      	mov	r0, r3
 800037c:	eba4 040c 	sub.w	r4, r4, ip
 8000380:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000384:	e79d      	b.n	80002c2 <__udivmoddi4+0xa2>
 8000386:	4631      	mov	r1, r6
 8000388:	4630      	mov	r0, r6
 800038a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038e:	f1ce 0420 	rsb	r4, lr, #32
 8000392:	fa05 f30e 	lsl.w	r3, r5, lr
 8000396:	fa07 f70e 	lsl.w	r7, r7, lr
 800039a:	fa20 f804 	lsr.w	r8, r0, r4
 800039e:	0c3a      	lsrs	r2, r7, #16
 80003a0:	fa25 f404 	lsr.w	r4, r5, r4
 80003a4:	ea48 0803 	orr.w	r8, r8, r3
 80003a8:	fbb4 f1f2 	udiv	r1, r4, r2
 80003ac:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003b0:	fb02 4411 	mls	r4, r2, r1, r4
 80003b4:	fa1f fc87 	uxth.w	ip, r7
 80003b8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003bc:	fb01 f30c 	mul.w	r3, r1, ip
 80003c0:	42ab      	cmp	r3, r5
 80003c2:	fa00 f40e 	lsl.w	r4, r0, lr
 80003c6:	d909      	bls.n	80003dc <__udivmoddi4+0x1bc>
 80003c8:	19ed      	adds	r5, r5, r7
 80003ca:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 80003ce:	f080 808a 	bcs.w	80004e6 <__udivmoddi4+0x2c6>
 80003d2:	42ab      	cmp	r3, r5
 80003d4:	f240 8087 	bls.w	80004e6 <__udivmoddi4+0x2c6>
 80003d8:	3902      	subs	r1, #2
 80003da:	443d      	add	r5, r7
 80003dc:	1aeb      	subs	r3, r5, r3
 80003de:	fa1f f588 	uxth.w	r5, r8
 80003e2:	fbb3 f0f2 	udiv	r0, r3, r2
 80003e6:	fb02 3310 	mls	r3, r2, r0, r3
 80003ea:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003ee:	fb00 f30c 	mul.w	r3, r0, ip
 80003f2:	42ab      	cmp	r3, r5
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1e6>
 80003f6:	19ed      	adds	r5, r5, r7
 80003f8:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80003fc:	d26f      	bcs.n	80004de <__udivmoddi4+0x2be>
 80003fe:	42ab      	cmp	r3, r5
 8000400:	d96d      	bls.n	80004de <__udivmoddi4+0x2be>
 8000402:	3802      	subs	r0, #2
 8000404:	443d      	add	r5, r7
 8000406:	1aeb      	subs	r3, r5, r3
 8000408:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800040c:	e78f      	b.n	800032e <__udivmoddi4+0x10e>
 800040e:	f1c1 0720 	rsb	r7, r1, #32
 8000412:	fa22 f807 	lsr.w	r8, r2, r7
 8000416:	408b      	lsls	r3, r1
 8000418:	fa05 f401 	lsl.w	r4, r5, r1
 800041c:	ea48 0303 	orr.w	r3, r8, r3
 8000420:	fa20 fe07 	lsr.w	lr, r0, r7
 8000424:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000428:	40fd      	lsrs	r5, r7
 800042a:	ea4e 0e04 	orr.w	lr, lr, r4
 800042e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000432:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000436:	fb0c 5519 	mls	r5, ip, r9, r5
 800043a:	fa1f f883 	uxth.w	r8, r3
 800043e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000442:	fb09 f408 	mul.w	r4, r9, r8
 8000446:	42ac      	cmp	r4, r5
 8000448:	fa02 f201 	lsl.w	r2, r2, r1
 800044c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x244>
 8000452:	18ed      	adds	r5, r5, r3
 8000454:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000458:	d243      	bcs.n	80004e2 <__udivmoddi4+0x2c2>
 800045a:	42ac      	cmp	r4, r5
 800045c:	d941      	bls.n	80004e2 <__udivmoddi4+0x2c2>
 800045e:	f1a9 0902 	sub.w	r9, r9, #2
 8000462:	441d      	add	r5, r3
 8000464:	1b2d      	subs	r5, r5, r4
 8000466:	fa1f fe8e 	uxth.w	lr, lr
 800046a:	fbb5 f0fc 	udiv	r0, r5, ip
 800046e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000472:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000476:	fb00 f808 	mul.w	r8, r0, r8
 800047a:	45a0      	cmp	r8, r4
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x26e>
 800047e:	18e4      	adds	r4, r4, r3
 8000480:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000484:	d229      	bcs.n	80004da <__udivmoddi4+0x2ba>
 8000486:	45a0      	cmp	r8, r4
 8000488:	d927      	bls.n	80004da <__udivmoddi4+0x2ba>
 800048a:	3802      	subs	r0, #2
 800048c:	441c      	add	r4, r3
 800048e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000492:	eba4 0408 	sub.w	r4, r4, r8
 8000496:	fba0 8902 	umull	r8, r9, r0, r2
 800049a:	454c      	cmp	r4, r9
 800049c:	46c6      	mov	lr, r8
 800049e:	464d      	mov	r5, r9
 80004a0:	d315      	bcc.n	80004ce <__udivmoddi4+0x2ae>
 80004a2:	d012      	beq.n	80004ca <__udivmoddi4+0x2aa>
 80004a4:	b156      	cbz	r6, 80004bc <__udivmoddi4+0x29c>
 80004a6:	ebba 030e 	subs.w	r3, sl, lr
 80004aa:	eb64 0405 	sbc.w	r4, r4, r5
 80004ae:	fa04 f707 	lsl.w	r7, r4, r7
 80004b2:	40cb      	lsrs	r3, r1
 80004b4:	431f      	orrs	r7, r3
 80004b6:	40cc      	lsrs	r4, r1
 80004b8:	6037      	str	r7, [r6, #0]
 80004ba:	6074      	str	r4, [r6, #4]
 80004bc:	2100      	movs	r1, #0
 80004be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c2:	4618      	mov	r0, r3
 80004c4:	e6f8      	b.n	80002b8 <__udivmoddi4+0x98>
 80004c6:	4690      	mov	r8, r2
 80004c8:	e6e0      	b.n	800028c <__udivmoddi4+0x6c>
 80004ca:	45c2      	cmp	sl, r8
 80004cc:	d2ea      	bcs.n	80004a4 <__udivmoddi4+0x284>
 80004ce:	ebb8 0e02 	subs.w	lr, r8, r2
 80004d2:	eb69 0503 	sbc.w	r5, r9, r3
 80004d6:	3801      	subs	r0, #1
 80004d8:	e7e4      	b.n	80004a4 <__udivmoddi4+0x284>
 80004da:	4628      	mov	r0, r5
 80004dc:	e7d7      	b.n	800048e <__udivmoddi4+0x26e>
 80004de:	4640      	mov	r0, r8
 80004e0:	e791      	b.n	8000406 <__udivmoddi4+0x1e6>
 80004e2:	4681      	mov	r9, r0
 80004e4:	e7be      	b.n	8000464 <__udivmoddi4+0x244>
 80004e6:	4601      	mov	r1, r0
 80004e8:	e778      	b.n	80003dc <__udivmoddi4+0x1bc>
 80004ea:	3802      	subs	r0, #2
 80004ec:	443c      	add	r4, r7
 80004ee:	e745      	b.n	800037c <__udivmoddi4+0x15c>
 80004f0:	4608      	mov	r0, r1
 80004f2:	e708      	b.n	8000306 <__udivmoddi4+0xe6>
 80004f4:	f1a8 0802 	sub.w	r8, r8, #2
 80004f8:	443d      	add	r5, r7
 80004fa:	e72b      	b.n	8000354 <__udivmoddi4+0x134>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000504:	4a0e      	ldr	r2, [pc, #56]	; (8000540 <HAL_Init+0x40>)
 8000506:	4b0e      	ldr	r3, [pc, #56]	; (8000540 <HAL_Init+0x40>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800050e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000510:	4a0b      	ldr	r2, [pc, #44]	; (8000540 <HAL_Init+0x40>)
 8000512:	4b0b      	ldr	r3, [pc, #44]	; (8000540 <HAL_Init+0x40>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800051a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800051c:	4a08      	ldr	r2, [pc, #32]	; (8000540 <HAL_Init+0x40>)
 800051e:	4b08      	ldr	r3, [pc, #32]	; (8000540 <HAL_Init+0x40>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000526:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000528:	2003      	movs	r0, #3
 800052a:	f000 f8f8 	bl	800071e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800052e:	2000      	movs	r0, #0
 8000530:	f005 fa6c 	bl	8005a0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000534:	f005 fa3e 	bl	80059b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000538:	2300      	movs	r3, #0
}
 800053a:	4618      	mov	r0, r3
 800053c:	bd80      	pop	{r7, pc}
 800053e:	bf00      	nop
 8000540:	40023c00 	.word	0x40023c00

08000544 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000544:	b480      	push	{r7}
 8000546:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000548:	4b06      	ldr	r3, [pc, #24]	; (8000564 <HAL_IncTick+0x20>)
 800054a:	781b      	ldrb	r3, [r3, #0]
 800054c:	461a      	mov	r2, r3
 800054e:	4b06      	ldr	r3, [pc, #24]	; (8000568 <HAL_IncTick+0x24>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	4413      	add	r3, r2
 8000554:	4a04      	ldr	r2, [pc, #16]	; (8000568 <HAL_IncTick+0x24>)
 8000556:	6013      	str	r3, [r2, #0]
}
 8000558:	bf00      	nop
 800055a:	46bd      	mov	sp, r7
 800055c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop
 8000564:	20000000 	.word	0x20000000
 8000568:	20003fd0 	.word	0x20003fd0

0800056c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
  return uwTick;
 8000570:	4b03      	ldr	r3, [pc, #12]	; (8000580 <HAL_GetTick+0x14>)
 8000572:	681b      	ldr	r3, [r3, #0]
}
 8000574:	4618      	mov	r0, r3
 8000576:	46bd      	mov	sp, r7
 8000578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop
 8000580:	20003fd0 	.word	0x20003fd0

08000584 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b084      	sub	sp, #16
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800058c:	f7ff ffee 	bl	800056c <HAL_GetTick>
 8000590:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000596:	68fb      	ldr	r3, [r7, #12]
 8000598:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800059c:	d005      	beq.n	80005aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800059e:	4b09      	ldr	r3, [pc, #36]	; (80005c4 <HAL_Delay+0x40>)
 80005a0:	781b      	ldrb	r3, [r3, #0]
 80005a2:	461a      	mov	r2, r3
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	4413      	add	r3, r2
 80005a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80005aa:	bf00      	nop
 80005ac:	f7ff ffde 	bl	800056c <HAL_GetTick>
 80005b0:	4602      	mov	r2, r0
 80005b2:	68bb      	ldr	r3, [r7, #8]
 80005b4:	1ad2      	subs	r2, r2, r3
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	429a      	cmp	r2, r3
 80005ba:	d3f7      	bcc.n	80005ac <HAL_Delay+0x28>
  {
  }
}
 80005bc:	bf00      	nop
 80005be:	3710      	adds	r7, #16
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	20000000 	.word	0x20000000

080005c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005c8:	b480      	push	{r7}
 80005ca:	b085      	sub	sp, #20
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	f003 0307 	and.w	r3, r3, #7
 80005d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005d8:	4b0c      	ldr	r3, [pc, #48]	; (800060c <__NVIC_SetPriorityGrouping+0x44>)
 80005da:	68db      	ldr	r3, [r3, #12]
 80005dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005de:	68ba      	ldr	r2, [r7, #8]
 80005e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005e4:	4013      	ands	r3, r2
 80005e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005ec:	68bb      	ldr	r3, [r7, #8]
 80005ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005fa:	4a04      	ldr	r2, [pc, #16]	; (800060c <__NVIC_SetPriorityGrouping+0x44>)
 80005fc:	68bb      	ldr	r3, [r7, #8]
 80005fe:	60d3      	str	r3, [r2, #12]
}
 8000600:	bf00      	nop
 8000602:	3714      	adds	r7, #20
 8000604:	46bd      	mov	sp, r7
 8000606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060a:	4770      	bx	lr
 800060c:	e000ed00 	.word	0xe000ed00

08000610 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000614:	4b04      	ldr	r3, [pc, #16]	; (8000628 <__NVIC_GetPriorityGrouping+0x18>)
 8000616:	68db      	ldr	r3, [r3, #12]
 8000618:	0a1b      	lsrs	r3, r3, #8
 800061a:	f003 0307 	and.w	r3, r3, #7
}
 800061e:	4618      	mov	r0, r3
 8000620:	46bd      	mov	sp, r7
 8000622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000626:	4770      	bx	lr
 8000628:	e000ed00 	.word	0xe000ed00

0800062c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800062c:	b480      	push	{r7}
 800062e:	b083      	sub	sp, #12
 8000630:	af00      	add	r7, sp, #0
 8000632:	4603      	mov	r3, r0
 8000634:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800063a:	2b00      	cmp	r3, #0
 800063c:	db0b      	blt.n	8000656 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800063e:	4909      	ldr	r1, [pc, #36]	; (8000664 <__NVIC_EnableIRQ+0x38>)
 8000640:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000644:	095b      	lsrs	r3, r3, #5
 8000646:	79fa      	ldrb	r2, [r7, #7]
 8000648:	f002 021f 	and.w	r2, r2, #31
 800064c:	2001      	movs	r0, #1
 800064e:	fa00 f202 	lsl.w	r2, r0, r2
 8000652:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000656:	bf00      	nop
 8000658:	370c      	adds	r7, #12
 800065a:	46bd      	mov	sp, r7
 800065c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop
 8000664:	e000e100 	.word	0xe000e100

08000668 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000668:	b480      	push	{r7}
 800066a:	b083      	sub	sp, #12
 800066c:	af00      	add	r7, sp, #0
 800066e:	4603      	mov	r3, r0
 8000670:	6039      	str	r1, [r7, #0]
 8000672:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000674:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000678:	2b00      	cmp	r3, #0
 800067a:	db0a      	blt.n	8000692 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800067c:	490d      	ldr	r1, [pc, #52]	; (80006b4 <__NVIC_SetPriority+0x4c>)
 800067e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000682:	683a      	ldr	r2, [r7, #0]
 8000684:	b2d2      	uxtb	r2, r2
 8000686:	0112      	lsls	r2, r2, #4
 8000688:	b2d2      	uxtb	r2, r2
 800068a:	440b      	add	r3, r1
 800068c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000690:	e00a      	b.n	80006a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000692:	4909      	ldr	r1, [pc, #36]	; (80006b8 <__NVIC_SetPriority+0x50>)
 8000694:	79fb      	ldrb	r3, [r7, #7]
 8000696:	f003 030f 	and.w	r3, r3, #15
 800069a:	3b04      	subs	r3, #4
 800069c:	683a      	ldr	r2, [r7, #0]
 800069e:	b2d2      	uxtb	r2, r2
 80006a0:	0112      	lsls	r2, r2, #4
 80006a2:	b2d2      	uxtb	r2, r2
 80006a4:	440b      	add	r3, r1
 80006a6:	761a      	strb	r2, [r3, #24]
}
 80006a8:	bf00      	nop
 80006aa:	370c      	adds	r7, #12
 80006ac:	46bd      	mov	sp, r7
 80006ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b2:	4770      	bx	lr
 80006b4:	e000e100 	.word	0xe000e100
 80006b8:	e000ed00 	.word	0xe000ed00

080006bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006bc:	b480      	push	{r7}
 80006be:	b089      	sub	sp, #36	; 0x24
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	60f8      	str	r0, [r7, #12]
 80006c4:	60b9      	str	r1, [r7, #8]
 80006c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	f003 0307 	and.w	r3, r3, #7
 80006ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006d0:	69fb      	ldr	r3, [r7, #28]
 80006d2:	f1c3 0307 	rsb	r3, r3, #7
 80006d6:	2b04      	cmp	r3, #4
 80006d8:	bf28      	it	cs
 80006da:	2304      	movcs	r3, #4
 80006dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006de:	69fb      	ldr	r3, [r7, #28]
 80006e0:	3304      	adds	r3, #4
 80006e2:	2b06      	cmp	r3, #6
 80006e4:	d902      	bls.n	80006ec <NVIC_EncodePriority+0x30>
 80006e6:	69fb      	ldr	r3, [r7, #28]
 80006e8:	3b03      	subs	r3, #3
 80006ea:	e000      	b.n	80006ee <NVIC_EncodePriority+0x32>
 80006ec:	2300      	movs	r3, #0
 80006ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006f0:	2201      	movs	r2, #1
 80006f2:	69bb      	ldr	r3, [r7, #24]
 80006f4:	fa02 f303 	lsl.w	r3, r2, r3
 80006f8:	1e5a      	subs	r2, r3, #1
 80006fa:	68bb      	ldr	r3, [r7, #8]
 80006fc:	401a      	ands	r2, r3
 80006fe:	697b      	ldr	r3, [r7, #20]
 8000700:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000702:	2101      	movs	r1, #1
 8000704:	697b      	ldr	r3, [r7, #20]
 8000706:	fa01 f303 	lsl.w	r3, r1, r3
 800070a:	1e59      	subs	r1, r3, #1
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000710:	4313      	orrs	r3, r2
         );
}
 8000712:	4618      	mov	r0, r3
 8000714:	3724      	adds	r7, #36	; 0x24
 8000716:	46bd      	mov	sp, r7
 8000718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071c:	4770      	bx	lr

0800071e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800071e:	b580      	push	{r7, lr}
 8000720:	b082      	sub	sp, #8
 8000722:	af00      	add	r7, sp, #0
 8000724:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000726:	6878      	ldr	r0, [r7, #4]
 8000728:	f7ff ff4e 	bl	80005c8 <__NVIC_SetPriorityGrouping>
}
 800072c:	bf00      	nop
 800072e:	3708      	adds	r7, #8
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}

08000734 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000734:	b580      	push	{r7, lr}
 8000736:	b086      	sub	sp, #24
 8000738:	af00      	add	r7, sp, #0
 800073a:	4603      	mov	r3, r0
 800073c:	60b9      	str	r1, [r7, #8]
 800073e:	607a      	str	r2, [r7, #4]
 8000740:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000742:	2300      	movs	r3, #0
 8000744:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000746:	f7ff ff63 	bl	8000610 <__NVIC_GetPriorityGrouping>
 800074a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800074c:	687a      	ldr	r2, [r7, #4]
 800074e:	68b9      	ldr	r1, [r7, #8]
 8000750:	6978      	ldr	r0, [r7, #20]
 8000752:	f7ff ffb3 	bl	80006bc <NVIC_EncodePriority>
 8000756:	4602      	mov	r2, r0
 8000758:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800075c:	4611      	mov	r1, r2
 800075e:	4618      	mov	r0, r3
 8000760:	f7ff ff82 	bl	8000668 <__NVIC_SetPriority>
}
 8000764:	bf00      	nop
 8000766:	3718      	adds	r7, #24
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}

0800076c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
 8000772:	4603      	mov	r3, r0
 8000774:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000776:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800077a:	4618      	mov	r0, r3
 800077c:	f7ff ff56 	bl	800062c <__NVIC_EnableIRQ>
}
 8000780:	bf00      	nop
 8000782:	3708      	adds	r7, #8
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}

08000788 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b088      	sub	sp, #32
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8000790:	2300      	movs	r3, #0
 8000792:	61fb      	str	r3, [r7, #28]
 8000794:	2300      	movs	r3, #0
 8000796:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8000798:	4baa      	ldr	r3, [pc, #680]	; (8000a44 <HAL_ETH_Init+0x2bc>)
 800079a:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 800079c:	2300      	movs	r3, #0
 800079e:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 80007a0:	2300      	movs	r3, #0
 80007a2:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d101      	bne.n	80007ae <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 80007aa:	2301      	movs	r3, #1
 80007ac:	e185      	b.n	8000aba <HAL_ETH_Init+0x332>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80007b4:	b2db      	uxtb	r3, r3
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d106      	bne.n	80007c8 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	2200      	movs	r2, #0
 80007be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80007c2:	6878      	ldr	r0, [r7, #4]
 80007c4:	f004 fd3e 	bl	8005244 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007c8:	2300      	movs	r3, #0
 80007ca:	60bb      	str	r3, [r7, #8]
 80007cc:	4a9e      	ldr	r2, [pc, #632]	; (8000a48 <HAL_ETH_Init+0x2c0>)
 80007ce:	4b9e      	ldr	r3, [pc, #632]	; (8000a48 <HAL_ETH_Init+0x2c0>)
 80007d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007d6:	6453      	str	r3, [r2, #68]	; 0x44
 80007d8:	4b9b      	ldr	r3, [pc, #620]	; (8000a48 <HAL_ETH_Init+0x2c0>)
 80007da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007e0:	60bb      	str	r3, [r7, #8]
 80007e2:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80007e4:	4a99      	ldr	r2, [pc, #612]	; (8000a4c <HAL_ETH_Init+0x2c4>)
 80007e6:	4b99      	ldr	r3, [pc, #612]	; (8000a4c <HAL_ETH_Init+0x2c4>)
 80007e8:	685b      	ldr	r3, [r3, #4]
 80007ea:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80007ee:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80007f0:	4996      	ldr	r1, [pc, #600]	; (8000a4c <HAL_ETH_Init+0x2c4>)
 80007f2:	4b96      	ldr	r3, [pc, #600]	; (8000a4c <HAL_ETH_Init+0x2c4>)
 80007f4:	685a      	ldr	r2, [r3, #4]
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	6a1b      	ldr	r3, [r3, #32]
 80007fa:	4313      	orrs	r3, r2
 80007fc:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	687a      	ldr	r2, [r7, #4]
 8000804:	6812      	ldr	r2, [r2, #0]
 8000806:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800080a:	6812      	ldr	r2, [r2, #0]
 800080c:	f042 0201 	orr.w	r2, r2, #1
 8000810:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000814:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8000816:	f7ff fea9 	bl	800056c <HAL_GetTick>
 800081a:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800081c:	e011      	b.n	8000842 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 800081e:	f7ff fea5 	bl	800056c <HAL_GetTick>
 8000822:	4602      	mov	r2, r0
 8000824:	697b      	ldr	r3, [r7, #20]
 8000826:	1ad3      	subs	r3, r2, r3
 8000828:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800082c:	d909      	bls.n	8000842 <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	2203      	movs	r2, #3
 8000832:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	2200      	movs	r2, #0
 800083a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 800083e:	2303      	movs	r3, #3
 8000840:	e13b      	b.n	8000aba <HAL_ETH_Init+0x332>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	f003 0301 	and.w	r3, r3, #1
 8000850:	2b00      	cmp	r3, #0
 8000852:	d1e4      	bne.n	800081e <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	691b      	ldr	r3, [r3, #16]
 800085a:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 800085c:	69fb      	ldr	r3, [r7, #28]
 800085e:	f023 031c 	bic.w	r3, r3, #28
 8000862:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8000864:	f001 fad8 	bl	8001e18 <HAL_RCC_GetHCLKFreq>
 8000868:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 800086a:	69bb      	ldr	r3, [r7, #24]
 800086c:	4a78      	ldr	r2, [pc, #480]	; (8000a50 <HAL_ETH_Init+0x2c8>)
 800086e:	4293      	cmp	r3, r2
 8000870:	d908      	bls.n	8000884 <HAL_ETH_Init+0xfc>
 8000872:	69bb      	ldr	r3, [r7, #24]
 8000874:	4a77      	ldr	r2, [pc, #476]	; (8000a54 <HAL_ETH_Init+0x2cc>)
 8000876:	4293      	cmp	r3, r2
 8000878:	d804      	bhi.n	8000884 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800087a:	69fb      	ldr	r3, [r7, #28]
 800087c:	f043 0308 	orr.w	r3, r3, #8
 8000880:	61fb      	str	r3, [r7, #28]
 8000882:	e027      	b.n	80008d4 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8000884:	69bb      	ldr	r3, [r7, #24]
 8000886:	4a73      	ldr	r2, [pc, #460]	; (8000a54 <HAL_ETH_Init+0x2cc>)
 8000888:	4293      	cmp	r3, r2
 800088a:	d908      	bls.n	800089e <HAL_ETH_Init+0x116>
 800088c:	69bb      	ldr	r3, [r7, #24]
 800088e:	4a72      	ldr	r2, [pc, #456]	; (8000a58 <HAL_ETH_Init+0x2d0>)
 8000890:	4293      	cmp	r3, r2
 8000892:	d804      	bhi.n	800089e <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8000894:	69fb      	ldr	r3, [r7, #28]
 8000896:	f043 030c 	orr.w	r3, r3, #12
 800089a:	61fb      	str	r3, [r7, #28]
 800089c:	e01a      	b.n	80008d4 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 800089e:	69bb      	ldr	r3, [r7, #24]
 80008a0:	4a6d      	ldr	r2, [pc, #436]	; (8000a58 <HAL_ETH_Init+0x2d0>)
 80008a2:	4293      	cmp	r3, r2
 80008a4:	d903      	bls.n	80008ae <HAL_ETH_Init+0x126>
 80008a6:	69bb      	ldr	r3, [r7, #24]
 80008a8:	4a6c      	ldr	r2, [pc, #432]	; (8000a5c <HAL_ETH_Init+0x2d4>)
 80008aa:	4293      	cmp	r3, r2
 80008ac:	d911      	bls.n	80008d2 <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80008ae:	69bb      	ldr	r3, [r7, #24]
 80008b0:	4a6a      	ldr	r2, [pc, #424]	; (8000a5c <HAL_ETH_Init+0x2d4>)
 80008b2:	4293      	cmp	r3, r2
 80008b4:	d908      	bls.n	80008c8 <HAL_ETH_Init+0x140>
 80008b6:	69bb      	ldr	r3, [r7, #24]
 80008b8:	4a69      	ldr	r2, [pc, #420]	; (8000a60 <HAL_ETH_Init+0x2d8>)
 80008ba:	4293      	cmp	r3, r2
 80008bc:	d804      	bhi.n	80008c8 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80008be:	69fb      	ldr	r3, [r7, #28]
 80008c0:	f043 0304 	orr.w	r3, r3, #4
 80008c4:	61fb      	str	r3, [r7, #28]
 80008c6:	e005      	b.n	80008d4 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 80008c8:	69fb      	ldr	r3, [r7, #28]
 80008ca:	f043 0310 	orr.w	r3, r3, #16
 80008ce:	61fb      	str	r3, [r7, #28]
 80008d0:	e000      	b.n	80008d4 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80008d2:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	69fa      	ldr	r2, [r7, #28]
 80008da:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80008dc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80008e0:	2100      	movs	r1, #0
 80008e2:	6878      	ldr	r0, [r7, #4]
 80008e4:	f000 f956 	bl	8000b94 <HAL_ETH_WritePHYRegister>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d00b      	beq.n	8000906 <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 80008ee:	2301      	movs	r3, #1
 80008f0:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 80008f2:	6939      	ldr	r1, [r7, #16]
 80008f4:	6878      	ldr	r0, [r7, #4]
 80008f6:	f000 f9b3 	bl	8000c60 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	2201      	movs	r2, #1
 80008fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8000902:	2301      	movs	r3, #1
 8000904:	e0d9      	b.n	8000aba <HAL_ETH_Init+0x332>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8000906:	20ff      	movs	r0, #255	; 0xff
 8000908:	f7ff fe3c 	bl	8000584 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	685b      	ldr	r3, [r3, #4]
 8000910:	2b00      	cmp	r3, #0
 8000912:	f000 80a7 	beq.w	8000a64 <HAL_ETH_Init+0x2dc>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8000916:	f7ff fe29 	bl	800056c <HAL_GetTick>
 800091a:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800091c:	f107 030c 	add.w	r3, r7, #12
 8000920:	461a      	mov	r2, r3
 8000922:	2101      	movs	r1, #1
 8000924:	6878      	ldr	r0, [r7, #4]
 8000926:	f000 f8cd 	bl	8000ac4 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800092a:	f7ff fe1f 	bl	800056c <HAL_GetTick>
 800092e:	4602      	mov	r2, r0
 8000930:	697b      	ldr	r3, [r7, #20]
 8000932:	1ad3      	subs	r3, r2, r3
 8000934:	f241 3288 	movw	r2, #5000	; 0x1388
 8000938:	4293      	cmp	r3, r2
 800093a:	d90f      	bls.n	800095c <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800093c:	2301      	movs	r3, #1
 800093e:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8000940:	6939      	ldr	r1, [r7, #16]
 8000942:	6878      	ldr	r0, [r7, #4]
 8000944:	f000 f98c 	bl	8000c60 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	2201      	movs	r2, #1
 800094c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	2200      	movs	r2, #0
 8000954:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8000958:	2303      	movs	r3, #3
 800095a:	e0ae      	b.n	8000aba <HAL_ETH_Init+0x332>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	f003 0304 	and.w	r3, r3, #4
 8000962:	2b00      	cmp	r3, #0
 8000964:	d0da      	beq.n	800091c <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8000966:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800096a:	2100      	movs	r1, #0
 800096c:	6878      	ldr	r0, [r7, #4]
 800096e:	f000 f911 	bl	8000b94 <HAL_ETH_WritePHYRegister>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d00b      	beq.n	8000990 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8000978:	2301      	movs	r3, #1
 800097a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800097c:	6939      	ldr	r1, [r7, #16]
 800097e:	6878      	ldr	r0, [r7, #4]
 8000980:	f000 f96e 	bl	8000c60 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	2201      	movs	r2, #1
 8000988:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800098c:	2301      	movs	r3, #1
 800098e:	e094      	b.n	8000aba <HAL_ETH_Init+0x332>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8000990:	f7ff fdec 	bl	800056c <HAL_GetTick>
 8000994:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000996:	f107 030c 	add.w	r3, r7, #12
 800099a:	461a      	mov	r2, r3
 800099c:	2101      	movs	r1, #1
 800099e:	6878      	ldr	r0, [r7, #4]
 80009a0:	f000 f890 	bl	8000ac4 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80009a4:	f7ff fde2 	bl	800056c <HAL_GetTick>
 80009a8:	4602      	mov	r2, r0
 80009aa:	697b      	ldr	r3, [r7, #20]
 80009ac:	1ad3      	subs	r3, r2, r3
 80009ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80009b2:	4293      	cmp	r3, r2
 80009b4:	d90f      	bls.n	80009d6 <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80009b6:	2301      	movs	r3, #1
 80009b8:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80009ba:	6939      	ldr	r1, [r7, #16]
 80009bc:	6878      	ldr	r0, [r7, #4]
 80009be:	f000 f94f 	bl	8000c60 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	2201      	movs	r2, #1
 80009c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	2200      	movs	r2, #0
 80009ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80009d2:	2303      	movs	r3, #3
 80009d4:	e071      	b.n	8000aba <HAL_ETH_Init+0x332>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	f003 0320 	and.w	r3, r3, #32
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d0da      	beq.n	8000996 <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80009e0:	f107 030c 	add.w	r3, r7, #12
 80009e4:	461a      	mov	r2, r3
 80009e6:	211f      	movs	r1, #31
 80009e8:	6878      	ldr	r0, [r7, #4]
 80009ea:	f000 f86b 	bl	8000ac4 <HAL_ETH_ReadPHYRegister>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d00b      	beq.n	8000a0c <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80009f4:	2301      	movs	r3, #1
 80009f6:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80009f8:	6939      	ldr	r1, [r7, #16]
 80009fa:	6878      	ldr	r0, [r7, #4]
 80009fc:	f000 f930 	bl	8000c60 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	2201      	movs	r2, #1
 8000a04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8000a08:	2301      	movs	r3, #1
 8000a0a:	e056      	b.n	8000aba <HAL_ETH_Init+0x332>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	f003 0310 	and.w	r3, r3, #16
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d004      	beq.n	8000a20 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a1c:	60da      	str	r2, [r3, #12]
 8000a1e:	e002      	b.n	8000a26 <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	2200      	movs	r2, #0
 8000a24:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	f003 0304 	and.w	r3, r3, #4
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d003      	beq.n	8000a38 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	2200      	movs	r2, #0
 8000a34:	609a      	str	r2, [r3, #8]
 8000a36:	e037      	b.n	8000aa8 <HAL_ETH_Init+0x320>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a3e:	609a      	str	r2, [r3, #8]
 8000a40:	e032      	b.n	8000aa8 <HAL_ETH_Init+0x320>
 8000a42:	bf00      	nop
 8000a44:	03938700 	.word	0x03938700
 8000a48:	40023800 	.word	0x40023800
 8000a4c:	40013800 	.word	0x40013800
 8000a50:	01312cff 	.word	0x01312cff
 8000a54:	02160ebf 	.word	0x02160ebf
 8000a58:	039386ff 	.word	0x039386ff
 8000a5c:	05f5e0ff 	.word	0x05f5e0ff
 8000a60:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	68db      	ldr	r3, [r3, #12]
 8000a68:	08db      	lsrs	r3, r3, #3
 8000a6a:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	689b      	ldr	r3, [r3, #8]
 8000a70:	085b      	lsrs	r3, r3, #1
 8000a72:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8000a74:	4313      	orrs	r3, r2
 8000a76:	b29b      	uxth	r3, r3
 8000a78:	461a      	mov	r2, r3
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	6878      	ldr	r0, [r7, #4]
 8000a7e:	f000 f889 	bl	8000b94 <HAL_ETH_WritePHYRegister>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d00b      	beq.n	8000aa0 <HAL_ETH_Init+0x318>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8000a88:	2301      	movs	r3, #1
 8000a8a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8000a8c:	6939      	ldr	r1, [r7, #16]
 8000a8e:	6878      	ldr	r0, [r7, #4]
 8000a90:	f000 f8e6 	bl	8000c60 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	2201      	movs	r2, #1
 8000a98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	e00c      	b.n	8000aba <HAL_ETH_Init+0x332>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8000aa0:	f640 70ff 	movw	r0, #4095	; 0xfff
 8000aa4:	f7ff fd6e 	bl	8000584 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8000aa8:	6939      	ldr	r1, [r7, #16]
 8000aaa:	6878      	ldr	r0, [r7, #4]
 8000aac:	f000 f8d8 	bl	8000c60 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8000ab8:	2300      	movs	r3, #0
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	3720      	adds	r7, #32
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop

08000ac4 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b086      	sub	sp, #24
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	60f8      	str	r0, [r7, #12]
 8000acc:	460b      	mov	r3, r1
 8000ace:	607a      	str	r2, [r7, #4]
 8000ad0:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000ae0:	b2db      	uxtb	r3, r3
 8000ae2:	2b82      	cmp	r3, #130	; 0x82
 8000ae4:	d101      	bne.n	8000aea <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8000ae6:	2302      	movs	r3, #2
 8000ae8:	e050      	b.n	8000b8c <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	2282      	movs	r2, #130	; 0x82
 8000aee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	691b      	ldr	r3, [r3, #16]
 8000af8:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8000afa:	697b      	ldr	r3, [r7, #20]
 8000afc:	f003 031c 	and.w	r3, r3, #28
 8000b00:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	8a1b      	ldrh	r3, [r3, #16]
 8000b06:	02db      	lsls	r3, r3, #11
 8000b08:	b29b      	uxth	r3, r3
 8000b0a:	697a      	ldr	r2, [r7, #20]
 8000b0c:	4313      	orrs	r3, r2
 8000b0e:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8000b10:	897b      	ldrh	r3, [r7, #10]
 8000b12:	019b      	lsls	r3, r3, #6
 8000b14:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8000b18:	697a      	ldr	r2, [r7, #20]
 8000b1a:	4313      	orrs	r3, r2
 8000b1c:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8000b1e:	697b      	ldr	r3, [r7, #20]
 8000b20:	f023 0302 	bic.w	r3, r3, #2
 8000b24:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8000b26:	697b      	ldr	r3, [r7, #20]
 8000b28:	f043 0301 	orr.w	r3, r3, #1
 8000b2c:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	697a      	ldr	r2, [r7, #20]
 8000b34:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8000b36:	f7ff fd19 	bl	800056c <HAL_GetTick>
 8000b3a:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8000b3c:	e015      	b.n	8000b6a <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8000b3e:	f7ff fd15 	bl	800056c <HAL_GetTick>
 8000b42:	4602      	mov	r2, r0
 8000b44:	693b      	ldr	r3, [r7, #16]
 8000b46:	1ad3      	subs	r3, r2, r3
 8000b48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b4c:	d309      	bcc.n	8000b62 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	2201      	movs	r2, #1
 8000b52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	2200      	movs	r2, #0
 8000b5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8000b5e:	2303      	movs	r3, #3
 8000b60:	e014      	b.n	8000b8c <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	691b      	ldr	r3, [r3, #16]
 8000b68:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8000b6a:	697b      	ldr	r3, [r7, #20]
 8000b6c:	f003 0301 	and.w	r3, r3, #1
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d1e4      	bne.n	8000b3e <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	695b      	ldr	r3, [r3, #20]
 8000b7a:	b29b      	uxth	r3, r3
 8000b7c:	461a      	mov	r2, r3
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	2201      	movs	r2, #1
 8000b86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8000b8a:	2300      	movs	r3, #0
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	3718      	adds	r7, #24
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}

08000b94 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b086      	sub	sp, #24
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	60f8      	str	r0, [r7, #12]
 8000b9c:	460b      	mov	r3, r1
 8000b9e:	607a      	str	r2, [r7, #4]
 8000ba0:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000bb0:	b2db      	uxtb	r3, r3
 8000bb2:	2b42      	cmp	r3, #66	; 0x42
 8000bb4:	d101      	bne.n	8000bba <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8000bb6:	2302      	movs	r3, #2
 8000bb8:	e04e      	b.n	8000c58 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	2242      	movs	r2, #66	; 0x42
 8000bbe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	691b      	ldr	r3, [r3, #16]
 8000bc8:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8000bca:	697b      	ldr	r3, [r7, #20]
 8000bcc:	f003 031c 	and.w	r3, r3, #28
 8000bd0:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	8a1b      	ldrh	r3, [r3, #16]
 8000bd6:	02db      	lsls	r3, r3, #11
 8000bd8:	b29b      	uxth	r3, r3
 8000bda:	697a      	ldr	r2, [r7, #20]
 8000bdc:	4313      	orrs	r3, r2
 8000bde:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8000be0:	897b      	ldrh	r3, [r7, #10]
 8000be2:	019b      	lsls	r3, r3, #6
 8000be4:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8000be8:	697a      	ldr	r2, [r7, #20]
 8000bea:	4313      	orrs	r3, r2
 8000bec:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8000bee:	697b      	ldr	r3, [r7, #20]
 8000bf0:	f043 0302 	orr.w	r3, r3, #2
 8000bf4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8000bf6:	697b      	ldr	r3, [r7, #20]
 8000bf8:	f043 0301 	orr.w	r3, r3, #1
 8000bfc:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	687a      	ldr	r2, [r7, #4]
 8000c04:	b292      	uxth	r2, r2
 8000c06:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	697a      	ldr	r2, [r7, #20]
 8000c0e:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8000c10:	f7ff fcac 	bl	800056c <HAL_GetTick>
 8000c14:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8000c16:	e015      	b.n	8000c44 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8000c18:	f7ff fca8 	bl	800056c <HAL_GetTick>
 8000c1c:	4602      	mov	r2, r0
 8000c1e:	693b      	ldr	r3, [r7, #16]
 8000c20:	1ad3      	subs	r3, r2, r3
 8000c22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c26:	d309      	bcc.n	8000c3c <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	2200      	movs	r2, #0
 8000c34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8000c38:	2303      	movs	r3, #3
 8000c3a:	e00d      	b.n	8000c58 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	691b      	ldr	r3, [r3, #16]
 8000c42:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	f003 0301 	and.w	r3, r3, #1
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d1e4      	bne.n	8000c18 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	2201      	movs	r2, #1
 8000c52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8000c56:	2300      	movs	r3, #0
}
 8000c58:	4618      	mov	r0, r3
 8000c5a:	3718      	adds	r7, #24
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}

08000c60 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b0b0      	sub	sp, #192	; 0xc0
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
 8000c68:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d007      	beq.n	8000c86 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c7c:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c84:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8000c86:	2300      	movs	r3, #0
 8000c88:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8000c92:	2300      	movs	r3, #0
 8000c94:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8000c96:	2300      	movs	r3, #0
 8000c98:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	69db      	ldr	r3, [r3, #28]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d103      	bne.n	8000cae <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8000ca6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000caa:	663b      	str	r3, [r7, #96]	; 0x60
 8000cac:	e001      	b.n	8000cb2 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8000cb2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cb6:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8000ccc:	2340      	movs	r3, #64	; 0x40
 8000cce:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8000d00:	2380      	movs	r3, #128	; 0x80
 8000d02:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8000d06:	2300      	movs	r3, #0
 8000d08:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8000d12:	2300      	movs	r3, #0
 8000d14:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8000d24:	2300      	movs	r3, #0
 8000d26:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8000d34:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000d38:	4bab      	ldr	r3, [pc, #684]	; (8000fe8 <ETH_MACDMAConfig+0x388>)
 8000d3a:	4013      	ands	r3, r2
 8000d3c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8000d40:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8000d42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8000d44:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8000d46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8000d48:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8000d4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8000d4c:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8000d52:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8000d54:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8000d56:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8000d58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8000d5a:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8000d60:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8000d62:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8000d64:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8000d66:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8000d68:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8000d6a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8000d6c:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8000d6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8000d70:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8000d72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8000d74:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8000d76:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000d7a:	4313      	orrs	r3, r2
 8000d7c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000d88:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8000d94:	2001      	movs	r0, #1
 8000d96:	f7ff fbf5 	bl	8000584 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000da2:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	6f79      	ldr	r1, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8000daa:	6fba      	ldr	r2, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8000dac:	4311      	orrs	r1, r2
                                        macinit.PassControlFrames |
 8000dae:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8000db0:	4311      	orrs	r1, r2
                                        macinit.BroadcastFramesReception | 
 8000db2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8000db6:	4311      	orrs	r1, r2
                                        macinit.DestinationAddrFilter |
 8000db8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8000dbc:	4311      	orrs	r1, r2
                                        macinit.PromiscuousMode |
 8000dbe:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8000dc2:	4311      	orrs	r1, r2
                                        macinit.MulticastFramesFilter |
 8000dc4:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8000dc8:	4311      	orrs	r1, r2
                                        macinit.UnicastFramesFilter);
 8000dca:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
                                        macinit.MulticastFramesFilter |
 8000dce:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8000dd0:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8000ddc:	2001      	movs	r0, #1
 8000dde:	f7ff fbd1 	bl	8000584 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000dea:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8000df4:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8000dfe:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	699b      	ldr	r3, [r3, #24]
 8000e06:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8000e0a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000e0e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8000e12:	4013      	ands	r3, r2
 8000e14:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8000e18:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000e1c:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8000e1e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8000e22:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8000e24:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8000e28:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8000e2a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8000e2e:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8000e30:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8000e34:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8000e36:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8000e3a:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8000e3c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000e40:	4313      	orrs	r3, r2
 8000e42:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000e4e:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	699b      	ldr	r3, [r3, #24]
 8000e56:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8000e5a:	2001      	movs	r0, #1
 8000e5c:	f7ff fb92 	bl	8000584 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000e68:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8000e72:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8000e76:	430a      	orrs	r2, r1
 8000e78:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	69db      	ldr	r3, [r3, #28]
 8000e80:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8000e84:	2001      	movs	r0, #1
 8000e86:	f7ff fb7d 	bl	8000584 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000e92:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8000e94:	2300      	movs	r3, #0
 8000e96:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8000e98:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000e9c:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8000ea2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000ea6:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8000eac:	2300      	movs	r3, #0
 8000eae:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8000eb8:	2304      	movs	r3, #4
 8000eba:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8000ebc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8000ec2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ec6:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8000ec8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ecc:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8000ece:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ed2:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8000ed4:	2380      	movs	r3, #128	; 0x80
 8000ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8000edc:	2300      	movs	r3, #0
 8000ede:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000ee8:	3318      	adds	r3, #24
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8000ef0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000ef4:	4b3d      	ldr	r3, [pc, #244]	; (8000fec <ETH_MACDMAConfig+0x38c>)
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8000efc:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8000efe:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8000f00:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8000f02:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8000f04:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8000f06:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8000f08:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8000f0a:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8000f0c:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8000f0e:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8000f10:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8000f12:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8000f14:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8000f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8000f18:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8000f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8000f1c:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8000f1e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000f22:	4313      	orrs	r3, r2
 8000f24:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000f30:	3318      	adds	r3, #24
 8000f32:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000f36:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000f40:	3318      	adds	r3, #24
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8000f48:	2001      	movs	r0, #1
 8000f4a:	f7ff fb1b 	bl	8000584 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000f56:	3318      	adds	r3, #24
 8000f58:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000f5c:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	6af9      	ldr	r1, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8000f64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8000f66:	4311      	orrs	r1, r2
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8000f68:	6b7a      	ldr	r2, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8000f6a:	4311      	orrs	r1, r2
                                          dmainit.TxDMABurstLength |
 8000f6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8000f6e:	4311      	orrs	r1, r2
                                          dmainit.EnhancedDescriptorFormat |
 8000f70:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8000f72:	4311      	orrs	r1, r2
                                          (dmainit.DescriptorSkipLength << 2U) |
 8000f74:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000f76:	0092      	lsls	r2, r2, #2
                                          dmainit.EnhancedDescriptorFormat |
 8000f78:	4311      	orrs	r1, r2
                                          dmainit.DMAArbitration |
 8000f7a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8000f7c:	430a      	orrs	r2, r1
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8000f7e:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000f82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000f86:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8000f96:	2001      	movs	r0, #1
 8000f98:	f7ff faf4 	bl	8000584 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000fa4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000fa8:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	699b      	ldr	r3, [r3, #24]
 8000fae:	2b01      	cmp	r3, #1
 8000fb0:	d10f      	bne.n	8000fd2 <ETH_MACDMAConfig+0x372>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	6819      	ldr	r1, [r3, #0]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000fbe:	331c      	adds	r3, #28
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000fc6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000fca:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8000fce:	331c      	adds	r3, #28
 8000fd0:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	695b      	ldr	r3, [r3, #20]
 8000fd6:	461a      	mov	r2, r3
 8000fd8:	2100      	movs	r1, #0
 8000fda:	6878      	ldr	r0, [r7, #4]
 8000fdc:	f000 f808 	bl	8000ff0 <ETH_MACAddressConfig>
}
 8000fe0:	bf00      	nop
 8000fe2:	37c0      	adds	r7, #192	; 0xc0
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	ff20810f 	.word	0xff20810f
 8000fec:	f8de3f23 	.word	0xf8de3f23

08000ff0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b087      	sub	sp, #28
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	60f8      	str	r0, [r7, #12]
 8000ff8:	60b9      	str	r1, [r7, #8]
 8000ffa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	3305      	adds	r3, #5
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	021b      	lsls	r3, r3, #8
 8001004:	687a      	ldr	r2, [r7, #4]
 8001006:	3204      	adds	r2, #4
 8001008:	7812      	ldrb	r2, [r2, #0]
 800100a:	4313      	orrs	r3, r2
 800100c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800100e:	68ba      	ldr	r2, [r7, #8]
 8001010:	4b11      	ldr	r3, [pc, #68]	; (8001058 <ETH_MACAddressConfig+0x68>)
 8001012:	4413      	add	r3, r2
 8001014:	461a      	mov	r2, r3
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	3303      	adds	r3, #3
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	061a      	lsls	r2, r3, #24
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	3302      	adds	r3, #2
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	041b      	lsls	r3, r3, #16
 800102a:	431a      	orrs	r2, r3
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	3301      	adds	r3, #1
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	021b      	lsls	r3, r3, #8
 8001034:	4313      	orrs	r3, r2
 8001036:	687a      	ldr	r2, [r7, #4]
 8001038:	7812      	ldrb	r2, [r2, #0]
 800103a:	4313      	orrs	r3, r2
 800103c:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800103e:	68ba      	ldr	r2, [r7, #8]
 8001040:	4b06      	ldr	r3, [pc, #24]	; (800105c <ETH_MACAddressConfig+0x6c>)
 8001042:	4413      	add	r3, r2
 8001044:	461a      	mov	r2, r3
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	6013      	str	r3, [r2, #0]
}
 800104a:	bf00      	nop
 800104c:	371c      	adds	r7, #28
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	40028040 	.word	0x40028040
 800105c:	40028044 	.word	0x40028044

08001060 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001060:	b480      	push	{r7}
 8001062:	b089      	sub	sp, #36	; 0x24
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
 8001068:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800106a:	2300      	movs	r3, #0
 800106c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800106e:	2300      	movs	r3, #0
 8001070:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001072:	2300      	movs	r3, #0
 8001074:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001076:	2300      	movs	r3, #0
 8001078:	61fb      	str	r3, [r7, #28]
 800107a:	e177      	b.n	800136c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800107c:	2201      	movs	r2, #1
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	4013      	ands	r3, r2
 800108e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001090:	693a      	ldr	r2, [r7, #16]
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	429a      	cmp	r2, r3
 8001096:	f040 8166 	bne.w	8001366 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	2b02      	cmp	r3, #2
 80010a0:	d003      	beq.n	80010aa <HAL_GPIO_Init+0x4a>
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	2b12      	cmp	r3, #18
 80010a8:	d123      	bne.n	80010f2 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	08da      	lsrs	r2, r3, #3
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	3208      	adds	r2, #8
 80010b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	f003 0307 	and.w	r3, r3, #7
 80010be:	009b      	lsls	r3, r3, #2
 80010c0:	220f      	movs	r2, #15
 80010c2:	fa02 f303 	lsl.w	r3, r2, r3
 80010c6:	43db      	mvns	r3, r3
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	4013      	ands	r3, r2
 80010cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	691a      	ldr	r2, [r3, #16]
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	f003 0307 	and.w	r3, r3, #7
 80010d8:	009b      	lsls	r3, r3, #2
 80010da:	fa02 f303 	lsl.w	r3, r2, r3
 80010de:	69ba      	ldr	r2, [r7, #24]
 80010e0:	4313      	orrs	r3, r2
 80010e2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010e4:	69fb      	ldr	r3, [r7, #28]
 80010e6:	08da      	lsrs	r2, r3, #3
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	3208      	adds	r2, #8
 80010ec:	69b9      	ldr	r1, [r7, #24]
 80010ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	005b      	lsls	r3, r3, #1
 80010fc:	2203      	movs	r2, #3
 80010fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001102:	43db      	mvns	r3, r3
 8001104:	69ba      	ldr	r2, [r7, #24]
 8001106:	4013      	ands	r3, r2
 8001108:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	f003 0203 	and.w	r2, r3, #3
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	005b      	lsls	r3, r3, #1
 8001116:	fa02 f303 	lsl.w	r3, r2, r3
 800111a:	69ba      	ldr	r2, [r7, #24]
 800111c:	4313      	orrs	r3, r2
 800111e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	69ba      	ldr	r2, [r7, #24]
 8001124:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	2b01      	cmp	r3, #1
 800112c:	d00b      	beq.n	8001146 <HAL_GPIO_Init+0xe6>
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	2b02      	cmp	r3, #2
 8001134:	d007      	beq.n	8001146 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800113a:	2b11      	cmp	r3, #17
 800113c:	d003      	beq.n	8001146 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	2b12      	cmp	r3, #18
 8001144:	d130      	bne.n	80011a8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	689b      	ldr	r3, [r3, #8]
 800114a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800114c:	69fb      	ldr	r3, [r7, #28]
 800114e:	005b      	lsls	r3, r3, #1
 8001150:	2203      	movs	r2, #3
 8001152:	fa02 f303 	lsl.w	r3, r2, r3
 8001156:	43db      	mvns	r3, r3
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	4013      	ands	r3, r2
 800115c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	68da      	ldr	r2, [r3, #12]
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	005b      	lsls	r3, r3, #1
 8001166:	fa02 f303 	lsl.w	r3, r2, r3
 800116a:	69ba      	ldr	r2, [r7, #24]
 800116c:	4313      	orrs	r3, r2
 800116e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	69ba      	ldr	r2, [r7, #24]
 8001174:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800117c:	2201      	movs	r2, #1
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	fa02 f303 	lsl.w	r3, r2, r3
 8001184:	43db      	mvns	r3, r3
 8001186:	69ba      	ldr	r2, [r7, #24]
 8001188:	4013      	ands	r3, r2
 800118a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	091b      	lsrs	r3, r3, #4
 8001192:	f003 0201 	and.w	r2, r3, #1
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	4313      	orrs	r3, r2
 80011a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	69ba      	ldr	r2, [r7, #24]
 80011a6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	68db      	ldr	r3, [r3, #12]
 80011ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	005b      	lsls	r3, r3, #1
 80011b2:	2203      	movs	r2, #3
 80011b4:	fa02 f303 	lsl.w	r3, r2, r3
 80011b8:	43db      	mvns	r3, r3
 80011ba:	69ba      	ldr	r2, [r7, #24]
 80011bc:	4013      	ands	r3, r2
 80011be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	689a      	ldr	r2, [r3, #8]
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	005b      	lsls	r3, r3, #1
 80011c8:	fa02 f303 	lsl.w	r3, r2, r3
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	4313      	orrs	r3, r2
 80011d0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	f000 80c0 	beq.w	8001366 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011e6:	2300      	movs	r3, #0
 80011e8:	60fb      	str	r3, [r7, #12]
 80011ea:	4a65      	ldr	r2, [pc, #404]	; (8001380 <HAL_GPIO_Init+0x320>)
 80011ec:	4b64      	ldr	r3, [pc, #400]	; (8001380 <HAL_GPIO_Init+0x320>)
 80011ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011f4:	6453      	str	r3, [r2, #68]	; 0x44
 80011f6:	4b62      	ldr	r3, [pc, #392]	; (8001380 <HAL_GPIO_Init+0x320>)
 80011f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011fe:	60fb      	str	r3, [r7, #12]
 8001200:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001202:	4a60      	ldr	r2, [pc, #384]	; (8001384 <HAL_GPIO_Init+0x324>)
 8001204:	69fb      	ldr	r3, [r7, #28]
 8001206:	089b      	lsrs	r3, r3, #2
 8001208:	3302      	adds	r3, #2
 800120a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800120e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001210:	69fb      	ldr	r3, [r7, #28]
 8001212:	f003 0303 	and.w	r3, r3, #3
 8001216:	009b      	lsls	r3, r3, #2
 8001218:	220f      	movs	r2, #15
 800121a:	fa02 f303 	lsl.w	r3, r2, r3
 800121e:	43db      	mvns	r3, r3
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	4013      	ands	r3, r2
 8001224:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4a57      	ldr	r2, [pc, #348]	; (8001388 <HAL_GPIO_Init+0x328>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d037      	beq.n	800129e <HAL_GPIO_Init+0x23e>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4a56      	ldr	r2, [pc, #344]	; (800138c <HAL_GPIO_Init+0x32c>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d031      	beq.n	800129a <HAL_GPIO_Init+0x23a>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4a55      	ldr	r2, [pc, #340]	; (8001390 <HAL_GPIO_Init+0x330>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d02b      	beq.n	8001296 <HAL_GPIO_Init+0x236>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4a54      	ldr	r2, [pc, #336]	; (8001394 <HAL_GPIO_Init+0x334>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d025      	beq.n	8001292 <HAL_GPIO_Init+0x232>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4a53      	ldr	r2, [pc, #332]	; (8001398 <HAL_GPIO_Init+0x338>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d01f      	beq.n	800128e <HAL_GPIO_Init+0x22e>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4a52      	ldr	r2, [pc, #328]	; (800139c <HAL_GPIO_Init+0x33c>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d019      	beq.n	800128a <HAL_GPIO_Init+0x22a>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4a51      	ldr	r2, [pc, #324]	; (80013a0 <HAL_GPIO_Init+0x340>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d013      	beq.n	8001286 <HAL_GPIO_Init+0x226>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4a50      	ldr	r2, [pc, #320]	; (80013a4 <HAL_GPIO_Init+0x344>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d00d      	beq.n	8001282 <HAL_GPIO_Init+0x222>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4a4f      	ldr	r2, [pc, #316]	; (80013a8 <HAL_GPIO_Init+0x348>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d007      	beq.n	800127e <HAL_GPIO_Init+0x21e>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4a4e      	ldr	r2, [pc, #312]	; (80013ac <HAL_GPIO_Init+0x34c>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d101      	bne.n	800127a <HAL_GPIO_Init+0x21a>
 8001276:	2309      	movs	r3, #9
 8001278:	e012      	b.n	80012a0 <HAL_GPIO_Init+0x240>
 800127a:	230a      	movs	r3, #10
 800127c:	e010      	b.n	80012a0 <HAL_GPIO_Init+0x240>
 800127e:	2308      	movs	r3, #8
 8001280:	e00e      	b.n	80012a0 <HAL_GPIO_Init+0x240>
 8001282:	2307      	movs	r3, #7
 8001284:	e00c      	b.n	80012a0 <HAL_GPIO_Init+0x240>
 8001286:	2306      	movs	r3, #6
 8001288:	e00a      	b.n	80012a0 <HAL_GPIO_Init+0x240>
 800128a:	2305      	movs	r3, #5
 800128c:	e008      	b.n	80012a0 <HAL_GPIO_Init+0x240>
 800128e:	2304      	movs	r3, #4
 8001290:	e006      	b.n	80012a0 <HAL_GPIO_Init+0x240>
 8001292:	2303      	movs	r3, #3
 8001294:	e004      	b.n	80012a0 <HAL_GPIO_Init+0x240>
 8001296:	2302      	movs	r3, #2
 8001298:	e002      	b.n	80012a0 <HAL_GPIO_Init+0x240>
 800129a:	2301      	movs	r3, #1
 800129c:	e000      	b.n	80012a0 <HAL_GPIO_Init+0x240>
 800129e:	2300      	movs	r3, #0
 80012a0:	69fa      	ldr	r2, [r7, #28]
 80012a2:	f002 0203 	and.w	r2, r2, #3
 80012a6:	0092      	lsls	r2, r2, #2
 80012a8:	4093      	lsls	r3, r2
 80012aa:	69ba      	ldr	r2, [r7, #24]
 80012ac:	4313      	orrs	r3, r2
 80012ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012b0:	4934      	ldr	r1, [pc, #208]	; (8001384 <HAL_GPIO_Init+0x324>)
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	089b      	lsrs	r3, r3, #2
 80012b6:	3302      	adds	r3, #2
 80012b8:	69ba      	ldr	r2, [r7, #24]
 80012ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012be:	4b3c      	ldr	r3, [pc, #240]	; (80013b0 <HAL_GPIO_Init+0x350>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	43db      	mvns	r3, r3
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	4013      	ands	r3, r2
 80012cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d003      	beq.n	80012e2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80012da:	69ba      	ldr	r2, [r7, #24]
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	4313      	orrs	r3, r2
 80012e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012e2:	4a33      	ldr	r2, [pc, #204]	; (80013b0 <HAL_GPIO_Init+0x350>)
 80012e4:	69bb      	ldr	r3, [r7, #24]
 80012e6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80012e8:	4b31      	ldr	r3, [pc, #196]	; (80013b0 <HAL_GPIO_Init+0x350>)
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	43db      	mvns	r3, r3
 80012f2:	69ba      	ldr	r2, [r7, #24]
 80012f4:	4013      	ands	r3, r2
 80012f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001300:	2b00      	cmp	r3, #0
 8001302:	d003      	beq.n	800130c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	4313      	orrs	r3, r2
 800130a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800130c:	4a28      	ldr	r2, [pc, #160]	; (80013b0 <HAL_GPIO_Init+0x350>)
 800130e:	69bb      	ldr	r3, [r7, #24]
 8001310:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001312:	4b27      	ldr	r3, [pc, #156]	; (80013b0 <HAL_GPIO_Init+0x350>)
 8001314:	689b      	ldr	r3, [r3, #8]
 8001316:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	43db      	mvns	r3, r3
 800131c:	69ba      	ldr	r2, [r7, #24]
 800131e:	4013      	ands	r3, r2
 8001320:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800132a:	2b00      	cmp	r3, #0
 800132c:	d003      	beq.n	8001336 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800132e:	69ba      	ldr	r2, [r7, #24]
 8001330:	693b      	ldr	r3, [r7, #16]
 8001332:	4313      	orrs	r3, r2
 8001334:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001336:	4a1e      	ldr	r2, [pc, #120]	; (80013b0 <HAL_GPIO_Init+0x350>)
 8001338:	69bb      	ldr	r3, [r7, #24]
 800133a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800133c:	4b1c      	ldr	r3, [pc, #112]	; (80013b0 <HAL_GPIO_Init+0x350>)
 800133e:	68db      	ldr	r3, [r3, #12]
 8001340:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	43db      	mvns	r3, r3
 8001346:	69ba      	ldr	r2, [r7, #24]
 8001348:	4013      	ands	r3, r2
 800134a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001354:	2b00      	cmp	r3, #0
 8001356:	d003      	beq.n	8001360 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001358:	69ba      	ldr	r2, [r7, #24]
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	4313      	orrs	r3, r2
 800135e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001360:	4a13      	ldr	r2, [pc, #76]	; (80013b0 <HAL_GPIO_Init+0x350>)
 8001362:	69bb      	ldr	r3, [r7, #24]
 8001364:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	3301      	adds	r3, #1
 800136a:	61fb      	str	r3, [r7, #28]
 800136c:	69fb      	ldr	r3, [r7, #28]
 800136e:	2b0f      	cmp	r3, #15
 8001370:	f67f ae84 	bls.w	800107c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001374:	bf00      	nop
 8001376:	3724      	adds	r7, #36	; 0x24
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr
 8001380:	40023800 	.word	0x40023800
 8001384:	40013800 	.word	0x40013800
 8001388:	40020000 	.word	0x40020000
 800138c:	40020400 	.word	0x40020400
 8001390:	40020800 	.word	0x40020800
 8001394:	40020c00 	.word	0x40020c00
 8001398:	40021000 	.word	0x40021000
 800139c:	40021400 	.word	0x40021400
 80013a0:	40021800 	.word	0x40021800
 80013a4:	40021c00 	.word	0x40021c00
 80013a8:	40022000 	.word	0x40022000
 80013ac:	40022400 	.word	0x40022400
 80013b0:	40013c00 	.word	0x40013c00

080013b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
 80013bc:	460b      	mov	r3, r1
 80013be:	807b      	strh	r3, [r7, #2]
 80013c0:	4613      	mov	r3, r2
 80013c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013c4:	787b      	ldrb	r3, [r7, #1]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d003      	beq.n	80013d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013ca:	887a      	ldrh	r2, [r7, #2]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013d0:	e003      	b.n	80013da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013d2:	887b      	ldrh	r3, [r7, #2]
 80013d4:	041a      	lsls	r2, r3, #16
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	619a      	str	r2, [r3, #24]
}
 80013da:	bf00      	nop
 80013dc:	370c      	adds	r7, #12
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr

080013e6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80013e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013e8:	b08f      	sub	sp, #60	; 0x3c
 80013ea:	af0a      	add	r7, sp, #40	; 0x28
 80013ec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d101      	bne.n	80013f8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80013f4:	2301      	movs	r3, #1
 80013f6:	e10f      	b.n	8001618 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001404:	b2db      	uxtb	r3, r3
 8001406:	2b00      	cmp	r3, #0
 8001408:	d106      	bne.n	8001418 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2200      	movs	r2, #0
 800140e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001412:	6878      	ldr	r0, [r7, #4]
 8001414:	f004 fe2c 	bl	8006070 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2203      	movs	r2, #3
 800141c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001424:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001428:	2b00      	cmp	r3, #0
 800142a:	d102      	bne.n	8001432 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2200      	movs	r2, #0
 8001430:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4618      	mov	r0, r3
 8001438:	f001 fa4b 	bl	80028d2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	603b      	str	r3, [r7, #0]
 8001442:	687e      	ldr	r6, [r7, #4]
 8001444:	466d      	mov	r5, sp
 8001446:	f106 0410 	add.w	r4, r6, #16
 800144a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800144c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800144e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001450:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001452:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001456:	e885 0003 	stmia.w	r5, {r0, r1}
 800145a:	1d33      	adds	r3, r6, #4
 800145c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800145e:	6838      	ldr	r0, [r7, #0]
 8001460:	f001 f9d6 	bl	8002810 <USB_CoreInit>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d005      	beq.n	8001476 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2202      	movs	r2, #2
 800146e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001472:	2301      	movs	r3, #1
 8001474:	e0d0      	b.n	8001618 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	2100      	movs	r1, #0
 800147c:	4618      	mov	r0, r3
 800147e:	f001 fa39 	bl	80028f4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001482:	2300      	movs	r3, #0
 8001484:	73fb      	strb	r3, [r7, #15]
 8001486:	e04a      	b.n	800151e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001488:	7bfa      	ldrb	r2, [r7, #15]
 800148a:	6879      	ldr	r1, [r7, #4]
 800148c:	4613      	mov	r3, r2
 800148e:	00db      	lsls	r3, r3, #3
 8001490:	1a9b      	subs	r3, r3, r2
 8001492:	009b      	lsls	r3, r3, #2
 8001494:	440b      	add	r3, r1
 8001496:	333d      	adds	r3, #61	; 0x3d
 8001498:	2201      	movs	r2, #1
 800149a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800149c:	7bfa      	ldrb	r2, [r7, #15]
 800149e:	6879      	ldr	r1, [r7, #4]
 80014a0:	4613      	mov	r3, r2
 80014a2:	00db      	lsls	r3, r3, #3
 80014a4:	1a9b      	subs	r3, r3, r2
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	440b      	add	r3, r1
 80014aa:	333c      	adds	r3, #60	; 0x3c
 80014ac:	7bfa      	ldrb	r2, [r7, #15]
 80014ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80014b0:	7bfa      	ldrb	r2, [r7, #15]
 80014b2:	7bfb      	ldrb	r3, [r7, #15]
 80014b4:	b298      	uxth	r0, r3
 80014b6:	6879      	ldr	r1, [r7, #4]
 80014b8:	4613      	mov	r3, r2
 80014ba:	00db      	lsls	r3, r3, #3
 80014bc:	1a9b      	subs	r3, r3, r2
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	440b      	add	r3, r1
 80014c2:	3342      	adds	r3, #66	; 0x42
 80014c4:	4602      	mov	r2, r0
 80014c6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80014c8:	7bfa      	ldrb	r2, [r7, #15]
 80014ca:	6879      	ldr	r1, [r7, #4]
 80014cc:	4613      	mov	r3, r2
 80014ce:	00db      	lsls	r3, r3, #3
 80014d0:	1a9b      	subs	r3, r3, r2
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	440b      	add	r3, r1
 80014d6:	333f      	adds	r3, #63	; 0x3f
 80014d8:	2200      	movs	r2, #0
 80014da:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80014dc:	7bfa      	ldrb	r2, [r7, #15]
 80014de:	6879      	ldr	r1, [r7, #4]
 80014e0:	4613      	mov	r3, r2
 80014e2:	00db      	lsls	r3, r3, #3
 80014e4:	1a9b      	subs	r3, r3, r2
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	440b      	add	r3, r1
 80014ea:	3344      	adds	r3, #68	; 0x44
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80014f0:	7bfa      	ldrb	r2, [r7, #15]
 80014f2:	6879      	ldr	r1, [r7, #4]
 80014f4:	4613      	mov	r3, r2
 80014f6:	00db      	lsls	r3, r3, #3
 80014f8:	1a9b      	subs	r3, r3, r2
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	440b      	add	r3, r1
 80014fe:	3348      	adds	r3, #72	; 0x48
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001504:	7bfa      	ldrb	r2, [r7, #15]
 8001506:	6879      	ldr	r1, [r7, #4]
 8001508:	4613      	mov	r3, r2
 800150a:	00db      	lsls	r3, r3, #3
 800150c:	1a9b      	subs	r3, r3, r2
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	440b      	add	r3, r1
 8001512:	3350      	adds	r3, #80	; 0x50
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001518:	7bfb      	ldrb	r3, [r7, #15]
 800151a:	3301      	adds	r3, #1
 800151c:	73fb      	strb	r3, [r7, #15]
 800151e:	7bfa      	ldrb	r2, [r7, #15]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	429a      	cmp	r2, r3
 8001526:	d3af      	bcc.n	8001488 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001528:	2300      	movs	r3, #0
 800152a:	73fb      	strb	r3, [r7, #15]
 800152c:	e044      	b.n	80015b8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800152e:	7bfa      	ldrb	r2, [r7, #15]
 8001530:	6879      	ldr	r1, [r7, #4]
 8001532:	4613      	mov	r3, r2
 8001534:	00db      	lsls	r3, r3, #3
 8001536:	1a9b      	subs	r3, r3, r2
 8001538:	009b      	lsls	r3, r3, #2
 800153a:	440b      	add	r3, r1
 800153c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001540:	2200      	movs	r2, #0
 8001542:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001544:	7bfa      	ldrb	r2, [r7, #15]
 8001546:	6879      	ldr	r1, [r7, #4]
 8001548:	4613      	mov	r3, r2
 800154a:	00db      	lsls	r3, r3, #3
 800154c:	1a9b      	subs	r3, r3, r2
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	440b      	add	r3, r1
 8001552:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001556:	7bfa      	ldrb	r2, [r7, #15]
 8001558:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800155a:	7bfa      	ldrb	r2, [r7, #15]
 800155c:	6879      	ldr	r1, [r7, #4]
 800155e:	4613      	mov	r3, r2
 8001560:	00db      	lsls	r3, r3, #3
 8001562:	1a9b      	subs	r3, r3, r2
 8001564:	009b      	lsls	r3, r3, #2
 8001566:	440b      	add	r3, r1
 8001568:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800156c:	2200      	movs	r2, #0
 800156e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001570:	7bfa      	ldrb	r2, [r7, #15]
 8001572:	6879      	ldr	r1, [r7, #4]
 8001574:	4613      	mov	r3, r2
 8001576:	00db      	lsls	r3, r3, #3
 8001578:	1a9b      	subs	r3, r3, r2
 800157a:	009b      	lsls	r3, r3, #2
 800157c:	440b      	add	r3, r1
 800157e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001582:	2200      	movs	r2, #0
 8001584:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001586:	7bfa      	ldrb	r2, [r7, #15]
 8001588:	6879      	ldr	r1, [r7, #4]
 800158a:	4613      	mov	r3, r2
 800158c:	00db      	lsls	r3, r3, #3
 800158e:	1a9b      	subs	r3, r3, r2
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	440b      	add	r3, r1
 8001594:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001598:	2200      	movs	r2, #0
 800159a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800159c:	7bfa      	ldrb	r2, [r7, #15]
 800159e:	6879      	ldr	r1, [r7, #4]
 80015a0:	4613      	mov	r3, r2
 80015a2:	00db      	lsls	r3, r3, #3
 80015a4:	1a9b      	subs	r3, r3, r2
 80015a6:	009b      	lsls	r3, r3, #2
 80015a8:	440b      	add	r3, r1
 80015aa:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80015ae:	2200      	movs	r2, #0
 80015b0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015b2:	7bfb      	ldrb	r3, [r7, #15]
 80015b4:	3301      	adds	r3, #1
 80015b6:	73fb      	strb	r3, [r7, #15]
 80015b8:	7bfa      	ldrb	r2, [r7, #15]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	429a      	cmp	r2, r3
 80015c0:	d3b5      	bcc.n	800152e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	603b      	str	r3, [r7, #0]
 80015c8:	687e      	ldr	r6, [r7, #4]
 80015ca:	466d      	mov	r5, sp
 80015cc:	f106 0410 	add.w	r4, r6, #16
 80015d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015d8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80015dc:	e885 0003 	stmia.w	r5, {r0, r1}
 80015e0:	1d33      	adds	r3, r6, #4
 80015e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015e4:	6838      	ldr	r0, [r7, #0]
 80015e6:	f001 f9af 	bl	8002948 <USB_DevInit>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d005      	beq.n	80015fc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2202      	movs	r2, #2
 80015f4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80015f8:	2301      	movs	r3, #1
 80015fa:	e00d      	b.n	8001618 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2200      	movs	r2, #0
 8001600:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2201      	movs	r2, #1
 8001608:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4618      	mov	r0, r3
 8001612:	f001 fb6d 	bl	8002cf0 <USB_DevDisconnect>

  return HAL_OK;
 8001616:	2300      	movs	r3, #0
}
 8001618:	4618      	mov	r0, r3
 800161a:	3714      	adds	r7, #20
 800161c:	46bd      	mov	sp, r7
 800161e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001620 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b086      	sub	sp, #24
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d101      	bne.n	8001632 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800162e:	2301      	movs	r3, #1
 8001630:	e22d      	b.n	8001a8e <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 0301 	and.w	r3, r3, #1
 800163a:	2b00      	cmp	r3, #0
 800163c:	d075      	beq.n	800172a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800163e:	4ba3      	ldr	r3, [pc, #652]	; (80018cc <HAL_RCC_OscConfig+0x2ac>)
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	f003 030c 	and.w	r3, r3, #12
 8001646:	2b04      	cmp	r3, #4
 8001648:	d00c      	beq.n	8001664 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800164a:	4ba0      	ldr	r3, [pc, #640]	; (80018cc <HAL_RCC_OscConfig+0x2ac>)
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001652:	2b08      	cmp	r3, #8
 8001654:	d112      	bne.n	800167c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001656:	4b9d      	ldr	r3, [pc, #628]	; (80018cc <HAL_RCC_OscConfig+0x2ac>)
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800165e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001662:	d10b      	bne.n	800167c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001664:	4b99      	ldr	r3, [pc, #612]	; (80018cc <HAL_RCC_OscConfig+0x2ac>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800166c:	2b00      	cmp	r3, #0
 800166e:	d05b      	beq.n	8001728 <HAL_RCC_OscConfig+0x108>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d157      	bne.n	8001728 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001678:	2301      	movs	r3, #1
 800167a:	e208      	b.n	8001a8e <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001684:	d106      	bne.n	8001694 <HAL_RCC_OscConfig+0x74>
 8001686:	4a91      	ldr	r2, [pc, #580]	; (80018cc <HAL_RCC_OscConfig+0x2ac>)
 8001688:	4b90      	ldr	r3, [pc, #576]	; (80018cc <HAL_RCC_OscConfig+0x2ac>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001690:	6013      	str	r3, [r2, #0]
 8001692:	e01d      	b.n	80016d0 <HAL_RCC_OscConfig+0xb0>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800169c:	d10c      	bne.n	80016b8 <HAL_RCC_OscConfig+0x98>
 800169e:	4a8b      	ldr	r2, [pc, #556]	; (80018cc <HAL_RCC_OscConfig+0x2ac>)
 80016a0:	4b8a      	ldr	r3, [pc, #552]	; (80018cc <HAL_RCC_OscConfig+0x2ac>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016a8:	6013      	str	r3, [r2, #0]
 80016aa:	4a88      	ldr	r2, [pc, #544]	; (80018cc <HAL_RCC_OscConfig+0x2ac>)
 80016ac:	4b87      	ldr	r3, [pc, #540]	; (80018cc <HAL_RCC_OscConfig+0x2ac>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016b4:	6013      	str	r3, [r2, #0]
 80016b6:	e00b      	b.n	80016d0 <HAL_RCC_OscConfig+0xb0>
 80016b8:	4a84      	ldr	r2, [pc, #528]	; (80018cc <HAL_RCC_OscConfig+0x2ac>)
 80016ba:	4b84      	ldr	r3, [pc, #528]	; (80018cc <HAL_RCC_OscConfig+0x2ac>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016c2:	6013      	str	r3, [r2, #0]
 80016c4:	4a81      	ldr	r2, [pc, #516]	; (80018cc <HAL_RCC_OscConfig+0x2ac>)
 80016c6:	4b81      	ldr	r3, [pc, #516]	; (80018cc <HAL_RCC_OscConfig+0x2ac>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d013      	beq.n	8001700 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d8:	f7fe ff48 	bl	800056c <HAL_GetTick>
 80016dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016de:	e008      	b.n	80016f2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016e0:	f7fe ff44 	bl	800056c <HAL_GetTick>
 80016e4:	4602      	mov	r2, r0
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	2b64      	cmp	r3, #100	; 0x64
 80016ec:	d901      	bls.n	80016f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80016ee:	2303      	movs	r3, #3
 80016f0:	e1cd      	b.n	8001a8e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016f2:	4b76      	ldr	r3, [pc, #472]	; (80018cc <HAL_RCC_OscConfig+0x2ac>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d0f0      	beq.n	80016e0 <HAL_RCC_OscConfig+0xc0>
 80016fe:	e014      	b.n	800172a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001700:	f7fe ff34 	bl	800056c <HAL_GetTick>
 8001704:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001706:	e008      	b.n	800171a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001708:	f7fe ff30 	bl	800056c <HAL_GetTick>
 800170c:	4602      	mov	r2, r0
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	2b64      	cmp	r3, #100	; 0x64
 8001714:	d901      	bls.n	800171a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001716:	2303      	movs	r3, #3
 8001718:	e1b9      	b.n	8001a8e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800171a:	4b6c      	ldr	r3, [pc, #432]	; (80018cc <HAL_RCC_OscConfig+0x2ac>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001722:	2b00      	cmp	r3, #0
 8001724:	d1f0      	bne.n	8001708 <HAL_RCC_OscConfig+0xe8>
 8001726:	e000      	b.n	800172a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001728:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 0302 	and.w	r3, r3, #2
 8001732:	2b00      	cmp	r3, #0
 8001734:	d063      	beq.n	80017fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001736:	4b65      	ldr	r3, [pc, #404]	; (80018cc <HAL_RCC_OscConfig+0x2ac>)
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	f003 030c 	and.w	r3, r3, #12
 800173e:	2b00      	cmp	r3, #0
 8001740:	d00b      	beq.n	800175a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001742:	4b62      	ldr	r3, [pc, #392]	; (80018cc <HAL_RCC_OscConfig+0x2ac>)
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800174a:	2b08      	cmp	r3, #8
 800174c:	d11c      	bne.n	8001788 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800174e:	4b5f      	ldr	r3, [pc, #380]	; (80018cc <HAL_RCC_OscConfig+0x2ac>)
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001756:	2b00      	cmp	r3, #0
 8001758:	d116      	bne.n	8001788 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800175a:	4b5c      	ldr	r3, [pc, #368]	; (80018cc <HAL_RCC_OscConfig+0x2ac>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f003 0302 	and.w	r3, r3, #2
 8001762:	2b00      	cmp	r3, #0
 8001764:	d005      	beq.n	8001772 <HAL_RCC_OscConfig+0x152>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	68db      	ldr	r3, [r3, #12]
 800176a:	2b01      	cmp	r3, #1
 800176c:	d001      	beq.n	8001772 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	e18d      	b.n	8001a8e <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001772:	4956      	ldr	r1, [pc, #344]	; (80018cc <HAL_RCC_OscConfig+0x2ac>)
 8001774:	4b55      	ldr	r3, [pc, #340]	; (80018cc <HAL_RCC_OscConfig+0x2ac>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	691b      	ldr	r3, [r3, #16]
 8001780:	00db      	lsls	r3, r3, #3
 8001782:	4313      	orrs	r3, r2
 8001784:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001786:	e03a      	b.n	80017fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	68db      	ldr	r3, [r3, #12]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d020      	beq.n	80017d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001790:	4b4f      	ldr	r3, [pc, #316]	; (80018d0 <HAL_RCC_OscConfig+0x2b0>)
 8001792:	2201      	movs	r2, #1
 8001794:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001796:	f7fe fee9 	bl	800056c <HAL_GetTick>
 800179a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800179c:	e008      	b.n	80017b0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800179e:	f7fe fee5 	bl	800056c <HAL_GetTick>
 80017a2:	4602      	mov	r2, r0
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	1ad3      	subs	r3, r2, r3
 80017a8:	2b02      	cmp	r3, #2
 80017aa:	d901      	bls.n	80017b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80017ac:	2303      	movs	r3, #3
 80017ae:	e16e      	b.n	8001a8e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017b0:	4b46      	ldr	r3, [pc, #280]	; (80018cc <HAL_RCC_OscConfig+0x2ac>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 0302 	and.w	r3, r3, #2
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d0f0      	beq.n	800179e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017bc:	4943      	ldr	r1, [pc, #268]	; (80018cc <HAL_RCC_OscConfig+0x2ac>)
 80017be:	4b43      	ldr	r3, [pc, #268]	; (80018cc <HAL_RCC_OscConfig+0x2ac>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	691b      	ldr	r3, [r3, #16]
 80017ca:	00db      	lsls	r3, r3, #3
 80017cc:	4313      	orrs	r3, r2
 80017ce:	600b      	str	r3, [r1, #0]
 80017d0:	e015      	b.n	80017fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017d2:	4b3f      	ldr	r3, [pc, #252]	; (80018d0 <HAL_RCC_OscConfig+0x2b0>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017d8:	f7fe fec8 	bl	800056c <HAL_GetTick>
 80017dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017de:	e008      	b.n	80017f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017e0:	f7fe fec4 	bl	800056c <HAL_GetTick>
 80017e4:	4602      	mov	r2, r0
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	2b02      	cmp	r3, #2
 80017ec:	d901      	bls.n	80017f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80017ee:	2303      	movs	r3, #3
 80017f0:	e14d      	b.n	8001a8e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017f2:	4b36      	ldr	r3, [pc, #216]	; (80018cc <HAL_RCC_OscConfig+0x2ac>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 0302 	and.w	r3, r3, #2
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d1f0      	bne.n	80017e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0308 	and.w	r3, r3, #8
 8001806:	2b00      	cmp	r3, #0
 8001808:	d030      	beq.n	800186c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	695b      	ldr	r3, [r3, #20]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d016      	beq.n	8001840 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001812:	4b30      	ldr	r3, [pc, #192]	; (80018d4 <HAL_RCC_OscConfig+0x2b4>)
 8001814:	2201      	movs	r2, #1
 8001816:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001818:	f7fe fea8 	bl	800056c <HAL_GetTick>
 800181c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800181e:	e008      	b.n	8001832 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001820:	f7fe fea4 	bl	800056c <HAL_GetTick>
 8001824:	4602      	mov	r2, r0
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	2b02      	cmp	r3, #2
 800182c:	d901      	bls.n	8001832 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800182e:	2303      	movs	r3, #3
 8001830:	e12d      	b.n	8001a8e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001832:	4b26      	ldr	r3, [pc, #152]	; (80018cc <HAL_RCC_OscConfig+0x2ac>)
 8001834:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001836:	f003 0302 	and.w	r3, r3, #2
 800183a:	2b00      	cmp	r3, #0
 800183c:	d0f0      	beq.n	8001820 <HAL_RCC_OscConfig+0x200>
 800183e:	e015      	b.n	800186c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001840:	4b24      	ldr	r3, [pc, #144]	; (80018d4 <HAL_RCC_OscConfig+0x2b4>)
 8001842:	2200      	movs	r2, #0
 8001844:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001846:	f7fe fe91 	bl	800056c <HAL_GetTick>
 800184a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800184c:	e008      	b.n	8001860 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800184e:	f7fe fe8d 	bl	800056c <HAL_GetTick>
 8001852:	4602      	mov	r2, r0
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	1ad3      	subs	r3, r2, r3
 8001858:	2b02      	cmp	r3, #2
 800185a:	d901      	bls.n	8001860 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800185c:	2303      	movs	r3, #3
 800185e:	e116      	b.n	8001a8e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001860:	4b1a      	ldr	r3, [pc, #104]	; (80018cc <HAL_RCC_OscConfig+0x2ac>)
 8001862:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001864:	f003 0302 	and.w	r3, r3, #2
 8001868:	2b00      	cmp	r3, #0
 800186a:	d1f0      	bne.n	800184e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 0304 	and.w	r3, r3, #4
 8001874:	2b00      	cmp	r3, #0
 8001876:	f000 80a0 	beq.w	80019ba <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800187a:	2300      	movs	r3, #0
 800187c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800187e:	4b13      	ldr	r3, [pc, #76]	; (80018cc <HAL_RCC_OscConfig+0x2ac>)
 8001880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001882:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001886:	2b00      	cmp	r3, #0
 8001888:	d10f      	bne.n	80018aa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800188a:	2300      	movs	r3, #0
 800188c:	60fb      	str	r3, [r7, #12]
 800188e:	4a0f      	ldr	r2, [pc, #60]	; (80018cc <HAL_RCC_OscConfig+0x2ac>)
 8001890:	4b0e      	ldr	r3, [pc, #56]	; (80018cc <HAL_RCC_OscConfig+0x2ac>)
 8001892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001894:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001898:	6413      	str	r3, [r2, #64]	; 0x40
 800189a:	4b0c      	ldr	r3, [pc, #48]	; (80018cc <HAL_RCC_OscConfig+0x2ac>)
 800189c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018a2:	60fb      	str	r3, [r7, #12]
 80018a4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80018a6:	2301      	movs	r3, #1
 80018a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018aa:	4b0b      	ldr	r3, [pc, #44]	; (80018d8 <HAL_RCC_OscConfig+0x2b8>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d121      	bne.n	80018fa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018b6:	4a08      	ldr	r2, [pc, #32]	; (80018d8 <HAL_RCC_OscConfig+0x2b8>)
 80018b8:	4b07      	ldr	r3, [pc, #28]	; (80018d8 <HAL_RCC_OscConfig+0x2b8>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018c2:	f7fe fe53 	bl	800056c <HAL_GetTick>
 80018c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018c8:	e011      	b.n	80018ee <HAL_RCC_OscConfig+0x2ce>
 80018ca:	bf00      	nop
 80018cc:	40023800 	.word	0x40023800
 80018d0:	42470000 	.word	0x42470000
 80018d4:	42470e80 	.word	0x42470e80
 80018d8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018dc:	f7fe fe46 	bl	800056c <HAL_GetTick>
 80018e0:	4602      	mov	r2, r0
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	d901      	bls.n	80018ee <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80018ea:	2303      	movs	r3, #3
 80018ec:	e0cf      	b.n	8001a8e <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018ee:	4b6a      	ldr	r3, [pc, #424]	; (8001a98 <HAL_RCC_OscConfig+0x478>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d0f0      	beq.n	80018dc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d106      	bne.n	8001910 <HAL_RCC_OscConfig+0x2f0>
 8001902:	4a66      	ldr	r2, [pc, #408]	; (8001a9c <HAL_RCC_OscConfig+0x47c>)
 8001904:	4b65      	ldr	r3, [pc, #404]	; (8001a9c <HAL_RCC_OscConfig+0x47c>)
 8001906:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001908:	f043 0301 	orr.w	r3, r3, #1
 800190c:	6713      	str	r3, [r2, #112]	; 0x70
 800190e:	e01c      	b.n	800194a <HAL_RCC_OscConfig+0x32a>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	2b05      	cmp	r3, #5
 8001916:	d10c      	bne.n	8001932 <HAL_RCC_OscConfig+0x312>
 8001918:	4a60      	ldr	r2, [pc, #384]	; (8001a9c <HAL_RCC_OscConfig+0x47c>)
 800191a:	4b60      	ldr	r3, [pc, #384]	; (8001a9c <HAL_RCC_OscConfig+0x47c>)
 800191c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800191e:	f043 0304 	orr.w	r3, r3, #4
 8001922:	6713      	str	r3, [r2, #112]	; 0x70
 8001924:	4a5d      	ldr	r2, [pc, #372]	; (8001a9c <HAL_RCC_OscConfig+0x47c>)
 8001926:	4b5d      	ldr	r3, [pc, #372]	; (8001a9c <HAL_RCC_OscConfig+0x47c>)
 8001928:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800192a:	f043 0301 	orr.w	r3, r3, #1
 800192e:	6713      	str	r3, [r2, #112]	; 0x70
 8001930:	e00b      	b.n	800194a <HAL_RCC_OscConfig+0x32a>
 8001932:	4a5a      	ldr	r2, [pc, #360]	; (8001a9c <HAL_RCC_OscConfig+0x47c>)
 8001934:	4b59      	ldr	r3, [pc, #356]	; (8001a9c <HAL_RCC_OscConfig+0x47c>)
 8001936:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001938:	f023 0301 	bic.w	r3, r3, #1
 800193c:	6713      	str	r3, [r2, #112]	; 0x70
 800193e:	4a57      	ldr	r2, [pc, #348]	; (8001a9c <HAL_RCC_OscConfig+0x47c>)
 8001940:	4b56      	ldr	r3, [pc, #344]	; (8001a9c <HAL_RCC_OscConfig+0x47c>)
 8001942:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001944:	f023 0304 	bic.w	r3, r3, #4
 8001948:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d015      	beq.n	800197e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001952:	f7fe fe0b 	bl	800056c <HAL_GetTick>
 8001956:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001958:	e00a      	b.n	8001970 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800195a:	f7fe fe07 	bl	800056c <HAL_GetTick>
 800195e:	4602      	mov	r2, r0
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	1ad3      	subs	r3, r2, r3
 8001964:	f241 3288 	movw	r2, #5000	; 0x1388
 8001968:	4293      	cmp	r3, r2
 800196a:	d901      	bls.n	8001970 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800196c:	2303      	movs	r3, #3
 800196e:	e08e      	b.n	8001a8e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001970:	4b4a      	ldr	r3, [pc, #296]	; (8001a9c <HAL_RCC_OscConfig+0x47c>)
 8001972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001974:	f003 0302 	and.w	r3, r3, #2
 8001978:	2b00      	cmp	r3, #0
 800197a:	d0ee      	beq.n	800195a <HAL_RCC_OscConfig+0x33a>
 800197c:	e014      	b.n	80019a8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800197e:	f7fe fdf5 	bl	800056c <HAL_GetTick>
 8001982:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001984:	e00a      	b.n	800199c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001986:	f7fe fdf1 	bl	800056c <HAL_GetTick>
 800198a:	4602      	mov	r2, r0
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	1ad3      	subs	r3, r2, r3
 8001990:	f241 3288 	movw	r2, #5000	; 0x1388
 8001994:	4293      	cmp	r3, r2
 8001996:	d901      	bls.n	800199c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001998:	2303      	movs	r3, #3
 800199a:	e078      	b.n	8001a8e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800199c:	4b3f      	ldr	r3, [pc, #252]	; (8001a9c <HAL_RCC_OscConfig+0x47c>)
 800199e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019a0:	f003 0302 	and.w	r3, r3, #2
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d1ee      	bne.n	8001986 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80019a8:	7dfb      	ldrb	r3, [r7, #23]
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d105      	bne.n	80019ba <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019ae:	4a3b      	ldr	r2, [pc, #236]	; (8001a9c <HAL_RCC_OscConfig+0x47c>)
 80019b0:	4b3a      	ldr	r3, [pc, #232]	; (8001a9c <HAL_RCC_OscConfig+0x47c>)
 80019b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019b8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	699b      	ldr	r3, [r3, #24]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d064      	beq.n	8001a8c <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80019c2:	4b36      	ldr	r3, [pc, #216]	; (8001a9c <HAL_RCC_OscConfig+0x47c>)
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	f003 030c 	and.w	r3, r3, #12
 80019ca:	2b08      	cmp	r3, #8
 80019cc:	d05c      	beq.n	8001a88 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	699b      	ldr	r3, [r3, #24]
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	d141      	bne.n	8001a5a <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019d6:	4b32      	ldr	r3, [pc, #200]	; (8001aa0 <HAL_RCC_OscConfig+0x480>)
 80019d8:	2200      	movs	r2, #0
 80019da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019dc:	f7fe fdc6 	bl	800056c <HAL_GetTick>
 80019e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019e2:	e008      	b.n	80019f6 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019e4:	f7fe fdc2 	bl	800056c <HAL_GetTick>
 80019e8:	4602      	mov	r2, r0
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	2b02      	cmp	r3, #2
 80019f0:	d901      	bls.n	80019f6 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 80019f2:	2303      	movs	r3, #3
 80019f4:	e04b      	b.n	8001a8e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019f6:	4b29      	ldr	r3, [pc, #164]	; (8001a9c <HAL_RCC_OscConfig+0x47c>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d1f0      	bne.n	80019e4 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a02:	4926      	ldr	r1, [pc, #152]	; (8001a9c <HAL_RCC_OscConfig+0x47c>)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	69da      	ldr	r2, [r3, #28]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6a1b      	ldr	r3, [r3, #32]
 8001a0c:	431a      	orrs	r2, r3
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a12:	019b      	lsls	r3, r3, #6
 8001a14:	431a      	orrs	r2, r3
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a1a:	085b      	lsrs	r3, r3, #1
 8001a1c:	3b01      	subs	r3, #1
 8001a1e:	041b      	lsls	r3, r3, #16
 8001a20:	431a      	orrs	r2, r3
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a26:	061b      	lsls	r3, r3, #24
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a2c:	4b1c      	ldr	r3, [pc, #112]	; (8001aa0 <HAL_RCC_OscConfig+0x480>)
 8001a2e:	2201      	movs	r2, #1
 8001a30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a32:	f7fe fd9b 	bl	800056c <HAL_GetTick>
 8001a36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a38:	e008      	b.n	8001a4c <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a3a:	f7fe fd97 	bl	800056c <HAL_GetTick>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	1ad3      	subs	r3, r2, r3
 8001a44:	2b02      	cmp	r3, #2
 8001a46:	d901      	bls.n	8001a4c <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8001a48:	2303      	movs	r3, #3
 8001a4a:	e020      	b.n	8001a8e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a4c:	4b13      	ldr	r3, [pc, #76]	; (8001a9c <HAL_RCC_OscConfig+0x47c>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d0f0      	beq.n	8001a3a <HAL_RCC_OscConfig+0x41a>
 8001a58:	e018      	b.n	8001a8c <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a5a:	4b11      	ldr	r3, [pc, #68]	; (8001aa0 <HAL_RCC_OscConfig+0x480>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a60:	f7fe fd84 	bl	800056c <HAL_GetTick>
 8001a64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a66:	e008      	b.n	8001a7a <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a68:	f7fe fd80 	bl	800056c <HAL_GetTick>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	2b02      	cmp	r3, #2
 8001a74:	d901      	bls.n	8001a7a <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8001a76:	2303      	movs	r3, #3
 8001a78:	e009      	b.n	8001a8e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a7a:	4b08      	ldr	r3, [pc, #32]	; (8001a9c <HAL_RCC_OscConfig+0x47c>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d1f0      	bne.n	8001a68 <HAL_RCC_OscConfig+0x448>
 8001a86:	e001      	b.n	8001a8c <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e000      	b.n	8001a8e <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8001a8c:	2300      	movs	r3, #0
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3718      	adds	r7, #24
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	40007000 	.word	0x40007000
 8001a9c:	40023800 	.word	0x40023800
 8001aa0:	42470060 	.word	0x42470060

08001aa4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b084      	sub	sp, #16
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
 8001aac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d101      	bne.n	8001ab8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	e0ca      	b.n	8001c4e <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ab8:	4b67      	ldr	r3, [pc, #412]	; (8001c58 <HAL_RCC_ClockConfig+0x1b4>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 020f 	and.w	r2, r3, #15
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	d20c      	bcs.n	8001ae0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ac6:	4b64      	ldr	r3, [pc, #400]	; (8001c58 <HAL_RCC_ClockConfig+0x1b4>)
 8001ac8:	683a      	ldr	r2, [r7, #0]
 8001aca:	b2d2      	uxtb	r2, r2
 8001acc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ace:	4b62      	ldr	r3, [pc, #392]	; (8001c58 <HAL_RCC_ClockConfig+0x1b4>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 020f 	and.w	r2, r3, #15
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d001      	beq.n	8001ae0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	e0b6      	b.n	8001c4e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 0302 	and.w	r3, r3, #2
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d020      	beq.n	8001b2e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 0304 	and.w	r3, r3, #4
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d005      	beq.n	8001b04 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001af8:	4a58      	ldr	r2, [pc, #352]	; (8001c5c <HAL_RCC_ClockConfig+0x1b8>)
 8001afa:	4b58      	ldr	r3, [pc, #352]	; (8001c5c <HAL_RCC_ClockConfig+0x1b8>)
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001b02:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 0308 	and.w	r3, r3, #8
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d005      	beq.n	8001b1c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b10:	4a52      	ldr	r2, [pc, #328]	; (8001c5c <HAL_RCC_ClockConfig+0x1b8>)
 8001b12:	4b52      	ldr	r3, [pc, #328]	; (8001c5c <HAL_RCC_ClockConfig+0x1b8>)
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001b1a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b1c:	494f      	ldr	r1, [pc, #316]	; (8001c5c <HAL_RCC_ClockConfig+0x1b8>)
 8001b1e:	4b4f      	ldr	r3, [pc, #316]	; (8001c5c <HAL_RCC_ClockConfig+0x1b8>)
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 0301 	and.w	r3, r3, #1
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d044      	beq.n	8001bc4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d107      	bne.n	8001b52 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b42:	4b46      	ldr	r3, [pc, #280]	; (8001c5c <HAL_RCC_ClockConfig+0x1b8>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d119      	bne.n	8001b82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e07d      	b.n	8001c4e <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	d003      	beq.n	8001b62 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b5e:	2b03      	cmp	r3, #3
 8001b60:	d107      	bne.n	8001b72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b62:	4b3e      	ldr	r3, [pc, #248]	; (8001c5c <HAL_RCC_ClockConfig+0x1b8>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d109      	bne.n	8001b82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e06d      	b.n	8001c4e <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b72:	4b3a      	ldr	r3, [pc, #232]	; (8001c5c <HAL_RCC_ClockConfig+0x1b8>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 0302 	and.w	r3, r3, #2
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d101      	bne.n	8001b82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e065      	b.n	8001c4e <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b82:	4936      	ldr	r1, [pc, #216]	; (8001c5c <HAL_RCC_ClockConfig+0x1b8>)
 8001b84:	4b35      	ldr	r3, [pc, #212]	; (8001c5c <HAL_RCC_ClockConfig+0x1b8>)
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	f023 0203 	bic.w	r2, r3, #3
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	4313      	orrs	r3, r2
 8001b92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b94:	f7fe fcea 	bl	800056c <HAL_GetTick>
 8001b98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b9a:	e00a      	b.n	8001bb2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b9c:	f7fe fce6 	bl	800056c <HAL_GetTick>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d901      	bls.n	8001bb2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	e04d      	b.n	8001c4e <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bb2:	4b2a      	ldr	r3, [pc, #168]	; (8001c5c <HAL_RCC_ClockConfig+0x1b8>)
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	f003 020c 	and.w	r2, r3, #12
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d1eb      	bne.n	8001b9c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bc4:	4b24      	ldr	r3, [pc, #144]	; (8001c58 <HAL_RCC_ClockConfig+0x1b4>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f003 020f 	and.w	r2, r3, #15
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	d90c      	bls.n	8001bec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bd2:	4b21      	ldr	r3, [pc, #132]	; (8001c58 <HAL_RCC_ClockConfig+0x1b4>)
 8001bd4:	683a      	ldr	r2, [r7, #0]
 8001bd6:	b2d2      	uxtb	r2, r2
 8001bd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bda:	4b1f      	ldr	r3, [pc, #124]	; (8001c58 <HAL_RCC_ClockConfig+0x1b4>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 020f 	and.w	r2, r3, #15
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d001      	beq.n	8001bec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e030      	b.n	8001c4e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 0304 	and.w	r3, r3, #4
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d008      	beq.n	8001c0a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bf8:	4918      	ldr	r1, [pc, #96]	; (8001c5c <HAL_RCC_ClockConfig+0x1b8>)
 8001bfa:	4b18      	ldr	r3, [pc, #96]	; (8001c5c <HAL_RCC_ClockConfig+0x1b8>)
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	68db      	ldr	r3, [r3, #12]
 8001c06:	4313      	orrs	r3, r2
 8001c08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 0308 	and.w	r3, r3, #8
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d009      	beq.n	8001c2a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c16:	4911      	ldr	r1, [pc, #68]	; (8001c5c <HAL_RCC_ClockConfig+0x1b8>)
 8001c18:	4b10      	ldr	r3, [pc, #64]	; (8001c5c <HAL_RCC_ClockConfig+0x1b8>)
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	691b      	ldr	r3, [r3, #16]
 8001c24:	00db      	lsls	r3, r3, #3
 8001c26:	4313      	orrs	r3, r2
 8001c28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c2a:	f000 f81d 	bl	8001c68 <HAL_RCC_GetSysClockFreq>
 8001c2e:	4601      	mov	r1, r0
 8001c30:	4b0a      	ldr	r3, [pc, #40]	; (8001c5c <HAL_RCC_ClockConfig+0x1b8>)
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	091b      	lsrs	r3, r3, #4
 8001c36:	f003 030f 	and.w	r3, r3, #15
 8001c3a:	4a09      	ldr	r2, [pc, #36]	; (8001c60 <HAL_RCC_ClockConfig+0x1bc>)
 8001c3c:	5cd3      	ldrb	r3, [r2, r3]
 8001c3e:	fa21 f303 	lsr.w	r3, r1, r3
 8001c42:	4a08      	ldr	r2, [pc, #32]	; (8001c64 <HAL_RCC_ClockConfig+0x1c0>)
 8001c44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8001c46:	2000      	movs	r0, #0
 8001c48:	f003 fee0 	bl	8005a0c <HAL_InitTick>

  return HAL_OK;
 8001c4c:	2300      	movs	r3, #0
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3710      	adds	r7, #16
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	40023c00 	.word	0x40023c00
 8001c5c:	40023800 	.word	0x40023800
 8001c60:	08006310 	.word	0x08006310
 8001c64:	20000008 	.word	0x20000008

08001c68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c6c:	b08f      	sub	sp, #60	; 0x3c
 8001c6e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001c70:	2300      	movs	r3, #0
 8001c72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c74:	2300      	movs	r3, #0
 8001c76:	637b      	str	r3, [r7, #52]	; 0x34
 8001c78:	2300      	movs	r3, #0
 8001c7a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t sysclockfreq = 0U;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	633b      	str	r3, [r7, #48]	; 0x30

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c80:	4b62      	ldr	r3, [pc, #392]	; (8001e0c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	f003 030c 	and.w	r3, r3, #12
 8001c88:	2b04      	cmp	r3, #4
 8001c8a:	d007      	beq.n	8001c9c <HAL_RCC_GetSysClockFreq+0x34>
 8001c8c:	2b08      	cmp	r3, #8
 8001c8e:	d008      	beq.n	8001ca2 <HAL_RCC_GetSysClockFreq+0x3a>
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	f040 80b2 	bne.w	8001dfa <HAL_RCC_GetSysClockFreq+0x192>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c96:	4b5e      	ldr	r3, [pc, #376]	; (8001e10 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001c98:	633b      	str	r3, [r7, #48]	; 0x30
       break;
 8001c9a:	e0b1      	b.n	8001e00 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c9c:	4b5d      	ldr	r3, [pc, #372]	; (8001e14 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001c9e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001ca0:	e0ae      	b.n	8001e00 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ca2:	4b5a      	ldr	r3, [pc, #360]	; (8001e0c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001caa:	62fb      	str	r3, [r7, #44]	; 0x2c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001cac:	4b57      	ldr	r3, [pc, #348]	; (8001e0c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d04e      	beq.n	8001d56 <HAL_RCC_GetSysClockFreq+0xee>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cb8:	4b54      	ldr	r3, [pc, #336]	; (8001e0c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	099b      	lsrs	r3, r3, #6
 8001cbe:	f04f 0400 	mov.w	r4, #0
 8001cc2:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001cc6:	f04f 0200 	mov.w	r2, #0
 8001cca:	ea01 0103 	and.w	r1, r1, r3
 8001cce:	ea02 0204 	and.w	r2, r2, r4
 8001cd2:	460b      	mov	r3, r1
 8001cd4:	4614      	mov	r4, r2
 8001cd6:	0160      	lsls	r0, r4, #5
 8001cd8:	6278      	str	r0, [r7, #36]	; 0x24
 8001cda:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001cdc:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8001ce0:	6278      	str	r0, [r7, #36]	; 0x24
 8001ce2:	015b      	lsls	r3, r3, #5
 8001ce4:	623b      	str	r3, [r7, #32]
 8001ce6:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001cea:	1a5b      	subs	r3, r3, r1
 8001cec:	eb64 0402 	sbc.w	r4, r4, r2
 8001cf0:	ea4f 1984 	mov.w	r9, r4, lsl #6
 8001cf4:	ea49 6993 	orr.w	r9, r9, r3, lsr #26
 8001cf8:	ea4f 1883 	mov.w	r8, r3, lsl #6
 8001cfc:	ebb8 0803 	subs.w	r8, r8, r3
 8001d00:	eb69 0904 	sbc.w	r9, r9, r4
 8001d04:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001d08:	61fb      	str	r3, [r7, #28]
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001d10:	61fb      	str	r3, [r7, #28]
 8001d12:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8001d16:	61bb      	str	r3, [r7, #24]
 8001d18:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001d1c:	eb18 0801 	adds.w	r8, r8, r1
 8001d20:	eb49 0902 	adc.w	r9, r9, r2
 8001d24:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8001d28:	617b      	str	r3, [r7, #20]
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8001d30:	617b      	str	r3, [r7, #20]
 8001d32:	ea4f 2348 	mov.w	r3, r8, lsl #9
 8001d36:	613b      	str	r3, [r7, #16]
 8001d38:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001d3c:	4640      	mov	r0, r8
 8001d3e:	4649      	mov	r1, r9
 8001d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d42:	f04f 0400 	mov.w	r4, #0
 8001d46:	461a      	mov	r2, r3
 8001d48:	4623      	mov	r3, r4
 8001d4a:	f7fe fa51 	bl	80001f0 <__aeabi_uldivmod>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	460c      	mov	r4, r1
 8001d52:	637b      	str	r3, [r7, #52]	; 0x34
 8001d54:	e043      	b.n	8001dde <HAL_RCC_GetSysClockFreq+0x176>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d56:	4b2d      	ldr	r3, [pc, #180]	; (8001e0c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	099b      	lsrs	r3, r3, #6
 8001d5c:	f04f 0400 	mov.w	r4, #0
 8001d60:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001d64:	f04f 0200 	mov.w	r2, #0
 8001d68:	ea01 0103 	and.w	r1, r1, r3
 8001d6c:	ea02 0204 	and.w	r2, r2, r4
 8001d70:	460b      	mov	r3, r1
 8001d72:	4614      	mov	r4, r2
 8001d74:	0160      	lsls	r0, r4, #5
 8001d76:	60f8      	str	r0, [r7, #12]
 8001d78:	68f8      	ldr	r0, [r7, #12]
 8001d7a:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8001d7e:	60f8      	str	r0, [r7, #12]
 8001d80:	015b      	lsls	r3, r3, #5
 8001d82:	60bb      	str	r3, [r7, #8]
 8001d84:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001d88:	1a5b      	subs	r3, r3, r1
 8001d8a:	eb64 0402 	sbc.w	r4, r4, r2
 8001d8e:	01a6      	lsls	r6, r4, #6
 8001d90:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 8001d94:	019d      	lsls	r5, r3, #6
 8001d96:	1aed      	subs	r5, r5, r3
 8001d98:	eb66 0604 	sbc.w	r6, r6, r4
 8001d9c:	00f3      	lsls	r3, r6, #3
 8001d9e:	607b      	str	r3, [r7, #4]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8001da6:	607b      	str	r3, [r7, #4]
 8001da8:	00eb      	lsls	r3, r5, #3
 8001daa:	603b      	str	r3, [r7, #0]
 8001dac:	e897 0060 	ldmia.w	r7, {r5, r6}
 8001db0:	186d      	adds	r5, r5, r1
 8001db2:	eb46 0602 	adc.w	r6, r6, r2
 8001db6:	ea4f 2b86 	mov.w	fp, r6, lsl #10
 8001dba:	ea4b 5b95 	orr.w	fp, fp, r5, lsr #22
 8001dbe:	ea4f 2a85 	mov.w	sl, r5, lsl #10
 8001dc2:	4655      	mov	r5, sl
 8001dc4:	465e      	mov	r6, fp
 8001dc6:	4628      	mov	r0, r5
 8001dc8:	4631      	mov	r1, r6
 8001dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dcc:	f04f 0400 	mov.w	r4, #0
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	4623      	mov	r3, r4
 8001dd4:	f7fe fa0c 	bl	80001f0 <__aeabi_uldivmod>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	460c      	mov	r4, r1
 8001ddc:	637b      	str	r3, [r7, #52]	; 0x34
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001dde:	4b0b      	ldr	r3, [pc, #44]	; (8001e0c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	0c1b      	lsrs	r3, r3, #16
 8001de4:	f003 0303 	and.w	r3, r3, #3
 8001de8:	3301      	adds	r3, #1
 8001dea:	005b      	lsls	r3, r3, #1
 8001dec:	62bb      	str	r3, [r7, #40]	; 0x28

      sysclockfreq = pllvco/pllp;
 8001dee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001df2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001df6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001df8:	e002      	b.n	8001e00 <HAL_RCC_GetSysClockFreq+0x198>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001dfa:	4b05      	ldr	r3, [pc, #20]	; (8001e10 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001dfc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001dfe:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	373c      	adds	r7, #60	; 0x3c
 8001e06:	46bd      	mov	sp, r7
 8001e08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001e0c:	40023800 	.word	0x40023800
 8001e10:	00f42400 	.word	0x00f42400
 8001e14:	007a1200 	.word	0x007a1200

08001e18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e1c:	4b03      	ldr	r3, [pc, #12]	; (8001e2c <HAL_RCC_GetHCLKFreq+0x14>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
 8001e2a:	bf00      	nop
 8001e2c:	20000008 	.word	0x20000008

08001e30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001e34:	f7ff fff0 	bl	8001e18 <HAL_RCC_GetHCLKFreq>
 8001e38:	4601      	mov	r1, r0
 8001e3a:	4b05      	ldr	r3, [pc, #20]	; (8001e50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	0a9b      	lsrs	r3, r3, #10
 8001e40:	f003 0307 	and.w	r3, r3, #7
 8001e44:	4a03      	ldr	r2, [pc, #12]	; (8001e54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e46:	5cd3      	ldrb	r3, [r2, r3]
 8001e48:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	40023800 	.word	0x40023800
 8001e54:	08006320 	.word	0x08006320

08001e58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001e5c:	f7ff ffdc 	bl	8001e18 <HAL_RCC_GetHCLKFreq>
 8001e60:	4601      	mov	r1, r0
 8001e62:	4b05      	ldr	r3, [pc, #20]	; (8001e78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	0b5b      	lsrs	r3, r3, #13
 8001e68:	f003 0307 	and.w	r3, r3, #7
 8001e6c:	4a03      	ldr	r2, [pc, #12]	; (8001e7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e6e:	5cd3      	ldrb	r3, [r2, r3]
 8001e70:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	40023800 	.word	0x40023800
 8001e7c:	08006320 	.word	0x08006320

08001e80 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	220f      	movs	r2, #15
 8001e8e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001e90:	4b12      	ldr	r3, [pc, #72]	; (8001edc <HAL_RCC_GetClockConfig+0x5c>)
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	f003 0203 	and.w	r2, r3, #3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001e9c:	4b0f      	ldr	r3, [pc, #60]	; (8001edc <HAL_RCC_GetClockConfig+0x5c>)
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001ea8:	4b0c      	ldr	r3, [pc, #48]	; (8001edc <HAL_RCC_GetClockConfig+0x5c>)
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001eb4:	4b09      	ldr	r3, [pc, #36]	; (8001edc <HAL_RCC_GetClockConfig+0x5c>)
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	08db      	lsrs	r3, r3, #3
 8001eba:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001ec2:	4b07      	ldr	r3, [pc, #28]	; (8001ee0 <HAL_RCC_GetClockConfig+0x60>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 020f 	and.w	r2, r3, #15
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	601a      	str	r2, [r3, #0]
}
 8001ece:	bf00      	nop
 8001ed0:	370c      	adds	r7, #12
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr
 8001eda:	bf00      	nop
 8001edc:	40023800 	.word	0x40023800
 8001ee0:	40023c00 	.word	0x40023c00

08001ee4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d101      	bne.n	8001ef6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e01d      	b.n	8001f32 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d106      	bne.n	8001f10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2200      	movs	r2, #0
 8001f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f000 f815 	bl	8001f3a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2202      	movs	r2, #2
 8001f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	3304      	adds	r3, #4
 8001f20:	4619      	mov	r1, r3
 8001f22:	4610      	mov	r0, r2
 8001f24:	f000 f968 	bl	80021f8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f30:	2300      	movs	r3, #0
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3708      	adds	r7, #8
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}

08001f3a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001f3a:	b480      	push	{r7}
 8001f3c:	b083      	sub	sp, #12
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001f42:	bf00      	nop
 8001f44:	370c      	adds	r7, #12
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr

08001f4e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001f4e:	b480      	push	{r7}
 8001f50:	b085      	sub	sp, #20
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	687a      	ldr	r2, [r7, #4]
 8001f5c:	6812      	ldr	r2, [r2, #0]
 8001f5e:	68d2      	ldr	r2, [r2, #12]
 8001f60:	f042 0201 	orr.w	r2, r2, #1
 8001f64:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	f003 0307 	and.w	r3, r3, #7
 8001f70:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	2b06      	cmp	r3, #6
 8001f76:	d007      	beq.n	8001f88 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	687a      	ldr	r2, [r7, #4]
 8001f7e:	6812      	ldr	r2, [r2, #0]
 8001f80:	6812      	ldr	r2, [r2, #0]
 8001f82:	f042 0201 	orr.w	r2, r2, #1
 8001f86:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f88:	2300      	movs	r3, #0
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3714      	adds	r7, #20
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr

08001f96 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f96:	b580      	push	{r7, lr}
 8001f98:	b082      	sub	sp, #8
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	691b      	ldr	r3, [r3, #16]
 8001fa4:	f003 0302 	and.w	r3, r3, #2
 8001fa8:	2b02      	cmp	r3, #2
 8001faa:	d122      	bne.n	8001ff2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	68db      	ldr	r3, [r3, #12]
 8001fb2:	f003 0302 	and.w	r3, r3, #2
 8001fb6:	2b02      	cmp	r3, #2
 8001fb8:	d11b      	bne.n	8001ff2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f06f 0202 	mvn.w	r2, #2
 8001fc2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	699b      	ldr	r3, [r3, #24]
 8001fd0:	f003 0303 	and.w	r3, r3, #3
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d003      	beq.n	8001fe0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001fd8:	6878      	ldr	r0, [r7, #4]
 8001fda:	f000 f8ee 	bl	80021ba <HAL_TIM_IC_CaptureCallback>
 8001fde:	e005      	b.n	8001fec <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f000 f8e0 	bl	80021a6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f000 f8f1 	bl	80021ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	691b      	ldr	r3, [r3, #16]
 8001ff8:	f003 0304 	and.w	r3, r3, #4
 8001ffc:	2b04      	cmp	r3, #4
 8001ffe:	d122      	bne.n	8002046 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	68db      	ldr	r3, [r3, #12]
 8002006:	f003 0304 	and.w	r3, r3, #4
 800200a:	2b04      	cmp	r3, #4
 800200c:	d11b      	bne.n	8002046 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f06f 0204 	mvn.w	r2, #4
 8002016:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2202      	movs	r2, #2
 800201c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	699b      	ldr	r3, [r3, #24]
 8002024:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002028:	2b00      	cmp	r3, #0
 800202a:	d003      	beq.n	8002034 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f000 f8c4 	bl	80021ba <HAL_TIM_IC_CaptureCallback>
 8002032:	e005      	b.n	8002040 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	f000 f8b6 	bl	80021a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f000 f8c7 	bl	80021ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2200      	movs	r2, #0
 8002044:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	691b      	ldr	r3, [r3, #16]
 800204c:	f003 0308 	and.w	r3, r3, #8
 8002050:	2b08      	cmp	r3, #8
 8002052:	d122      	bne.n	800209a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	68db      	ldr	r3, [r3, #12]
 800205a:	f003 0308 	and.w	r3, r3, #8
 800205e:	2b08      	cmp	r3, #8
 8002060:	d11b      	bne.n	800209a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f06f 0208 	mvn.w	r2, #8
 800206a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2204      	movs	r2, #4
 8002070:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	69db      	ldr	r3, [r3, #28]
 8002078:	f003 0303 	and.w	r3, r3, #3
 800207c:	2b00      	cmp	r3, #0
 800207e:	d003      	beq.n	8002088 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002080:	6878      	ldr	r0, [r7, #4]
 8002082:	f000 f89a 	bl	80021ba <HAL_TIM_IC_CaptureCallback>
 8002086:	e005      	b.n	8002094 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	f000 f88c 	bl	80021a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f000 f89d 	bl	80021ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2200      	movs	r2, #0
 8002098:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	691b      	ldr	r3, [r3, #16]
 80020a0:	f003 0310 	and.w	r3, r3, #16
 80020a4:	2b10      	cmp	r3, #16
 80020a6:	d122      	bne.n	80020ee <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	68db      	ldr	r3, [r3, #12]
 80020ae:	f003 0310 	and.w	r3, r3, #16
 80020b2:	2b10      	cmp	r3, #16
 80020b4:	d11b      	bne.n	80020ee <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f06f 0210 	mvn.w	r2, #16
 80020be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2208      	movs	r2, #8
 80020c4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	69db      	ldr	r3, [r3, #28]
 80020cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d003      	beq.n	80020dc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f000 f870 	bl	80021ba <HAL_TIM_IC_CaptureCallback>
 80020da:	e005      	b.n	80020e8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f000 f862 	bl	80021a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f000 f873 	bl	80021ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2200      	movs	r2, #0
 80020ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	691b      	ldr	r3, [r3, #16]
 80020f4:	f003 0301 	and.w	r3, r3, #1
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d10e      	bne.n	800211a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	68db      	ldr	r3, [r3, #12]
 8002102:	f003 0301 	and.w	r3, r3, #1
 8002106:	2b01      	cmp	r3, #1
 8002108:	d107      	bne.n	800211a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f06f 0201 	mvn.w	r2, #1
 8002112:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	f003 fc1d 	bl	8005954 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	691b      	ldr	r3, [r3, #16]
 8002120:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002124:	2b80      	cmp	r3, #128	; 0x80
 8002126:	d10e      	bne.n	8002146 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	68db      	ldr	r3, [r3, #12]
 800212e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002132:	2b80      	cmp	r3, #128	; 0x80
 8002134:	d107      	bne.n	8002146 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800213e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	f000 f903 	bl	800234c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	691b      	ldr	r3, [r3, #16]
 800214c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002150:	2b40      	cmp	r3, #64	; 0x40
 8002152:	d10e      	bne.n	8002172 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	68db      	ldr	r3, [r3, #12]
 800215a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800215e:	2b40      	cmp	r3, #64	; 0x40
 8002160:	d107      	bne.n	8002172 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800216a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	f000 f838 	bl	80021e2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	691b      	ldr	r3, [r3, #16]
 8002178:	f003 0320 	and.w	r3, r3, #32
 800217c:	2b20      	cmp	r3, #32
 800217e:	d10e      	bne.n	800219e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	68db      	ldr	r3, [r3, #12]
 8002186:	f003 0320 	and.w	r3, r3, #32
 800218a:	2b20      	cmp	r3, #32
 800218c:	d107      	bne.n	800219e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f06f 0220 	mvn.w	r2, #32
 8002196:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	f000 f8cd 	bl	8002338 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800219e:	bf00      	nop
 80021a0:	3708      	adds	r7, #8
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}

080021a6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021a6:	b480      	push	{r7}
 80021a8:	b083      	sub	sp, #12
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80021ae:	bf00      	nop
 80021b0:	370c      	adds	r7, #12
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr

080021ba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80021ba:	b480      	push	{r7}
 80021bc:	b083      	sub	sp, #12
 80021be:	af00      	add	r7, sp, #0
 80021c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80021c2:	bf00      	nop
 80021c4:	370c      	adds	r7, #12
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr

080021ce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80021ce:	b480      	push	{r7}
 80021d0:	b083      	sub	sp, #12
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80021d6:	bf00      	nop
 80021d8:	370c      	adds	r7, #12
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr

080021e2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80021e2:	b480      	push	{r7}
 80021e4:	b083      	sub	sp, #12
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80021ea:	bf00      	nop
 80021ec:	370c      	adds	r7, #12
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
	...

080021f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b085      	sub	sp, #20
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	4a40      	ldr	r2, [pc, #256]	; (800230c <TIM_Base_SetConfig+0x114>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d013      	beq.n	8002238 <TIM_Base_SetConfig+0x40>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002216:	d00f      	beq.n	8002238 <TIM_Base_SetConfig+0x40>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	4a3d      	ldr	r2, [pc, #244]	; (8002310 <TIM_Base_SetConfig+0x118>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d00b      	beq.n	8002238 <TIM_Base_SetConfig+0x40>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	4a3c      	ldr	r2, [pc, #240]	; (8002314 <TIM_Base_SetConfig+0x11c>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d007      	beq.n	8002238 <TIM_Base_SetConfig+0x40>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	4a3b      	ldr	r2, [pc, #236]	; (8002318 <TIM_Base_SetConfig+0x120>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d003      	beq.n	8002238 <TIM_Base_SetConfig+0x40>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	4a3a      	ldr	r2, [pc, #232]	; (800231c <TIM_Base_SetConfig+0x124>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d108      	bne.n	800224a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800223e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	68fa      	ldr	r2, [r7, #12]
 8002246:	4313      	orrs	r3, r2
 8002248:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	4a2f      	ldr	r2, [pc, #188]	; (800230c <TIM_Base_SetConfig+0x114>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d02b      	beq.n	80022aa <TIM_Base_SetConfig+0xb2>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002258:	d027      	beq.n	80022aa <TIM_Base_SetConfig+0xb2>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4a2c      	ldr	r2, [pc, #176]	; (8002310 <TIM_Base_SetConfig+0x118>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d023      	beq.n	80022aa <TIM_Base_SetConfig+0xb2>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4a2b      	ldr	r2, [pc, #172]	; (8002314 <TIM_Base_SetConfig+0x11c>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d01f      	beq.n	80022aa <TIM_Base_SetConfig+0xb2>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a2a      	ldr	r2, [pc, #168]	; (8002318 <TIM_Base_SetConfig+0x120>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d01b      	beq.n	80022aa <TIM_Base_SetConfig+0xb2>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4a29      	ldr	r2, [pc, #164]	; (800231c <TIM_Base_SetConfig+0x124>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d017      	beq.n	80022aa <TIM_Base_SetConfig+0xb2>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4a28      	ldr	r2, [pc, #160]	; (8002320 <TIM_Base_SetConfig+0x128>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d013      	beq.n	80022aa <TIM_Base_SetConfig+0xb2>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4a27      	ldr	r2, [pc, #156]	; (8002324 <TIM_Base_SetConfig+0x12c>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d00f      	beq.n	80022aa <TIM_Base_SetConfig+0xb2>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4a26      	ldr	r2, [pc, #152]	; (8002328 <TIM_Base_SetConfig+0x130>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d00b      	beq.n	80022aa <TIM_Base_SetConfig+0xb2>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4a25      	ldr	r2, [pc, #148]	; (800232c <TIM_Base_SetConfig+0x134>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d007      	beq.n	80022aa <TIM_Base_SetConfig+0xb2>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4a24      	ldr	r2, [pc, #144]	; (8002330 <TIM_Base_SetConfig+0x138>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d003      	beq.n	80022aa <TIM_Base_SetConfig+0xb2>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4a23      	ldr	r2, [pc, #140]	; (8002334 <TIM_Base_SetConfig+0x13c>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d108      	bne.n	80022bc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	68db      	ldr	r3, [r3, #12]
 80022b6:	68fa      	ldr	r2, [r7, #12]
 80022b8:	4313      	orrs	r3, r2
 80022ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	695b      	ldr	r3, [r3, #20]
 80022c6:	4313      	orrs	r3, r2
 80022c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	68fa      	ldr	r2, [r7, #12]
 80022ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	689a      	ldr	r2, [r3, #8]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	4a0a      	ldr	r2, [pc, #40]	; (800230c <TIM_Base_SetConfig+0x114>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d003      	beq.n	80022f0 <TIM_Base_SetConfig+0xf8>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	4a0c      	ldr	r2, [pc, #48]	; (800231c <TIM_Base_SetConfig+0x124>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d103      	bne.n	80022f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	691a      	ldr	r2, [r3, #16]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2201      	movs	r2, #1
 80022fc:	615a      	str	r2, [r3, #20]
}
 80022fe:	bf00      	nop
 8002300:	3714      	adds	r7, #20
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr
 800230a:	bf00      	nop
 800230c:	40010000 	.word	0x40010000
 8002310:	40000400 	.word	0x40000400
 8002314:	40000800 	.word	0x40000800
 8002318:	40000c00 	.word	0x40000c00
 800231c:	40010400 	.word	0x40010400
 8002320:	40014000 	.word	0x40014000
 8002324:	40014400 	.word	0x40014400
 8002328:	40014800 	.word	0x40014800
 800232c:	40001800 	.word	0x40001800
 8002330:	40001c00 	.word	0x40001c00
 8002334:	40002000 	.word	0x40002000

08002338 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002340:	bf00      	nop
 8002342:	370c      	adds	r7, #12
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr

0800234c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800234c:	b480      	push	{r7}
 800234e:	b083      	sub	sp, #12
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002354:	bf00      	nop
 8002356:	370c      	adds	r7, #12
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr

08002360 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d101      	bne.n	8002372 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e03f      	b.n	80023f2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002378:	b2db      	uxtb	r3, r3
 800237a:	2b00      	cmp	r3, #0
 800237c:	d106      	bne.n	800238c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2200      	movs	r2, #0
 8002382:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f003 fdfc 	bl	8005f84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2224      	movs	r2, #36	; 0x24
 8002390:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	687a      	ldr	r2, [r7, #4]
 800239a:	6812      	ldr	r2, [r2, #0]
 800239c:	68d2      	ldr	r2, [r2, #12]
 800239e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80023a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	f000 f829 	bl	80023fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	687a      	ldr	r2, [r7, #4]
 80023b0:	6812      	ldr	r2, [r2, #0]
 80023b2:	6912      	ldr	r2, [r2, #16]
 80023b4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80023b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	6812      	ldr	r2, [r2, #0]
 80023c2:	6952      	ldr	r2, [r2, #20]
 80023c4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80023c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	6812      	ldr	r2, [r2, #0]
 80023d2:	68d2      	ldr	r2, [r2, #12]
 80023d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80023d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2200      	movs	r2, #0
 80023de:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2220      	movs	r2, #32
 80023e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2220      	movs	r2, #32
 80023ec:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80023f0:	2300      	movs	r3, #0
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3708      	adds	r7, #8
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
	...

080023fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80023fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023fe:	b085      	sub	sp, #20
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	687a      	ldr	r2, [r7, #4]
 800240a:	6812      	ldr	r2, [r2, #0]
 800240c:	6912      	ldr	r2, [r2, #16]
 800240e:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	68d2      	ldr	r2, [r2, #12]
 8002416:	430a      	orrs	r2, r1
 8002418:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	689a      	ldr	r2, [r3, #8]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	691b      	ldr	r3, [r3, #16]
 8002422:	431a      	orrs	r2, r3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	695b      	ldr	r3, [r3, #20]
 8002428:	431a      	orrs	r2, r3
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	69db      	ldr	r3, [r3, #28]
 800242e:	4313      	orrs	r3, r2
 8002430:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002440:	f023 030c 	bic.w	r3, r3, #12
 8002444:	68f9      	ldr	r1, [r7, #12]
 8002446:	430b      	orrs	r3, r1
 8002448:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	6812      	ldr	r2, [r2, #0]
 8002452:	6952      	ldr	r2, [r2, #20]
 8002454:	f422 7140 	bic.w	r1, r2, #768	; 0x300
 8002458:	687a      	ldr	r2, [r7, #4]
 800245a:	6992      	ldr	r2, [r2, #24]
 800245c:	430a      	orrs	r2, r1
 800245e:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	69db      	ldr	r3, [r3, #28]
 8002464:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002468:	f040 80e4 	bne.w	8002634 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4aab      	ldr	r2, [pc, #684]	; (8002720 <UART_SetConfig+0x324>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d004      	beq.n	8002480 <UART_SetConfig+0x84>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4aaa      	ldr	r2, [pc, #680]	; (8002724 <UART_SetConfig+0x328>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d16c      	bne.n	800255a <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681c      	ldr	r4, [r3, #0]
 8002484:	f7ff fce8 	bl	8001e58 <HAL_RCC_GetPCLK2Freq>
 8002488:	4602      	mov	r2, r0
 800248a:	4613      	mov	r3, r2
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	4413      	add	r3, r2
 8002490:	009a      	lsls	r2, r3, #2
 8002492:	441a      	add	r2, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	005b      	lsls	r3, r3, #1
 800249a:	fbb2 f3f3 	udiv	r3, r2, r3
 800249e:	4aa2      	ldr	r2, [pc, #648]	; (8002728 <UART_SetConfig+0x32c>)
 80024a0:	fba2 2303 	umull	r2, r3, r2, r3
 80024a4:	095b      	lsrs	r3, r3, #5
 80024a6:	011d      	lsls	r5, r3, #4
 80024a8:	f7ff fcd6 	bl	8001e58 <HAL_RCC_GetPCLK2Freq>
 80024ac:	4602      	mov	r2, r0
 80024ae:	4613      	mov	r3, r2
 80024b0:	009b      	lsls	r3, r3, #2
 80024b2:	4413      	add	r3, r2
 80024b4:	009a      	lsls	r2, r3, #2
 80024b6:	441a      	add	r2, r3
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	005b      	lsls	r3, r3, #1
 80024be:	fbb2 f6f3 	udiv	r6, r2, r3
 80024c2:	f7ff fcc9 	bl	8001e58 <HAL_RCC_GetPCLK2Freq>
 80024c6:	4602      	mov	r2, r0
 80024c8:	4613      	mov	r3, r2
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	4413      	add	r3, r2
 80024ce:	009a      	lsls	r2, r3, #2
 80024d0:	441a      	add	r2, r3
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	005b      	lsls	r3, r3, #1
 80024d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80024dc:	4a92      	ldr	r2, [pc, #584]	; (8002728 <UART_SetConfig+0x32c>)
 80024de:	fba2 2303 	umull	r2, r3, r2, r3
 80024e2:	095b      	lsrs	r3, r3, #5
 80024e4:	2264      	movs	r2, #100	; 0x64
 80024e6:	fb02 f303 	mul.w	r3, r2, r3
 80024ea:	1af3      	subs	r3, r6, r3
 80024ec:	00db      	lsls	r3, r3, #3
 80024ee:	3332      	adds	r3, #50	; 0x32
 80024f0:	4a8d      	ldr	r2, [pc, #564]	; (8002728 <UART_SetConfig+0x32c>)
 80024f2:	fba2 2303 	umull	r2, r3, r2, r3
 80024f6:	095b      	lsrs	r3, r3, #5
 80024f8:	005b      	lsls	r3, r3, #1
 80024fa:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80024fe:	441d      	add	r5, r3
 8002500:	f7ff fcaa 	bl	8001e58 <HAL_RCC_GetPCLK2Freq>
 8002504:	4602      	mov	r2, r0
 8002506:	4613      	mov	r3, r2
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	4413      	add	r3, r2
 800250c:	009a      	lsls	r2, r3, #2
 800250e:	441a      	add	r2, r3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	005b      	lsls	r3, r3, #1
 8002516:	fbb2 f6f3 	udiv	r6, r2, r3
 800251a:	f7ff fc9d 	bl	8001e58 <HAL_RCC_GetPCLK2Freq>
 800251e:	4602      	mov	r2, r0
 8002520:	4613      	mov	r3, r2
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	4413      	add	r3, r2
 8002526:	009a      	lsls	r2, r3, #2
 8002528:	441a      	add	r2, r3
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	005b      	lsls	r3, r3, #1
 8002530:	fbb2 f3f3 	udiv	r3, r2, r3
 8002534:	4a7c      	ldr	r2, [pc, #496]	; (8002728 <UART_SetConfig+0x32c>)
 8002536:	fba2 2303 	umull	r2, r3, r2, r3
 800253a:	095b      	lsrs	r3, r3, #5
 800253c:	2264      	movs	r2, #100	; 0x64
 800253e:	fb02 f303 	mul.w	r3, r2, r3
 8002542:	1af3      	subs	r3, r6, r3
 8002544:	00db      	lsls	r3, r3, #3
 8002546:	3332      	adds	r3, #50	; 0x32
 8002548:	4a77      	ldr	r2, [pc, #476]	; (8002728 <UART_SetConfig+0x32c>)
 800254a:	fba2 2303 	umull	r2, r3, r2, r3
 800254e:	095b      	lsrs	r3, r3, #5
 8002550:	f003 0307 	and.w	r3, r3, #7
 8002554:	442b      	add	r3, r5
 8002556:	60a3      	str	r3, [r4, #8]
 8002558:	e154      	b.n	8002804 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681c      	ldr	r4, [r3, #0]
 800255e:	f7ff fc67 	bl	8001e30 <HAL_RCC_GetPCLK1Freq>
 8002562:	4602      	mov	r2, r0
 8002564:	4613      	mov	r3, r2
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	4413      	add	r3, r2
 800256a:	009a      	lsls	r2, r3, #2
 800256c:	441a      	add	r2, r3
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	005b      	lsls	r3, r3, #1
 8002574:	fbb2 f3f3 	udiv	r3, r2, r3
 8002578:	4a6b      	ldr	r2, [pc, #428]	; (8002728 <UART_SetConfig+0x32c>)
 800257a:	fba2 2303 	umull	r2, r3, r2, r3
 800257e:	095b      	lsrs	r3, r3, #5
 8002580:	011d      	lsls	r5, r3, #4
 8002582:	f7ff fc55 	bl	8001e30 <HAL_RCC_GetPCLK1Freq>
 8002586:	4602      	mov	r2, r0
 8002588:	4613      	mov	r3, r2
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	4413      	add	r3, r2
 800258e:	009a      	lsls	r2, r3, #2
 8002590:	441a      	add	r2, r3
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	005b      	lsls	r3, r3, #1
 8002598:	fbb2 f6f3 	udiv	r6, r2, r3
 800259c:	f7ff fc48 	bl	8001e30 <HAL_RCC_GetPCLK1Freq>
 80025a0:	4602      	mov	r2, r0
 80025a2:	4613      	mov	r3, r2
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	4413      	add	r3, r2
 80025a8:	009a      	lsls	r2, r3, #2
 80025aa:	441a      	add	r2, r3
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	005b      	lsls	r3, r3, #1
 80025b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80025b6:	4a5c      	ldr	r2, [pc, #368]	; (8002728 <UART_SetConfig+0x32c>)
 80025b8:	fba2 2303 	umull	r2, r3, r2, r3
 80025bc:	095b      	lsrs	r3, r3, #5
 80025be:	2264      	movs	r2, #100	; 0x64
 80025c0:	fb02 f303 	mul.w	r3, r2, r3
 80025c4:	1af3      	subs	r3, r6, r3
 80025c6:	00db      	lsls	r3, r3, #3
 80025c8:	3332      	adds	r3, #50	; 0x32
 80025ca:	4a57      	ldr	r2, [pc, #348]	; (8002728 <UART_SetConfig+0x32c>)
 80025cc:	fba2 2303 	umull	r2, r3, r2, r3
 80025d0:	095b      	lsrs	r3, r3, #5
 80025d2:	005b      	lsls	r3, r3, #1
 80025d4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80025d8:	441d      	add	r5, r3
 80025da:	f7ff fc29 	bl	8001e30 <HAL_RCC_GetPCLK1Freq>
 80025de:	4602      	mov	r2, r0
 80025e0:	4613      	mov	r3, r2
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	4413      	add	r3, r2
 80025e6:	009a      	lsls	r2, r3, #2
 80025e8:	441a      	add	r2, r3
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	005b      	lsls	r3, r3, #1
 80025f0:	fbb2 f6f3 	udiv	r6, r2, r3
 80025f4:	f7ff fc1c 	bl	8001e30 <HAL_RCC_GetPCLK1Freq>
 80025f8:	4602      	mov	r2, r0
 80025fa:	4613      	mov	r3, r2
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	4413      	add	r3, r2
 8002600:	009a      	lsls	r2, r3, #2
 8002602:	441a      	add	r2, r3
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	005b      	lsls	r3, r3, #1
 800260a:	fbb2 f3f3 	udiv	r3, r2, r3
 800260e:	4a46      	ldr	r2, [pc, #280]	; (8002728 <UART_SetConfig+0x32c>)
 8002610:	fba2 2303 	umull	r2, r3, r2, r3
 8002614:	095b      	lsrs	r3, r3, #5
 8002616:	2264      	movs	r2, #100	; 0x64
 8002618:	fb02 f303 	mul.w	r3, r2, r3
 800261c:	1af3      	subs	r3, r6, r3
 800261e:	00db      	lsls	r3, r3, #3
 8002620:	3332      	adds	r3, #50	; 0x32
 8002622:	4a41      	ldr	r2, [pc, #260]	; (8002728 <UART_SetConfig+0x32c>)
 8002624:	fba2 2303 	umull	r2, r3, r2, r3
 8002628:	095b      	lsrs	r3, r3, #5
 800262a:	f003 0307 	and.w	r3, r3, #7
 800262e:	442b      	add	r3, r5
 8002630:	60a3      	str	r3, [r4, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8002632:	e0e7      	b.n	8002804 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a39      	ldr	r2, [pc, #228]	; (8002720 <UART_SetConfig+0x324>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d004      	beq.n	8002648 <UART_SetConfig+0x24c>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a38      	ldr	r2, [pc, #224]	; (8002724 <UART_SetConfig+0x328>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d171      	bne.n	800272c <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681c      	ldr	r4, [r3, #0]
 800264c:	f7ff fc04 	bl	8001e58 <HAL_RCC_GetPCLK2Freq>
 8002650:	4602      	mov	r2, r0
 8002652:	4613      	mov	r3, r2
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	4413      	add	r3, r2
 8002658:	009a      	lsls	r2, r3, #2
 800265a:	441a      	add	r2, r3
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	fbb2 f3f3 	udiv	r3, r2, r3
 8002666:	4a30      	ldr	r2, [pc, #192]	; (8002728 <UART_SetConfig+0x32c>)
 8002668:	fba2 2303 	umull	r2, r3, r2, r3
 800266c:	095b      	lsrs	r3, r3, #5
 800266e:	011d      	lsls	r5, r3, #4
 8002670:	f7ff fbf2 	bl	8001e58 <HAL_RCC_GetPCLK2Freq>
 8002674:	4602      	mov	r2, r0
 8002676:	4613      	mov	r3, r2
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	4413      	add	r3, r2
 800267c:	009a      	lsls	r2, r3, #2
 800267e:	441a      	add	r2, r3
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	fbb2 f6f3 	udiv	r6, r2, r3
 800268a:	f7ff fbe5 	bl	8001e58 <HAL_RCC_GetPCLK2Freq>
 800268e:	4602      	mov	r2, r0
 8002690:	4613      	mov	r3, r2
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	4413      	add	r3, r2
 8002696:	009a      	lsls	r2, r3, #2
 8002698:	441a      	add	r2, r3
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80026a4:	4a20      	ldr	r2, [pc, #128]	; (8002728 <UART_SetConfig+0x32c>)
 80026a6:	fba2 2303 	umull	r2, r3, r2, r3
 80026aa:	095b      	lsrs	r3, r3, #5
 80026ac:	2264      	movs	r2, #100	; 0x64
 80026ae:	fb02 f303 	mul.w	r3, r2, r3
 80026b2:	1af3      	subs	r3, r6, r3
 80026b4:	011b      	lsls	r3, r3, #4
 80026b6:	3332      	adds	r3, #50	; 0x32
 80026b8:	4a1b      	ldr	r2, [pc, #108]	; (8002728 <UART_SetConfig+0x32c>)
 80026ba:	fba2 2303 	umull	r2, r3, r2, r3
 80026be:	095b      	lsrs	r3, r3, #5
 80026c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026c4:	441d      	add	r5, r3
 80026c6:	f7ff fbc7 	bl	8001e58 <HAL_RCC_GetPCLK2Freq>
 80026ca:	4602      	mov	r2, r0
 80026cc:	4613      	mov	r3, r2
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	4413      	add	r3, r2
 80026d2:	009a      	lsls	r2, r3, #2
 80026d4:	441a      	add	r2, r3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	fbb2 f6f3 	udiv	r6, r2, r3
 80026e0:	f7ff fbba 	bl	8001e58 <HAL_RCC_GetPCLK2Freq>
 80026e4:	4602      	mov	r2, r0
 80026e6:	4613      	mov	r3, r2
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	4413      	add	r3, r2
 80026ec:	009a      	lsls	r2, r3, #2
 80026ee:	441a      	add	r2, r3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80026fa:	4a0b      	ldr	r2, [pc, #44]	; (8002728 <UART_SetConfig+0x32c>)
 80026fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002700:	095b      	lsrs	r3, r3, #5
 8002702:	2264      	movs	r2, #100	; 0x64
 8002704:	fb02 f303 	mul.w	r3, r2, r3
 8002708:	1af3      	subs	r3, r6, r3
 800270a:	011b      	lsls	r3, r3, #4
 800270c:	3332      	adds	r3, #50	; 0x32
 800270e:	4a06      	ldr	r2, [pc, #24]	; (8002728 <UART_SetConfig+0x32c>)
 8002710:	fba2 2303 	umull	r2, r3, r2, r3
 8002714:	095b      	lsrs	r3, r3, #5
 8002716:	f003 030f 	and.w	r3, r3, #15
 800271a:	442b      	add	r3, r5
 800271c:	60a3      	str	r3, [r4, #8]
 800271e:	e071      	b.n	8002804 <UART_SetConfig+0x408>
 8002720:	40011000 	.word	0x40011000
 8002724:	40011400 	.word	0x40011400
 8002728:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681c      	ldr	r4, [r3, #0]
 8002730:	f7ff fb7e 	bl	8001e30 <HAL_RCC_GetPCLK1Freq>
 8002734:	4602      	mov	r2, r0
 8002736:	4613      	mov	r3, r2
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	4413      	add	r3, r2
 800273c:	009a      	lsls	r2, r3, #2
 800273e:	441a      	add	r2, r3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	009b      	lsls	r3, r3, #2
 8002746:	fbb2 f3f3 	udiv	r3, r2, r3
 800274a:	4a30      	ldr	r2, [pc, #192]	; (800280c <UART_SetConfig+0x410>)
 800274c:	fba2 2303 	umull	r2, r3, r2, r3
 8002750:	095b      	lsrs	r3, r3, #5
 8002752:	011d      	lsls	r5, r3, #4
 8002754:	f7ff fb6c 	bl	8001e30 <HAL_RCC_GetPCLK1Freq>
 8002758:	4602      	mov	r2, r0
 800275a:	4613      	mov	r3, r2
 800275c:	009b      	lsls	r3, r3, #2
 800275e:	4413      	add	r3, r2
 8002760:	009a      	lsls	r2, r3, #2
 8002762:	441a      	add	r2, r3
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	009b      	lsls	r3, r3, #2
 800276a:	fbb2 f6f3 	udiv	r6, r2, r3
 800276e:	f7ff fb5f 	bl	8001e30 <HAL_RCC_GetPCLK1Freq>
 8002772:	4602      	mov	r2, r0
 8002774:	4613      	mov	r3, r2
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	4413      	add	r3, r2
 800277a:	009a      	lsls	r2, r3, #2
 800277c:	441a      	add	r2, r3
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	fbb2 f3f3 	udiv	r3, r2, r3
 8002788:	4a20      	ldr	r2, [pc, #128]	; (800280c <UART_SetConfig+0x410>)
 800278a:	fba2 2303 	umull	r2, r3, r2, r3
 800278e:	095b      	lsrs	r3, r3, #5
 8002790:	2264      	movs	r2, #100	; 0x64
 8002792:	fb02 f303 	mul.w	r3, r2, r3
 8002796:	1af3      	subs	r3, r6, r3
 8002798:	011b      	lsls	r3, r3, #4
 800279a:	3332      	adds	r3, #50	; 0x32
 800279c:	4a1b      	ldr	r2, [pc, #108]	; (800280c <UART_SetConfig+0x410>)
 800279e:	fba2 2303 	umull	r2, r3, r2, r3
 80027a2:	095b      	lsrs	r3, r3, #5
 80027a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027a8:	441d      	add	r5, r3
 80027aa:	f7ff fb41 	bl	8001e30 <HAL_RCC_GetPCLK1Freq>
 80027ae:	4602      	mov	r2, r0
 80027b0:	4613      	mov	r3, r2
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	4413      	add	r3, r2
 80027b6:	009a      	lsls	r2, r3, #2
 80027b8:	441a      	add	r2, r3
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	fbb2 f6f3 	udiv	r6, r2, r3
 80027c4:	f7ff fb34 	bl	8001e30 <HAL_RCC_GetPCLK1Freq>
 80027c8:	4602      	mov	r2, r0
 80027ca:	4613      	mov	r3, r2
 80027cc:	009b      	lsls	r3, r3, #2
 80027ce:	4413      	add	r3, r2
 80027d0:	009a      	lsls	r2, r3, #2
 80027d2:	441a      	add	r2, r3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	fbb2 f3f3 	udiv	r3, r2, r3
 80027de:	4a0b      	ldr	r2, [pc, #44]	; (800280c <UART_SetConfig+0x410>)
 80027e0:	fba2 2303 	umull	r2, r3, r2, r3
 80027e4:	095b      	lsrs	r3, r3, #5
 80027e6:	2264      	movs	r2, #100	; 0x64
 80027e8:	fb02 f303 	mul.w	r3, r2, r3
 80027ec:	1af3      	subs	r3, r6, r3
 80027ee:	011b      	lsls	r3, r3, #4
 80027f0:	3332      	adds	r3, #50	; 0x32
 80027f2:	4a06      	ldr	r2, [pc, #24]	; (800280c <UART_SetConfig+0x410>)
 80027f4:	fba2 2303 	umull	r2, r3, r2, r3
 80027f8:	095b      	lsrs	r3, r3, #5
 80027fa:	f003 030f 	and.w	r3, r3, #15
 80027fe:	442b      	add	r3, r5
 8002800:	60a3      	str	r3, [r4, #8]
}
 8002802:	e7ff      	b.n	8002804 <UART_SetConfig+0x408>
 8002804:	bf00      	nop
 8002806:	3714      	adds	r7, #20
 8002808:	46bd      	mov	sp, r7
 800280a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800280c:	51eb851f 	.word	0x51eb851f

08002810 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002810:	b084      	sub	sp, #16
 8002812:	b580      	push	{r7, lr}
 8002814:	b084      	sub	sp, #16
 8002816:	af00      	add	r7, sp, #0
 8002818:	6078      	str	r0, [r7, #4]
 800281a:	f107 001c 	add.w	r0, r7, #28
 800281e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002824:	2b01      	cmp	r3, #1
 8002826:	d122      	bne.n	800286e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800282c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800283c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002850:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002852:	2b01      	cmp	r3, #1
 8002854:	d105      	bne.n	8002862 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	68db      	ldr	r3, [r3, #12]
 800285a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f000 fa5e 	bl	8002d24 <USB_CoreReset>
 8002868:	4603      	mov	r3, r0
 800286a:	73fb      	strb	r3, [r7, #15]
 800286c:	e01a      	b.n	80028a4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	68db      	ldr	r3, [r3, #12]
 8002872:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f000 fa52 	bl	8002d24 <USB_CoreReset>
 8002880:	4603      	mov	r3, r0
 8002882:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002884:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002886:	2b00      	cmp	r3, #0
 8002888:	d106      	bne.n	8002898 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800288e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	639a      	str	r2, [r3, #56]	; 0x38
 8002896:	e005      	b.n	80028a4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800289c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80028a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d10b      	bne.n	80028c2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	f043 0206 	orr.w	r2, r3, #6
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	f043 0220 	orr.w	r2, r3, #32
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80028c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3710      	adds	r7, #16
 80028c8:	46bd      	mov	sp, r7
 80028ca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80028ce:	b004      	add	sp, #16
 80028d0:	4770      	bx	lr

080028d2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80028d2:	b480      	push	{r7}
 80028d4:	b083      	sub	sp, #12
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	f023 0201 	bic.w	r2, r3, #1
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80028e6:	2300      	movs	r3, #0
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	370c      	adds	r7, #12
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr

080028f4 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b082      	sub	sp, #8
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
 80028fc:	460b      	mov	r3, r1
 80028fe:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800290c:	78fb      	ldrb	r3, [r7, #3]
 800290e:	2b01      	cmp	r3, #1
 8002910:	d106      	bne.n	8002920 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	68db      	ldr	r3, [r3, #12]
 8002916:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	60da      	str	r2, [r3, #12]
 800291e:	e00b      	b.n	8002938 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8002920:	78fb      	ldrb	r3, [r7, #3]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d106      	bne.n	8002934 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	68db      	ldr	r3, [r3, #12]
 800292a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	60da      	str	r2, [r3, #12]
 8002932:	e001      	b.n	8002938 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e003      	b.n	8002940 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8002938:	2032      	movs	r0, #50	; 0x32
 800293a:	f7fd fe23 	bl	8000584 <HAL_Delay>

  return HAL_OK;
 800293e:	2300      	movs	r3, #0
}
 8002940:	4618      	mov	r0, r3
 8002942:	3708      	adds	r7, #8
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}

08002948 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002948:	b084      	sub	sp, #16
 800294a:	b580      	push	{r7, lr}
 800294c:	b086      	sub	sp, #24
 800294e:	af00      	add	r7, sp, #0
 8002950:	6078      	str	r0, [r7, #4]
 8002952:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002956:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800295a:	2300      	movs	r3, #0
 800295c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002962:	2300      	movs	r3, #0
 8002964:	613b      	str	r3, [r7, #16]
 8002966:	e009      	b.n	800297c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002968:	687a      	ldr	r2, [r7, #4]
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	3340      	adds	r3, #64	; 0x40
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	4413      	add	r3, r2
 8002972:	2200      	movs	r2, #0
 8002974:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	3301      	adds	r3, #1
 800297a:	613b      	str	r3, [r7, #16]
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	2b0e      	cmp	r3, #14
 8002980:	d9f2      	bls.n	8002968 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8002982:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002984:	2b00      	cmp	r3, #0
 8002986:	d112      	bne.n	80029ae <USB_DevInit+0x66>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800298c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002998:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029a4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	639a      	str	r2, [r3, #56]	; 0x38
 80029ac:	e00b      	b.n	80029c6 <USB_DevInit+0x7e>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	601a      	str	r2, [r3, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029be:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80029cc:	461a      	mov	r2, r3
 80029ce:	2300      	movs	r3, #0
 80029d0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029d8:	461a      	mov	r2, r3
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80029e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d10c      	bne.n	8002a04 <USB_DevInit+0xbc>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80029ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d104      	bne.n	80029fa <USB_DevInit+0xb2>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80029f0:	2100      	movs	r1, #0
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f000 f962 	bl	8002cbc <USB_SetDevSpeed>
 80029f8:	e008      	b.n	8002a0c <USB_DevInit+0xc4>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80029fa:	2101      	movs	r1, #1
 80029fc:	6878      	ldr	r0, [r7, #4]
 80029fe:	f000 f95d 	bl	8002cbc <USB_SetDevSpeed>
 8002a02:	e003      	b.n	8002a0c <USB_DevInit+0xc4>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002a04:	2103      	movs	r1, #3
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f000 f958 	bl	8002cbc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002a0c:	2110      	movs	r1, #16
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f000 f90c 	bl	8002c2c <USB_FlushTxFifo>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d001      	beq.n	8002a1e <USB_DevInit+0xd6>
  {
    ret = HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f000 f92a 	bl	8002c78 <USB_FlushRxFifo>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d001      	beq.n	8002a2e <USB_DevInit+0xe6>
  {
    ret = HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a34:	461a      	mov	r2, r3
 8002a36:	2300      	movs	r3, #0
 8002a38:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a40:	461a      	mov	r2, r3
 8002a42:	2300      	movs	r3, #0
 8002a44:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	2300      	movs	r3, #0
 8002a50:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002a52:	2300      	movs	r3, #0
 8002a54:	613b      	str	r3, [r7, #16]
 8002a56:	e043      	b.n	8002ae0 <USB_DevInit+0x198>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	015a      	lsls	r2, r3, #5
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	4413      	add	r3, r2
 8002a60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002a6a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002a6e:	d118      	bne.n	8002aa2 <USB_DevInit+0x15a>
    {
      if (i == 0U)
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d10a      	bne.n	8002a8c <USB_DevInit+0x144>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	015a      	lsls	r2, r3, #5
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	4413      	add	r3, r2
 8002a7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a82:	461a      	mov	r2, r3
 8002a84:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002a88:	6013      	str	r3, [r2, #0]
 8002a8a:	e013      	b.n	8002ab4 <USB_DevInit+0x16c>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	015a      	lsls	r2, r3, #5
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	4413      	add	r3, r2
 8002a94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a98:	461a      	mov	r2, r3
 8002a9a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002a9e:	6013      	str	r3, [r2, #0]
 8002aa0:	e008      	b.n	8002ab4 <USB_DevInit+0x16c>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	015a      	lsls	r2, r3, #5
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	4413      	add	r3, r2
 8002aaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002aae:	461a      	mov	r2, r3
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	015a      	lsls	r2, r3, #5
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	4413      	add	r3, r2
 8002abc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	015a      	lsls	r2, r3, #5
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	4413      	add	r3, r2
 8002ace:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002ad8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	3301      	adds	r3, #1
 8002ade:	613b      	str	r3, [r7, #16]
 8002ae0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d8b7      	bhi.n	8002a58 <USB_DevInit+0x110>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002ae8:	2300      	movs	r3, #0
 8002aea:	613b      	str	r3, [r7, #16]
 8002aec:	e043      	b.n	8002b76 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	015a      	lsls	r2, r3, #5
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	4413      	add	r3, r2
 8002af6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002b00:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002b04:	d118      	bne.n	8002b38 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d10a      	bne.n	8002b22 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	015a      	lsls	r2, r3, #5
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	4413      	add	r3, r2
 8002b14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b18:	461a      	mov	r2, r3
 8002b1a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002b1e:	6013      	str	r3, [r2, #0]
 8002b20:	e013      	b.n	8002b4a <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	015a      	lsls	r2, r3, #5
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	4413      	add	r3, r2
 8002b2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b2e:	461a      	mov	r2, r3
 8002b30:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002b34:	6013      	str	r3, [r2, #0]
 8002b36:	e008      	b.n	8002b4a <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	015a      	lsls	r2, r3, #5
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	4413      	add	r3, r2
 8002b40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b44:	461a      	mov	r2, r3
 8002b46:	2300      	movs	r3, #0
 8002b48:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	015a      	lsls	r2, r3, #5
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	4413      	add	r3, r2
 8002b52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b56:	461a      	mov	r2, r3
 8002b58:	2300      	movs	r3, #0
 8002b5a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	015a      	lsls	r2, r3, #5
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	4413      	add	r3, r2
 8002b64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b68:	461a      	mov	r2, r3
 8002b6a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002b6e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	3301      	adds	r3, #1
 8002b74:	613b      	str	r3, [r7, #16]
 8002b76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d8b7      	bhi.n	8002aee <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b84:	461a      	mov	r2, r3
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b8c:	691b      	ldr	r3, [r3, #16]
 8002b8e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b92:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 8002b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d112      	bne.n	8002bc0 <USB_DevInit+0x278>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	4b20      	ldr	r3, [pc, #128]	; (8002c24 <USB_DevInit+0x2dc>)
 8002ba4:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002bac:	461a      	mov	r2, r3
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bba:	f043 0303 	orr.w	r3, r3, #3
 8002bbe:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8002bcc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8002bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d105      	bne.n	8002be0 <USB_DevInit+0x298>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	699b      	ldr	r3, [r3, #24]
 8002bd8:	f043 0210 	orr.w	r2, r3, #16
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	699a      	ldr	r2, [r3, #24]
 8002be4:	4b10      	ldr	r3, [pc, #64]	; (8002c28 <USB_DevInit+0x2e0>)
 8002be6:	4313      	orrs	r3, r2
 8002be8:	687a      	ldr	r2, [r7, #4]
 8002bea:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8002bec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d005      	beq.n	8002bfe <USB_DevInit+0x2b6>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	699b      	ldr	r3, [r3, #24]
 8002bf6:	f043 0208 	orr.w	r2, r3, #8
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8002bfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d107      	bne.n	8002c14 <USB_DevInit+0x2cc>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	699b      	ldr	r3, [r3, #24]
 8002c08:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002c0c:	f043 0304 	orr.w	r3, r3, #4
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8002c14:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3718      	adds	r7, #24
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002c20:	b004      	add	sp, #16
 8002c22:	4770      	bx	lr
 8002c24:	00800100 	.word	0x00800100
 8002c28:	803c3800 	.word	0x803c3800

08002c2c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b085      	sub	sp, #20
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
 8002c34:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8002c36:	2300      	movs	r3, #0
 8002c38:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	019b      	lsls	r3, r3, #6
 8002c3e:	f043 0220 	orr.w	r2, r3, #32
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	3301      	adds	r3, #1
 8002c4a:	60fb      	str	r3, [r7, #12]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	4a09      	ldr	r2, [pc, #36]	; (8002c74 <USB_FlushTxFifo+0x48>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d901      	bls.n	8002c58 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8002c54:	2303      	movs	r3, #3
 8002c56:	e006      	b.n	8002c66 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	691b      	ldr	r3, [r3, #16]
 8002c5c:	f003 0320 	and.w	r3, r3, #32
 8002c60:	2b20      	cmp	r3, #32
 8002c62:	d0f0      	beq.n	8002c46 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8002c64:	2300      	movs	r3, #0
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3714      	adds	r7, #20
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr
 8002c72:	bf00      	nop
 8002c74:	00030d40 	.word	0x00030d40

08002c78 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b085      	sub	sp, #20
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8002c80:	2300      	movs	r3, #0
 8002c82:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2210      	movs	r2, #16
 8002c88:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	3301      	adds	r3, #1
 8002c8e:	60fb      	str	r3, [r7, #12]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	4a09      	ldr	r2, [pc, #36]	; (8002cb8 <USB_FlushRxFifo+0x40>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d901      	bls.n	8002c9c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8002c98:	2303      	movs	r3, #3
 8002c9a:	e006      	b.n	8002caa <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	691b      	ldr	r3, [r3, #16]
 8002ca0:	f003 0310 	and.w	r3, r3, #16
 8002ca4:	2b10      	cmp	r3, #16
 8002ca6:	d0f0      	beq.n	8002c8a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8002ca8:	2300      	movs	r3, #0
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3714      	adds	r7, #20
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr
 8002cb6:	bf00      	nop
 8002cb8:	00030d40 	.word	0x00030d40

08002cbc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b085      	sub	sp, #20
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
 8002cc4:	460b      	mov	r3, r1
 8002cc6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cd2:	4619      	mov	r1, r3
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	78fb      	ldrb	r3, [r7, #3]
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8002ce2:	2300      	movs	r3, #0
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	3714      	adds	r7, #20
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr

08002cf0 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b084      	sub	sp, #16
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d02:	461a      	mov	r2, r3
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	f043 0302 	orr.w	r3, r3, #2
 8002d10:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8002d12:	2003      	movs	r0, #3
 8002d14:	f7fd fc36 	bl	8000584 <HAL_Delay>

  return HAL_OK;
 8002d18:	2300      	movs	r3, #0
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3710      	adds	r7, #16
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
	...

08002d24 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b085      	sub	sp, #20
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	3301      	adds	r3, #1
 8002d34:	60fb      	str	r3, [r7, #12]
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	4a13      	ldr	r2, [pc, #76]	; (8002d88 <USB_CoreReset+0x64>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d901      	bls.n	8002d42 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	e01b      	b.n	8002d7a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	691b      	ldr	r3, [r3, #16]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	daf2      	bge.n	8002d30 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	691b      	ldr	r3, [r3, #16]
 8002d52:	f043 0201 	orr.w	r2, r3, #1
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	3301      	adds	r3, #1
 8002d5e:	60fb      	str	r3, [r7, #12]
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	4a09      	ldr	r2, [pc, #36]	; (8002d88 <USB_CoreReset+0x64>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d901      	bls.n	8002d6c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8002d68:	2303      	movs	r3, #3
 8002d6a:	e006      	b.n	8002d7a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	691b      	ldr	r3, [r3, #16]
 8002d70:	f003 0301 	and.w	r3, r3, #1
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d0f0      	beq.n	8002d5a <USB_CoreReset+0x36>

  return HAL_OK;
 8002d78:	2300      	movs	r3, #0
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3714      	adds	r7, #20
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr
 8002d86:	bf00      	nop
 8002d88:	00030d40 	.word	0x00030d40

08002d8c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b085      	sub	sp, #20
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	4603      	mov	r3, r0
 8002d94:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002d96:	2300      	movs	r3, #0
 8002d98:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002d9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d9e:	2b84      	cmp	r3, #132	; 0x84
 8002da0:	d005      	beq.n	8002dae <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002da2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	4413      	add	r3, r2
 8002daa:	3303      	adds	r3, #3
 8002dac:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002dae:	68fb      	ldr	r3, [r7, #12]
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	3714      	adds	r7, #20
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr

08002dbc <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002dc2:	f3ef 8305 	mrs	r3, IPSR
 8002dc6:	607b      	str	r3, [r7, #4]
  return(result);
 8002dc8:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	bf14      	ite	ne
 8002dce:	2301      	movne	r3, #1
 8002dd0:	2300      	moveq	r3, #0
 8002dd2:	b2db      	uxtb	r3, r3
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	370c      	adds	r7, #12
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr

08002de0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002de4:	f001 fcf2 	bl	80047cc <vTaskStartScheduler>
  
  return osOK;
 8002de8:	2300      	movs	r3, #0
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	bd80      	pop	{r7, pc}

08002dee <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002dee:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002df0:	b089      	sub	sp, #36	; 0x24
 8002df2:	af04      	add	r7, sp, #16
 8002df4:	6078      	str	r0, [r7, #4]
 8002df6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	695b      	ldr	r3, [r3, #20]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d020      	beq.n	8002e42 <osThreadCreate+0x54>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	699b      	ldr	r3, [r3, #24]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d01c      	beq.n	8002e42 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	685c      	ldr	r4, [r3, #4]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681d      	ldr	r5, [r3, #0]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	691e      	ldr	r6, [r3, #16]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f7ff ffb6 	bl	8002d8c <makeFreeRtosPriority>
 8002e20:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	695b      	ldr	r3, [r3, #20]
 8002e26:	687a      	ldr	r2, [r7, #4]
 8002e28:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002e2a:	9202      	str	r2, [sp, #8]
 8002e2c:	9301      	str	r3, [sp, #4]
 8002e2e:	9100      	str	r1, [sp, #0]
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	4632      	mov	r2, r6
 8002e34:	4629      	mov	r1, r5
 8002e36:	4620      	mov	r0, r4
 8002e38:	f001 fb0d 	bl	8004456 <xTaskCreateStatic>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	60fb      	str	r3, [r7, #12]
 8002e40:	e01c      	b.n	8002e7c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	685c      	ldr	r4, [r3, #4]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002e4e:	b29e      	uxth	r6, r3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002e56:	4618      	mov	r0, r3
 8002e58:	f7ff ff98 	bl	8002d8c <makeFreeRtosPriority>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	f107 030c 	add.w	r3, r7, #12
 8002e62:	9301      	str	r3, [sp, #4]
 8002e64:	9200      	str	r2, [sp, #0]
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	4632      	mov	r2, r6
 8002e6a:	4629      	mov	r1, r5
 8002e6c:	4620      	mov	r0, r4
 8002e6e:	f001 fb4b 	bl	8004508 <xTaskCreate>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d001      	beq.n	8002e7c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	e000      	b.n	8002e7e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3714      	adds	r7, #20
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002e86 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002e86:	b580      	push	{r7, lr}
 8002e88:	b084      	sub	sp, #16
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d001      	beq.n	8002e9c <osDelay+0x16>
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	e000      	b.n	8002e9e <osDelay+0x18>
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f001 fc60 	bl	8004764 <vTaskDelay>
  
  return osOK;
 8002ea4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3710      	adds	r7, #16
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}

08002eae <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8002eae:	b590      	push	{r4, r7, lr}
 8002eb0:	b085      	sub	sp, #20
 8002eb2:	af02      	add	r7, sp, #8
 8002eb4:	6078      	str	r0, [r7, #4]
 8002eb6:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d012      	beq.n	8002ee6 <osMessageCreate+0x38>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d00e      	beq.n	8002ee6 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6818      	ldr	r0, [r3, #0]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6859      	ldr	r1, [r3, #4]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	689a      	ldr	r2, [r3, #8]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	68dc      	ldr	r4, [r3, #12]
 8002ed8:	2300      	movs	r3, #0
 8002eda:	9300      	str	r3, [sp, #0]
 8002edc:	4623      	mov	r3, r4
 8002ede:	f000 fdf5 	bl	8003acc <xQueueGenericCreateStatic>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	e008      	b.n	8002ef8 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6818      	ldr	r0, [r3, #0]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	4619      	mov	r1, r3
 8002ef2:	f000 fe5d 	bl	8003bb0 <xQueueGenericCreate>
 8002ef6:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	370c      	adds	r7, #12
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd90      	pop	{r4, r7, pc}

08002f00 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b086      	sub	sp, #24
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	60f8      	str	r0, [r7, #12]
 8002f08:	60b9      	str	r1, [r7, #8]
 8002f0a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d101      	bne.n	8002f1e <osMessagePut+0x1e>
    ticks = 1;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8002f1e:	f7ff ff4d 	bl	8002dbc <inHandlerMode>
 8002f22:	4603      	mov	r3, r0
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d018      	beq.n	8002f5a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8002f28:	f107 0210 	add.w	r2, r7, #16
 8002f2c:	f107 0108 	add.w	r1, r7, #8
 8002f30:	2300      	movs	r3, #0
 8002f32:	68f8      	ldr	r0, [r7, #12]
 8002f34:	f000 ff92 	bl	8003e5c <xQueueGenericSendFromISR>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d001      	beq.n	8002f42 <osMessagePut+0x42>
      return osErrorOS;
 8002f3e:	23ff      	movs	r3, #255	; 0xff
 8002f40:	e018      	b.n	8002f74 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d014      	beq.n	8002f72 <osMessagePut+0x72>
 8002f48:	4b0c      	ldr	r3, [pc, #48]	; (8002f7c <osMessagePut+0x7c>)
 8002f4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f4e:	601a      	str	r2, [r3, #0]
 8002f50:	f3bf 8f4f 	dsb	sy
 8002f54:	f3bf 8f6f 	isb	sy
 8002f58:	e00b      	b.n	8002f72 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8002f5a:	f107 0108 	add.w	r1, r7, #8
 8002f5e:	2300      	movs	r3, #0
 8002f60:	697a      	ldr	r2, [r7, #20]
 8002f62:	68f8      	ldr	r0, [r7, #12]
 8002f64:	f000 fe80 	bl	8003c68 <xQueueGenericSend>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d001      	beq.n	8002f72 <osMessagePut+0x72>
      return osErrorOS;
 8002f6e:	23ff      	movs	r3, #255	; 0xff
 8002f70:	e000      	b.n	8002f74 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8002f72:	2300      	movs	r3, #0
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3718      	adds	r7, #24
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}
 8002f7c:	e000ed04 	.word	0xe000ed04

08002f80 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8002f80:	b590      	push	{r4, r7, lr}
 8002f82:	b08b      	sub	sp, #44	; 0x2c
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	60f8      	str	r0, [r7, #12]
 8002f88:	60b9      	str	r1, [r7, #8]
 8002f8a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8002f90:	2300      	movs	r3, #0
 8002f92:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d10a      	bne.n	8002fb0 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8002f9a:	2380      	movs	r3, #128	; 0x80
 8002f9c:	617b      	str	r3, [r7, #20]
    return event;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	461c      	mov	r4, r3
 8002fa2:	f107 0314 	add.w	r3, r7, #20
 8002fa6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002faa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002fae:	e054      	b.n	800305a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002fbe:	d103      	bne.n	8002fc8 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8002fc0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002fc4:	627b      	str	r3, [r7, #36]	; 0x24
 8002fc6:	e009      	b.n	8002fdc <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d006      	beq.n	8002fdc <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8002fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d101      	bne.n	8002fdc <osMessageGet+0x5c>
      ticks = 1;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8002fdc:	f7ff feee 	bl	8002dbc <inHandlerMode>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d01c      	beq.n	8003020 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8002fe6:	f107 0220 	add.w	r2, r7, #32
 8002fea:	f107 0314 	add.w	r3, r7, #20
 8002fee:	3304      	adds	r3, #4
 8002ff0:	4619      	mov	r1, r3
 8002ff2:	68b8      	ldr	r0, [r7, #8]
 8002ff4:	f001 f8a2 	bl	800413c <xQueueReceiveFromISR>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d102      	bne.n	8003004 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8002ffe:	2310      	movs	r3, #16
 8003000:	617b      	str	r3, [r7, #20]
 8003002:	e001      	b.n	8003008 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8003004:	2300      	movs	r3, #0
 8003006:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8003008:	6a3b      	ldr	r3, [r7, #32]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d01d      	beq.n	800304a <osMessageGet+0xca>
 800300e:	4b15      	ldr	r3, [pc, #84]	; (8003064 <osMessageGet+0xe4>)
 8003010:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003014:	601a      	str	r2, [r3, #0]
 8003016:	f3bf 8f4f 	dsb	sy
 800301a:	f3bf 8f6f 	isb	sy
 800301e:	e014      	b.n	800304a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8003020:	f107 0314 	add.w	r3, r7, #20
 8003024:	3304      	adds	r3, #4
 8003026:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003028:	4619      	mov	r1, r3
 800302a:	68b8      	ldr	r0, [r7, #8]
 800302c:	f000 ffaa 	bl	8003f84 <xQueueReceive>
 8003030:	4603      	mov	r3, r0
 8003032:	2b01      	cmp	r3, #1
 8003034:	d102      	bne.n	800303c <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8003036:	2310      	movs	r3, #16
 8003038:	617b      	str	r3, [r7, #20]
 800303a:	e006      	b.n	800304a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800303c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800303e:	2b00      	cmp	r3, #0
 8003040:	d101      	bne.n	8003046 <osMessageGet+0xc6>
 8003042:	2300      	movs	r3, #0
 8003044:	e000      	b.n	8003048 <osMessageGet+0xc8>
 8003046:	2340      	movs	r3, #64	; 0x40
 8003048:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	461c      	mov	r4, r3
 800304e:	f107 0314 	add.w	r3, r7, #20
 8003052:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003056:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800305a:	68f8      	ldr	r0, [r7, #12]
 800305c:	372c      	adds	r7, #44	; 0x2c
 800305e:	46bd      	mov	sp, r7
 8003060:	bd90      	pop	{r4, r7, pc}
 8003062:	bf00      	nop
 8003064:	e000ed04 	.word	0xe000ed04

08003068 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003068:	b480      	push	{r7}
 800306a:	b083      	sub	sp, #12
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	f103 0208 	add.w	r2, r3, #8
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003080:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	f103 0208 	add.w	r2, r3, #8
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	f103 0208 	add.w	r2, r3, #8
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2200      	movs	r2, #0
 800309a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800309c:	bf00      	nop
 800309e:	370c      	adds	r7, #12
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr

080030a8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80030a8:	b480      	push	{r7}
 80030aa:	b083      	sub	sp, #12
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2200      	movs	r2, #0
 80030b4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80030b6:	bf00      	nop
 80030b8:	370c      	adds	r7, #12
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr

080030c2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80030c2:	b480      	push	{r7}
 80030c4:	b085      	sub	sp, #20
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	6078      	str	r0, [r7, #4]
 80030ca:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	68fa      	ldr	r2, [r7, #12]
 80030d6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	689a      	ldr	r2, [r3, #8]
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	683a      	ldr	r2, [r7, #0]
 80030e6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	683a      	ldr	r2, [r7, #0]
 80030ec:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	687a      	ldr	r2, [r7, #4]
 80030f2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	1c5a      	adds	r2, r3, #1
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	601a      	str	r2, [r3, #0]
}
 80030fe:	bf00      	nop
 8003100:	3714      	adds	r7, #20
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr

0800310a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800310a:	b480      	push	{r7}
 800310c:	b085      	sub	sp, #20
 800310e:	af00      	add	r7, sp, #0
 8003110:	6078      	str	r0, [r7, #4]
 8003112:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003120:	d103      	bne.n	800312a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	691b      	ldr	r3, [r3, #16]
 8003126:	60fb      	str	r3, [r7, #12]
 8003128:	e00c      	b.n	8003144 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	3308      	adds	r3, #8
 800312e:	60fb      	str	r3, [r7, #12]
 8003130:	e002      	b.n	8003138 <vListInsert+0x2e>
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	60fb      	str	r3, [r7, #12]
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	429a      	cmp	r2, r3
 8003142:	d9f6      	bls.n	8003132 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	685a      	ldr	r2, [r3, #4]
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	683a      	ldr	r2, [r7, #0]
 8003152:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	68fa      	ldr	r2, [r7, #12]
 8003158:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	683a      	ldr	r2, [r7, #0]
 800315e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	687a      	ldr	r2, [r7, #4]
 8003164:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	1c5a      	adds	r2, r3, #1
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	601a      	str	r2, [r3, #0]
}
 8003170:	bf00      	nop
 8003172:	3714      	adds	r7, #20
 8003174:	46bd      	mov	sp, r7
 8003176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317a:	4770      	bx	lr

0800317c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800317c:	b480      	push	{r7}
 800317e:	b085      	sub	sp, #20
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	691b      	ldr	r3, [r3, #16]
 8003188:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	687a      	ldr	r2, [r7, #4]
 8003190:	6892      	ldr	r2, [r2, #8]
 8003192:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	687a      	ldr	r2, [r7, #4]
 800319a:	6852      	ldr	r2, [r2, #4]
 800319c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	685a      	ldr	r2, [r3, #4]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d103      	bne.n	80031b0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	689a      	ldr	r2, [r3, #8]
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2200      	movs	r2, #0
 80031b4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	1e5a      	subs	r2, r3, #1
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	3714      	adds	r7, #20
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr

080031d0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80031d0:	b480      	push	{r7}
 80031d2:	b085      	sub	sp, #20
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	60f8      	str	r0, [r7, #12]
 80031d8:	60b9      	str	r1, [r7, #8]
 80031da:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	3b04      	subs	r3, #4
 80031e0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80031e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	3b04      	subs	r3, #4
 80031ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	f023 0201 	bic.w	r2, r3, #1
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	3b04      	subs	r3, #4
 80031fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003200:	4a0c      	ldr	r2, [pc, #48]	; (8003234 <pxPortInitialiseStack+0x64>)
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	3b14      	subs	r3, #20
 800320a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800320c:	687a      	ldr	r2, [r7, #4]
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	3b04      	subs	r3, #4
 8003216:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	f06f 0202 	mvn.w	r2, #2
 800321e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	3b20      	subs	r3, #32
 8003224:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003226:	68fb      	ldr	r3, [r7, #12]
}
 8003228:	4618      	mov	r0, r3
 800322a:	3714      	adds	r7, #20
 800322c:	46bd      	mov	sp, r7
 800322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003232:	4770      	bx	lr
 8003234:	08003239 	.word	0x08003239

08003238 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003238:	b480      	push	{r7}
 800323a:	b085      	sub	sp, #20
 800323c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800323e:	2300      	movs	r3, #0
 8003240:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003242:	4b11      	ldr	r3, [pc, #68]	; (8003288 <prvTaskExitError+0x50>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800324a:	d009      	beq.n	8003260 <prvTaskExitError+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800324c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003250:	f383 8811 	msr	BASEPRI, r3
 8003254:	f3bf 8f6f 	isb	sy
 8003258:	f3bf 8f4f 	dsb	sy
 800325c:	60fb      	str	r3, [r7, #12]
 800325e:	e7fe      	b.n	800325e <prvTaskExitError+0x26>
 8003260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003264:	f383 8811 	msr	BASEPRI, r3
 8003268:	f3bf 8f6f 	isb	sy
 800326c:	f3bf 8f4f 	dsb	sy
 8003270:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003272:	bf00      	nop
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d0fc      	beq.n	8003274 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800327a:	bf00      	nop
 800327c:	3714      	adds	r7, #20
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr
 8003286:	bf00      	nop
 8003288:	20000004 	.word	0x20000004
 800328c:	00000000 	.word	0x00000000

08003290 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003290:	4b07      	ldr	r3, [pc, #28]	; (80032b0 <pxCurrentTCBConst2>)
 8003292:	6819      	ldr	r1, [r3, #0]
 8003294:	6808      	ldr	r0, [r1, #0]
 8003296:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800329a:	f380 8809 	msr	PSP, r0
 800329e:	f3bf 8f6f 	isb	sy
 80032a2:	f04f 0000 	mov.w	r0, #0
 80032a6:	f380 8811 	msr	BASEPRI, r0
 80032aa:	4770      	bx	lr
 80032ac:	f3af 8000 	nop.w

080032b0 <pxCurrentTCBConst2>:
 80032b0:	20003c48 	.word	0x20003c48
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80032b4:	bf00      	nop
 80032b6:	bf00      	nop

080032b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80032b8:	4808      	ldr	r0, [pc, #32]	; (80032dc <prvPortStartFirstTask+0x24>)
 80032ba:	6800      	ldr	r0, [r0, #0]
 80032bc:	6800      	ldr	r0, [r0, #0]
 80032be:	f380 8808 	msr	MSP, r0
 80032c2:	f04f 0000 	mov.w	r0, #0
 80032c6:	f380 8814 	msr	CONTROL, r0
 80032ca:	b662      	cpsie	i
 80032cc:	b661      	cpsie	f
 80032ce:	f3bf 8f4f 	dsb	sy
 80032d2:	f3bf 8f6f 	isb	sy
 80032d6:	df00      	svc	0
 80032d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80032da:	bf00      	nop
 80032dc:	e000ed08 	.word	0xe000ed08

080032e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b086      	sub	sp, #24
 80032e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80032e6:	4b44      	ldr	r3, [pc, #272]	; (80033f8 <xPortStartScheduler+0x118>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a44      	ldr	r2, [pc, #272]	; (80033fc <xPortStartScheduler+0x11c>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d109      	bne.n	8003304 <xPortStartScheduler+0x24>
 80032f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032f4:	f383 8811 	msr	BASEPRI, r3
 80032f8:	f3bf 8f6f 	isb	sy
 80032fc:	f3bf 8f4f 	dsb	sy
 8003300:	613b      	str	r3, [r7, #16]
 8003302:	e7fe      	b.n	8003302 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003304:	4b3c      	ldr	r3, [pc, #240]	; (80033f8 <xPortStartScheduler+0x118>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a3d      	ldr	r2, [pc, #244]	; (8003400 <xPortStartScheduler+0x120>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d109      	bne.n	8003322 <xPortStartScheduler+0x42>
 800330e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003312:	f383 8811 	msr	BASEPRI, r3
 8003316:	f3bf 8f6f 	isb	sy
 800331a:	f3bf 8f4f 	dsb	sy
 800331e:	60fb      	str	r3, [r7, #12]
 8003320:	e7fe      	b.n	8003320 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003322:	4b38      	ldr	r3, [pc, #224]	; (8003404 <xPortStartScheduler+0x124>)
 8003324:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	781b      	ldrb	r3, [r3, #0]
 800332a:	b2db      	uxtb	r3, r3
 800332c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	22ff      	movs	r2, #255	; 0xff
 8003332:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	781b      	ldrb	r3, [r3, #0]
 8003338:	b2db      	uxtb	r3, r3
 800333a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800333c:	78fb      	ldrb	r3, [r7, #3]
 800333e:	b2db      	uxtb	r3, r3
 8003340:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003344:	b2da      	uxtb	r2, r3
 8003346:	4b30      	ldr	r3, [pc, #192]	; (8003408 <xPortStartScheduler+0x128>)
 8003348:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800334a:	4b30      	ldr	r3, [pc, #192]	; (800340c <xPortStartScheduler+0x12c>)
 800334c:	2207      	movs	r2, #7
 800334e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003350:	e009      	b.n	8003366 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8003352:	4b2e      	ldr	r3, [pc, #184]	; (800340c <xPortStartScheduler+0x12c>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	3b01      	subs	r3, #1
 8003358:	4a2c      	ldr	r2, [pc, #176]	; (800340c <xPortStartScheduler+0x12c>)
 800335a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800335c:	78fb      	ldrb	r3, [r7, #3]
 800335e:	b2db      	uxtb	r3, r3
 8003360:	005b      	lsls	r3, r3, #1
 8003362:	b2db      	uxtb	r3, r3
 8003364:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003366:	78fb      	ldrb	r3, [r7, #3]
 8003368:	b2db      	uxtb	r3, r3
 800336a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800336e:	2b80      	cmp	r3, #128	; 0x80
 8003370:	d0ef      	beq.n	8003352 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003372:	4b26      	ldr	r3, [pc, #152]	; (800340c <xPortStartScheduler+0x12c>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f1c3 0307 	rsb	r3, r3, #7
 800337a:	2b04      	cmp	r3, #4
 800337c:	d009      	beq.n	8003392 <xPortStartScheduler+0xb2>
 800337e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003382:	f383 8811 	msr	BASEPRI, r3
 8003386:	f3bf 8f6f 	isb	sy
 800338a:	f3bf 8f4f 	dsb	sy
 800338e:	60bb      	str	r3, [r7, #8]
 8003390:	e7fe      	b.n	8003390 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003392:	4b1e      	ldr	r3, [pc, #120]	; (800340c <xPortStartScheduler+0x12c>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	021b      	lsls	r3, r3, #8
 8003398:	4a1c      	ldr	r2, [pc, #112]	; (800340c <xPortStartScheduler+0x12c>)
 800339a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800339c:	4b1b      	ldr	r3, [pc, #108]	; (800340c <xPortStartScheduler+0x12c>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80033a4:	4a19      	ldr	r2, [pc, #100]	; (800340c <xPortStartScheduler+0x12c>)
 80033a6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	b2da      	uxtb	r2, r3
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80033b0:	4a17      	ldr	r2, [pc, #92]	; (8003410 <xPortStartScheduler+0x130>)
 80033b2:	4b17      	ldr	r3, [pc, #92]	; (8003410 <xPortStartScheduler+0x130>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80033ba:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80033bc:	4a14      	ldr	r2, [pc, #80]	; (8003410 <xPortStartScheduler+0x130>)
 80033be:	4b14      	ldr	r3, [pc, #80]	; (8003410 <xPortStartScheduler+0x130>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80033c6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80033c8:	f000 f8d6 	bl	8003578 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80033cc:	4b11      	ldr	r3, [pc, #68]	; (8003414 <xPortStartScheduler+0x134>)
 80033ce:	2200      	movs	r2, #0
 80033d0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80033d2:	f000 f8f5 	bl	80035c0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80033d6:	4a10      	ldr	r2, [pc, #64]	; (8003418 <xPortStartScheduler+0x138>)
 80033d8:	4b0f      	ldr	r3, [pc, #60]	; (8003418 <xPortStartScheduler+0x138>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80033e0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80033e2:	f7ff ff69 	bl	80032b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80033e6:	f001 fbb5 	bl	8004b54 <vTaskSwitchContext>
	prvTaskExitError();
 80033ea:	f7ff ff25 	bl	8003238 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80033ee:	2300      	movs	r3, #0
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	3718      	adds	r7, #24
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}
 80033f8:	e000ed00 	.word	0xe000ed00
 80033fc:	410fc271 	.word	0x410fc271
 8003400:	410fc270 	.word	0x410fc270
 8003404:	e000e400 	.word	0xe000e400
 8003408:	20000028 	.word	0x20000028
 800340c:	2000002c 	.word	0x2000002c
 8003410:	e000ed20 	.word	0xe000ed20
 8003414:	20000004 	.word	0x20000004
 8003418:	e000ef34 	.word	0xe000ef34

0800341c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800341c:	b480      	push	{r7}
 800341e:	b083      	sub	sp, #12
 8003420:	af00      	add	r7, sp, #0
 8003422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003426:	f383 8811 	msr	BASEPRI, r3
 800342a:	f3bf 8f6f 	isb	sy
 800342e:	f3bf 8f4f 	dsb	sy
 8003432:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003434:	4b0e      	ldr	r3, [pc, #56]	; (8003470 <vPortEnterCritical+0x54>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	3301      	adds	r3, #1
 800343a:	4a0d      	ldr	r2, [pc, #52]	; (8003470 <vPortEnterCritical+0x54>)
 800343c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800343e:	4b0c      	ldr	r3, [pc, #48]	; (8003470 <vPortEnterCritical+0x54>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	2b01      	cmp	r3, #1
 8003444:	d10e      	bne.n	8003464 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003446:	4b0b      	ldr	r3, [pc, #44]	; (8003474 <vPortEnterCritical+0x58>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	b2db      	uxtb	r3, r3
 800344c:	2b00      	cmp	r3, #0
 800344e:	d009      	beq.n	8003464 <vPortEnterCritical+0x48>
 8003450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003454:	f383 8811 	msr	BASEPRI, r3
 8003458:	f3bf 8f6f 	isb	sy
 800345c:	f3bf 8f4f 	dsb	sy
 8003460:	603b      	str	r3, [r7, #0]
 8003462:	e7fe      	b.n	8003462 <vPortEnterCritical+0x46>
	}
}
 8003464:	bf00      	nop
 8003466:	370c      	adds	r7, #12
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr
 8003470:	20000004 	.word	0x20000004
 8003474:	e000ed04 	.word	0xe000ed04

08003478 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003478:	b480      	push	{r7}
 800347a:	b083      	sub	sp, #12
 800347c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800347e:	4b11      	ldr	r3, [pc, #68]	; (80034c4 <vPortExitCritical+0x4c>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d109      	bne.n	800349a <vPortExitCritical+0x22>
 8003486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800348a:	f383 8811 	msr	BASEPRI, r3
 800348e:	f3bf 8f6f 	isb	sy
 8003492:	f3bf 8f4f 	dsb	sy
 8003496:	607b      	str	r3, [r7, #4]
 8003498:	e7fe      	b.n	8003498 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800349a:	4b0a      	ldr	r3, [pc, #40]	; (80034c4 <vPortExitCritical+0x4c>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	3b01      	subs	r3, #1
 80034a0:	4a08      	ldr	r2, [pc, #32]	; (80034c4 <vPortExitCritical+0x4c>)
 80034a2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80034a4:	4b07      	ldr	r3, [pc, #28]	; (80034c4 <vPortExitCritical+0x4c>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d104      	bne.n	80034b6 <vPortExitCritical+0x3e>
 80034ac:	2300      	movs	r3, #0
 80034ae:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80034b6:	bf00      	nop
 80034b8:	370c      	adds	r7, #12
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr
 80034c2:	bf00      	nop
 80034c4:	20000004 	.word	0x20000004
	...

080034d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80034d0:	f3ef 8009 	mrs	r0, PSP
 80034d4:	f3bf 8f6f 	isb	sy
 80034d8:	4b15      	ldr	r3, [pc, #84]	; (8003530 <pxCurrentTCBConst>)
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	f01e 0f10 	tst.w	lr, #16
 80034e0:	bf08      	it	eq
 80034e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80034e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034ea:	6010      	str	r0, [r2, #0]
 80034ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80034f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80034f4:	f380 8811 	msr	BASEPRI, r0
 80034f8:	f3bf 8f4f 	dsb	sy
 80034fc:	f3bf 8f6f 	isb	sy
 8003500:	f001 fb28 	bl	8004b54 <vTaskSwitchContext>
 8003504:	f04f 0000 	mov.w	r0, #0
 8003508:	f380 8811 	msr	BASEPRI, r0
 800350c:	bc09      	pop	{r0, r3}
 800350e:	6819      	ldr	r1, [r3, #0]
 8003510:	6808      	ldr	r0, [r1, #0]
 8003512:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003516:	f01e 0f10 	tst.w	lr, #16
 800351a:	bf08      	it	eq
 800351c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003520:	f380 8809 	msr	PSP, r0
 8003524:	f3bf 8f6f 	isb	sy
 8003528:	4770      	bx	lr
 800352a:	bf00      	nop
 800352c:	f3af 8000 	nop.w

08003530 <pxCurrentTCBConst>:
 8003530:	20003c48 	.word	0x20003c48
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003534:	bf00      	nop
 8003536:	bf00      	nop

08003538 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b082      	sub	sp, #8
 800353c:	af00      	add	r7, sp, #0
	__asm volatile
 800353e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003542:	f383 8811 	msr	BASEPRI, r3
 8003546:	f3bf 8f6f 	isb	sy
 800354a:	f3bf 8f4f 	dsb	sy
 800354e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003550:	f001 fa44 	bl	80049dc <xTaskIncrementTick>
 8003554:	4603      	mov	r3, r0
 8003556:	2b00      	cmp	r3, #0
 8003558:	d003      	beq.n	8003562 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800355a:	4b06      	ldr	r3, [pc, #24]	; (8003574 <SysTick_Handler+0x3c>)
 800355c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003560:	601a      	str	r2, [r3, #0]
 8003562:	2300      	movs	r3, #0
 8003564:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800356c:	bf00      	nop
 800356e:	3708      	adds	r7, #8
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}
 8003574:	e000ed04 	.word	0xe000ed04

08003578 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003578:	b480      	push	{r7}
 800357a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800357c:	4b0b      	ldr	r3, [pc, #44]	; (80035ac <vPortSetupTimerInterrupt+0x34>)
 800357e:	2200      	movs	r2, #0
 8003580:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003582:	4b0b      	ldr	r3, [pc, #44]	; (80035b0 <vPortSetupTimerInterrupt+0x38>)
 8003584:	2200      	movs	r2, #0
 8003586:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003588:	4a0a      	ldr	r2, [pc, #40]	; (80035b4 <vPortSetupTimerInterrupt+0x3c>)
 800358a:	4b0b      	ldr	r3, [pc, #44]	; (80035b8 <vPortSetupTimerInterrupt+0x40>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	490b      	ldr	r1, [pc, #44]	; (80035bc <vPortSetupTimerInterrupt+0x44>)
 8003590:	fba1 1303 	umull	r1, r3, r1, r3
 8003594:	099b      	lsrs	r3, r3, #6
 8003596:	3b01      	subs	r3, #1
 8003598:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800359a:	4b04      	ldr	r3, [pc, #16]	; (80035ac <vPortSetupTimerInterrupt+0x34>)
 800359c:	2207      	movs	r2, #7
 800359e:	601a      	str	r2, [r3, #0]
}
 80035a0:	bf00      	nop
 80035a2:	46bd      	mov	sp, r7
 80035a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a8:	4770      	bx	lr
 80035aa:	bf00      	nop
 80035ac:	e000e010 	.word	0xe000e010
 80035b0:	e000e018 	.word	0xe000e018
 80035b4:	e000e014 	.word	0xe000e014
 80035b8:	20000008 	.word	0x20000008
 80035bc:	10624dd3 	.word	0x10624dd3

080035c0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80035c0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80035d0 <vPortEnableVFP+0x10>
 80035c4:	6801      	ldr	r1, [r0, #0]
 80035c6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80035ca:	6001      	str	r1, [r0, #0]
 80035cc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80035ce:	bf00      	nop
 80035d0:	e000ed88 	.word	0xe000ed88

080035d4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80035d4:	b480      	push	{r7}
 80035d6:	b085      	sub	sp, #20
 80035d8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80035da:	f3ef 8305 	mrs	r3, IPSR
 80035de:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2b0f      	cmp	r3, #15
 80035e4:	d913      	bls.n	800360e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80035e6:	4a16      	ldr	r2, [pc, #88]	; (8003640 <vPortValidateInterruptPriority+0x6c>)
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	4413      	add	r3, r2
 80035ec:	781b      	ldrb	r3, [r3, #0]
 80035ee:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80035f0:	4b14      	ldr	r3, [pc, #80]	; (8003644 <vPortValidateInterruptPriority+0x70>)
 80035f2:	781b      	ldrb	r3, [r3, #0]
 80035f4:	7afa      	ldrb	r2, [r7, #11]
 80035f6:	429a      	cmp	r2, r3
 80035f8:	d209      	bcs.n	800360e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80035fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035fe:	f383 8811 	msr	BASEPRI, r3
 8003602:	f3bf 8f6f 	isb	sy
 8003606:	f3bf 8f4f 	dsb	sy
 800360a:	607b      	str	r3, [r7, #4]
 800360c:	e7fe      	b.n	800360c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800360e:	4b0e      	ldr	r3, [pc, #56]	; (8003648 <vPortValidateInterruptPriority+0x74>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003616:	4b0d      	ldr	r3, [pc, #52]	; (800364c <vPortValidateInterruptPriority+0x78>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	429a      	cmp	r2, r3
 800361c:	d909      	bls.n	8003632 <vPortValidateInterruptPriority+0x5e>
 800361e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003622:	f383 8811 	msr	BASEPRI, r3
 8003626:	f3bf 8f6f 	isb	sy
 800362a:	f3bf 8f4f 	dsb	sy
 800362e:	603b      	str	r3, [r7, #0]
 8003630:	e7fe      	b.n	8003630 <vPortValidateInterruptPriority+0x5c>
	}
 8003632:	bf00      	nop
 8003634:	3714      	adds	r7, #20
 8003636:	46bd      	mov	sp, r7
 8003638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363c:	4770      	bx	lr
 800363e:	bf00      	nop
 8003640:	e000e3f0 	.word	0xe000e3f0
 8003644:	20000028 	.word	0x20000028
 8003648:	e000ed0c 	.word	0xe000ed0c
 800364c:	2000002c 	.word	0x2000002c

08003650 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b08a      	sub	sp, #40	; 0x28
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003658:	2300      	movs	r3, #0
 800365a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800365c:	f001 f914 	bl	8004888 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003660:	4b57      	ldr	r3, [pc, #348]	; (80037c0 <pvPortMalloc+0x170>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d101      	bne.n	800366c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003668:	f000 f90c 	bl	8003884 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800366c:	4b55      	ldr	r3, [pc, #340]	; (80037c4 <pvPortMalloc+0x174>)
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	4013      	ands	r3, r2
 8003674:	2b00      	cmp	r3, #0
 8003676:	f040 808c 	bne.w	8003792 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d01c      	beq.n	80036ba <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8003680:	2208      	movs	r2, #8
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	4413      	add	r3, r2
 8003686:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	f003 0307 	and.w	r3, r3, #7
 800368e:	2b00      	cmp	r3, #0
 8003690:	d013      	beq.n	80036ba <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	f023 0307 	bic.w	r3, r3, #7
 8003698:	3308      	adds	r3, #8
 800369a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	f003 0307 	and.w	r3, r3, #7
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d009      	beq.n	80036ba <pvPortMalloc+0x6a>
 80036a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036aa:	f383 8811 	msr	BASEPRI, r3
 80036ae:	f3bf 8f6f 	isb	sy
 80036b2:	f3bf 8f4f 	dsb	sy
 80036b6:	617b      	str	r3, [r7, #20]
 80036b8:	e7fe      	b.n	80036b8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d068      	beq.n	8003792 <pvPortMalloc+0x142>
 80036c0:	4b41      	ldr	r3, [pc, #260]	; (80037c8 <pvPortMalloc+0x178>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	687a      	ldr	r2, [r7, #4]
 80036c6:	429a      	cmp	r2, r3
 80036c8:	d863      	bhi.n	8003792 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80036ca:	4b40      	ldr	r3, [pc, #256]	; (80037cc <pvPortMalloc+0x17c>)
 80036cc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80036ce:	4b3f      	ldr	r3, [pc, #252]	; (80037cc <pvPortMalloc+0x17c>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80036d4:	e004      	b.n	80036e0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80036d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80036da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80036e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e2:	685a      	ldr	r2, [r3, #4]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	429a      	cmp	r2, r3
 80036e8:	d203      	bcs.n	80036f2 <pvPortMalloc+0xa2>
 80036ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d1f1      	bne.n	80036d6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80036f2:	4b33      	ldr	r3, [pc, #204]	; (80037c0 <pvPortMalloc+0x170>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d04a      	beq.n	8003792 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80036fc:	6a3b      	ldr	r3, [r7, #32]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	2208      	movs	r2, #8
 8003702:	4413      	add	r3, r2
 8003704:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	6a3b      	ldr	r3, [r7, #32]
 800370c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800370e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003710:	685a      	ldr	r2, [r3, #4]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	1ad2      	subs	r2, r2, r3
 8003716:	2308      	movs	r3, #8
 8003718:	005b      	lsls	r3, r3, #1
 800371a:	429a      	cmp	r2, r3
 800371c:	d91e      	bls.n	800375c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800371e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	4413      	add	r3, r2
 8003724:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003726:	69bb      	ldr	r3, [r7, #24]
 8003728:	f003 0307 	and.w	r3, r3, #7
 800372c:	2b00      	cmp	r3, #0
 800372e:	d009      	beq.n	8003744 <pvPortMalloc+0xf4>
 8003730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003734:	f383 8811 	msr	BASEPRI, r3
 8003738:	f3bf 8f6f 	isb	sy
 800373c:	f3bf 8f4f 	dsb	sy
 8003740:	613b      	str	r3, [r7, #16]
 8003742:	e7fe      	b.n	8003742 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003746:	685a      	ldr	r2, [r3, #4]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	1ad2      	subs	r2, r2, r3
 800374c:	69bb      	ldr	r3, [r7, #24]
 800374e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003756:	69b8      	ldr	r0, [r7, #24]
 8003758:	f000 f8f6 	bl	8003948 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800375c:	4b1a      	ldr	r3, [pc, #104]	; (80037c8 <pvPortMalloc+0x178>)
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	4a18      	ldr	r2, [pc, #96]	; (80037c8 <pvPortMalloc+0x178>)
 8003768:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800376a:	4b17      	ldr	r3, [pc, #92]	; (80037c8 <pvPortMalloc+0x178>)
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	4b18      	ldr	r3, [pc, #96]	; (80037d0 <pvPortMalloc+0x180>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	429a      	cmp	r2, r3
 8003774:	d203      	bcs.n	800377e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003776:	4b14      	ldr	r3, [pc, #80]	; (80037c8 <pvPortMalloc+0x178>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a15      	ldr	r2, [pc, #84]	; (80037d0 <pvPortMalloc+0x180>)
 800377c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800377e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003780:	685a      	ldr	r2, [r3, #4]
 8003782:	4b10      	ldr	r3, [pc, #64]	; (80037c4 <pvPortMalloc+0x174>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	431a      	orrs	r2, r3
 8003788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800378c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378e:	2200      	movs	r2, #0
 8003790:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003792:	f001 f887 	bl	80048a4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	f003 0307 	and.w	r3, r3, #7
 800379c:	2b00      	cmp	r3, #0
 800379e:	d009      	beq.n	80037b4 <pvPortMalloc+0x164>
 80037a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037a4:	f383 8811 	msr	BASEPRI, r3
 80037a8:	f3bf 8f6f 	isb	sy
 80037ac:	f3bf 8f4f 	dsb	sy
 80037b0:	60fb      	str	r3, [r7, #12]
 80037b2:	e7fe      	b.n	80037b2 <pvPortMalloc+0x162>
	return pvReturn;
 80037b4:	69fb      	ldr	r3, [r7, #28]
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3728      	adds	r7, #40	; 0x28
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}
 80037be:	bf00      	nop
 80037c0:	20003c38 	.word	0x20003c38
 80037c4:	20003c44 	.word	0x20003c44
 80037c8:	20003c3c 	.word	0x20003c3c
 80037cc:	20003c30 	.word	0x20003c30
 80037d0:	20003c40 	.word	0x20003c40

080037d4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b086      	sub	sp, #24
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d046      	beq.n	8003874 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80037e6:	2308      	movs	r3, #8
 80037e8:	425b      	negs	r3, r3
 80037ea:	697a      	ldr	r2, [r7, #20]
 80037ec:	4413      	add	r3, r2
 80037ee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	685a      	ldr	r2, [r3, #4]
 80037f8:	4b20      	ldr	r3, [pc, #128]	; (800387c <vPortFree+0xa8>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4013      	ands	r3, r2
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d109      	bne.n	8003816 <vPortFree+0x42>
 8003802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003806:	f383 8811 	msr	BASEPRI, r3
 800380a:	f3bf 8f6f 	isb	sy
 800380e:	f3bf 8f4f 	dsb	sy
 8003812:	60fb      	str	r3, [r7, #12]
 8003814:	e7fe      	b.n	8003814 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d009      	beq.n	8003832 <vPortFree+0x5e>
 800381e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003822:	f383 8811 	msr	BASEPRI, r3
 8003826:	f3bf 8f6f 	isb	sy
 800382a:	f3bf 8f4f 	dsb	sy
 800382e:	60bb      	str	r3, [r7, #8]
 8003830:	e7fe      	b.n	8003830 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	685a      	ldr	r2, [r3, #4]
 8003836:	4b11      	ldr	r3, [pc, #68]	; (800387c <vPortFree+0xa8>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4013      	ands	r3, r2
 800383c:	2b00      	cmp	r3, #0
 800383e:	d019      	beq.n	8003874 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d115      	bne.n	8003874 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	685a      	ldr	r2, [r3, #4]
 800384c:	4b0b      	ldr	r3, [pc, #44]	; (800387c <vPortFree+0xa8>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	43db      	mvns	r3, r3
 8003852:	401a      	ands	r2, r3
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003858:	f001 f816 	bl	8004888 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	685a      	ldr	r2, [r3, #4]
 8003860:	4b07      	ldr	r3, [pc, #28]	; (8003880 <vPortFree+0xac>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4413      	add	r3, r2
 8003866:	4a06      	ldr	r2, [pc, #24]	; (8003880 <vPortFree+0xac>)
 8003868:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800386a:	6938      	ldr	r0, [r7, #16]
 800386c:	f000 f86c 	bl	8003948 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8003870:	f001 f818 	bl	80048a4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003874:	bf00      	nop
 8003876:	3718      	adds	r7, #24
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}
 800387c:	20003c44 	.word	0x20003c44
 8003880:	20003c3c 	.word	0x20003c3c

08003884 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003884:	b480      	push	{r7}
 8003886:	b085      	sub	sp, #20
 8003888:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800388a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800388e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003890:	4b27      	ldr	r3, [pc, #156]	; (8003930 <prvHeapInit+0xac>)
 8003892:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f003 0307 	and.w	r3, r3, #7
 800389a:	2b00      	cmp	r3, #0
 800389c:	d00c      	beq.n	80038b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	3307      	adds	r3, #7
 80038a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	f023 0307 	bic.w	r3, r3, #7
 80038aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80038ac:	68ba      	ldr	r2, [r7, #8]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	4a1f      	ldr	r2, [pc, #124]	; (8003930 <prvHeapInit+0xac>)
 80038b4:	4413      	add	r3, r2
 80038b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80038bc:	4a1d      	ldr	r2, [pc, #116]	; (8003934 <prvHeapInit+0xb0>)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80038c2:	4b1c      	ldr	r3, [pc, #112]	; (8003934 <prvHeapInit+0xb0>)
 80038c4:	2200      	movs	r2, #0
 80038c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80038c8:	687a      	ldr	r2, [r7, #4]
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	4413      	add	r3, r2
 80038ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80038d0:	2208      	movs	r2, #8
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	1a9b      	subs	r3, r3, r2
 80038d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	f023 0307 	bic.w	r3, r3, #7
 80038de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	4a15      	ldr	r2, [pc, #84]	; (8003938 <prvHeapInit+0xb4>)
 80038e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80038e6:	4b14      	ldr	r3, [pc, #80]	; (8003938 <prvHeapInit+0xb4>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	2200      	movs	r2, #0
 80038ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80038ee:	4b12      	ldr	r3, [pc, #72]	; (8003938 <prvHeapInit+0xb4>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	2200      	movs	r2, #0
 80038f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	68fa      	ldr	r2, [r7, #12]
 80038fe:	1ad2      	subs	r2, r2, r3
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003904:	4b0c      	ldr	r3, [pc, #48]	; (8003938 <prvHeapInit+0xb4>)
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	4a0a      	ldr	r2, [pc, #40]	; (800393c <prvHeapInit+0xb8>)
 8003912:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	4a09      	ldr	r2, [pc, #36]	; (8003940 <prvHeapInit+0xbc>)
 800391a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800391c:	4b09      	ldr	r3, [pc, #36]	; (8003944 <prvHeapInit+0xc0>)
 800391e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003922:	601a      	str	r2, [r3, #0]
}
 8003924:	bf00      	nop
 8003926:	3714      	adds	r7, #20
 8003928:	46bd      	mov	sp, r7
 800392a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392e:	4770      	bx	lr
 8003930:	20000030 	.word	0x20000030
 8003934:	20003c30 	.word	0x20003c30
 8003938:	20003c38 	.word	0x20003c38
 800393c:	20003c40 	.word	0x20003c40
 8003940:	20003c3c 	.word	0x20003c3c
 8003944:	20003c44 	.word	0x20003c44

08003948 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003948:	b480      	push	{r7}
 800394a:	b085      	sub	sp, #20
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003950:	4b28      	ldr	r3, [pc, #160]	; (80039f4 <prvInsertBlockIntoFreeList+0xac>)
 8003952:	60fb      	str	r3, [r7, #12]
 8003954:	e002      	b.n	800395c <prvInsertBlockIntoFreeList+0x14>
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	60fb      	str	r3, [r7, #12]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	429a      	cmp	r2, r3
 8003964:	d3f7      	bcc.n	8003956 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	68ba      	ldr	r2, [r7, #8]
 8003970:	441a      	add	r2, r3
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	429a      	cmp	r2, r3
 8003976:	d108      	bne.n	800398a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	685a      	ldr	r2, [r3, #4]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	441a      	add	r2, r3
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	68ba      	ldr	r2, [r7, #8]
 8003994:	441a      	add	r2, r3
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	429a      	cmp	r2, r3
 800399c:	d118      	bne.n	80039d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	4b15      	ldr	r3, [pc, #84]	; (80039f8 <prvInsertBlockIntoFreeList+0xb0>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d00d      	beq.n	80039c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	685a      	ldr	r2, [r3, #4]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	441a      	add	r2, r3
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	601a      	str	r2, [r3, #0]
 80039c4:	e008      	b.n	80039d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80039c6:	4b0c      	ldr	r3, [pc, #48]	; (80039f8 <prvInsertBlockIntoFreeList+0xb0>)
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	601a      	str	r2, [r3, #0]
 80039ce:	e003      	b.n	80039d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80039d8:	68fa      	ldr	r2, [r7, #12]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	429a      	cmp	r2, r3
 80039de:	d002      	beq.n	80039e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	687a      	ldr	r2, [r7, #4]
 80039e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80039e6:	bf00      	nop
 80039e8:	3714      	adds	r7, #20
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr
 80039f2:	bf00      	nop
 80039f4:	20003c30 	.word	0x20003c30
 80039f8:	20003c38 	.word	0x20003c38

080039fc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b084      	sub	sp, #16
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d109      	bne.n	8003a24 <xQueueGenericReset+0x28>
 8003a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a14:	f383 8811 	msr	BASEPRI, r3
 8003a18:	f3bf 8f6f 	isb	sy
 8003a1c:	f3bf 8f4f 	dsb	sy
 8003a20:	60bb      	str	r3, [r7, #8]
 8003a22:	e7fe      	b.n	8003a22 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8003a24:	f7ff fcfa 	bl	800341c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a30:	68f9      	ldr	r1, [r7, #12]
 8003a32:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003a34:	fb01 f303 	mul.w	r3, r1, r3
 8003a38:	441a      	add	r2, r3
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2200      	movs	r2, #0
 8003a42:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a54:	3b01      	subs	r3, #1
 8003a56:	68f9      	ldr	r1, [r7, #12]
 8003a58:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003a5a:	fb01 f303 	mul.w	r3, r1, r3
 8003a5e:	441a      	add	r2, r3
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	22ff      	movs	r2, #255	; 0xff
 8003a68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	22ff      	movs	r2, #255	; 0xff
 8003a70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d114      	bne.n	8003aa4 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	691b      	ldr	r3, [r3, #16]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d01a      	beq.n	8003ab8 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	3310      	adds	r3, #16
 8003a86:	4618      	mov	r0, r3
 8003a88:	f001 f8e2 	bl	8004c50 <xTaskRemoveFromEventList>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d012      	beq.n	8003ab8 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003a92:	4b0d      	ldr	r3, [pc, #52]	; (8003ac8 <xQueueGenericReset+0xcc>)
 8003a94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a98:	601a      	str	r2, [r3, #0]
 8003a9a:	f3bf 8f4f 	dsb	sy
 8003a9e:	f3bf 8f6f 	isb	sy
 8003aa2:	e009      	b.n	8003ab8 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	3310      	adds	r3, #16
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f7ff fadd 	bl	8003068 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	3324      	adds	r3, #36	; 0x24
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f7ff fad8 	bl	8003068 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003ab8:	f7ff fcde 	bl	8003478 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003abc:	2301      	movs	r3, #1
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3710      	adds	r7, #16
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	bf00      	nop
 8003ac8:	e000ed04 	.word	0xe000ed04

08003acc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b08e      	sub	sp, #56	; 0x38
 8003ad0:	af02      	add	r7, sp, #8
 8003ad2:	60f8      	str	r0, [r7, #12]
 8003ad4:	60b9      	str	r1, [r7, #8]
 8003ad6:	607a      	str	r2, [r7, #4]
 8003ad8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d109      	bne.n	8003af4 <xQueueGenericCreateStatic+0x28>
 8003ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ae4:	f383 8811 	msr	BASEPRI, r3
 8003ae8:	f3bf 8f6f 	isb	sy
 8003aec:	f3bf 8f4f 	dsb	sy
 8003af0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003af2:	e7fe      	b.n	8003af2 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d109      	bne.n	8003b0e <xQueueGenericCreateStatic+0x42>
 8003afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003afe:	f383 8811 	msr	BASEPRI, r3
 8003b02:	f3bf 8f6f 	isb	sy
 8003b06:	f3bf 8f4f 	dsb	sy
 8003b0a:	627b      	str	r3, [r7, #36]	; 0x24
 8003b0c:	e7fe      	b.n	8003b0c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d002      	beq.n	8003b1a <xQueueGenericCreateStatic+0x4e>
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d001      	beq.n	8003b1e <xQueueGenericCreateStatic+0x52>
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e000      	b.n	8003b20 <xQueueGenericCreateStatic+0x54>
 8003b1e:	2300      	movs	r3, #0
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d109      	bne.n	8003b38 <xQueueGenericCreateStatic+0x6c>
 8003b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b28:	f383 8811 	msr	BASEPRI, r3
 8003b2c:	f3bf 8f6f 	isb	sy
 8003b30:	f3bf 8f4f 	dsb	sy
 8003b34:	623b      	str	r3, [r7, #32]
 8003b36:	e7fe      	b.n	8003b36 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d102      	bne.n	8003b44 <xQueueGenericCreateStatic+0x78>
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d101      	bne.n	8003b48 <xQueueGenericCreateStatic+0x7c>
 8003b44:	2301      	movs	r3, #1
 8003b46:	e000      	b.n	8003b4a <xQueueGenericCreateStatic+0x7e>
 8003b48:	2300      	movs	r3, #0
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d109      	bne.n	8003b62 <xQueueGenericCreateStatic+0x96>
 8003b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b52:	f383 8811 	msr	BASEPRI, r3
 8003b56:	f3bf 8f6f 	isb	sy
 8003b5a:	f3bf 8f4f 	dsb	sy
 8003b5e:	61fb      	str	r3, [r7, #28]
 8003b60:	e7fe      	b.n	8003b60 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003b62:	2348      	movs	r3, #72	; 0x48
 8003b64:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	2b48      	cmp	r3, #72	; 0x48
 8003b6a:	d009      	beq.n	8003b80 <xQueueGenericCreateStatic+0xb4>
 8003b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b70:	f383 8811 	msr	BASEPRI, r3
 8003b74:	f3bf 8f6f 	isb	sy
 8003b78:	f3bf 8f4f 	dsb	sy
 8003b7c:	61bb      	str	r3, [r7, #24]
 8003b7e:	e7fe      	b.n	8003b7e <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d00d      	beq.n	8003ba6 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003b92:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b98:	9300      	str	r3, [sp, #0]
 8003b9a:	4613      	mov	r3, r2
 8003b9c:	687a      	ldr	r2, [r7, #4]
 8003b9e:	68b9      	ldr	r1, [r7, #8]
 8003ba0:	68f8      	ldr	r0, [r7, #12]
 8003ba2:	f000 f842 	bl	8003c2a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3730      	adds	r7, #48	; 0x30
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}

08003bb0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b08a      	sub	sp, #40	; 0x28
 8003bb4:	af02      	add	r7, sp, #8
 8003bb6:	60f8      	str	r0, [r7, #12]
 8003bb8:	60b9      	str	r1, [r7, #8]
 8003bba:	4613      	mov	r3, r2
 8003bbc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d109      	bne.n	8003bd8 <xQueueGenericCreate+0x28>
 8003bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bc8:	f383 8811 	msr	BASEPRI, r3
 8003bcc:	f3bf 8f6f 	isb	sy
 8003bd0:	f3bf 8f4f 	dsb	sy
 8003bd4:	613b      	str	r3, [r7, #16]
 8003bd6:	e7fe      	b.n	8003bd6 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d102      	bne.n	8003be4 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003bde:	2300      	movs	r3, #0
 8003be0:	61fb      	str	r3, [r7, #28]
 8003be2:	e004      	b.n	8003bee <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	68ba      	ldr	r2, [r7, #8]
 8003be8:	fb02 f303 	mul.w	r3, r2, r3
 8003bec:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	3348      	adds	r3, #72	; 0x48
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f7ff fd2c 	bl	8003650 <pvPortMalloc>
 8003bf8:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003bfa:	69bb      	ldr	r3, [r7, #24]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d00f      	beq.n	8003c20 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8003c00:	69bb      	ldr	r3, [r7, #24]
 8003c02:	3348      	adds	r3, #72	; 0x48
 8003c04:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003c06:	69bb      	ldr	r3, [r7, #24]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003c0e:	79fa      	ldrb	r2, [r7, #7]
 8003c10:	69bb      	ldr	r3, [r7, #24]
 8003c12:	9300      	str	r3, [sp, #0]
 8003c14:	4613      	mov	r3, r2
 8003c16:	697a      	ldr	r2, [r7, #20]
 8003c18:	68b9      	ldr	r1, [r7, #8]
 8003c1a:	68f8      	ldr	r0, [r7, #12]
 8003c1c:	f000 f805 	bl	8003c2a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003c20:	69bb      	ldr	r3, [r7, #24]
	}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3720      	adds	r7, #32
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}

08003c2a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003c2a:	b580      	push	{r7, lr}
 8003c2c:	b084      	sub	sp, #16
 8003c2e:	af00      	add	r7, sp, #0
 8003c30:	60f8      	str	r0, [r7, #12]
 8003c32:	60b9      	str	r1, [r7, #8]
 8003c34:	607a      	str	r2, [r7, #4]
 8003c36:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d103      	bne.n	8003c46 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003c3e:	69bb      	ldr	r3, [r7, #24]
 8003c40:	69ba      	ldr	r2, [r7, #24]
 8003c42:	601a      	str	r2, [r3, #0]
 8003c44:	e002      	b.n	8003c4c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003c46:	69bb      	ldr	r3, [r7, #24]
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003c4c:	69bb      	ldr	r3, [r7, #24]
 8003c4e:	68fa      	ldr	r2, [r7, #12]
 8003c50:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003c52:	69bb      	ldr	r3, [r7, #24]
 8003c54:	68ba      	ldr	r2, [r7, #8]
 8003c56:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003c58:	2101      	movs	r1, #1
 8003c5a:	69b8      	ldr	r0, [r7, #24]
 8003c5c:	f7ff fece 	bl	80039fc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003c60:	bf00      	nop
 8003c62:	3710      	adds	r7, #16
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}

08003c68 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b08e      	sub	sp, #56	; 0x38
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	60f8      	str	r0, [r7, #12]
 8003c70:	60b9      	str	r1, [r7, #8]
 8003c72:	607a      	str	r2, [r7, #4]
 8003c74:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003c76:	2300      	movs	r3, #0
 8003c78:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d109      	bne.n	8003c98 <xQueueGenericSend+0x30>
 8003c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c88:	f383 8811 	msr	BASEPRI, r3
 8003c8c:	f3bf 8f6f 	isb	sy
 8003c90:	f3bf 8f4f 	dsb	sy
 8003c94:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c96:	e7fe      	b.n	8003c96 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d103      	bne.n	8003ca6 <xQueueGenericSend+0x3e>
 8003c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d101      	bne.n	8003caa <xQueueGenericSend+0x42>
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e000      	b.n	8003cac <xQueueGenericSend+0x44>
 8003caa:	2300      	movs	r3, #0
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d109      	bne.n	8003cc4 <xQueueGenericSend+0x5c>
 8003cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cb4:	f383 8811 	msr	BASEPRI, r3
 8003cb8:	f3bf 8f6f 	isb	sy
 8003cbc:	f3bf 8f4f 	dsb	sy
 8003cc0:	627b      	str	r3, [r7, #36]	; 0x24
 8003cc2:	e7fe      	b.n	8003cc2 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	2b02      	cmp	r3, #2
 8003cc8:	d103      	bne.n	8003cd2 <xQueueGenericSend+0x6a>
 8003cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ccc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d101      	bne.n	8003cd6 <xQueueGenericSend+0x6e>
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e000      	b.n	8003cd8 <xQueueGenericSend+0x70>
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d109      	bne.n	8003cf0 <xQueueGenericSend+0x88>
 8003cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ce0:	f383 8811 	msr	BASEPRI, r3
 8003ce4:	f3bf 8f6f 	isb	sy
 8003ce8:	f3bf 8f4f 	dsb	sy
 8003cec:	623b      	str	r3, [r7, #32]
 8003cee:	e7fe      	b.n	8003cee <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003cf0:	f001 f96a 	bl	8004fc8 <xTaskGetSchedulerState>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d102      	bne.n	8003d00 <xQueueGenericSend+0x98>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d101      	bne.n	8003d04 <xQueueGenericSend+0x9c>
 8003d00:	2301      	movs	r3, #1
 8003d02:	e000      	b.n	8003d06 <xQueueGenericSend+0x9e>
 8003d04:	2300      	movs	r3, #0
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d109      	bne.n	8003d1e <xQueueGenericSend+0xb6>
 8003d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d0e:	f383 8811 	msr	BASEPRI, r3
 8003d12:	f3bf 8f6f 	isb	sy
 8003d16:	f3bf 8f4f 	dsb	sy
 8003d1a:	61fb      	str	r3, [r7, #28]
 8003d1c:	e7fe      	b.n	8003d1c <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003d1e:	f7ff fb7d 	bl	800341c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d302      	bcc.n	8003d34 <xQueueGenericSend+0xcc>
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	2b02      	cmp	r3, #2
 8003d32:	d129      	bne.n	8003d88 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003d34:	683a      	ldr	r2, [r7, #0]
 8003d36:	68b9      	ldr	r1, [r7, #8]
 8003d38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003d3a:	f000 fa7c 	bl	8004236 <prvCopyDataToQueue>
 8003d3e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d010      	beq.n	8003d6a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d4a:	3324      	adds	r3, #36	; 0x24
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f000 ff7f 	bl	8004c50 <xTaskRemoveFromEventList>
 8003d52:	4603      	mov	r3, r0
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d013      	beq.n	8003d80 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003d58:	4b3f      	ldr	r3, [pc, #252]	; (8003e58 <xQueueGenericSend+0x1f0>)
 8003d5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d5e:	601a      	str	r2, [r3, #0]
 8003d60:	f3bf 8f4f 	dsb	sy
 8003d64:	f3bf 8f6f 	isb	sy
 8003d68:	e00a      	b.n	8003d80 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d007      	beq.n	8003d80 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003d70:	4b39      	ldr	r3, [pc, #228]	; (8003e58 <xQueueGenericSend+0x1f0>)
 8003d72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d76:	601a      	str	r2, [r3, #0]
 8003d78:	f3bf 8f4f 	dsb	sy
 8003d7c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003d80:	f7ff fb7a 	bl	8003478 <vPortExitCritical>
				return pdPASS;
 8003d84:	2301      	movs	r3, #1
 8003d86:	e063      	b.n	8003e50 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d103      	bne.n	8003d96 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003d8e:	f7ff fb73 	bl	8003478 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003d92:	2300      	movs	r3, #0
 8003d94:	e05c      	b.n	8003e50 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003d96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d106      	bne.n	8003daa <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003d9c:	f107 0314 	add.w	r3, r7, #20
 8003da0:	4618      	mov	r0, r3
 8003da2:	f000 ffb7 	bl	8004d14 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003da6:	2301      	movs	r3, #1
 8003da8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003daa:	f7ff fb65 	bl	8003478 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003dae:	f000 fd6b 	bl	8004888 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003db2:	f7ff fb33 	bl	800341c <vPortEnterCritical>
 8003db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003db8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003dbc:	b25b      	sxtb	r3, r3
 8003dbe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003dc2:	d103      	bne.n	8003dcc <xQueueGenericSend+0x164>
 8003dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003dd2:	b25b      	sxtb	r3, r3
 8003dd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003dd8:	d103      	bne.n	8003de2 <xQueueGenericSend+0x17a>
 8003dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ddc:	2200      	movs	r2, #0
 8003dde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003de2:	f7ff fb49 	bl	8003478 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003de6:	1d3a      	adds	r2, r7, #4
 8003de8:	f107 0314 	add.w	r3, r7, #20
 8003dec:	4611      	mov	r1, r2
 8003dee:	4618      	mov	r0, r3
 8003df0:	f000 ffa6 	bl	8004d40 <xTaskCheckForTimeOut>
 8003df4:	4603      	mov	r3, r0
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d124      	bne.n	8003e44 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003dfa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003dfc:	f000 fb13 	bl	8004426 <prvIsQueueFull>
 8003e00:	4603      	mov	r3, r0
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d018      	beq.n	8003e38 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e08:	3310      	adds	r3, #16
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	4611      	mov	r1, r2
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f000 fefa 	bl	8004c08 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003e14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003e16:	f000 fa9e 	bl	8004356 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003e1a:	f000 fd43 	bl	80048a4 <xTaskResumeAll>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	f47f af7c 	bne.w	8003d1e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8003e26:	4b0c      	ldr	r3, [pc, #48]	; (8003e58 <xQueueGenericSend+0x1f0>)
 8003e28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e2c:	601a      	str	r2, [r3, #0]
 8003e2e:	f3bf 8f4f 	dsb	sy
 8003e32:	f3bf 8f6f 	isb	sy
 8003e36:	e772      	b.n	8003d1e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003e38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003e3a:	f000 fa8c 	bl	8004356 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003e3e:	f000 fd31 	bl	80048a4 <xTaskResumeAll>
 8003e42:	e76c      	b.n	8003d1e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003e44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003e46:	f000 fa86 	bl	8004356 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003e4a:	f000 fd2b 	bl	80048a4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003e4e:	2300      	movs	r3, #0
		}
	}
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	3738      	adds	r7, #56	; 0x38
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}
 8003e58:	e000ed04 	.word	0xe000ed04

08003e5c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b08e      	sub	sp, #56	; 0x38
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	60f8      	str	r0, [r7, #12]
 8003e64:	60b9      	str	r1, [r7, #8]
 8003e66:	607a      	str	r2, [r7, #4]
 8003e68:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d109      	bne.n	8003e88 <xQueueGenericSendFromISR+0x2c>
 8003e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e78:	f383 8811 	msr	BASEPRI, r3
 8003e7c:	f3bf 8f6f 	isb	sy
 8003e80:	f3bf 8f4f 	dsb	sy
 8003e84:	627b      	str	r3, [r7, #36]	; 0x24
 8003e86:	e7fe      	b.n	8003e86 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d103      	bne.n	8003e96 <xQueueGenericSendFromISR+0x3a>
 8003e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d101      	bne.n	8003e9a <xQueueGenericSendFromISR+0x3e>
 8003e96:	2301      	movs	r3, #1
 8003e98:	e000      	b.n	8003e9c <xQueueGenericSendFromISR+0x40>
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d109      	bne.n	8003eb4 <xQueueGenericSendFromISR+0x58>
 8003ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ea4:	f383 8811 	msr	BASEPRI, r3
 8003ea8:	f3bf 8f6f 	isb	sy
 8003eac:	f3bf 8f4f 	dsb	sy
 8003eb0:	623b      	str	r3, [r7, #32]
 8003eb2:	e7fe      	b.n	8003eb2 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	2b02      	cmp	r3, #2
 8003eb8:	d103      	bne.n	8003ec2 <xQueueGenericSendFromISR+0x66>
 8003eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ebc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ebe:	2b01      	cmp	r3, #1
 8003ec0:	d101      	bne.n	8003ec6 <xQueueGenericSendFromISR+0x6a>
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e000      	b.n	8003ec8 <xQueueGenericSendFromISR+0x6c>
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d109      	bne.n	8003ee0 <xQueueGenericSendFromISR+0x84>
 8003ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ed0:	f383 8811 	msr	BASEPRI, r3
 8003ed4:	f3bf 8f6f 	isb	sy
 8003ed8:	f3bf 8f4f 	dsb	sy
 8003edc:	61fb      	str	r3, [r7, #28]
 8003ede:	e7fe      	b.n	8003ede <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003ee0:	f7ff fb78 	bl	80035d4 <vPortValidateInterruptPriority>
	__asm volatile
 8003ee4:	f3ef 8211 	mrs	r2, BASEPRI
 8003ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eec:	f383 8811 	msr	BASEPRI, r3
 8003ef0:	f3bf 8f6f 	isb	sy
 8003ef4:	f3bf 8f4f 	dsb	sy
 8003ef8:	61ba      	str	r2, [r7, #24]
 8003efa:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8003efc:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003efe:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d302      	bcc.n	8003f12 <xQueueGenericSendFromISR+0xb6>
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	2b02      	cmp	r3, #2
 8003f10:	d12c      	bne.n	8003f6c <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f14:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003f18:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003f1c:	683a      	ldr	r2, [r7, #0]
 8003f1e:	68b9      	ldr	r1, [r7, #8]
 8003f20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003f22:	f000 f988 	bl	8004236 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003f26:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8003f2a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f2e:	d112      	bne.n	8003f56 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d016      	beq.n	8003f66 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f3a:	3324      	adds	r3, #36	; 0x24
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f000 fe87 	bl	8004c50 <xTaskRemoveFromEventList>
 8003f42:	4603      	mov	r3, r0
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d00e      	beq.n	8003f66 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d00b      	beq.n	8003f66 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2201      	movs	r2, #1
 8003f52:	601a      	str	r2, [r3, #0]
 8003f54:	e007      	b.n	8003f66 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003f56:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003f5a:	3301      	adds	r3, #1
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	b25a      	sxtb	r2, r3
 8003f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003f66:	2301      	movs	r3, #1
 8003f68:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8003f6a:	e001      	b.n	8003f70 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	637b      	str	r3, [r7, #52]	; 0x34
 8003f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f72:	613b      	str	r3, [r7, #16]
	__asm volatile
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003f7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	3738      	adds	r7, #56	; 0x38
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}

08003f84 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b08c      	sub	sp, #48	; 0x30
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	60f8      	str	r0, [r7, #12]
 8003f8c:	60b9      	str	r1, [r7, #8]
 8003f8e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003f90:	2300      	movs	r3, #0
 8003f92:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d109      	bne.n	8003fb2 <xQueueReceive+0x2e>
	__asm volatile
 8003f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fa2:	f383 8811 	msr	BASEPRI, r3
 8003fa6:	f3bf 8f6f 	isb	sy
 8003faa:	f3bf 8f4f 	dsb	sy
 8003fae:	623b      	str	r3, [r7, #32]
 8003fb0:	e7fe      	b.n	8003fb0 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d103      	bne.n	8003fc0 <xQueueReceive+0x3c>
 8003fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d101      	bne.n	8003fc4 <xQueueReceive+0x40>
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e000      	b.n	8003fc6 <xQueueReceive+0x42>
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d109      	bne.n	8003fde <xQueueReceive+0x5a>
 8003fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fce:	f383 8811 	msr	BASEPRI, r3
 8003fd2:	f3bf 8f6f 	isb	sy
 8003fd6:	f3bf 8f4f 	dsb	sy
 8003fda:	61fb      	str	r3, [r7, #28]
 8003fdc:	e7fe      	b.n	8003fdc <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003fde:	f000 fff3 	bl	8004fc8 <xTaskGetSchedulerState>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d102      	bne.n	8003fee <xQueueReceive+0x6a>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d101      	bne.n	8003ff2 <xQueueReceive+0x6e>
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e000      	b.n	8003ff4 <xQueueReceive+0x70>
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d109      	bne.n	800400c <xQueueReceive+0x88>
 8003ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ffc:	f383 8811 	msr	BASEPRI, r3
 8004000:	f3bf 8f6f 	isb	sy
 8004004:	f3bf 8f4f 	dsb	sy
 8004008:	61bb      	str	r3, [r7, #24]
 800400a:	e7fe      	b.n	800400a <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800400c:	f7ff fa06 	bl	800341c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004014:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004018:	2b00      	cmp	r3, #0
 800401a:	d01f      	beq.n	800405c <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800401c:	68b9      	ldr	r1, [r7, #8]
 800401e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004020:	f000 f973 	bl	800430a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004026:	1e5a      	subs	r2, r3, #1
 8004028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800402a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800402c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800402e:	691b      	ldr	r3, [r3, #16]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d00f      	beq.n	8004054 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004036:	3310      	adds	r3, #16
 8004038:	4618      	mov	r0, r3
 800403a:	f000 fe09 	bl	8004c50 <xTaskRemoveFromEventList>
 800403e:	4603      	mov	r3, r0
 8004040:	2b00      	cmp	r3, #0
 8004042:	d007      	beq.n	8004054 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004044:	4b3c      	ldr	r3, [pc, #240]	; (8004138 <xQueueReceive+0x1b4>)
 8004046:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800404a:	601a      	str	r2, [r3, #0]
 800404c:	f3bf 8f4f 	dsb	sy
 8004050:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004054:	f7ff fa10 	bl	8003478 <vPortExitCritical>
				return pdPASS;
 8004058:	2301      	movs	r3, #1
 800405a:	e069      	b.n	8004130 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d103      	bne.n	800406a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004062:	f7ff fa09 	bl	8003478 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004066:	2300      	movs	r3, #0
 8004068:	e062      	b.n	8004130 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800406a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800406c:	2b00      	cmp	r3, #0
 800406e:	d106      	bne.n	800407e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004070:	f107 0310 	add.w	r3, r7, #16
 8004074:	4618      	mov	r0, r3
 8004076:	f000 fe4d 	bl	8004d14 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800407a:	2301      	movs	r3, #1
 800407c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800407e:	f7ff f9fb 	bl	8003478 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004082:	f000 fc01 	bl	8004888 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004086:	f7ff f9c9 	bl	800341c <vPortEnterCritical>
 800408a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800408c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004090:	b25b      	sxtb	r3, r3
 8004092:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004096:	d103      	bne.n	80040a0 <xQueueReceive+0x11c>
 8004098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800409a:	2200      	movs	r2, #0
 800409c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80040a6:	b25b      	sxtb	r3, r3
 80040a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80040ac:	d103      	bne.n	80040b6 <xQueueReceive+0x132>
 80040ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040b0:	2200      	movs	r2, #0
 80040b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80040b6:	f7ff f9df 	bl	8003478 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80040ba:	1d3a      	adds	r2, r7, #4
 80040bc:	f107 0310 	add.w	r3, r7, #16
 80040c0:	4611      	mov	r1, r2
 80040c2:	4618      	mov	r0, r3
 80040c4:	f000 fe3c 	bl	8004d40 <xTaskCheckForTimeOut>
 80040c8:	4603      	mov	r3, r0
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d123      	bne.n	8004116 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80040ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80040d0:	f000 f993 	bl	80043fa <prvIsQueueEmpty>
 80040d4:	4603      	mov	r3, r0
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d017      	beq.n	800410a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80040da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040dc:	3324      	adds	r3, #36	; 0x24
 80040de:	687a      	ldr	r2, [r7, #4]
 80040e0:	4611      	mov	r1, r2
 80040e2:	4618      	mov	r0, r3
 80040e4:	f000 fd90 	bl	8004c08 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80040e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80040ea:	f000 f934 	bl	8004356 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80040ee:	f000 fbd9 	bl	80048a4 <xTaskResumeAll>
 80040f2:	4603      	mov	r3, r0
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d189      	bne.n	800400c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80040f8:	4b0f      	ldr	r3, [pc, #60]	; (8004138 <xQueueReceive+0x1b4>)
 80040fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040fe:	601a      	str	r2, [r3, #0]
 8004100:	f3bf 8f4f 	dsb	sy
 8004104:	f3bf 8f6f 	isb	sy
 8004108:	e780      	b.n	800400c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800410a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800410c:	f000 f923 	bl	8004356 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004110:	f000 fbc8 	bl	80048a4 <xTaskResumeAll>
 8004114:	e77a      	b.n	800400c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004116:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004118:	f000 f91d 	bl	8004356 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800411c:	f000 fbc2 	bl	80048a4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004120:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004122:	f000 f96a 	bl	80043fa <prvIsQueueEmpty>
 8004126:	4603      	mov	r3, r0
 8004128:	2b00      	cmp	r3, #0
 800412a:	f43f af6f 	beq.w	800400c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800412e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004130:	4618      	mov	r0, r3
 8004132:	3730      	adds	r7, #48	; 0x30
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}
 8004138:	e000ed04 	.word	0xe000ed04

0800413c <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b08e      	sub	sp, #56	; 0x38
 8004140:	af00      	add	r7, sp, #0
 8004142:	60f8      	str	r0, [r7, #12]
 8004144:	60b9      	str	r1, [r7, #8]
 8004146:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800414c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800414e:	2b00      	cmp	r3, #0
 8004150:	d109      	bne.n	8004166 <xQueueReceiveFromISR+0x2a>
 8004152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004156:	f383 8811 	msr	BASEPRI, r3
 800415a:	f3bf 8f6f 	isb	sy
 800415e:	f3bf 8f4f 	dsb	sy
 8004162:	623b      	str	r3, [r7, #32]
 8004164:	e7fe      	b.n	8004164 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d103      	bne.n	8004174 <xQueueReceiveFromISR+0x38>
 800416c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800416e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004170:	2b00      	cmp	r3, #0
 8004172:	d101      	bne.n	8004178 <xQueueReceiveFromISR+0x3c>
 8004174:	2301      	movs	r3, #1
 8004176:	e000      	b.n	800417a <xQueueReceiveFromISR+0x3e>
 8004178:	2300      	movs	r3, #0
 800417a:	2b00      	cmp	r3, #0
 800417c:	d109      	bne.n	8004192 <xQueueReceiveFromISR+0x56>
 800417e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004182:	f383 8811 	msr	BASEPRI, r3
 8004186:	f3bf 8f6f 	isb	sy
 800418a:	f3bf 8f4f 	dsb	sy
 800418e:	61fb      	str	r3, [r7, #28]
 8004190:	e7fe      	b.n	8004190 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004192:	f7ff fa1f 	bl	80035d4 <vPortValidateInterruptPriority>
	__asm volatile
 8004196:	f3ef 8211 	mrs	r2, BASEPRI
 800419a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800419e:	f383 8811 	msr	BASEPRI, r3
 80041a2:	f3bf 8f6f 	isb	sy
 80041a6:	f3bf 8f4f 	dsb	sy
 80041aa:	61ba      	str	r2, [r7, #24]
 80041ac:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80041ae:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80041b0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80041b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041b6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80041b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d02f      	beq.n	800421e <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80041be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80041c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80041c8:	68b9      	ldr	r1, [r7, #8]
 80041ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80041cc:	f000 f89d 	bl	800430a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80041d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041d2:	1e5a      	subs	r2, r3, #1
 80041d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041d6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80041d8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80041dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80041e0:	d112      	bne.n	8004208 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80041e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041e4:	691b      	ldr	r3, [r3, #16]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d016      	beq.n	8004218 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80041ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ec:	3310      	adds	r3, #16
 80041ee:	4618      	mov	r0, r3
 80041f0:	f000 fd2e 	bl	8004c50 <xTaskRemoveFromEventList>
 80041f4:	4603      	mov	r3, r0
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d00e      	beq.n	8004218 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d00b      	beq.n	8004218 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2201      	movs	r2, #1
 8004204:	601a      	str	r2, [r3, #0]
 8004206:	e007      	b.n	8004218 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004208:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800420c:	3301      	adds	r3, #1
 800420e:	b2db      	uxtb	r3, r3
 8004210:	b25a      	sxtb	r2, r3
 8004212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004214:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8004218:	2301      	movs	r3, #1
 800421a:	637b      	str	r3, [r7, #52]	; 0x34
 800421c:	e001      	b.n	8004222 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800421e:	2300      	movs	r3, #0
 8004220:	637b      	str	r3, [r7, #52]	; 0x34
 8004222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004224:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800422c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800422e:	4618      	mov	r0, r3
 8004230:	3738      	adds	r7, #56	; 0x38
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}

08004236 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004236:	b580      	push	{r7, lr}
 8004238:	b086      	sub	sp, #24
 800423a:	af00      	add	r7, sp, #0
 800423c:	60f8      	str	r0, [r7, #12]
 800423e:	60b9      	str	r1, [r7, #8]
 8004240:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004242:	2300      	movs	r3, #0
 8004244:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800424a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004250:	2b00      	cmp	r3, #0
 8004252:	d10d      	bne.n	8004270 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d14d      	bne.n	80042f8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	4618      	mov	r0, r3
 8004262:	f000 fecf 	bl	8005004 <xTaskPriorityDisinherit>
 8004266:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2200      	movs	r2, #0
 800426c:	605a      	str	r2, [r3, #4]
 800426e:	e043      	b.n	80042f8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d119      	bne.n	80042aa <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	6898      	ldr	r0, [r3, #8]
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427e:	461a      	mov	r2, r3
 8004280:	68b9      	ldr	r1, [r7, #8]
 8004282:	f001 ff9d 	bl	80061c0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	689a      	ldr	r2, [r3, #8]
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428e:	441a      	add	r2, r3
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	689a      	ldr	r2, [r3, #8]
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	429a      	cmp	r2, r3
 800429e:	d32b      	bcc.n	80042f8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	609a      	str	r2, [r3, #8]
 80042a8:	e026      	b.n	80042f8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	68d8      	ldr	r0, [r3, #12]
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b2:	461a      	mov	r2, r3
 80042b4:	68b9      	ldr	r1, [r7, #8]
 80042b6:	f001 ff83 	bl	80061c0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	68da      	ldr	r2, [r3, #12]
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c2:	425b      	negs	r3, r3
 80042c4:	441a      	add	r2, r3
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	68da      	ldr	r2, [r3, #12]
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	429a      	cmp	r2, r3
 80042d4:	d207      	bcs.n	80042e6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	685a      	ldr	r2, [r3, #4]
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042de:	425b      	negs	r3, r3
 80042e0:	441a      	add	r2, r3
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2b02      	cmp	r3, #2
 80042ea:	d105      	bne.n	80042f8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d002      	beq.n	80042f8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	3b01      	subs	r3, #1
 80042f6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	1c5a      	adds	r2, r3, #1
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004300:	697b      	ldr	r3, [r7, #20]
}
 8004302:	4618      	mov	r0, r3
 8004304:	3718      	adds	r7, #24
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}

0800430a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800430a:	b580      	push	{r7, lr}
 800430c:	b082      	sub	sp, #8
 800430e:	af00      	add	r7, sp, #0
 8004310:	6078      	str	r0, [r7, #4]
 8004312:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004318:	2b00      	cmp	r3, #0
 800431a:	d018      	beq.n	800434e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	68da      	ldr	r2, [r3, #12]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004324:	441a      	add	r2, r3
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	68da      	ldr	r2, [r3, #12]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	429a      	cmp	r2, r3
 8004334:	d303      	bcc.n	800433e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	68d9      	ldr	r1, [r3, #12]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004346:	461a      	mov	r2, r3
 8004348:	6838      	ldr	r0, [r7, #0]
 800434a:	f001 ff39 	bl	80061c0 <memcpy>
	}
}
 800434e:	bf00      	nop
 8004350:	3708      	adds	r7, #8
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}

08004356 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004356:	b580      	push	{r7, lr}
 8004358:	b084      	sub	sp, #16
 800435a:	af00      	add	r7, sp, #0
 800435c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800435e:	f7ff f85d 	bl	800341c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004368:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800436a:	e011      	b.n	8004390 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004370:	2b00      	cmp	r3, #0
 8004372:	d012      	beq.n	800439a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	3324      	adds	r3, #36	; 0x24
 8004378:	4618      	mov	r0, r3
 800437a:	f000 fc69 	bl	8004c50 <xTaskRemoveFromEventList>
 800437e:	4603      	mov	r3, r0
 8004380:	2b00      	cmp	r3, #0
 8004382:	d001      	beq.n	8004388 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004384:	f000 fd3c 	bl	8004e00 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004388:	7bfb      	ldrb	r3, [r7, #15]
 800438a:	3b01      	subs	r3, #1
 800438c:	b2db      	uxtb	r3, r3
 800438e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004390:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004394:	2b00      	cmp	r3, #0
 8004396:	dce9      	bgt.n	800436c <prvUnlockQueue+0x16>
 8004398:	e000      	b.n	800439c <prvUnlockQueue+0x46>
					break;
 800439a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	22ff      	movs	r2, #255	; 0xff
 80043a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80043a4:	f7ff f868 	bl	8003478 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80043a8:	f7ff f838 	bl	800341c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80043b2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80043b4:	e011      	b.n	80043da <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	691b      	ldr	r3, [r3, #16]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d012      	beq.n	80043e4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	3310      	adds	r3, #16
 80043c2:	4618      	mov	r0, r3
 80043c4:	f000 fc44 	bl	8004c50 <xTaskRemoveFromEventList>
 80043c8:	4603      	mov	r3, r0
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d001      	beq.n	80043d2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80043ce:	f000 fd17 	bl	8004e00 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80043d2:	7bbb      	ldrb	r3, [r7, #14]
 80043d4:	3b01      	subs	r3, #1
 80043d6:	b2db      	uxtb	r3, r3
 80043d8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80043da:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	dce9      	bgt.n	80043b6 <prvUnlockQueue+0x60>
 80043e2:	e000      	b.n	80043e6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80043e4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	22ff      	movs	r2, #255	; 0xff
 80043ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80043ee:	f7ff f843 	bl	8003478 <vPortExitCritical>
}
 80043f2:	bf00      	nop
 80043f4:	3710      	adds	r7, #16
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}

080043fa <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80043fa:	b580      	push	{r7, lr}
 80043fc:	b084      	sub	sp, #16
 80043fe:	af00      	add	r7, sp, #0
 8004400:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004402:	f7ff f80b 	bl	800341c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800440a:	2b00      	cmp	r3, #0
 800440c:	d102      	bne.n	8004414 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800440e:	2301      	movs	r3, #1
 8004410:	60fb      	str	r3, [r7, #12]
 8004412:	e001      	b.n	8004418 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004414:	2300      	movs	r3, #0
 8004416:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004418:	f7ff f82e 	bl	8003478 <vPortExitCritical>

	return xReturn;
 800441c:	68fb      	ldr	r3, [r7, #12]
}
 800441e:	4618      	mov	r0, r3
 8004420:	3710      	adds	r7, #16
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}

08004426 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004426:	b580      	push	{r7, lr}
 8004428:	b084      	sub	sp, #16
 800442a:	af00      	add	r7, sp, #0
 800442c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800442e:	f7fe fff5 	bl	800341c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800443a:	429a      	cmp	r2, r3
 800443c:	d102      	bne.n	8004444 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800443e:	2301      	movs	r3, #1
 8004440:	60fb      	str	r3, [r7, #12]
 8004442:	e001      	b.n	8004448 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004444:	2300      	movs	r3, #0
 8004446:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004448:	f7ff f816 	bl	8003478 <vPortExitCritical>

	return xReturn;
 800444c:	68fb      	ldr	r3, [r7, #12]
}
 800444e:	4618      	mov	r0, r3
 8004450:	3710      	adds	r7, #16
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}

08004456 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004456:	b580      	push	{r7, lr}
 8004458:	b08e      	sub	sp, #56	; 0x38
 800445a:	af04      	add	r7, sp, #16
 800445c:	60f8      	str	r0, [r7, #12]
 800445e:	60b9      	str	r1, [r7, #8]
 8004460:	607a      	str	r2, [r7, #4]
 8004462:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004464:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004466:	2b00      	cmp	r3, #0
 8004468:	d109      	bne.n	800447e <xTaskCreateStatic+0x28>
	__asm volatile
 800446a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800446e:	f383 8811 	msr	BASEPRI, r3
 8004472:	f3bf 8f6f 	isb	sy
 8004476:	f3bf 8f4f 	dsb	sy
 800447a:	623b      	str	r3, [r7, #32]
 800447c:	e7fe      	b.n	800447c <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800447e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004480:	2b00      	cmp	r3, #0
 8004482:	d109      	bne.n	8004498 <xTaskCreateStatic+0x42>
 8004484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004488:	f383 8811 	msr	BASEPRI, r3
 800448c:	f3bf 8f6f 	isb	sy
 8004490:	f3bf 8f4f 	dsb	sy
 8004494:	61fb      	str	r3, [r7, #28]
 8004496:	e7fe      	b.n	8004496 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004498:	2354      	movs	r3, #84	; 0x54
 800449a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	2b54      	cmp	r3, #84	; 0x54
 80044a0:	d009      	beq.n	80044b6 <xTaskCreateStatic+0x60>
 80044a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044a6:	f383 8811 	msr	BASEPRI, r3
 80044aa:	f3bf 8f6f 	isb	sy
 80044ae:	f3bf 8f4f 	dsb	sy
 80044b2:	61bb      	str	r3, [r7, #24]
 80044b4:	e7fe      	b.n	80044b4 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80044b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d01e      	beq.n	80044fa <xTaskCreateStatic+0xa4>
 80044bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d01b      	beq.n	80044fa <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80044c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044c4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80044c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80044ca:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80044cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ce:	2202      	movs	r2, #2
 80044d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80044d4:	2300      	movs	r3, #0
 80044d6:	9303      	str	r3, [sp, #12]
 80044d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044da:	9302      	str	r3, [sp, #8]
 80044dc:	f107 0314 	add.w	r3, r7, #20
 80044e0:	9301      	str	r3, [sp, #4]
 80044e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044e4:	9300      	str	r3, [sp, #0]
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	687a      	ldr	r2, [r7, #4]
 80044ea:	68b9      	ldr	r1, [r7, #8]
 80044ec:	68f8      	ldr	r0, [r7, #12]
 80044ee:	f000 f850 	bl	8004592 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80044f2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80044f4:	f000 f8cc 	bl	8004690 <prvAddNewTaskToReadyList>
 80044f8:	e001      	b.n	80044fe <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 80044fa:	2300      	movs	r3, #0
 80044fc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80044fe:	697b      	ldr	r3, [r7, #20]
	}
 8004500:	4618      	mov	r0, r3
 8004502:	3728      	adds	r7, #40	; 0x28
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}

08004508 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004508:	b580      	push	{r7, lr}
 800450a:	b08c      	sub	sp, #48	; 0x30
 800450c:	af04      	add	r7, sp, #16
 800450e:	60f8      	str	r0, [r7, #12]
 8004510:	60b9      	str	r1, [r7, #8]
 8004512:	603b      	str	r3, [r7, #0]
 8004514:	4613      	mov	r3, r2
 8004516:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004518:	88fb      	ldrh	r3, [r7, #6]
 800451a:	009b      	lsls	r3, r3, #2
 800451c:	4618      	mov	r0, r3
 800451e:	f7ff f897 	bl	8003650 <pvPortMalloc>
 8004522:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d00e      	beq.n	8004548 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800452a:	2054      	movs	r0, #84	; 0x54
 800452c:	f7ff f890 	bl	8003650 <pvPortMalloc>
 8004530:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004532:	69fb      	ldr	r3, [r7, #28]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d003      	beq.n	8004540 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004538:	69fb      	ldr	r3, [r7, #28]
 800453a:	697a      	ldr	r2, [r7, #20]
 800453c:	631a      	str	r2, [r3, #48]	; 0x30
 800453e:	e005      	b.n	800454c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004540:	6978      	ldr	r0, [r7, #20]
 8004542:	f7ff f947 	bl	80037d4 <vPortFree>
 8004546:	e001      	b.n	800454c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004548:	2300      	movs	r3, #0
 800454a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800454c:	69fb      	ldr	r3, [r7, #28]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d017      	beq.n	8004582 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004552:	69fb      	ldr	r3, [r7, #28]
 8004554:	2200      	movs	r2, #0
 8004556:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800455a:	88fa      	ldrh	r2, [r7, #6]
 800455c:	2300      	movs	r3, #0
 800455e:	9303      	str	r3, [sp, #12]
 8004560:	69fb      	ldr	r3, [r7, #28]
 8004562:	9302      	str	r3, [sp, #8]
 8004564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004566:	9301      	str	r3, [sp, #4]
 8004568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800456a:	9300      	str	r3, [sp, #0]
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	68b9      	ldr	r1, [r7, #8]
 8004570:	68f8      	ldr	r0, [r7, #12]
 8004572:	f000 f80e 	bl	8004592 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004576:	69f8      	ldr	r0, [r7, #28]
 8004578:	f000 f88a 	bl	8004690 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800457c:	2301      	movs	r3, #1
 800457e:	61bb      	str	r3, [r7, #24]
 8004580:	e002      	b.n	8004588 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004582:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004586:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004588:	69bb      	ldr	r3, [r7, #24]
	}
 800458a:	4618      	mov	r0, r3
 800458c:	3720      	adds	r7, #32
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}

08004592 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004592:	b580      	push	{r7, lr}
 8004594:	b088      	sub	sp, #32
 8004596:	af00      	add	r7, sp, #0
 8004598:	60f8      	str	r0, [r7, #12]
 800459a:	60b9      	str	r1, [r7, #8]
 800459c:	607a      	str	r2, [r7, #4]
 800459e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80045a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80045aa:	3b01      	subs	r3, #1
 80045ac:	009b      	lsls	r3, r3, #2
 80045ae:	4413      	add	r3, r2
 80045b0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80045b2:	69bb      	ldr	r3, [r7, #24]
 80045b4:	f023 0307 	bic.w	r3, r3, #7
 80045b8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80045ba:	69bb      	ldr	r3, [r7, #24]
 80045bc:	f003 0307 	and.w	r3, r3, #7
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d009      	beq.n	80045d8 <prvInitialiseNewTask+0x46>
 80045c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045c8:	f383 8811 	msr	BASEPRI, r3
 80045cc:	f3bf 8f6f 	isb	sy
 80045d0:	f3bf 8f4f 	dsb	sy
 80045d4:	617b      	str	r3, [r7, #20]
 80045d6:	e7fe      	b.n	80045d6 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80045d8:	2300      	movs	r3, #0
 80045da:	61fb      	str	r3, [r7, #28]
 80045dc:	e012      	b.n	8004604 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80045de:	68ba      	ldr	r2, [r7, #8]
 80045e0:	69fb      	ldr	r3, [r7, #28]
 80045e2:	4413      	add	r3, r2
 80045e4:	7819      	ldrb	r1, [r3, #0]
 80045e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045e8:	69fb      	ldr	r3, [r7, #28]
 80045ea:	4413      	add	r3, r2
 80045ec:	3334      	adds	r3, #52	; 0x34
 80045ee:	460a      	mov	r2, r1
 80045f0:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80045f2:	68ba      	ldr	r2, [r7, #8]
 80045f4:	69fb      	ldr	r3, [r7, #28]
 80045f6:	4413      	add	r3, r2
 80045f8:	781b      	ldrb	r3, [r3, #0]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d006      	beq.n	800460c <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80045fe:	69fb      	ldr	r3, [r7, #28]
 8004600:	3301      	adds	r3, #1
 8004602:	61fb      	str	r3, [r7, #28]
 8004604:	69fb      	ldr	r3, [r7, #28]
 8004606:	2b0f      	cmp	r3, #15
 8004608:	d9e9      	bls.n	80045de <prvInitialiseNewTask+0x4c>
 800460a:	e000      	b.n	800460e <prvInitialiseNewTask+0x7c>
		{
			break;
 800460c:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800460e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004610:	2200      	movs	r2, #0
 8004612:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004618:	2b06      	cmp	r3, #6
 800461a:	d901      	bls.n	8004620 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800461c:	2306      	movs	r3, #6
 800461e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004622:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004624:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004628:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800462a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800462c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800462e:	2200      	movs	r2, #0
 8004630:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004634:	3304      	adds	r3, #4
 8004636:	4618      	mov	r0, r3
 8004638:	f7fe fd36 	bl	80030a8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800463c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800463e:	3318      	adds	r3, #24
 8004640:	4618      	mov	r0, r3
 8004642:	f7fe fd31 	bl	80030a8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004648:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800464a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800464c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800464e:	f1c3 0207 	rsb	r2, r3, #7
 8004652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004654:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004658:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800465a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800465c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800465e:	2200      	movs	r2, #0
 8004660:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004664:	2200      	movs	r2, #0
 8004666:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800466a:	683a      	ldr	r2, [r7, #0]
 800466c:	68f9      	ldr	r1, [r7, #12]
 800466e:	69b8      	ldr	r0, [r7, #24]
 8004670:	f7fe fdae 	bl	80031d0 <pxPortInitialiseStack>
 8004674:	4602      	mov	r2, r0
 8004676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004678:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800467a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800467c:	2b00      	cmp	r3, #0
 800467e:	d002      	beq.n	8004686 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004682:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004684:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004686:	bf00      	nop
 8004688:	3720      	adds	r7, #32
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}
	...

08004690 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b082      	sub	sp, #8
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004698:	f7fe fec0 	bl	800341c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800469c:	4b2a      	ldr	r3, [pc, #168]	; (8004748 <prvAddNewTaskToReadyList+0xb8>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	3301      	adds	r3, #1
 80046a2:	4a29      	ldr	r2, [pc, #164]	; (8004748 <prvAddNewTaskToReadyList+0xb8>)
 80046a4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80046a6:	4b29      	ldr	r3, [pc, #164]	; (800474c <prvAddNewTaskToReadyList+0xbc>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d109      	bne.n	80046c2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80046ae:	4a27      	ldr	r2, [pc, #156]	; (800474c <prvAddNewTaskToReadyList+0xbc>)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80046b4:	4b24      	ldr	r3, [pc, #144]	; (8004748 <prvAddNewTaskToReadyList+0xb8>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d110      	bne.n	80046de <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80046bc:	f000 fbc4 	bl	8004e48 <prvInitialiseTaskLists>
 80046c0:	e00d      	b.n	80046de <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80046c2:	4b23      	ldr	r3, [pc, #140]	; (8004750 <prvAddNewTaskToReadyList+0xc0>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d109      	bne.n	80046de <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80046ca:	4b20      	ldr	r3, [pc, #128]	; (800474c <prvAddNewTaskToReadyList+0xbc>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046d4:	429a      	cmp	r2, r3
 80046d6:	d802      	bhi.n	80046de <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80046d8:	4a1c      	ldr	r2, [pc, #112]	; (800474c <prvAddNewTaskToReadyList+0xbc>)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80046de:	4b1d      	ldr	r3, [pc, #116]	; (8004754 <prvAddNewTaskToReadyList+0xc4>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	3301      	adds	r3, #1
 80046e4:	4a1b      	ldr	r2, [pc, #108]	; (8004754 <prvAddNewTaskToReadyList+0xc4>)
 80046e6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ec:	2201      	movs	r2, #1
 80046ee:	409a      	lsls	r2, r3
 80046f0:	4b19      	ldr	r3, [pc, #100]	; (8004758 <prvAddNewTaskToReadyList+0xc8>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4313      	orrs	r3, r2
 80046f6:	4a18      	ldr	r2, [pc, #96]	; (8004758 <prvAddNewTaskToReadyList+0xc8>)
 80046f8:	6013      	str	r3, [r2, #0]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046fe:	4613      	mov	r3, r2
 8004700:	009b      	lsls	r3, r3, #2
 8004702:	4413      	add	r3, r2
 8004704:	009b      	lsls	r3, r3, #2
 8004706:	4a15      	ldr	r2, [pc, #84]	; (800475c <prvAddNewTaskToReadyList+0xcc>)
 8004708:	441a      	add	r2, r3
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	3304      	adds	r3, #4
 800470e:	4619      	mov	r1, r3
 8004710:	4610      	mov	r0, r2
 8004712:	f7fe fcd6 	bl	80030c2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004716:	f7fe feaf 	bl	8003478 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800471a:	4b0d      	ldr	r3, [pc, #52]	; (8004750 <prvAddNewTaskToReadyList+0xc0>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d00e      	beq.n	8004740 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004722:	4b0a      	ldr	r3, [pc, #40]	; (800474c <prvAddNewTaskToReadyList+0xbc>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800472c:	429a      	cmp	r2, r3
 800472e:	d207      	bcs.n	8004740 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004730:	4b0b      	ldr	r3, [pc, #44]	; (8004760 <prvAddNewTaskToReadyList+0xd0>)
 8004732:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004736:	601a      	str	r2, [r3, #0]
 8004738:	f3bf 8f4f 	dsb	sy
 800473c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004740:	bf00      	nop
 8004742:	3708      	adds	r7, #8
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}
 8004748:	20003d48 	.word	0x20003d48
 800474c:	20003c48 	.word	0x20003c48
 8004750:	20003d54 	.word	0x20003d54
 8004754:	20003d64 	.word	0x20003d64
 8004758:	20003d50 	.word	0x20003d50
 800475c:	20003c4c 	.word	0x20003c4c
 8004760:	e000ed04 	.word	0xe000ed04

08004764 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004764:	b580      	push	{r7, lr}
 8004766:	b084      	sub	sp, #16
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800476c:	2300      	movs	r3, #0
 800476e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d016      	beq.n	80047a4 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004776:	4b13      	ldr	r3, [pc, #76]	; (80047c4 <vTaskDelay+0x60>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d009      	beq.n	8004792 <vTaskDelay+0x2e>
 800477e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004782:	f383 8811 	msr	BASEPRI, r3
 8004786:	f3bf 8f6f 	isb	sy
 800478a:	f3bf 8f4f 	dsb	sy
 800478e:	60bb      	str	r3, [r7, #8]
 8004790:	e7fe      	b.n	8004790 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8004792:	f000 f879 	bl	8004888 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004796:	2100      	movs	r1, #0
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f000 fcb7 	bl	800510c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800479e:	f000 f881 	bl	80048a4 <xTaskResumeAll>
 80047a2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d107      	bne.n	80047ba <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80047aa:	4b07      	ldr	r3, [pc, #28]	; (80047c8 <vTaskDelay+0x64>)
 80047ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047b0:	601a      	str	r2, [r3, #0]
 80047b2:	f3bf 8f4f 	dsb	sy
 80047b6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80047ba:	bf00      	nop
 80047bc:	3710      	adds	r7, #16
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}
 80047c2:	bf00      	nop
 80047c4:	20003d70 	.word	0x20003d70
 80047c8:	e000ed04 	.word	0xe000ed04

080047cc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b08a      	sub	sp, #40	; 0x28
 80047d0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80047d2:	2300      	movs	r3, #0
 80047d4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80047d6:	2300      	movs	r3, #0
 80047d8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80047da:	463a      	mov	r2, r7
 80047dc:	1d39      	adds	r1, r7, #4
 80047de:	f107 0308 	add.w	r3, r7, #8
 80047e2:	4618      	mov	r0, r3
 80047e4:	f000 fdf4 	bl	80053d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80047e8:	6839      	ldr	r1, [r7, #0]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	68ba      	ldr	r2, [r7, #8]
 80047ee:	9202      	str	r2, [sp, #8]
 80047f0:	9301      	str	r3, [sp, #4]
 80047f2:	2300      	movs	r3, #0
 80047f4:	9300      	str	r3, [sp, #0]
 80047f6:	2300      	movs	r3, #0
 80047f8:	460a      	mov	r2, r1
 80047fa:	491d      	ldr	r1, [pc, #116]	; (8004870 <vTaskStartScheduler+0xa4>)
 80047fc:	481d      	ldr	r0, [pc, #116]	; (8004874 <vTaskStartScheduler+0xa8>)
 80047fe:	f7ff fe2a 	bl	8004456 <xTaskCreateStatic>
 8004802:	4602      	mov	r2, r0
 8004804:	4b1c      	ldr	r3, [pc, #112]	; (8004878 <vTaskStartScheduler+0xac>)
 8004806:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004808:	4b1b      	ldr	r3, [pc, #108]	; (8004878 <vTaskStartScheduler+0xac>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d002      	beq.n	8004816 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004810:	2301      	movs	r3, #1
 8004812:	617b      	str	r3, [r7, #20]
 8004814:	e001      	b.n	800481a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004816:	2300      	movs	r3, #0
 8004818:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	2b01      	cmp	r3, #1
 800481e:	d115      	bne.n	800484c <vTaskStartScheduler+0x80>
 8004820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004824:	f383 8811 	msr	BASEPRI, r3
 8004828:	f3bf 8f6f 	isb	sy
 800482c:	f3bf 8f4f 	dsb	sy
 8004830:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004832:	4b12      	ldr	r3, [pc, #72]	; (800487c <vTaskStartScheduler+0xb0>)
 8004834:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004838:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800483a:	4b11      	ldr	r3, [pc, #68]	; (8004880 <vTaskStartScheduler+0xb4>)
 800483c:	2201      	movs	r2, #1
 800483e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004840:	4b10      	ldr	r3, [pc, #64]	; (8004884 <vTaskStartScheduler+0xb8>)
 8004842:	2200      	movs	r2, #0
 8004844:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004846:	f7fe fd4b 	bl	80032e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800484a:	e00d      	b.n	8004868 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004852:	d109      	bne.n	8004868 <vTaskStartScheduler+0x9c>
 8004854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004858:	f383 8811 	msr	BASEPRI, r3
 800485c:	f3bf 8f6f 	isb	sy
 8004860:	f3bf 8f4f 	dsb	sy
 8004864:	60fb      	str	r3, [r7, #12]
 8004866:	e7fe      	b.n	8004866 <vTaskStartScheduler+0x9a>
}
 8004868:	bf00      	nop
 800486a:	3718      	adds	r7, #24
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}
 8004870:	08006200 	.word	0x08006200
 8004874:	08004e19 	.word	0x08004e19
 8004878:	20003d6c 	.word	0x20003d6c
 800487c:	20003d68 	.word	0x20003d68
 8004880:	20003d54 	.word	0x20003d54
 8004884:	20003d4c 	.word	0x20003d4c

08004888 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004888:	b480      	push	{r7}
 800488a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800488c:	4b04      	ldr	r3, [pc, #16]	; (80048a0 <vTaskSuspendAll+0x18>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	3301      	adds	r3, #1
 8004892:	4a03      	ldr	r2, [pc, #12]	; (80048a0 <vTaskSuspendAll+0x18>)
 8004894:	6013      	str	r3, [r2, #0]
}
 8004896:	bf00      	nop
 8004898:	46bd      	mov	sp, r7
 800489a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489e:	4770      	bx	lr
 80048a0:	20003d70 	.word	0x20003d70

080048a4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b084      	sub	sp, #16
 80048a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80048aa:	2300      	movs	r3, #0
 80048ac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80048ae:	2300      	movs	r3, #0
 80048b0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80048b2:	4b41      	ldr	r3, [pc, #260]	; (80049b8 <xTaskResumeAll+0x114>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d109      	bne.n	80048ce <xTaskResumeAll+0x2a>
 80048ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048be:	f383 8811 	msr	BASEPRI, r3
 80048c2:	f3bf 8f6f 	isb	sy
 80048c6:	f3bf 8f4f 	dsb	sy
 80048ca:	603b      	str	r3, [r7, #0]
 80048cc:	e7fe      	b.n	80048cc <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80048ce:	f7fe fda5 	bl	800341c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80048d2:	4b39      	ldr	r3, [pc, #228]	; (80049b8 <xTaskResumeAll+0x114>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	3b01      	subs	r3, #1
 80048d8:	4a37      	ldr	r2, [pc, #220]	; (80049b8 <xTaskResumeAll+0x114>)
 80048da:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80048dc:	4b36      	ldr	r3, [pc, #216]	; (80049b8 <xTaskResumeAll+0x114>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d161      	bne.n	80049a8 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80048e4:	4b35      	ldr	r3, [pc, #212]	; (80049bc <xTaskResumeAll+0x118>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d05d      	beq.n	80049a8 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80048ec:	e02e      	b.n	800494c <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80048ee:	4b34      	ldr	r3, [pc, #208]	; (80049c0 <xTaskResumeAll+0x11c>)
 80048f0:	68db      	ldr	r3, [r3, #12]
 80048f2:	68db      	ldr	r3, [r3, #12]
 80048f4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	3318      	adds	r3, #24
 80048fa:	4618      	mov	r0, r3
 80048fc:	f7fe fc3e 	bl	800317c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	3304      	adds	r3, #4
 8004904:	4618      	mov	r0, r3
 8004906:	f7fe fc39 	bl	800317c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800490e:	2201      	movs	r2, #1
 8004910:	409a      	lsls	r2, r3
 8004912:	4b2c      	ldr	r3, [pc, #176]	; (80049c4 <xTaskResumeAll+0x120>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4313      	orrs	r3, r2
 8004918:	4a2a      	ldr	r2, [pc, #168]	; (80049c4 <xTaskResumeAll+0x120>)
 800491a:	6013      	str	r3, [r2, #0]
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004920:	4613      	mov	r3, r2
 8004922:	009b      	lsls	r3, r3, #2
 8004924:	4413      	add	r3, r2
 8004926:	009b      	lsls	r3, r3, #2
 8004928:	4a27      	ldr	r2, [pc, #156]	; (80049c8 <xTaskResumeAll+0x124>)
 800492a:	441a      	add	r2, r3
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	3304      	adds	r3, #4
 8004930:	4619      	mov	r1, r3
 8004932:	4610      	mov	r0, r2
 8004934:	f7fe fbc5 	bl	80030c2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800493c:	4b23      	ldr	r3, [pc, #140]	; (80049cc <xTaskResumeAll+0x128>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004942:	429a      	cmp	r2, r3
 8004944:	d302      	bcc.n	800494c <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8004946:	4b22      	ldr	r3, [pc, #136]	; (80049d0 <xTaskResumeAll+0x12c>)
 8004948:	2201      	movs	r2, #1
 800494a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800494c:	4b1c      	ldr	r3, [pc, #112]	; (80049c0 <xTaskResumeAll+0x11c>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d1cc      	bne.n	80048ee <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d001      	beq.n	800495e <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800495a:	f000 fb0f 	bl	8004f7c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800495e:	4b1d      	ldr	r3, [pc, #116]	; (80049d4 <xTaskResumeAll+0x130>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d010      	beq.n	800498c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800496a:	f000 f837 	bl	80049dc <xTaskIncrementTick>
 800496e:	4603      	mov	r3, r0
 8004970:	2b00      	cmp	r3, #0
 8004972:	d002      	beq.n	800497a <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8004974:	4b16      	ldr	r3, [pc, #88]	; (80049d0 <xTaskResumeAll+0x12c>)
 8004976:	2201      	movs	r2, #1
 8004978:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	3b01      	subs	r3, #1
 800497e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d1f1      	bne.n	800496a <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8004986:	4b13      	ldr	r3, [pc, #76]	; (80049d4 <xTaskResumeAll+0x130>)
 8004988:	2200      	movs	r2, #0
 800498a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800498c:	4b10      	ldr	r3, [pc, #64]	; (80049d0 <xTaskResumeAll+0x12c>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d009      	beq.n	80049a8 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004994:	2301      	movs	r3, #1
 8004996:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004998:	4b0f      	ldr	r3, [pc, #60]	; (80049d8 <xTaskResumeAll+0x134>)
 800499a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800499e:	601a      	str	r2, [r3, #0]
 80049a0:	f3bf 8f4f 	dsb	sy
 80049a4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80049a8:	f7fe fd66 	bl	8003478 <vPortExitCritical>

	return xAlreadyYielded;
 80049ac:	68bb      	ldr	r3, [r7, #8]
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	3710      	adds	r7, #16
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}
 80049b6:	bf00      	nop
 80049b8:	20003d70 	.word	0x20003d70
 80049bc:	20003d48 	.word	0x20003d48
 80049c0:	20003d08 	.word	0x20003d08
 80049c4:	20003d50 	.word	0x20003d50
 80049c8:	20003c4c 	.word	0x20003c4c
 80049cc:	20003c48 	.word	0x20003c48
 80049d0:	20003d5c 	.word	0x20003d5c
 80049d4:	20003d58 	.word	0x20003d58
 80049d8:	e000ed04 	.word	0xe000ed04

080049dc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b086      	sub	sp, #24
 80049e0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80049e2:	2300      	movs	r3, #0
 80049e4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80049e6:	4b50      	ldr	r3, [pc, #320]	; (8004b28 <xTaskIncrementTick+0x14c>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	f040 808c 	bne.w	8004b08 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80049f0:	4b4e      	ldr	r3, [pc, #312]	; (8004b2c <xTaskIncrementTick+0x150>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	3301      	adds	r3, #1
 80049f6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80049f8:	4a4c      	ldr	r2, [pc, #304]	; (8004b2c <xTaskIncrementTick+0x150>)
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d11f      	bne.n	8004a44 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8004a04:	4b4a      	ldr	r3, [pc, #296]	; (8004b30 <xTaskIncrementTick+0x154>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d009      	beq.n	8004a22 <xTaskIncrementTick+0x46>
 8004a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a12:	f383 8811 	msr	BASEPRI, r3
 8004a16:	f3bf 8f6f 	isb	sy
 8004a1a:	f3bf 8f4f 	dsb	sy
 8004a1e:	603b      	str	r3, [r7, #0]
 8004a20:	e7fe      	b.n	8004a20 <xTaskIncrementTick+0x44>
 8004a22:	4b43      	ldr	r3, [pc, #268]	; (8004b30 <xTaskIncrementTick+0x154>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	60fb      	str	r3, [r7, #12]
 8004a28:	4b42      	ldr	r3, [pc, #264]	; (8004b34 <xTaskIncrementTick+0x158>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a40      	ldr	r2, [pc, #256]	; (8004b30 <xTaskIncrementTick+0x154>)
 8004a2e:	6013      	str	r3, [r2, #0]
 8004a30:	4a40      	ldr	r2, [pc, #256]	; (8004b34 <xTaskIncrementTick+0x158>)
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	6013      	str	r3, [r2, #0]
 8004a36:	4b40      	ldr	r3, [pc, #256]	; (8004b38 <xTaskIncrementTick+0x15c>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	3301      	adds	r3, #1
 8004a3c:	4a3e      	ldr	r2, [pc, #248]	; (8004b38 <xTaskIncrementTick+0x15c>)
 8004a3e:	6013      	str	r3, [r2, #0]
 8004a40:	f000 fa9c 	bl	8004f7c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004a44:	4b3d      	ldr	r3, [pc, #244]	; (8004b3c <xTaskIncrementTick+0x160>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	693a      	ldr	r2, [r7, #16]
 8004a4a:	429a      	cmp	r2, r3
 8004a4c:	d34d      	bcc.n	8004aea <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a4e:	4b38      	ldr	r3, [pc, #224]	; (8004b30 <xTaskIncrementTick+0x154>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d101      	bne.n	8004a5c <xTaskIncrementTick+0x80>
 8004a58:	2301      	movs	r3, #1
 8004a5a:	e000      	b.n	8004a5e <xTaskIncrementTick+0x82>
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d004      	beq.n	8004a6c <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a62:	4b36      	ldr	r3, [pc, #216]	; (8004b3c <xTaskIncrementTick+0x160>)
 8004a64:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004a68:	601a      	str	r2, [r3, #0]
					break;
 8004a6a:	e03e      	b.n	8004aea <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004a6c:	4b30      	ldr	r3, [pc, #192]	; (8004b30 <xTaskIncrementTick+0x154>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	68db      	ldr	r3, [r3, #12]
 8004a72:	68db      	ldr	r3, [r3, #12]
 8004a74:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004a7c:	693a      	ldr	r2, [r7, #16]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d203      	bcs.n	8004a8c <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004a84:	4a2d      	ldr	r2, [pc, #180]	; (8004b3c <xTaskIncrementTick+0x160>)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6013      	str	r3, [r2, #0]
						break;
 8004a8a:	e02e      	b.n	8004aea <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	3304      	adds	r3, #4
 8004a90:	4618      	mov	r0, r3
 8004a92:	f7fe fb73 	bl	800317c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d004      	beq.n	8004aa8 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	3318      	adds	r3, #24
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f7fe fb6a 	bl	800317c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aac:	2201      	movs	r2, #1
 8004aae:	409a      	lsls	r2, r3
 8004ab0:	4b23      	ldr	r3, [pc, #140]	; (8004b40 <xTaskIncrementTick+0x164>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	4a22      	ldr	r2, [pc, #136]	; (8004b40 <xTaskIncrementTick+0x164>)
 8004ab8:	6013      	str	r3, [r2, #0]
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004abe:	4613      	mov	r3, r2
 8004ac0:	009b      	lsls	r3, r3, #2
 8004ac2:	4413      	add	r3, r2
 8004ac4:	009b      	lsls	r3, r3, #2
 8004ac6:	4a1f      	ldr	r2, [pc, #124]	; (8004b44 <xTaskIncrementTick+0x168>)
 8004ac8:	441a      	add	r2, r3
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	3304      	adds	r3, #4
 8004ace:	4619      	mov	r1, r3
 8004ad0:	4610      	mov	r0, r2
 8004ad2:	f7fe faf6 	bl	80030c2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ada:	4b1b      	ldr	r3, [pc, #108]	; (8004b48 <xTaskIncrementTick+0x16c>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae0:	429a      	cmp	r2, r3
 8004ae2:	d3b4      	bcc.n	8004a4e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ae8:	e7b1      	b.n	8004a4e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004aea:	4b17      	ldr	r3, [pc, #92]	; (8004b48 <xTaskIncrementTick+0x16c>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004af0:	4914      	ldr	r1, [pc, #80]	; (8004b44 <xTaskIncrementTick+0x168>)
 8004af2:	4613      	mov	r3, r2
 8004af4:	009b      	lsls	r3, r3, #2
 8004af6:	4413      	add	r3, r2
 8004af8:	009b      	lsls	r3, r3, #2
 8004afa:	440b      	add	r3, r1
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	2b01      	cmp	r3, #1
 8004b00:	d907      	bls.n	8004b12 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8004b02:	2301      	movs	r3, #1
 8004b04:	617b      	str	r3, [r7, #20]
 8004b06:	e004      	b.n	8004b12 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004b08:	4b10      	ldr	r3, [pc, #64]	; (8004b4c <xTaskIncrementTick+0x170>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	3301      	adds	r3, #1
 8004b0e:	4a0f      	ldr	r2, [pc, #60]	; (8004b4c <xTaskIncrementTick+0x170>)
 8004b10:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004b12:	4b0f      	ldr	r3, [pc, #60]	; (8004b50 <xTaskIncrementTick+0x174>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d001      	beq.n	8004b1e <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004b1e:	697b      	ldr	r3, [r7, #20]
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	3718      	adds	r7, #24
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}
 8004b28:	20003d70 	.word	0x20003d70
 8004b2c:	20003d4c 	.word	0x20003d4c
 8004b30:	20003d00 	.word	0x20003d00
 8004b34:	20003d04 	.word	0x20003d04
 8004b38:	20003d60 	.word	0x20003d60
 8004b3c:	20003d68 	.word	0x20003d68
 8004b40:	20003d50 	.word	0x20003d50
 8004b44:	20003c4c 	.word	0x20003c4c
 8004b48:	20003c48 	.word	0x20003c48
 8004b4c:	20003d58 	.word	0x20003d58
 8004b50:	20003d5c 	.word	0x20003d5c

08004b54 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004b54:	b480      	push	{r7}
 8004b56:	b087      	sub	sp, #28
 8004b58:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004b5a:	4b26      	ldr	r3, [pc, #152]	; (8004bf4 <vTaskSwitchContext+0xa0>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d003      	beq.n	8004b6a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004b62:	4b25      	ldr	r3, [pc, #148]	; (8004bf8 <vTaskSwitchContext+0xa4>)
 8004b64:	2201      	movs	r2, #1
 8004b66:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004b68:	e03e      	b.n	8004be8 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8004b6a:	4b23      	ldr	r3, [pc, #140]	; (8004bf8 <vTaskSwitchContext+0xa4>)
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004b70:	4b22      	ldr	r3, [pc, #136]	; (8004bfc <vTaskSwitchContext+0xa8>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	fab3 f383 	clz	r3, r3
 8004b7c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004b7e:	7afb      	ldrb	r3, [r7, #11]
 8004b80:	f1c3 031f 	rsb	r3, r3, #31
 8004b84:	617b      	str	r3, [r7, #20]
 8004b86:	491e      	ldr	r1, [pc, #120]	; (8004c00 <vTaskSwitchContext+0xac>)
 8004b88:	697a      	ldr	r2, [r7, #20]
 8004b8a:	4613      	mov	r3, r2
 8004b8c:	009b      	lsls	r3, r3, #2
 8004b8e:	4413      	add	r3, r2
 8004b90:	009b      	lsls	r3, r3, #2
 8004b92:	440b      	add	r3, r1
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d109      	bne.n	8004bae <vTaskSwitchContext+0x5a>
	__asm volatile
 8004b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b9e:	f383 8811 	msr	BASEPRI, r3
 8004ba2:	f3bf 8f6f 	isb	sy
 8004ba6:	f3bf 8f4f 	dsb	sy
 8004baa:	607b      	str	r3, [r7, #4]
 8004bac:	e7fe      	b.n	8004bac <vTaskSwitchContext+0x58>
 8004bae:	697a      	ldr	r2, [r7, #20]
 8004bb0:	4613      	mov	r3, r2
 8004bb2:	009b      	lsls	r3, r3, #2
 8004bb4:	4413      	add	r3, r2
 8004bb6:	009b      	lsls	r3, r3, #2
 8004bb8:	4a11      	ldr	r2, [pc, #68]	; (8004c00 <vTaskSwitchContext+0xac>)
 8004bba:	4413      	add	r3, r2
 8004bbc:	613b      	str	r3, [r7, #16]
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	685a      	ldr	r2, [r3, #4]
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	605a      	str	r2, [r3, #4]
 8004bc8:	693b      	ldr	r3, [r7, #16]
 8004bca:	685a      	ldr	r2, [r3, #4]
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	3308      	adds	r3, #8
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d104      	bne.n	8004bde <vTaskSwitchContext+0x8a>
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	685a      	ldr	r2, [r3, #4]
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	605a      	str	r2, [r3, #4]
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	68db      	ldr	r3, [r3, #12]
 8004be4:	4a07      	ldr	r2, [pc, #28]	; (8004c04 <vTaskSwitchContext+0xb0>)
 8004be6:	6013      	str	r3, [r2, #0]
}
 8004be8:	bf00      	nop
 8004bea:	371c      	adds	r7, #28
 8004bec:	46bd      	mov	sp, r7
 8004bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf2:	4770      	bx	lr
 8004bf4:	20003d70 	.word	0x20003d70
 8004bf8:	20003d5c 	.word	0x20003d5c
 8004bfc:	20003d50 	.word	0x20003d50
 8004c00:	20003c4c 	.word	0x20003c4c
 8004c04:	20003c48 	.word	0x20003c48

08004c08 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b084      	sub	sp, #16
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
 8004c10:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d109      	bne.n	8004c2c <vTaskPlaceOnEventList+0x24>
 8004c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c1c:	f383 8811 	msr	BASEPRI, r3
 8004c20:	f3bf 8f6f 	isb	sy
 8004c24:	f3bf 8f4f 	dsb	sy
 8004c28:	60fb      	str	r3, [r7, #12]
 8004c2a:	e7fe      	b.n	8004c2a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004c2c:	4b07      	ldr	r3, [pc, #28]	; (8004c4c <vTaskPlaceOnEventList+0x44>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	3318      	adds	r3, #24
 8004c32:	4619      	mov	r1, r3
 8004c34:	6878      	ldr	r0, [r7, #4]
 8004c36:	f7fe fa68 	bl	800310a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004c3a:	2101      	movs	r1, #1
 8004c3c:	6838      	ldr	r0, [r7, #0]
 8004c3e:	f000 fa65 	bl	800510c <prvAddCurrentTaskToDelayedList>
}
 8004c42:	bf00      	nop
 8004c44:	3710      	adds	r7, #16
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}
 8004c4a:	bf00      	nop
 8004c4c:	20003c48 	.word	0x20003c48

08004c50 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b086      	sub	sp, #24
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	68db      	ldr	r3, [r3, #12]
 8004c5c:	68db      	ldr	r3, [r3, #12]
 8004c5e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004c60:	693b      	ldr	r3, [r7, #16]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d109      	bne.n	8004c7a <xTaskRemoveFromEventList+0x2a>
 8004c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c6a:	f383 8811 	msr	BASEPRI, r3
 8004c6e:	f3bf 8f6f 	isb	sy
 8004c72:	f3bf 8f4f 	dsb	sy
 8004c76:	60fb      	str	r3, [r7, #12]
 8004c78:	e7fe      	b.n	8004c78 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	3318      	adds	r3, #24
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f7fe fa7c 	bl	800317c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c84:	4b1d      	ldr	r3, [pc, #116]	; (8004cfc <xTaskRemoveFromEventList+0xac>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d11c      	bne.n	8004cc6 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	3304      	adds	r3, #4
 8004c90:	4618      	mov	r0, r3
 8004c92:	f7fe fa73 	bl	800317c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	409a      	lsls	r2, r3
 8004c9e:	4b18      	ldr	r3, [pc, #96]	; (8004d00 <xTaskRemoveFromEventList+0xb0>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	4a16      	ldr	r2, [pc, #88]	; (8004d00 <xTaskRemoveFromEventList+0xb0>)
 8004ca6:	6013      	str	r3, [r2, #0]
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cac:	4613      	mov	r3, r2
 8004cae:	009b      	lsls	r3, r3, #2
 8004cb0:	4413      	add	r3, r2
 8004cb2:	009b      	lsls	r3, r3, #2
 8004cb4:	4a13      	ldr	r2, [pc, #76]	; (8004d04 <xTaskRemoveFromEventList+0xb4>)
 8004cb6:	441a      	add	r2, r3
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	3304      	adds	r3, #4
 8004cbc:	4619      	mov	r1, r3
 8004cbe:	4610      	mov	r0, r2
 8004cc0:	f7fe f9ff 	bl	80030c2 <vListInsertEnd>
 8004cc4:	e005      	b.n	8004cd2 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	3318      	adds	r3, #24
 8004cca:	4619      	mov	r1, r3
 8004ccc:	480e      	ldr	r0, [pc, #56]	; (8004d08 <xTaskRemoveFromEventList+0xb8>)
 8004cce:	f7fe f9f8 	bl	80030c2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cd6:	4b0d      	ldr	r3, [pc, #52]	; (8004d0c <xTaskRemoveFromEventList+0xbc>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	d905      	bls.n	8004cec <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004ce4:	4b0a      	ldr	r3, [pc, #40]	; (8004d10 <xTaskRemoveFromEventList+0xc0>)
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	601a      	str	r2, [r3, #0]
 8004cea:	e001      	b.n	8004cf0 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8004cec:	2300      	movs	r3, #0
 8004cee:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8004cf0:	697b      	ldr	r3, [r7, #20]
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	3718      	adds	r7, #24
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}
 8004cfa:	bf00      	nop
 8004cfc:	20003d70 	.word	0x20003d70
 8004d00:	20003d50 	.word	0x20003d50
 8004d04:	20003c4c 	.word	0x20003c4c
 8004d08:	20003d08 	.word	0x20003d08
 8004d0c:	20003c48 	.word	0x20003c48
 8004d10:	20003d5c 	.word	0x20003d5c

08004d14 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004d14:	b480      	push	{r7}
 8004d16:	b083      	sub	sp, #12
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004d1c:	4b06      	ldr	r3, [pc, #24]	; (8004d38 <vTaskInternalSetTimeOutState+0x24>)
 8004d1e:	681a      	ldr	r2, [r3, #0]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004d24:	4b05      	ldr	r3, [pc, #20]	; (8004d3c <vTaskInternalSetTimeOutState+0x28>)
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	605a      	str	r2, [r3, #4]
}
 8004d2c:	bf00      	nop
 8004d2e:	370c      	adds	r7, #12
 8004d30:	46bd      	mov	sp, r7
 8004d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d36:	4770      	bx	lr
 8004d38:	20003d60 	.word	0x20003d60
 8004d3c:	20003d4c 	.word	0x20003d4c

08004d40 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b088      	sub	sp, #32
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
 8004d48:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d109      	bne.n	8004d64 <xTaskCheckForTimeOut+0x24>
 8004d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d54:	f383 8811 	msr	BASEPRI, r3
 8004d58:	f3bf 8f6f 	isb	sy
 8004d5c:	f3bf 8f4f 	dsb	sy
 8004d60:	613b      	str	r3, [r7, #16]
 8004d62:	e7fe      	b.n	8004d62 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d109      	bne.n	8004d7e <xTaskCheckForTimeOut+0x3e>
 8004d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d6e:	f383 8811 	msr	BASEPRI, r3
 8004d72:	f3bf 8f6f 	isb	sy
 8004d76:	f3bf 8f4f 	dsb	sy
 8004d7a:	60fb      	str	r3, [r7, #12]
 8004d7c:	e7fe      	b.n	8004d7c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8004d7e:	f7fe fb4d 	bl	800341c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004d82:	4b1d      	ldr	r3, [pc, #116]	; (8004df8 <xTaskCheckForTimeOut+0xb8>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	69ba      	ldr	r2, [r7, #24]
 8004d8e:	1ad3      	subs	r3, r2, r3
 8004d90:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d9a:	d102      	bne.n	8004da2 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	61fb      	str	r3, [r7, #28]
 8004da0:	e023      	b.n	8004dea <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	4b15      	ldr	r3, [pc, #84]	; (8004dfc <xTaskCheckForTimeOut+0xbc>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	429a      	cmp	r2, r3
 8004dac:	d007      	beq.n	8004dbe <xTaskCheckForTimeOut+0x7e>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	685a      	ldr	r2, [r3, #4]
 8004db2:	69bb      	ldr	r3, [r7, #24]
 8004db4:	429a      	cmp	r2, r3
 8004db6:	d802      	bhi.n	8004dbe <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004db8:	2301      	movs	r3, #1
 8004dba:	61fb      	str	r3, [r7, #28]
 8004dbc:	e015      	b.n	8004dea <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	681a      	ldr	r2, [r3, #0]
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	429a      	cmp	r2, r3
 8004dc6:	d90b      	bls.n	8004de0 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	681a      	ldr	r2, [r3, #0]
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	1ad2      	subs	r2, r2, r3
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	f7ff ff9d 	bl	8004d14 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	61fb      	str	r3, [r7, #28]
 8004dde:	e004      	b.n	8004dea <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	2200      	movs	r2, #0
 8004de4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004de6:	2301      	movs	r3, #1
 8004de8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004dea:	f7fe fb45 	bl	8003478 <vPortExitCritical>

	return xReturn;
 8004dee:	69fb      	ldr	r3, [r7, #28]
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	3720      	adds	r7, #32
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}
 8004df8:	20003d4c 	.word	0x20003d4c
 8004dfc:	20003d60 	.word	0x20003d60

08004e00 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004e00:	b480      	push	{r7}
 8004e02:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004e04:	4b03      	ldr	r3, [pc, #12]	; (8004e14 <vTaskMissedYield+0x14>)
 8004e06:	2201      	movs	r2, #1
 8004e08:	601a      	str	r2, [r3, #0]
}
 8004e0a:	bf00      	nop
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e12:	4770      	bx	lr
 8004e14:	20003d5c 	.word	0x20003d5c

08004e18 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b082      	sub	sp, #8
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004e20:	f000 f852 	bl	8004ec8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004e24:	4b06      	ldr	r3, [pc, #24]	; (8004e40 <prvIdleTask+0x28>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	d9f9      	bls.n	8004e20 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004e2c:	4b05      	ldr	r3, [pc, #20]	; (8004e44 <prvIdleTask+0x2c>)
 8004e2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e32:	601a      	str	r2, [r3, #0]
 8004e34:	f3bf 8f4f 	dsb	sy
 8004e38:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004e3c:	e7f0      	b.n	8004e20 <prvIdleTask+0x8>
 8004e3e:	bf00      	nop
 8004e40:	20003c4c 	.word	0x20003c4c
 8004e44:	e000ed04 	.word	0xe000ed04

08004e48 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b082      	sub	sp, #8
 8004e4c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004e4e:	2300      	movs	r3, #0
 8004e50:	607b      	str	r3, [r7, #4]
 8004e52:	e00c      	b.n	8004e6e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004e54:	687a      	ldr	r2, [r7, #4]
 8004e56:	4613      	mov	r3, r2
 8004e58:	009b      	lsls	r3, r3, #2
 8004e5a:	4413      	add	r3, r2
 8004e5c:	009b      	lsls	r3, r3, #2
 8004e5e:	4a12      	ldr	r2, [pc, #72]	; (8004ea8 <prvInitialiseTaskLists+0x60>)
 8004e60:	4413      	add	r3, r2
 8004e62:	4618      	mov	r0, r3
 8004e64:	f7fe f900 	bl	8003068 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	3301      	adds	r3, #1
 8004e6c:	607b      	str	r3, [r7, #4]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2b06      	cmp	r3, #6
 8004e72:	d9ef      	bls.n	8004e54 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004e74:	480d      	ldr	r0, [pc, #52]	; (8004eac <prvInitialiseTaskLists+0x64>)
 8004e76:	f7fe f8f7 	bl	8003068 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004e7a:	480d      	ldr	r0, [pc, #52]	; (8004eb0 <prvInitialiseTaskLists+0x68>)
 8004e7c:	f7fe f8f4 	bl	8003068 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004e80:	480c      	ldr	r0, [pc, #48]	; (8004eb4 <prvInitialiseTaskLists+0x6c>)
 8004e82:	f7fe f8f1 	bl	8003068 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004e86:	480c      	ldr	r0, [pc, #48]	; (8004eb8 <prvInitialiseTaskLists+0x70>)
 8004e88:	f7fe f8ee 	bl	8003068 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004e8c:	480b      	ldr	r0, [pc, #44]	; (8004ebc <prvInitialiseTaskLists+0x74>)
 8004e8e:	f7fe f8eb 	bl	8003068 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004e92:	4b0b      	ldr	r3, [pc, #44]	; (8004ec0 <prvInitialiseTaskLists+0x78>)
 8004e94:	4a05      	ldr	r2, [pc, #20]	; (8004eac <prvInitialiseTaskLists+0x64>)
 8004e96:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004e98:	4b0a      	ldr	r3, [pc, #40]	; (8004ec4 <prvInitialiseTaskLists+0x7c>)
 8004e9a:	4a05      	ldr	r2, [pc, #20]	; (8004eb0 <prvInitialiseTaskLists+0x68>)
 8004e9c:	601a      	str	r2, [r3, #0]
}
 8004e9e:	bf00      	nop
 8004ea0:	3708      	adds	r7, #8
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}
 8004ea6:	bf00      	nop
 8004ea8:	20003c4c 	.word	0x20003c4c
 8004eac:	20003cd8 	.word	0x20003cd8
 8004eb0:	20003cec 	.word	0x20003cec
 8004eb4:	20003d08 	.word	0x20003d08
 8004eb8:	20003d1c 	.word	0x20003d1c
 8004ebc:	20003d34 	.word	0x20003d34
 8004ec0:	20003d00 	.word	0x20003d00
 8004ec4:	20003d04 	.word	0x20003d04

08004ec8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b082      	sub	sp, #8
 8004ecc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004ece:	e019      	b.n	8004f04 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004ed0:	f7fe faa4 	bl	800341c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004ed4:	4b0f      	ldr	r3, [pc, #60]	; (8004f14 <prvCheckTasksWaitingTermination+0x4c>)
 8004ed6:	68db      	ldr	r3, [r3, #12]
 8004ed8:	68db      	ldr	r3, [r3, #12]
 8004eda:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	3304      	adds	r3, #4
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	f7fe f94b 	bl	800317c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004ee6:	4b0c      	ldr	r3, [pc, #48]	; (8004f18 <prvCheckTasksWaitingTermination+0x50>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	3b01      	subs	r3, #1
 8004eec:	4a0a      	ldr	r2, [pc, #40]	; (8004f18 <prvCheckTasksWaitingTermination+0x50>)
 8004eee:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004ef0:	4b0a      	ldr	r3, [pc, #40]	; (8004f1c <prvCheckTasksWaitingTermination+0x54>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	3b01      	subs	r3, #1
 8004ef6:	4a09      	ldr	r2, [pc, #36]	; (8004f1c <prvCheckTasksWaitingTermination+0x54>)
 8004ef8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004efa:	f7fe fabd 	bl	8003478 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	f000 f80e 	bl	8004f20 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004f04:	4b05      	ldr	r3, [pc, #20]	; (8004f1c <prvCheckTasksWaitingTermination+0x54>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d1e1      	bne.n	8004ed0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004f0c:	bf00      	nop
 8004f0e:	3708      	adds	r7, #8
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}
 8004f14:	20003d1c 	.word	0x20003d1c
 8004f18:	20003d48 	.word	0x20003d48
 8004f1c:	20003d30 	.word	0x20003d30

08004f20 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b084      	sub	sp, #16
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d108      	bne.n	8004f44 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f36:	4618      	mov	r0, r3
 8004f38:	f7fe fc4c 	bl	80037d4 <vPortFree>
				vPortFree( pxTCB );
 8004f3c:	6878      	ldr	r0, [r7, #4]
 8004f3e:	f7fe fc49 	bl	80037d4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004f42:	e017      	b.n	8004f74 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f4a:	2b01      	cmp	r3, #1
 8004f4c:	d103      	bne.n	8004f56 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	f7fe fc40 	bl	80037d4 <vPortFree>
	}
 8004f54:	e00e      	b.n	8004f74 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f5c:	2b02      	cmp	r3, #2
 8004f5e:	d009      	beq.n	8004f74 <prvDeleteTCB+0x54>
 8004f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f64:	f383 8811 	msr	BASEPRI, r3
 8004f68:	f3bf 8f6f 	isb	sy
 8004f6c:	f3bf 8f4f 	dsb	sy
 8004f70:	60fb      	str	r3, [r7, #12]
 8004f72:	e7fe      	b.n	8004f72 <prvDeleteTCB+0x52>
	}
 8004f74:	bf00      	nop
 8004f76:	3710      	adds	r7, #16
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}

08004f7c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b083      	sub	sp, #12
 8004f80:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f82:	4b0f      	ldr	r3, [pc, #60]	; (8004fc0 <prvResetNextTaskUnblockTime+0x44>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d101      	bne.n	8004f90 <prvResetNextTaskUnblockTime+0x14>
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	e000      	b.n	8004f92 <prvResetNextTaskUnblockTime+0x16>
 8004f90:	2300      	movs	r3, #0
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d004      	beq.n	8004fa0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004f96:	4b0b      	ldr	r3, [pc, #44]	; (8004fc4 <prvResetNextTaskUnblockTime+0x48>)
 8004f98:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004f9c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004f9e:	e008      	b.n	8004fb2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004fa0:	4b07      	ldr	r3, [pc, #28]	; (8004fc0 <prvResetNextTaskUnblockTime+0x44>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	68db      	ldr	r3, [r3, #12]
 8004fa6:	68db      	ldr	r3, [r3, #12]
 8004fa8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	4a05      	ldr	r2, [pc, #20]	; (8004fc4 <prvResetNextTaskUnblockTime+0x48>)
 8004fb0:	6013      	str	r3, [r2, #0]
}
 8004fb2:	bf00      	nop
 8004fb4:	370c      	adds	r7, #12
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbc:	4770      	bx	lr
 8004fbe:	bf00      	nop
 8004fc0:	20003d00 	.word	0x20003d00
 8004fc4:	20003d68 	.word	0x20003d68

08004fc8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004fc8:	b480      	push	{r7}
 8004fca:	b083      	sub	sp, #12
 8004fcc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004fce:	4b0b      	ldr	r3, [pc, #44]	; (8004ffc <xTaskGetSchedulerState+0x34>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d102      	bne.n	8004fdc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	607b      	str	r3, [r7, #4]
 8004fda:	e008      	b.n	8004fee <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004fdc:	4b08      	ldr	r3, [pc, #32]	; (8005000 <xTaskGetSchedulerState+0x38>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d102      	bne.n	8004fea <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004fe4:	2302      	movs	r3, #2
 8004fe6:	607b      	str	r3, [r7, #4]
 8004fe8:	e001      	b.n	8004fee <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004fea:	2300      	movs	r3, #0
 8004fec:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004fee:	687b      	ldr	r3, [r7, #4]
	}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	370c      	adds	r7, #12
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffa:	4770      	bx	lr
 8004ffc:	20003d54 	.word	0x20003d54
 8005000:	20003d70 	.word	0x20003d70

08005004 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005004:	b580      	push	{r7, lr}
 8005006:	b086      	sub	sp, #24
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005010:	2300      	movs	r3, #0
 8005012:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d06c      	beq.n	80050f4 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800501a:	4b39      	ldr	r3, [pc, #228]	; (8005100 <xTaskPriorityDisinherit+0xfc>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	693a      	ldr	r2, [r7, #16]
 8005020:	429a      	cmp	r2, r3
 8005022:	d009      	beq.n	8005038 <xTaskPriorityDisinherit+0x34>
 8005024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005028:	f383 8811 	msr	BASEPRI, r3
 800502c:	f3bf 8f6f 	isb	sy
 8005030:	f3bf 8f4f 	dsb	sy
 8005034:	60fb      	str	r3, [r7, #12]
 8005036:	e7fe      	b.n	8005036 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800503c:	2b00      	cmp	r3, #0
 800503e:	d109      	bne.n	8005054 <xTaskPriorityDisinherit+0x50>
 8005040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005044:	f383 8811 	msr	BASEPRI, r3
 8005048:	f3bf 8f6f 	isb	sy
 800504c:	f3bf 8f4f 	dsb	sy
 8005050:	60bb      	str	r3, [r7, #8]
 8005052:	e7fe      	b.n	8005052 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005058:	1e5a      	subs	r2, r3, #1
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005066:	429a      	cmp	r2, r3
 8005068:	d044      	beq.n	80050f4 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800506e:	2b00      	cmp	r3, #0
 8005070:	d140      	bne.n	80050f4 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	3304      	adds	r3, #4
 8005076:	4618      	mov	r0, r3
 8005078:	f7fe f880 	bl	800317c <uxListRemove>
 800507c:	4603      	mov	r3, r0
 800507e:	2b00      	cmp	r3, #0
 8005080:	d115      	bne.n	80050ae <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005086:	491f      	ldr	r1, [pc, #124]	; (8005104 <xTaskPriorityDisinherit+0x100>)
 8005088:	4613      	mov	r3, r2
 800508a:	009b      	lsls	r3, r3, #2
 800508c:	4413      	add	r3, r2
 800508e:	009b      	lsls	r3, r3, #2
 8005090:	440b      	add	r3, r1
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d10a      	bne.n	80050ae <xTaskPriorityDisinherit+0xaa>
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800509c:	2201      	movs	r2, #1
 800509e:	fa02 f303 	lsl.w	r3, r2, r3
 80050a2:	43da      	mvns	r2, r3
 80050a4:	4b18      	ldr	r3, [pc, #96]	; (8005108 <xTaskPriorityDisinherit+0x104>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4013      	ands	r3, r2
 80050aa:	4a17      	ldr	r2, [pc, #92]	; (8005108 <xTaskPriorityDisinherit+0x104>)
 80050ac:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ba:	f1c3 0207 	rsb	r2, r3, #7
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050c6:	2201      	movs	r2, #1
 80050c8:	409a      	lsls	r2, r3
 80050ca:	4b0f      	ldr	r3, [pc, #60]	; (8005108 <xTaskPriorityDisinherit+0x104>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4313      	orrs	r3, r2
 80050d0:	4a0d      	ldr	r2, [pc, #52]	; (8005108 <xTaskPriorityDisinherit+0x104>)
 80050d2:	6013      	str	r3, [r2, #0]
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050d8:	4613      	mov	r3, r2
 80050da:	009b      	lsls	r3, r3, #2
 80050dc:	4413      	add	r3, r2
 80050de:	009b      	lsls	r3, r3, #2
 80050e0:	4a08      	ldr	r2, [pc, #32]	; (8005104 <xTaskPriorityDisinherit+0x100>)
 80050e2:	441a      	add	r2, r3
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	3304      	adds	r3, #4
 80050e8:	4619      	mov	r1, r3
 80050ea:	4610      	mov	r0, r2
 80050ec:	f7fd ffe9 	bl	80030c2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80050f0:	2301      	movs	r3, #1
 80050f2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80050f4:	697b      	ldr	r3, [r7, #20]
	}
 80050f6:	4618      	mov	r0, r3
 80050f8:	3718      	adds	r7, #24
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}
 80050fe:	bf00      	nop
 8005100:	20003c48 	.word	0x20003c48
 8005104:	20003c4c 	.word	0x20003c4c
 8005108:	20003d50 	.word	0x20003d50

0800510c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b084      	sub	sp, #16
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
 8005114:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005116:	4b29      	ldr	r3, [pc, #164]	; (80051bc <prvAddCurrentTaskToDelayedList+0xb0>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800511c:	4b28      	ldr	r3, [pc, #160]	; (80051c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	3304      	adds	r3, #4
 8005122:	4618      	mov	r0, r3
 8005124:	f7fe f82a 	bl	800317c <uxListRemove>
 8005128:	4603      	mov	r3, r0
 800512a:	2b00      	cmp	r3, #0
 800512c:	d10b      	bne.n	8005146 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800512e:	4b24      	ldr	r3, [pc, #144]	; (80051c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005134:	2201      	movs	r2, #1
 8005136:	fa02 f303 	lsl.w	r3, r2, r3
 800513a:	43da      	mvns	r2, r3
 800513c:	4b21      	ldr	r3, [pc, #132]	; (80051c4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4013      	ands	r3, r2
 8005142:	4a20      	ldr	r2, [pc, #128]	; (80051c4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005144:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800514c:	d10a      	bne.n	8005164 <prvAddCurrentTaskToDelayedList+0x58>
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d007      	beq.n	8005164 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005154:	4b1a      	ldr	r3, [pc, #104]	; (80051c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	3304      	adds	r3, #4
 800515a:	4619      	mov	r1, r3
 800515c:	481a      	ldr	r0, [pc, #104]	; (80051c8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800515e:	f7fd ffb0 	bl	80030c2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005162:	e026      	b.n	80051b2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005164:	68fa      	ldr	r2, [r7, #12]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	4413      	add	r3, r2
 800516a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800516c:	4b14      	ldr	r3, [pc, #80]	; (80051c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	68ba      	ldr	r2, [r7, #8]
 8005172:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005174:	68ba      	ldr	r2, [r7, #8]
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	429a      	cmp	r2, r3
 800517a:	d209      	bcs.n	8005190 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800517c:	4b13      	ldr	r3, [pc, #76]	; (80051cc <prvAddCurrentTaskToDelayedList+0xc0>)
 800517e:	681a      	ldr	r2, [r3, #0]
 8005180:	4b0f      	ldr	r3, [pc, #60]	; (80051c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	3304      	adds	r3, #4
 8005186:	4619      	mov	r1, r3
 8005188:	4610      	mov	r0, r2
 800518a:	f7fd ffbe 	bl	800310a <vListInsert>
}
 800518e:	e010      	b.n	80051b2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005190:	4b0f      	ldr	r3, [pc, #60]	; (80051d0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005192:	681a      	ldr	r2, [r3, #0]
 8005194:	4b0a      	ldr	r3, [pc, #40]	; (80051c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	3304      	adds	r3, #4
 800519a:	4619      	mov	r1, r3
 800519c:	4610      	mov	r0, r2
 800519e:	f7fd ffb4 	bl	800310a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80051a2:	4b0c      	ldr	r3, [pc, #48]	; (80051d4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	68ba      	ldr	r2, [r7, #8]
 80051a8:	429a      	cmp	r2, r3
 80051aa:	d202      	bcs.n	80051b2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80051ac:	4a09      	ldr	r2, [pc, #36]	; (80051d4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	6013      	str	r3, [r2, #0]
}
 80051b2:	bf00      	nop
 80051b4:	3710      	adds	r7, #16
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}
 80051ba:	bf00      	nop
 80051bc:	20003d4c 	.word	0x20003d4c
 80051c0:	20003c48 	.word	0x20003c48
 80051c4:	20003d50 	.word	0x20003d50
 80051c8:	20003d34 	.word	0x20003d34
 80051cc:	20003d04 	.word	0x20003d04
 80051d0:	20003d00 	.word	0x20003d00
 80051d4:	20003d68 	.word	0x20003d68

080051d8 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b082      	sub	sp, #8
 80051dc:	af00      	add	r7, sp, #0
   uint8_t MACAddr[6] ;

  heth.Instance = ETH;
 80051de:	4b17      	ldr	r3, [pc, #92]	; (800523c <MX_ETH_Init+0x64>)
 80051e0:	4a17      	ldr	r2, [pc, #92]	; (8005240 <MX_ETH_Init+0x68>)
 80051e2:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80051e4:	4b15      	ldr	r3, [pc, #84]	; (800523c <MX_ETH_Init+0x64>)
 80051e6:	2201      	movs	r2, #1
 80051e8:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 80051ea:	4b14      	ldr	r3, [pc, #80]	; (800523c <MX_ETH_Init+0x64>)
 80051ec:	2200      	movs	r2, #0
 80051ee:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 80051f0:	2300      	movs	r3, #0
 80051f2:	703b      	strb	r3, [r7, #0]
  MACAddr[1] = 0x80;
 80051f4:	2380      	movs	r3, #128	; 0x80
 80051f6:	707b      	strb	r3, [r7, #1]
  MACAddr[2] = 0xE1;
 80051f8:	23e1      	movs	r3, #225	; 0xe1
 80051fa:	70bb      	strb	r3, [r7, #2]
  MACAddr[3] = 0x00;
 80051fc:	2300      	movs	r3, #0
 80051fe:	70fb      	strb	r3, [r7, #3]
  MACAddr[4] = 0x00;
 8005200:	2300      	movs	r3, #0
 8005202:	713b      	strb	r3, [r7, #4]
  MACAddr[5] = 0x00;
 8005204:	2300      	movs	r3, #0
 8005206:	717b      	strb	r3, [r7, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8005208:	4a0c      	ldr	r2, [pc, #48]	; (800523c <MX_ETH_Init+0x64>)
 800520a:	463b      	mov	r3, r7
 800520c:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 800520e:	4b0b      	ldr	r3, [pc, #44]	; (800523c <MX_ETH_Init+0x64>)
 8005210:	2200      	movs	r2, #0
 8005212:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8005214:	4b09      	ldr	r3, [pc, #36]	; (800523c <MX_ETH_Init+0x64>)
 8005216:	2200      	movs	r2, #0
 8005218:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800521a:	4b08      	ldr	r3, [pc, #32]	; (800523c <MX_ETH_Init+0x64>)
 800521c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8005220:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8005222:	4806      	ldr	r0, [pc, #24]	; (800523c <MX_ETH_Init+0x64>)
 8005224:	f7fb fab0 	bl	8000788 <HAL_ETH_Init>
 8005228:	4603      	mov	r3, r0
 800522a:	2b00      	cmp	r3, #0
 800522c:	d001      	beq.n	8005232 <MX_ETH_Init+0x5a>
  {
    Error_Handler();
 800522e:	f000 fba3 	bl	8005978 <Error_Handler>
  }

}
 8005232:	bf00      	nop
 8005234:	3708      	adds	r7, #8
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}
 800523a:	bf00      	nop
 800523c:	20003fd4 	.word	0x20003fd4
 8005240:	40028000 	.word	0x40028000

08005244 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b08e      	sub	sp, #56	; 0x38
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800524c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005250:	2200      	movs	r2, #0
 8005252:	601a      	str	r2, [r3, #0]
 8005254:	605a      	str	r2, [r3, #4]
 8005256:	609a      	str	r2, [r3, #8]
 8005258:	60da      	str	r2, [r3, #12]
 800525a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a55      	ldr	r2, [pc, #340]	; (80053b8 <HAL_ETH_MspInit+0x174>)
 8005262:	4293      	cmp	r3, r2
 8005264:	f040 80a4 	bne.w	80053b0 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8005268:	2300      	movs	r3, #0
 800526a:	623b      	str	r3, [r7, #32]
 800526c:	4a53      	ldr	r2, [pc, #332]	; (80053bc <HAL_ETH_MspInit+0x178>)
 800526e:	4b53      	ldr	r3, [pc, #332]	; (80053bc <HAL_ETH_MspInit+0x178>)
 8005270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005272:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005276:	6313      	str	r3, [r2, #48]	; 0x30
 8005278:	4b50      	ldr	r3, [pc, #320]	; (80053bc <HAL_ETH_MspInit+0x178>)
 800527a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800527c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005280:	623b      	str	r3, [r7, #32]
 8005282:	6a3b      	ldr	r3, [r7, #32]
 8005284:	2300      	movs	r3, #0
 8005286:	61fb      	str	r3, [r7, #28]
 8005288:	4a4c      	ldr	r2, [pc, #304]	; (80053bc <HAL_ETH_MspInit+0x178>)
 800528a:	4b4c      	ldr	r3, [pc, #304]	; (80053bc <HAL_ETH_MspInit+0x178>)
 800528c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800528e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005292:	6313      	str	r3, [r2, #48]	; 0x30
 8005294:	4b49      	ldr	r3, [pc, #292]	; (80053bc <HAL_ETH_MspInit+0x178>)
 8005296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005298:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800529c:	61fb      	str	r3, [r7, #28]
 800529e:	69fb      	ldr	r3, [r7, #28]
 80052a0:	2300      	movs	r3, #0
 80052a2:	61bb      	str	r3, [r7, #24]
 80052a4:	4a45      	ldr	r2, [pc, #276]	; (80053bc <HAL_ETH_MspInit+0x178>)
 80052a6:	4b45      	ldr	r3, [pc, #276]	; (80053bc <HAL_ETH_MspInit+0x178>)
 80052a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052aa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80052ae:	6313      	str	r3, [r2, #48]	; 0x30
 80052b0:	4b42      	ldr	r3, [pc, #264]	; (80053bc <HAL_ETH_MspInit+0x178>)
 80052b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052b8:	61bb      	str	r3, [r7, #24]
 80052ba:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80052bc:	2300      	movs	r3, #0
 80052be:	617b      	str	r3, [r7, #20]
 80052c0:	4a3e      	ldr	r2, [pc, #248]	; (80053bc <HAL_ETH_MspInit+0x178>)
 80052c2:	4b3e      	ldr	r3, [pc, #248]	; (80053bc <HAL_ETH_MspInit+0x178>)
 80052c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052c6:	f043 0304 	orr.w	r3, r3, #4
 80052ca:	6313      	str	r3, [r2, #48]	; 0x30
 80052cc:	4b3b      	ldr	r3, [pc, #236]	; (80053bc <HAL_ETH_MspInit+0x178>)
 80052ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052d0:	f003 0304 	and.w	r3, r3, #4
 80052d4:	617b      	str	r3, [r7, #20]
 80052d6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80052d8:	2300      	movs	r3, #0
 80052da:	613b      	str	r3, [r7, #16]
 80052dc:	4a37      	ldr	r2, [pc, #220]	; (80053bc <HAL_ETH_MspInit+0x178>)
 80052de:	4b37      	ldr	r3, [pc, #220]	; (80053bc <HAL_ETH_MspInit+0x178>)
 80052e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052e2:	f043 0301 	orr.w	r3, r3, #1
 80052e6:	6313      	str	r3, [r2, #48]	; 0x30
 80052e8:	4b34      	ldr	r3, [pc, #208]	; (80053bc <HAL_ETH_MspInit+0x178>)
 80052ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ec:	f003 0301 	and.w	r3, r3, #1
 80052f0:	613b      	str	r3, [r7, #16]
 80052f2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80052f4:	2300      	movs	r3, #0
 80052f6:	60fb      	str	r3, [r7, #12]
 80052f8:	4a30      	ldr	r2, [pc, #192]	; (80053bc <HAL_ETH_MspInit+0x178>)
 80052fa:	4b30      	ldr	r3, [pc, #192]	; (80053bc <HAL_ETH_MspInit+0x178>)
 80052fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052fe:	f043 0302 	orr.w	r3, r3, #2
 8005302:	6313      	str	r3, [r2, #48]	; 0x30
 8005304:	4b2d      	ldr	r3, [pc, #180]	; (80053bc <HAL_ETH_MspInit+0x178>)
 8005306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005308:	f003 0302 	and.w	r3, r3, #2
 800530c:	60fb      	str	r3, [r7, #12]
 800530e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8005310:	2300      	movs	r3, #0
 8005312:	60bb      	str	r3, [r7, #8]
 8005314:	4a29      	ldr	r2, [pc, #164]	; (80053bc <HAL_ETH_MspInit+0x178>)
 8005316:	4b29      	ldr	r3, [pc, #164]	; (80053bc <HAL_ETH_MspInit+0x178>)
 8005318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800531a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800531e:	6313      	str	r3, [r2, #48]	; 0x30
 8005320:	4b26      	ldr	r3, [pc, #152]	; (80053bc <HAL_ETH_MspInit+0x178>)
 8005322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005324:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005328:	60bb      	str	r3, [r7, #8]
 800532a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800532c:	2332      	movs	r3, #50	; 0x32
 800532e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005330:	2302      	movs	r3, #2
 8005332:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005334:	2300      	movs	r3, #0
 8005336:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005338:	2303      	movs	r3, #3
 800533a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800533c:	230b      	movs	r3, #11
 800533e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005340:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005344:	4619      	mov	r1, r3
 8005346:	481e      	ldr	r0, [pc, #120]	; (80053c0 <HAL_ETH_MspInit+0x17c>)
 8005348:	f7fb fe8a 	bl	8001060 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800534c:	2386      	movs	r3, #134	; 0x86
 800534e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005350:	2302      	movs	r3, #2
 8005352:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005354:	2300      	movs	r3, #0
 8005356:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005358:	2303      	movs	r3, #3
 800535a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800535c:	230b      	movs	r3, #11
 800535e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005360:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005364:	4619      	mov	r1, r3
 8005366:	4817      	ldr	r0, [pc, #92]	; (80053c4 <HAL_ETH_MspInit+0x180>)
 8005368:	f7fb fe7a 	bl	8001060 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800536c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005370:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005372:	2302      	movs	r3, #2
 8005374:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005376:	2300      	movs	r3, #0
 8005378:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800537a:	2303      	movs	r3, #3
 800537c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800537e:	230b      	movs	r3, #11
 8005380:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8005382:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005386:	4619      	mov	r1, r3
 8005388:	480f      	ldr	r0, [pc, #60]	; (80053c8 <HAL_ETH_MspInit+0x184>)
 800538a:	f7fb fe69 	bl	8001060 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800538e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8005392:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005394:	2302      	movs	r3, #2
 8005396:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005398:	2300      	movs	r3, #0
 800539a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800539c:	2303      	movs	r3, #3
 800539e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80053a0:	230b      	movs	r3, #11
 80053a2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80053a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80053a8:	4619      	mov	r1, r3
 80053aa:	4808      	ldr	r0, [pc, #32]	; (80053cc <HAL_ETH_MspInit+0x188>)
 80053ac:	f7fb fe58 	bl	8001060 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80053b0:	bf00      	nop
 80053b2:	3738      	adds	r7, #56	; 0x38
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}
 80053b8:	40028000 	.word	0x40028000
 80053bc:	40023800 	.word	0x40023800
 80053c0:	40020800 	.word	0x40020800
 80053c4:	40020000 	.word	0x40020000
 80053c8:	40020400 	.word	0x40020400
 80053cc:	40021800 	.word	0x40021800

080053d0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80053d0:	b480      	push	{r7}
 80053d2:	b085      	sub	sp, #20
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	60f8      	str	r0, [r7, #12]
 80053d8:	60b9      	str	r1, [r7, #8]
 80053da:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	4a07      	ldr	r2, [pc, #28]	; (80053fc <vApplicationGetIdleTaskMemory+0x2c>)
 80053e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	4a06      	ldr	r2, [pc, #24]	; (8005400 <vApplicationGetIdleTaskMemory+0x30>)
 80053e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2280      	movs	r2, #128	; 0x80
 80053ec:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 80053ee:	bf00      	nop
 80053f0:	3714      	adds	r7, #20
 80053f2:	46bd      	mov	sp, r7
 80053f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f8:	4770      	bx	lr
 80053fa:	bf00      	nop
 80053fc:	20003d7c 	.word	0x20003d7c
 8005400:	20003dd0 	.word	0x20003dd0

08005404 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8005404:	b5b0      	push	{r4, r5, r7, lr}
 8005406:	b0a0      	sub	sp, #128	; 0x80
 8005408:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of exchange */
  osMessageQDef(exchange, 6, uint16_t);
 800540a:	4b2e      	ldr	r3, [pc, #184]	; (80054c4 <MX_FREERTOS_Init+0xc0>)
 800540c:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8005410:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005412:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  exchangeHandle = osMessageCreate(osMessageQ(exchange), NULL);
 8005416:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800541a:	2100      	movs	r1, #0
 800541c:	4618      	mov	r0, r3
 800541e:	f7fd fd46 	bl	8002eae <osMessageCreate>
 8005422:	4602      	mov	r2, r0
 8005424:	4b28      	ldr	r3, [pc, #160]	; (80054c8 <MX_FREERTOS_Init+0xc4>)
 8005426:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8005428:	4b28      	ldr	r3, [pc, #160]	; (80054cc <MX_FREERTOS_Init+0xc8>)
 800542a:	f107 0454 	add.w	r4, r7, #84	; 0x54
 800542e:	461d      	mov	r5, r3
 8005430:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005432:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005434:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005438:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800543c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005440:	2100      	movs	r1, #0
 8005442:	4618      	mov	r0, r3
 8005444:	f7fd fcd3 	bl	8002dee <osThreadCreate>
 8005448:	4602      	mov	r2, r0
 800544a:	4b21      	ldr	r3, [pc, #132]	; (80054d0 <MX_FREERTOS_Init+0xcc>)
 800544c:	601a      	str	r2, [r3, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, StartTask02, osPriorityIdle, 0, 128);
 800544e:	4b21      	ldr	r3, [pc, #132]	; (80054d4 <MX_FREERTOS_Init+0xd0>)
 8005450:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8005454:	461d      	mov	r5, r3
 8005456:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005458:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800545a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800545e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 8005462:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005466:	2100      	movs	r1, #0
 8005468:	4618      	mov	r0, r3
 800546a:	f7fd fcc0 	bl	8002dee <osThreadCreate>
 800546e:	4602      	mov	r2, r0
 8005470:	4b19      	ldr	r3, [pc, #100]	; (80054d8 <MX_FREERTOS_Init+0xd4>)
 8005472:	601a      	str	r2, [r3, #0]

  /* definition and creation of myTask03 */
  osThreadDef(myTask03, StartTask03, osPriorityIdle, 0, 128);
 8005474:	4b19      	ldr	r3, [pc, #100]	; (80054dc <MX_FREERTOS_Init+0xd8>)
 8005476:	f107 041c 	add.w	r4, r7, #28
 800547a:	461d      	mov	r5, r3
 800547c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800547e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005480:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005484:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask03Handle = osThreadCreate(osThread(myTask03), NULL);
 8005488:	f107 031c 	add.w	r3, r7, #28
 800548c:	2100      	movs	r1, #0
 800548e:	4618      	mov	r0, r3
 8005490:	f7fd fcad 	bl	8002dee <osThreadCreate>
 8005494:	4602      	mov	r2, r0
 8005496:	4b12      	ldr	r3, [pc, #72]	; (80054e0 <MX_FREERTOS_Init+0xdc>)
 8005498:	601a      	str	r2, [r3, #0]

  /* definition and creation of myTask04 */
  osThreadDef(myTask04, StartTask04, osPriorityIdle, 0, 128);
 800549a:	4b12      	ldr	r3, [pc, #72]	; (80054e4 <MX_FREERTOS_Init+0xe0>)
 800549c:	463c      	mov	r4, r7
 800549e:	461d      	mov	r5, r3
 80054a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80054a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80054a4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80054a8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask04Handle = osThreadCreate(osThread(myTask04), NULL);
 80054ac:	463b      	mov	r3, r7
 80054ae:	2100      	movs	r1, #0
 80054b0:	4618      	mov	r0, r3
 80054b2:	f7fd fc9c 	bl	8002dee <osThreadCreate>
 80054b6:	4602      	mov	r2, r0
 80054b8:	4b0b      	ldr	r3, [pc, #44]	; (80054e8 <MX_FREERTOS_Init+0xe4>)
 80054ba:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80054bc:	bf00      	nop
 80054be:	3780      	adds	r7, #128	; 0x80
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bdb0      	pop	{r4, r5, r7, pc}
 80054c4:	08006208 	.word	0x08006208
 80054c8:	20004028 	.word	0x20004028
 80054cc:	08006224 	.word	0x08006224
 80054d0:	2000401c 	.word	0x2000401c
 80054d4:	0800624c 	.word	0x0800624c
 80054d8:	20004024 	.word	0x20004024
 80054dc:	08006274 	.word	0x08006274
 80054e0:	2000402c 	.word	0x2000402c
 80054e4:	0800629c 	.word	0x0800629c
 80054e8:	20004020 	.word	0x20004020

080054ec <StartDefaultTask>:
  * @retval None
  */

/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b082      	sub	sp, #8
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
//	  printf("Coucou !\n");
//	  HAL_GPIO_WritePin(GPIOB, LD2_Pin, 1);
//	  osDelay(250);
//	  HAL_GPIO_WritePin(GPIOB, LD2_Pin, 0);
//	  osDelay(250);
	  osDelay(1);
 80054f4:	2001      	movs	r0, #1
 80054f6:	f7fd fcc6 	bl	8002e86 <osDelay>
 80054fa:	e7fb      	b.n	80054f4 <StartDefaultTask+0x8>

080054fc <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b084      	sub	sp, #16
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
	int pair = 0;
 8005504:	2300      	movs	r3, #0
 8005506:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  if (stop_put == 0)
 8005508:	4b0f      	ldr	r3, [pc, #60]	; (8005548 <StartTask02+0x4c>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d117      	bne.n	8005540 <StartTask02+0x44>
	  {
		  osMessagePut(exchangeHandle, pair, osWaitForever);
 8005510:	4b0e      	ldr	r3, [pc, #56]	; (800554c <StartTask02+0x50>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	68f9      	ldr	r1, [r7, #12]
 8005516:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800551a:	4618      	mov	r0, r3
 800551c:	f7fd fcf0 	bl	8002f00 <osMessagePut>
		  printf("Task 1 | Message put : %d\n", pair);
 8005520:	68f9      	ldr	r1, [r7, #12]
 8005522:	480b      	ldr	r0, [pc, #44]	; (8005550 <StartTask02+0x54>)
 8005524:	f000 fc9c 	bl	8005e60 <iprintf>
		  pair += 2;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	3302      	adds	r3, #2
 800552c:	60fb      	str	r3, [r7, #12]
		  message_in_queue ++;
 800552e:	4b09      	ldr	r3, [pc, #36]	; (8005554 <StartTask02+0x58>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	3301      	adds	r3, #1
 8005534:	4a07      	ldr	r2, [pc, #28]	; (8005554 <StartTask02+0x58>)
 8005536:	6013      	str	r3, [r2, #0]
		  osDelay(5000);
 8005538:	f241 3088 	movw	r0, #5000	; 0x1388
 800553c:	f7fd fca3 	bl	8002e86 <osDelay>
	  }
	  osDelay(1);
 8005540:	2001      	movs	r0, #1
 8005542:	f7fd fca0 	bl	8002e86 <osDelay>
	  if (stop_put == 0)
 8005546:	e7df      	b.n	8005508 <StartTask02+0xc>
 8005548:	20003d78 	.word	0x20003d78
 800554c:	20004028 	.word	0x20004028
 8005550:	080062b8 	.word	0x080062b8
 8005554:	20003d74 	.word	0x20003d74

08005558 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b084      	sub	sp, #16
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
	int impair = 1;
 8005560:	2301      	movs	r3, #1
 8005562:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  if (stop_put == 0)
 8005564:	4b0f      	ldr	r3, [pc, #60]	; (80055a4 <StartTask03+0x4c>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d117      	bne.n	800559c <StartTask03+0x44>
	  {
		  osMessagePut(exchangeHandle, impair, osWaitForever);
 800556c:	4b0e      	ldr	r3, [pc, #56]	; (80055a8 <StartTask03+0x50>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	68f9      	ldr	r1, [r7, #12]
 8005572:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005576:	4618      	mov	r0, r3
 8005578:	f7fd fcc2 	bl	8002f00 <osMessagePut>
		  printf("Task 2 | Message put : %d\n", impair);
 800557c:	68f9      	ldr	r1, [r7, #12]
 800557e:	480b      	ldr	r0, [pc, #44]	; (80055ac <StartTask03+0x54>)
 8005580:	f000 fc6e 	bl	8005e60 <iprintf>
		  impair += 2;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	3302      	adds	r3, #2
 8005588:	60fb      	str	r3, [r7, #12]
		  message_in_queue ++;
 800558a:	4b09      	ldr	r3, [pc, #36]	; (80055b0 <StartTask03+0x58>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	3301      	adds	r3, #1
 8005590:	4a07      	ldr	r2, [pc, #28]	; (80055b0 <StartTask03+0x58>)
 8005592:	6013      	str	r3, [r2, #0]
		  osDelay(2000);
 8005594:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8005598:	f7fd fc75 	bl	8002e86 <osDelay>
	  }
	  osDelay(1);
 800559c:	2001      	movs	r0, #1
 800559e:	f7fd fc72 	bl	8002e86 <osDelay>
	  if (stop_put == 0)
 80055a2:	e7df      	b.n	8005564 <StartTask03+0xc>
 80055a4:	20003d78 	.word	0x20003d78
 80055a8:	20004028 	.word	0x20004028
 80055ac:	080062d4 	.word	0x080062d4
 80055b0:	20003d74 	.word	0x20003d74

080055b4 <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void const * argument)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b08c      	sub	sp, #48	; 0x30
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN StartTask04 */
	int val_ret_impair = 0;
 80055bc:	2300      	movs	r3, #0
 80055be:	62bb      	str	r3, [r7, #40]	; 0x28
	int val_ret_pair = 0;
 80055c0:	2300      	movs	r3, #0
 80055c2:	627b      	str	r3, [r7, #36]	; 0x24
	int get_impair_ou_pair = 0;
 80055c4:	2300      	movs	r3, #0
 80055c6:	62fb      	str	r3, [r7, #44]	; 0x2c
	osEvent evt;
  /* Infinite loop */
  for(;;)
  {
	  if (message_in_queue == 6)
 80055c8:	4b26      	ldr	r3, [pc, #152]	; (8005664 <StartTask04+0xb0>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	2b06      	cmp	r3, #6
 80055ce:	d102      	bne.n	80055d6 <StartTask04+0x22>
	  {
		  stop_put = 1;
 80055d0:	4b25      	ldr	r3, [pc, #148]	; (8005668 <StartTask04+0xb4>)
 80055d2:	2201      	movs	r2, #1
 80055d4:	601a      	str	r2, [r3, #0]
	  }
	  if (message_in_queue == 0)
 80055d6:	4b23      	ldr	r3, [pc, #140]	; (8005664 <StartTask04+0xb0>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d102      	bne.n	80055e4 <StartTask04+0x30>
	  {
		  stop_put = 0;
 80055de:	4b22      	ldr	r3, [pc, #136]	; (8005668 <StartTask04+0xb4>)
 80055e0:	2200      	movs	r2, #0
 80055e2:	601a      	str	r2, [r3, #0]
	  }

	  if (stop_put == 1)
 80055e4:	4b20      	ldr	r3, [pc, #128]	; (8005668 <StartTask04+0xb4>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	2b01      	cmp	r3, #1
 80055ea:	d137      	bne.n	800565c <StartTask04+0xa8>
	  {
		  if (get_impair_ou_pair == 0)
 80055ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d116      	bne.n	8005620 <StartTask04+0x6c>
		  {
			  evt = osMessageGet(exchangeHandle, osWaitForever);
 80055f2:	4b1e      	ldr	r3, [pc, #120]	; (800566c <StartTask04+0xb8>)
 80055f4:	6819      	ldr	r1, [r3, #0]
 80055f6:	f107 0318 	add.w	r3, r7, #24
 80055fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80055fe:	4618      	mov	r0, r3
 8005600:	f7fd fcbe 	bl	8002f80 <osMessageGet>
			  val_ret_pair = evt.value.v;
 8005604:	69fb      	ldr	r3, [r7, #28]
 8005606:	627b      	str	r3, [r7, #36]	; 0x24
			  printf("Task 3 | Message get --> %d\n", val_ret_pair);
 8005608:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800560a:	4819      	ldr	r0, [pc, #100]	; (8005670 <StartTask04+0xbc>)
 800560c:	f000 fc28 	bl	8005e60 <iprintf>
			  get_impair_ou_pair = 1;
 8005610:	2301      	movs	r3, #1
 8005612:	62fb      	str	r3, [r7, #44]	; 0x2c
			  message_in_queue --;
 8005614:	4b13      	ldr	r3, [pc, #76]	; (8005664 <StartTask04+0xb0>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	3b01      	subs	r3, #1
 800561a:	4a12      	ldr	r2, [pc, #72]	; (8005664 <StartTask04+0xb0>)
 800561c:	6013      	str	r3, [r2, #0]
 800561e:	e01d      	b.n	800565c <StartTask04+0xa8>
		  }
		  else if (get_impair_ou_pair == 1)
 8005620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005622:	2b01      	cmp	r3, #1
 8005624:	d11a      	bne.n	800565c <StartTask04+0xa8>
		  {
			  evt = osMessageGet(exchangeHandle, osWaitForever);
 8005626:	4b11      	ldr	r3, [pc, #68]	; (800566c <StartTask04+0xb8>)
 8005628:	6819      	ldr	r1, [r3, #0]
 800562a:	463b      	mov	r3, r7
 800562c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005630:	4618      	mov	r0, r3
 8005632:	f7fd fca5 	bl	8002f80 <osMessageGet>
 8005636:	f107 0318 	add.w	r3, r7, #24
 800563a:	463a      	mov	r2, r7
 800563c:	ca07      	ldmia	r2, {r0, r1, r2}
 800563e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			  val_ret_impair = evt.value.v;
 8005642:	69fb      	ldr	r3, [r7, #28]
 8005644:	62bb      	str	r3, [r7, #40]	; 0x28
			  printf("Task 3 | Message get --> %d\n", val_ret_impair);
 8005646:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005648:	4809      	ldr	r0, [pc, #36]	; (8005670 <StartTask04+0xbc>)
 800564a:	f000 fc09 	bl	8005e60 <iprintf>
			  get_impair_ou_pair = 0;
 800564e:	2300      	movs	r3, #0
 8005650:	62fb      	str	r3, [r7, #44]	; 0x2c
			  message_in_queue --;
 8005652:	4b04      	ldr	r3, [pc, #16]	; (8005664 <StartTask04+0xb0>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	3b01      	subs	r3, #1
 8005658:	4a02      	ldr	r2, [pc, #8]	; (8005664 <StartTask04+0xb0>)
 800565a:	6013      	str	r3, [r2, #0]
		  }
	  }
	  osDelay(1);
 800565c:	2001      	movs	r0, #1
 800565e:	f7fd fc12 	bl	8002e86 <osDelay>
	  if (message_in_queue == 6)
 8005662:	e7b1      	b.n	80055c8 <StartTask04+0x14>
 8005664:	20003d74 	.word	0x20003d74
 8005668:	20003d78 	.word	0x20003d78
 800566c:	20004028 	.word	0x20004028
 8005670:	080062f0 	.word	0x080062f0

08005674 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b08c      	sub	sp, #48	; 0x30
 8005678:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800567a:	f107 031c 	add.w	r3, r7, #28
 800567e:	2200      	movs	r2, #0
 8005680:	601a      	str	r2, [r3, #0]
 8005682:	605a      	str	r2, [r3, #4]
 8005684:	609a      	str	r2, [r3, #8]
 8005686:	60da      	str	r2, [r3, #12]
 8005688:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800568a:	2300      	movs	r3, #0
 800568c:	61bb      	str	r3, [r7, #24]
 800568e:	4a4b      	ldr	r2, [pc, #300]	; (80057bc <MX_GPIO_Init+0x148>)
 8005690:	4b4a      	ldr	r3, [pc, #296]	; (80057bc <MX_GPIO_Init+0x148>)
 8005692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005694:	f043 0304 	orr.w	r3, r3, #4
 8005698:	6313      	str	r3, [r2, #48]	; 0x30
 800569a:	4b48      	ldr	r3, [pc, #288]	; (80057bc <MX_GPIO_Init+0x148>)
 800569c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800569e:	f003 0304 	and.w	r3, r3, #4
 80056a2:	61bb      	str	r3, [r7, #24]
 80056a4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80056a6:	2300      	movs	r3, #0
 80056a8:	617b      	str	r3, [r7, #20]
 80056aa:	4a44      	ldr	r2, [pc, #272]	; (80057bc <MX_GPIO_Init+0x148>)
 80056ac:	4b43      	ldr	r3, [pc, #268]	; (80057bc <MX_GPIO_Init+0x148>)
 80056ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056b4:	6313      	str	r3, [r2, #48]	; 0x30
 80056b6:	4b41      	ldr	r3, [pc, #260]	; (80057bc <MX_GPIO_Init+0x148>)
 80056b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056be:	617b      	str	r3, [r7, #20]
 80056c0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80056c2:	2300      	movs	r3, #0
 80056c4:	613b      	str	r3, [r7, #16]
 80056c6:	4a3d      	ldr	r2, [pc, #244]	; (80057bc <MX_GPIO_Init+0x148>)
 80056c8:	4b3c      	ldr	r3, [pc, #240]	; (80057bc <MX_GPIO_Init+0x148>)
 80056ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056cc:	f043 0301 	orr.w	r3, r3, #1
 80056d0:	6313      	str	r3, [r2, #48]	; 0x30
 80056d2:	4b3a      	ldr	r3, [pc, #232]	; (80057bc <MX_GPIO_Init+0x148>)
 80056d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056d6:	f003 0301 	and.w	r3, r3, #1
 80056da:	613b      	str	r3, [r7, #16]
 80056dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80056de:	2300      	movs	r3, #0
 80056e0:	60fb      	str	r3, [r7, #12]
 80056e2:	4a36      	ldr	r2, [pc, #216]	; (80057bc <MX_GPIO_Init+0x148>)
 80056e4:	4b35      	ldr	r3, [pc, #212]	; (80057bc <MX_GPIO_Init+0x148>)
 80056e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056e8:	f043 0302 	orr.w	r3, r3, #2
 80056ec:	6313      	str	r3, [r2, #48]	; 0x30
 80056ee:	4b33      	ldr	r3, [pc, #204]	; (80057bc <MX_GPIO_Init+0x148>)
 80056f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056f2:	f003 0302 	and.w	r3, r3, #2
 80056f6:	60fb      	str	r3, [r7, #12]
 80056f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80056fa:	2300      	movs	r3, #0
 80056fc:	60bb      	str	r3, [r7, #8]
 80056fe:	4a2f      	ldr	r2, [pc, #188]	; (80057bc <MX_GPIO_Init+0x148>)
 8005700:	4b2e      	ldr	r3, [pc, #184]	; (80057bc <MX_GPIO_Init+0x148>)
 8005702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005704:	f043 0308 	orr.w	r3, r3, #8
 8005708:	6313      	str	r3, [r2, #48]	; 0x30
 800570a:	4b2c      	ldr	r3, [pc, #176]	; (80057bc <MX_GPIO_Init+0x148>)
 800570c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800570e:	f003 0308 	and.w	r3, r3, #8
 8005712:	60bb      	str	r3, [r7, #8]
 8005714:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8005716:	2300      	movs	r3, #0
 8005718:	607b      	str	r3, [r7, #4]
 800571a:	4a28      	ldr	r2, [pc, #160]	; (80057bc <MX_GPIO_Init+0x148>)
 800571c:	4b27      	ldr	r3, [pc, #156]	; (80057bc <MX_GPIO_Init+0x148>)
 800571e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005720:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005724:	6313      	str	r3, [r2, #48]	; 0x30
 8005726:	4b25      	ldr	r3, [pc, #148]	; (80057bc <MX_GPIO_Init+0x148>)
 8005728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800572a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800572e:	607b      	str	r3, [r7, #4]
 8005730:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8005732:	2200      	movs	r2, #0
 8005734:	f244 0181 	movw	r1, #16513	; 0x4081
 8005738:	4821      	ldr	r0, [pc, #132]	; (80057c0 <MX_GPIO_Init+0x14c>)
 800573a:	f7fb fe3b 	bl	80013b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800573e:	2200      	movs	r2, #0
 8005740:	2140      	movs	r1, #64	; 0x40
 8005742:	4820      	ldr	r0, [pc, #128]	; (80057c4 <MX_GPIO_Init+0x150>)
 8005744:	f7fb fe36 	bl	80013b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8005748:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800574c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800574e:	4b1e      	ldr	r3, [pc, #120]	; (80057c8 <MX_GPIO_Init+0x154>)
 8005750:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005752:	2300      	movs	r3, #0
 8005754:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8005756:	f107 031c 	add.w	r3, r7, #28
 800575a:	4619      	mov	r1, r3
 800575c:	481b      	ldr	r0, [pc, #108]	; (80057cc <MX_GPIO_Init+0x158>)
 800575e:	f7fb fc7f 	bl	8001060 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8005762:	f244 0381 	movw	r3, #16513	; 0x4081
 8005766:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005768:	2301      	movs	r3, #1
 800576a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800576c:	2300      	movs	r3, #0
 800576e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005770:	2300      	movs	r3, #0
 8005772:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005774:	f107 031c 	add.w	r3, r7, #28
 8005778:	4619      	mov	r1, r3
 800577a:	4811      	ldr	r0, [pc, #68]	; (80057c0 <MX_GPIO_Init+0x14c>)
 800577c:	f7fb fc70 	bl	8001060 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8005780:	2340      	movs	r3, #64	; 0x40
 8005782:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005784:	2301      	movs	r3, #1
 8005786:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005788:	2300      	movs	r3, #0
 800578a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800578c:	2300      	movs	r3, #0
 800578e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8005790:	f107 031c 	add.w	r3, r7, #28
 8005794:	4619      	mov	r1, r3
 8005796:	480b      	ldr	r0, [pc, #44]	; (80057c4 <MX_GPIO_Init+0x150>)
 8005798:	f7fb fc62 	bl	8001060 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800579c:	2380      	movs	r3, #128	; 0x80
 800579e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80057a0:	2300      	movs	r3, #0
 80057a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057a4:	2300      	movs	r3, #0
 80057a6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80057a8:	f107 031c 	add.w	r3, r7, #28
 80057ac:	4619      	mov	r1, r3
 80057ae:	4805      	ldr	r0, [pc, #20]	; (80057c4 <MX_GPIO_Init+0x150>)
 80057b0:	f7fb fc56 	bl	8001060 <HAL_GPIO_Init>

}
 80057b4:	bf00      	nop
 80057b6:	3730      	adds	r7, #48	; 0x30
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}
 80057bc:	40023800 	.word	0x40023800
 80057c0:	40020400 	.word	0x40020400
 80057c4:	40021800 	.word	0x40021800
 80057c8:	10110000 	.word	0x10110000
 80057cc:	40020800 	.word	0x40020800

080057d0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b083      	sub	sp, #12
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80057d8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80057dc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80057e0:	f003 0301 	and.w	r3, r3, #1
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d013      	beq.n	8005810 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80057e8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80057ec:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80057f0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d00b      	beq.n	8005810 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80057f8:	e000      	b.n	80057fc <ITM_SendChar+0x2c>
    {
      __NOP();
 80057fa:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80057fc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d0f9      	beq.n	80057fa <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8005806:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800580a:	687a      	ldr	r2, [r7, #4]
 800580c:	b2d2      	uxtb	r2, r2
 800580e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8005810:	687b      	ldr	r3, [r7, #4]
}
 8005812:	4618      	mov	r0, r3
 8005814:	370c      	adds	r7, #12
 8005816:	46bd      	mov	sp, r7
 8005818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581c:	4770      	bx	lr

0800581e <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800581e:	b580      	push	{r7, lr}
 8005820:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005822:	f7fa fe6d 	bl	8000500 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005826:	f000 f80d 	bl	8005844 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800582a:	f7ff ff23 	bl	8005674 <MX_GPIO_Init>
  MX_ETH_Init();
 800582e:	f7ff fcd3 	bl	80051d8 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8005832:	f000 fb7d 	bl	8005f30 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8005836:	f000 fbed 	bl	8006014 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 800583a:	f7ff fde3 	bl	8005404 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800583e:	f7fd facf 	bl	8002de0 <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8005842:	e7fe      	b.n	8005842 <main+0x24>

08005844 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b094      	sub	sp, #80	; 0x50
 8005848:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800584a:	f107 0320 	add.w	r3, r7, #32
 800584e:	2230      	movs	r2, #48	; 0x30
 8005850:	2100      	movs	r1, #0
 8005852:	4618      	mov	r0, r3
 8005854:	f000 fcbf 	bl	80061d6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005858:	f107 030c 	add.w	r3, r7, #12
 800585c:	2200      	movs	r2, #0
 800585e:	601a      	str	r2, [r3, #0]
 8005860:	605a      	str	r2, [r3, #4]
 8005862:	609a      	str	r2, [r3, #8]
 8005864:	60da      	str	r2, [r3, #12]
 8005866:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005868:	2300      	movs	r3, #0
 800586a:	60bb      	str	r3, [r7, #8]
 800586c:	4a28      	ldr	r2, [pc, #160]	; (8005910 <SystemClock_Config+0xcc>)
 800586e:	4b28      	ldr	r3, [pc, #160]	; (8005910 <SystemClock_Config+0xcc>)
 8005870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005872:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005876:	6413      	str	r3, [r2, #64]	; 0x40
 8005878:	4b25      	ldr	r3, [pc, #148]	; (8005910 <SystemClock_Config+0xcc>)
 800587a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800587c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005880:	60bb      	str	r3, [r7, #8]
 8005882:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005884:	2300      	movs	r3, #0
 8005886:	607b      	str	r3, [r7, #4]
 8005888:	4a22      	ldr	r2, [pc, #136]	; (8005914 <SystemClock_Config+0xd0>)
 800588a:	4b22      	ldr	r3, [pc, #136]	; (8005914 <SystemClock_Config+0xd0>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005892:	6013      	str	r3, [r2, #0]
 8005894:	4b1f      	ldr	r3, [pc, #124]	; (8005914 <SystemClock_Config+0xd0>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800589c:	607b      	str	r3, [r7, #4]
 800589e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80058a0:	2301      	movs	r3, #1
 80058a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80058a4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80058a8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80058aa:	2302      	movs	r3, #2
 80058ac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80058ae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80058b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80058b4:	2304      	movs	r3, #4
 80058b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80058b8:	23a8      	movs	r3, #168	; 0xa8
 80058ba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80058bc:	2302      	movs	r3, #2
 80058be:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80058c0:	2307      	movs	r3, #7
 80058c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80058c4:	f107 0320 	add.w	r3, r7, #32
 80058c8:	4618      	mov	r0, r3
 80058ca:	f7fb fea9 	bl	8001620 <HAL_RCC_OscConfig>
 80058ce:	4603      	mov	r3, r0
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d001      	beq.n	80058d8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80058d4:	f000 f850 	bl	8005978 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80058d8:	230f      	movs	r3, #15
 80058da:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80058dc:	2302      	movs	r3, #2
 80058de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80058e0:	2300      	movs	r3, #0
 80058e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80058e4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80058e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80058ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80058ee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80058f0:	f107 030c 	add.w	r3, r7, #12
 80058f4:	2105      	movs	r1, #5
 80058f6:	4618      	mov	r0, r3
 80058f8:	f7fc f8d4 	bl	8001aa4 <HAL_RCC_ClockConfig>
 80058fc:	4603      	mov	r3, r0
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d001      	beq.n	8005906 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8005902:	f000 f839 	bl	8005978 <Error_Handler>
  }
}
 8005906:	bf00      	nop
 8005908:	3750      	adds	r7, #80	; 0x50
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}
 800590e:	bf00      	nop
 8005910:	40023800 	.word	0x40023800
 8005914:	40007000 	.word	0x40007000

08005918 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len) // the new function for SWV output
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b086      	sub	sp, #24
 800591c:	af00      	add	r7, sp, #0
 800591e:	60f8      	str	r0, [r7, #12]
 8005920:	60b9      	str	r1, [r7, #8]
 8005922:	607a      	str	r2, [r7, #4]
	int i=0;
 8005924:	2300      	movs	r3, #0
 8005926:	617b      	str	r3, [r7, #20]
	for(i=0 ; i<len ; i++)
 8005928:	2300      	movs	r3, #0
 800592a:	617b      	str	r3, [r7, #20]
 800592c:	e009      	b.n	8005942 <_write+0x2a>
		ITM_SendChar((*ptr++)); // out char to serial
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	1c5a      	adds	r2, r3, #1
 8005932:	60ba      	str	r2, [r7, #8]
 8005934:	781b      	ldrb	r3, [r3, #0]
 8005936:	4618      	mov	r0, r3
 8005938:	f7ff ff4a 	bl	80057d0 <ITM_SendChar>
	for(i=0 ; i<len ; i++)
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	3301      	adds	r3, #1
 8005940:	617b      	str	r3, [r7, #20]
 8005942:	697a      	ldr	r2, [r7, #20]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	429a      	cmp	r2, r3
 8005948:	dbf1      	blt.n	800592e <_write+0x16>
	return len;
 800594a:	687b      	ldr	r3, [r7, #4]
}
 800594c:	4618      	mov	r0, r3
 800594e:	3718      	adds	r7, #24
 8005950:	46bd      	mov	sp, r7
 8005952:	bd80      	pop	{r7, pc}

08005954 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b082      	sub	sp, #8
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM8) {
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a04      	ldr	r2, [pc, #16]	; (8005974 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d101      	bne.n	800596a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8005966:	f7fa fded 	bl	8000544 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800596a:	bf00      	nop
 800596c:	3708      	adds	r7, #8
 800596e:	46bd      	mov	sp, r7
 8005970:	bd80      	pop	{r7, pc}
 8005972:	bf00      	nop
 8005974:	40010400 	.word	0x40010400

08005978 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005978:	b480      	push	{r7}
 800597a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800597c:	bf00      	nop
 800597e:	46bd      	mov	sp, r7
 8005980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005984:	4770      	bx	lr

08005986 <malloc>:
/* From :
 https://www.freertos.org/FreeRTOS_Support_Forum_Archive/Octobe
 r_2009/freertos_malloc_function_in_FreeRTOS_3444349.html */
/* Defining malloc/free should overwrite the standard versions
 provided by the compiler. */
void *malloc(size_t size) {
 8005986:	b580      	push	{r7, lr}
 8005988:	b082      	sub	sp, #8
 800598a:	af00      	add	r7, sp, #0
 800598c:	6078      	str	r0, [r7, #4]
	/* Call the FreeRTOS version of malloc. */
	return pvPortMalloc(size);
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f7fd fe5e 	bl	8003650 <pvPortMalloc>
 8005994:	4603      	mov	r3, r0
}
 8005996:	4618      	mov	r0, r3
 8005998:	3708      	adds	r7, #8
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}

0800599e <free>:
void *calloc(size_t nmemb, size_t size) {
	/* Call the FreeRTOS version of calloc. */
	void * p = pvPortMalloc(size);
	return memset(p, 0, size);
}
void free(void *ptr) { /* Call the FreeRTOS version of free.*/
 800599e:	b580      	push	{r7, lr}
 80059a0:	b082      	sub	sp, #8
 80059a2:	af00      	add	r7, sp, #0
 80059a4:	6078      	str	r0, [r7, #4]
	vPortFree(ptr);
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	f7fd ff14 	bl	80037d4 <vPortFree>
}
 80059ac:	bf00      	nop
 80059ae:	3708      	adds	r7, #8
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bd80      	pop	{r7, pc}

080059b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b082      	sub	sp, #8
 80059b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80059ba:	2300      	movs	r3, #0
 80059bc:	607b      	str	r3, [r7, #4]
 80059be:	4a12      	ldr	r2, [pc, #72]	; (8005a08 <HAL_MspInit+0x54>)
 80059c0:	4b11      	ldr	r3, [pc, #68]	; (8005a08 <HAL_MspInit+0x54>)
 80059c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80059c8:	6453      	str	r3, [r2, #68]	; 0x44
 80059ca:	4b0f      	ldr	r3, [pc, #60]	; (8005a08 <HAL_MspInit+0x54>)
 80059cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80059d2:	607b      	str	r3, [r7, #4]
 80059d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80059d6:	2300      	movs	r3, #0
 80059d8:	603b      	str	r3, [r7, #0]
 80059da:	4a0b      	ldr	r2, [pc, #44]	; (8005a08 <HAL_MspInit+0x54>)
 80059dc:	4b0a      	ldr	r3, [pc, #40]	; (8005a08 <HAL_MspInit+0x54>)
 80059de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059e4:	6413      	str	r3, [r2, #64]	; 0x40
 80059e6:	4b08      	ldr	r3, [pc, #32]	; (8005a08 <HAL_MspInit+0x54>)
 80059e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059ee:	603b      	str	r3, [r7, #0]
 80059f0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80059f2:	2200      	movs	r2, #0
 80059f4:	210f      	movs	r1, #15
 80059f6:	f06f 0001 	mvn.w	r0, #1
 80059fa:	f7fa fe9b 	bl	8000734 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80059fe:	bf00      	nop
 8005a00:	3708      	adds	r7, #8
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}
 8005a06:	bf00      	nop
 8005a08:	40023800 	.word	0x40023800

08005a0c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b08c      	sub	sp, #48	; 0x30
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8005a14:	2300      	movs	r3, #0
 8005a16:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8005a18:	2300      	movs	r3, #0
 8005a1a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM8 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, TickPriority ,0); 
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	6879      	ldr	r1, [r7, #4]
 8005a20:	202c      	movs	r0, #44	; 0x2c
 8005a22:	f7fa fe87 	bl	8000734 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM8 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn); 
 8005a26:	202c      	movs	r0, #44	; 0x2c
 8005a28:	f7fa fea0 	bl	800076c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM8 clock */
  __HAL_RCC_TIM8_CLK_ENABLE();
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	60fb      	str	r3, [r7, #12]
 8005a30:	4a1f      	ldr	r2, [pc, #124]	; (8005ab0 <HAL_InitTick+0xa4>)
 8005a32:	4b1f      	ldr	r3, [pc, #124]	; (8005ab0 <HAL_InitTick+0xa4>)
 8005a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a36:	f043 0302 	orr.w	r3, r3, #2
 8005a3a:	6453      	str	r3, [r2, #68]	; 0x44
 8005a3c:	4b1c      	ldr	r3, [pc, #112]	; (8005ab0 <HAL_InitTick+0xa4>)
 8005a3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a40:	f003 0302 	and.w	r3, r3, #2
 8005a44:	60fb      	str	r3, [r7, #12]
 8005a46:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005a48:	f107 0210 	add.w	r2, r7, #16
 8005a4c:	f107 0314 	add.w	r3, r7, #20
 8005a50:	4611      	mov	r1, r2
 8005a52:	4618      	mov	r0, r3
 8005a54:	f7fc fa14 	bl	8001e80 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM8 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8005a58:	f7fc f9fe 	bl	8001e58 <HAL_RCC_GetPCLK2Freq>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	005b      	lsls	r3, r3, #1
 8005a60:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM8 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8005a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a64:	4a13      	ldr	r2, [pc, #76]	; (8005ab4 <HAL_InitTick+0xa8>)
 8005a66:	fba2 2303 	umull	r2, r3, r2, r3
 8005a6a:	0c9b      	lsrs	r3, r3, #18
 8005a6c:	3b01      	subs	r3, #1
 8005a6e:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM8 */
  htim8.Instance = TIM8;
 8005a70:	4b11      	ldr	r3, [pc, #68]	; (8005ab8 <HAL_InitTick+0xac>)
 8005a72:	4a12      	ldr	r2, [pc, #72]	; (8005abc <HAL_InitTick+0xb0>)
 8005a74:	601a      	str	r2, [r3, #0]
  + Period = [(TIM8CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim8.Init.Period = (1000000 / 1000) - 1;
 8005a76:	4b10      	ldr	r3, [pc, #64]	; (8005ab8 <HAL_InitTick+0xac>)
 8005a78:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005a7c:	60da      	str	r2, [r3, #12]
  htim8.Init.Prescaler = uwPrescalerValue;
 8005a7e:	4a0e      	ldr	r2, [pc, #56]	; (8005ab8 <HAL_InitTick+0xac>)
 8005a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a82:	6053      	str	r3, [r2, #4]
  htim8.Init.ClockDivision = 0;
 8005a84:	4b0c      	ldr	r3, [pc, #48]	; (8005ab8 <HAL_InitTick+0xac>)
 8005a86:	2200      	movs	r2, #0
 8005a88:	611a      	str	r2, [r3, #16]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005a8a:	4b0b      	ldr	r3, [pc, #44]	; (8005ab8 <HAL_InitTick+0xac>)
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim8) == HAL_OK)
 8005a90:	4809      	ldr	r0, [pc, #36]	; (8005ab8 <HAL_InitTick+0xac>)
 8005a92:	f7fc fa27 	bl	8001ee4 <HAL_TIM_Base_Init>
 8005a96:	4603      	mov	r3, r0
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d104      	bne.n	8005aa6 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim8);
 8005a9c:	4806      	ldr	r0, [pc, #24]	; (8005ab8 <HAL_InitTick+0xac>)
 8005a9e:	f7fc fa56 	bl	8001f4e <HAL_TIM_Base_Start_IT>
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	e000      	b.n	8005aa8 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8005aa6:	2301      	movs	r3, #1
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	3730      	adds	r7, #48	; 0x30
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bd80      	pop	{r7, pc}
 8005ab0:	40023800 	.word	0x40023800
 8005ab4:	431bde83 	.word	0x431bde83
 8005ab8:	20004030 	.word	0x20004030
 8005abc:	40010400 	.word	0x40010400

08005ac0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005ac4:	bf00      	nop
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005acc:	4770      	bx	lr

08005ace <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005ace:	b480      	push	{r7}
 8005ad0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005ad2:	e7fe      	b.n	8005ad2 <HardFault_Handler+0x4>

08005ad4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005ad8:	e7fe      	b.n	8005ad8 <MemManage_Handler+0x4>

08005ada <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005ada:	b480      	push	{r7}
 8005adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005ade:	e7fe      	b.n	8005ade <BusFault_Handler+0x4>

08005ae0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005ae4:	e7fe      	b.n	8005ae4 <UsageFault_Handler+0x4>

08005ae6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005ae6:	b480      	push	{r7}
 8005ae8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005aea:	bf00      	nop
 8005aec:	46bd      	mov	sp, r7
 8005aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af2:	4770      	bx	lr

08005af4 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8005af8:	4802      	ldr	r0, [pc, #8]	; (8005b04 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8005afa:	f7fc fa4c 	bl	8001f96 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8005afe:	bf00      	nop
 8005b00:	bd80      	pop	{r7, pc}
 8005b02:	bf00      	nop
 8005b04:	20004030 	.word	0x20004030

08005b08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005b0c:	4a16      	ldr	r2, [pc, #88]	; (8005b68 <SystemInit+0x60>)
 8005b0e:	4b16      	ldr	r3, [pc, #88]	; (8005b68 <SystemInit+0x60>)
 8005b10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005b18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8005b1c:	4a13      	ldr	r2, [pc, #76]	; (8005b6c <SystemInit+0x64>)
 8005b1e:	4b13      	ldr	r3, [pc, #76]	; (8005b6c <SystemInit+0x64>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f043 0301 	orr.w	r3, r3, #1
 8005b26:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8005b28:	4b10      	ldr	r3, [pc, #64]	; (8005b6c <SystemInit+0x64>)
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8005b2e:	4a0f      	ldr	r2, [pc, #60]	; (8005b6c <SystemInit+0x64>)
 8005b30:	4b0e      	ldr	r3, [pc, #56]	; (8005b6c <SystemInit+0x64>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8005b38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b3c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8005b3e:	4b0b      	ldr	r3, [pc, #44]	; (8005b6c <SystemInit+0x64>)
 8005b40:	4a0b      	ldr	r2, [pc, #44]	; (8005b70 <SystemInit+0x68>)
 8005b42:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8005b44:	4a09      	ldr	r2, [pc, #36]	; (8005b6c <SystemInit+0x64>)
 8005b46:	4b09      	ldr	r3, [pc, #36]	; (8005b6c <SystemInit+0x64>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b4e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8005b50:	4b06      	ldr	r3, [pc, #24]	; (8005b6c <SystemInit+0x64>)
 8005b52:	2200      	movs	r2, #0
 8005b54:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005b56:	4b04      	ldr	r3, [pc, #16]	; (8005b68 <SystemInit+0x60>)
 8005b58:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005b5c:	609a      	str	r2, [r3, #8]
#endif
}
 8005b5e:	bf00      	nop
 8005b60:	46bd      	mov	sp, r7
 8005b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b66:	4770      	bx	lr
 8005b68:	e000ed00 	.word	0xe000ed00
 8005b6c:	40023800 	.word	0x40023800
 8005b70:	24003010 	.word	0x24003010

08005b74 <ts_itoa>:
 **---------------------------------------------------------------------------
 **  Abstract: Convert integer to ascii
 **  Returns:  void
 **---------------------------------------------------------------------------
 */
void ts_itoa(char **buf, unsigned int d, int base) {
 8005b74:	b480      	push	{r7}
 8005b76:	b087      	sub	sp, #28
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	60f8      	str	r0, [r7, #12]
 8005b7c:	60b9      	str	r1, [r7, #8]
 8005b7e:	607a      	str	r2, [r7, #4]
	int div = 1;
 8005b80:	2301      	movs	r3, #1
 8005b82:	617b      	str	r3, [r7, #20]
	while (d / div >= base)
 8005b84:	e004      	b.n	8005b90 <ts_itoa+0x1c>
		div *= base;
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	687a      	ldr	r2, [r7, #4]
 8005b8a:	fb02 f303 	mul.w	r3, r2, r3
 8005b8e:	617b      	str	r3, [r7, #20]
	while (d / div >= base)
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	68ba      	ldr	r2, [r7, #8]
 8005b94:	fbb2 f2f3 	udiv	r2, r2, r3
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	429a      	cmp	r2, r3
 8005b9c:	d2f3      	bcs.n	8005b86 <ts_itoa+0x12>

	while (div != 0) {
 8005b9e:	e029      	b.n	8005bf4 <ts_itoa+0x80>
		int num = d / div;
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	68ba      	ldr	r2, [r7, #8]
 8005ba4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ba8:	613b      	str	r3, [r7, #16]
		d = d % div;
 8005baa:	697a      	ldr	r2, [r7, #20]
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	fbb3 f1f2 	udiv	r1, r3, r2
 8005bb2:	fb02 f201 	mul.w	r2, r2, r1
 8005bb6:	1a9b      	subs	r3, r3, r2
 8005bb8:	60bb      	str	r3, [r7, #8]
		div /= base;
 8005bba:	697a      	ldr	r2, [r7, #20]
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	fb92 f3f3 	sdiv	r3, r2, r3
 8005bc2:	617b      	str	r3, [r7, #20]
		if (num > 9)
 8005bc4:	693b      	ldr	r3, [r7, #16]
 8005bc6:	2b09      	cmp	r3, #9
 8005bc8:	dd0a      	ble.n	8005be0 <ts_itoa+0x6c>
			*((*buf)++) = (num - 10) + 'A';
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	1c59      	adds	r1, r3, #1
 8005bd0:	68fa      	ldr	r2, [r7, #12]
 8005bd2:	6011      	str	r1, [r2, #0]
 8005bd4:	693a      	ldr	r2, [r7, #16]
 8005bd6:	b2d2      	uxtb	r2, r2
 8005bd8:	3237      	adds	r2, #55	; 0x37
 8005bda:	b2d2      	uxtb	r2, r2
 8005bdc:	701a      	strb	r2, [r3, #0]
 8005bde:	e009      	b.n	8005bf4 <ts_itoa+0x80>
		else
			*((*buf)++) = num + '0';
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	1c59      	adds	r1, r3, #1
 8005be6:	68fa      	ldr	r2, [r7, #12]
 8005be8:	6011      	str	r1, [r2, #0]
 8005bea:	693a      	ldr	r2, [r7, #16]
 8005bec:	b2d2      	uxtb	r2, r2
 8005bee:	3230      	adds	r2, #48	; 0x30
 8005bf0:	b2d2      	uxtb	r2, r2
 8005bf2:	701a      	strb	r2, [r3, #0]
	while (div != 0) {
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d1d2      	bne.n	8005ba0 <ts_itoa+0x2c>
	}
}
 8005bfa:	bf00      	nop
 8005bfc:	371c      	adds	r7, #28
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c04:	4770      	bx	lr

08005c06 <ts_formatstring>:
 **---------------------------------------------------------------------------
 **  Abstract: Writes arguments va to buffer buf according to format fmt
 **  Returns:  Length of string
 **---------------------------------------------------------------------------
 */
int ts_formatstring(char *buf, const char *fmt, va_list va) {
 8005c06:	b580      	push	{r7, lr}
 8005c08:	b088      	sub	sp, #32
 8005c0a:	af00      	add	r7, sp, #0
 8005c0c:	60f8      	str	r0, [r7, #12]
 8005c0e:	60b9      	str	r1, [r7, #8]
 8005c10:	607a      	str	r2, [r7, #4]
	char *start_buf = buf;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	617b      	str	r3, [r7, #20]
	while (*fmt) {
 8005c16:	e07d      	b.n	8005d14 <ts_formatstring+0x10e>
		/* Character needs formating? */
		if (*fmt == '%') {
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	781b      	ldrb	r3, [r3, #0]
 8005c1c:	2b25      	cmp	r3, #37	; 0x25
 8005c1e:	d171      	bne.n	8005d04 <ts_formatstring+0xfe>
			switch (*(++fmt)) {
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	3301      	adds	r3, #1
 8005c24:	60bb      	str	r3, [r7, #8]
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	781b      	ldrb	r3, [r3, #0]
 8005c2a:	2b64      	cmp	r3, #100	; 0x64
 8005c2c:	d01e      	beq.n	8005c6c <ts_formatstring+0x66>
 8005c2e:	2b64      	cmp	r3, #100	; 0x64
 8005c30:	dc06      	bgt.n	8005c40 <ts_formatstring+0x3a>
 8005c32:	2b58      	cmp	r3, #88	; 0x58
 8005c34:	d050      	beq.n	8005cd8 <ts_formatstring+0xd2>
 8005c36:	2b63      	cmp	r3, #99	; 0x63
 8005c38:	d00e      	beq.n	8005c58 <ts_formatstring+0x52>
 8005c3a:	2b25      	cmp	r3, #37	; 0x25
 8005c3c:	d058      	beq.n	8005cf0 <ts_formatstring+0xea>
 8005c3e:	e05d      	b.n	8005cfc <ts_formatstring+0xf6>
 8005c40:	2b73      	cmp	r3, #115	; 0x73
 8005c42:	d02b      	beq.n	8005c9c <ts_formatstring+0x96>
 8005c44:	2b73      	cmp	r3, #115	; 0x73
 8005c46:	dc02      	bgt.n	8005c4e <ts_formatstring+0x48>
 8005c48:	2b69      	cmp	r3, #105	; 0x69
 8005c4a:	d00f      	beq.n	8005c6c <ts_formatstring+0x66>
 8005c4c:	e056      	b.n	8005cfc <ts_formatstring+0xf6>
 8005c4e:	2b75      	cmp	r3, #117	; 0x75
 8005c50:	d037      	beq.n	8005cc2 <ts_formatstring+0xbc>
 8005c52:	2b78      	cmp	r3, #120	; 0x78
 8005c54:	d040      	beq.n	8005cd8 <ts_formatstring+0xd2>
 8005c56:	e051      	b.n	8005cfc <ts_formatstring+0xf6>
			case 'c':
				*buf++ = va_arg(va, int);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	1c5a      	adds	r2, r3, #1
 8005c5c:	60fa      	str	r2, [r7, #12]
 8005c5e:	687a      	ldr	r2, [r7, #4]
 8005c60:	1d11      	adds	r1, r2, #4
 8005c62:	6079      	str	r1, [r7, #4]
 8005c64:	6812      	ldr	r2, [r2, #0]
 8005c66:	b2d2      	uxtb	r2, r2
 8005c68:	701a      	strb	r2, [r3, #0]
				break;
 8005c6a:	e047      	b.n	8005cfc <ts_formatstring+0xf6>
			case 'd':
			case 'i': {
				signed int val = va_arg(va, signed int);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	1d1a      	adds	r2, r3, #4
 8005c70:	607a      	str	r2, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	61fb      	str	r3, [r7, #28]
				if (val < 0) {
 8005c76:	69fb      	ldr	r3, [r7, #28]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	da07      	bge.n	8005c8c <ts_formatstring+0x86>
					val *= -1;
 8005c7c:	69fb      	ldr	r3, [r7, #28]
 8005c7e:	425b      	negs	r3, r3
 8005c80:	61fb      	str	r3, [r7, #28]
					*buf++ = '-';
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	1c5a      	adds	r2, r3, #1
 8005c86:	60fa      	str	r2, [r7, #12]
 8005c88:	222d      	movs	r2, #45	; 0x2d
 8005c8a:	701a      	strb	r2, [r3, #0]
				}
				ts_itoa(&buf, val, 10);
 8005c8c:	69f9      	ldr	r1, [r7, #28]
 8005c8e:	f107 030c 	add.w	r3, r7, #12
 8005c92:	220a      	movs	r2, #10
 8005c94:	4618      	mov	r0, r3
 8005c96:	f7ff ff6d 	bl	8005b74 <ts_itoa>
			}
				break;
 8005c9a:	e02f      	b.n	8005cfc <ts_formatstring+0xf6>
			case 's': {
				char * arg = va_arg(va, char *);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	1d1a      	adds	r2, r3, #4
 8005ca0:	607a      	str	r2, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	61bb      	str	r3, [r7, #24]
				while (*arg) {
 8005ca6:	e007      	b.n	8005cb8 <ts_formatstring+0xb2>
					*buf++ = *arg++;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	1c5a      	adds	r2, r3, #1
 8005cac:	60fa      	str	r2, [r7, #12]
 8005cae:	69ba      	ldr	r2, [r7, #24]
 8005cb0:	1c51      	adds	r1, r2, #1
 8005cb2:	61b9      	str	r1, [r7, #24]
 8005cb4:	7812      	ldrb	r2, [r2, #0]
 8005cb6:	701a      	strb	r2, [r3, #0]
				while (*arg) {
 8005cb8:	69bb      	ldr	r3, [r7, #24]
 8005cba:	781b      	ldrb	r3, [r3, #0]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d1f3      	bne.n	8005ca8 <ts_formatstring+0xa2>
				}
			}
				break;
 8005cc0:	e01c      	b.n	8005cfc <ts_formatstring+0xf6>
			case 'u':
				ts_itoa(&buf, va_arg(va, unsigned int), 10);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	1d1a      	adds	r2, r3, #4
 8005cc6:	607a      	str	r2, [r7, #4]
 8005cc8:	6819      	ldr	r1, [r3, #0]
 8005cca:	f107 030c 	add.w	r3, r7, #12
 8005cce:	220a      	movs	r2, #10
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	f7ff ff4f 	bl	8005b74 <ts_itoa>
				break;
 8005cd6:	e011      	b.n	8005cfc <ts_formatstring+0xf6>
			case 'x':
			case 'X':
				ts_itoa(&buf, va_arg(va, int), 16);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	1d1a      	adds	r2, r3, #4
 8005cdc:	607a      	str	r2, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4619      	mov	r1, r3
 8005ce2:	f107 030c 	add.w	r3, r7, #12
 8005ce6:	2210      	movs	r2, #16
 8005ce8:	4618      	mov	r0, r3
 8005cea:	f7ff ff43 	bl	8005b74 <ts_itoa>
				break;
 8005cee:	e005      	b.n	8005cfc <ts_formatstring+0xf6>
			case '%':
				*buf++ = '%';
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	1c5a      	adds	r2, r3, #1
 8005cf4:	60fa      	str	r2, [r7, #12]
 8005cf6:	2225      	movs	r2, #37	; 0x25
 8005cf8:	701a      	strb	r2, [r3, #0]
				break;
 8005cfa:	bf00      	nop
			}
			fmt++;
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	3301      	adds	r3, #1
 8005d00:	60bb      	str	r3, [r7, #8]
 8005d02:	e007      	b.n	8005d14 <ts_formatstring+0x10e>
		}
		/* Else just copy */
		else {
			*buf++ = *fmt++;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	1c5a      	adds	r2, r3, #1
 8005d08:	60fa      	str	r2, [r7, #12]
 8005d0a:	68ba      	ldr	r2, [r7, #8]
 8005d0c:	1c51      	adds	r1, r2, #1
 8005d0e:	60b9      	str	r1, [r7, #8]
 8005d10:	7812      	ldrb	r2, [r2, #0]
 8005d12:	701a      	strb	r2, [r3, #0]
	while (*fmt) {
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	781b      	ldrb	r3, [r3, #0]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	f47f af7d 	bne.w	8005c18 <ts_formatstring+0x12>
		}
	}
	*buf = 0;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	2200      	movs	r2, #0
 8005d22:	701a      	strb	r2, [r3, #0]

	return (int) (buf - start_buf);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	461a      	mov	r2, r3
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	1ad3      	subs	r3, r2, r3
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	3720      	adds	r7, #32
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}

08005d34 <ts_formatlength>:
 **  Abstract: Calculate maximum length of the resulting string from the
 **            format string and va_list va
 **  Returns:  Maximum length
 **---------------------------------------------------------------------------
 */
int ts_formatlength(const char *fmt, va_list va) {
 8005d34:	b480      	push	{r7}
 8005d36:	b085      	sub	sp, #20
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
 8005d3c:	6039      	str	r1, [r7, #0]
	int length = 0;
 8005d3e:	2300      	movs	r3, #0
 8005d40:	60fb      	str	r3, [r7, #12]
	while (*fmt) {
 8005d42:	e081      	b.n	8005e48 <ts_formatlength+0x114>
		if (*fmt == '%') {
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	781b      	ldrb	r3, [r3, #0]
 8005d48:	2b25      	cmp	r3, #37	; 0x25
 8005d4a:	d177      	bne.n	8005e3c <ts_formatlength+0x108>
			++fmt;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	3301      	adds	r3, #1
 8005d50:	607b      	str	r3, [r7, #4]
			switch (*fmt) {
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	781b      	ldrb	r3, [r3, #0]
 8005d56:	3b58      	subs	r3, #88	; 0x58
 8005d58:	2b20      	cmp	r3, #32
 8005d5a:	d86a      	bhi.n	8005e32 <ts_formatlength+0xfe>
 8005d5c:	a201      	add	r2, pc, #4	; (adr r2, 8005d64 <ts_formatlength+0x30>)
 8005d5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d62:	bf00      	nop
 8005d64:	08005e25 	.word	0x08005e25
 8005d68:	08005e33 	.word	0x08005e33
 8005d6c:	08005e33 	.word	0x08005e33
 8005d70:	08005e33 	.word	0x08005e33
 8005d74:	08005e33 	.word	0x08005e33
 8005d78:	08005e33 	.word	0x08005e33
 8005d7c:	08005e33 	.word	0x08005e33
 8005d80:	08005e33 	.word	0x08005e33
 8005d84:	08005e33 	.word	0x08005e33
 8005d88:	08005e33 	.word	0x08005e33
 8005d8c:	08005e33 	.word	0x08005e33
 8005d90:	08005de9 	.word	0x08005de9
 8005d94:	08005df7 	.word	0x08005df7
 8005d98:	08005e33 	.word	0x08005e33
 8005d9c:	08005e33 	.word	0x08005e33
 8005da0:	08005e33 	.word	0x08005e33
 8005da4:	08005e33 	.word	0x08005e33
 8005da8:	08005df7 	.word	0x08005df7
 8005dac:	08005e33 	.word	0x08005e33
 8005db0:	08005e33 	.word	0x08005e33
 8005db4:	08005e33 	.word	0x08005e33
 8005db8:	08005e33 	.word	0x08005e33
 8005dbc:	08005e33 	.word	0x08005e33
 8005dc0:	08005e33 	.word	0x08005e33
 8005dc4:	08005e33 	.word	0x08005e33
 8005dc8:	08005e33 	.word	0x08005e33
 8005dcc:	08005e33 	.word	0x08005e33
 8005dd0:	08005e05 	.word	0x08005e05
 8005dd4:	08005e33 	.word	0x08005e33
 8005dd8:	08005df7 	.word	0x08005df7
 8005ddc:	08005e33 	.word	0x08005e33
 8005de0:	08005e33 	.word	0x08005e33
 8005de4:	08005e25 	.word	0x08005e25
			case 'c':
				va_arg(va, int);
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	3304      	adds	r3, #4
 8005dec:	603b      	str	r3, [r7, #0]
				++length;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	3301      	adds	r3, #1
 8005df2:	60fb      	str	r3, [r7, #12]
				break;
 8005df4:	e025      	b.n	8005e42 <ts_formatlength+0x10e>
			case 'd':
			case 'i':
			case 'u':
				/* 32 bits integer is max 11 characters with minus sign */
				length += 11;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	330b      	adds	r3, #11
 8005dfa:	60fb      	str	r3, [r7, #12]
				va_arg(va, int);
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	3304      	adds	r3, #4
 8005e00:	603b      	str	r3, [r7, #0]
				break;
 8005e02:	e01e      	b.n	8005e42 <ts_formatlength+0x10e>
			case 's': {
				char * str = va_arg(va, char *);
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	1d1a      	adds	r2, r3, #4
 8005e08:	603a      	str	r2, [r7, #0]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	60bb      	str	r3, [r7, #8]
				while (*str++)
 8005e0e:	e002      	b.n	8005e16 <ts_formatlength+0xe2>
					++length;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	3301      	adds	r3, #1
 8005e14:	60fb      	str	r3, [r7, #12]
				while (*str++)
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	1c5a      	adds	r2, r3, #1
 8005e1a:	60ba      	str	r2, [r7, #8]
 8005e1c:	781b      	ldrb	r3, [r3, #0]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d1f6      	bne.n	8005e10 <ts_formatlength+0xdc>
			}
				break;
 8005e22:	e00e      	b.n	8005e42 <ts_formatlength+0x10e>
			case 'x':
			case 'X':
				/* 32 bits integer as hex is max 8 characters */
				length += 8;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	3308      	adds	r3, #8
 8005e28:	60fb      	str	r3, [r7, #12]
				va_arg(va, unsigned int);
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	3304      	adds	r3, #4
 8005e2e:	603b      	str	r3, [r7, #0]
				break;
 8005e30:	e007      	b.n	8005e42 <ts_formatlength+0x10e>
			default:
				++length;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	3301      	adds	r3, #1
 8005e36:	60fb      	str	r3, [r7, #12]
				break;
 8005e38:	bf00      	nop
 8005e3a:	e002      	b.n	8005e42 <ts_formatlength+0x10e>
			}
		} else {
			++length;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	3301      	adds	r3, #1
 8005e40:	60fb      	str	r3, [r7, #12]
		}
		++fmt;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	3301      	adds	r3, #1
 8005e46:	607b      	str	r3, [r7, #4]
	while (*fmt) {
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	781b      	ldrb	r3, [r3, #0]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	f47f af79 	bne.w	8005d44 <ts_formatlength+0x10>
	}
	return length;
 8005e52:	68fb      	ldr	r3, [r7, #12]
}
 8005e54:	4618      	mov	r0, r3
 8005e56:	3714      	adds	r7, #20
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5e:	4770      	bx	lr

08005e60 <iprintf>:
 **            standard output according to the format parameter.
 **  Returns:  Number of bytes written
 **
 **===========================================================================
 */
int iprintf(const char *fmt, ...) {
 8005e60:	b40f      	push	{r0, r1, r2, r3}
 8005e62:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005e66:	b087      	sub	sp, #28
 8005e68:	af00      	add	r7, sp, #0
	int length = 0;
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	617b      	str	r3, [r7, #20]
	va_list va;
	va_start(va, fmt);
 8005e6e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005e72:	607b      	str	r3, [r7, #4]
	length = ts_formatlength(fmt, va);
 8005e74:	6879      	ldr	r1, [r7, #4]
 8005e76:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005e78:	f7ff ff5c 	bl	8005d34 <ts_formatlength>
 8005e7c:	6178      	str	r0, [r7, #20]
	va_end(va);
	if (length < 50) { // ok only for small default configMINIMAL_STACK_SIZE(128)
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	2b31      	cmp	r3, #49	; 0x31
 8005e82:	dc32      	bgt.n	8005eea <iprintf+0x8a>
 8005e84:	466b      	mov	r3, sp
 8005e86:	461e      	mov	r6, r3
		char buf[length];
 8005e88:	6979      	ldr	r1, [r7, #20]
 8005e8a:	1e4b      	subs	r3, r1, #1
 8005e8c:	613b      	str	r3, [r7, #16]
 8005e8e:	460b      	mov	r3, r1
 8005e90:	461a      	mov	r2, r3
 8005e92:	f04f 0300 	mov.w	r3, #0
 8005e96:	ea4f 09c3 	mov.w	r9, r3, lsl #3
 8005e9a:	ea49 7952 	orr.w	r9, r9, r2, lsr #29
 8005e9e:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 8005ea2:	460b      	mov	r3, r1
 8005ea4:	461a      	mov	r2, r3
 8005ea6:	f04f 0300 	mov.w	r3, #0
 8005eaa:	00dd      	lsls	r5, r3, #3
 8005eac:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005eb0:	00d4      	lsls	r4, r2, #3
 8005eb2:	460b      	mov	r3, r1
 8005eb4:	3307      	adds	r3, #7
 8005eb6:	08db      	lsrs	r3, r3, #3
 8005eb8:	00db      	lsls	r3, r3, #3
 8005eba:	ebad 0d03 	sub.w	sp, sp, r3
 8005ebe:	466b      	mov	r3, sp
 8005ec0:	3300      	adds	r3, #0
 8005ec2:	60fb      	str	r3, [r7, #12]
		va_start(va, fmt);
 8005ec4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005ec8:	607b      	str	r3, [r7, #4]
		length = ts_formatstring(buf, fmt, va);
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	687a      	ldr	r2, [r7, #4]
 8005ece:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	f7ff fe98 	bl	8005c06 <ts_formatstring>
 8005ed6:	6178      	str	r0, [r7, #20]
		length = _write(1, buf, length);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	697a      	ldr	r2, [r7, #20]
 8005edc:	4619      	mov	r1, r3
 8005ede:	2001      	movs	r0, #1
 8005ee0:	f7ff fd1a 	bl	8005918 <_write>
 8005ee4:	6178      	str	r0, [r7, #20]
 8005ee6:	46b5      	mov	sp, r6
 8005ee8:	e01a      	b.n	8005f20 <iprintf+0xc0>
		va_end(va);
	} else {
		char * buf = malloc(length * sizeof(char));
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	4618      	mov	r0, r3
 8005eee:	f7ff fd4a 	bl	8005986 <malloc>
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	60bb      	str	r3, [r7, #8]
		if (buf) {
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d011      	beq.n	8005f20 <iprintf+0xc0>
			va_start(va, fmt);
 8005efc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005f00:	607b      	str	r3, [r7, #4]
			length = ts_formatstring(buf, fmt, va);
 8005f02:	687a      	ldr	r2, [r7, #4]
 8005f04:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005f06:	68b8      	ldr	r0, [r7, #8]
 8005f08:	f7ff fe7d 	bl	8005c06 <ts_formatstring>
 8005f0c:	6178      	str	r0, [r7, #20]
			length = _write(1, buf, length);
 8005f0e:	697a      	ldr	r2, [r7, #20]
 8005f10:	68b9      	ldr	r1, [r7, #8]
 8005f12:	2001      	movs	r0, #1
 8005f14:	f7ff fd00 	bl	8005918 <_write>
 8005f18:	6178      	str	r0, [r7, #20]
			va_end(va);
			free(buf);
 8005f1a:	68b8      	ldr	r0, [r7, #8]
 8005f1c:	f7ff fd3f 	bl	800599e <free>
		}
	}
	return length;
 8005f20:	697b      	ldr	r3, [r7, #20]
}
 8005f22:	4618      	mov	r0, r3
 8005f24:	371c      	adds	r7, #28
 8005f26:	46bd      	mov	sp, r7
 8005f28:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005f2c:	b004      	add	sp, #16
 8005f2e:	4770      	bx	lr

08005f30 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8005f34:	4b11      	ldr	r3, [pc, #68]	; (8005f7c <MX_USART3_UART_Init+0x4c>)
 8005f36:	4a12      	ldr	r2, [pc, #72]	; (8005f80 <MX_USART3_UART_Init+0x50>)
 8005f38:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8005f3a:	4b10      	ldr	r3, [pc, #64]	; (8005f7c <MX_USART3_UART_Init+0x4c>)
 8005f3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005f40:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8005f42:	4b0e      	ldr	r3, [pc, #56]	; (8005f7c <MX_USART3_UART_Init+0x4c>)
 8005f44:	2200      	movs	r2, #0
 8005f46:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8005f48:	4b0c      	ldr	r3, [pc, #48]	; (8005f7c <MX_USART3_UART_Init+0x4c>)
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8005f4e:	4b0b      	ldr	r3, [pc, #44]	; (8005f7c <MX_USART3_UART_Init+0x4c>)
 8005f50:	2200      	movs	r2, #0
 8005f52:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005f54:	4b09      	ldr	r3, [pc, #36]	; (8005f7c <MX_USART3_UART_Init+0x4c>)
 8005f56:	220c      	movs	r2, #12
 8005f58:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005f5a:	4b08      	ldr	r3, [pc, #32]	; (8005f7c <MX_USART3_UART_Init+0x4c>)
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005f60:	4b06      	ldr	r3, [pc, #24]	; (8005f7c <MX_USART3_UART_Init+0x4c>)
 8005f62:	2200      	movs	r2, #0
 8005f64:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005f66:	4805      	ldr	r0, [pc, #20]	; (8005f7c <MX_USART3_UART_Init+0x4c>)
 8005f68:	f7fc f9fa 	bl	8002360 <HAL_UART_Init>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d001      	beq.n	8005f76 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8005f72:	f7ff fd01 	bl	8005978 <Error_Handler>
  }

}
 8005f76:	bf00      	nop
 8005f78:	bd80      	pop	{r7, pc}
 8005f7a:	bf00      	nop
 8005f7c:	20004070 	.word	0x20004070
 8005f80:	40004800 	.word	0x40004800

08005f84 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b08a      	sub	sp, #40	; 0x28
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f8c:	f107 0314 	add.w	r3, r7, #20
 8005f90:	2200      	movs	r2, #0
 8005f92:	601a      	str	r2, [r3, #0]
 8005f94:	605a      	str	r2, [r3, #4]
 8005f96:	609a      	str	r2, [r3, #8]
 8005f98:	60da      	str	r2, [r3, #12]
 8005f9a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a19      	ldr	r2, [pc, #100]	; (8006008 <HAL_UART_MspInit+0x84>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d12c      	bne.n	8006000 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	613b      	str	r3, [r7, #16]
 8005faa:	4a18      	ldr	r2, [pc, #96]	; (800600c <HAL_UART_MspInit+0x88>)
 8005fac:	4b17      	ldr	r3, [pc, #92]	; (800600c <HAL_UART_MspInit+0x88>)
 8005fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005fb4:	6413      	str	r3, [r2, #64]	; 0x40
 8005fb6:	4b15      	ldr	r3, [pc, #84]	; (800600c <HAL_UART_MspInit+0x88>)
 8005fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005fbe:	613b      	str	r3, [r7, #16]
 8005fc0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	60fb      	str	r3, [r7, #12]
 8005fc6:	4a11      	ldr	r2, [pc, #68]	; (800600c <HAL_UART_MspInit+0x88>)
 8005fc8:	4b10      	ldr	r3, [pc, #64]	; (800600c <HAL_UART_MspInit+0x88>)
 8005fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fcc:	f043 0308 	orr.w	r3, r3, #8
 8005fd0:	6313      	str	r3, [r2, #48]	; 0x30
 8005fd2:	4b0e      	ldr	r3, [pc, #56]	; (800600c <HAL_UART_MspInit+0x88>)
 8005fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fd6:	f003 0308 	and.w	r3, r3, #8
 8005fda:	60fb      	str	r3, [r7, #12]
 8005fdc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8005fde:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005fe2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005fe4:	2302      	movs	r3, #2
 8005fe6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005fe8:	2301      	movs	r3, #1
 8005fea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005fec:	2303      	movs	r3, #3
 8005fee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005ff0:	2307      	movs	r3, #7
 8005ff2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005ff4:	f107 0314 	add.w	r3, r7, #20
 8005ff8:	4619      	mov	r1, r3
 8005ffa:	4805      	ldr	r0, [pc, #20]	; (8006010 <HAL_UART_MspInit+0x8c>)
 8005ffc:	f7fb f830 	bl	8001060 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8006000:	bf00      	nop
 8006002:	3728      	adds	r7, #40	; 0x28
 8006004:	46bd      	mov	sp, r7
 8006006:	bd80      	pop	{r7, pc}
 8006008:	40004800 	.word	0x40004800
 800600c:	40023800 	.word	0x40023800
 8006010:	40020c00 	.word	0x40020c00

08006014 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	af00      	add	r7, sp, #0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006018:	4b14      	ldr	r3, [pc, #80]	; (800606c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800601a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800601e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8006020:	4b12      	ldr	r3, [pc, #72]	; (800606c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8006022:	2204      	movs	r2, #4
 8006024:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006026:	4b11      	ldr	r3, [pc, #68]	; (800606c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8006028:	2202      	movs	r2, #2
 800602a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800602c:	4b0f      	ldr	r3, [pc, #60]	; (800606c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800602e:	2200      	movs	r2, #0
 8006030:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006032:	4b0e      	ldr	r3, [pc, #56]	; (800606c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8006034:	2202      	movs	r2, #2
 8006036:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8006038:	4b0c      	ldr	r3, [pc, #48]	; (800606c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800603a:	2201      	movs	r2, #1
 800603c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800603e:	4b0b      	ldr	r3, [pc, #44]	; (800606c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8006040:	2200      	movs	r2, #0
 8006042:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006044:	4b09      	ldr	r3, [pc, #36]	; (800606c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8006046:	2200      	movs	r2, #0
 8006048:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800604a:	4b08      	ldr	r3, [pc, #32]	; (800606c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800604c:	2201      	movs	r2, #1
 800604e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006050:	4b06      	ldr	r3, [pc, #24]	; (800606c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8006052:	2200      	movs	r2, #0
 8006054:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006056:	4805      	ldr	r0, [pc, #20]	; (800606c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8006058:	f7fb f9c5 	bl	80013e6 <HAL_PCD_Init>
 800605c:	4603      	mov	r3, r0
 800605e:	2b00      	cmp	r3, #0
 8006060:	d001      	beq.n	8006066 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8006062:	f7ff fc89 	bl	8005978 <Error_Handler>
  }

}
 8006066:	bf00      	nop
 8006068:	bd80      	pop	{r7, pc}
 800606a:	bf00      	nop
 800606c:	200040b0 	.word	0x200040b0

08006070 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b08a      	sub	sp, #40	; 0x28
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006078:	f107 0314 	add.w	r3, r7, #20
 800607c:	2200      	movs	r2, #0
 800607e:	601a      	str	r2, [r3, #0]
 8006080:	605a      	str	r2, [r3, #4]
 8006082:	609a      	str	r2, [r3, #8]
 8006084:	60da      	str	r2, [r3, #12]
 8006086:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006090:	d13f      	bne.n	8006112 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006092:	2300      	movs	r3, #0
 8006094:	613b      	str	r3, [r7, #16]
 8006096:	4a21      	ldr	r2, [pc, #132]	; (800611c <HAL_PCD_MspInit+0xac>)
 8006098:	4b20      	ldr	r3, [pc, #128]	; (800611c <HAL_PCD_MspInit+0xac>)
 800609a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800609c:	f043 0301 	orr.w	r3, r3, #1
 80060a0:	6313      	str	r3, [r2, #48]	; 0x30
 80060a2:	4b1e      	ldr	r3, [pc, #120]	; (800611c <HAL_PCD_MspInit+0xac>)
 80060a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060a6:	f003 0301 	and.w	r3, r3, #1
 80060aa:	613b      	str	r3, [r7, #16]
 80060ac:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80060ae:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80060b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060b4:	2302      	movs	r3, #2
 80060b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060b8:	2300      	movs	r3, #0
 80060ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80060bc:	2303      	movs	r3, #3
 80060be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80060c0:	230a      	movs	r3, #10
 80060c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80060c4:	f107 0314 	add.w	r3, r7, #20
 80060c8:	4619      	mov	r1, r3
 80060ca:	4815      	ldr	r0, [pc, #84]	; (8006120 <HAL_PCD_MspInit+0xb0>)
 80060cc:	f7fa ffc8 	bl	8001060 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80060d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80060d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80060d6:	2300      	movs	r3, #0
 80060d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060da:	2300      	movs	r3, #0
 80060dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80060de:	f107 0314 	add.w	r3, r7, #20
 80060e2:	4619      	mov	r1, r3
 80060e4:	480e      	ldr	r0, [pc, #56]	; (8006120 <HAL_PCD_MspInit+0xb0>)
 80060e6:	f7fa ffbb 	bl	8001060 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80060ea:	4a0c      	ldr	r2, [pc, #48]	; (800611c <HAL_PCD_MspInit+0xac>)
 80060ec:	4b0b      	ldr	r3, [pc, #44]	; (800611c <HAL_PCD_MspInit+0xac>)
 80060ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060f4:	6353      	str	r3, [r2, #52]	; 0x34
 80060f6:	2300      	movs	r3, #0
 80060f8:	60fb      	str	r3, [r7, #12]
 80060fa:	4a08      	ldr	r2, [pc, #32]	; (800611c <HAL_PCD_MspInit+0xac>)
 80060fc:	4b07      	ldr	r3, [pc, #28]	; (800611c <HAL_PCD_MspInit+0xac>)
 80060fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006100:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006104:	6453      	str	r3, [r2, #68]	; 0x44
 8006106:	4b05      	ldr	r3, [pc, #20]	; (800611c <HAL_PCD_MspInit+0xac>)
 8006108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800610a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800610e:	60fb      	str	r3, [r7, #12]
 8006110:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006112:	bf00      	nop
 8006114:	3728      	adds	r7, #40	; 0x28
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}
 800611a:	bf00      	nop
 800611c:	40023800 	.word	0x40023800
 8006120:	40020000 	.word	0x40020000

08006124 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8006124:	f8df d034 	ldr.w	sp, [pc, #52]	; 800615c <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8006128:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800612a:	e003      	b.n	8006134 <LoopCopyDataInit>

0800612c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800612c:	4b0c      	ldr	r3, [pc, #48]	; (8006160 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800612e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8006130:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8006132:	3104      	adds	r1, #4

08006134 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8006134:	480b      	ldr	r0, [pc, #44]	; (8006164 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8006136:	4b0c      	ldr	r3, [pc, #48]	; (8006168 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8006138:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800613a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800613c:	d3f6      	bcc.n	800612c <CopyDataInit>
  ldr  r2, =_sbss
 800613e:	4a0b      	ldr	r2, [pc, #44]	; (800616c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8006140:	e002      	b.n	8006148 <LoopFillZerobss>

08006142 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8006142:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8006144:	f842 3b04 	str.w	r3, [r2], #4

08006148 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8006148:	4b09      	ldr	r3, [pc, #36]	; (8006170 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800614a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800614c:	d3f9      	bcc.n	8006142 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800614e:	f7ff fcdb 	bl	8005b08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006152:	f000 f811 	bl	8006178 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006156:	f7ff fb62 	bl	800581e <main>
  bx  lr    
 800615a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800615c:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8006160:	08006338 	.word	0x08006338
  ldr  r0, =_sdata
 8006164:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8006168:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 800616c:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8006170:	200044b8 	.word	0x200044b8

08006174 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006174:	e7fe      	b.n	8006174 <ADC_IRQHandler>
	...

08006178 <__libc_init_array>:
 8006178:	b570      	push	{r4, r5, r6, lr}
 800617a:	4e0d      	ldr	r6, [pc, #52]	; (80061b0 <__libc_init_array+0x38>)
 800617c:	4c0d      	ldr	r4, [pc, #52]	; (80061b4 <__libc_init_array+0x3c>)
 800617e:	1ba4      	subs	r4, r4, r6
 8006180:	10a4      	asrs	r4, r4, #2
 8006182:	2500      	movs	r5, #0
 8006184:	42a5      	cmp	r5, r4
 8006186:	d109      	bne.n	800619c <__libc_init_array+0x24>
 8006188:	4e0b      	ldr	r6, [pc, #44]	; (80061b8 <__libc_init_array+0x40>)
 800618a:	4c0c      	ldr	r4, [pc, #48]	; (80061bc <__libc_init_array+0x44>)
 800618c:	f000 f82c 	bl	80061e8 <_init>
 8006190:	1ba4      	subs	r4, r4, r6
 8006192:	10a4      	asrs	r4, r4, #2
 8006194:	2500      	movs	r5, #0
 8006196:	42a5      	cmp	r5, r4
 8006198:	d105      	bne.n	80061a6 <__libc_init_array+0x2e>
 800619a:	bd70      	pop	{r4, r5, r6, pc}
 800619c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80061a0:	4798      	blx	r3
 80061a2:	3501      	adds	r5, #1
 80061a4:	e7ee      	b.n	8006184 <__libc_init_array+0xc>
 80061a6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80061aa:	4798      	blx	r3
 80061ac:	3501      	adds	r5, #1
 80061ae:	e7f2      	b.n	8006196 <__libc_init_array+0x1e>
 80061b0:	08006330 	.word	0x08006330
 80061b4:	08006330 	.word	0x08006330
 80061b8:	08006330 	.word	0x08006330
 80061bc:	08006334 	.word	0x08006334

080061c0 <memcpy>:
 80061c0:	b510      	push	{r4, lr}
 80061c2:	1e43      	subs	r3, r0, #1
 80061c4:	440a      	add	r2, r1
 80061c6:	4291      	cmp	r1, r2
 80061c8:	d100      	bne.n	80061cc <memcpy+0xc>
 80061ca:	bd10      	pop	{r4, pc}
 80061cc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80061d0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80061d4:	e7f7      	b.n	80061c6 <memcpy+0x6>

080061d6 <memset>:
 80061d6:	4402      	add	r2, r0
 80061d8:	4603      	mov	r3, r0
 80061da:	4293      	cmp	r3, r2
 80061dc:	d100      	bne.n	80061e0 <memset+0xa>
 80061de:	4770      	bx	lr
 80061e0:	f803 1b01 	strb.w	r1, [r3], #1
 80061e4:	e7f9      	b.n	80061da <memset+0x4>
	...

080061e8 <_init>:
 80061e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061ea:	bf00      	nop
 80061ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061ee:	bc08      	pop	{r3}
 80061f0:	469e      	mov	lr, r3
 80061f2:	4770      	bx	lr

080061f4 <_fini>:
 80061f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061f6:	bf00      	nop
 80061f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061fa:	bc08      	pop	{r3}
 80061fc:	469e      	mov	lr, r3
 80061fe:	4770      	bx	lr
