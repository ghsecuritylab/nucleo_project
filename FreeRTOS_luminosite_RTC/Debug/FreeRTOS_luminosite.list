
FreeRTOS_luminosite.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004948  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  08004af8  08004af8  00014af8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08004c50  08004c50  00014c50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08004c58  08004c58  00014c58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08004c5c  08004c5c  00014c5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  08004c60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
  8 .bss          00004554  2000000c  2000000c  0002000c  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20004560  20004560  0002000c  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 11 .debug_info   00026771  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00004b34  00000000  00000000  000467ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00013754  00000000  00000000  0004b2e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000019a8  00000000  00000000  0005ea38  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001a30  00000000  00000000  000603e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000c406  00000000  00000000  00061e10  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000086e8  00000000  00000000  0006e216  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  000768fe  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00004780  00000000  00000000  0007697c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000000c 	.word	0x2000000c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08004ae0 	.word	0x08004ae0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000010 	.word	0x20000010
 80001ec:	08004ae0 	.word	0x08004ae0

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <__aeabi_uldivmod>:
 8000200:	b953      	cbnz	r3, 8000218 <__aeabi_uldivmod+0x18>
 8000202:	b94a      	cbnz	r2, 8000218 <__aeabi_uldivmod+0x18>
 8000204:	2900      	cmp	r1, #0
 8000206:	bf08      	it	eq
 8000208:	2800      	cmpeq	r0, #0
 800020a:	bf1c      	itt	ne
 800020c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000210:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000214:	f000 b97a 	b.w	800050c <__aeabi_idiv0>
 8000218:	f1ad 0c08 	sub.w	ip, sp, #8
 800021c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000220:	f000 f806 	bl	8000230 <__udivmoddi4>
 8000224:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000228:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800022c:	b004      	add	sp, #16
 800022e:	4770      	bx	lr

08000230 <__udivmoddi4>:
 8000230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000234:	468c      	mov	ip, r1
 8000236:	460d      	mov	r5, r1
 8000238:	4604      	mov	r4, r0
 800023a:	9e08      	ldr	r6, [sp, #32]
 800023c:	2b00      	cmp	r3, #0
 800023e:	d151      	bne.n	80002e4 <__udivmoddi4+0xb4>
 8000240:	428a      	cmp	r2, r1
 8000242:	4617      	mov	r7, r2
 8000244:	d96d      	bls.n	8000322 <__udivmoddi4+0xf2>
 8000246:	fab2 fe82 	clz	lr, r2
 800024a:	f1be 0f00 	cmp.w	lr, #0
 800024e:	d00b      	beq.n	8000268 <__udivmoddi4+0x38>
 8000250:	f1ce 0c20 	rsb	ip, lr, #32
 8000254:	fa01 f50e 	lsl.w	r5, r1, lr
 8000258:	fa20 fc0c 	lsr.w	ip, r0, ip
 800025c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000260:	ea4c 0c05 	orr.w	ip, ip, r5
 8000264:	fa00 f40e 	lsl.w	r4, r0, lr
 8000268:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800026c:	0c25      	lsrs	r5, r4, #16
 800026e:	fbbc f8fa 	udiv	r8, ip, sl
 8000272:	fa1f f987 	uxth.w	r9, r7
 8000276:	fb0a cc18 	mls	ip, sl, r8, ip
 800027a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800027e:	fb08 f309 	mul.w	r3, r8, r9
 8000282:	42ab      	cmp	r3, r5
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x6c>
 8000286:	19ed      	adds	r5, r5, r7
 8000288:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 800028c:	f080 8123 	bcs.w	80004d6 <__udivmoddi4+0x2a6>
 8000290:	42ab      	cmp	r3, r5
 8000292:	f240 8120 	bls.w	80004d6 <__udivmoddi4+0x2a6>
 8000296:	f1a8 0802 	sub.w	r8, r8, #2
 800029a:	443d      	add	r5, r7
 800029c:	1aed      	subs	r5, r5, r3
 800029e:	b2a4      	uxth	r4, r4
 80002a0:	fbb5 f0fa 	udiv	r0, r5, sl
 80002a4:	fb0a 5510 	mls	r5, sl, r0, r5
 80002a8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002ac:	fb00 f909 	mul.w	r9, r0, r9
 80002b0:	45a1      	cmp	r9, r4
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x98>
 80002b4:	19e4      	adds	r4, r4, r7
 80002b6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002ba:	f080 810a 	bcs.w	80004d2 <__udivmoddi4+0x2a2>
 80002be:	45a1      	cmp	r9, r4
 80002c0:	f240 8107 	bls.w	80004d2 <__udivmoddi4+0x2a2>
 80002c4:	3802      	subs	r0, #2
 80002c6:	443c      	add	r4, r7
 80002c8:	eba4 0409 	sub.w	r4, r4, r9
 80002cc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002d0:	2100      	movs	r1, #0
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d061      	beq.n	800039a <__udivmoddi4+0x16a>
 80002d6:	fa24 f40e 	lsr.w	r4, r4, lr
 80002da:	2300      	movs	r3, #0
 80002dc:	6034      	str	r4, [r6, #0]
 80002de:	6073      	str	r3, [r6, #4]
 80002e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d907      	bls.n	80002f8 <__udivmoddi4+0xc8>
 80002e8:	2e00      	cmp	r6, #0
 80002ea:	d054      	beq.n	8000396 <__udivmoddi4+0x166>
 80002ec:	2100      	movs	r1, #0
 80002ee:	e886 0021 	stmia.w	r6, {r0, r5}
 80002f2:	4608      	mov	r0, r1
 80002f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f8:	fab3 f183 	clz	r1, r3
 80002fc:	2900      	cmp	r1, #0
 80002fe:	f040 808e 	bne.w	800041e <__udivmoddi4+0x1ee>
 8000302:	42ab      	cmp	r3, r5
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xdc>
 8000306:	4282      	cmp	r2, r0
 8000308:	f200 80fa 	bhi.w	8000500 <__udivmoddi4+0x2d0>
 800030c:	1a84      	subs	r4, r0, r2
 800030e:	eb65 0503 	sbc.w	r5, r5, r3
 8000312:	2001      	movs	r0, #1
 8000314:	46ac      	mov	ip, r5
 8000316:	2e00      	cmp	r6, #0
 8000318:	d03f      	beq.n	800039a <__udivmoddi4+0x16a>
 800031a:	e886 1010 	stmia.w	r6, {r4, ip}
 800031e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000322:	b912      	cbnz	r2, 800032a <__udivmoddi4+0xfa>
 8000324:	2701      	movs	r7, #1
 8000326:	fbb7 f7f2 	udiv	r7, r7, r2
 800032a:	fab7 fe87 	clz	lr, r7
 800032e:	f1be 0f00 	cmp.w	lr, #0
 8000332:	d134      	bne.n	800039e <__udivmoddi4+0x16e>
 8000334:	1beb      	subs	r3, r5, r7
 8000336:	0c3a      	lsrs	r2, r7, #16
 8000338:	fa1f fc87 	uxth.w	ip, r7
 800033c:	2101      	movs	r1, #1
 800033e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000342:	0c25      	lsrs	r5, r4, #16
 8000344:	fb02 3318 	mls	r3, r2, r8, r3
 8000348:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800034c:	fb0c f308 	mul.w	r3, ip, r8
 8000350:	42ab      	cmp	r3, r5
 8000352:	d907      	bls.n	8000364 <__udivmoddi4+0x134>
 8000354:	19ed      	adds	r5, r5, r7
 8000356:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x132>
 800035c:	42ab      	cmp	r3, r5
 800035e:	f200 80d1 	bhi.w	8000504 <__udivmoddi4+0x2d4>
 8000362:	4680      	mov	r8, r0
 8000364:	1aed      	subs	r5, r5, r3
 8000366:	b2a3      	uxth	r3, r4
 8000368:	fbb5 f0f2 	udiv	r0, r5, r2
 800036c:	fb02 5510 	mls	r5, r2, r0, r5
 8000370:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000374:	fb0c fc00 	mul.w	ip, ip, r0
 8000378:	45a4      	cmp	ip, r4
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x15c>
 800037c:	19e4      	adds	r4, r4, r7
 800037e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x15a>
 8000384:	45a4      	cmp	ip, r4
 8000386:	f200 80b8 	bhi.w	80004fa <__udivmoddi4+0x2ca>
 800038a:	4618      	mov	r0, r3
 800038c:	eba4 040c 	sub.w	r4, r4, ip
 8000390:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000394:	e79d      	b.n	80002d2 <__udivmoddi4+0xa2>
 8000396:	4631      	mov	r1, r6
 8000398:	4630      	mov	r0, r6
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	f1ce 0420 	rsb	r4, lr, #32
 80003a2:	fa05 f30e 	lsl.w	r3, r5, lr
 80003a6:	fa07 f70e 	lsl.w	r7, r7, lr
 80003aa:	fa20 f804 	lsr.w	r8, r0, r4
 80003ae:	0c3a      	lsrs	r2, r7, #16
 80003b0:	fa25 f404 	lsr.w	r4, r5, r4
 80003b4:	ea48 0803 	orr.w	r8, r8, r3
 80003b8:	fbb4 f1f2 	udiv	r1, r4, r2
 80003bc:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003c0:	fb02 4411 	mls	r4, r2, r1, r4
 80003c4:	fa1f fc87 	uxth.w	ip, r7
 80003c8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003cc:	fb01 f30c 	mul.w	r3, r1, ip
 80003d0:	42ab      	cmp	r3, r5
 80003d2:	fa00 f40e 	lsl.w	r4, r0, lr
 80003d6:	d909      	bls.n	80003ec <__udivmoddi4+0x1bc>
 80003d8:	19ed      	adds	r5, r5, r7
 80003da:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 80003de:	f080 808a 	bcs.w	80004f6 <__udivmoddi4+0x2c6>
 80003e2:	42ab      	cmp	r3, r5
 80003e4:	f240 8087 	bls.w	80004f6 <__udivmoddi4+0x2c6>
 80003e8:	3902      	subs	r1, #2
 80003ea:	443d      	add	r5, r7
 80003ec:	1aeb      	subs	r3, r5, r3
 80003ee:	fa1f f588 	uxth.w	r5, r8
 80003f2:	fbb3 f0f2 	udiv	r0, r3, r2
 80003f6:	fb02 3310 	mls	r3, r2, r0, r3
 80003fa:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003fe:	fb00 f30c 	mul.w	r3, r0, ip
 8000402:	42ab      	cmp	r3, r5
 8000404:	d907      	bls.n	8000416 <__udivmoddi4+0x1e6>
 8000406:	19ed      	adds	r5, r5, r7
 8000408:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800040c:	d26f      	bcs.n	80004ee <__udivmoddi4+0x2be>
 800040e:	42ab      	cmp	r3, r5
 8000410:	d96d      	bls.n	80004ee <__udivmoddi4+0x2be>
 8000412:	3802      	subs	r0, #2
 8000414:	443d      	add	r5, r7
 8000416:	1aeb      	subs	r3, r5, r3
 8000418:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041c:	e78f      	b.n	800033e <__udivmoddi4+0x10e>
 800041e:	f1c1 0720 	rsb	r7, r1, #32
 8000422:	fa22 f807 	lsr.w	r8, r2, r7
 8000426:	408b      	lsls	r3, r1
 8000428:	fa05 f401 	lsl.w	r4, r5, r1
 800042c:	ea48 0303 	orr.w	r3, r8, r3
 8000430:	fa20 fe07 	lsr.w	lr, r0, r7
 8000434:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000438:	40fd      	lsrs	r5, r7
 800043a:	ea4e 0e04 	orr.w	lr, lr, r4
 800043e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000442:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000446:	fb0c 5519 	mls	r5, ip, r9, r5
 800044a:	fa1f f883 	uxth.w	r8, r3
 800044e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000452:	fb09 f408 	mul.w	r4, r9, r8
 8000456:	42ac      	cmp	r4, r5
 8000458:	fa02 f201 	lsl.w	r2, r2, r1
 800045c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000460:	d908      	bls.n	8000474 <__udivmoddi4+0x244>
 8000462:	18ed      	adds	r5, r5, r3
 8000464:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000468:	d243      	bcs.n	80004f2 <__udivmoddi4+0x2c2>
 800046a:	42ac      	cmp	r4, r5
 800046c:	d941      	bls.n	80004f2 <__udivmoddi4+0x2c2>
 800046e:	f1a9 0902 	sub.w	r9, r9, #2
 8000472:	441d      	add	r5, r3
 8000474:	1b2d      	subs	r5, r5, r4
 8000476:	fa1f fe8e 	uxth.w	lr, lr
 800047a:	fbb5 f0fc 	udiv	r0, r5, ip
 800047e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000482:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000486:	fb00 f808 	mul.w	r8, r0, r8
 800048a:	45a0      	cmp	r8, r4
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x26e>
 800048e:	18e4      	adds	r4, r4, r3
 8000490:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000494:	d229      	bcs.n	80004ea <__udivmoddi4+0x2ba>
 8000496:	45a0      	cmp	r8, r4
 8000498:	d927      	bls.n	80004ea <__udivmoddi4+0x2ba>
 800049a:	3802      	subs	r0, #2
 800049c:	441c      	add	r4, r3
 800049e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004a2:	eba4 0408 	sub.w	r4, r4, r8
 80004a6:	fba0 8902 	umull	r8, r9, r0, r2
 80004aa:	454c      	cmp	r4, r9
 80004ac:	46c6      	mov	lr, r8
 80004ae:	464d      	mov	r5, r9
 80004b0:	d315      	bcc.n	80004de <__udivmoddi4+0x2ae>
 80004b2:	d012      	beq.n	80004da <__udivmoddi4+0x2aa>
 80004b4:	b156      	cbz	r6, 80004cc <__udivmoddi4+0x29c>
 80004b6:	ebba 030e 	subs.w	r3, sl, lr
 80004ba:	eb64 0405 	sbc.w	r4, r4, r5
 80004be:	fa04 f707 	lsl.w	r7, r4, r7
 80004c2:	40cb      	lsrs	r3, r1
 80004c4:	431f      	orrs	r7, r3
 80004c6:	40cc      	lsrs	r4, r1
 80004c8:	6037      	str	r7, [r6, #0]
 80004ca:	6074      	str	r4, [r6, #4]
 80004cc:	2100      	movs	r1, #0
 80004ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d2:	4618      	mov	r0, r3
 80004d4:	e6f8      	b.n	80002c8 <__udivmoddi4+0x98>
 80004d6:	4690      	mov	r8, r2
 80004d8:	e6e0      	b.n	800029c <__udivmoddi4+0x6c>
 80004da:	45c2      	cmp	sl, r8
 80004dc:	d2ea      	bcs.n	80004b4 <__udivmoddi4+0x284>
 80004de:	ebb8 0e02 	subs.w	lr, r8, r2
 80004e2:	eb69 0503 	sbc.w	r5, r9, r3
 80004e6:	3801      	subs	r0, #1
 80004e8:	e7e4      	b.n	80004b4 <__udivmoddi4+0x284>
 80004ea:	4628      	mov	r0, r5
 80004ec:	e7d7      	b.n	800049e <__udivmoddi4+0x26e>
 80004ee:	4640      	mov	r0, r8
 80004f0:	e791      	b.n	8000416 <__udivmoddi4+0x1e6>
 80004f2:	4681      	mov	r9, r0
 80004f4:	e7be      	b.n	8000474 <__udivmoddi4+0x244>
 80004f6:	4601      	mov	r1, r0
 80004f8:	e778      	b.n	80003ec <__udivmoddi4+0x1bc>
 80004fa:	3802      	subs	r0, #2
 80004fc:	443c      	add	r4, r7
 80004fe:	e745      	b.n	800038c <__udivmoddi4+0x15c>
 8000500:	4608      	mov	r0, r1
 8000502:	e708      	b.n	8000316 <__udivmoddi4+0xe6>
 8000504:	f1a8 0802 	sub.w	r8, r8, #2
 8000508:	443d      	add	r5, r7
 800050a:	e72b      	b.n	8000364 <__udivmoddi4+0x134>

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000510:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000512:	4b0b      	ldr	r3, [pc, #44]	; (8000540 <HAL_Init+0x30>)
 8000514:	681a      	ldr	r2, [r3, #0]
 8000516:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800051a:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800051c:	681a      	ldr	r2, [r3, #0]
 800051e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000522:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000524:	681a      	ldr	r2, [r3, #0]
 8000526:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800052a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800052c:	2003      	movs	r0, #3
 800052e:	f000 f9c7 	bl	80008c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000532:	2000      	movs	r0, #0
 8000534:	f004 f812 	bl	800455c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000538:	f003 ffee 	bl	8004518 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 800053c:	2000      	movs	r0, #0
 800053e:	bd08      	pop	{r3, pc}
 8000540:	40023c00 	.word	0x40023c00

08000544 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000544:	4a03      	ldr	r2, [pc, #12]	; (8000554 <HAL_IncTick+0x10>)
 8000546:	6811      	ldr	r1, [r2, #0]
 8000548:	4b03      	ldr	r3, [pc, #12]	; (8000558 <HAL_IncTick+0x14>)
 800054a:	781b      	ldrb	r3, [r3, #0]
 800054c:	440b      	add	r3, r1
 800054e:	6013      	str	r3, [r2, #0]
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop
 8000554:	20003fc4 	.word	0x20003fc4
 8000558:	20000000 	.word	0x20000000

0800055c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800055c:	4b01      	ldr	r3, [pc, #4]	; (8000564 <HAL_GetTick+0x8>)
 800055e:	6818      	ldr	r0, [r3, #0]
}
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop
 8000564:	20003fc4 	.word	0x20003fc4

08000568 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000568:	b538      	push	{r3, r4, r5, lr}
 800056a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800056c:	f7ff fff6 	bl	800055c <HAL_GetTick>
 8000570:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000572:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8000576:	d002      	beq.n	800057e <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8000578:	4b04      	ldr	r3, [pc, #16]	; (800058c <HAL_Delay+0x24>)
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800057e:	f7ff ffed 	bl	800055c <HAL_GetTick>
 8000582:	1b40      	subs	r0, r0, r5
 8000584:	4284      	cmp	r4, r0
 8000586:	d8fa      	bhi.n	800057e <HAL_Delay+0x16>
  {
  }
}
 8000588:	bd38      	pop	{r3, r4, r5, pc}
 800058a:	bf00      	nop
 800058c:	20000000 	.word	0x20000000

08000590 <ADC_Init>:
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000590:	4b4a      	ldr	r3, [pc, #296]	; (80006bc <ADC_Init+0x12c>)
 8000592:	685a      	ldr	r2, [r3, #4]
 8000594:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8000598:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800059a:	685a      	ldr	r2, [r3, #4]
 800059c:	6841      	ldr	r1, [r0, #4]
 800059e:	430a      	orrs	r2, r1
 80005a0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80005a2:	6802      	ldr	r2, [r0, #0]
 80005a4:	6853      	ldr	r3, [r2, #4]
 80005a6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80005aa:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80005ac:	6802      	ldr	r2, [r0, #0]
 80005ae:	6853      	ldr	r3, [r2, #4]
 80005b0:	6901      	ldr	r1, [r0, #16]
 80005b2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80005b6:	6053      	str	r3, [r2, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80005b8:	6802      	ldr	r2, [r0, #0]
 80005ba:	6853      	ldr	r3, [r2, #4]
 80005bc:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80005c0:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80005c2:	6802      	ldr	r2, [r0, #0]
 80005c4:	6853      	ldr	r3, [r2, #4]
 80005c6:	6881      	ldr	r1, [r0, #8]
 80005c8:	430b      	orrs	r3, r1
 80005ca:	6053      	str	r3, [r2, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80005cc:	6802      	ldr	r2, [r0, #0]
 80005ce:	6893      	ldr	r3, [r2, #8]
 80005d0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80005d4:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80005d6:	6802      	ldr	r2, [r0, #0]
 80005d8:	6893      	ldr	r3, [r2, #8]
 80005da:	68c1      	ldr	r1, [r0, #12]
 80005dc:	430b      	orrs	r3, r1
 80005de:	6093      	str	r3, [r2, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80005e0:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80005e2:	4b37      	ldr	r3, [pc, #220]	; (80006c0 <ADC_Init+0x130>)
 80005e4:	429a      	cmp	r2, r3
 80005e6:	d04b      	beq.n	8000680 <ADC_Init+0xf0>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80005e8:	6802      	ldr	r2, [r0, #0]
 80005ea:	6893      	ldr	r3, [r2, #8]
 80005ec:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80005f0:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80005f2:	6802      	ldr	r2, [r0, #0]
 80005f4:	6893      	ldr	r3, [r2, #8]
 80005f6:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80005f8:	430b      	orrs	r3, r1
 80005fa:	6093      	str	r3, [r2, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80005fc:	6802      	ldr	r2, [r0, #0]
 80005fe:	6893      	ldr	r3, [r2, #8]
 8000600:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8000604:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000606:	6802      	ldr	r2, [r0, #0]
 8000608:	6893      	ldr	r3, [r2, #8]
 800060a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800060c:	430b      	orrs	r3, r1
 800060e:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000610:	6802      	ldr	r2, [r0, #0]
 8000612:	6893      	ldr	r3, [r2, #8]
 8000614:	f023 0302 	bic.w	r3, r3, #2
 8000618:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800061a:	6802      	ldr	r2, [r0, #0]
 800061c:	6893      	ldr	r3, [r2, #8]
 800061e:	7e01      	ldrb	r1, [r0, #24]
 8000620:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8000624:	6093      	str	r3, [r2, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000626:	f890 3020 	ldrb.w	r3, [r0, #32]
 800062a:	2b00      	cmp	r3, #0
 800062c:	d133      	bne.n	8000696 <ADC_Init+0x106>
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800062e:	6802      	ldr	r2, [r0, #0]
 8000630:	6853      	ldr	r3, [r2, #4]
 8000632:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000636:	6053      	str	r3, [r2, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000638:	6802      	ldr	r2, [r0, #0]
 800063a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800063c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8000640:	62d3      	str	r3, [r2, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000642:	6801      	ldr	r1, [r0, #0]
 8000644:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8000646:	69c2      	ldr	r2, [r0, #28]
 8000648:	3a01      	subs	r2, #1
 800064a:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 800064e:	62cb      	str	r3, [r1, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000650:	6802      	ldr	r2, [r0, #0]
 8000652:	6893      	ldr	r3, [r2, #8]
 8000654:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000658:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800065a:	6802      	ldr	r2, [r0, #0]
 800065c:	6893      	ldr	r3, [r2, #8]
 800065e:	f890 1030 	ldrb.w	r1, [r0, #48]	; 0x30
 8000662:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
 8000666:	6093      	str	r3, [r2, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000668:	6802      	ldr	r2, [r0, #0]
 800066a:	6893      	ldr	r3, [r2, #8]
 800066c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000670:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000672:	6802      	ldr	r2, [r0, #0]
 8000674:	6893      	ldr	r3, [r2, #8]
 8000676:	6941      	ldr	r1, [r0, #20]
 8000678:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 800067c:	6093      	str	r3, [r2, #8]
 800067e:	4770      	bx	lr
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000680:	6802      	ldr	r2, [r0, #0]
 8000682:	6893      	ldr	r3, [r2, #8]
 8000684:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8000688:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800068a:	6802      	ldr	r2, [r0, #0]
 800068c:	6893      	ldr	r3, [r2, #8]
 800068e:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8000692:	6093      	str	r3, [r2, #8]
 8000694:	e7bc      	b.n	8000610 <ADC_Init+0x80>
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000696:	6802      	ldr	r2, [r0, #0]
 8000698:	6853      	ldr	r3, [r2, #4]
 800069a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800069e:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80006a0:	6802      	ldr	r2, [r0, #0]
 80006a2:	6853      	ldr	r3, [r2, #4]
 80006a4:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80006a8:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80006aa:	6801      	ldr	r1, [r0, #0]
 80006ac:	684b      	ldr	r3, [r1, #4]
 80006ae:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80006b0:	3a01      	subs	r2, #1
 80006b2:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 80006b6:	604b      	str	r3, [r1, #4]
 80006b8:	e7be      	b.n	8000638 <ADC_Init+0xa8>
 80006ba:	bf00      	nop
 80006bc:	40012300 	.word	0x40012300
 80006c0:	0f000001 	.word	0x0f000001

080006c4 <HAL_ADC_Init>:
  if(hadc == NULL)
 80006c4:	b338      	cbz	r0, 8000716 <HAL_ADC_Init+0x52>
{
 80006c6:	b510      	push	{r4, lr}
 80006c8:	4604      	mov	r4, r0
  if(hadc->State == HAL_ADC_STATE_RESET)
 80006ca:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80006cc:	b143      	cbz	r3, 80006e0 <HAL_ADC_Init+0x1c>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80006ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80006d0:	f013 0f10 	tst.w	r3, #16
 80006d4:	d00b      	beq.n	80006ee <HAL_ADC_Init+0x2a>
    tmp_hal_status = HAL_ERROR;
 80006d6:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 80006d8:	2300      	movs	r3, #0
 80006da:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return tmp_hal_status;
 80006de:	bd10      	pop	{r4, pc}
    HAL_ADC_MspInit(hadc);
 80006e0:	f003 fa82 	bl	8003be8 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 80006e4:	2300      	movs	r3, #0
 80006e6:	6463      	str	r3, [r4, #68]	; 0x44
    hadc->Lock = HAL_UNLOCKED;
 80006e8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 80006ec:	e7ef      	b.n	80006ce <HAL_ADC_Init+0xa>
    ADC_STATE_CLR_SET(hadc->State,
 80006ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80006f0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80006f4:	f023 0302 	bic.w	r3, r3, #2
 80006f8:	f043 0302 	orr.w	r3, r3, #2
 80006fc:	6423      	str	r3, [r4, #64]	; 0x40
    ADC_Init(hadc);
 80006fe:	4620      	mov	r0, r4
 8000700:	f7ff ff46 	bl	8000590 <ADC_Init>
    ADC_CLEAR_ERRORCODE(hadc);
 8000704:	2000      	movs	r0, #0
 8000706:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8000708:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800070a:	f023 0303 	bic.w	r3, r3, #3
 800070e:	f043 0301 	orr.w	r3, r3, #1
 8000712:	6423      	str	r3, [r4, #64]	; 0x40
 8000714:	e7e0      	b.n	80006d8 <HAL_ADC_Init+0x14>
    return HAL_ERROR;
 8000716:	2001      	movs	r0, #1
 8000718:	4770      	bx	lr
	...

0800071c <HAL_ADC_ConfigChannel>:
{
 800071c:	b430      	push	{r4, r5}
 800071e:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 8000720:	2300      	movs	r3, #0
 8000722:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8000724:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8000728:	2b01      	cmp	r3, #1
 800072a:	f000 80bd 	beq.w	80008a8 <HAL_ADC_ConfigChannel+0x18c>
 800072e:	2301      	movs	r3, #1
 8000730:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000734:	680b      	ldr	r3, [r1, #0]
 8000736:	2b09      	cmp	r3, #9
 8000738:	d93e      	bls.n	80007b8 <HAL_ADC_ConfigChannel+0x9c>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800073a:	6805      	ldr	r5, [r0, #0]
 800073c:	68ea      	ldr	r2, [r5, #12]
 800073e:	b29b      	uxth	r3, r3
 8000740:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000744:	3b1e      	subs	r3, #30
 8000746:	2407      	movs	r4, #7
 8000748:	fa04 f303 	lsl.w	r3, r4, r3
 800074c:	ea22 0303 	bic.w	r3, r2, r3
 8000750:	60eb      	str	r3, [r5, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000752:	6805      	ldr	r5, [r0, #0]
 8000754:	68ea      	ldr	r2, [r5, #12]
 8000756:	688c      	ldr	r4, [r1, #8]
 8000758:	880b      	ldrh	r3, [r1, #0]
 800075a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800075e:	3b1e      	subs	r3, #30
 8000760:	fa04 f303 	lsl.w	r3, r4, r3
 8000764:	4313      	orrs	r3, r2
 8000766:	60eb      	str	r3, [r5, #12]
  if (sConfig->Rank < 7U)
 8000768:	684b      	ldr	r3, [r1, #4]
 800076a:	2b06      	cmp	r3, #6
 800076c:	d83a      	bhi.n	80007e4 <HAL_ADC_ConfigChannel+0xc8>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800076e:	6805      	ldr	r5, [r0, #0]
 8000770:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8000772:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000776:	3b05      	subs	r3, #5
 8000778:	241f      	movs	r4, #31
 800077a:	fa04 f303 	lsl.w	r3, r4, r3
 800077e:	ea22 0303 	bic.w	r3, r2, r3
 8000782:	636b      	str	r3, [r5, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000784:	6805      	ldr	r5, [r0, #0]
 8000786:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8000788:	684b      	ldr	r3, [r1, #4]
 800078a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800078e:	3b05      	subs	r3, #5
 8000790:	880c      	ldrh	r4, [r1, #0]
 8000792:	fa04 f303 	lsl.w	r3, r4, r3
 8000796:	4313      	orrs	r3, r2
 8000798:	636b      	str	r3, [r5, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800079a:	6802      	ldr	r2, [r0, #0]
 800079c:	4b43      	ldr	r3, [pc, #268]	; (80008ac <HAL_ADC_ConfigChannel+0x190>)
 800079e:	429a      	cmp	r2, r3
 80007a0:	d050      	beq.n	8000844 <HAL_ADC_ConfigChannel+0x128>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80007a2:	6802      	ldr	r2, [r0, #0]
 80007a4:	4b41      	ldr	r3, [pc, #260]	; (80008ac <HAL_ADC_ConfigChannel+0x190>)
 80007a6:	429a      	cmp	r2, r3
 80007a8:	d059      	beq.n	800085e <HAL_ADC_ConfigChannel+0x142>
  __HAL_UNLOCK(hadc);
 80007aa:	2300      	movs	r3, #0
 80007ac:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 80007b0:	4618      	mov	r0, r3
}
 80007b2:	b002      	add	sp, #8
 80007b4:	bc30      	pop	{r4, r5}
 80007b6:	4770      	bx	lr
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80007b8:	6805      	ldr	r5, [r0, #0]
 80007ba:	692a      	ldr	r2, [r5, #16]
 80007bc:	b29b      	uxth	r3, r3
 80007be:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80007c2:	2407      	movs	r4, #7
 80007c4:	fa04 f303 	lsl.w	r3, r4, r3
 80007c8:	ea22 0303 	bic.w	r3, r2, r3
 80007cc:	612b      	str	r3, [r5, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80007ce:	6805      	ldr	r5, [r0, #0]
 80007d0:	692a      	ldr	r2, [r5, #16]
 80007d2:	688c      	ldr	r4, [r1, #8]
 80007d4:	880b      	ldrh	r3, [r1, #0]
 80007d6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80007da:	fa04 f303 	lsl.w	r3, r4, r3
 80007de:	4313      	orrs	r3, r2
 80007e0:	612b      	str	r3, [r5, #16]
 80007e2:	e7c1      	b.n	8000768 <HAL_ADC_ConfigChannel+0x4c>
  else if (sConfig->Rank < 13U)
 80007e4:	2b0c      	cmp	r3, #12
 80007e6:	d816      	bhi.n	8000816 <HAL_ADC_ConfigChannel+0xfa>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80007e8:	6805      	ldr	r5, [r0, #0]
 80007ea:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80007ec:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80007f0:	3b23      	subs	r3, #35	; 0x23
 80007f2:	241f      	movs	r4, #31
 80007f4:	fa04 f303 	lsl.w	r3, r4, r3
 80007f8:	ea22 0303 	bic.w	r3, r2, r3
 80007fc:	632b      	str	r3, [r5, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80007fe:	6805      	ldr	r5, [r0, #0]
 8000800:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8000802:	684b      	ldr	r3, [r1, #4]
 8000804:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000808:	3b23      	subs	r3, #35	; 0x23
 800080a:	880c      	ldrh	r4, [r1, #0]
 800080c:	fa04 f303 	lsl.w	r3, r4, r3
 8000810:	4313      	orrs	r3, r2
 8000812:	632b      	str	r3, [r5, #48]	; 0x30
 8000814:	e7c1      	b.n	800079a <HAL_ADC_ConfigChannel+0x7e>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000816:	6805      	ldr	r5, [r0, #0]
 8000818:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800081a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800081e:	3b41      	subs	r3, #65	; 0x41
 8000820:	241f      	movs	r4, #31
 8000822:	fa04 f303 	lsl.w	r3, r4, r3
 8000826:	ea22 0303 	bic.w	r3, r2, r3
 800082a:	62eb      	str	r3, [r5, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800082c:	6805      	ldr	r5, [r0, #0]
 800082e:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8000830:	684b      	ldr	r3, [r1, #4]
 8000832:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000836:	3b41      	subs	r3, #65	; 0x41
 8000838:	880c      	ldrh	r4, [r1, #0]
 800083a:	fa04 f303 	lsl.w	r3, r4, r3
 800083e:	4313      	orrs	r3, r2
 8000840:	62eb      	str	r3, [r5, #44]	; 0x2c
 8000842:	e7aa      	b.n	800079a <HAL_ADC_ConfigChannel+0x7e>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000844:	680b      	ldr	r3, [r1, #0]
 8000846:	2b12      	cmp	r3, #18
 8000848:	d1ab      	bne.n	80007a2 <HAL_ADC_ConfigChannel+0x86>
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800084a:	4b19      	ldr	r3, [pc, #100]	; (80008b0 <HAL_ADC_ConfigChannel+0x194>)
 800084c:	685a      	ldr	r2, [r3, #4]
 800084e:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8000852:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8000854:	685a      	ldr	r2, [r3, #4]
 8000856:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800085a:	605a      	str	r2, [r3, #4]
 800085c:	e7a1      	b.n	80007a2 <HAL_ADC_ConfigChannel+0x86>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800085e:	680b      	ldr	r3, [r1, #0]
 8000860:	4a14      	ldr	r2, [pc, #80]	; (80008b4 <HAL_ADC_ConfigChannel+0x198>)
 8000862:	4293      	cmp	r3, r2
 8000864:	d001      	beq.n	800086a <HAL_ADC_ConfigChannel+0x14e>
 8000866:	2b11      	cmp	r3, #17
 8000868:	d19f      	bne.n	80007aa <HAL_ADC_ConfigChannel+0x8e>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800086a:	4b11      	ldr	r3, [pc, #68]	; (80008b0 <HAL_ADC_ConfigChannel+0x194>)
 800086c:	685a      	ldr	r2, [r3, #4]
 800086e:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 8000872:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8000874:	685a      	ldr	r2, [r3, #4]
 8000876:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800087a:	605a      	str	r2, [r3, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800087c:	680a      	ldr	r2, [r1, #0]
 800087e:	4b0d      	ldr	r3, [pc, #52]	; (80008b4 <HAL_ADC_ConfigChannel+0x198>)
 8000880:	429a      	cmp	r2, r3
 8000882:	d192      	bne.n	80007aa <HAL_ADC_ConfigChannel+0x8e>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000884:	4b0c      	ldr	r3, [pc, #48]	; (80008b8 <HAL_ADC_ConfigChannel+0x19c>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	4a0c      	ldr	r2, [pc, #48]	; (80008bc <HAL_ADC_ConfigChannel+0x1a0>)
 800088a:	fba2 2303 	umull	r2, r3, r2, r3
 800088e:	0c9b      	lsrs	r3, r3, #18
 8000890:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000894:	005a      	lsls	r2, r3, #1
 8000896:	9201      	str	r2, [sp, #4]
      while(counter != 0U)
 8000898:	e002      	b.n	80008a0 <HAL_ADC_ConfigChannel+0x184>
        counter--;
 800089a:	9b01      	ldr	r3, [sp, #4]
 800089c:	3b01      	subs	r3, #1
 800089e:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 80008a0:	9b01      	ldr	r3, [sp, #4]
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d1f9      	bne.n	800089a <HAL_ADC_ConfigChannel+0x17e>
 80008a6:	e780      	b.n	80007aa <HAL_ADC_ConfigChannel+0x8e>
  __HAL_LOCK(hadc);
 80008a8:	2002      	movs	r0, #2
 80008aa:	e782      	b.n	80007b2 <HAL_ADC_ConfigChannel+0x96>
 80008ac:	40012000 	.word	0x40012000
 80008b0:	40012300 	.word	0x40012300
 80008b4:	10000012 	.word	0x10000012
 80008b8:	20000008 	.word	0x20000008
 80008bc:	431bde83 	.word	0x431bde83

080008c0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008c0:	4a07      	ldr	r2, [pc, #28]	; (80008e0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80008c2:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008c4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80008c8:	041b      	lsls	r3, r3, #16
 80008ca:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008cc:	0200      	lsls	r0, r0, #8
 80008ce:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008d2:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 80008d4:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 80008d8:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80008dc:	60d0      	str	r0, [r2, #12]
 80008de:	4770      	bx	lr
 80008e0:	e000ed00 	.word	0xe000ed00

080008e4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008e4:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008e6:	4b16      	ldr	r3, [pc, #88]	; (8000940 <HAL_NVIC_SetPriority+0x5c>)
 80008e8:	68db      	ldr	r3, [r3, #12]
 80008ea:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008ee:	f1c3 0407 	rsb	r4, r3, #7
 80008f2:	2c04      	cmp	r4, #4
 80008f4:	bf28      	it	cs
 80008f6:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008f8:	1d1d      	adds	r5, r3, #4
 80008fa:	2d06      	cmp	r5, #6
 80008fc:	d917      	bls.n	800092e <HAL_NVIC_SetPriority+0x4a>
 80008fe:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000900:	2501      	movs	r5, #1
 8000902:	fa05 f404 	lsl.w	r4, r5, r4
 8000906:	3c01      	subs	r4, #1
 8000908:	4021      	ands	r1, r4
 800090a:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800090c:	fa05 f303 	lsl.w	r3, r5, r3
 8000910:	3b01      	subs	r3, #1
 8000912:	4013      	ands	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000914:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8000916:	2800      	cmp	r0, #0
 8000918:	db0b      	blt.n	8000932 <HAL_NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800091a:	0109      	lsls	r1, r1, #4
 800091c:	b2c9      	uxtb	r1, r1
 800091e:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000922:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000926:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800092a:	bc30      	pop	{r4, r5}
 800092c:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800092e:	2300      	movs	r3, #0
 8000930:	e7e6      	b.n	8000900 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000932:	f000 000f 	and.w	r0, r0, #15
 8000936:	0109      	lsls	r1, r1, #4
 8000938:	b2c9      	uxtb	r1, r1
 800093a:	4b02      	ldr	r3, [pc, #8]	; (8000944 <HAL_NVIC_SetPriority+0x60>)
 800093c:	5419      	strb	r1, [r3, r0]
 800093e:	e7f4      	b.n	800092a <HAL_NVIC_SetPriority+0x46>
 8000940:	e000ed00 	.word	0xe000ed00
 8000944:	e000ed14 	.word	0xe000ed14

08000948 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000948:	2800      	cmp	r0, #0
 800094a:	db08      	blt.n	800095e <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800094c:	0942      	lsrs	r2, r0, #5
 800094e:	f000 001f 	and.w	r0, r0, #31
 8000952:	2301      	movs	r3, #1
 8000954:	fa03 f000 	lsl.w	r0, r3, r0
 8000958:	4b01      	ldr	r3, [pc, #4]	; (8000960 <HAL_NVIC_EnableIRQ+0x18>)
 800095a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800095e:	4770      	bx	lr
 8000960:	e000e100 	.word	0xe000e100

08000964 <ETH_MACAddressConfig>:

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8000964:	7950      	ldrb	r0, [r2, #5]
 8000966:	7913      	ldrb	r3, [r2, #4]
 8000968:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800096c:	4807      	ldr	r0, [pc, #28]	; (800098c <ETH_MACAddressConfig+0x28>)
 800096e:	500b      	str	r3, [r1, r0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8000970:	78d0      	ldrb	r0, [r2, #3]
 8000972:	7893      	ldrb	r3, [r2, #2]
 8000974:	041b      	lsls	r3, r3, #16
 8000976:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800097a:	7850      	ldrb	r0, [r2, #1]
 800097c:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8000980:	7812      	ldrb	r2, [r2, #0]
 8000982:	4313      	orrs	r3, r2
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8000984:	4a02      	ldr	r2, [pc, #8]	; (8000990 <ETH_MACAddressConfig+0x2c>)
 8000986:	508b      	str	r3, [r1, r2]
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop
 800098c:	40028040 	.word	0x40028040
 8000990:	40028044 	.word	0x40028044

08000994 <ETH_MACDMAConfig>:
{
 8000994:	b570      	push	{r4, r5, r6, lr}
 8000996:	b09e      	sub	sp, #120	; 0x78
 8000998:	4604      	mov	r4, r0
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 800099a:	b129      	cbz	r1, 80009a8 <ETH_MACDMAConfig+0x14>
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 800099c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80009a0:	60c3      	str	r3, [r0, #12]
    (heth->Init).Speed = ETH_SPEED_100M;
 80009a2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80009a6:	6083      	str	r3, [r0, #8]
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80009a8:	69e3      	ldr	r3, [r4, #28]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d16a      	bne.n	8000a84 <ETH_MACDMAConfig+0xf0>
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 80009ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009b2:	9307      	str	r3, [sp, #28]
  tmpreg1 = (heth->Instance)->MACCR;
 80009b4:	6821      	ldr	r1, [r4, #0]
 80009b6:	680b      	ldr	r3, [r1, #0]
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80009b8:	4a39      	ldr	r2, [pc, #228]	; (8000aa0 <ETH_MACDMAConfig+0x10c>)
 80009ba:	401a      	ands	r2, r3
                       (heth->Init).Speed | 
 80009bc:	68a3      	ldr	r3, [r4, #8]
                       (heth->Init).DuplexMode | 
 80009be:	68e0      	ldr	r0, [r4, #12]
                       macinit.LoopbackMode |
 80009c0:	4303      	orrs	r3, r0
                       macinit.ChecksumOffload |    
 80009c2:	9807      	ldr	r0, [sp, #28]
                       (heth->Init).DuplexMode | 
 80009c4:	4303      	orrs	r3, r0
                       macinit.ChecksumOffload |    
 80009c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80009ca:	4313      	orrs	r3, r2
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80009cc:	600b      	str	r3, [r1, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 80009ce:	6823      	ldr	r3, [r4, #0]
 80009d0:	681d      	ldr	r5, [r3, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80009d2:	2001      	movs	r0, #1
 80009d4:	f7ff fdc8 	bl	8000568 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 80009d8:	6823      	ldr	r3, [r4, #0]
 80009da:	601d      	str	r5, [r3, #0]
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80009dc:	6823      	ldr	r3, [r4, #0]
 80009de:	2240      	movs	r2, #64	; 0x40
 80009e0:	605a      	str	r2, [r3, #4]
   tmpreg1 = (heth->Instance)->MACFFR;
 80009e2:	6823      	ldr	r3, [r4, #0]
 80009e4:	685d      	ldr	r5, [r3, #4]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80009e6:	2001      	movs	r0, #1
 80009e8:	f7ff fdbe 	bl	8000568 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 80009ec:	6823      	ldr	r3, [r4, #0]
 80009ee:	605d      	str	r5, [r3, #4]
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80009f0:	6823      	ldr	r3, [r4, #0]
 80009f2:	2500      	movs	r5, #0
 80009f4:	609d      	str	r5, [r3, #8]
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 80009f6:	6823      	ldr	r3, [r4, #0]
 80009f8:	60dd      	str	r5, [r3, #12]
   tmpreg1 = (heth->Instance)->MACFCR;
 80009fa:	6822      	ldr	r2, [r4, #0]
 80009fc:	6993      	ldr	r3, [r2, #24]
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80009fe:	f023 03be 	bic.w	r3, r3, #190	; 0xbe
 8000a02:	041b      	lsls	r3, r3, #16
 8000a04:	0c1b      	lsrs	r3, r3, #16
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8000a06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8000a0a:	6193      	str	r3, [r2, #24]
   tmpreg1 = (heth->Instance)->MACFCR;
 8000a0c:	6823      	ldr	r3, [r4, #0]
 8000a0e:	699e      	ldr	r6, [r3, #24]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8000a10:	2001      	movs	r0, #1
 8000a12:	f7ff fda9 	bl	8000568 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8000a16:	6823      	ldr	r3, [r4, #0]
 8000a18:	619e      	str	r6, [r3, #24]
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8000a1a:	6823      	ldr	r3, [r4, #0]
 8000a1c:	61dd      	str	r5, [r3, #28]
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8000a1e:	6823      	ldr	r3, [r4, #0]
 8000a20:	69dd      	ldr	r5, [r3, #28]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8000a22:	2001      	movs	r0, #1
 8000a24:	f7ff fda0 	bl	8000568 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8000a28:	6823      	ldr	r3, [r4, #0]
 8000a2a:	61dd      	str	r5, [r3, #28]
    tmpreg1 = (heth->Instance)->DMAOMR;
 8000a2c:	6822      	ldr	r2, [r4, #0]
 8000a2e:	f241 0518 	movw	r5, #4120	; 0x1018
 8000a32:	5951      	ldr	r1, [r2, r5]
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8000a34:	4b1b      	ldr	r3, [pc, #108]	; (8000aa4 <ETH_MACDMAConfig+0x110>)
 8000a36:	400b      	ands	r3, r1
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8000a38:	f043 7308 	orr.w	r3, r3, #35651584	; 0x2200000
 8000a3c:	f043 0304 	orr.w	r3, r3, #4
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8000a40:	5153      	str	r3, [r2, r5]
    tmpreg1 = (heth->Instance)->DMAOMR;
 8000a42:	6823      	ldr	r3, [r4, #0]
 8000a44:	595e      	ldr	r6, [r3, r5]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8000a46:	2001      	movs	r0, #1
 8000a48:	f7ff fd8e 	bl	8000568 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8000a4c:	6823      	ldr	r3, [r4, #0]
 8000a4e:	515e      	str	r6, [r3, r5]
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8000a50:	6823      	ldr	r3, [r4, #0]
 8000a52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000a56:	4a14      	ldr	r2, [pc, #80]	; (8000aa8 <ETH_MACDMAConfig+0x114>)
 8000a58:	601a      	str	r2, [r3, #0]
     tmpreg1 = (heth->Instance)->DMABMR;
 8000a5a:	6823      	ldr	r3, [r4, #0]
 8000a5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000a60:	681d      	ldr	r5, [r3, #0]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8000a62:	2001      	movs	r0, #1
 8000a64:	f7ff fd80 	bl	8000568 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8000a68:	6823      	ldr	r3, [r4, #0]
 8000a6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000a6e:	601d      	str	r5, [r3, #0]
     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8000a70:	69a3      	ldr	r3, [r4, #24]
 8000a72:	2b01      	cmp	r3, #1
 8000a74:	d009      	beq.n	8000a8a <ETH_MACDMAConfig+0xf6>
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8000a76:	6962      	ldr	r2, [r4, #20]
 8000a78:	2100      	movs	r1, #0
 8000a7a:	4620      	mov	r0, r4
 8000a7c:	f7ff ff72 	bl	8000964 <ETH_MACAddressConfig>
}
 8000a80:	b01e      	add	sp, #120	; 0x78
 8000a82:	bd70      	pop	{r4, r5, r6, pc}
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8000a84:	2300      	movs	r3, #0
 8000a86:	9307      	str	r3, [sp, #28]
 8000a88:	e794      	b.n	80009b4 <ETH_MACDMAConfig+0x20>
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8000a8a:	6821      	ldr	r1, [r4, #0]
 8000a8c:	f241 021c 	movw	r2, #4124	; 0x101c
 8000a90:	588b      	ldr	r3, [r1, r2]
 8000a92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a9a:	508b      	str	r3, [r1, r2]
 8000a9c:	e7eb      	b.n	8000a76 <ETH_MACDMAConfig+0xe2>
 8000a9e:	bf00      	nop
 8000aa0:	ff20810f 	.word	0xff20810f
 8000aa4:	f8de3f23 	.word	0xf8de3f23
 8000aa8:	02c12080 	.word	0x02c12080

08000aac <HAL_ETH_ReadPHYRegister>:
{
 8000aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8000aae:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8000ab2:	b2db      	uxtb	r3, r3
 8000ab4:	2b82      	cmp	r3, #130	; 0x82
 8000ab6:	d101      	bne.n	8000abc <HAL_ETH_ReadPHYRegister+0x10>
    return HAL_BUSY;
 8000ab8:	2002      	movs	r0, #2
}
 8000aba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000abc:	4616      	mov	r6, r2
 8000abe:	4605      	mov	r5, r0
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8000ac0:	2382      	movs	r3, #130	; 0x82
 8000ac2:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg1 = heth->Instance->MACMIIAR;
 8000ac6:	6802      	ldr	r2, [r0, #0]
 8000ac8:	6914      	ldr	r4, [r2, #16]
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8000aca:	f004 041c 	and.w	r4, r4, #28
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8000ace:	8a03      	ldrh	r3, [r0, #16]
 8000ad0:	02db      	lsls	r3, r3, #11
 8000ad2:	b29b      	uxth	r3, r3
 8000ad4:	431c      	orrs	r4, r3
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8000ad6:	0189      	lsls	r1, r1, #6
 8000ad8:	f401 61f8 	and.w	r1, r1, #1984	; 0x7c0
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8000adc:	430c      	orrs	r4, r1
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8000ade:	f044 0401 	orr.w	r4, r4, #1
  heth->Instance->MACMIIAR = tmpreg1;
 8000ae2:	6114      	str	r4, [r2, #16]
  tickstart = HAL_GetTick();
 8000ae4:	f7ff fd3a 	bl	800055c <HAL_GetTick>
 8000ae8:	4607      	mov	r7, r0
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8000aea:	f014 0f01 	tst.w	r4, #1
 8000aee:	d010      	beq.n	8000b12 <HAL_ETH_ReadPHYRegister+0x66>
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8000af0:	f7ff fd34 	bl	800055c <HAL_GetTick>
 8000af4:	1bc0      	subs	r0, r0, r7
 8000af6:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8000afa:	d202      	bcs.n	8000b02 <HAL_ETH_ReadPHYRegister+0x56>
    tmpreg1 = heth->Instance->MACMIIAR;
 8000afc:	682b      	ldr	r3, [r5, #0]
 8000afe:	691c      	ldr	r4, [r3, #16]
 8000b00:	e7f3      	b.n	8000aea <HAL_ETH_ReadPHYRegister+0x3e>
      heth->State= HAL_ETH_STATE_READY;
 8000b02:	2301      	movs	r3, #1
 8000b04:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8000b08:	2300      	movs	r3, #0
 8000b0a:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
      return HAL_TIMEOUT;
 8000b0e:	2003      	movs	r0, #3
 8000b10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8000b12:	682b      	ldr	r3, [r5, #0]
 8000b14:	695b      	ldr	r3, [r3, #20]
 8000b16:	b29b      	uxth	r3, r3
 8000b18:	6033      	str	r3, [r6, #0]
  heth->State = HAL_ETH_STATE_READY;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
  return HAL_OK;
 8000b20:	2000      	movs	r0, #0
 8000b22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000b24 <HAL_ETH_WritePHYRegister>:
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8000b24:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8000b28:	b2db      	uxtb	r3, r3
 8000b2a:	2b42      	cmp	r3, #66	; 0x42
 8000b2c:	d101      	bne.n	8000b32 <HAL_ETH_WritePHYRegister+0xe>
    return HAL_BUSY;
 8000b2e:	2002      	movs	r0, #2
 8000b30:	4770      	bx	lr
{
 8000b32:	b570      	push	{r4, r5, r6, lr}
 8000b34:	4605      	mov	r5, r0
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8000b36:	2342      	movs	r3, #66	; 0x42
 8000b38:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg1 = heth->Instance->MACMIIAR;
 8000b3c:	6800      	ldr	r0, [r0, #0]
 8000b3e:	6904      	ldr	r4, [r0, #16]
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8000b40:	f004 041c 	and.w	r4, r4, #28
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8000b44:	8a2b      	ldrh	r3, [r5, #16]
 8000b46:	02db      	lsls	r3, r3, #11
 8000b48:	b29b      	uxth	r3, r3
 8000b4a:	431c      	orrs	r4, r3
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8000b4c:	0189      	lsls	r1, r1, #6
 8000b4e:	f401 61f8 	and.w	r1, r1, #1984	; 0x7c0
 8000b52:	430c      	orrs	r4, r1
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8000b54:	f044 0403 	orr.w	r4, r4, #3
 8000b58:	b292      	uxth	r2, r2
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8000b5a:	6142      	str	r2, [r0, #20]
  heth->Instance->MACMIIAR = tmpreg1;
 8000b5c:	682b      	ldr	r3, [r5, #0]
 8000b5e:	611c      	str	r4, [r3, #16]
  tickstart = HAL_GetTick();
 8000b60:	f7ff fcfc 	bl	800055c <HAL_GetTick>
 8000b64:	4606      	mov	r6, r0
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8000b66:	f014 0f01 	tst.w	r4, #1
 8000b6a:	d010      	beq.n	8000b8e <HAL_ETH_WritePHYRegister+0x6a>
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8000b6c:	f7ff fcf6 	bl	800055c <HAL_GetTick>
 8000b70:	1b80      	subs	r0, r0, r6
 8000b72:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8000b76:	d202      	bcs.n	8000b7e <HAL_ETH_WritePHYRegister+0x5a>
    tmpreg1 = heth->Instance->MACMIIAR;
 8000b78:	682b      	ldr	r3, [r5, #0]
 8000b7a:	691c      	ldr	r4, [r3, #16]
 8000b7c:	e7f3      	b.n	8000b66 <HAL_ETH_WritePHYRegister+0x42>
      heth->State= HAL_ETH_STATE_READY;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8000b84:	2300      	movs	r3, #0
 8000b86:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
      return HAL_TIMEOUT;
 8000b8a:	2003      	movs	r0, #3
 8000b8c:	bd70      	pop	{r4, r5, r6, pc}
  heth->State = HAL_ETH_STATE_READY;
 8000b8e:	2301      	movs	r3, #1
 8000b90:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
  return HAL_OK; 
 8000b94:	2000      	movs	r0, #0
 8000b96:	bd70      	pop	{r4, r5, r6, pc}

08000b98 <HAL_ETH_Init>:
{
 8000b98:	b570      	push	{r4, r5, r6, lr}
 8000b9a:	b082      	sub	sp, #8
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	9301      	str	r3, [sp, #4]
  if(heth == NULL)
 8000ba0:	2800      	cmp	r0, #0
 8000ba2:	f000 810e 	beq.w	8000dc2 <HAL_ETH_Init+0x22a>
 8000ba6:	4604      	mov	r4, r0
  if(heth->State == HAL_ETH_STATE_RESET)
 8000ba8:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d034      	beq.n	8000c1a <HAL_ETH_Init+0x82>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	9300      	str	r3, [sp, #0]
 8000bb4:	4b84      	ldr	r3, [pc, #528]	; (8000dc8 <HAL_ETH_Init+0x230>)
 8000bb6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000bb8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000bbc:	645a      	str	r2, [r3, #68]	; 0x44
 8000bbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bc0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bc4:	9300      	str	r3, [sp, #0]
 8000bc6:	9b00      	ldr	r3, [sp, #0]
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8000bc8:	4b80      	ldr	r3, [pc, #512]	; (8000dcc <HAL_ETH_Init+0x234>)
 8000bca:	685a      	ldr	r2, [r3, #4]
 8000bcc:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8000bd0:	605a      	str	r2, [r3, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8000bd2:	685a      	ldr	r2, [r3, #4]
 8000bd4:	6a21      	ldr	r1, [r4, #32]
 8000bd6:	430a      	orrs	r2, r1
 8000bd8:	605a      	str	r2, [r3, #4]
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8000bda:	6823      	ldr	r3, [r4, #0]
 8000bdc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000be0:	681a      	ldr	r2, [r3, #0]
 8000be2:	f042 0201 	orr.w	r2, r2, #1
 8000be6:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8000be8:	f7ff fcb8 	bl	800055c <HAL_GetTick>
 8000bec:	4605      	mov	r5, r0
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8000bee:	6823      	ldr	r3, [r4, #0]
 8000bf0:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8000bf4:	6812      	ldr	r2, [r2, #0]
 8000bf6:	f012 0f01 	tst.w	r2, #1
 8000bfa:	d013      	beq.n	8000c24 <HAL_ETH_Init+0x8c>
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8000bfc:	f7ff fcae 	bl	800055c <HAL_GetTick>
 8000c00:	1b40      	subs	r0, r0, r5
 8000c02:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8000c06:	d9f2      	bls.n	8000bee <HAL_ETH_Init+0x56>
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8000c08:	2503      	movs	r5, #3
 8000c0a:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8000c0e:	2300      	movs	r3, #0
 8000c10:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 8000c14:	4628      	mov	r0, r5
 8000c16:	b002      	add	sp, #8
 8000c18:	bd70      	pop	{r4, r5, r6, pc}
    heth->Lock = HAL_UNLOCKED;
 8000c1a:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
    HAL_ETH_MspInit(heth);
 8000c1e:	f003 f843 	bl	8003ca8 <HAL_ETH_MspInit>
 8000c22:	e7c5      	b.n	8000bb0 <HAL_ETH_Init+0x18>
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8000c24:	691d      	ldr	r5, [r3, #16]
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8000c26:	f025 051c 	bic.w	r5, r5, #28
  hclk = HAL_RCC_GetHCLKFreq();
 8000c2a:	f001 fa97 	bl	800215c <HAL_RCC_GetHCLKFreq>
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8000c2e:	4b68      	ldr	r3, [pc, #416]	; (8000dd0 <HAL_ETH_Init+0x238>)
 8000c30:	4403      	add	r3, r0
 8000c32:	4a68      	ldr	r2, [pc, #416]	; (8000dd4 <HAL_ETH_Init+0x23c>)
 8000c34:	4293      	cmp	r3, r2
 8000c36:	d855      	bhi.n	8000ce4 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8000c38:	f045 0508 	orr.w	r5, r5, #8
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8000c3c:	6823      	ldr	r3, [r4, #0]
 8000c3e:	611d      	str	r5, [r3, #16]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8000c40:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000c44:	2100      	movs	r1, #0
 8000c46:	4620      	mov	r0, r4
 8000c48:	f7ff ff6c 	bl	8000b24 <HAL_ETH_WritePHYRegister>
 8000c4c:	4605      	mov	r5, r0
 8000c4e:	2800      	cmp	r0, #0
 8000c50:	d160      	bne.n	8000d14 <HAL_ETH_Init+0x17c>
  HAL_Delay(PHY_RESET_DELAY);
 8000c52:	20ff      	movs	r0, #255	; 0xff
 8000c54:	f7ff fc88 	bl	8000568 <HAL_Delay>
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8000c58:	6863      	ldr	r3, [r4, #4]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	f000 8091 	beq.w	8000d82 <HAL_ETH_Init+0x1ea>
    tickstart = HAL_GetTick();
 8000c60:	f7ff fc7c 	bl	800055c <HAL_GetTick>
 8000c64:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000c66:	aa01      	add	r2, sp, #4
 8000c68:	2101      	movs	r1, #1
 8000c6a:	4620      	mov	r0, r4
 8000c6c:	f7ff ff1e 	bl	8000aac <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8000c70:	f7ff fc74 	bl	800055c <HAL_GetTick>
 8000c74:	1b80      	subs	r0, r0, r6
 8000c76:	f241 3388 	movw	r3, #5000	; 0x1388
 8000c7a:	4298      	cmp	r0, r3
 8000c7c:	d852      	bhi.n	8000d24 <HAL_ETH_Init+0x18c>
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8000c7e:	9b01      	ldr	r3, [sp, #4]
 8000c80:	f013 0f04 	tst.w	r3, #4
 8000c84:	d0ef      	beq.n	8000c66 <HAL_ETH_Init+0xce>
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8000c86:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	4620      	mov	r0, r4
 8000c8e:	f7ff ff49 	bl	8000b24 <HAL_ETH_WritePHYRegister>
 8000c92:	2800      	cmp	r0, #0
 8000c94:	d152      	bne.n	8000d3c <HAL_ETH_Init+0x1a4>
    tickstart = HAL_GetTick();
 8000c96:	f7ff fc61 	bl	800055c <HAL_GetTick>
 8000c9a:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000c9c:	aa01      	add	r2, sp, #4
 8000c9e:	2101      	movs	r1, #1
 8000ca0:	4620      	mov	r0, r4
 8000ca2:	f7ff ff03 	bl	8000aac <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8000ca6:	f7ff fc59 	bl	800055c <HAL_GetTick>
 8000caa:	1b80      	subs	r0, r0, r6
 8000cac:	f241 3388 	movw	r3, #5000	; 0x1388
 8000cb0:	4298      	cmp	r0, r3
 8000cb2:	d84b      	bhi.n	8000d4c <HAL_ETH_Init+0x1b4>
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8000cb4:	9b01      	ldr	r3, [sp, #4]
 8000cb6:	f013 0f20 	tst.w	r3, #32
 8000cba:	d0ef      	beq.n	8000c9c <HAL_ETH_Init+0x104>
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8000cbc:	aa01      	add	r2, sp, #4
 8000cbe:	211f      	movs	r1, #31
 8000cc0:	4620      	mov	r0, r4
 8000cc2:	f7ff fef3 	bl	8000aac <HAL_ETH_ReadPHYRegister>
 8000cc6:	2800      	cmp	r0, #0
 8000cc8:	d14c      	bne.n	8000d64 <HAL_ETH_Init+0x1cc>
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8000cca:	9b01      	ldr	r3, [sp, #4]
 8000ccc:	f013 0f10 	tst.w	r3, #16
 8000cd0:	d050      	beq.n	8000d74 <HAL_ETH_Init+0x1dc>
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8000cd2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000cd6:	60e2      	str	r2, [r4, #12]
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8000cd8:	f013 0f04 	tst.w	r3, #4
 8000cdc:	d04d      	beq.n	8000d7a <HAL_ETH_Init+0x1e2>
      (heth->Init).Speed = ETH_SPEED_10M; 
 8000cde:	2300      	movs	r3, #0
 8000ce0:	60a3      	str	r3, [r4, #8]
 8000ce2:	e05e      	b.n	8000da2 <HAL_ETH_Init+0x20a>
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8000ce4:	4b3c      	ldr	r3, [pc, #240]	; (8000dd8 <HAL_ETH_Init+0x240>)
 8000ce6:	4403      	add	r3, r0
 8000ce8:	4a3c      	ldr	r2, [pc, #240]	; (8000ddc <HAL_ETH_Init+0x244>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d802      	bhi.n	8000cf4 <HAL_ETH_Init+0x15c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8000cee:	f045 050c 	orr.w	r5, r5, #12
 8000cf2:	e7a3      	b.n	8000c3c <HAL_ETH_Init+0xa4>
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8000cf4:	4b3a      	ldr	r3, [pc, #232]	; (8000de0 <HAL_ETH_Init+0x248>)
 8000cf6:	4403      	add	r3, r0
 8000cf8:	4a3a      	ldr	r2, [pc, #232]	; (8000de4 <HAL_ETH_Init+0x24c>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d99e      	bls.n	8000c3c <HAL_ETH_Init+0xa4>
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8000cfe:	4b3a      	ldr	r3, [pc, #232]	; (8000de8 <HAL_ETH_Init+0x250>)
 8000d00:	4403      	add	r3, r0
 8000d02:	4a3a      	ldr	r2, [pc, #232]	; (8000dec <HAL_ETH_Init+0x254>)
 8000d04:	4293      	cmp	r3, r2
 8000d06:	d802      	bhi.n	8000d0e <HAL_ETH_Init+0x176>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8000d08:	f045 0504 	orr.w	r5, r5, #4
 8000d0c:	e796      	b.n	8000c3c <HAL_ETH_Init+0xa4>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8000d0e:	f045 0510 	orr.w	r5, r5, #16
 8000d12:	e793      	b.n	8000c3c <HAL_ETH_Init+0xa4>
    ETH_MACDMAConfig(heth, err);
 8000d14:	2101      	movs	r1, #1
 8000d16:	4620      	mov	r0, r4
 8000d18:	f7ff fe3c 	bl	8000994 <ETH_MACDMAConfig>
    heth->State = HAL_ETH_STATE_READY;
 8000d1c:	2501      	movs	r5, #1
 8000d1e:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
    return HAL_ERROR;
 8000d22:	e777      	b.n	8000c14 <HAL_ETH_Init+0x7c>
        ETH_MACDMAConfig(heth, err);
 8000d24:	2101      	movs	r1, #1
 8000d26:	4620      	mov	r0, r4
 8000d28:	f7ff fe34 	bl	8000994 <ETH_MACDMAConfig>
        heth->State= HAL_ETH_STATE_READY;
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(heth);
 8000d32:	2300      	movs	r3, #0
 8000d34:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
        return HAL_TIMEOUT;
 8000d38:	2503      	movs	r5, #3
 8000d3a:	e76b      	b.n	8000c14 <HAL_ETH_Init+0x7c>
      ETH_MACDMAConfig(heth, err);
 8000d3c:	2101      	movs	r1, #1
 8000d3e:	4620      	mov	r0, r4
 8000d40:	f7ff fe28 	bl	8000994 <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 8000d44:	2501      	movs	r5, #1
 8000d46:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      return HAL_ERROR;   
 8000d4a:	e763      	b.n	8000c14 <HAL_ETH_Init+0x7c>
        ETH_MACDMAConfig(heth, err);
 8000d4c:	2101      	movs	r1, #1
 8000d4e:	4620      	mov	r0, r4
 8000d50:	f7ff fe20 	bl	8000994 <ETH_MACDMAConfig>
        heth->State= HAL_ETH_STATE_READY;
 8000d54:	2301      	movs	r3, #1
 8000d56:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(heth);
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
        return HAL_TIMEOUT;
 8000d60:	2503      	movs	r5, #3
 8000d62:	e757      	b.n	8000c14 <HAL_ETH_Init+0x7c>
      ETH_MACDMAConfig(heth, err);
 8000d64:	2101      	movs	r1, #1
 8000d66:	4620      	mov	r0, r4
 8000d68:	f7ff fe14 	bl	8000994 <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 8000d6c:	2501      	movs	r5, #1
 8000d6e:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      return HAL_ERROR;   
 8000d72:	e74f      	b.n	8000c14 <HAL_ETH_Init+0x7c>
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8000d74:	2200      	movs	r2, #0
 8000d76:	60e2      	str	r2, [r4, #12]
 8000d78:	e7ae      	b.n	8000cd8 <HAL_ETH_Init+0x140>
      (heth->Init).Speed = ETH_SPEED_100M;
 8000d7a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000d7e:	60a3      	str	r3, [r4, #8]
 8000d80:	e00f      	b.n	8000da2 <HAL_ETH_Init+0x20a>
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8000d82:	68e3      	ldr	r3, [r4, #12]
 8000d84:	f3c3 02cf 	ubfx	r2, r3, #3, #16
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8000d88:	68a3      	ldr	r3, [r4, #8]
 8000d8a:	f3c3 034f 	ubfx	r3, r3, #1, #16
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8000d8e:	431a      	orrs	r2, r3
 8000d90:	2100      	movs	r1, #0
 8000d92:	4620      	mov	r0, r4
 8000d94:	f7ff fec6 	bl	8000b24 <HAL_ETH_WritePHYRegister>
 8000d98:	b958      	cbnz	r0, 8000db2 <HAL_ETH_Init+0x21a>
    HAL_Delay(PHY_CONFIG_DELAY);
 8000d9a:	f640 70ff 	movw	r0, #4095	; 0xfff
 8000d9e:	f7ff fbe3 	bl	8000568 <HAL_Delay>
  ETH_MACDMAConfig(heth, err);
 8000da2:	2100      	movs	r1, #0
 8000da4:	4620      	mov	r0, r4
 8000da6:	f7ff fdf5 	bl	8000994 <ETH_MACDMAConfig>
  heth->State= HAL_ETH_STATE_READY;
 8000daa:	2301      	movs	r3, #1
 8000dac:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  return HAL_OK;
 8000db0:	e730      	b.n	8000c14 <HAL_ETH_Init+0x7c>
      ETH_MACDMAConfig(heth, err);
 8000db2:	2101      	movs	r1, #1
 8000db4:	4620      	mov	r0, r4
 8000db6:	f7ff fded 	bl	8000994 <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 8000dba:	2501      	movs	r5, #1
 8000dbc:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      return HAL_ERROR;
 8000dc0:	e728      	b.n	8000c14 <HAL_ETH_Init+0x7c>
    return HAL_ERROR;
 8000dc2:	2501      	movs	r5, #1
 8000dc4:	e726      	b.n	8000c14 <HAL_ETH_Init+0x7c>
 8000dc6:	bf00      	nop
 8000dc8:	40023800 	.word	0x40023800
 8000dcc:	40013800 	.word	0x40013800
 8000dd0:	feced300 	.word	0xfeced300
 8000dd4:	00e4e1bf 	.word	0x00e4e1bf
 8000dd8:	fde9f140 	.word	0xfde9f140
 8000ddc:	017d783f 	.word	0x017d783f
 8000de0:	fc6c7900 	.word	0xfc6c7900
 8000de4:	026259ff 	.word	0x026259ff
 8000de8:	fa0a1f00 	.word	0xfa0a1f00
 8000dec:	02faf07f 	.word	0x02faf07f

08000df0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000df0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000df2:	b083      	sub	sp, #12
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000df4:	2400      	movs	r4, #0
 8000df6:	e04b      	b.n	8000e90 <HAL_GPIO_Init+0xa0>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000df8:	ea4f 0ed4 	mov.w	lr, r4, lsr #3
 8000dfc:	f10e 0e08 	add.w	lr, lr, #8
 8000e00:	f850 202e 	ldr.w	r2, [r0, lr, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e04:	f004 0607 	and.w	r6, r4, #7
 8000e08:	00b6      	lsls	r6, r6, #2
 8000e0a:	270f      	movs	r7, #15
 8000e0c:	40b7      	lsls	r7, r6
 8000e0e:	ea22 0207 	bic.w	r2, r2, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e12:	690f      	ldr	r7, [r1, #16]
 8000e14:	fa07 f606 	lsl.w	r6, r7, r6
 8000e18:	4332      	orrs	r2, r6
        GPIOx->AFR[position >> 3U] = temp;
 8000e1a:	f840 202e 	str.w	r2, [r0, lr, lsl #2]
 8000e1e:	e046      	b.n	8000eae <HAL_GPIO_Init+0xbe>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e20:	2609      	movs	r6, #9
 8000e22:	e000      	b.n	8000e26 <HAL_GPIO_Init+0x36>
 8000e24:	2600      	movs	r6, #0
 8000e26:	fa06 f60e 	lsl.w	r6, r6, lr
 8000e2a:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e2c:	3302      	adds	r3, #2
 8000e2e:	4e64      	ldr	r6, [pc, #400]	; (8000fc0 <HAL_GPIO_Init+0x1d0>)
 8000e30:	f846 2023 	str.w	r2, [r6, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e34:	4b63      	ldr	r3, [pc, #396]	; (8000fc4 <HAL_GPIO_Init+0x1d4>)
 8000e36:	681a      	ldr	r2, [r3, #0]
        temp &= ~((uint32_t)iocurrent);
 8000e38:	43eb      	mvns	r3, r5
 8000e3a:	ea02 0603 	and.w	r6, r2, r3
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e3e:	684f      	ldr	r7, [r1, #4]
 8000e40:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8000e44:	d001      	beq.n	8000e4a <HAL_GPIO_Init+0x5a>
        {
          temp |= iocurrent;
 8000e46:	ea45 0602 	orr.w	r6, r5, r2
        }
        EXTI->IMR = temp;
 8000e4a:	4a5e      	ldr	r2, [pc, #376]	; (8000fc4 <HAL_GPIO_Init+0x1d4>)
 8000e4c:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 8000e4e:	6852      	ldr	r2, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8000e50:	ea03 0602 	and.w	r6, r3, r2
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e54:	684f      	ldr	r7, [r1, #4]
 8000e56:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8000e5a:	d001      	beq.n	8000e60 <HAL_GPIO_Init+0x70>
        {
          temp |= iocurrent;
 8000e5c:	ea45 0602 	orr.w	r6, r5, r2
        }
        EXTI->EMR = temp;
 8000e60:	4a58      	ldr	r2, [pc, #352]	; (8000fc4 <HAL_GPIO_Init+0x1d4>)
 8000e62:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e64:	6892      	ldr	r2, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8000e66:	ea03 0602 	and.w	r6, r3, r2
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e6a:	684f      	ldr	r7, [r1, #4]
 8000e6c:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8000e70:	d001      	beq.n	8000e76 <HAL_GPIO_Init+0x86>
        {
          temp |= iocurrent;
 8000e72:	ea45 0602 	orr.w	r6, r5, r2
        }
        EXTI->RTSR = temp;
 8000e76:	4a53      	ldr	r2, [pc, #332]	; (8000fc4 <HAL_GPIO_Init+0x1d4>)
 8000e78:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 8000e7a:	68d2      	ldr	r2, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 8000e7c:	4013      	ands	r3, r2
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e7e:	684e      	ldr	r6, [r1, #4]
 8000e80:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8000e84:	d001      	beq.n	8000e8a <HAL_GPIO_Init+0x9a>
        {
          temp |= iocurrent;
 8000e86:	ea45 0302 	orr.w	r3, r5, r2
        }
        EXTI->FTSR = temp;
 8000e8a:	4a4e      	ldr	r2, [pc, #312]	; (8000fc4 <HAL_GPIO_Init+0x1d4>)
 8000e8c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e8e:	3401      	adds	r4, #1
 8000e90:	2c0f      	cmp	r4, #15
 8000e92:	f200 8092 	bhi.w	8000fba <HAL_GPIO_Init+0x1ca>
    ioposition = 0x01U << position;
 8000e96:	2301      	movs	r3, #1
 8000e98:	40a3      	lsls	r3, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e9a:	680a      	ldr	r2, [r1, #0]
 8000e9c:	ea03 0502 	and.w	r5, r3, r2
    if(iocurrent == ioposition)
 8000ea0:	42ab      	cmp	r3, r5
 8000ea2:	d1f4      	bne.n	8000e8e <HAL_GPIO_Init+0x9e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ea4:	684a      	ldr	r2, [r1, #4]
 8000ea6:	2a02      	cmp	r2, #2
 8000ea8:	d0a6      	beq.n	8000df8 <HAL_GPIO_Init+0x8>
 8000eaa:	2a12      	cmp	r2, #18
 8000eac:	d0a4      	beq.n	8000df8 <HAL_GPIO_Init+0x8>
      temp = GPIOx->MODER;
 8000eae:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000eb0:	ea4f 0e44 	mov.w	lr, r4, lsl #1
 8000eb4:	2203      	movs	r2, #3
 8000eb6:	fa02 f20e 	lsl.w	r2, r2, lr
 8000eba:	43d2      	mvns	r2, r2
 8000ebc:	4016      	ands	r6, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ebe:	684f      	ldr	r7, [r1, #4]
 8000ec0:	f007 0703 	and.w	r7, r7, #3
 8000ec4:	fa07 f70e 	lsl.w	r7, r7, lr
 8000ec8:	433e      	orrs	r6, r7
      GPIOx->MODER = temp;
 8000eca:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ecc:	684e      	ldr	r6, [r1, #4]
 8000ece:	1e77      	subs	r7, r6, #1
 8000ed0:	2f01      	cmp	r7, #1
 8000ed2:	d903      	bls.n	8000edc <HAL_GPIO_Init+0xec>
 8000ed4:	2e11      	cmp	r6, #17
 8000ed6:	d001      	beq.n	8000edc <HAL_GPIO_Init+0xec>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ed8:	2e12      	cmp	r6, #18
 8000eda:	d10f      	bne.n	8000efc <HAL_GPIO_Init+0x10c>
        temp = GPIOx->OSPEEDR; 
 8000edc:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ede:	4016      	ands	r6, r2
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ee0:	68cf      	ldr	r7, [r1, #12]
 8000ee2:	fa07 f70e 	lsl.w	r7, r7, lr
 8000ee6:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 8000ee8:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8000eea:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000eec:	ea26 0303 	bic.w	r3, r6, r3
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000ef0:	684e      	ldr	r6, [r1, #4]
 8000ef2:	f3c6 1600 	ubfx	r6, r6, #4, #1
 8000ef6:	40a6      	lsls	r6, r4
 8000ef8:	4333      	orrs	r3, r6
        GPIOx->OTYPER = temp;
 8000efa:	6043      	str	r3, [r0, #4]
      temp = GPIOx->PUPDR;
 8000efc:	68c3      	ldr	r3, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000efe:	401a      	ands	r2, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f00:	688b      	ldr	r3, [r1, #8]
 8000f02:	fa03 f30e 	lsl.w	r3, r3, lr
 8000f06:	431a      	orrs	r2, r3
      GPIOx->PUPDR = temp;
 8000f08:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f0a:	684b      	ldr	r3, [r1, #4]
 8000f0c:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8000f10:	d0bd      	beq.n	8000e8e <HAL_GPIO_Init+0x9e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f12:	2300      	movs	r3, #0
 8000f14:	9301      	str	r3, [sp, #4]
 8000f16:	4b2c      	ldr	r3, [pc, #176]	; (8000fc8 <HAL_GPIO_Init+0x1d8>)
 8000f18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000f1a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000f1e:	645a      	str	r2, [r3, #68]	; 0x44
 8000f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f26:	9301      	str	r3, [sp, #4]
 8000f28:	9b01      	ldr	r3, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8000f2a:	08a3      	lsrs	r3, r4, #2
 8000f2c:	1c9e      	adds	r6, r3, #2
 8000f2e:	4a24      	ldr	r2, [pc, #144]	; (8000fc0 <HAL_GPIO_Init+0x1d0>)
 8000f30:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f34:	f004 0603 	and.w	r6, r4, #3
 8000f38:	ea4f 0e86 	mov.w	lr, r6, lsl #2
 8000f3c:	260f      	movs	r6, #15
 8000f3e:	fa06 f60e 	lsl.w	r6, r6, lr
 8000f42:	ea22 0206 	bic.w	r2, r2, r6
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f46:	4f21      	ldr	r7, [pc, #132]	; (8000fcc <HAL_GPIO_Init+0x1dc>)
 8000f48:	42b8      	cmp	r0, r7
 8000f4a:	f43f af6b 	beq.w	8000e24 <HAL_GPIO_Init+0x34>
 8000f4e:	4e20      	ldr	r6, [pc, #128]	; (8000fd0 <HAL_GPIO_Init+0x1e0>)
 8000f50:	42b0      	cmp	r0, r6
 8000f52:	d022      	beq.n	8000f9a <HAL_GPIO_Init+0x1aa>
 8000f54:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000f58:	42b0      	cmp	r0, r6
 8000f5a:	d020      	beq.n	8000f9e <HAL_GPIO_Init+0x1ae>
 8000f5c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000f60:	42b0      	cmp	r0, r6
 8000f62:	d01e      	beq.n	8000fa2 <HAL_GPIO_Init+0x1b2>
 8000f64:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000f68:	42b0      	cmp	r0, r6
 8000f6a:	d01c      	beq.n	8000fa6 <HAL_GPIO_Init+0x1b6>
 8000f6c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000f70:	42b0      	cmp	r0, r6
 8000f72:	d01a      	beq.n	8000faa <HAL_GPIO_Init+0x1ba>
 8000f74:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000f78:	42b0      	cmp	r0, r6
 8000f7a:	d018      	beq.n	8000fae <HAL_GPIO_Init+0x1be>
 8000f7c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000f80:	42b0      	cmp	r0, r6
 8000f82:	d016      	beq.n	8000fb2 <HAL_GPIO_Init+0x1c2>
 8000f84:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000f88:	42b0      	cmp	r0, r6
 8000f8a:	d014      	beq.n	8000fb6 <HAL_GPIO_Init+0x1c6>
 8000f8c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000f90:	42b0      	cmp	r0, r6
 8000f92:	f43f af45 	beq.w	8000e20 <HAL_GPIO_Init+0x30>
 8000f96:	260a      	movs	r6, #10
 8000f98:	e745      	b.n	8000e26 <HAL_GPIO_Init+0x36>
 8000f9a:	2601      	movs	r6, #1
 8000f9c:	e743      	b.n	8000e26 <HAL_GPIO_Init+0x36>
 8000f9e:	2602      	movs	r6, #2
 8000fa0:	e741      	b.n	8000e26 <HAL_GPIO_Init+0x36>
 8000fa2:	2603      	movs	r6, #3
 8000fa4:	e73f      	b.n	8000e26 <HAL_GPIO_Init+0x36>
 8000fa6:	2604      	movs	r6, #4
 8000fa8:	e73d      	b.n	8000e26 <HAL_GPIO_Init+0x36>
 8000faa:	2605      	movs	r6, #5
 8000fac:	e73b      	b.n	8000e26 <HAL_GPIO_Init+0x36>
 8000fae:	2606      	movs	r6, #6
 8000fb0:	e739      	b.n	8000e26 <HAL_GPIO_Init+0x36>
 8000fb2:	2607      	movs	r6, #7
 8000fb4:	e737      	b.n	8000e26 <HAL_GPIO_Init+0x36>
 8000fb6:	2608      	movs	r6, #8
 8000fb8:	e735      	b.n	8000e26 <HAL_GPIO_Init+0x36>
      }
    }
  }
}
 8000fba:	b003      	add	sp, #12
 8000fbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	40013800 	.word	0x40013800
 8000fc4:	40013c00 	.word	0x40013c00
 8000fc8:	40023800 	.word	0x40023800
 8000fcc:	40020000 	.word	0x40020000
 8000fd0:	40020400 	.word	0x40020400

08000fd4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fd4:	b912      	cbnz	r2, 8000fdc <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000fd6:	0409      	lsls	r1, r1, #16
 8000fd8:	6181      	str	r1, [r0, #24]
 8000fda:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 8000fdc:	6181      	str	r1, [r0, #24]
 8000fde:	4770      	bx	lr

08000fe0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000fe0:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000fe2:	4b05      	ldr	r3, [pc, #20]	; (8000ff8 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8000fe4:	695b      	ldr	r3, [r3, #20]
 8000fe6:	4203      	tst	r3, r0
 8000fe8:	d100      	bne.n	8000fec <HAL_GPIO_EXTI_IRQHandler+0xc>
 8000fea:	bd08      	pop	{r3, pc}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000fec:	4b02      	ldr	r3, [pc, #8]	; (8000ff8 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8000fee:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000ff0:	f003 f9c6 	bl	8004380 <HAL_GPIO_EXTI_Callback>
  }
}
 8000ff4:	e7f9      	b.n	8000fea <HAL_GPIO_EXTI_IRQHandler+0xa>
 8000ff6:	bf00      	nop
 8000ff8:	40013c00 	.word	0x40013c00

08000ffc <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000ffc:	6803      	ldr	r3, [r0, #0]
 8000ffe:	695a      	ldr	r2, [r3, #20]
 8001000:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8001004:	d011      	beq.n	800102a <I2C_IsAcknowledgeFailed+0x2e>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001006:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800100a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800100c:	2300      	movs	r3, #0
 800100e:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001010:	2220      	movs	r2, #32
 8001012:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001016:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800101a:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800101c:	f042 0204 	orr.w	r2, r2, #4
 8001020:	6402      	str	r2, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001022:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

    return HAL_ERROR;
 8001026:	2001      	movs	r0, #1
 8001028:	4770      	bx	lr
  }
  return HAL_OK;
 800102a:	2000      	movs	r0, #0
}
 800102c:	4770      	bx	lr

0800102e <I2C_WaitOnFlagUntilTimeout>:
{
 800102e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001030:	4606      	mov	r6, r0
 8001032:	460c      	mov	r4, r1
 8001034:	4617      	mov	r7, r2
 8001036:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001038:	e022      	b.n	8001080 <I2C_WaitOnFlagUntilTimeout+0x52>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800103a:	f7ff fa8f 	bl	800055c <HAL_GetTick>
 800103e:	9b06      	ldr	r3, [sp, #24]
 8001040:	1ac0      	subs	r0, r0, r3
 8001042:	4285      	cmp	r5, r0
 8001044:	d300      	bcc.n	8001048 <I2C_WaitOnFlagUntilTimeout+0x1a>
 8001046:	b9dd      	cbnz	r5, 8001080 <I2C_WaitOnFlagUntilTimeout+0x52>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001048:	2300      	movs	r3, #0
 800104a:	6333      	str	r3, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800104c:	2220      	movs	r2, #32
 800104e:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001052:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001056:	6c32      	ldr	r2, [r6, #64]	; 0x40
 8001058:	f042 0220 	orr.w	r2, r2, #32
 800105c:	6432      	str	r2, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800105e:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
        return HAL_ERROR;
 8001062:	2001      	movs	r0, #1
 8001064:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001066:	6833      	ldr	r3, [r6, #0]
 8001068:	695b      	ldr	r3, [r3, #20]
 800106a:	ea24 0303 	bic.w	r3, r4, r3
 800106e:	b29b      	uxth	r3, r3
 8001070:	fab3 f383 	clz	r3, r3
 8001074:	095b      	lsrs	r3, r3, #5
 8001076:	42bb      	cmp	r3, r7
 8001078:	d10f      	bne.n	800109a <I2C_WaitOnFlagUntilTimeout+0x6c>
    if (Timeout != HAL_MAX_DELAY)
 800107a:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 800107e:	d1dc      	bne.n	800103a <I2C_WaitOnFlagUntilTimeout+0xc>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001080:	f3c4 4307 	ubfx	r3, r4, #16, #8
 8001084:	2b01      	cmp	r3, #1
 8001086:	d0ee      	beq.n	8001066 <I2C_WaitOnFlagUntilTimeout+0x38>
 8001088:	6833      	ldr	r3, [r6, #0]
 800108a:	699b      	ldr	r3, [r3, #24]
 800108c:	ea24 0303 	bic.w	r3, r4, r3
 8001090:	b29b      	uxth	r3, r3
 8001092:	fab3 f383 	clz	r3, r3
 8001096:	095b      	lsrs	r3, r3, #5
 8001098:	e7ed      	b.n	8001076 <I2C_WaitOnFlagUntilTimeout+0x48>
  return HAL_OK;
 800109a:	2000      	movs	r0, #0
}
 800109c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800109e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 800109e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010a0:	4604      	mov	r4, r0
 80010a2:	460d      	mov	r5, r1
 80010a4:	4616      	mov	r6, r2
 80010a6:	461f      	mov	r7, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80010a8:	e03c      	b.n	8001124 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80010b0:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80010b2:	6823      	ldr	r3, [r4, #0]
 80010b4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80010b8:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 80010ba:	2300      	movs	r3, #0
 80010bc:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80010be:	2220      	movs	r2, #32
 80010c0:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80010c4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80010c8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80010ca:	f042 0204 	orr.w	r2, r2, #4
 80010ce:	6422      	str	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80010d0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      return HAL_ERROR;
 80010d4:	2001      	movs	r0, #1
 80010d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80010d8:	f7ff fa40 	bl	800055c <HAL_GetTick>
 80010dc:	1bc0      	subs	r0, r0, r7
 80010de:	4286      	cmp	r6, r0
 80010e0:	d300      	bcc.n	80010e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x46>
 80010e2:	b9fe      	cbnz	r6, 8001124 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
        hi2c->PreviousState       = I2C_STATE_NONE;
 80010e4:	2300      	movs	r3, #0
 80010e6:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80010e8:	2220      	movs	r2, #32
 80010ea:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80010ee:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80010f2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80010f4:	f042 0220 	orr.w	r2, r2, #32
 80010f8:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80010fa:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 80010fe:	2001      	movs	r0, #1
 8001100:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001102:	6823      	ldr	r3, [r4, #0]
 8001104:	695b      	ldr	r3, [r3, #20]
 8001106:	ea25 0303 	bic.w	r3, r5, r3
 800110a:	b29b      	uxth	r3, r3
 800110c:	3300      	adds	r3, #0
 800110e:	bf18      	it	ne
 8001110:	2301      	movne	r3, #1
 8001112:	b1a3      	cbz	r3, 800113e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa0>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001114:	6823      	ldr	r3, [r4, #0]
 8001116:	695a      	ldr	r2, [r3, #20]
 8001118:	f412 6f80 	tst.w	r2, #1024	; 0x400
 800111c:	d1c5      	bne.n	80010aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
    if (Timeout != HAL_MAX_DELAY)
 800111e:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
 8001122:	d1d9      	bne.n	80010d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001124:	f3c5 4307 	ubfx	r3, r5, #16, #8
 8001128:	2b01      	cmp	r3, #1
 800112a:	d0ea      	beq.n	8001102 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x64>
 800112c:	6823      	ldr	r3, [r4, #0]
 800112e:	699b      	ldr	r3, [r3, #24]
 8001130:	ea25 0303 	bic.w	r3, r5, r3
 8001134:	b29b      	uxth	r3, r3
 8001136:	3300      	adds	r3, #0
 8001138:	bf18      	it	ne
 800113a:	2301      	movne	r3, #1
 800113c:	e7e9      	b.n	8001112 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x74>
  return HAL_OK;
 800113e:	2000      	movs	r0, #0
}
 8001140:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001144 <I2C_MasterRequestWrite>:
{
 8001144:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001146:	b083      	sub	sp, #12
 8001148:	4604      	mov	r4, r0
 800114a:	460f      	mov	r7, r1
 800114c:	4615      	mov	r5, r2
 800114e:	461e      	mov	r6, r3
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001150:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001152:	2b08      	cmp	r3, #8
 8001154:	d00d      	beq.n	8001172 <I2C_MasterRequestWrite+0x2e>
 8001156:	2b01      	cmp	r3, #1
 8001158:	d00b      	beq.n	8001172 <I2C_MasterRequestWrite+0x2e>
 800115a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800115e:	d008      	beq.n	8001172 <I2C_MasterRequestWrite+0x2e>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001160:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001162:	2b12      	cmp	r3, #18
 8001164:	d10a      	bne.n	800117c <I2C_MasterRequestWrite+0x38>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001166:	6802      	ldr	r2, [r0, #0]
 8001168:	6813      	ldr	r3, [r2, #0]
 800116a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800116e:	6013      	str	r3, [r2, #0]
 8001170:	e004      	b.n	800117c <I2C_MasterRequestWrite+0x38>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001172:	6822      	ldr	r2, [r4, #0]
 8001174:	6813      	ldr	r3, [r2, #0]
 8001176:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800117a:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800117c:	9600      	str	r6, [sp, #0]
 800117e:	462b      	mov	r3, r5
 8001180:	2200      	movs	r2, #0
 8001182:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001186:	4620      	mov	r0, r4
 8001188:	f7ff ff51 	bl	800102e <I2C_WaitOnFlagUntilTimeout>
 800118c:	bb18      	cbnz	r0, 80011d6 <I2C_MasterRequestWrite+0x92>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800118e:	6923      	ldr	r3, [r4, #16]
 8001190:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001194:	d011      	beq.n	80011ba <I2C_MasterRequestWrite+0x76>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001196:	6822      	ldr	r2, [r4, #0]
 8001198:	11fb      	asrs	r3, r7, #7
 800119a:	f003 0306 	and.w	r3, r3, #6
 800119e:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 80011a2:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80011a4:	4633      	mov	r3, r6
 80011a6:	462a      	mov	r2, r5
 80011a8:	490e      	ldr	r1, [pc, #56]	; (80011e4 <I2C_MasterRequestWrite+0xa0>)
 80011aa:	4620      	mov	r0, r4
 80011ac:	f7ff ff77 	bl	800109e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80011b0:	b9a8      	cbnz	r0, 80011de <I2C_MasterRequestWrite+0x9a>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80011b2:	6823      	ldr	r3, [r4, #0]
 80011b4:	b2ff      	uxtb	r7, r7
 80011b6:	611f      	str	r7, [r3, #16]
 80011b8:	e003      	b.n	80011c2 <I2C_MasterRequestWrite+0x7e>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80011ba:	6823      	ldr	r3, [r4, #0]
 80011bc:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
 80011c0:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80011c2:	4633      	mov	r3, r6
 80011c4:	462a      	mov	r2, r5
 80011c6:	4908      	ldr	r1, [pc, #32]	; (80011e8 <I2C_MasterRequestWrite+0xa4>)
 80011c8:	4620      	mov	r0, r4
 80011ca:	f7ff ff68 	bl	800109e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80011ce:	4603      	mov	r3, r0
 80011d0:	b110      	cbz	r0, 80011d8 <I2C_MasterRequestWrite+0x94>
    return HAL_ERROR;
 80011d2:	2301      	movs	r3, #1
 80011d4:	e000      	b.n	80011d8 <I2C_MasterRequestWrite+0x94>
    return HAL_ERROR;
 80011d6:	2301      	movs	r3, #1
}
 80011d8:	4618      	mov	r0, r3
 80011da:	b003      	add	sp, #12
 80011dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return HAL_ERROR;
 80011de:	2301      	movs	r3, #1
 80011e0:	e7fa      	b.n	80011d8 <I2C_MasterRequestWrite+0x94>
 80011e2:	bf00      	nop
 80011e4:	00010008 	.word	0x00010008
 80011e8:	00010002 	.word	0x00010002

080011ec <I2C_MasterRequestRead>:
{
 80011ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80011f0:	b084      	sub	sp, #16
 80011f2:	4604      	mov	r4, r0
 80011f4:	460d      	mov	r5, r1
 80011f6:	4616      	mov	r6, r2
 80011f8:	461f      	mov	r7, r3
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80011fa:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80011fc:	6801      	ldr	r1, [r0, #0]
 80011fe:	680b      	ldr	r3, [r1, #0]
 8001200:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001204:	600b      	str	r3, [r1, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001206:	2a08      	cmp	r2, #8
 8001208:	d00d      	beq.n	8001226 <I2C_MasterRequestRead+0x3a>
 800120a:	2a01      	cmp	r2, #1
 800120c:	d00b      	beq.n	8001226 <I2C_MasterRequestRead+0x3a>
 800120e:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8001212:	d008      	beq.n	8001226 <I2C_MasterRequestRead+0x3a>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8001214:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001216:	2b11      	cmp	r3, #17
 8001218:	d10a      	bne.n	8001230 <I2C_MasterRequestRead+0x44>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800121a:	6802      	ldr	r2, [r0, #0]
 800121c:	6813      	ldr	r3, [r2, #0]
 800121e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001222:	6013      	str	r3, [r2, #0]
 8001224:	e004      	b.n	8001230 <I2C_MasterRequestRead+0x44>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001226:	6822      	ldr	r2, [r4, #0]
 8001228:	6813      	ldr	r3, [r2, #0]
 800122a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800122e:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001230:	9700      	str	r7, [sp, #0]
 8001232:	4633      	mov	r3, r6
 8001234:	2200      	movs	r2, #0
 8001236:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800123a:	4620      	mov	r0, r4
 800123c:	f7ff fef7 	bl	800102e <I2C_WaitOnFlagUntilTimeout>
 8001240:	2800      	cmp	r0, #0
 8001242:	d148      	bne.n	80012d6 <I2C_MasterRequestRead+0xea>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001244:	6923      	ldr	r3, [r4, #16]
 8001246:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800124a:	d010      	beq.n	800126e <I2C_MasterRequestRead+0x82>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800124c:	6823      	ldr	r3, [r4, #0]
 800124e:	ea4f 18e5 	mov.w	r8, r5, asr #7
 8001252:	f008 0806 	and.w	r8, r8, #6
 8001256:	f048 02f0 	orr.w	r2, r8, #240	; 0xf0
 800125a:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800125c:	463b      	mov	r3, r7
 800125e:	4632      	mov	r2, r6
 8001260:	4920      	ldr	r1, [pc, #128]	; (80012e4 <I2C_MasterRequestRead+0xf8>)
 8001262:	4620      	mov	r0, r4
 8001264:	f7ff ff1b 	bl	800109e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001268:	b180      	cbz	r0, 800128c <I2C_MasterRequestRead+0xa0>
      return HAL_ERROR;
 800126a:	2301      	movs	r3, #1
 800126c:	e034      	b.n	80012d8 <I2C_MasterRequestRead+0xec>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800126e:	6823      	ldr	r3, [r4, #0]
 8001270:	f045 0501 	orr.w	r5, r5, #1
 8001274:	b2ed      	uxtb	r5, r5
 8001276:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001278:	463b      	mov	r3, r7
 800127a:	4632      	mov	r2, r6
 800127c:	491a      	ldr	r1, [pc, #104]	; (80012e8 <I2C_MasterRequestRead+0xfc>)
 800127e:	4620      	mov	r0, r4
 8001280:	f7ff ff0d 	bl	800109e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001284:	4603      	mov	r3, r0
 8001286:	b338      	cbz	r0, 80012d8 <I2C_MasterRequestRead+0xec>
    return HAL_ERROR;
 8001288:	2301      	movs	r3, #1
 800128a:	e025      	b.n	80012d8 <I2C_MasterRequestRead+0xec>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800128c:	6823      	ldr	r3, [r4, #0]
 800128e:	b2ed      	uxtb	r5, r5
 8001290:	611d      	str	r5, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001292:	463b      	mov	r3, r7
 8001294:	4632      	mov	r2, r6
 8001296:	4914      	ldr	r1, [pc, #80]	; (80012e8 <I2C_MasterRequestRead+0xfc>)
 8001298:	4620      	mov	r0, r4
 800129a:	f7ff ff00 	bl	800109e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800129e:	b108      	cbz	r0, 80012a4 <I2C_MasterRequestRead+0xb8>
      return HAL_ERROR;
 80012a0:	2301      	movs	r3, #1
 80012a2:	e019      	b.n	80012d8 <I2C_MasterRequestRead+0xec>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80012a4:	2200      	movs	r2, #0
 80012a6:	9203      	str	r2, [sp, #12]
 80012a8:	6823      	ldr	r3, [r4, #0]
 80012aa:	6959      	ldr	r1, [r3, #20]
 80012ac:	9103      	str	r1, [sp, #12]
 80012ae:	6999      	ldr	r1, [r3, #24]
 80012b0:	9103      	str	r1, [sp, #12]
 80012b2:	9903      	ldr	r1, [sp, #12]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80012b4:	6819      	ldr	r1, [r3, #0]
 80012b6:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80012ba:	6019      	str	r1, [r3, #0]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80012bc:	9700      	str	r7, [sp, #0]
 80012be:	4633      	mov	r3, r6
 80012c0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80012c4:	4620      	mov	r0, r4
 80012c6:	f7ff feb2 	bl	800102e <I2C_WaitOnFlagUntilTimeout>
 80012ca:	b948      	cbnz	r0, 80012e0 <I2C_MasterRequestRead+0xf4>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80012cc:	6822      	ldr	r2, [r4, #0]
 80012ce:	f048 03f1 	orr.w	r3, r8, #241	; 0xf1
 80012d2:	6113      	str	r3, [r2, #16]
 80012d4:	e7d0      	b.n	8001278 <I2C_MasterRequestRead+0x8c>
    return HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
}
 80012d8:	4618      	mov	r0, r3
 80012da:	b004      	add	sp, #16
 80012dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return HAL_ERROR;
 80012e0:	2301      	movs	r3, #1
 80012e2:	e7f9      	b.n	80012d8 <I2C_MasterRequestRead+0xec>
 80012e4:	00010008 	.word	0x00010008
 80012e8:	00010002 	.word	0x00010002

080012ec <I2C_WaitOnTXEFlagUntilTimeout>:
{
 80012ec:	b570      	push	{r4, r5, r6, lr}
 80012ee:	4604      	mov	r4, r0
 80012f0:	460d      	mov	r5, r1
 80012f2:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80012f4:	6823      	ldr	r3, [r4, #0]
 80012f6:	695b      	ldr	r3, [r3, #20]
 80012f8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80012fc:	d11c      	bne.n	8001338 <I2C_WaitOnTXEFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80012fe:	4620      	mov	r0, r4
 8001300:	f7ff fe7c 	bl	8000ffc <I2C_IsAcknowledgeFailed>
 8001304:	b9d0      	cbnz	r0, 800133c <I2C_WaitOnTXEFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8001306:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 800130a:	d0f3      	beq.n	80012f4 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800130c:	f7ff f926 	bl	800055c <HAL_GetTick>
 8001310:	1b80      	subs	r0, r0, r6
 8001312:	4285      	cmp	r5, r0
 8001314:	d301      	bcc.n	800131a <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8001316:	2d00      	cmp	r5, #0
 8001318:	d1ec      	bne.n	80012f4 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 800131a:	2300      	movs	r3, #0
 800131c:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800131e:	2220      	movs	r2, #32
 8001320:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001324:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001328:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800132a:	f042 0220 	orr.w	r2, r2, #32
 800132e:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001330:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8001334:	2001      	movs	r0, #1
 8001336:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8001338:	2000      	movs	r0, #0
 800133a:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800133c:	2001      	movs	r0, #1
}
 800133e:	bd70      	pop	{r4, r5, r6, pc}

08001340 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8001340:	b570      	push	{r4, r5, r6, lr}
 8001342:	4604      	mov	r4, r0
 8001344:	460d      	mov	r5, r1
 8001346:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001348:	6823      	ldr	r3, [r4, #0]
 800134a:	695b      	ldr	r3, [r3, #20]
 800134c:	f013 0f04 	tst.w	r3, #4
 8001350:	d11c      	bne.n	800138c <I2C_WaitOnBTFFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001352:	4620      	mov	r0, r4
 8001354:	f7ff fe52 	bl	8000ffc <I2C_IsAcknowledgeFailed>
 8001358:	b9d0      	cbnz	r0, 8001390 <I2C_WaitOnBTFFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 800135a:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 800135e:	d0f3      	beq.n	8001348 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001360:	f7ff f8fc 	bl	800055c <HAL_GetTick>
 8001364:	1b80      	subs	r0, r0, r6
 8001366:	4285      	cmp	r5, r0
 8001368:	d301      	bcc.n	800136e <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 800136a:	2d00      	cmp	r5, #0
 800136c:	d1ec      	bne.n	8001348 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 800136e:	2300      	movs	r3, #0
 8001370:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001372:	2220      	movs	r2, #32
 8001374:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001378:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800137c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800137e:	f042 0220 	orr.w	r2, r2, #32
 8001382:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001384:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8001388:	2001      	movs	r0, #1
 800138a:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 800138c:	2000      	movs	r0, #0
 800138e:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8001390:	2001      	movs	r0, #1
}
 8001392:	bd70      	pop	{r4, r5, r6, pc}

08001394 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8001394:	b570      	push	{r4, r5, r6, lr}
 8001396:	4605      	mov	r5, r0
 8001398:	460c      	mov	r4, r1
 800139a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800139c:	682b      	ldr	r3, [r5, #0]
 800139e:	695a      	ldr	r2, [r3, #20]
 80013a0:	f012 0f40 	tst.w	r2, #64	; 0x40
 80013a4:	d129      	bne.n	80013fa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80013a6:	695a      	ldr	r2, [r3, #20]
 80013a8:	f012 0f10 	tst.w	r2, #16
 80013ac:	d115      	bne.n	80013da <I2C_WaitOnRXNEFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80013ae:	f7ff f8d5 	bl	800055c <HAL_GetTick>
 80013b2:	1b80      	subs	r0, r0, r6
 80013b4:	42a0      	cmp	r0, r4
 80013b6:	d801      	bhi.n	80013bc <I2C_WaitOnRXNEFlagUntilTimeout+0x28>
 80013b8:	2c00      	cmp	r4, #0
 80013ba:	d1ef      	bne.n	800139c <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 80013bc:	2300      	movs	r3, #0
 80013be:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80013c0:	2220      	movs	r2, #32
 80013c2:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80013c6:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80013ca:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80013cc:	f042 0220 	orr.w	r2, r2, #32
 80013d0:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80013d2:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 80013d6:	2001      	movs	r0, #1
 80013d8:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80013da:	f06f 0210 	mvn.w	r2, #16
 80013de:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 80013e0:	2300      	movs	r3, #0
 80013e2:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80013e4:	2220      	movs	r2, #32
 80013e6:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80013ea:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80013ee:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80013f0:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80013f2:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 80013f6:	2001      	movs	r0, #1
 80013f8:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 80013fa:	2000      	movs	r0, #0
}
 80013fc:	bd70      	pop	{r4, r5, r6, pc}
	...

08001400 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8001400:	2800      	cmp	r0, #0
 8001402:	f000 80be 	beq.w	8001582 <HAL_I2C_Init+0x182>
{
 8001406:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001408:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800140a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800140e:	2b00      	cmp	r3, #0
 8001410:	d06b      	beq.n	80014ea <HAL_I2C_Init+0xea>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001412:	2324      	movs	r3, #36	; 0x24
 8001414:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8001418:	6822      	ldr	r2, [r4, #0]
 800141a:	6813      	ldr	r3, [r2, #0]
 800141c:	f023 0301 	bic.w	r3, r3, #1
 8001420:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001422:	f000 fea1 	bl	8002168 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001426:	6862      	ldr	r2, [r4, #4]
 8001428:	4b58      	ldr	r3, [pc, #352]	; (800158c <HAL_I2C_Init+0x18c>)
 800142a:	429a      	cmp	r2, r3
 800142c:	d862      	bhi.n	80014f4 <HAL_I2C_Init+0xf4>
 800142e:	4b58      	ldr	r3, [pc, #352]	; (8001590 <HAL_I2C_Init+0x190>)
 8001430:	4298      	cmp	r0, r3
 8001432:	bf8c      	ite	hi
 8001434:	2300      	movhi	r3, #0
 8001436:	2301      	movls	r3, #1
 8001438:	2b00      	cmp	r3, #0
 800143a:	f040 80a4 	bne.w	8001586 <HAL_I2C_Init+0x186>
  freqrange = I2C_FREQRANGE(pclk1);
 800143e:	4b55      	ldr	r3, [pc, #340]	; (8001594 <HAL_I2C_Init+0x194>)
 8001440:	fba3 2300 	umull	r2, r3, r3, r0
 8001444:	0c9a      	lsrs	r2, r3, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001446:	6821      	ldr	r1, [r4, #0]
 8001448:	684b      	ldr	r3, [r1, #4]
 800144a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800144e:	4313      	orrs	r3, r2
 8001450:	604b      	str	r3, [r1, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001452:	6825      	ldr	r5, [r4, #0]
 8001454:	6a29      	ldr	r1, [r5, #32]
 8001456:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 800145a:	6866      	ldr	r6, [r4, #4]
 800145c:	4b4b      	ldr	r3, [pc, #300]	; (800158c <HAL_I2C_Init+0x18c>)
 800145e:	429e      	cmp	r6, r3
 8001460:	d84e      	bhi.n	8001500 <HAL_I2C_Init+0x100>
 8001462:	1c53      	adds	r3, r2, #1
 8001464:	430b      	orrs	r3, r1
 8001466:	622b      	str	r3, [r5, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001468:	6822      	ldr	r2, [r4, #0]
 800146a:	69d1      	ldr	r1, [r2, #28]
 800146c:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8001470:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8001474:	6863      	ldr	r3, [r4, #4]
 8001476:	4d45      	ldr	r5, [pc, #276]	; (800158c <HAL_I2C_Init+0x18c>)
 8001478:	42ab      	cmp	r3, r5
 800147a:	d84b      	bhi.n	8001514 <HAL_I2C_Init+0x114>
 800147c:	3801      	subs	r0, #1
 800147e:	005b      	lsls	r3, r3, #1
 8001480:	fbb0 f3f3 	udiv	r3, r0, r3
 8001484:	3301      	adds	r3, #1
 8001486:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800148a:	2b04      	cmp	r3, #4
 800148c:	bf38      	it	cc
 800148e:	2304      	movcc	r3, #4
 8001490:	430b      	orrs	r3, r1
 8001492:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001494:	6821      	ldr	r1, [r4, #0]
 8001496:	680b      	ldr	r3, [r1, #0]
 8001498:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800149c:	69e2      	ldr	r2, [r4, #28]
 800149e:	6a20      	ldr	r0, [r4, #32]
 80014a0:	4302      	orrs	r2, r0
 80014a2:	4313      	orrs	r3, r2
 80014a4:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80014a6:	6821      	ldr	r1, [r4, #0]
 80014a8:	688b      	ldr	r3, [r1, #8]
 80014aa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80014ae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80014b2:	6922      	ldr	r2, [r4, #16]
 80014b4:	68e0      	ldr	r0, [r4, #12]
 80014b6:	4302      	orrs	r2, r0
 80014b8:	4313      	orrs	r3, r2
 80014ba:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80014bc:	6821      	ldr	r1, [r4, #0]
 80014be:	68cb      	ldr	r3, [r1, #12]
 80014c0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80014c4:	6962      	ldr	r2, [r4, #20]
 80014c6:	69a0      	ldr	r0, [r4, #24]
 80014c8:	4302      	orrs	r2, r0
 80014ca:	4313      	orrs	r3, r2
 80014cc:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 80014ce:	6822      	ldr	r2, [r4, #0]
 80014d0:	6813      	ldr	r3, [r2, #0]
 80014d2:	f043 0301 	orr.w	r3, r3, #1
 80014d6:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014d8:	2000      	movs	r0, #0
 80014da:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80014dc:	2320      	movs	r3, #32
 80014de:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80014e2:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80014e4:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 80014e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->Lock = HAL_UNLOCKED;
 80014ea:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 80014ee:	f002 ff0d 	bl	800430c <HAL_I2C_MspInit>
 80014f2:	e78e      	b.n	8001412 <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80014f4:	4b28      	ldr	r3, [pc, #160]	; (8001598 <HAL_I2C_Init+0x198>)
 80014f6:	4298      	cmp	r0, r3
 80014f8:	bf8c      	ite	hi
 80014fa:	2300      	movhi	r3, #0
 80014fc:	2301      	movls	r3, #1
 80014fe:	e79b      	b.n	8001438 <HAL_I2C_Init+0x38>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001500:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001504:	fb03 f302 	mul.w	r3, r3, r2
 8001508:	4a24      	ldr	r2, [pc, #144]	; (800159c <HAL_I2C_Init+0x19c>)
 800150a:	fba2 2303 	umull	r2, r3, r2, r3
 800150e:	099b      	lsrs	r3, r3, #6
 8001510:	3301      	adds	r3, #1
 8001512:	e7a7      	b.n	8001464 <HAL_I2C_Init+0x64>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001514:	68a6      	ldr	r6, [r4, #8]
 8001516:	b9be      	cbnz	r6, 8001548 <HAL_I2C_Init+0x148>
 8001518:	1e45      	subs	r5, r0, #1
 800151a:	eb03 0743 	add.w	r7, r3, r3, lsl #1
 800151e:	fbb5 f5f7 	udiv	r5, r5, r7
 8001522:	3501      	adds	r5, #1
 8001524:	f3c5 050b 	ubfx	r5, r5, #0, #12
 8001528:	fab5 f585 	clz	r5, r5
 800152c:	096d      	lsrs	r5, r5, #5
 800152e:	bb35      	cbnz	r5, 800157e <HAL_I2C_Init+0x17e>
 8001530:	b9c6      	cbnz	r6, 8001564 <HAL_I2C_Init+0x164>
 8001532:	3801      	subs	r0, #1
 8001534:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001538:	fbb0 f3f3 	udiv	r3, r0, r3
 800153c:	3301      	adds	r3, #1
 800153e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001542:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001546:	e7a3      	b.n	8001490 <HAL_I2C_Init+0x90>
 8001548:	1e45      	subs	r5, r0, #1
 800154a:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 800154e:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 8001552:	fbb5 f5f7 	udiv	r5, r5, r7
 8001556:	3501      	adds	r5, #1
 8001558:	f3c5 050b 	ubfx	r5, r5, #0, #12
 800155c:	fab5 f585 	clz	r5, r5
 8001560:	096d      	lsrs	r5, r5, #5
 8001562:	e7e4      	b.n	800152e <HAL_I2C_Init+0x12e>
 8001564:	3801      	subs	r0, #1
 8001566:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800156a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800156e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001572:	3301      	adds	r3, #1
 8001574:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001578:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800157c:	e788      	b.n	8001490 <HAL_I2C_Init+0x90>
 800157e:	2301      	movs	r3, #1
 8001580:	e786      	b.n	8001490 <HAL_I2C_Init+0x90>
    return HAL_ERROR;
 8001582:	2001      	movs	r0, #1
 8001584:	4770      	bx	lr
    return HAL_ERROR;
 8001586:	2001      	movs	r0, #1
}
 8001588:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800158a:	bf00      	nop
 800158c:	000186a0 	.word	0x000186a0
 8001590:	001e847f 	.word	0x001e847f
 8001594:	431bde83 	.word	0x431bde83
 8001598:	003d08ff 	.word	0x003d08ff
 800159c:	10624dd3 	.word	0x10624dd3

080015a0 <HAL_I2C_Master_Transmit>:
{
 80015a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80015a4:	b084      	sub	sp, #16
 80015a6:	4604      	mov	r4, r0
 80015a8:	460d      	mov	r5, r1
 80015aa:	4690      	mov	r8, r2
 80015ac:	461f      	mov	r7, r3
  uint32_t tickstart = HAL_GetTick();
 80015ae:	f7fe ffd5 	bl	800055c <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80015b2:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	2b20      	cmp	r3, #32
 80015ba:	d004      	beq.n	80015c6 <HAL_I2C_Master_Transmit+0x26>
    return HAL_BUSY;
 80015bc:	2502      	movs	r5, #2
}
 80015be:	4628      	mov	r0, r5
 80015c0:	b004      	add	sp, #16
 80015c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80015c6:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80015c8:	9000      	str	r0, [sp, #0]
 80015ca:	2319      	movs	r3, #25
 80015cc:	2201      	movs	r2, #1
 80015ce:	494f      	ldr	r1, [pc, #316]	; (800170c <HAL_I2C_Master_Transmit+0x16c>)
 80015d0:	4620      	mov	r0, r4
 80015d2:	f7ff fd2c 	bl	800102e <I2C_WaitOnFlagUntilTimeout>
 80015d6:	b108      	cbz	r0, 80015dc <HAL_I2C_Master_Transmit+0x3c>
      return HAL_BUSY;
 80015d8:	2502      	movs	r5, #2
 80015da:	e7f0      	b.n	80015be <HAL_I2C_Master_Transmit+0x1e>
    __HAL_LOCK(hi2c);
 80015dc:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	f000 808e 	beq.w	8001702 <HAL_I2C_Master_Transmit+0x162>
 80015e6:	2301      	movs	r3, #1
 80015e8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80015ec:	6823      	ldr	r3, [r4, #0]
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	f012 0f01 	tst.w	r2, #1
 80015f4:	d103      	bne.n	80015fe <HAL_I2C_Master_Transmit+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	f042 0201 	orr.w	r2, r2, #1
 80015fc:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80015fe:	6822      	ldr	r2, [r4, #0]
 8001600:	6813      	ldr	r3, [r2, #0]
 8001602:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001606:	6013      	str	r3, [r2, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001608:	2321      	movs	r3, #33	; 0x21
 800160a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800160e:	2310      	movs	r3, #16
 8001610:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001614:	2300      	movs	r3, #0
 8001616:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8001618:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 800161c:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800161e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001620:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001622:	4b3b      	ldr	r3, [pc, #236]	; (8001710 <HAL_I2C_Master_Transmit+0x170>)
 8001624:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001626:	4633      	mov	r3, r6
 8001628:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800162a:	4629      	mov	r1, r5
 800162c:	4620      	mov	r0, r4
 800162e:	f7ff fd89 	bl	8001144 <I2C_MasterRequestWrite>
 8001632:	4605      	mov	r5, r0
 8001634:	2800      	cmp	r0, #0
 8001636:	d166      	bne.n	8001706 <HAL_I2C_Master_Transmit+0x166>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001638:	2300      	movs	r3, #0
 800163a:	9303      	str	r3, [sp, #12]
 800163c:	6823      	ldr	r3, [r4, #0]
 800163e:	695a      	ldr	r2, [r3, #20]
 8001640:	9203      	str	r2, [sp, #12]
 8001642:	699b      	ldr	r3, [r3, #24]
 8001644:	9303      	str	r3, [sp, #12]
 8001646:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 8001648:	e012      	b.n	8001670 <HAL_I2C_Master_Transmit+0xd0>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800164a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800164c:	2b04      	cmp	r3, #4
 800164e:	d001      	beq.n	8001654 <HAL_I2C_Master_Transmit+0xb4>
        return HAL_ERROR;
 8001650:	2501      	movs	r5, #1
 8001652:	e7b4      	b.n	80015be <HAL_I2C_Master_Transmit+0x1e>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001654:	6822      	ldr	r2, [r4, #0]
 8001656:	6813      	ldr	r3, [r2, #0]
 8001658:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800165c:	6013      	str	r3, [r2, #0]
        return HAL_ERROR;
 800165e:	2501      	movs	r5, #1
 8001660:	e7ad      	b.n	80015be <HAL_I2C_Master_Transmit+0x1e>
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001662:	4632      	mov	r2, r6
 8001664:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001666:	4620      	mov	r0, r4
 8001668:	f7ff fe6a 	bl	8001340 <I2C_WaitOnBTFFlagUntilTimeout>
 800166c:	2800      	cmp	r0, #0
 800166e:	d12e      	bne.n	80016ce <HAL_I2C_Master_Transmit+0x12e>
    while (hi2c->XferSize > 0U)
 8001670:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001672:	2b00      	cmp	r3, #0
 8001674:	d037      	beq.n	80016e6 <HAL_I2C_Master_Transmit+0x146>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001676:	4632      	mov	r2, r6
 8001678:	990a      	ldr	r1, [sp, #40]	; 0x28
 800167a:	4620      	mov	r0, r4
 800167c:	f7ff fe36 	bl	80012ec <I2C_WaitOnTXEFlagUntilTimeout>
 8001680:	2800      	cmp	r0, #0
 8001682:	d1e2      	bne.n	800164a <HAL_I2C_Master_Transmit+0xaa>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001684:	6823      	ldr	r3, [r4, #0]
 8001686:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001688:	7812      	ldrb	r2, [r2, #0]
 800168a:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800168c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800168e:	1c4b      	adds	r3, r1, #1
 8001690:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8001692:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001694:	b29b      	uxth	r3, r3
 8001696:	3b01      	subs	r3, #1
 8001698:	b29b      	uxth	r3, r3
 800169a:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800169c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800169e:	3b01      	subs	r3, #1
 80016a0:	b29b      	uxth	r3, r3
 80016a2:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80016a4:	6822      	ldr	r2, [r4, #0]
 80016a6:	6950      	ldr	r0, [r2, #20]
 80016a8:	f010 0f04 	tst.w	r0, #4
 80016ac:	d0d9      	beq.n	8001662 <HAL_I2C_Master_Transmit+0xc2>
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d0d7      	beq.n	8001662 <HAL_I2C_Master_Transmit+0xc2>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80016b2:	784b      	ldrb	r3, [r1, #1]
 80016b4:	6113      	str	r3, [r2, #16]
        hi2c->pBuffPtr++;
 80016b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80016b8:	3301      	adds	r3, #1
 80016ba:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 80016bc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80016be:	b29b      	uxth	r3, r3
 80016c0:	3b01      	subs	r3, #1
 80016c2:	b29b      	uxth	r3, r3
 80016c4:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 80016c6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80016c8:	3b01      	subs	r3, #1
 80016ca:	8523      	strh	r3, [r4, #40]	; 0x28
 80016cc:	e7c9      	b.n	8001662 <HAL_I2C_Master_Transmit+0xc2>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80016ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80016d0:	2b04      	cmp	r3, #4
 80016d2:	d001      	beq.n	80016d8 <HAL_I2C_Master_Transmit+0x138>
        return HAL_ERROR;
 80016d4:	2501      	movs	r5, #1
 80016d6:	e772      	b.n	80015be <HAL_I2C_Master_Transmit+0x1e>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016d8:	6822      	ldr	r2, [r4, #0]
 80016da:	6813      	ldr	r3, [r2, #0]
 80016dc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016e0:	6013      	str	r3, [r2, #0]
        return HAL_ERROR;
 80016e2:	2501      	movs	r5, #1
 80016e4:	e76b      	b.n	80015be <HAL_I2C_Master_Transmit+0x1e>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016e6:	6822      	ldr	r2, [r4, #0]
 80016e8:	6813      	ldr	r3, [r2, #0]
 80016ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016ee:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80016f0:	2320      	movs	r3, #32
 80016f2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80016f6:	2300      	movs	r3, #0
 80016f8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 80016fc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8001700:	e75d      	b.n	80015be <HAL_I2C_Master_Transmit+0x1e>
    __HAL_LOCK(hi2c);
 8001702:	2502      	movs	r5, #2
 8001704:	e75b      	b.n	80015be <HAL_I2C_Master_Transmit+0x1e>
      return HAL_ERROR;
 8001706:	2501      	movs	r5, #1
 8001708:	e759      	b.n	80015be <HAL_I2C_Master_Transmit+0x1e>
 800170a:	bf00      	nop
 800170c:	00100002 	.word	0x00100002
 8001710:	ffff0000 	.word	0xffff0000

08001714 <HAL_I2C_Master_Receive>:
{
 8001714:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001718:	b086      	sub	sp, #24
 800171a:	4604      	mov	r4, r0
 800171c:	460d      	mov	r5, r1
 800171e:	4690      	mov	r8, r2
 8001720:	461f      	mov	r7, r3
  uint32_t tickstart = HAL_GetTick();
 8001722:	f7fe ff1b 	bl	800055c <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001726:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800172a:	b2db      	uxtb	r3, r3
 800172c:	2b20      	cmp	r3, #32
 800172e:	d004      	beq.n	800173a <HAL_I2C_Master_Receive+0x26>
    return HAL_BUSY;
 8001730:	2502      	movs	r5, #2
}
 8001732:	4628      	mov	r0, r5
 8001734:	b006      	add	sp, #24
 8001736:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800173a:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800173c:	9000      	str	r0, [sp, #0]
 800173e:	2319      	movs	r3, #25
 8001740:	2201      	movs	r2, #1
 8001742:	4988      	ldr	r1, [pc, #544]	; (8001964 <HAL_I2C_Master_Receive+0x250>)
 8001744:	4620      	mov	r0, r4
 8001746:	f7ff fc72 	bl	800102e <I2C_WaitOnFlagUntilTimeout>
 800174a:	b108      	cbz	r0, 8001750 <HAL_I2C_Master_Receive+0x3c>
      return HAL_BUSY;
 800174c:	2502      	movs	r5, #2
 800174e:	e7f0      	b.n	8001732 <HAL_I2C_Master_Receive+0x1e>
    __HAL_LOCK(hi2c);
 8001750:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001754:	2b01      	cmp	r3, #1
 8001756:	f000 813d 	beq.w	80019d4 <HAL_I2C_Master_Receive+0x2c0>
 800175a:	2301      	movs	r3, #1
 800175c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001760:	6823      	ldr	r3, [r4, #0]
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	f012 0f01 	tst.w	r2, #1
 8001768:	d103      	bne.n	8001772 <HAL_I2C_Master_Receive+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	f042 0201 	orr.w	r2, r2, #1
 8001770:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001772:	6822      	ldr	r2, [r4, #0]
 8001774:	6813      	ldr	r3, [r2, #0]
 8001776:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800177a:	6013      	str	r3, [r2, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800177c:	2322      	movs	r3, #34	; 0x22
 800177e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001782:	2310      	movs	r3, #16
 8001784:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001788:	2300      	movs	r3, #0
 800178a:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 800178c:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001790:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001792:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001794:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001796:	4b74      	ldr	r3, [pc, #464]	; (8001968 <HAL_I2C_Master_Receive+0x254>)
 8001798:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800179a:	4633      	mov	r3, r6
 800179c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800179e:	4629      	mov	r1, r5
 80017a0:	4620      	mov	r0, r4
 80017a2:	f7ff fd23 	bl	80011ec <I2C_MasterRequestRead>
 80017a6:	4605      	mov	r5, r0
 80017a8:	2800      	cmp	r0, #0
 80017aa:	f040 8115 	bne.w	80019d8 <HAL_I2C_Master_Receive+0x2c4>
    if (hi2c->XferSize == 0U)
 80017ae:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80017b0:	b95b      	cbnz	r3, 80017ca <HAL_I2C_Master_Receive+0xb6>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80017b2:	9302      	str	r3, [sp, #8]
 80017b4:	6823      	ldr	r3, [r4, #0]
 80017b6:	695a      	ldr	r2, [r3, #20]
 80017b8:	9202      	str	r2, [sp, #8]
 80017ba:	699a      	ldr	r2, [r3, #24]
 80017bc:	9202      	str	r2, [sp, #8]
 80017be:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017c6:	601a      	str	r2, [r3, #0]
 80017c8:	e07a      	b.n	80018c0 <HAL_I2C_Master_Receive+0x1ac>
    else if (hi2c->XferSize == 1U)
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d00f      	beq.n	80017ee <HAL_I2C_Master_Receive+0xda>
    else if (hi2c->XferSize == 2U)
 80017ce:	2b02      	cmp	r3, #2
 80017d0:	d01f      	beq.n	8001812 <HAL_I2C_Master_Receive+0xfe>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80017d2:	6822      	ldr	r2, [r4, #0]
 80017d4:	6813      	ldr	r3, [r2, #0]
 80017d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017da:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80017dc:	2300      	movs	r3, #0
 80017de:	9305      	str	r3, [sp, #20]
 80017e0:	6823      	ldr	r3, [r4, #0]
 80017e2:	695a      	ldr	r2, [r3, #20]
 80017e4:	9205      	str	r2, [sp, #20]
 80017e6:	699b      	ldr	r3, [r3, #24]
 80017e8:	9305      	str	r3, [sp, #20]
 80017ea:	9b05      	ldr	r3, [sp, #20]
 80017ec:	e068      	b.n	80018c0 <HAL_I2C_Master_Receive+0x1ac>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80017ee:	6822      	ldr	r2, [r4, #0]
 80017f0:	6813      	ldr	r3, [r2, #0]
 80017f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80017f6:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80017f8:	2300      	movs	r3, #0
 80017fa:	9303      	str	r3, [sp, #12]
 80017fc:	6823      	ldr	r3, [r4, #0]
 80017fe:	695a      	ldr	r2, [r3, #20]
 8001800:	9203      	str	r2, [sp, #12]
 8001802:	699a      	ldr	r2, [r3, #24]
 8001804:	9203      	str	r2, [sp, #12]
 8001806:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800180e:	601a      	str	r2, [r3, #0]
 8001810:	e056      	b.n	80018c0 <HAL_I2C_Master_Receive+0x1ac>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001812:	6822      	ldr	r2, [r4, #0]
 8001814:	6813      	ldr	r3, [r2, #0]
 8001816:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800181a:	6013      	str	r3, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800181c:	6822      	ldr	r2, [r4, #0]
 800181e:	6813      	ldr	r3, [r2, #0]
 8001820:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001824:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001826:	2300      	movs	r3, #0
 8001828:	9304      	str	r3, [sp, #16]
 800182a:	6823      	ldr	r3, [r4, #0]
 800182c:	695a      	ldr	r2, [r3, #20]
 800182e:	9204      	str	r2, [sp, #16]
 8001830:	699b      	ldr	r3, [r3, #24]
 8001832:	9304      	str	r3, [sp, #16]
 8001834:	9b04      	ldr	r3, [sp, #16]
 8001836:	e043      	b.n	80018c0 <HAL_I2C_Master_Receive+0x1ac>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001838:	4632      	mov	r2, r6
 800183a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800183c:	4620      	mov	r0, r4
 800183e:	f7ff fda9 	bl	8001394 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001842:	2800      	cmp	r0, #0
 8001844:	f040 80ca 	bne.w	80019dc <HAL_I2C_Master_Receive+0x2c8>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001848:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800184a:	6822      	ldr	r2, [r4, #0]
 800184c:	6912      	ldr	r2, [r2, #16]
 800184e:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8001850:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001852:	3301      	adds	r3, #1
 8001854:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8001856:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001858:	3b01      	subs	r3, #1
 800185a:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800185c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800185e:	b29b      	uxth	r3, r3
 8001860:	3b01      	subs	r3, #1
 8001862:	b29b      	uxth	r3, r3
 8001864:	8563      	strh	r3, [r4, #42]	; 0x2a
 8001866:	e02b      	b.n	80018c0 <HAL_I2C_Master_Receive+0x1ac>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001868:	9600      	str	r6, [sp, #0]
 800186a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800186c:	2200      	movs	r2, #0
 800186e:	493f      	ldr	r1, [pc, #252]	; (800196c <HAL_I2C_Master_Receive+0x258>)
 8001870:	4620      	mov	r0, r4
 8001872:	f7ff fbdc 	bl	800102e <I2C_WaitOnFlagUntilTimeout>
 8001876:	2800      	cmp	r0, #0
 8001878:	f040 80b2 	bne.w	80019e0 <HAL_I2C_Master_Receive+0x2cc>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800187c:	6822      	ldr	r2, [r4, #0]
 800187e:	6813      	ldr	r3, [r2, #0]
 8001880:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001884:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001886:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001888:	6822      	ldr	r2, [r4, #0]
 800188a:	6912      	ldr	r2, [r2, #16]
 800188c:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 800188e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001890:	1c53      	adds	r3, r2, #1
 8001892:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8001894:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001896:	3b01      	subs	r3, #1
 8001898:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800189a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800189c:	b29b      	uxth	r3, r3
 800189e:	3b01      	subs	r3, #1
 80018a0:	b29b      	uxth	r3, r3
 80018a2:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80018a4:	6823      	ldr	r3, [r4, #0]
 80018a6:	691b      	ldr	r3, [r3, #16]
 80018a8:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 80018aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80018ac:	3301      	adds	r3, #1
 80018ae:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80018b0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80018b2:	3b01      	subs	r3, #1
 80018b4:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80018b6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80018b8:	b29b      	uxth	r3, r3
 80018ba:	3b01      	subs	r3, #1
 80018bc:	b29b      	uxth	r3, r3
 80018be:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80018c0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d07d      	beq.n	80019c2 <HAL_I2C_Master_Receive+0x2ae>
      if (hi2c->XferSize <= 3U)
 80018c6:	2b03      	cmp	r3, #3
 80018c8:	d852      	bhi.n	8001970 <HAL_I2C_Master_Receive+0x25c>
        if (hi2c->XferSize == 1U)
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d0b4      	beq.n	8001838 <HAL_I2C_Master_Receive+0x124>
        else if (hi2c->XferSize == 2U)
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	d0ca      	beq.n	8001868 <HAL_I2C_Master_Receive+0x154>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80018d2:	9600      	str	r6, [sp, #0]
 80018d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80018d6:	2200      	movs	r2, #0
 80018d8:	4924      	ldr	r1, [pc, #144]	; (800196c <HAL_I2C_Master_Receive+0x258>)
 80018da:	4620      	mov	r0, r4
 80018dc:	f7ff fba7 	bl	800102e <I2C_WaitOnFlagUntilTimeout>
 80018e0:	2800      	cmp	r0, #0
 80018e2:	d17f      	bne.n	80019e4 <HAL_I2C_Master_Receive+0x2d0>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80018e4:	6822      	ldr	r2, [r4, #0]
 80018e6:	6813      	ldr	r3, [r2, #0]
 80018e8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80018ec:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80018ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80018f0:	6822      	ldr	r2, [r4, #0]
 80018f2:	6912      	ldr	r2, [r2, #16]
 80018f4:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80018f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80018f8:	3301      	adds	r3, #1
 80018fa:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80018fc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80018fe:	3b01      	subs	r3, #1
 8001900:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001902:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001904:	b29b      	uxth	r3, r3
 8001906:	3b01      	subs	r3, #1
 8001908:	b29b      	uxth	r3, r3
 800190a:	8563      	strh	r3, [r4, #42]	; 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800190c:	9600      	str	r6, [sp, #0]
 800190e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001910:	2200      	movs	r2, #0
 8001912:	4916      	ldr	r1, [pc, #88]	; (800196c <HAL_I2C_Master_Receive+0x258>)
 8001914:	4620      	mov	r0, r4
 8001916:	f7ff fb8a 	bl	800102e <I2C_WaitOnFlagUntilTimeout>
 800191a:	2800      	cmp	r0, #0
 800191c:	d164      	bne.n	80019e8 <HAL_I2C_Master_Receive+0x2d4>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800191e:	6822      	ldr	r2, [r4, #0]
 8001920:	6813      	ldr	r3, [r2, #0]
 8001922:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001926:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001928:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800192a:	6822      	ldr	r2, [r4, #0]
 800192c:	6912      	ldr	r2, [r2, #16]
 800192e:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8001930:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001932:	1c53      	adds	r3, r2, #1
 8001934:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8001936:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001938:	3b01      	subs	r3, #1
 800193a:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800193c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800193e:	b29b      	uxth	r3, r3
 8001940:	3b01      	subs	r3, #1
 8001942:	b29b      	uxth	r3, r3
 8001944:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001946:	6823      	ldr	r3, [r4, #0]
 8001948:	691b      	ldr	r3, [r3, #16]
 800194a:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 800194c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800194e:	3301      	adds	r3, #1
 8001950:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8001952:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001954:	3b01      	subs	r3, #1
 8001956:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001958:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800195a:	b29b      	uxth	r3, r3
 800195c:	3b01      	subs	r3, #1
 800195e:	b29b      	uxth	r3, r3
 8001960:	8563      	strh	r3, [r4, #42]	; 0x2a
 8001962:	e7ad      	b.n	80018c0 <HAL_I2C_Master_Receive+0x1ac>
 8001964:	00100002 	.word	0x00100002
 8001968:	ffff0000 	.word	0xffff0000
 800196c:	00010004 	.word	0x00010004
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001970:	4632      	mov	r2, r6
 8001972:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001974:	4620      	mov	r0, r4
 8001976:	f7ff fd0d 	bl	8001394 <I2C_WaitOnRXNEFlagUntilTimeout>
 800197a:	2800      	cmp	r0, #0
 800197c:	d136      	bne.n	80019ec <HAL_I2C_Master_Receive+0x2d8>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800197e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001980:	6822      	ldr	r2, [r4, #0]
 8001982:	6912      	ldr	r2, [r2, #16]
 8001984:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8001986:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001988:	1c53      	adds	r3, r2, #1
 800198a:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 800198c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800198e:	3b01      	subs	r3, #1
 8001990:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8001992:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001994:	b29b      	uxth	r3, r3
 8001996:	3b01      	subs	r3, #1
 8001998:	b29b      	uxth	r3, r3
 800199a:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800199c:	6823      	ldr	r3, [r4, #0]
 800199e:	6959      	ldr	r1, [r3, #20]
 80019a0:	f011 0f04 	tst.w	r1, #4
 80019a4:	d08c      	beq.n	80018c0 <HAL_I2C_Master_Receive+0x1ac>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80019a6:	691b      	ldr	r3, [r3, #16]
 80019a8:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 80019aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80019ac:	3301      	adds	r3, #1
 80019ae:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80019b0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80019b2:	3b01      	subs	r3, #1
 80019b4:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80019b6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80019b8:	b29b      	uxth	r3, r3
 80019ba:	3b01      	subs	r3, #1
 80019bc:	b29b      	uxth	r3, r3
 80019be:	8563      	strh	r3, [r4, #42]	; 0x2a
 80019c0:	e77e      	b.n	80018c0 <HAL_I2C_Master_Receive+0x1ac>
    hi2c->State = HAL_I2C_STATE_READY;
 80019c2:	2320      	movs	r3, #32
 80019c4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80019c8:	2300      	movs	r3, #0
 80019ca:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 80019ce:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 80019d2:	e6ae      	b.n	8001732 <HAL_I2C_Master_Receive+0x1e>
    __HAL_LOCK(hi2c);
 80019d4:	2502      	movs	r5, #2
 80019d6:	e6ac      	b.n	8001732 <HAL_I2C_Master_Receive+0x1e>
      return HAL_ERROR;
 80019d8:	2501      	movs	r5, #1
 80019da:	e6aa      	b.n	8001732 <HAL_I2C_Master_Receive+0x1e>
            return HAL_ERROR;
 80019dc:	2501      	movs	r5, #1
 80019de:	e6a8      	b.n	8001732 <HAL_I2C_Master_Receive+0x1e>
            return HAL_ERROR;
 80019e0:	2501      	movs	r5, #1
 80019e2:	e6a6      	b.n	8001732 <HAL_I2C_Master_Receive+0x1e>
            return HAL_ERROR;
 80019e4:	2501      	movs	r5, #1
 80019e6:	e6a4      	b.n	8001732 <HAL_I2C_Master_Receive+0x1e>
            return HAL_ERROR;
 80019e8:	2501      	movs	r5, #1
 80019ea:	e6a2      	b.n	8001732 <HAL_I2C_Master_Receive+0x1e>
          return HAL_ERROR;
 80019ec:	2501      	movs	r5, #1
 80019ee:	e6a0      	b.n	8001732 <HAL_I2C_Master_Receive+0x1e>

080019f0 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019f0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	2b20      	cmp	r3, #32
 80019f8:	d001      	beq.n	80019fe <HAL_I2CEx_ConfigAnalogFilter+0xe>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80019fa:	2002      	movs	r0, #2
  }
}
 80019fc:	4770      	bx	lr
    hi2c->State = HAL_I2C_STATE_BUSY;
 80019fe:	2324      	movs	r3, #36	; 0x24
 8001a00:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    __HAL_I2C_DISABLE(hi2c);
 8001a04:	6802      	ldr	r2, [r0, #0]
 8001a06:	6813      	ldr	r3, [r2, #0]
 8001a08:	f023 0301 	bic.w	r3, r3, #1
 8001a0c:	6013      	str	r3, [r2, #0]
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8001a0e:	6802      	ldr	r2, [r0, #0]
 8001a10:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8001a12:	f023 0310 	bic.w	r3, r3, #16
 8001a16:	6253      	str	r3, [r2, #36]	; 0x24
    hi2c->Instance->FLTR |= AnalogFilter;
 8001a18:	6802      	ldr	r2, [r0, #0]
 8001a1a:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8001a1c:	4319      	orrs	r1, r3
 8001a1e:	6251      	str	r1, [r2, #36]	; 0x24
    __HAL_I2C_ENABLE(hi2c);
 8001a20:	6802      	ldr	r2, [r0, #0]
 8001a22:	6813      	ldr	r3, [r2, #0]
 8001a24:	f043 0301 	orr.w	r3, r3, #1
 8001a28:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001a2a:	2320      	movs	r3, #32
 8001a2c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    return HAL_OK;
 8001a30:	2000      	movs	r0, #0
 8001a32:	4770      	bx	lr

08001a34 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a34:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	2b20      	cmp	r3, #32
 8001a3c:	d001      	beq.n	8001a42 <HAL_I2CEx_ConfigDigitalFilter+0xe>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8001a3e:	2002      	movs	r0, #2
  }
}
 8001a40:	4770      	bx	lr
    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a42:	2324      	movs	r3, #36	; 0x24
 8001a44:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    __HAL_I2C_DISABLE(hi2c);
 8001a48:	6802      	ldr	r2, [r0, #0]
 8001a4a:	6813      	ldr	r3, [r2, #0]
 8001a4c:	f023 0301 	bic.w	r3, r3, #1
 8001a50:	6013      	str	r3, [r2, #0]
    tmpreg = hi2c->Instance->FLTR;
 8001a52:	6802      	ldr	r2, [r0, #0]
 8001a54:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8001a56:	b29b      	uxth	r3, r3
    tmpreg &= ~(I2C_FLTR_DNF);
 8001a58:	f023 030f 	bic.w	r3, r3, #15
    tmpreg |= DigitalFilter;
 8001a5c:	4319      	orrs	r1, r3
 8001a5e:	b289      	uxth	r1, r1
    hi2c->Instance->FLTR = tmpreg;
 8001a60:	6251      	str	r1, [r2, #36]	; 0x24
    __HAL_I2C_ENABLE(hi2c);
 8001a62:	6802      	ldr	r2, [r0, #0]
 8001a64:	6813      	ldr	r3, [r2, #0]
 8001a66:	f043 0301 	orr.w	r3, r3, #1
 8001a6a:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001a6c:	2320      	movs	r3, #32
 8001a6e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    return HAL_OK;
 8001a72:	2000      	movs	r0, #0
 8001a74:	4770      	bx	lr

08001a76 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001a76:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a78:	b08b      	sub	sp, #44	; 0x2c
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001a7a:	2800      	cmp	r0, #0
 8001a7c:	f000 808a 	beq.w	8001b94 <HAL_PCD_Init+0x11e>
 8001a80:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001a82:	6805      	ldr	r5, [r0, #0]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001a84:	f890 33bd 	ldrb.w	r3, [r0, #957]	; 0x3bd
 8001a88:	b323      	cbz	r3, 8001ad4 <HAL_PCD_Init+0x5e>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001a90:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8001a92:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001a96:	d101      	bne.n	8001a9c <HAL_PCD_Init+0x26>
  {
    hpcd->Init.dma_enable = 0U;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	6123      	str	r3, [r4, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001a9c:	6820      	ldr	r0, [r4, #0]
 8001a9e:	f000 ff2c 	bl	80028fa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001aa2:	4625      	mov	r5, r4
 8001aa4:	f855 7b10 	ldr.w	r7, [r5], #16
 8001aa8:	466e      	mov	r6, sp
 8001aaa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001aac:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001aae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ab0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001ab2:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001ab6:	e886 0003 	stmia.w	r6, {r0, r1}
 8001aba:	1d23      	adds	r3, r4, #4
 8001abc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001abe:	4638      	mov	r0, r7
 8001ac0:	f000 fed6 	bl	8002870 <USB_CoreInit>
 8001ac4:	b158      	cbz	r0, 8001ade <HAL_PCD_Init+0x68>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ac6:	2302      	movs	r3, #2
 8001ac8:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
    return HAL_ERROR;
 8001acc:	2501      	movs	r5, #1
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 8001ace:	4628      	mov	r0, r5
 8001ad0:	b00b      	add	sp, #44	; 0x2c
 8001ad2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hpcd->Lock = HAL_UNLOCKED;
 8001ad4:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
    HAL_PCD_MspInit(hpcd);
 8001ad8:	f002 ff68 	bl	80049ac <HAL_PCD_MspInit>
 8001adc:	e7d5      	b.n	8001a8a <HAL_PCD_Init+0x14>
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001ade:	2100      	movs	r1, #0
 8001ae0:	6820      	ldr	r0, [r4, #0]
 8001ae2:	f000 ff10 	bl	8002906 <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	e015      	b.n	8001b16 <HAL_PCD_Init+0xa0>
    hpcd->IN_ep[i].is_in = 1U;
 8001aea:	00d9      	lsls	r1, r3, #3
 8001aec:	1ac8      	subs	r0, r1, r3
 8001aee:	0082      	lsls	r2, r0, #2
 8001af0:	4422      	add	r2, r4
 8001af2:	2001      	movs	r0, #1
 8001af4:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
    hpcd->IN_ep[i].num = i;
 8001af8:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001afc:	f8a2 3042 	strh.w	r3, [r2, #66]	; 0x42
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001b00:	2000      	movs	r0, #0
 8001b02:	f882 003f 	strb.w	r0, [r2, #63]	; 0x3f
    hpcd->IN_ep[i].maxpacket = 0U;
 8001b06:	6450      	str	r0, [r2, #68]	; 0x44
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001b08:	6490      	str	r0, [r2, #72]	; 0x48
    hpcd->IN_ep[i].xfer_len = 0U;
 8001b0a:	1aca      	subs	r2, r1, r3
 8001b0c:	0091      	lsls	r1, r2, #2
 8001b0e:	4421      	add	r1, r4
 8001b10:	6508      	str	r0, [r1, #80]	; 0x50
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b12:	3301      	adds	r3, #1
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	6865      	ldr	r5, [r4, #4]
 8001b18:	42ab      	cmp	r3, r5
 8001b1a:	d3e6      	bcc.n	8001aea <HAL_PCD_Init+0x74>
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	e015      	b.n	8001b4c <HAL_PCD_Init+0xd6>
    hpcd->OUT_ep[i].is_in = 0U;
 8001b20:	00d8      	lsls	r0, r3, #3
 8001b22:	1ac1      	subs	r1, r0, r3
 8001b24:	008a      	lsls	r2, r1, #2
 8001b26:	4422      	add	r2, r4
 8001b28:	2100      	movs	r1, #0
 8001b2a:	f882 11fd 	strb.w	r1, [r2, #509]	; 0x1fd
    hpcd->OUT_ep[i].num = i;
 8001b2e:	f882 31fc 	strb.w	r3, [r2, #508]	; 0x1fc
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001b32:	f882 11ff 	strb.w	r1, [r2, #511]	; 0x1ff
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001b36:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001b3a:	f8c2 1208 	str.w	r1, [r2, #520]	; 0x208
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001b3e:	1ac2      	subs	r2, r0, r3
 8001b40:	0090      	lsls	r0, r2, #2
 8001b42:	4420      	add	r0, r4
 8001b44:	f8c0 1210 	str.w	r1, [r0, #528]	; 0x210
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b48:	3301      	adds	r3, #1
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	429d      	cmp	r5, r3
 8001b4e:	d8e7      	bhi.n	8001b20 <HAL_PCD_Init+0xaa>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b50:	4625      	mov	r5, r4
 8001b52:	f855 7b10 	ldr.w	r7, [r5], #16
 8001b56:	466e      	mov	r6, sp
 8001b58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b5a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001b5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b5e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001b60:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001b64:	e886 0003 	stmia.w	r6, {r0, r1}
 8001b68:	1d23      	adds	r3, r4, #4
 8001b6a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b6c:	4638      	mov	r0, r7
 8001b6e:	f000 ff11 	bl	8002994 <USB_DevInit>
 8001b72:	4605      	mov	r5, r0
 8001b74:	b120      	cbz	r0, 8001b80 <HAL_PCD_Init+0x10a>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001b76:	2302      	movs	r3, #2
 8001b78:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
    return HAL_ERROR;
 8001b7c:	2501      	movs	r5, #1
 8001b7e:	e7a6      	b.n	8001ace <HAL_PCD_Init+0x58>
  hpcd->USB_Address = 0U;
 8001b80:	2300      	movs	r3, #0
 8001b82:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001b86:	2301      	movs	r3, #1
 8001b88:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  (void)USB_DevDisconnect(hpcd->Instance);
 8001b8c:	6820      	ldr	r0, [r4, #0]
 8001b8e:	f000 ffd1 	bl	8002b34 <USB_DevDisconnect>
  return HAL_OK;
 8001b92:	e79c      	b.n	8001ace <HAL_PCD_Init+0x58>
    return HAL_ERROR;
 8001b94:	2501      	movs	r5, #1
 8001b96:	e79a      	b.n	8001ace <HAL_PCD_Init+0x58>

08001b98 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b98:	2800      	cmp	r0, #0
 8001b9a:	f000 81bb 	beq.w	8001f14 <HAL_RCC_OscConfig+0x37c>
{
 8001b9e:	b570      	push	{r4, r5, r6, lr}
 8001ba0:	b082      	sub	sp, #8
 8001ba2:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ba4:	6803      	ldr	r3, [r0, #0]
 8001ba6:	f013 0f01 	tst.w	r3, #1
 8001baa:	d03b      	beq.n	8001c24 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001bac:	4ba7      	ldr	r3, [pc, #668]	; (8001e4c <HAL_RCC_OscConfig+0x2b4>)
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	f003 030c 	and.w	r3, r3, #12
 8001bb4:	2b04      	cmp	r3, #4
 8001bb6:	d02c      	beq.n	8001c12 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001bb8:	4ba4      	ldr	r3, [pc, #656]	; (8001e4c <HAL_RCC_OscConfig+0x2b4>)
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001bc0:	2b08      	cmp	r3, #8
 8001bc2:	d021      	beq.n	8001c08 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bc4:	6863      	ldr	r3, [r4, #4]
 8001bc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bca:	d04f      	beq.n	8001c6c <HAL_RCC_OscConfig+0xd4>
 8001bcc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bd0:	d052      	beq.n	8001c78 <HAL_RCC_OscConfig+0xe0>
 8001bd2:	4b9e      	ldr	r3, [pc, #632]	; (8001e4c <HAL_RCC_OscConfig+0x2b4>)
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001bda:	601a      	str	r2, [r3, #0]
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001be2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001be4:	6863      	ldr	r3, [r4, #4]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d050      	beq.n	8001c8c <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bea:	f7fe fcb7 	bl	800055c <HAL_GetTick>
 8001bee:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bf0:	4b96      	ldr	r3, [pc, #600]	; (8001e4c <HAL_RCC_OscConfig+0x2b4>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001bf8:	d114      	bne.n	8001c24 <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bfa:	f7fe fcaf 	bl	800055c <HAL_GetTick>
 8001bfe:	1b40      	subs	r0, r0, r5
 8001c00:	2864      	cmp	r0, #100	; 0x64
 8001c02:	d9f5      	bls.n	8001bf0 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8001c04:	2003      	movs	r0, #3
 8001c06:	e18a      	b.n	8001f1e <HAL_RCC_OscConfig+0x386>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c08:	4b90      	ldr	r3, [pc, #576]	; (8001e4c <HAL_RCC_OscConfig+0x2b4>)
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001c10:	d0d8      	beq.n	8001bc4 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c12:	4b8e      	ldr	r3, [pc, #568]	; (8001e4c <HAL_RCC_OscConfig+0x2b4>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001c1a:	d003      	beq.n	8001c24 <HAL_RCC_OscConfig+0x8c>
 8001c1c:	6863      	ldr	r3, [r4, #4]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	f000 817a 	beq.w	8001f18 <HAL_RCC_OscConfig+0x380>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c24:	6823      	ldr	r3, [r4, #0]
 8001c26:	f013 0f02 	tst.w	r3, #2
 8001c2a:	d055      	beq.n	8001cd8 <HAL_RCC_OscConfig+0x140>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c2c:	4b87      	ldr	r3, [pc, #540]	; (8001e4c <HAL_RCC_OscConfig+0x2b4>)
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	f013 0f0c 	tst.w	r3, #12
 8001c34:	d03e      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c36:	4b85      	ldr	r3, [pc, #532]	; (8001e4c <HAL_RCC_OscConfig+0x2b4>)
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c3e:	2b08      	cmp	r3, #8
 8001c40:	d033      	beq.n	8001caa <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c42:	68e3      	ldr	r3, [r4, #12]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d068      	beq.n	8001d1a <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c48:	2201      	movs	r2, #1
 8001c4a:	4b81      	ldr	r3, [pc, #516]	; (8001e50 <HAL_RCC_OscConfig+0x2b8>)
 8001c4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c4e:	f7fe fc85 	bl	800055c <HAL_GetTick>
 8001c52:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c54:	4b7d      	ldr	r3, [pc, #500]	; (8001e4c <HAL_RCC_OscConfig+0x2b4>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f013 0f02 	tst.w	r3, #2
 8001c5c:	d154      	bne.n	8001d08 <HAL_RCC_OscConfig+0x170>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c5e:	f7fe fc7d 	bl	800055c <HAL_GetTick>
 8001c62:	1b40      	subs	r0, r0, r5
 8001c64:	2802      	cmp	r0, #2
 8001c66:	d9f5      	bls.n	8001c54 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8001c68:	2003      	movs	r0, #3
 8001c6a:	e158      	b.n	8001f1e <HAL_RCC_OscConfig+0x386>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c6c:	4a77      	ldr	r2, [pc, #476]	; (8001e4c <HAL_RCC_OscConfig+0x2b4>)
 8001c6e:	6813      	ldr	r3, [r2, #0]
 8001c70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c74:	6013      	str	r3, [r2, #0]
 8001c76:	e7b5      	b.n	8001be4 <HAL_RCC_OscConfig+0x4c>
 8001c78:	4b74      	ldr	r3, [pc, #464]	; (8001e4c <HAL_RCC_OscConfig+0x2b4>)
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001c80:	601a      	str	r2, [r3, #0]
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001c88:	601a      	str	r2, [r3, #0]
 8001c8a:	e7ab      	b.n	8001be4 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8001c8c:	f7fe fc66 	bl	800055c <HAL_GetTick>
 8001c90:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c92:	4b6e      	ldr	r3, [pc, #440]	; (8001e4c <HAL_RCC_OscConfig+0x2b4>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001c9a:	d0c3      	beq.n	8001c24 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c9c:	f7fe fc5e 	bl	800055c <HAL_GetTick>
 8001ca0:	1b40      	subs	r0, r0, r5
 8001ca2:	2864      	cmp	r0, #100	; 0x64
 8001ca4:	d9f5      	bls.n	8001c92 <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 8001ca6:	2003      	movs	r0, #3
 8001ca8:	e139      	b.n	8001f1e <HAL_RCC_OscConfig+0x386>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001caa:	4b68      	ldr	r3, [pc, #416]	; (8001e4c <HAL_RCC_OscConfig+0x2b4>)
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001cb2:	d1c6      	bne.n	8001c42 <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cb4:	4b65      	ldr	r3, [pc, #404]	; (8001e4c <HAL_RCC_OscConfig+0x2b4>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f013 0f02 	tst.w	r3, #2
 8001cbc:	d004      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x130>
 8001cbe:	68e3      	ldr	r3, [r4, #12]
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d001      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x130>
        return HAL_ERROR;
 8001cc4:	2001      	movs	r0, #1
 8001cc6:	e12a      	b.n	8001f1e <HAL_RCC_OscConfig+0x386>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cc8:	4a60      	ldr	r2, [pc, #384]	; (8001e4c <HAL_RCC_OscConfig+0x2b4>)
 8001cca:	6813      	ldr	r3, [r2, #0]
 8001ccc:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001cd0:	6921      	ldr	r1, [r4, #16]
 8001cd2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001cd6:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cd8:	6823      	ldr	r3, [r4, #0]
 8001cda:	f013 0f08 	tst.w	r3, #8
 8001cde:	d040      	beq.n	8001d62 <HAL_RCC_OscConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001ce0:	6963      	ldr	r3, [r4, #20]
 8001ce2:	b363      	cbz	r3, 8001d3e <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	4b5b      	ldr	r3, [pc, #364]	; (8001e54 <HAL_RCC_OscConfig+0x2bc>)
 8001ce8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cea:	f7fe fc37 	bl	800055c <HAL_GetTick>
 8001cee:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cf0:	4b56      	ldr	r3, [pc, #344]	; (8001e4c <HAL_RCC_OscConfig+0x2b4>)
 8001cf2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cf4:	f013 0f02 	tst.w	r3, #2
 8001cf8:	d133      	bne.n	8001d62 <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cfa:	f7fe fc2f 	bl	800055c <HAL_GetTick>
 8001cfe:	1b40      	subs	r0, r0, r5
 8001d00:	2802      	cmp	r0, #2
 8001d02:	d9f5      	bls.n	8001cf0 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 8001d04:	2003      	movs	r0, #3
 8001d06:	e10a      	b.n	8001f1e <HAL_RCC_OscConfig+0x386>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d08:	4a50      	ldr	r2, [pc, #320]	; (8001e4c <HAL_RCC_OscConfig+0x2b4>)
 8001d0a:	6813      	ldr	r3, [r2, #0]
 8001d0c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001d10:	6921      	ldr	r1, [r4, #16]
 8001d12:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001d16:	6013      	str	r3, [r2, #0]
 8001d18:	e7de      	b.n	8001cd8 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	4b4c      	ldr	r3, [pc, #304]	; (8001e50 <HAL_RCC_OscConfig+0x2b8>)
 8001d1e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001d20:	f7fe fc1c 	bl	800055c <HAL_GetTick>
 8001d24:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d26:	4b49      	ldr	r3, [pc, #292]	; (8001e4c <HAL_RCC_OscConfig+0x2b4>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f013 0f02 	tst.w	r3, #2
 8001d2e:	d0d3      	beq.n	8001cd8 <HAL_RCC_OscConfig+0x140>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d30:	f7fe fc14 	bl	800055c <HAL_GetTick>
 8001d34:	1b40      	subs	r0, r0, r5
 8001d36:	2802      	cmp	r0, #2
 8001d38:	d9f5      	bls.n	8001d26 <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 8001d3a:	2003      	movs	r0, #3
 8001d3c:	e0ef      	b.n	8001f1e <HAL_RCC_OscConfig+0x386>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d3e:	2200      	movs	r2, #0
 8001d40:	4b44      	ldr	r3, [pc, #272]	; (8001e54 <HAL_RCC_OscConfig+0x2bc>)
 8001d42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d44:	f7fe fc0a 	bl	800055c <HAL_GetTick>
 8001d48:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d4a:	4b40      	ldr	r3, [pc, #256]	; (8001e4c <HAL_RCC_OscConfig+0x2b4>)
 8001d4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d4e:	f013 0f02 	tst.w	r3, #2
 8001d52:	d006      	beq.n	8001d62 <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d54:	f7fe fc02 	bl	800055c <HAL_GetTick>
 8001d58:	1b40      	subs	r0, r0, r5
 8001d5a:	2802      	cmp	r0, #2
 8001d5c:	d9f5      	bls.n	8001d4a <HAL_RCC_OscConfig+0x1b2>
        {
          return HAL_TIMEOUT;
 8001d5e:	2003      	movs	r0, #3
 8001d60:	e0dd      	b.n	8001f1e <HAL_RCC_OscConfig+0x386>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d62:	6823      	ldr	r3, [r4, #0]
 8001d64:	f013 0f04 	tst.w	r3, #4
 8001d68:	d079      	beq.n	8001e5e <HAL_RCC_OscConfig+0x2c6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d6a:	4b38      	ldr	r3, [pc, #224]	; (8001e4c <HAL_RCC_OscConfig+0x2b4>)
 8001d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6e:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001d72:	d133      	bne.n	8001ddc <HAL_RCC_OscConfig+0x244>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d74:	2300      	movs	r3, #0
 8001d76:	9301      	str	r3, [sp, #4]
 8001d78:	4b34      	ldr	r3, [pc, #208]	; (8001e4c <HAL_RCC_OscConfig+0x2b4>)
 8001d7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d7c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001d80:	641a      	str	r2, [r3, #64]	; 0x40
 8001d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d88:	9301      	str	r3, [sp, #4]
 8001d8a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001d8c:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d8e:	4b32      	ldr	r3, [pc, #200]	; (8001e58 <HAL_RCC_OscConfig+0x2c0>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001d96:	d023      	beq.n	8001de0 <HAL_RCC_OscConfig+0x248>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d98:	68a3      	ldr	r3, [r4, #8]
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d034      	beq.n	8001e08 <HAL_RCC_OscConfig+0x270>
 8001d9e:	2b05      	cmp	r3, #5
 8001da0:	d038      	beq.n	8001e14 <HAL_RCC_OscConfig+0x27c>
 8001da2:	4b2a      	ldr	r3, [pc, #168]	; (8001e4c <HAL_RCC_OscConfig+0x2b4>)
 8001da4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001da6:	f022 0201 	bic.w	r2, r2, #1
 8001daa:	671a      	str	r2, [r3, #112]	; 0x70
 8001dac:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001dae:	f022 0204 	bic.w	r2, r2, #4
 8001db2:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001db4:	68a3      	ldr	r3, [r4, #8]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d036      	beq.n	8001e28 <HAL_RCC_OscConfig+0x290>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dba:	f7fe fbcf 	bl	800055c <HAL_GetTick>
 8001dbe:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dc0:	4b22      	ldr	r3, [pc, #136]	; (8001e4c <HAL_RCC_OscConfig+0x2b4>)
 8001dc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dc4:	f013 0f02 	tst.w	r3, #2
 8001dc8:	d148      	bne.n	8001e5c <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dca:	f7fe fbc7 	bl	800055c <HAL_GetTick>
 8001dce:	1b80      	subs	r0, r0, r6
 8001dd0:	f241 3388 	movw	r3, #5000	; 0x1388
 8001dd4:	4298      	cmp	r0, r3
 8001dd6:	d9f3      	bls.n	8001dc0 <HAL_RCC_OscConfig+0x228>
        {
          return HAL_TIMEOUT;
 8001dd8:	2003      	movs	r0, #3
 8001dda:	e0a0      	b.n	8001f1e <HAL_RCC_OscConfig+0x386>
    FlagStatus       pwrclkchanged = RESET;
 8001ddc:	2500      	movs	r5, #0
 8001dde:	e7d6      	b.n	8001d8e <HAL_RCC_OscConfig+0x1f6>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001de0:	4a1d      	ldr	r2, [pc, #116]	; (8001e58 <HAL_RCC_OscConfig+0x2c0>)
 8001de2:	6813      	ldr	r3, [r2, #0]
 8001de4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001de8:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001dea:	f7fe fbb7 	bl	800055c <HAL_GetTick>
 8001dee:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001df0:	4b19      	ldr	r3, [pc, #100]	; (8001e58 <HAL_RCC_OscConfig+0x2c0>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001df8:	d1ce      	bne.n	8001d98 <HAL_RCC_OscConfig+0x200>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dfa:	f7fe fbaf 	bl	800055c <HAL_GetTick>
 8001dfe:	1b80      	subs	r0, r0, r6
 8001e00:	2802      	cmp	r0, #2
 8001e02:	d9f5      	bls.n	8001df0 <HAL_RCC_OscConfig+0x258>
          return HAL_TIMEOUT;
 8001e04:	2003      	movs	r0, #3
 8001e06:	e08a      	b.n	8001f1e <HAL_RCC_OscConfig+0x386>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e08:	4a10      	ldr	r2, [pc, #64]	; (8001e4c <HAL_RCC_OscConfig+0x2b4>)
 8001e0a:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8001e0c:	f043 0301 	orr.w	r3, r3, #1
 8001e10:	6713      	str	r3, [r2, #112]	; 0x70
 8001e12:	e7cf      	b.n	8001db4 <HAL_RCC_OscConfig+0x21c>
 8001e14:	4b0d      	ldr	r3, [pc, #52]	; (8001e4c <HAL_RCC_OscConfig+0x2b4>)
 8001e16:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001e18:	f042 0204 	orr.w	r2, r2, #4
 8001e1c:	671a      	str	r2, [r3, #112]	; 0x70
 8001e1e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001e20:	f042 0201 	orr.w	r2, r2, #1
 8001e24:	671a      	str	r2, [r3, #112]	; 0x70
 8001e26:	e7c5      	b.n	8001db4 <HAL_RCC_OscConfig+0x21c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e28:	f7fe fb98 	bl	800055c <HAL_GetTick>
 8001e2c:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e2e:	4b07      	ldr	r3, [pc, #28]	; (8001e4c <HAL_RCC_OscConfig+0x2b4>)
 8001e30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e32:	f013 0f02 	tst.w	r3, #2
 8001e36:	d011      	beq.n	8001e5c <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e38:	f7fe fb90 	bl	800055c <HAL_GetTick>
 8001e3c:	1b80      	subs	r0, r0, r6
 8001e3e:	f241 3388 	movw	r3, #5000	; 0x1388
 8001e42:	4298      	cmp	r0, r3
 8001e44:	d9f3      	bls.n	8001e2e <HAL_RCC_OscConfig+0x296>
        {
          return HAL_TIMEOUT;
 8001e46:	2003      	movs	r0, #3
 8001e48:	e069      	b.n	8001f1e <HAL_RCC_OscConfig+0x386>
 8001e4a:	bf00      	nop
 8001e4c:	40023800 	.word	0x40023800
 8001e50:	42470000 	.word	0x42470000
 8001e54:	42470e80 	.word	0x42470e80
 8001e58:	40007000 	.word	0x40007000
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e5c:	b9e5      	cbnz	r5, 8001e98 <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e5e:	69a3      	ldr	r3, [r4, #24]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d05b      	beq.n	8001f1c <HAL_RCC_OscConfig+0x384>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e64:	4a30      	ldr	r2, [pc, #192]	; (8001f28 <HAL_RCC_OscConfig+0x390>)
 8001e66:	6892      	ldr	r2, [r2, #8]
 8001e68:	f002 020c 	and.w	r2, r2, #12
 8001e6c:	2a08      	cmp	r2, #8
 8001e6e:	d058      	beq.n	8001f22 <HAL_RCC_OscConfig+0x38a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e70:	2b02      	cmp	r3, #2
 8001e72:	d017      	beq.n	8001ea4 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e74:	2200      	movs	r2, #0
 8001e76:	4b2d      	ldr	r3, [pc, #180]	; (8001f2c <HAL_RCC_OscConfig+0x394>)
 8001e78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e7a:	f7fe fb6f 	bl	800055c <HAL_GetTick>
 8001e7e:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e80:	4b29      	ldr	r3, [pc, #164]	; (8001f28 <HAL_RCC_OscConfig+0x390>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001e88:	d042      	beq.n	8001f10 <HAL_RCC_OscConfig+0x378>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e8a:	f7fe fb67 	bl	800055c <HAL_GetTick>
 8001e8e:	1b00      	subs	r0, r0, r4
 8001e90:	2802      	cmp	r0, #2
 8001e92:	d9f5      	bls.n	8001e80 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001e94:	2003      	movs	r0, #3
 8001e96:	e042      	b.n	8001f1e <HAL_RCC_OscConfig+0x386>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e98:	4a23      	ldr	r2, [pc, #140]	; (8001f28 <HAL_RCC_OscConfig+0x390>)
 8001e9a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001e9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ea0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ea2:	e7dc      	b.n	8001e5e <HAL_RCC_OscConfig+0x2c6>
        __HAL_RCC_PLL_DISABLE();
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	4b21      	ldr	r3, [pc, #132]	; (8001f2c <HAL_RCC_OscConfig+0x394>)
 8001ea8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001eaa:	f7fe fb57 	bl	800055c <HAL_GetTick>
 8001eae:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eb0:	4b1d      	ldr	r3, [pc, #116]	; (8001f28 <HAL_RCC_OscConfig+0x390>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001eb8:	d006      	beq.n	8001ec8 <HAL_RCC_OscConfig+0x330>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001eba:	f7fe fb4f 	bl	800055c <HAL_GetTick>
 8001ebe:	1b40      	subs	r0, r0, r5
 8001ec0:	2802      	cmp	r0, #2
 8001ec2:	d9f5      	bls.n	8001eb0 <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 8001ec4:	2003      	movs	r0, #3
 8001ec6:	e02a      	b.n	8001f1e <HAL_RCC_OscConfig+0x386>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001ec8:	69e3      	ldr	r3, [r4, #28]
 8001eca:	6a22      	ldr	r2, [r4, #32]
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001ed0:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001ed4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001ed6:	0852      	lsrs	r2, r2, #1
 8001ed8:	3a01      	subs	r2, #1
 8001eda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001ede:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001ee0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001ee4:	4a10      	ldr	r2, [pc, #64]	; (8001f28 <HAL_RCC_OscConfig+0x390>)
 8001ee6:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8001ee8:	2201      	movs	r2, #1
 8001eea:	4b10      	ldr	r3, [pc, #64]	; (8001f2c <HAL_RCC_OscConfig+0x394>)
 8001eec:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001eee:	f7fe fb35 	bl	800055c <HAL_GetTick>
 8001ef2:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ef4:	4b0c      	ldr	r3, [pc, #48]	; (8001f28 <HAL_RCC_OscConfig+0x390>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001efc:	d106      	bne.n	8001f0c <HAL_RCC_OscConfig+0x374>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001efe:	f7fe fb2d 	bl	800055c <HAL_GetTick>
 8001f02:	1b00      	subs	r0, r0, r4
 8001f04:	2802      	cmp	r0, #2
 8001f06:	d9f5      	bls.n	8001ef4 <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 8001f08:	2003      	movs	r0, #3
 8001f0a:	e008      	b.n	8001f1e <HAL_RCC_OscConfig+0x386>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8001f0c:	2000      	movs	r0, #0
 8001f0e:	e006      	b.n	8001f1e <HAL_RCC_OscConfig+0x386>
 8001f10:	2000      	movs	r0, #0
 8001f12:	e004      	b.n	8001f1e <HAL_RCC_OscConfig+0x386>
    return HAL_ERROR;
 8001f14:	2001      	movs	r0, #1
 8001f16:	4770      	bx	lr
        return HAL_ERROR;
 8001f18:	2001      	movs	r0, #1
 8001f1a:	e000      	b.n	8001f1e <HAL_RCC_OscConfig+0x386>
  return HAL_OK;
 8001f1c:	2000      	movs	r0, #0
}
 8001f1e:	b002      	add	sp, #8
 8001f20:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8001f22:	2001      	movs	r0, #1
 8001f24:	e7fb      	b.n	8001f1e <HAL_RCC_OscConfig+0x386>
 8001f26:	bf00      	nop
 8001f28:	40023800 	.word	0x40023800
 8001f2c:	42470060 	.word	0x42470060

08001f30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f32:	4b31      	ldr	r3, [pc, #196]	; (8001ff8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	f003 030c 	and.w	r3, r3, #12
 8001f3a:	2b04      	cmp	r3, #4
 8001f3c:	d059      	beq.n	8001ff2 <HAL_RCC_GetSysClockFreq+0xc2>
 8001f3e:	2b08      	cmp	r3, #8
 8001f40:	d001      	beq.n	8001f46 <HAL_RCC_GetSysClockFreq+0x16>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f42:	482e      	ldr	r0, [pc, #184]	; (8001ffc <HAL_RCC_GetSysClockFreq+0xcc>)
 8001f44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f46:	4b2c      	ldr	r3, [pc, #176]	; (8001ff8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001f48:	685a      	ldr	r2, [r3, #4]
 8001f4a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001f54:	d02a      	beq.n	8001fac <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f56:	4b28      	ldr	r3, [pc, #160]	; (8001ff8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8001f5e:	461e      	mov	r6, r3
 8001f60:	2700      	movs	r7, #0
 8001f62:	015c      	lsls	r4, r3, #5
 8001f64:	2500      	movs	r5, #0
 8001f66:	1ae4      	subs	r4, r4, r3
 8001f68:	eb65 0507 	sbc.w	r5, r5, r7
 8001f6c:	01a9      	lsls	r1, r5, #6
 8001f6e:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8001f72:	01a0      	lsls	r0, r4, #6
 8001f74:	1b00      	subs	r0, r0, r4
 8001f76:	eb61 0105 	sbc.w	r1, r1, r5
 8001f7a:	00cb      	lsls	r3, r1, #3
 8001f7c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001f80:	00c4      	lsls	r4, r0, #3
 8001f82:	19a0      	adds	r0, r4, r6
 8001f84:	eb43 0107 	adc.w	r1, r3, r7
 8001f88:	024b      	lsls	r3, r1, #9
 8001f8a:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 8001f8e:	0244      	lsls	r4, r0, #9
 8001f90:	4620      	mov	r0, r4
 8001f92:	4619      	mov	r1, r3
 8001f94:	2300      	movs	r3, #0
 8001f96:	f7fe f933 	bl	8000200 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001f9a:	4b17      	ldr	r3, [pc, #92]	; (8001ff8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8001fa6:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8001faa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fac:	4b12      	ldr	r3, [pc, #72]	; (8001ff8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8001fb4:	461e      	mov	r6, r3
 8001fb6:	2700      	movs	r7, #0
 8001fb8:	015c      	lsls	r4, r3, #5
 8001fba:	2500      	movs	r5, #0
 8001fbc:	1ae4      	subs	r4, r4, r3
 8001fbe:	eb65 0507 	sbc.w	r5, r5, r7
 8001fc2:	01a9      	lsls	r1, r5, #6
 8001fc4:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8001fc8:	01a0      	lsls	r0, r4, #6
 8001fca:	1b00      	subs	r0, r0, r4
 8001fcc:	eb61 0105 	sbc.w	r1, r1, r5
 8001fd0:	00cb      	lsls	r3, r1, #3
 8001fd2:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001fd6:	00c4      	lsls	r4, r0, #3
 8001fd8:	19a0      	adds	r0, r4, r6
 8001fda:	eb43 0107 	adc.w	r1, r3, r7
 8001fde:	028b      	lsls	r3, r1, #10
 8001fe0:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8001fe4:	0284      	lsls	r4, r0, #10
 8001fe6:	4620      	mov	r0, r4
 8001fe8:	4619      	mov	r1, r3
 8001fea:	2300      	movs	r3, #0
 8001fec:	f7fe f908 	bl	8000200 <__aeabi_uldivmod>
 8001ff0:	e7d3      	b.n	8001f9a <HAL_RCC_GetSysClockFreq+0x6a>
      sysclockfreq = HSE_VALUE;
 8001ff2:	4803      	ldr	r0, [pc, #12]	; (8002000 <HAL_RCC_GetSysClockFreq+0xd0>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001ff4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	40023800 	.word	0x40023800
 8001ffc:	00f42400 	.word	0x00f42400
 8002000:	007a1200 	.word	0x007a1200

08002004 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8002004:	2800      	cmp	r0, #0
 8002006:	f000 809d 	beq.w	8002144 <HAL_RCC_ClockConfig+0x140>
{
 800200a:	b570      	push	{r4, r5, r6, lr}
 800200c:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800200e:	4b4f      	ldr	r3, [pc, #316]	; (800214c <HAL_RCC_ClockConfig+0x148>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 030f 	and.w	r3, r3, #15
 8002016:	428b      	cmp	r3, r1
 8002018:	d209      	bcs.n	800202e <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800201a:	b2cb      	uxtb	r3, r1
 800201c:	4a4b      	ldr	r2, [pc, #300]	; (800214c <HAL_RCC_ClockConfig+0x148>)
 800201e:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002020:	6813      	ldr	r3, [r2, #0]
 8002022:	f003 030f 	and.w	r3, r3, #15
 8002026:	4299      	cmp	r1, r3
 8002028:	d001      	beq.n	800202e <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
 800202a:	2001      	movs	r0, #1
 800202c:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800202e:	6823      	ldr	r3, [r4, #0]
 8002030:	f013 0f02 	tst.w	r3, #2
 8002034:	d017      	beq.n	8002066 <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002036:	f013 0f04 	tst.w	r3, #4
 800203a:	d004      	beq.n	8002046 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800203c:	4a44      	ldr	r2, [pc, #272]	; (8002150 <HAL_RCC_ClockConfig+0x14c>)
 800203e:	6893      	ldr	r3, [r2, #8]
 8002040:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002044:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002046:	6823      	ldr	r3, [r4, #0]
 8002048:	f013 0f08 	tst.w	r3, #8
 800204c:	d004      	beq.n	8002058 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800204e:	4a40      	ldr	r2, [pc, #256]	; (8002150 <HAL_RCC_ClockConfig+0x14c>)
 8002050:	6893      	ldr	r3, [r2, #8]
 8002052:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002056:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002058:	4a3d      	ldr	r2, [pc, #244]	; (8002150 <HAL_RCC_ClockConfig+0x14c>)
 800205a:	6893      	ldr	r3, [r2, #8]
 800205c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002060:	68a0      	ldr	r0, [r4, #8]
 8002062:	4303      	orrs	r3, r0
 8002064:	6093      	str	r3, [r2, #8]
 8002066:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002068:	6823      	ldr	r3, [r4, #0]
 800206a:	f013 0f01 	tst.w	r3, #1
 800206e:	d032      	beq.n	80020d6 <HAL_RCC_ClockConfig+0xd2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002070:	6863      	ldr	r3, [r4, #4]
 8002072:	2b01      	cmp	r3, #1
 8002074:	d021      	beq.n	80020ba <HAL_RCC_ClockConfig+0xb6>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002076:	1e9a      	subs	r2, r3, #2
 8002078:	2a01      	cmp	r2, #1
 800207a:	d925      	bls.n	80020c8 <HAL_RCC_ClockConfig+0xc4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800207c:	4a34      	ldr	r2, [pc, #208]	; (8002150 <HAL_RCC_ClockConfig+0x14c>)
 800207e:	6812      	ldr	r2, [r2, #0]
 8002080:	f012 0f02 	tst.w	r2, #2
 8002084:	d060      	beq.n	8002148 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002086:	4932      	ldr	r1, [pc, #200]	; (8002150 <HAL_RCC_ClockConfig+0x14c>)
 8002088:	688a      	ldr	r2, [r1, #8]
 800208a:	f022 0203 	bic.w	r2, r2, #3
 800208e:	4313      	orrs	r3, r2
 8002090:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8002092:	f7fe fa63 	bl	800055c <HAL_GetTick>
 8002096:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002098:	4b2d      	ldr	r3, [pc, #180]	; (8002150 <HAL_RCC_ClockConfig+0x14c>)
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	f003 030c 	and.w	r3, r3, #12
 80020a0:	6862      	ldr	r2, [r4, #4]
 80020a2:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80020a6:	d016      	beq.n	80020d6 <HAL_RCC_ClockConfig+0xd2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020a8:	f7fe fa58 	bl	800055c <HAL_GetTick>
 80020ac:	1b80      	subs	r0, r0, r6
 80020ae:	f241 3388 	movw	r3, #5000	; 0x1388
 80020b2:	4298      	cmp	r0, r3
 80020b4:	d9f0      	bls.n	8002098 <HAL_RCC_ClockConfig+0x94>
        return HAL_TIMEOUT;
 80020b6:	2003      	movs	r0, #3
 80020b8:	bd70      	pop	{r4, r5, r6, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ba:	4a25      	ldr	r2, [pc, #148]	; (8002150 <HAL_RCC_ClockConfig+0x14c>)
 80020bc:	6812      	ldr	r2, [r2, #0]
 80020be:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80020c2:	d1e0      	bne.n	8002086 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 80020c4:	2001      	movs	r0, #1
 80020c6:	bd70      	pop	{r4, r5, r6, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020c8:	4a21      	ldr	r2, [pc, #132]	; (8002150 <HAL_RCC_ClockConfig+0x14c>)
 80020ca:	6812      	ldr	r2, [r2, #0]
 80020cc:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80020d0:	d1d9      	bne.n	8002086 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 80020d2:	2001      	movs	r0, #1
 80020d4:	bd70      	pop	{r4, r5, r6, pc}
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020d6:	4b1d      	ldr	r3, [pc, #116]	; (800214c <HAL_RCC_ClockConfig+0x148>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 030f 	and.w	r3, r3, #15
 80020de:	429d      	cmp	r5, r3
 80020e0:	d209      	bcs.n	80020f6 <HAL_RCC_ClockConfig+0xf2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020e2:	b2ea      	uxtb	r2, r5
 80020e4:	4b19      	ldr	r3, [pc, #100]	; (800214c <HAL_RCC_ClockConfig+0x148>)
 80020e6:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 030f 	and.w	r3, r3, #15
 80020ee:	429d      	cmp	r5, r3
 80020f0:	d001      	beq.n	80020f6 <HAL_RCC_ClockConfig+0xf2>
      return HAL_ERROR;
 80020f2:	2001      	movs	r0, #1
}
 80020f4:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020f6:	6823      	ldr	r3, [r4, #0]
 80020f8:	f013 0f04 	tst.w	r3, #4
 80020fc:	d006      	beq.n	800210c <HAL_RCC_ClockConfig+0x108>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020fe:	4a14      	ldr	r2, [pc, #80]	; (8002150 <HAL_RCC_ClockConfig+0x14c>)
 8002100:	6893      	ldr	r3, [r2, #8]
 8002102:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8002106:	68e1      	ldr	r1, [r4, #12]
 8002108:	430b      	orrs	r3, r1
 800210a:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800210c:	6823      	ldr	r3, [r4, #0]
 800210e:	f013 0f08 	tst.w	r3, #8
 8002112:	d007      	beq.n	8002124 <HAL_RCC_ClockConfig+0x120>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002114:	4a0e      	ldr	r2, [pc, #56]	; (8002150 <HAL_RCC_ClockConfig+0x14c>)
 8002116:	6893      	ldr	r3, [r2, #8]
 8002118:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800211c:	6921      	ldr	r1, [r4, #16]
 800211e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002122:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002124:	f7ff ff04 	bl	8001f30 <HAL_RCC_GetSysClockFreq>
 8002128:	4b09      	ldr	r3, [pc, #36]	; (8002150 <HAL_RCC_ClockConfig+0x14c>)
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002130:	4a08      	ldr	r2, [pc, #32]	; (8002154 <HAL_RCC_ClockConfig+0x150>)
 8002132:	5cd3      	ldrb	r3, [r2, r3]
 8002134:	40d8      	lsrs	r0, r3
 8002136:	4b08      	ldr	r3, [pc, #32]	; (8002158 <HAL_RCC_ClockConfig+0x154>)
 8002138:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800213a:	2000      	movs	r0, #0
 800213c:	f002 fa0e 	bl	800455c <HAL_InitTick>
  return HAL_OK;
 8002140:	2000      	movs	r0, #0
 8002142:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8002144:	2001      	movs	r0, #1
 8002146:	4770      	bx	lr
        return HAL_ERROR;
 8002148:	2001      	movs	r0, #1
 800214a:	bd70      	pop	{r4, r5, r6, pc}
 800214c:	40023c00 	.word	0x40023c00
 8002150:	40023800 	.word	0x40023800
 8002154:	08004c34 	.word	0x08004c34
 8002158:	20000008 	.word	0x20000008

0800215c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 800215c:	4b01      	ldr	r3, [pc, #4]	; (8002164 <HAL_RCC_GetHCLKFreq+0x8>)
 800215e:	6818      	ldr	r0, [r3, #0]
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop
 8002164:	20000008 	.word	0x20000008

08002168 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002168:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800216a:	f7ff fff7 	bl	800215c <HAL_RCC_GetHCLKFreq>
 800216e:	4b04      	ldr	r3, [pc, #16]	; (8002180 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8002176:	4a03      	ldr	r2, [pc, #12]	; (8002184 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002178:	5cd3      	ldrb	r3, [r2, r3]
}
 800217a:	40d8      	lsrs	r0, r3
 800217c:	bd08      	pop	{r3, pc}
 800217e:	bf00      	nop
 8002180:	40023800 	.word	0x40023800
 8002184:	08004c44 	.word	0x08004c44

08002188 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002188:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800218a:	f7ff ffe7 	bl	800215c <HAL_RCC_GetHCLKFreq>
 800218e:	4b04      	ldr	r3, [pc, #16]	; (80021a0 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8002196:	4a03      	ldr	r2, [pc, #12]	; (80021a4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002198:	5cd3      	ldrb	r3, [r2, r3]
}
 800219a:	40d8      	lsrs	r0, r3
 800219c:	bd08      	pop	{r3, pc}
 800219e:	bf00      	nop
 80021a0:	40023800 	.word	0x40023800
 80021a4:	08004c44 	.word	0x08004c44

080021a8 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80021a8:	230f      	movs	r3, #15
 80021aa:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80021ac:	4b0b      	ldr	r3, [pc, #44]	; (80021dc <HAL_RCC_GetClockConfig+0x34>)
 80021ae:	689a      	ldr	r2, [r3, #8]
 80021b0:	f002 0203 	and.w	r2, r2, #3
 80021b4:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80021b6:	689a      	ldr	r2, [r3, #8]
 80021b8:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80021bc:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80021be:	689a      	ldr	r2, [r3, #8]
 80021c0:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 80021c4:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	08db      	lsrs	r3, r3, #3
 80021ca:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80021ce:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80021d0:	4b03      	ldr	r3, [pc, #12]	; (80021e0 <HAL_RCC_GetClockConfig+0x38>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 030f 	and.w	r3, r3, #15
 80021d8:	600b      	str	r3, [r1, #0]
 80021da:	4770      	bx	lr
 80021dc:	40023800 	.word	0x40023800
 80021e0:	40023c00 	.word	0x40023c00

080021e4 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80021e4:	4770      	bx	lr

080021e6 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80021e6:	6802      	ldr	r2, [r0, #0]
 80021e8:	68d3      	ldr	r3, [r2, #12]
 80021ea:	f043 0301 	orr.w	r3, r3, #1
 80021ee:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80021f0:	6802      	ldr	r2, [r0, #0]
 80021f2:	6893      	ldr	r3, [r2, #8]
 80021f4:	f003 0307 	and.w	r3, r3, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021f8:	2b06      	cmp	r3, #6
 80021fa:	d003      	beq.n	8002204 <HAL_TIM_Base_Start_IT+0x1e>
  {
    __HAL_TIM_ENABLE(htim);
 80021fc:	6813      	ldr	r3, [r2, #0]
 80021fe:	f043 0301 	orr.w	r3, r3, #1
 8002202:	6013      	str	r3, [r2, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 8002204:	2000      	movs	r0, #0
 8002206:	4770      	bx	lr

08002208 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002208:	4770      	bx	lr

0800220a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800220a:	4770      	bx	lr

0800220c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800220c:	4770      	bx	lr

0800220e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800220e:	4770      	bx	lr

08002210 <HAL_TIM_IRQHandler>:
{
 8002210:	b510      	push	{r4, lr}
 8002212:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002214:	6803      	ldr	r3, [r0, #0]
 8002216:	691a      	ldr	r2, [r3, #16]
 8002218:	f012 0f02 	tst.w	r2, #2
 800221c:	d011      	beq.n	8002242 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800221e:	68da      	ldr	r2, [r3, #12]
 8002220:	f012 0f02 	tst.w	r2, #2
 8002224:	d00d      	beq.n	8002242 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002226:	f06f 0202 	mvn.w	r2, #2
 800222a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800222c:	2301      	movs	r3, #1
 800222e:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002230:	6803      	ldr	r3, [r0, #0]
 8002232:	699b      	ldr	r3, [r3, #24]
 8002234:	f013 0f03 	tst.w	r3, #3
 8002238:	d070      	beq.n	800231c <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 800223a:	f7ff ffe6 	bl	800220a <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800223e:	2300      	movs	r3, #0
 8002240:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002242:	6823      	ldr	r3, [r4, #0]
 8002244:	691a      	ldr	r2, [r3, #16]
 8002246:	f012 0f04 	tst.w	r2, #4
 800224a:	d012      	beq.n	8002272 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800224c:	68da      	ldr	r2, [r3, #12]
 800224e:	f012 0f04 	tst.w	r2, #4
 8002252:	d00e      	beq.n	8002272 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002254:	f06f 0204 	mvn.w	r2, #4
 8002258:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800225a:	2302      	movs	r3, #2
 800225c:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800225e:	6823      	ldr	r3, [r4, #0]
 8002260:	699b      	ldr	r3, [r3, #24]
 8002262:	f413 7f40 	tst.w	r3, #768	; 0x300
 8002266:	d05f      	beq.n	8002328 <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 8002268:	4620      	mov	r0, r4
 800226a:	f7ff ffce 	bl	800220a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800226e:	2300      	movs	r3, #0
 8002270:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002272:	6823      	ldr	r3, [r4, #0]
 8002274:	691a      	ldr	r2, [r3, #16]
 8002276:	f012 0f08 	tst.w	r2, #8
 800227a:	d012      	beq.n	80022a2 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800227c:	68da      	ldr	r2, [r3, #12]
 800227e:	f012 0f08 	tst.w	r2, #8
 8002282:	d00e      	beq.n	80022a2 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002284:	f06f 0208 	mvn.w	r2, #8
 8002288:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800228a:	2304      	movs	r3, #4
 800228c:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800228e:	6823      	ldr	r3, [r4, #0]
 8002290:	69db      	ldr	r3, [r3, #28]
 8002292:	f013 0f03 	tst.w	r3, #3
 8002296:	d04e      	beq.n	8002336 <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 8002298:	4620      	mov	r0, r4
 800229a:	f7ff ffb6 	bl	800220a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800229e:	2300      	movs	r3, #0
 80022a0:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80022a2:	6823      	ldr	r3, [r4, #0]
 80022a4:	691a      	ldr	r2, [r3, #16]
 80022a6:	f012 0f10 	tst.w	r2, #16
 80022aa:	d012      	beq.n	80022d2 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80022ac:	68da      	ldr	r2, [r3, #12]
 80022ae:	f012 0f10 	tst.w	r2, #16
 80022b2:	d00e      	beq.n	80022d2 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80022b4:	f06f 0210 	mvn.w	r2, #16
 80022b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80022ba:	2308      	movs	r3, #8
 80022bc:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80022be:	6823      	ldr	r3, [r4, #0]
 80022c0:	69db      	ldr	r3, [r3, #28]
 80022c2:	f413 7f40 	tst.w	r3, #768	; 0x300
 80022c6:	d03d      	beq.n	8002344 <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 80022c8:	4620      	mov	r0, r4
 80022ca:	f7ff ff9e 	bl	800220a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022ce:	2300      	movs	r3, #0
 80022d0:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80022d2:	6823      	ldr	r3, [r4, #0]
 80022d4:	691a      	ldr	r2, [r3, #16]
 80022d6:	f012 0f01 	tst.w	r2, #1
 80022da:	d003      	beq.n	80022e4 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80022dc:	68da      	ldr	r2, [r3, #12]
 80022de:	f012 0f01 	tst.w	r2, #1
 80022e2:	d136      	bne.n	8002352 <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80022e4:	6823      	ldr	r3, [r4, #0]
 80022e6:	691a      	ldr	r2, [r3, #16]
 80022e8:	f012 0f80 	tst.w	r2, #128	; 0x80
 80022ec:	d003      	beq.n	80022f6 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80022ee:	68da      	ldr	r2, [r3, #12]
 80022f0:	f012 0f80 	tst.w	r2, #128	; 0x80
 80022f4:	d134      	bne.n	8002360 <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80022f6:	6823      	ldr	r3, [r4, #0]
 80022f8:	691a      	ldr	r2, [r3, #16]
 80022fa:	f012 0f40 	tst.w	r2, #64	; 0x40
 80022fe:	d003      	beq.n	8002308 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002300:	68da      	ldr	r2, [r3, #12]
 8002302:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002306:	d132      	bne.n	800236e <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002308:	6823      	ldr	r3, [r4, #0]
 800230a:	691a      	ldr	r2, [r3, #16]
 800230c:	f012 0f20 	tst.w	r2, #32
 8002310:	d003      	beq.n	800231a <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002312:	68da      	ldr	r2, [r3, #12]
 8002314:	f012 0f20 	tst.w	r2, #32
 8002318:	d130      	bne.n	800237c <HAL_TIM_IRQHandler+0x16c>
 800231a:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800231c:	f7ff ff74 	bl	8002208 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002320:	4620      	mov	r0, r4
 8002322:	f7ff ff73 	bl	800220c <HAL_TIM_PWM_PulseFinishedCallback>
 8002326:	e78a      	b.n	800223e <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002328:	4620      	mov	r0, r4
 800232a:	f7ff ff6d 	bl	8002208 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800232e:	4620      	mov	r0, r4
 8002330:	f7ff ff6c 	bl	800220c <HAL_TIM_PWM_PulseFinishedCallback>
 8002334:	e79b      	b.n	800226e <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002336:	4620      	mov	r0, r4
 8002338:	f7ff ff66 	bl	8002208 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800233c:	4620      	mov	r0, r4
 800233e:	f7ff ff65 	bl	800220c <HAL_TIM_PWM_PulseFinishedCallback>
 8002342:	e7ac      	b.n	800229e <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002344:	4620      	mov	r0, r4
 8002346:	f7ff ff5f 	bl	8002208 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800234a:	4620      	mov	r0, r4
 800234c:	f7ff ff5e 	bl	800220c <HAL_TIM_PWM_PulseFinishedCallback>
 8002350:	e7bd      	b.n	80022ce <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002352:	f06f 0201 	mvn.w	r2, #1
 8002356:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002358:	4620      	mov	r0, r4
 800235a:	f002 f8c7 	bl	80044ec <HAL_TIM_PeriodElapsedCallback>
 800235e:	e7c1      	b.n	80022e4 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002360:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002364:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002366:	4620      	mov	r0, r4
 8002368:	f000 f890 	bl	800248c <HAL_TIMEx_BreakCallback>
 800236c:	e7c3      	b.n	80022f6 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800236e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002372:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002374:	4620      	mov	r0, r4
 8002376:	f7ff ff4a 	bl	800220e <HAL_TIM_TriggerCallback>
 800237a:	e7c5      	b.n	8002308 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800237c:	f06f 0220 	mvn.w	r2, #32
 8002380:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8002382:	4620      	mov	r0, r4
 8002384:	f000 f881 	bl	800248a <HAL_TIMEx_CommutCallback>
}
 8002388:	e7c7      	b.n	800231a <HAL_TIM_IRQHandler+0x10a>
	...

0800238c <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800238c:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800238e:	4a31      	ldr	r2, [pc, #196]	; (8002454 <TIM_Base_SetConfig+0xc8>)
 8002390:	4290      	cmp	r0, r2
 8002392:	d012      	beq.n	80023ba <TIM_Base_SetConfig+0x2e>
 8002394:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002398:	d00f      	beq.n	80023ba <TIM_Base_SetConfig+0x2e>
 800239a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800239e:	4290      	cmp	r0, r2
 80023a0:	d00b      	beq.n	80023ba <TIM_Base_SetConfig+0x2e>
 80023a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80023a6:	4290      	cmp	r0, r2
 80023a8:	d007      	beq.n	80023ba <TIM_Base_SetConfig+0x2e>
 80023aa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80023ae:	4290      	cmp	r0, r2
 80023b0:	d003      	beq.n	80023ba <TIM_Base_SetConfig+0x2e>
 80023b2:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80023b6:	4290      	cmp	r0, r2
 80023b8:	d103      	bne.n	80023c2 <TIM_Base_SetConfig+0x36>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80023ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80023be:	684a      	ldr	r2, [r1, #4]
 80023c0:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80023c2:	4a24      	ldr	r2, [pc, #144]	; (8002454 <TIM_Base_SetConfig+0xc8>)
 80023c4:	4290      	cmp	r0, r2
 80023c6:	d02a      	beq.n	800241e <TIM_Base_SetConfig+0x92>
 80023c8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80023cc:	d027      	beq.n	800241e <TIM_Base_SetConfig+0x92>
 80023ce:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80023d2:	4290      	cmp	r0, r2
 80023d4:	d023      	beq.n	800241e <TIM_Base_SetConfig+0x92>
 80023d6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80023da:	4290      	cmp	r0, r2
 80023dc:	d01f      	beq.n	800241e <TIM_Base_SetConfig+0x92>
 80023de:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80023e2:	4290      	cmp	r0, r2
 80023e4:	d01b      	beq.n	800241e <TIM_Base_SetConfig+0x92>
 80023e6:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80023ea:	4290      	cmp	r0, r2
 80023ec:	d017      	beq.n	800241e <TIM_Base_SetConfig+0x92>
 80023ee:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 80023f2:	4290      	cmp	r0, r2
 80023f4:	d013      	beq.n	800241e <TIM_Base_SetConfig+0x92>
 80023f6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80023fa:	4290      	cmp	r0, r2
 80023fc:	d00f      	beq.n	800241e <TIM_Base_SetConfig+0x92>
 80023fe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002402:	4290      	cmp	r0, r2
 8002404:	d00b      	beq.n	800241e <TIM_Base_SetConfig+0x92>
 8002406:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 800240a:	4290      	cmp	r0, r2
 800240c:	d007      	beq.n	800241e <TIM_Base_SetConfig+0x92>
 800240e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002412:	4290      	cmp	r0, r2
 8002414:	d003      	beq.n	800241e <TIM_Base_SetConfig+0x92>
 8002416:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800241a:	4290      	cmp	r0, r2
 800241c:	d103      	bne.n	8002426 <TIM_Base_SetConfig+0x9a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800241e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002422:	68ca      	ldr	r2, [r1, #12]
 8002424:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002426:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800242a:	694a      	ldr	r2, [r1, #20]
 800242c:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800242e:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002430:	688b      	ldr	r3, [r1, #8]
 8002432:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002434:	680b      	ldr	r3, [r1, #0]
 8002436:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002438:	4b06      	ldr	r3, [pc, #24]	; (8002454 <TIM_Base_SetConfig+0xc8>)
 800243a:	4298      	cmp	r0, r3
 800243c:	d006      	beq.n	800244c <TIM_Base_SetConfig+0xc0>
 800243e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002442:	4298      	cmp	r0, r3
 8002444:	d002      	beq.n	800244c <TIM_Base_SetConfig+0xc0>
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002446:	2301      	movs	r3, #1
 8002448:	6143      	str	r3, [r0, #20]
 800244a:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 800244c:	690b      	ldr	r3, [r1, #16]
 800244e:	6303      	str	r3, [r0, #48]	; 0x30
 8002450:	e7f9      	b.n	8002446 <TIM_Base_SetConfig+0xba>
 8002452:	bf00      	nop
 8002454:	40010000 	.word	0x40010000

08002458 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8002458:	b1a8      	cbz	r0, 8002486 <HAL_TIM_Base_Init+0x2e>
{
 800245a:	b510      	push	{r4, lr}
 800245c:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800245e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002462:	b15b      	cbz	r3, 800247c <HAL_TIM_Base_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 8002464:	2302      	movs	r3, #2
 8002466:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800246a:	1d21      	adds	r1, r4, #4
 800246c:	6820      	ldr	r0, [r4, #0]
 800246e:	f7ff ff8d 	bl	800238c <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8002472:	2301      	movs	r3, #1
 8002474:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002478:	2000      	movs	r0, #0
 800247a:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800247c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002480:	f7ff feb0 	bl	80021e4 <HAL_TIM_Base_MspInit>
 8002484:	e7ee      	b.n	8002464 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8002486:	2001      	movs	r0, #1
 8002488:	4770      	bx	lr

0800248a <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800248a:	4770      	bx	lr

0800248c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800248c:	4770      	bx	lr
	...

08002490 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002490:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002494:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002496:	6802      	ldr	r2, [r0, #0]
 8002498:	6913      	ldr	r3, [r2, #16]
 800249a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800249e:	68c1      	ldr	r1, [r0, #12]
 80024a0:	430b      	orrs	r3, r1
 80024a2:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80024a4:	6883      	ldr	r3, [r0, #8]
 80024a6:	6902      	ldr	r2, [r0, #16]
 80024a8:	4313      	orrs	r3, r2
 80024aa:	6942      	ldr	r2, [r0, #20]
 80024ac:	4313      	orrs	r3, r2
 80024ae:	69c2      	ldr	r2, [r0, #28]
 80024b0:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1,
 80024b2:	6801      	ldr	r1, [r0, #0]
 80024b4:	68ca      	ldr	r2, [r1, #12]
 80024b6:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
 80024ba:	f022 020c 	bic.w	r2, r2, #12
 80024be:	4313      	orrs	r3, r2
 80024c0:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80024c2:	6802      	ldr	r2, [r0, #0]
 80024c4:	6953      	ldr	r3, [r2, #20]
 80024c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024ca:	6981      	ldr	r1, [r0, #24]
 80024cc:	430b      	orrs	r3, r1
 80024ce:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80024d0:	69c3      	ldr	r3, [r0, #28]
 80024d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024d6:	d062      	beq.n	800259e <UART_SetConfig+0x10e>
  }
  else
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80024d8:	f8d0 8000 	ldr.w	r8, [r0]
 80024dc:	4bbb      	ldr	r3, [pc, #748]	; (80027cc <UART_SetConfig+0x33c>)
 80024de:	4598      	cmp	r8, r3
 80024e0:	f000 811b 	beq.w	800271a <UART_SetConfig+0x28a>
 80024e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80024e8:	4598      	cmp	r8, r3
 80024ea:	f000 8116 	beq.w	800271a <UART_SetConfig+0x28a>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80024ee:	f7ff fe3b 	bl	8002168 <HAL_RCC_GetPCLK1Freq>
 80024f2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80024f6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80024fa:	6865      	ldr	r5, [r4, #4]
 80024fc:	00ad      	lsls	r5, r5, #2
 80024fe:	fbb0 f5f5 	udiv	r5, r0, r5
 8002502:	4fb3      	ldr	r7, [pc, #716]	; (80027d0 <UART_SetConfig+0x340>)
 8002504:	fba7 3505 	umull	r3, r5, r7, r5
 8002508:	096d      	lsrs	r5, r5, #5
 800250a:	012e      	lsls	r6, r5, #4
 800250c:	f7ff fe2c 	bl	8002168 <HAL_RCC_GetPCLK1Freq>
 8002510:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002514:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002518:	6865      	ldr	r5, [r4, #4]
 800251a:	00ad      	lsls	r5, r5, #2
 800251c:	fbb0 faf5 	udiv	sl, r0, r5
 8002520:	f7ff fe22 	bl	8002168 <HAL_RCC_GetPCLK1Freq>
 8002524:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002528:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800252c:	6865      	ldr	r5, [r4, #4]
 800252e:	00ad      	lsls	r5, r5, #2
 8002530:	fbb0 f5f5 	udiv	r5, r0, r5
 8002534:	fba7 3505 	umull	r3, r5, r7, r5
 8002538:	096d      	lsrs	r5, r5, #5
 800253a:	f04f 0964 	mov.w	r9, #100	; 0x64
 800253e:	fb09 a515 	mls	r5, r9, r5, sl
 8002542:	012d      	lsls	r5, r5, #4
 8002544:	3532      	adds	r5, #50	; 0x32
 8002546:	fba7 3505 	umull	r3, r5, r7, r5
 800254a:	096d      	lsrs	r5, r5, #5
 800254c:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 8002550:	4435      	add	r5, r6
 8002552:	f7ff fe09 	bl	8002168 <HAL_RCC_GetPCLK1Freq>
 8002556:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800255a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800255e:	6866      	ldr	r6, [r4, #4]
 8002560:	00b6      	lsls	r6, r6, #2
 8002562:	fbb0 f6f6 	udiv	r6, r0, r6
 8002566:	f7ff fdff 	bl	8002168 <HAL_RCC_GetPCLK1Freq>
 800256a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800256e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002572:	6863      	ldr	r3, [r4, #4]
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	fbb0 f0f3 	udiv	r0, r0, r3
 800257a:	fba7 3000 	umull	r3, r0, r7, r0
 800257e:	0940      	lsrs	r0, r0, #5
 8002580:	fb09 6910 	mls	r9, r9, r0, r6
 8002584:	ea4f 1909 	mov.w	r9, r9, lsl #4
 8002588:	f109 0932 	add.w	r9, r9, #50	; 0x32
 800258c:	fba7 3709 	umull	r3, r7, r7, r9
 8002590:	f3c7 1743 	ubfx	r7, r7, #5, #4
 8002594:	442f      	add	r7, r5
 8002596:	f8c8 7008 	str.w	r7, [r8, #8]
 800259a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800259e:	f8d0 8000 	ldr.w	r8, [r0]
 80025a2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80025a6:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
 80025aa:	4598      	cmp	r8, r3
 80025ac:	d05c      	beq.n	8002668 <UART_SetConfig+0x1d8>
 80025ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80025b2:	4598      	cmp	r8, r3
 80025b4:	d058      	beq.n	8002668 <UART_SetConfig+0x1d8>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80025b6:	f7ff fdd7 	bl	8002168 <HAL_RCC_GetPCLK1Freq>
 80025ba:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80025be:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80025c2:	6865      	ldr	r5, [r4, #4]
 80025c4:	006d      	lsls	r5, r5, #1
 80025c6:	fbb0 f5f5 	udiv	r5, r0, r5
 80025ca:	4f81      	ldr	r7, [pc, #516]	; (80027d0 <UART_SetConfig+0x340>)
 80025cc:	fba7 3505 	umull	r3, r5, r7, r5
 80025d0:	096d      	lsrs	r5, r5, #5
 80025d2:	012e      	lsls	r6, r5, #4
 80025d4:	f7ff fdc8 	bl	8002168 <HAL_RCC_GetPCLK1Freq>
 80025d8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80025dc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80025e0:	6865      	ldr	r5, [r4, #4]
 80025e2:	006d      	lsls	r5, r5, #1
 80025e4:	fbb0 faf5 	udiv	sl, r0, r5
 80025e8:	f7ff fdbe 	bl	8002168 <HAL_RCC_GetPCLK1Freq>
 80025ec:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80025f0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80025f4:	6865      	ldr	r5, [r4, #4]
 80025f6:	006d      	lsls	r5, r5, #1
 80025f8:	fbb0 f5f5 	udiv	r5, r0, r5
 80025fc:	fba7 3505 	umull	r3, r5, r7, r5
 8002600:	096d      	lsrs	r5, r5, #5
 8002602:	f04f 0964 	mov.w	r9, #100	; 0x64
 8002606:	fb09 a515 	mls	r5, r9, r5, sl
 800260a:	00ed      	lsls	r5, r5, #3
 800260c:	3532      	adds	r5, #50	; 0x32
 800260e:	fba7 3505 	umull	r3, r5, r7, r5
 8002612:	096d      	lsrs	r5, r5, #5
 8002614:	006d      	lsls	r5, r5, #1
 8002616:	f405 75f8 	and.w	r5, r5, #496	; 0x1f0
 800261a:	4435      	add	r5, r6
 800261c:	f7ff fda4 	bl	8002168 <HAL_RCC_GetPCLK1Freq>
 8002620:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002624:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002628:	6866      	ldr	r6, [r4, #4]
 800262a:	0076      	lsls	r6, r6, #1
 800262c:	fbb0 f6f6 	udiv	r6, r0, r6
 8002630:	f7ff fd9a 	bl	8002168 <HAL_RCC_GetPCLK1Freq>
 8002634:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002638:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800263c:	6863      	ldr	r3, [r4, #4]
 800263e:	005b      	lsls	r3, r3, #1
 8002640:	fbb0 f3f3 	udiv	r3, r0, r3
 8002644:	fba7 2303 	umull	r2, r3, r7, r3
 8002648:	095b      	lsrs	r3, r3, #5
 800264a:	fb09 6913 	mls	r9, r9, r3, r6
 800264e:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 8002652:	f109 0932 	add.w	r9, r9, #50	; 0x32
 8002656:	fba7 3709 	umull	r3, r7, r7, r9
 800265a:	f3c7 1742 	ubfx	r7, r7, #5, #3
 800265e:	442f      	add	r7, r5
 8002660:	f8c8 7008 	str.w	r7, [r8, #8]
 8002664:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002668:	f7ff fd8e 	bl	8002188 <HAL_RCC_GetPCLK2Freq>
 800266c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002670:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002674:	6865      	ldr	r5, [r4, #4]
 8002676:	006d      	lsls	r5, r5, #1
 8002678:	fbb0 f5f5 	udiv	r5, r0, r5
 800267c:	4f54      	ldr	r7, [pc, #336]	; (80027d0 <UART_SetConfig+0x340>)
 800267e:	fba7 3505 	umull	r3, r5, r7, r5
 8002682:	096d      	lsrs	r5, r5, #5
 8002684:	012e      	lsls	r6, r5, #4
 8002686:	f7ff fd7f 	bl	8002188 <HAL_RCC_GetPCLK2Freq>
 800268a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800268e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002692:	6865      	ldr	r5, [r4, #4]
 8002694:	006d      	lsls	r5, r5, #1
 8002696:	fbb0 faf5 	udiv	sl, r0, r5
 800269a:	f7ff fd75 	bl	8002188 <HAL_RCC_GetPCLK2Freq>
 800269e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80026a2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80026a6:	6865      	ldr	r5, [r4, #4]
 80026a8:	006d      	lsls	r5, r5, #1
 80026aa:	fbb0 f5f5 	udiv	r5, r0, r5
 80026ae:	fba7 3505 	umull	r3, r5, r7, r5
 80026b2:	096d      	lsrs	r5, r5, #5
 80026b4:	f04f 0964 	mov.w	r9, #100	; 0x64
 80026b8:	fb09 a515 	mls	r5, r9, r5, sl
 80026bc:	00ed      	lsls	r5, r5, #3
 80026be:	3532      	adds	r5, #50	; 0x32
 80026c0:	fba7 3505 	umull	r3, r5, r7, r5
 80026c4:	096d      	lsrs	r5, r5, #5
 80026c6:	006d      	lsls	r5, r5, #1
 80026c8:	f405 75f8 	and.w	r5, r5, #496	; 0x1f0
 80026cc:	4435      	add	r5, r6
 80026ce:	f7ff fd5b 	bl	8002188 <HAL_RCC_GetPCLK2Freq>
 80026d2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80026d6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80026da:	6866      	ldr	r6, [r4, #4]
 80026dc:	0076      	lsls	r6, r6, #1
 80026de:	fbb0 f6f6 	udiv	r6, r0, r6
 80026e2:	f7ff fd51 	bl	8002188 <HAL_RCC_GetPCLK2Freq>
 80026e6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80026ea:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80026ee:	6863      	ldr	r3, [r4, #4]
 80026f0:	005b      	lsls	r3, r3, #1
 80026f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80026f6:	fba7 2303 	umull	r2, r3, r7, r3
 80026fa:	095b      	lsrs	r3, r3, #5
 80026fc:	fb09 6913 	mls	r9, r9, r3, r6
 8002700:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 8002704:	f109 0932 	add.w	r9, r9, #50	; 0x32
 8002708:	fba7 3709 	umull	r3, r7, r7, r9
 800270c:	f3c7 1742 	ubfx	r7, r7, #5, #3
 8002710:	442f      	add	r7, r5
 8002712:	f8c8 7008 	str.w	r7, [r8, #8]
 8002716:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800271a:	f7ff fd35 	bl	8002188 <HAL_RCC_GetPCLK2Freq>
 800271e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002722:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002726:	6865      	ldr	r5, [r4, #4]
 8002728:	00ad      	lsls	r5, r5, #2
 800272a:	fbb0 f5f5 	udiv	r5, r0, r5
 800272e:	4f28      	ldr	r7, [pc, #160]	; (80027d0 <UART_SetConfig+0x340>)
 8002730:	fba7 3505 	umull	r3, r5, r7, r5
 8002734:	096d      	lsrs	r5, r5, #5
 8002736:	012e      	lsls	r6, r5, #4
 8002738:	f7ff fd26 	bl	8002188 <HAL_RCC_GetPCLK2Freq>
 800273c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002740:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002744:	6865      	ldr	r5, [r4, #4]
 8002746:	00ad      	lsls	r5, r5, #2
 8002748:	fbb0 faf5 	udiv	sl, r0, r5
 800274c:	f7ff fd1c 	bl	8002188 <HAL_RCC_GetPCLK2Freq>
 8002750:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002754:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002758:	6865      	ldr	r5, [r4, #4]
 800275a:	00ad      	lsls	r5, r5, #2
 800275c:	fbb0 f5f5 	udiv	r5, r0, r5
 8002760:	fba7 3505 	umull	r3, r5, r7, r5
 8002764:	096d      	lsrs	r5, r5, #5
 8002766:	f04f 0964 	mov.w	r9, #100	; 0x64
 800276a:	fb09 a515 	mls	r5, r9, r5, sl
 800276e:	012d      	lsls	r5, r5, #4
 8002770:	3532      	adds	r5, #50	; 0x32
 8002772:	fba7 3505 	umull	r3, r5, r7, r5
 8002776:	096d      	lsrs	r5, r5, #5
 8002778:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 800277c:	4435      	add	r5, r6
 800277e:	f7ff fd03 	bl	8002188 <HAL_RCC_GetPCLK2Freq>
 8002782:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002786:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800278a:	6866      	ldr	r6, [r4, #4]
 800278c:	00b6      	lsls	r6, r6, #2
 800278e:	fbb0 f6f6 	udiv	r6, r0, r6
 8002792:	f7ff fcf9 	bl	8002188 <HAL_RCC_GetPCLK2Freq>
 8002796:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800279a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800279e:	6863      	ldr	r3, [r4, #4]
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80027a6:	fba7 2303 	umull	r2, r3, r7, r3
 80027aa:	095b      	lsrs	r3, r3, #5
 80027ac:	fb09 6913 	mls	r9, r9, r3, r6
 80027b0:	ea4f 1909 	mov.w	r9, r9, lsl #4
 80027b4:	f109 0932 	add.w	r9, r9, #50	; 0x32
 80027b8:	fba7 3709 	umull	r3, r7, r7, r9
 80027bc:	f3c7 1743 	ubfx	r7, r7, #5, #4
 80027c0:	442f      	add	r7, r5
 80027c2:	f8c8 7008 	str.w	r7, [r8, #8]
 80027c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80027ca:	bf00      	nop
 80027cc:	40011000 	.word	0x40011000
 80027d0:	51eb851f 	.word	0x51eb851f

080027d4 <HAL_UART_Init>:
  if (huart == NULL)
 80027d4:	b358      	cbz	r0, 800282e <HAL_UART_Init+0x5a>
{
 80027d6:	b510      	push	{r4, lr}
 80027d8:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80027da:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80027de:	b30b      	cbz	r3, 8002824 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 80027e0:	2324      	movs	r3, #36	; 0x24
 80027e2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80027e6:	6822      	ldr	r2, [r4, #0]
 80027e8:	68d3      	ldr	r3, [r2, #12]
 80027ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80027ee:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80027f0:	4620      	mov	r0, r4
 80027f2:	f7ff fe4d 	bl	8002490 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027f6:	6822      	ldr	r2, [r4, #0]
 80027f8:	6913      	ldr	r3, [r2, #16]
 80027fa:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80027fe:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002800:	6822      	ldr	r2, [r4, #0]
 8002802:	6953      	ldr	r3, [r2, #20]
 8002804:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8002808:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 800280a:	6822      	ldr	r2, [r4, #0]
 800280c:	68d3      	ldr	r3, [r2, #12]
 800280e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002812:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002814:	2000      	movs	r0, #0
 8002816:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002818:	2320      	movs	r3, #32
 800281a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800281e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8002822:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8002824:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8002828:	f002 f86a 	bl	8004900 <HAL_UART_MspInit>
 800282c:	e7d8      	b.n	80027e0 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 800282e:	2001      	movs	r0, #1
 8002830:	4770      	bx	lr
	...

08002834 <USB_CoreReset>:
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t count = 0U;
 8002834:	2300      	movs	r3, #0

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8002836:	3301      	adds	r3, #1
 8002838:	4a0c      	ldr	r2, [pc, #48]	; (800286c <USB_CoreReset+0x38>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d811      	bhi.n	8002862 <USB_CoreReset+0x2e>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800283e:	6902      	ldr	r2, [r0, #16]
 8002840:	2a00      	cmp	r2, #0
 8002842:	daf8      	bge.n	8002836 <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8002844:	6903      	ldr	r3, [r0, #16]
 8002846:	f043 0301 	orr.w	r3, r3, #1
 800284a:	6103      	str	r3, [r0, #16]
  count = 0U;
 800284c:	2300      	movs	r3, #0

  do
  {
    if (++count > 200000U)
 800284e:	3301      	adds	r3, #1
 8002850:	4a06      	ldr	r2, [pc, #24]	; (800286c <USB_CoreReset+0x38>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d807      	bhi.n	8002866 <USB_CoreReset+0x32>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8002856:	6902      	ldr	r2, [r0, #16]
 8002858:	f012 0f01 	tst.w	r2, #1
 800285c:	d1f7      	bne.n	800284e <USB_CoreReset+0x1a>

  return HAL_OK;
 800285e:	2000      	movs	r0, #0
 8002860:	4770      	bx	lr
      return HAL_TIMEOUT;
 8002862:	2003      	movs	r0, #3
 8002864:	4770      	bx	lr
      return HAL_TIMEOUT;
 8002866:	2003      	movs	r0, #3
}
 8002868:	4770      	bx	lr
 800286a:	bf00      	nop
 800286c:	00030d40 	.word	0x00030d40

08002870 <USB_CoreInit>:
{
 8002870:	b084      	sub	sp, #16
 8002872:	b510      	push	{r4, lr}
 8002874:	4604      	mov	r4, r0
 8002876:	a803      	add	r0, sp, #12
 8002878:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800287c:	9b08      	ldr	r3, [sp, #32]
 800287e:	2b01      	cmp	r3, #1
 8002880:	d00d      	beq.n	800289e <USB_CoreInit+0x2e>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002882:	68e3      	ldr	r3, [r4, #12]
 8002884:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002888:	60e3      	str	r3, [r4, #12]
    ret = USB_CoreReset(USBx);
 800288a:	4620      	mov	r0, r4
 800288c:	f7ff ffd2 	bl	8002834 <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 8002890:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002892:	bb23      	cbnz	r3, 80028de <USB_CoreInit+0x6e>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002894:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002896:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800289a:	63a3      	str	r3, [r4, #56]	; 0x38
 800289c:	e013      	b.n	80028c6 <USB_CoreInit+0x56>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800289e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80028a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028a4:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80028a6:	68e3      	ldr	r3, [r4, #12]
 80028a8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80028ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80028b0:	60e3      	str	r3, [r4, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80028b2:	68e3      	ldr	r3, [r4, #12]
 80028b4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80028b8:	60e3      	str	r3, [r4, #12]
    if (cfg.use_external_vbus == 1U)
 80028ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d009      	beq.n	80028d4 <USB_CoreInit+0x64>
    ret = USB_CoreReset(USBx);
 80028c0:	4620      	mov	r0, r4
 80028c2:	f7ff ffb7 	bl	8002834 <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 80028c6:	9b06      	ldr	r3, [sp, #24]
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d00d      	beq.n	80028e8 <USB_CoreInit+0x78>
}
 80028cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80028d0:	b004      	add	sp, #16
 80028d2:	4770      	bx	lr
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80028d4:	68e3      	ldr	r3, [r4, #12]
 80028d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028da:	60e3      	str	r3, [r4, #12]
 80028dc:	e7f0      	b.n	80028c0 <USB_CoreInit+0x50>
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80028de:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80028e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028e4:	63a3      	str	r3, [r4, #56]	; 0x38
 80028e6:	e7ee      	b.n	80028c6 <USB_CoreInit+0x56>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80028e8:	68a3      	ldr	r3, [r4, #8]
 80028ea:	f043 0306 	orr.w	r3, r3, #6
 80028ee:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80028f0:	68a3      	ldr	r3, [r4, #8]
 80028f2:	f043 0320 	orr.w	r3, r3, #32
 80028f6:	60a3      	str	r3, [r4, #8]
 80028f8:	e7e8      	b.n	80028cc <USB_CoreInit+0x5c>

080028fa <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80028fa:	6883      	ldr	r3, [r0, #8]
 80028fc:	f023 0301 	bic.w	r3, r3, #1
 8002900:	6083      	str	r3, [r0, #8]
}
 8002902:	2000      	movs	r0, #0
 8002904:	4770      	bx	lr

08002906 <USB_SetCurrentMode>:
{
 8002906:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002908:	68c3      	ldr	r3, [r0, #12]
 800290a:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800290e:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8002910:	2901      	cmp	r1, #1
 8002912:	d009      	beq.n	8002928 <USB_SetCurrentMode+0x22>
  else if (mode == USB_DEVICE_MODE)
 8002914:	b969      	cbnz	r1, 8002932 <USB_SetCurrentMode+0x2c>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002916:	68c3      	ldr	r3, [r0, #12]
 8002918:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800291c:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 800291e:	2032      	movs	r0, #50	; 0x32
 8002920:	f7fd fe22 	bl	8000568 <HAL_Delay>
  return HAL_OK;
 8002924:	2000      	movs	r0, #0
 8002926:	bd08      	pop	{r3, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002928:	68c3      	ldr	r3, [r0, #12]
 800292a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800292e:	60c3      	str	r3, [r0, #12]
 8002930:	e7f5      	b.n	800291e <USB_SetCurrentMode+0x18>
    return HAL_ERROR;
 8002932:	2001      	movs	r0, #1
}
 8002934:	bd08      	pop	{r3, pc}
	...

08002938 <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8002938:	0189      	lsls	r1, r1, #6
 800293a:	f041 0120 	orr.w	r1, r1, #32
 800293e:	6101      	str	r1, [r0, #16]
  uint32_t count = 0U;
 8002940:	2300      	movs	r3, #0
    if (++count > 200000U)
 8002942:	3301      	adds	r3, #1
 8002944:	4a05      	ldr	r2, [pc, #20]	; (800295c <USB_FlushTxFifo+0x24>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d805      	bhi.n	8002956 <USB_FlushTxFifo+0x1e>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800294a:	6902      	ldr	r2, [r0, #16]
 800294c:	f012 0f20 	tst.w	r2, #32
 8002950:	d1f7      	bne.n	8002942 <USB_FlushTxFifo+0xa>
  return HAL_OK;
 8002952:	2000      	movs	r0, #0
 8002954:	4770      	bx	lr
      return HAL_TIMEOUT;
 8002956:	2003      	movs	r0, #3
}
 8002958:	4770      	bx	lr
 800295a:	bf00      	nop
 800295c:	00030d40 	.word	0x00030d40

08002960 <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8002960:	2310      	movs	r3, #16
 8002962:	6103      	str	r3, [r0, #16]
  uint32_t count = 0;
 8002964:	2300      	movs	r3, #0
    if (++count > 200000U)
 8002966:	3301      	adds	r3, #1
 8002968:	4a05      	ldr	r2, [pc, #20]	; (8002980 <USB_FlushRxFifo+0x20>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d805      	bhi.n	800297a <USB_FlushRxFifo+0x1a>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800296e:	6902      	ldr	r2, [r0, #16]
 8002970:	f012 0f10 	tst.w	r2, #16
 8002974:	d1f7      	bne.n	8002966 <USB_FlushRxFifo+0x6>
  return HAL_OK;
 8002976:	2000      	movs	r0, #0
 8002978:	4770      	bx	lr
      return HAL_TIMEOUT;
 800297a:	2003      	movs	r0, #3
}
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop
 8002980:	00030d40 	.word	0x00030d40

08002984 <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 8002984:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8002988:	4319      	orrs	r1, r3
 800298a:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 800298e:	2000      	movs	r0, #0
 8002990:	4770      	bx	lr
	...

08002994 <USB_DevInit>:
{
 8002994:	b084      	sub	sp, #16
 8002996:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800299a:	4604      	mov	r4, r0
 800299c:	a807      	add	r0, sp, #28
 800299e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029a2:	4625      	mov	r5, r4
  for (i = 0U; i < 15U; i++)
 80029a4:	2300      	movs	r3, #0
 80029a6:	e006      	b.n	80029b6 <USB_DevInit+0x22>
    USBx->DIEPTXF[i] = 0U;
 80029a8:	f103 0240 	add.w	r2, r3, #64	; 0x40
 80029ac:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80029b0:	2100      	movs	r1, #0
 80029b2:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 80029b4:	3301      	adds	r3, #1
 80029b6:	2b0e      	cmp	r3, #14
 80029b8:	d9f6      	bls.n	80029a8 <USB_DevInit+0x14>
  if (cfg.vbus_sensing_enable == 0U)
 80029ba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80029bc:	bb73      	cbnz	r3, 8002a1c <USB_DevInit+0x88>
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80029be:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80029c0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80029c4:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80029c6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80029c8:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80029cc:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80029ce:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80029d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029d4:	63a3      	str	r3, [r4, #56]	; 0x38
  USBx_PCGCCTL = 0U;
 80029d6:	2300      	movs	r3, #0
 80029d8:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80029dc:	f504 6600 	add.w	r6, r4, #2048	; 0x800
 80029e0:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 80029e4:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80029e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d01f      	beq.n	8002a2e <USB_DevInit+0x9a>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80029ee:	2103      	movs	r1, #3
 80029f0:	4620      	mov	r0, r4
 80029f2:	f7ff ffc7 	bl	8002984 <USB_SetDevSpeed>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80029f6:	2110      	movs	r1, #16
 80029f8:	4620      	mov	r0, r4
 80029fa:	f7ff ff9d 	bl	8002938 <USB_FlushTxFifo>
 80029fe:	4680      	mov	r8, r0
 8002a00:	b108      	cbz	r0, 8002a06 <USB_DevInit+0x72>
    ret = HAL_ERROR;
 8002a02:	f04f 0801 	mov.w	r8, #1
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002a06:	4620      	mov	r0, r4
 8002a08:	f7ff ffaa 	bl	8002960 <USB_FlushRxFifo>
 8002a0c:	b108      	cbz	r0, 8002a12 <USB_DevInit+0x7e>
    ret = HAL_ERROR;
 8002a0e:	f04f 0801 	mov.w	r8, #1
  USBx_DEVICE->DIEPMSK = 0U;
 8002a12:	2300      	movs	r3, #0
 8002a14:	6133      	str	r3, [r6, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002a16:	6173      	str	r3, [r6, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8002a18:	61f3      	str	r3, [r6, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002a1a:	e01f      	b.n	8002a5c <USB_DevInit+0xc8>
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8002a1c:	6823      	ldr	r3, [r4, #0]
 8002a1e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002a22:	6023      	str	r3, [r4, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002a24:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002a26:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002a2a:	63a3      	str	r3, [r4, #56]	; 0x38
 8002a2c:	e7d3      	b.n	80029d6 <USB_DevInit+0x42>
    if (cfg.speed == USBD_HS_SPEED)
 8002a2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002a30:	b923      	cbnz	r3, 8002a3c <USB_DevInit+0xa8>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002a32:	2100      	movs	r1, #0
 8002a34:	4620      	mov	r0, r4
 8002a36:	f7ff ffa5 	bl	8002984 <USB_SetDevSpeed>
 8002a3a:	e7dc      	b.n	80029f6 <USB_DevInit+0x62>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002a3c:	2101      	movs	r1, #1
 8002a3e:	4620      	mov	r0, r4
 8002a40:	f7ff ffa0 	bl	8002984 <USB_SetDevSpeed>
 8002a44:	e7d7      	b.n	80029f6 <USB_DevInit+0x62>
      if (i == 0U)
 8002a46:	b9c3      	cbnz	r3, 8002a7a <USB_DevInit+0xe6>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002a48:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8002a4c:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8002a50:	2200      	movs	r2, #0
 8002a52:	610a      	str	r2, [r1, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002a54:	f64f 327f 	movw	r2, #64383	; 0xfb7f
 8002a58:	608a      	str	r2, [r1, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002a5a:	3301      	adds	r3, #1
 8002a5c:	9907      	ldr	r1, [sp, #28]
 8002a5e:	428b      	cmp	r3, r1
 8002a60:	d210      	bcs.n	8002a84 <USB_DevInit+0xf0>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002a62:	eb05 1243 	add.w	r2, r5, r3, lsl #5
 8002a66:	f502 6110 	add.w	r1, r2, #2304	; 0x900
 8002a6a:	f8d2 0900 	ldr.w	r0, [r2, #2304]	; 0x900
 8002a6e:	2800      	cmp	r0, #0
 8002a70:	dbe9      	blt.n	8002a46 <USB_DevInit+0xb2>
      USBx_INEP(i)->DIEPCTL = 0U;
 8002a72:	2000      	movs	r0, #0
 8002a74:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
 8002a78:	e7ea      	b.n	8002a50 <USB_DevInit+0xbc>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002a7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a7e:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
 8002a82:	e7e5      	b.n	8002a50 <USB_DevInit+0xbc>
 8002a84:	2300      	movs	r3, #0
 8002a86:	e00a      	b.n	8002a9e <USB_DevInit+0x10a>
      if (i == 0U)
 8002a88:	b1bb      	cbz	r3, 8002aba <USB_DevInit+0x126>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8002a8a:	f04f 4790 	mov.w	r7, #1207959552	; 0x48000000
 8002a8e:	f8c2 7b00 	str.w	r7, [r2, #2816]	; 0xb00
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8002a92:	2200      	movs	r2, #0
 8002a94:	6102      	str	r2, [r0, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8002a96:	f64f 327f 	movw	r2, #64383	; 0xfb7f
 8002a9a:	6082      	str	r2, [r0, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002a9c:	3301      	adds	r3, #1
 8002a9e:	428b      	cmp	r3, r1
 8002aa0:	d210      	bcs.n	8002ac4 <USB_DevInit+0x130>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002aa2:	eb05 1243 	add.w	r2, r5, r3, lsl #5
 8002aa6:	f502 6030 	add.w	r0, r2, #2816	; 0xb00
 8002aaa:	f8d2 7b00 	ldr.w	r7, [r2, #2816]	; 0xb00
 8002aae:	2f00      	cmp	r7, #0
 8002ab0:	dbea      	blt.n	8002a88 <USB_DevInit+0xf4>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002ab2:	2700      	movs	r7, #0
 8002ab4:	f8c2 7b00 	str.w	r7, [r2, #2816]	; 0xb00
 8002ab8:	e7eb      	b.n	8002a92 <USB_DevInit+0xfe>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002aba:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
 8002abe:	f8c2 7b00 	str.w	r7, [r2, #2816]	; 0xb00
 8002ac2:	e7e6      	b.n	8002a92 <USB_DevInit+0xfe>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002ac4:	6933      	ldr	r3, [r6, #16]
 8002ac6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002aca:	6133      	str	r3, [r6, #16]
  if (cfg.dma_enable == 1U)
 8002acc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d01b      	beq.n	8002b0a <USB_DevInit+0x176>
  USBx->GINTMSK = 0U;
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	61a2      	str	r2, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 8002ad6:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8002ada:	6162      	str	r2, [r4, #20]
  if (cfg.dma_enable == 0U)
 8002adc:	b91b      	cbnz	r3, 8002ae6 <USB_DevInit+0x152>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8002ade:	69a3      	ldr	r3, [r4, #24]
 8002ae0:	f043 0310 	orr.w	r3, r3, #16
 8002ae4:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8002ae6:	69a2      	ldr	r2, [r4, #24]
 8002ae8:	4b10      	ldr	r3, [pc, #64]	; (8002b2c <USB_DevInit+0x198>)
 8002aea:	4313      	orrs	r3, r2
 8002aec:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 8002aee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002af0:	b11b      	cbz	r3, 8002afa <USB_DevInit+0x166>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8002af2:	69a3      	ldr	r3, [r4, #24]
 8002af4:	f043 0308 	orr.w	r3, r3, #8
 8002af8:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 8002afa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d00d      	beq.n	8002b1c <USB_DevInit+0x188>
}
 8002b00:	4640      	mov	r0, r8
 8002b02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002b06:	b004      	add	sp, #16
 8002b08:	4770      	bx	lr
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 8002b0a:	4a09      	ldr	r2, [pc, #36]	; (8002b30 <USB_DevInit+0x19c>)
 8002b0c:	6332      	str	r2, [r6, #48]	; 0x30
    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 8002b0e:	6b32      	ldr	r2, [r6, #48]	; 0x30
 8002b10:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002b14:	f042 0203 	orr.w	r2, r2, #3
 8002b18:	6332      	str	r2, [r6, #48]	; 0x30
 8002b1a:	e7da      	b.n	8002ad2 <USB_DevInit+0x13e>
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8002b1c:	69a3      	ldr	r3, [r4, #24]
 8002b1e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002b22:	f043 0304 	orr.w	r3, r3, #4
 8002b26:	61a3      	str	r3, [r4, #24]
 8002b28:	e7ea      	b.n	8002b00 <USB_DevInit+0x16c>
 8002b2a:	bf00      	nop
 8002b2c:	803c3800 	.word	0x803c3800
 8002b30:	00800100 	.word	0x00800100

08002b34 <USB_DevDisconnect>:
{
 8002b34:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002b36:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8002b3a:	f043 0302 	orr.w	r3, r3, #2
 8002b3e:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 8002b42:	2003      	movs	r0, #3
 8002b44:	f7fd fd10 	bl	8000568 <HAL_Delay>
}
 8002b48:	2000      	movs	r0, #0
 8002b4a:	bd08      	pop	{r3, pc}

08002b4c <makeFreeRtosPriority>:
/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
  
  if (priority != osPriorityError) {
 8002b4c:	2884      	cmp	r0, #132	; 0x84
 8002b4e:	d001      	beq.n	8002b54 <makeFreeRtosPriority+0x8>
    fpriority += (priority - osPriorityIdle);
 8002b50:	3003      	adds	r0, #3
 8002b52:	4770      	bx	lr
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002b54:	2000      	movs	r0, #0
  }
  
  return fpriority;
}
 8002b56:	4770      	bx	lr

08002b58 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002b58:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8002b5a:	f000 fdff 	bl	800375c <vTaskStartScheduler>
  
  return osOK;
}
 8002b5e:	2000      	movs	r0, #0
 8002b60:	bd08      	pop	{r3, pc}

08002b62 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002b62:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002b66:	b087      	sub	sp, #28
 8002b68:	4604      	mov	r4, r0
 8002b6a:	460f      	mov	r7, r1
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002b6c:	6945      	ldr	r5, [r0, #20]
 8002b6e:	b1bd      	cbz	r5, 8002ba0 <osThreadCreate+0x3e>
 8002b70:	6986      	ldr	r6, [r0, #24]
 8002b72:	b1ae      	cbz	r6, 8002ba0 <osThreadCreate+0x3e>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002b74:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8002b78:	f8d0 9000 	ldr.w	r9, [r0]
 8002b7c:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 8002b80:	f7ff ffe4 	bl	8002b4c <makeFreeRtosPriority>
 8002b84:	6922      	ldr	r2, [r4, #16]
 8002b86:	9602      	str	r6, [sp, #8]
 8002b88:	9501      	str	r5, [sp, #4]
 8002b8a:	9000      	str	r0, [sp, #0]
 8002b8c:	463b      	mov	r3, r7
 8002b8e:	4649      	mov	r1, r9
 8002b90:	4640      	mov	r0, r8
 8002b92:	f000 fd77 	bl	8003684 <xTaskCreateStatic>
 8002b96:	9005      	str	r0, [sp, #20]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002b98:	9805      	ldr	r0, [sp, #20]
}
 8002b9a:	b007      	add	sp, #28
 8002b9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002ba0:	6865      	ldr	r5, [r4, #4]
 8002ba2:	6826      	ldr	r6, [r4, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002ba4:	f8d4 8010 	ldr.w	r8, [r4, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002ba8:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
 8002bac:	f7ff ffce 	bl	8002b4c <makeFreeRtosPriority>
 8002bb0:	ab05      	add	r3, sp, #20
 8002bb2:	9301      	str	r3, [sp, #4]
 8002bb4:	9000      	str	r0, [sp, #0]
 8002bb6:	463b      	mov	r3, r7
 8002bb8:	fa1f f288 	uxth.w	r2, r8
 8002bbc:	4631      	mov	r1, r6
 8002bbe:	4628      	mov	r0, r5
 8002bc0:	f000 fd99 	bl	80036f6 <xTaskCreate>
 8002bc4:	2801      	cmp	r0, #1
 8002bc6:	d0e7      	beq.n	8002b98 <osThreadCreate+0x36>
      return NULL;
 8002bc8:	2000      	movs	r0, #0
 8002bca:	e7e6      	b.n	8002b9a <osThreadCreate+0x38>

08002bcc <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002bcc:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002bce:	4603      	mov	r3, r0
 8002bd0:	b900      	cbnz	r0, 8002bd4 <osDelay+0x8>
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f000 ff13 	bl	8003a00 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002bda:	2000      	movs	r0, #0
 8002bdc:	bd08      	pop	{r3, pc}

08002bde <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8002bde:	b510      	push	{r4, lr}
 8002be0:	b082      	sub	sp, #8
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8002be2:	6882      	ldr	r2, [r0, #8]
 8002be4:	b14a      	cbz	r2, 8002bfa <osMessageCreate+0x1c>
 8002be6:	68c3      	ldr	r3, [r0, #12]
 8002be8:	b13b      	cbz	r3, 8002bfa <osMessageCreate+0x1c>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8002bea:	6841      	ldr	r1, [r0, #4]
 8002bec:	6800      	ldr	r0, [r0, #0]
 8002bee:	2400      	movs	r4, #0
 8002bf0:	9400      	str	r4, [sp, #0]
 8002bf2:	f000 fb49 	bl	8003288 <xQueueGenericCreateStatic>
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8002bf6:	b002      	add	sp, #8
 8002bf8:	bd10      	pop	{r4, pc}
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	6841      	ldr	r1, [r0, #4]
 8002bfe:	6800      	ldr	r0, [r0, #0]
 8002c00:	f000 fb92 	bl	8003328 <xQueueGenericCreate>
 8002c04:	e7f7      	b.n	8002bf6 <osMessageCreate+0x18>

08002c06 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c06:	f100 0308 	add.w	r3, r0, #8
 8002c0a:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002c0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002c10:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c12:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c14:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002c16:	2300      	movs	r3, #0
 8002c18:	6003      	str	r3, [r0, #0]
 8002c1a:	4770      	bx	lr

08002c1c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	6103      	str	r3, [r0, #16]
 8002c20:	4770      	bx	lr

08002c22 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8002c22:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002c24:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002c26:	689a      	ldr	r2, [r3, #8]
 8002c28:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002c2a:	689a      	ldr	r2, [r3, #8]
 8002c2c:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002c2e:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002c30:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8002c32:	6803      	ldr	r3, [r0, #0]
 8002c34:	3301      	adds	r3, #1
 8002c36:	6003      	str	r3, [r0, #0]
 8002c38:	4770      	bx	lr

08002c3a <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002c3a:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002c3c:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002c3e:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8002c42:	d002      	beq.n	8002c4a <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c44:	f100 0208 	add.w	r2, r0, #8
 8002c48:	e002      	b.n	8002c50 <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
 8002c4a:	6902      	ldr	r2, [r0, #16]
 8002c4c:	e004      	b.n	8002c58 <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c4e:	461a      	mov	r2, r3
 8002c50:	6853      	ldr	r3, [r2, #4]
 8002c52:	681c      	ldr	r4, [r3, #0]
 8002c54:	42a5      	cmp	r5, r4
 8002c56:	d2fa      	bcs.n	8002c4e <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002c58:	6853      	ldr	r3, [r2, #4]
 8002c5a:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002c5c:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002c5e:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8002c60:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002c62:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8002c64:	6803      	ldr	r3, [r0, #0]
 8002c66:	3301      	adds	r3, #1
 8002c68:	6003      	str	r3, [r0, #0]
}
 8002c6a:	bc30      	pop	{r4, r5}
 8002c6c:	4770      	bx	lr

08002c6e <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002c6e:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002c70:	6842      	ldr	r2, [r0, #4]
 8002c72:	6881      	ldr	r1, [r0, #8]
 8002c74:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002c76:	6882      	ldr	r2, [r0, #8]
 8002c78:	6841      	ldr	r1, [r0, #4]
 8002c7a:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002c7c:	685a      	ldr	r2, [r3, #4]
 8002c7e:	4290      	cmp	r0, r2
 8002c80:	d006      	beq.n	8002c90 <uxListRemove+0x22>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002c82:	2200      	movs	r2, #0
 8002c84:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	3a01      	subs	r2, #1
 8002c8a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002c8c:	6818      	ldr	r0, [r3, #0]
}
 8002c8e:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002c90:	6882      	ldr	r2, [r0, #8]
 8002c92:	605a      	str	r2, [r3, #4]
 8002c94:	e7f5      	b.n	8002c82 <uxListRemove+0x14>
	...

08002c98 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002c98:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002c9e:	4b0d      	ldr	r3, [pc, #52]	; (8002cd4 <prvTaskExitError+0x3c>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ca6:	d008      	beq.n	8002cba <prvTaskExitError+0x22>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cac:	f383 8811 	msr	BASEPRI, r3
 8002cb0:	f3bf 8f6f 	isb	sy
 8002cb4:	f3bf 8f4f 	dsb	sy
 8002cb8:	e7fe      	b.n	8002cb8 <prvTaskExitError+0x20>
 8002cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cbe:	f383 8811 	msr	BASEPRI, r3
 8002cc2:	f3bf 8f6f 	isb	sy
 8002cc6:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8002cca:	9b01      	ldr	r3, [sp, #4]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d0fc      	beq.n	8002cca <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8002cd0:	b002      	add	sp, #8
 8002cd2:	4770      	bx	lr
 8002cd4:	20000004 	.word	0x20000004

08002cd8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8002cd8:	4808      	ldr	r0, [pc, #32]	; (8002cfc <prvPortStartFirstTask+0x24>)
 8002cda:	6800      	ldr	r0, [r0, #0]
 8002cdc:	6800      	ldr	r0, [r0, #0]
 8002cde:	f380 8808 	msr	MSP, r0
 8002ce2:	f04f 0000 	mov.w	r0, #0
 8002ce6:	f380 8814 	msr	CONTROL, r0
 8002cea:	b662      	cpsie	i
 8002cec:	b661      	cpsie	f
 8002cee:	f3bf 8f4f 	dsb	sy
 8002cf2:	f3bf 8f6f 	isb	sy
 8002cf6:	df00      	svc	0
 8002cf8:	bf00      	nop
 8002cfa:	0000      	.short	0x0000
 8002cfc:	e000ed08 	.word	0xe000ed08

08002d00 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8002d00:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002d10 <vPortEnableVFP+0x10>
 8002d04:	6801      	ldr	r1, [r0, #0]
 8002d06:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002d0a:	6001      	str	r1, [r0, #0]
 8002d0c:	4770      	bx	lr
 8002d0e:	0000      	.short	0x0000
 8002d10:	e000ed88 	.word	0xe000ed88

08002d14 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002d14:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d18:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002d1c:	f021 0101 	bic.w	r1, r1, #1
 8002d20:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002d24:	4b05      	ldr	r3, [pc, #20]	; (8002d3c <pxPortInitialiseStack+0x28>)
 8002d26:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002d2a:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8002d2e:	f06f 0302 	mvn.w	r3, #2
 8002d32:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8002d36:	3844      	subs	r0, #68	; 0x44
 8002d38:	4770      	bx	lr
 8002d3a:	bf00      	nop
 8002d3c:	08002c99 	.word	0x08002c99

08002d40 <SVC_Handler>:
	__asm volatile (
 8002d40:	4b07      	ldr	r3, [pc, #28]	; (8002d60 <pxCurrentTCBConst2>)
 8002d42:	6819      	ldr	r1, [r3, #0]
 8002d44:	6808      	ldr	r0, [r1, #0]
 8002d46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d4a:	f380 8809 	msr	PSP, r0
 8002d4e:	f3bf 8f6f 	isb	sy
 8002d52:	f04f 0000 	mov.w	r0, #0
 8002d56:	f380 8811 	msr	BASEPRI, r0
 8002d5a:	4770      	bx	lr
 8002d5c:	f3af 8000 	nop.w

08002d60 <pxCurrentTCBConst2>:
 8002d60:	20003c48 	.word	0x20003c48

08002d64 <vPortEnterCritical>:
 8002d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d68:	f383 8811 	msr	BASEPRI, r3
 8002d6c:	f3bf 8f6f 	isb	sy
 8002d70:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8002d74:	4a0a      	ldr	r2, [pc, #40]	; (8002da0 <vPortEnterCritical+0x3c>)
 8002d76:	6813      	ldr	r3, [r2, #0]
 8002d78:	3301      	adds	r3, #1
 8002d7a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d10d      	bne.n	8002d9c <vPortEnterCritical+0x38>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002d80:	4b08      	ldr	r3, [pc, #32]	; (8002da4 <vPortEnterCritical+0x40>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f013 0fff 	tst.w	r3, #255	; 0xff
 8002d88:	d008      	beq.n	8002d9c <vPortEnterCritical+0x38>
 8002d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d8e:	f383 8811 	msr	BASEPRI, r3
 8002d92:	f3bf 8f6f 	isb	sy
 8002d96:	f3bf 8f4f 	dsb	sy
 8002d9a:	e7fe      	b.n	8002d9a <vPortEnterCritical+0x36>
 8002d9c:	4770      	bx	lr
 8002d9e:	bf00      	nop
 8002da0:	20000004 	.word	0x20000004
 8002da4:	e000ed04 	.word	0xe000ed04

08002da8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8002da8:	4b09      	ldr	r3, [pc, #36]	; (8002dd0 <vPortExitCritical+0x28>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	b943      	cbnz	r3, 8002dc0 <vPortExitCritical+0x18>
 8002dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002db2:	f383 8811 	msr	BASEPRI, r3
 8002db6:	f3bf 8f6f 	isb	sy
 8002dba:	f3bf 8f4f 	dsb	sy
 8002dbe:	e7fe      	b.n	8002dbe <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8002dc0:	3b01      	subs	r3, #1
 8002dc2:	4a03      	ldr	r2, [pc, #12]	; (8002dd0 <vPortExitCritical+0x28>)
 8002dc4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002dc6:	b90b      	cbnz	r3, 8002dcc <vPortExitCritical+0x24>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002dc8:	f383 8811 	msr	BASEPRI, r3
 8002dcc:	4770      	bx	lr
 8002dce:	bf00      	nop
 8002dd0:	20000004 	.word	0x20000004
	...

08002de0 <PendSV_Handler>:
	__asm volatile
 8002de0:	f3ef 8009 	mrs	r0, PSP
 8002de4:	f3bf 8f6f 	isb	sy
 8002de8:	4b15      	ldr	r3, [pc, #84]	; (8002e40 <pxCurrentTCBConst>)
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	f01e 0f10 	tst.w	lr, #16
 8002df0:	bf08      	it	eq
 8002df2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002df6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002dfa:	6010      	str	r0, [r2, #0]
 8002dfc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002e00:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002e04:	f380 8811 	msr	BASEPRI, r0
 8002e08:	f3bf 8f4f 	dsb	sy
 8002e0c:	f3bf 8f6f 	isb	sy
 8002e10:	f000 fe1e 	bl	8003a50 <vTaskSwitchContext>
 8002e14:	f04f 0000 	mov.w	r0, #0
 8002e18:	f380 8811 	msr	BASEPRI, r0
 8002e1c:	bc09      	pop	{r0, r3}
 8002e1e:	6819      	ldr	r1, [r3, #0]
 8002e20:	6808      	ldr	r0, [r1, #0]
 8002e22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e26:	f01e 0f10 	tst.w	lr, #16
 8002e2a:	bf08      	it	eq
 8002e2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002e30:	f380 8809 	msr	PSP, r0
 8002e34:	f3bf 8f6f 	isb	sy
 8002e38:	4770      	bx	lr
 8002e3a:	bf00      	nop
 8002e3c:	f3af 8000 	nop.w

08002e40 <pxCurrentTCBConst>:
 8002e40:	20003c48 	.word	0x20003c48

08002e44 <SysTick_Handler>:
{
 8002e44:	b508      	push	{r3, lr}
	__asm volatile
 8002e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e4a:	f383 8811 	msr	BASEPRI, r3
 8002e4e:	f3bf 8f6f 	isb	sy
 8002e52:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8002e56:	f000 fcc5 	bl	80037e4 <xTaskIncrementTick>
 8002e5a:	b118      	cbz	r0, 8002e64 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002e5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e60:	4b02      	ldr	r3, [pc, #8]	; (8002e6c <SysTick_Handler+0x28>)
 8002e62:	601a      	str	r2, [r3, #0]
	__asm volatile
 8002e64:	2300      	movs	r3, #0
 8002e66:	f383 8811 	msr	BASEPRI, r3
 8002e6a:	bd08      	pop	{r3, pc}
 8002e6c:	e000ed04 	.word	0xe000ed04

08002e70 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002e70:	4a08      	ldr	r2, [pc, #32]	; (8002e94 <vPortSetupTimerInterrupt+0x24>)
 8002e72:	2300      	movs	r3, #0
 8002e74:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002e76:	4908      	ldr	r1, [pc, #32]	; (8002e98 <vPortSetupTimerInterrupt+0x28>)
 8002e78:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002e7a:	4b08      	ldr	r3, [pc, #32]	; (8002e9c <vPortSetupTimerInterrupt+0x2c>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4908      	ldr	r1, [pc, #32]	; (8002ea0 <vPortSetupTimerInterrupt+0x30>)
 8002e80:	fba1 1303 	umull	r1, r3, r1, r3
 8002e84:	099b      	lsrs	r3, r3, #6
 8002e86:	3b01      	subs	r3, #1
 8002e88:	4906      	ldr	r1, [pc, #24]	; (8002ea4 <vPortSetupTimerInterrupt+0x34>)
 8002e8a:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002e8c:	2307      	movs	r3, #7
 8002e8e:	6013      	str	r3, [r2, #0]
 8002e90:	4770      	bx	lr
 8002e92:	bf00      	nop
 8002e94:	e000e010 	.word	0xe000e010
 8002e98:	e000e018 	.word	0xe000e018
 8002e9c:	20000008 	.word	0x20000008
 8002ea0:	10624dd3 	.word	0x10624dd3
 8002ea4:	e000e014 	.word	0xe000e014

08002ea8 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002ea8:	4b3a      	ldr	r3, [pc, #232]	; (8002f94 <xPortStartScheduler+0xec>)
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	4b3a      	ldr	r3, [pc, #232]	; (8002f98 <xPortStartScheduler+0xf0>)
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d108      	bne.n	8002ec4 <xPortStartScheduler+0x1c>
	__asm volatile
 8002eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eb6:	f383 8811 	msr	BASEPRI, r3
 8002eba:	f3bf 8f6f 	isb	sy
 8002ebe:	f3bf 8f4f 	dsb	sy
 8002ec2:	e7fe      	b.n	8002ec2 <xPortStartScheduler+0x1a>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002ec4:	4b33      	ldr	r3, [pc, #204]	; (8002f94 <xPortStartScheduler+0xec>)
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	4b34      	ldr	r3, [pc, #208]	; (8002f9c <xPortStartScheduler+0xf4>)
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d108      	bne.n	8002ee0 <xPortStartScheduler+0x38>
 8002ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ed2:	f383 8811 	msr	BASEPRI, r3
 8002ed6:	f3bf 8f6f 	isb	sy
 8002eda:	f3bf 8f4f 	dsb	sy
 8002ede:	e7fe      	b.n	8002ede <xPortStartScheduler+0x36>
{
 8002ee0:	b510      	push	{r4, lr}
 8002ee2:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002ee4:	4b2e      	ldr	r3, [pc, #184]	; (8002fa0 <xPortStartScheduler+0xf8>)
 8002ee6:	781a      	ldrb	r2, [r3, #0]
 8002ee8:	b2d2      	uxtb	r2, r2
 8002eea:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002eec:	22ff      	movs	r2, #255	; 0xff
 8002eee:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002ef0:	781b      	ldrb	r3, [r3, #0]
 8002ef2:	b2db      	uxtb	r3, r3
 8002ef4:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002ef8:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8002efc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002f00:	4a28      	ldr	r2, [pc, #160]	; (8002fa4 <xPortStartScheduler+0xfc>)
 8002f02:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002f04:	2207      	movs	r2, #7
 8002f06:	4b28      	ldr	r3, [pc, #160]	; (8002fa8 <xPortStartScheduler+0x100>)
 8002f08:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002f0a:	e009      	b.n	8002f20 <xPortStartScheduler+0x78>
			ulMaxPRIGROUPValue--;
 8002f0c:	4a26      	ldr	r2, [pc, #152]	; (8002fa8 <xPortStartScheduler+0x100>)
 8002f0e:	6813      	ldr	r3, [r2, #0]
 8002f10:	3b01      	subs	r3, #1
 8002f12:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002f14:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8002f18:	005b      	lsls	r3, r3, #1
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002f20:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8002f24:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002f28:	d1f0      	bne.n	8002f0c <xPortStartScheduler+0x64>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002f2a:	4b1f      	ldr	r3, [pc, #124]	; (8002fa8 <xPortStartScheduler+0x100>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	2b03      	cmp	r3, #3
 8002f30:	d008      	beq.n	8002f44 <xPortStartScheduler+0x9c>
 8002f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f36:	f383 8811 	msr	BASEPRI, r3
 8002f3a:	f3bf 8f6f 	isb	sy
 8002f3e:	f3bf 8f4f 	dsb	sy
 8002f42:	e7fe      	b.n	8002f42 <xPortStartScheduler+0x9a>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002f44:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002f46:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002f4a:	4a17      	ldr	r2, [pc, #92]	; (8002fa8 <xPortStartScheduler+0x100>)
 8002f4c:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002f4e:	9b01      	ldr	r3, [sp, #4]
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	4a13      	ldr	r2, [pc, #76]	; (8002fa0 <xPortStartScheduler+0xf8>)
 8002f54:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002f56:	4b15      	ldr	r3, [pc, #84]	; (8002fac <xPortStartScheduler+0x104>)
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8002f5e:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8002f66:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8002f68:	f7ff ff82 	bl	8002e70 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8002f6c:	2400      	movs	r4, #0
 8002f6e:	4b10      	ldr	r3, [pc, #64]	; (8002fb0 <xPortStartScheduler+0x108>)
 8002f70:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 8002f72:	f7ff fec5 	bl	8002d00 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002f76:	4a0f      	ldr	r2, [pc, #60]	; (8002fb4 <xPortStartScheduler+0x10c>)
 8002f78:	6813      	ldr	r3, [r2, #0]
 8002f7a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002f7e:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8002f80:	f7ff feaa 	bl	8002cd8 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8002f84:	f000 fd64 	bl	8003a50 <vTaskSwitchContext>
	prvTaskExitError();
 8002f88:	f7ff fe86 	bl	8002c98 <prvTaskExitError>
}
 8002f8c:	4620      	mov	r0, r4
 8002f8e:	b002      	add	sp, #8
 8002f90:	bd10      	pop	{r4, pc}
 8002f92:	bf00      	nop
 8002f94:	e000ed00 	.word	0xe000ed00
 8002f98:	410fc271 	.word	0x410fc271
 8002f9c:	410fc270 	.word	0x410fc270
 8002fa0:	e000e400 	.word	0xe000e400
 8002fa4:	20000028 	.word	0x20000028
 8002fa8:	2000002c 	.word	0x2000002c
 8002fac:	e000ed20 	.word	0xe000ed20
 8002fb0:	20000004 	.word	0x20000004
 8002fb4:	e000ef34 	.word	0xe000ef34

08002fb8 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8002fb8:	4a12      	ldr	r2, [pc, #72]	; (8003004 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002fba:	f012 0f07 	tst.w	r2, #7
 8002fbe:	d01e      	beq.n	8002ffe <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002fc0:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002fc2:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002fc6:	f5c1 5370 	rsb	r3, r1, #15360	; 0x3c00
 8002fca:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002fcc:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002fce:	480e      	ldr	r0, [pc, #56]	; (8003008 <prvHeapInit+0x50>)
 8002fd0:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8002fd2:	2100      	movs	r1, #0
 8002fd4:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002fd6:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8002fd8:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002fda:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 8002fde:	480b      	ldr	r0, [pc, #44]	; (800300c <prvHeapInit+0x54>)
 8002fe0:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 8002fe2:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8002fe4:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002fe6:	1a99      	subs	r1, r3, r2
 8002fe8:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002fea:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002fec:	4b08      	ldr	r3, [pc, #32]	; (8003010 <prvHeapInit+0x58>)
 8002fee:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002ff0:	4b08      	ldr	r3, [pc, #32]	; (8003014 <prvHeapInit+0x5c>)
 8002ff2:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002ff4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002ff8:	4b07      	ldr	r3, [pc, #28]	; (8003018 <prvHeapInit+0x60>)
 8002ffa:	601a      	str	r2, [r3, #0]
 8002ffc:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002ffe:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8003002:	e7e4      	b.n	8002fce <prvHeapInit+0x16>
 8003004:	20000034 	.word	0x20000034
 8003008:	20003c40 	.word	0x20003c40
 800300c:	20000030 	.word	0x20000030
 8003010:	20003c3c 	.word	0x20003c3c
 8003014:	20003c38 	.word	0x20003c38
 8003018:	20003c34 	.word	0x20003c34

0800301c <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800301c:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800301e:	4b13      	ldr	r3, [pc, #76]	; (800306c <prvInsertBlockIntoFreeList+0x50>)
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	4282      	cmp	r2, r0
 8003024:	d31b      	bcc.n	800305e <prvInsertBlockIntoFreeList+0x42>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003026:	6859      	ldr	r1, [r3, #4]
 8003028:	185c      	adds	r4, r3, r1
 800302a:	42a0      	cmp	r0, r4
 800302c:	d103      	bne.n	8003036 <prvInsertBlockIntoFreeList+0x1a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800302e:	6840      	ldr	r0, [r0, #4]
 8003030:	4401      	add	r1, r0
 8003032:	6059      	str	r1, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003034:	4618      	mov	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003036:	6841      	ldr	r1, [r0, #4]
 8003038:	1844      	adds	r4, r0, r1
 800303a:	42a2      	cmp	r2, r4
 800303c:	d113      	bne.n	8003066 <prvInsertBlockIntoFreeList+0x4a>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800303e:	4c0c      	ldr	r4, [pc, #48]	; (8003070 <prvInsertBlockIntoFreeList+0x54>)
 8003040:	6824      	ldr	r4, [r4, #0]
 8003042:	42a2      	cmp	r2, r4
 8003044:	d00d      	beq.n	8003062 <prvInsertBlockIntoFreeList+0x46>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003046:	6852      	ldr	r2, [r2, #4]
 8003048:	4411      	add	r1, r2
 800304a:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	6812      	ldr	r2, [r2, #0]
 8003050:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003052:	4298      	cmp	r0, r3
 8003054:	d000      	beq.n	8003058 <prvInsertBlockIntoFreeList+0x3c>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003056:	6018      	str	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003058:	f85d 4b04 	ldr.w	r4, [sp], #4
 800305c:	4770      	bx	lr
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800305e:	4613      	mov	r3, r2
 8003060:	e7de      	b.n	8003020 <prvInsertBlockIntoFreeList+0x4>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003062:	6004      	str	r4, [r0, #0]
 8003064:	e7f5      	b.n	8003052 <prvInsertBlockIntoFreeList+0x36>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003066:	6002      	str	r2, [r0, #0]
 8003068:	e7f3      	b.n	8003052 <prvInsertBlockIntoFreeList+0x36>
 800306a:	bf00      	nop
 800306c:	20003c40 	.word	0x20003c40
 8003070:	20000030 	.word	0x20000030

08003074 <pvPortMalloc>:
{
 8003074:	b570      	push	{r4, r5, r6, lr}
 8003076:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8003078:	f000 fbac 	bl	80037d4 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800307c:	4b3a      	ldr	r3, [pc, #232]	; (8003168 <pvPortMalloc+0xf4>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	b1bb      	cbz	r3, 80030b2 <pvPortMalloc+0x3e>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003082:	4b3a      	ldr	r3, [pc, #232]	; (800316c <pvPortMalloc+0xf8>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	421c      	tst	r4, r3
 8003088:	d163      	bne.n	8003152 <pvPortMalloc+0xde>
			if( xWantedSize > 0 )
 800308a:	b1ac      	cbz	r4, 80030b8 <pvPortMalloc+0x44>
				xWantedSize += xHeapStructSize;
 800308c:	3408      	adds	r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800308e:	f014 0f07 	tst.w	r4, #7
 8003092:	d011      	beq.n	80030b8 <pvPortMalloc+0x44>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003094:	f024 0407 	bic.w	r4, r4, #7
 8003098:	3408      	adds	r4, #8
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800309a:	f004 0307 	and.w	r3, r4, #7
 800309e:	b15b      	cbz	r3, 80030b8 <pvPortMalloc+0x44>
 80030a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030a4:	f383 8811 	msr	BASEPRI, r3
 80030a8:	f3bf 8f6f 	isb	sy
 80030ac:	f3bf 8f4f 	dsb	sy
 80030b0:	e7fe      	b.n	80030b0 <pvPortMalloc+0x3c>
			prvHeapInit();
 80030b2:	f7ff ff81 	bl	8002fb8 <prvHeapInit>
 80030b6:	e7e4      	b.n	8003082 <pvPortMalloc+0xe>
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80030b8:	2c00      	cmp	r4, #0
 80030ba:	d04c      	beq.n	8003156 <pvPortMalloc+0xe2>
 80030bc:	4b2c      	ldr	r3, [pc, #176]	; (8003170 <pvPortMalloc+0xfc>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	429c      	cmp	r4, r3
 80030c2:	d84a      	bhi.n	800315a <pvPortMalloc+0xe6>
				pxBlock = xStart.pxNextFreeBlock;
 80030c4:	4b2b      	ldr	r3, [pc, #172]	; (8003174 <pvPortMalloc+0x100>)
 80030c6:	681d      	ldr	r5, [r3, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80030c8:	e001      	b.n	80030ce <pvPortMalloc+0x5a>
					pxPreviousBlock = pxBlock;
 80030ca:	462b      	mov	r3, r5
					pxBlock = pxBlock->pxNextFreeBlock;
 80030cc:	4615      	mov	r5, r2
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80030ce:	686a      	ldr	r2, [r5, #4]
 80030d0:	4294      	cmp	r4, r2
 80030d2:	d902      	bls.n	80030da <pvPortMalloc+0x66>
 80030d4:	682a      	ldr	r2, [r5, #0]
 80030d6:	2a00      	cmp	r2, #0
 80030d8:	d1f7      	bne.n	80030ca <pvPortMalloc+0x56>
				if( pxBlock != pxEnd )
 80030da:	4a23      	ldr	r2, [pc, #140]	; (8003168 <pvPortMalloc+0xf4>)
 80030dc:	6812      	ldr	r2, [r2, #0]
 80030de:	4295      	cmp	r5, r2
 80030e0:	d03d      	beq.n	800315e <pvPortMalloc+0xea>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80030e2:	681e      	ldr	r6, [r3, #0]
 80030e4:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80030e6:	682a      	ldr	r2, [r5, #0]
 80030e8:	601a      	str	r2, [r3, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80030ea:	686b      	ldr	r3, [r5, #4]
 80030ec:	1b1b      	subs	r3, r3, r4
 80030ee:	2b10      	cmp	r3, #16
 80030f0:	d910      	bls.n	8003114 <pvPortMalloc+0xa0>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80030f2:	1928      	adds	r0, r5, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80030f4:	f010 0f07 	tst.w	r0, #7
 80030f8:	d008      	beq.n	800310c <pvPortMalloc+0x98>
 80030fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030fe:	f383 8811 	msr	BASEPRI, r3
 8003102:	f3bf 8f6f 	isb	sy
 8003106:	f3bf 8f4f 	dsb	sy
 800310a:	e7fe      	b.n	800310a <pvPortMalloc+0x96>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800310c:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800310e:	606c      	str	r4, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003110:	f7ff ff84 	bl	800301c <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003114:	686a      	ldr	r2, [r5, #4]
 8003116:	4916      	ldr	r1, [pc, #88]	; (8003170 <pvPortMalloc+0xfc>)
 8003118:	680b      	ldr	r3, [r1, #0]
 800311a:	1a9b      	subs	r3, r3, r2
 800311c:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800311e:	4916      	ldr	r1, [pc, #88]	; (8003178 <pvPortMalloc+0x104>)
 8003120:	6809      	ldr	r1, [r1, #0]
 8003122:	428b      	cmp	r3, r1
 8003124:	d201      	bcs.n	800312a <pvPortMalloc+0xb6>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003126:	4914      	ldr	r1, [pc, #80]	; (8003178 <pvPortMalloc+0x104>)
 8003128:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800312a:	4b10      	ldr	r3, [pc, #64]	; (800316c <pvPortMalloc+0xf8>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4313      	orrs	r3, r2
 8003130:	606b      	str	r3, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003132:	2300      	movs	r3, #0
 8003134:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8003136:	f000 fbe5 	bl	8003904 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800313a:	f016 0f07 	tst.w	r6, #7
 800313e:	d010      	beq.n	8003162 <pvPortMalloc+0xee>
 8003140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003144:	f383 8811 	msr	BASEPRI, r3
 8003148:	f3bf 8f6f 	isb	sy
 800314c:	f3bf 8f4f 	dsb	sy
 8003150:	e7fe      	b.n	8003150 <pvPortMalloc+0xdc>
void *pvReturn = NULL;
 8003152:	2600      	movs	r6, #0
 8003154:	e7ef      	b.n	8003136 <pvPortMalloc+0xc2>
 8003156:	2600      	movs	r6, #0
 8003158:	e7ed      	b.n	8003136 <pvPortMalloc+0xc2>
 800315a:	2600      	movs	r6, #0
 800315c:	e7eb      	b.n	8003136 <pvPortMalloc+0xc2>
 800315e:	2600      	movs	r6, #0
 8003160:	e7e9      	b.n	8003136 <pvPortMalloc+0xc2>
}
 8003162:	4630      	mov	r0, r6
 8003164:	bd70      	pop	{r4, r5, r6, pc}
 8003166:	bf00      	nop
 8003168:	20000030 	.word	0x20000030
 800316c:	20003c34 	.word	0x20003c34
 8003170:	20003c38 	.word	0x20003c38
 8003174:	20003c40 	.word	0x20003c40
 8003178:	20003c3c 	.word	0x20003c3c

0800317c <vPortFree>:
	if( pv != NULL )
 800317c:	b380      	cbz	r0, 80031e0 <vPortFree+0x64>
{
 800317e:	b538      	push	{r3, r4, r5, lr}
 8003180:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 8003182:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003186:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800318a:	4916      	ldr	r1, [pc, #88]	; (80031e4 <vPortFree+0x68>)
 800318c:	6809      	ldr	r1, [r1, #0]
 800318e:	420a      	tst	r2, r1
 8003190:	d108      	bne.n	80031a4 <vPortFree+0x28>
 8003192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003196:	f383 8811 	msr	BASEPRI, r3
 800319a:	f3bf 8f6f 	isb	sy
 800319e:	f3bf 8f4f 	dsb	sy
 80031a2:	e7fe      	b.n	80031a2 <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80031a4:	f850 0c08 	ldr.w	r0, [r0, #-8]
 80031a8:	b140      	cbz	r0, 80031bc <vPortFree+0x40>
 80031aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031ae:	f383 8811 	msr	BASEPRI, r3
 80031b2:	f3bf 8f6f 	isb	sy
 80031b6:	f3bf 8f4f 	dsb	sy
 80031ba:	e7fe      	b.n	80031ba <vPortFree+0x3e>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80031bc:	ea22 0201 	bic.w	r2, r2, r1
 80031c0:	f844 2c04 	str.w	r2, [r4, #-4]
				vTaskSuspendAll();
 80031c4:	f000 fb06 	bl	80037d4 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 80031c8:	f854 1c04 	ldr.w	r1, [r4, #-4]
 80031cc:	4a06      	ldr	r2, [pc, #24]	; (80031e8 <vPortFree+0x6c>)
 80031ce:	6813      	ldr	r3, [r2, #0]
 80031d0:	440b      	add	r3, r1
 80031d2:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80031d4:	4628      	mov	r0, r5
 80031d6:	f7ff ff21 	bl	800301c <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 80031da:	f000 fb93 	bl	8003904 <xTaskResumeAll>
 80031de:	bd38      	pop	{r3, r4, r5, pc}
 80031e0:	4770      	bx	lr
 80031e2:	bf00      	nop
 80031e4:	20003c34 	.word	0x20003c34
 80031e8:	20003c38 	.word	0x20003c38

080031ec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80031ec:	b538      	push	{r3, r4, r5, lr}
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 80031ee:	b330      	cbz	r0, 800323e <xQueueGenericReset+0x52>
 80031f0:	4604      	mov	r4, r0
 80031f2:	460d      	mov	r5, r1

	taskENTER_CRITICAL();
 80031f4:	f7ff fdb6 	bl	8002d64 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80031f8:	6821      	ldr	r1, [r4, #0]
 80031fa:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80031fc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80031fe:	fb03 1002 	mla	r0, r3, r2, r1
 8003202:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003204:	2000      	movs	r0, #0
 8003206:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003208:	60a1      	str	r1, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800320a:	3a01      	subs	r2, #1
 800320c:	fb02 1303 	mla	r3, r2, r3, r1
 8003210:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003212:	23ff      	movs	r3, #255	; 0xff
 8003214:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003218:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800321c:	b9c5      	cbnz	r5, 8003250 <xQueueGenericReset+0x64>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800321e:	6923      	ldr	r3, [r4, #16]
 8003220:	b1f3      	cbz	r3, 8003260 <xQueueGenericReset+0x74>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003222:	f104 0010 	add.w	r0, r4, #16
 8003226:	f000 fc61 	bl	8003aec <xTaskRemoveFromEventList>
 800322a:	b1c8      	cbz	r0, 8003260 <xQueueGenericReset+0x74>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800322c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003230:	4b0d      	ldr	r3, [pc, #52]	; (8003268 <xQueueGenericReset+0x7c>)
 8003232:	601a      	str	r2, [r3, #0]
 8003234:	f3bf 8f4f 	dsb	sy
 8003238:	f3bf 8f6f 	isb	sy
 800323c:	e010      	b.n	8003260 <xQueueGenericReset+0x74>
 800323e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003242:	f383 8811 	msr	BASEPRI, r3
 8003246:	f3bf 8f6f 	isb	sy
 800324a:	f3bf 8f4f 	dsb	sy
 800324e:	e7fe      	b.n	800324e <xQueueGenericReset+0x62>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003250:	f104 0010 	add.w	r0, r4, #16
 8003254:	f7ff fcd7 	bl	8002c06 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003258:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800325c:	f7ff fcd3 	bl	8002c06 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003260:	f7ff fda2 	bl	8002da8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
 8003264:	2001      	movs	r0, #1
 8003266:	bd38      	pop	{r3, r4, r5, pc}
 8003268:	e000ed04 	.word	0xe000ed04

0800326c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800326c:	b510      	push	{r4, lr}
 800326e:	9b02      	ldr	r3, [sp, #8]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003270:	460c      	mov	r4, r1
 8003272:	b139      	cbz	r1, 8003284 <prvInitialiseNewQueue+0x18>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003274:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003276:	63d8      	str	r0, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003278:	641c      	str	r4, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800327a:	2101      	movs	r1, #1
 800327c:	4618      	mov	r0, r3
 800327e:	f7ff ffb5 	bl	80031ec <xQueueGenericReset>
 8003282:	bd10      	pop	{r4, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003284:	601b      	str	r3, [r3, #0]
 8003286:	e7f6      	b.n	8003276 <prvInitialiseNewQueue+0xa>

08003288 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003288:	b940      	cbnz	r0, 800329c <xQueueGenericCreateStatic+0x14>
 800328a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800328e:	f383 8811 	msr	BASEPRI, r3
 8003292:	f3bf 8f6f 	isb	sy
 8003296:	f3bf 8f4f 	dsb	sy
 800329a:	e7fe      	b.n	800329a <xQueueGenericCreateStatic+0x12>
	{
 800329c:	b510      	push	{r4, lr}
 800329e:	b084      	sub	sp, #16
 80032a0:	4604      	mov	r4, r0
		configASSERT( pxStaticQueue != NULL );
 80032a2:	b163      	cbz	r3, 80032be <xQueueGenericCreateStatic+0x36>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80032a4:	b1a2      	cbz	r2, 80032d0 <xQueueGenericCreateStatic+0x48>
 80032a6:	b1a9      	cbz	r1, 80032d4 <xQueueGenericCreateStatic+0x4c>
 80032a8:	2001      	movs	r0, #1
 80032aa:	b9a8      	cbnz	r0, 80032d8 <xQueueGenericCreateStatic+0x50>
 80032ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032b0:	f383 8811 	msr	BASEPRI, r3
 80032b4:	f3bf 8f6f 	isb	sy
 80032b8:	f3bf 8f4f 	dsb	sy
 80032bc:	e7fe      	b.n	80032bc <xQueueGenericCreateStatic+0x34>
 80032be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032c2:	f383 8811 	msr	BASEPRI, r3
 80032c6:	f3bf 8f6f 	isb	sy
 80032ca:	f3bf 8f4f 	dsb	sy
 80032ce:	e7fe      	b.n	80032ce <xQueueGenericCreateStatic+0x46>
 80032d0:	2001      	movs	r0, #1
 80032d2:	e7ea      	b.n	80032aa <xQueueGenericCreateStatic+0x22>
 80032d4:	2000      	movs	r0, #0
 80032d6:	e7e8      	b.n	80032aa <xQueueGenericCreateStatic+0x22>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80032d8:	b90a      	cbnz	r2, 80032de <xQueueGenericCreateStatic+0x56>
 80032da:	b101      	cbz	r1, 80032de <xQueueGenericCreateStatic+0x56>
 80032dc:	2000      	movs	r0, #0
 80032de:	b940      	cbnz	r0, 80032f2 <xQueueGenericCreateStatic+0x6a>
 80032e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032e4:	f383 8811 	msr	BASEPRI, r3
 80032e8:	f3bf 8f6f 	isb	sy
 80032ec:	f3bf 8f4f 	dsb	sy
 80032f0:	e7fe      	b.n	80032f0 <xQueueGenericCreateStatic+0x68>
			volatile size_t xSize = sizeof( StaticQueue_t );
 80032f2:	2048      	movs	r0, #72	; 0x48
 80032f4:	9003      	str	r0, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 80032f6:	9803      	ldr	r0, [sp, #12]
 80032f8:	2848      	cmp	r0, #72	; 0x48
 80032fa:	d008      	beq.n	800330e <xQueueGenericCreateStatic+0x86>
 80032fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003300:	f383 8811 	msr	BASEPRI, r3
 8003304:	f3bf 8f6f 	isb	sy
 8003308:	f3bf 8f4f 	dsb	sy
 800330c:	e7fe      	b.n	800330c <xQueueGenericCreateStatic+0x84>
 800330e:	4620      	mov	r0, r4
 8003310:	461c      	mov	r4, r3
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003312:	2301      	movs	r3, #1
 8003314:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003318:	9400      	str	r4, [sp, #0]
 800331a:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800331e:	f7ff ffa5 	bl	800326c <prvInitialiseNewQueue>
	}
 8003322:	4620      	mov	r0, r4
 8003324:	b004      	add	sp, #16
 8003326:	bd10      	pop	{r4, pc}

08003328 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003328:	b940      	cbnz	r0, 800333c <xQueueGenericCreate+0x14>
 800332a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800332e:	f383 8811 	msr	BASEPRI, r3
 8003332:	f3bf 8f6f 	isb	sy
 8003336:	f3bf 8f4f 	dsb	sy
 800333a:	e7fe      	b.n	800333a <xQueueGenericCreate+0x12>
	{
 800333c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800333e:	b083      	sub	sp, #12
 8003340:	4606      	mov	r6, r0
		if( uxItemSize == ( UBaseType_t ) 0 )
 8003342:	b111      	cbz	r1, 800334a <xQueueGenericCreate+0x22>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003344:	fb01 f000 	mul.w	r0, r1, r0
 8003348:	e000      	b.n	800334c <xQueueGenericCreate+0x24>
			xQueueSizeInBytes = ( size_t ) 0;
 800334a:	2000      	movs	r0, #0
 800334c:	4617      	mov	r7, r2
 800334e:	460c      	mov	r4, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8003350:	3048      	adds	r0, #72	; 0x48
 8003352:	f7ff fe8f 	bl	8003074 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8003356:	4605      	mov	r5, r0
 8003358:	b150      	cbz	r0, 8003370 <xQueueGenericCreate+0x48>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800335a:	2300      	movs	r3, #0
 800335c:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003360:	9000      	str	r0, [sp, #0]
 8003362:	463b      	mov	r3, r7
 8003364:	f100 0248 	add.w	r2, r0, #72	; 0x48
 8003368:	4621      	mov	r1, r4
 800336a:	4630      	mov	r0, r6
 800336c:	f7ff ff7e 	bl	800326c <prvInitialiseNewQueue>
	}
 8003370:	4628      	mov	r0, r5
 8003372:	b003      	add	sp, #12
 8003374:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003378 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003378:	4b0a      	ldr	r3, [pc, #40]	; (80033a4 <prvResetNextTaskUnblockTime+0x2c>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	b94b      	cbnz	r3, 8003394 <prvResetNextTaskUnblockTime+0x1c>
 8003380:	2301      	movs	r3, #1
 8003382:	b94b      	cbnz	r3, 8003398 <prvResetNextTaskUnblockTime+0x20>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003384:	4b07      	ldr	r3, [pc, #28]	; (80033a4 <prvResetNextTaskUnblockTime+0x2c>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	68db      	ldr	r3, [r3, #12]
 800338a:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800338c:	685a      	ldr	r2, [r3, #4]
 800338e:	4b06      	ldr	r3, [pc, #24]	; (80033a8 <prvResetNextTaskUnblockTime+0x30>)
 8003390:	601a      	str	r2, [r3, #0]
 8003392:	4770      	bx	lr
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003394:	2300      	movs	r3, #0
 8003396:	e7f4      	b.n	8003382 <prvResetNextTaskUnblockTime+0xa>
		xNextTaskUnblockTime = portMAX_DELAY;
 8003398:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800339c:	4b02      	ldr	r3, [pc, #8]	; (80033a8 <prvResetNextTaskUnblockTime+0x30>)
 800339e:	601a      	str	r2, [r3, #0]
 80033a0:	4770      	bx	lr
 80033a2:	bf00      	nop
 80033a4:	20003c4c 	.word	0x20003c4c
 80033a8:	20003d20 	.word	0x20003d20

080033ac <prvInitialiseNewTask>:
{
 80033ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80033b0:	4680      	mov	r8, r0
 80033b2:	4699      	mov	r9, r3
 80033b4:	9d08      	ldr	r5, [sp, #32]
 80033b6:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80033b8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80033ba:	6b26      	ldr	r6, [r4, #48]	; 0x30
 80033bc:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80033c0:	3a01      	subs	r2, #1
 80033c2:	eb06 0682 	add.w	r6, r6, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80033c6:	f026 0607 	bic.w	r6, r6, #7
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80033ca:	2300      	movs	r3, #0
 80033cc:	2b0f      	cmp	r3, #15
 80033ce:	d807      	bhi.n	80033e0 <prvInitialiseNewTask+0x34>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80033d0:	5cc8      	ldrb	r0, [r1, r3]
 80033d2:	18e2      	adds	r2, r4, r3
 80033d4:	f882 0034 	strb.w	r0, [r2, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
 80033d8:	5cca      	ldrb	r2, [r1, r3]
 80033da:	b10a      	cbz	r2, 80033e0 <prvInitialiseNewTask+0x34>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80033dc:	3301      	adds	r3, #1
 80033de:	e7f5      	b.n	80033cc <prvInitialiseNewTask+0x20>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80033e0:	2300      	movs	r3, #0
 80033e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80033e6:	2d06      	cmp	r5, #6
 80033e8:	d900      	bls.n	80033ec <prvInitialiseNewTask+0x40>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80033ea:	2506      	movs	r5, #6
	pxNewTCB->uxPriority = uxPriority;
 80033ec:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 80033ee:	6465      	str	r5, [r4, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80033f0:	f04f 0a00 	mov.w	sl, #0
 80033f4:	f8c4 a048 	str.w	sl, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80033f8:	1d20      	adds	r0, r4, #4
 80033fa:	f7ff fc0f 	bl	8002c1c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80033fe:	f104 0018 	add.w	r0, r4, #24
 8003402:	f7ff fc0b 	bl	8002c1c <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003406:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003408:	f1c5 0507 	rsb	r5, r5, #7
 800340c:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800340e:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
 8003410:	f8c4 a04c 	str.w	sl, [r4, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003414:	f884 a050 	strb.w	sl, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003418:	464a      	mov	r2, r9
 800341a:	4641      	mov	r1, r8
 800341c:	4630      	mov	r0, r6
 800341e:	f7ff fc79 	bl	8002d14 <pxPortInitialiseStack>
 8003422:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8003424:	b107      	cbz	r7, 8003428 <prvInitialiseNewTask+0x7c>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003426:	603c      	str	r4, [r7, #0]
 8003428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800342c <prvInitialiseTaskLists>:
{
 800342c:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800342e:	2400      	movs	r4, #0
 8003430:	e007      	b.n	8003442 <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003432:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8003436:	0093      	lsls	r3, r2, #2
 8003438:	480e      	ldr	r0, [pc, #56]	; (8003474 <prvInitialiseTaskLists+0x48>)
 800343a:	4418      	add	r0, r3
 800343c:	f7ff fbe3 	bl	8002c06 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003440:	3401      	adds	r4, #1
 8003442:	2c06      	cmp	r4, #6
 8003444:	d9f5      	bls.n	8003432 <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 8003446:	4d0c      	ldr	r5, [pc, #48]	; (8003478 <prvInitialiseTaskLists+0x4c>)
 8003448:	4628      	mov	r0, r5
 800344a:	f7ff fbdc 	bl	8002c06 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800344e:	4c0b      	ldr	r4, [pc, #44]	; (800347c <prvInitialiseTaskLists+0x50>)
 8003450:	4620      	mov	r0, r4
 8003452:	f7ff fbd8 	bl	8002c06 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003456:	480a      	ldr	r0, [pc, #40]	; (8003480 <prvInitialiseTaskLists+0x54>)
 8003458:	f7ff fbd5 	bl	8002c06 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 800345c:	4809      	ldr	r0, [pc, #36]	; (8003484 <prvInitialiseTaskLists+0x58>)
 800345e:	f7ff fbd2 	bl	8002c06 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8003462:	4809      	ldr	r0, [pc, #36]	; (8003488 <prvInitialiseTaskLists+0x5c>)
 8003464:	f7ff fbcf 	bl	8002c06 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8003468:	4b08      	ldr	r3, [pc, #32]	; (800348c <prvInitialiseTaskLists+0x60>)
 800346a:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800346c:	4b08      	ldr	r3, [pc, #32]	; (8003490 <prvInitialiseTaskLists+0x64>)
 800346e:	601c      	str	r4, [r3, #0]
 8003470:	bd38      	pop	{r3, r4, r5, pc}
 8003472:	bf00      	nop
 8003474:	20003c54 	.word	0x20003c54
 8003478:	20003cf8 	.word	0x20003cf8
 800347c:	20003d0c 	.word	0x20003d0c
 8003480:	20003d28 	.word	0x20003d28
 8003484:	20003d54 	.word	0x20003d54
 8003488:	20003d40 	.word	0x20003d40
 800348c:	20003c4c 	.word	0x20003c4c
 8003490:	20003c50 	.word	0x20003c50

08003494 <prvAddNewTaskToReadyList>:
{
 8003494:	b510      	push	{r4, lr}
 8003496:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8003498:	f7ff fc64 	bl	8002d64 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 800349c:	4a20      	ldr	r2, [pc, #128]	; (8003520 <prvAddNewTaskToReadyList+0x8c>)
 800349e:	6813      	ldr	r3, [r2, #0]
 80034a0:	3301      	adds	r3, #1
 80034a2:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80034a4:	4b1f      	ldr	r3, [pc, #124]	; (8003524 <prvAddNewTaskToReadyList+0x90>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d031      	beq.n	8003510 <prvAddNewTaskToReadyList+0x7c>
			if( xSchedulerRunning == pdFALSE )
 80034ac:	4b1e      	ldr	r3, [pc, #120]	; (8003528 <prvAddNewTaskToReadyList+0x94>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	b93b      	cbnz	r3, 80034c2 <prvAddNewTaskToReadyList+0x2e>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80034b2:	4b1c      	ldr	r3, [pc, #112]	; (8003524 <prvAddNewTaskToReadyList+0x90>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034b8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d801      	bhi.n	80034c2 <prvAddNewTaskToReadyList+0x2e>
					pxCurrentTCB = pxNewTCB;
 80034be:	4b19      	ldr	r3, [pc, #100]	; (8003524 <prvAddNewTaskToReadyList+0x90>)
 80034c0:	601c      	str	r4, [r3, #0]
		uxTaskNumber++;
 80034c2:	4a1a      	ldr	r2, [pc, #104]	; (800352c <prvAddNewTaskToReadyList+0x98>)
 80034c4:	6813      	ldr	r3, [r2, #0]
 80034c6:	3301      	adds	r3, #1
 80034c8:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80034ca:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80034cc:	2201      	movs	r2, #1
 80034ce:	409a      	lsls	r2, r3
 80034d0:	4917      	ldr	r1, [pc, #92]	; (8003530 <prvAddNewTaskToReadyList+0x9c>)
 80034d2:	6808      	ldr	r0, [r1, #0]
 80034d4:	4302      	orrs	r2, r0
 80034d6:	600a      	str	r2, [r1, #0]
 80034d8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80034dc:	009a      	lsls	r2, r3, #2
 80034de:	1d21      	adds	r1, r4, #4
 80034e0:	4814      	ldr	r0, [pc, #80]	; (8003534 <prvAddNewTaskToReadyList+0xa0>)
 80034e2:	4410      	add	r0, r2
 80034e4:	f7ff fb9d 	bl	8002c22 <vListInsertEnd>
	taskEXIT_CRITICAL();
 80034e8:	f7ff fc5e 	bl	8002da8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 80034ec:	4b0e      	ldr	r3, [pc, #56]	; (8003528 <prvAddNewTaskToReadyList+0x94>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	b16b      	cbz	r3, 800350e <prvAddNewTaskToReadyList+0x7a>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80034f2:	4b0c      	ldr	r3, [pc, #48]	; (8003524 <prvAddNewTaskToReadyList+0x90>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034f8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d207      	bcs.n	800350e <prvAddNewTaskToReadyList+0x7a>
			taskYIELD_IF_USING_PREEMPTION();
 80034fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003502:	4b0d      	ldr	r3, [pc, #52]	; (8003538 <prvAddNewTaskToReadyList+0xa4>)
 8003504:	601a      	str	r2, [r3, #0]
 8003506:	f3bf 8f4f 	dsb	sy
 800350a:	f3bf 8f6f 	isb	sy
 800350e:	bd10      	pop	{r4, pc}
			pxCurrentTCB = pxNewTCB;
 8003510:	4b04      	ldr	r3, [pc, #16]	; (8003524 <prvAddNewTaskToReadyList+0x90>)
 8003512:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003514:	6813      	ldr	r3, [r2, #0]
 8003516:	2b01      	cmp	r3, #1
 8003518:	d1d3      	bne.n	80034c2 <prvAddNewTaskToReadyList+0x2e>
				prvInitialiseTaskLists();
 800351a:	f7ff ff87 	bl	800342c <prvInitialiseTaskLists>
 800351e:	e7d0      	b.n	80034c2 <prvAddNewTaskToReadyList+0x2e>
 8003520:	20003ce0 	.word	0x20003ce0
 8003524:	20003c48 	.word	0x20003c48
 8003528:	20003d3c 	.word	0x20003d3c
 800352c:	20003cf0 	.word	0x20003cf0
 8003530:	20003cf4 	.word	0x20003cf4
 8003534:	20003c54 	.word	0x20003c54
 8003538:	e000ed04 	.word	0xe000ed04

0800353c <prvDeleteTCB>:
	{
 800353c:	b510      	push	{r4, lr}
 800353e:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003540:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8003544:	b163      	cbz	r3, 8003560 <prvDeleteTCB+0x24>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003546:	2b01      	cmp	r3, #1
 8003548:	d011      	beq.n	800356e <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800354a:	2b02      	cmp	r3, #2
 800354c:	d012      	beq.n	8003574 <prvDeleteTCB+0x38>
 800354e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003552:	f383 8811 	msr	BASEPRI, r3
 8003556:	f3bf 8f6f 	isb	sy
 800355a:	f3bf 8f4f 	dsb	sy
 800355e:	e7fe      	b.n	800355e <prvDeleteTCB+0x22>
				vPortFree( pxTCB->pxStack );
 8003560:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8003562:	f7ff fe0b 	bl	800317c <vPortFree>
				vPortFree( pxTCB );
 8003566:	4620      	mov	r0, r4
 8003568:	f7ff fe08 	bl	800317c <vPortFree>
 800356c:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 800356e:	f7ff fe05 	bl	800317c <vPortFree>
 8003572:	bd10      	pop	{r4, pc}
 8003574:	bd10      	pop	{r4, pc}
	...

08003578 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003578:	4b0f      	ldr	r3, [pc, #60]	; (80035b8 <prvCheckTasksWaitingTermination+0x40>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	b1d3      	cbz	r3, 80035b4 <prvCheckTasksWaitingTermination+0x3c>
{
 800357e:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 8003580:	f7ff fbf0 	bl	8002d64 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003584:	4b0d      	ldr	r3, [pc, #52]	; (80035bc <prvCheckTasksWaitingTermination+0x44>)
 8003586:	68db      	ldr	r3, [r3, #12]
 8003588:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800358a:	1d20      	adds	r0, r4, #4
 800358c:	f7ff fb6f 	bl	8002c6e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003590:	4a0b      	ldr	r2, [pc, #44]	; (80035c0 <prvCheckTasksWaitingTermination+0x48>)
 8003592:	6813      	ldr	r3, [r2, #0]
 8003594:	3b01      	subs	r3, #1
 8003596:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003598:	4a07      	ldr	r2, [pc, #28]	; (80035b8 <prvCheckTasksWaitingTermination+0x40>)
 800359a:	6813      	ldr	r3, [r2, #0]
 800359c:	3b01      	subs	r3, #1
 800359e:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 80035a0:	f7ff fc02 	bl	8002da8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 80035a4:	4620      	mov	r0, r4
 80035a6:	f7ff ffc9 	bl	800353c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80035aa:	4b03      	ldr	r3, [pc, #12]	; (80035b8 <prvCheckTasksWaitingTermination+0x40>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d1e6      	bne.n	8003580 <prvCheckTasksWaitingTermination+0x8>
}
 80035b2:	bd10      	pop	{r4, pc}
 80035b4:	4770      	bx	lr
 80035b6:	bf00      	nop
 80035b8:	20003ce4 	.word	0x20003ce4
 80035bc:	20003d54 	.word	0x20003d54
 80035c0:	20003ce0 	.word	0x20003ce0

080035c4 <prvIdleTask>:
{
 80035c4:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 80035c6:	f7ff ffd7 	bl	8003578 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80035ca:	4b06      	ldr	r3, [pc, #24]	; (80035e4 <prvIdleTask+0x20>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d9f9      	bls.n	80035c6 <prvIdleTask+0x2>
				taskYIELD();
 80035d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035d6:	4b04      	ldr	r3, [pc, #16]	; (80035e8 <prvIdleTask+0x24>)
 80035d8:	601a      	str	r2, [r3, #0]
 80035da:	f3bf 8f4f 	dsb	sy
 80035de:	f3bf 8f6f 	isb	sy
 80035e2:	e7f0      	b.n	80035c6 <prvIdleTask+0x2>
 80035e4:	20003c54 	.word	0x20003c54
 80035e8:	e000ed04 	.word	0xe000ed04

080035ec <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80035ec:	b570      	push	{r4, r5, r6, lr}
 80035ee:	4604      	mov	r4, r0
 80035f0:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80035f2:	4b1d      	ldr	r3, [pc, #116]	; (8003668 <prvAddCurrentTaskToDelayedList+0x7c>)
 80035f4:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80035f6:	4b1d      	ldr	r3, [pc, #116]	; (800366c <prvAddCurrentTaskToDelayedList+0x80>)
 80035f8:	6818      	ldr	r0, [r3, #0]
 80035fa:	3004      	adds	r0, #4
 80035fc:	f7ff fb37 	bl	8002c6e <uxListRemove>
 8003600:	b950      	cbnz	r0, 8003618 <prvAddCurrentTaskToDelayedList+0x2c>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8003602:	4b1a      	ldr	r3, [pc, #104]	; (800366c <prvAddCurrentTaskToDelayedList+0x80>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003608:	2301      	movs	r3, #1
 800360a:	fa03 f202 	lsl.w	r2, r3, r2
 800360e:	4918      	ldr	r1, [pc, #96]	; (8003670 <prvAddCurrentTaskToDelayedList+0x84>)
 8003610:	680b      	ldr	r3, [r1, #0]
 8003612:	ea23 0302 	bic.w	r3, r3, r2
 8003616:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003618:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 800361c:	d013      	beq.n	8003646 <prvAddCurrentTaskToDelayedList+0x5a>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 800361e:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003620:	4b12      	ldr	r3, [pc, #72]	; (800366c <prvAddCurrentTaskToDelayedList+0x80>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8003626:	42a5      	cmp	r5, r4
 8003628:	d816      	bhi.n	8003658 <prvAddCurrentTaskToDelayedList+0x6c>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800362a:	4b12      	ldr	r3, [pc, #72]	; (8003674 <prvAddCurrentTaskToDelayedList+0x88>)
 800362c:	6818      	ldr	r0, [r3, #0]
 800362e:	4b0f      	ldr	r3, [pc, #60]	; (800366c <prvAddCurrentTaskToDelayedList+0x80>)
 8003630:	6819      	ldr	r1, [r3, #0]
 8003632:	3104      	adds	r1, #4
 8003634:	f7ff fb01 	bl	8002c3a <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 8003638:	4b0f      	ldr	r3, [pc, #60]	; (8003678 <prvAddCurrentTaskToDelayedList+0x8c>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	429c      	cmp	r4, r3
 800363e:	d201      	bcs.n	8003644 <prvAddCurrentTaskToDelayedList+0x58>
				{
					xNextTaskUnblockTime = xTimeToWake;
 8003640:	4b0d      	ldr	r3, [pc, #52]	; (8003678 <prvAddCurrentTaskToDelayedList+0x8c>)
 8003642:	601c      	str	r4, [r3, #0]
 8003644:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003646:	2e00      	cmp	r6, #0
 8003648:	d0e9      	beq.n	800361e <prvAddCurrentTaskToDelayedList+0x32>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800364a:	4b08      	ldr	r3, [pc, #32]	; (800366c <prvAddCurrentTaskToDelayedList+0x80>)
 800364c:	6819      	ldr	r1, [r3, #0]
 800364e:	3104      	adds	r1, #4
 8003650:	480a      	ldr	r0, [pc, #40]	; (800367c <prvAddCurrentTaskToDelayedList+0x90>)
 8003652:	f7ff fae6 	bl	8002c22 <vListInsertEnd>
 8003656:	bd70      	pop	{r4, r5, r6, pc}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003658:	4b09      	ldr	r3, [pc, #36]	; (8003680 <prvAddCurrentTaskToDelayedList+0x94>)
 800365a:	6818      	ldr	r0, [r3, #0]
 800365c:	4b03      	ldr	r3, [pc, #12]	; (800366c <prvAddCurrentTaskToDelayedList+0x80>)
 800365e:	6819      	ldr	r1, [r3, #0]
 8003660:	3104      	adds	r1, #4
 8003662:	f7ff faea 	bl	8002c3a <vListInsert>
 8003666:	bd70      	pop	{r4, r5, r6, pc}
 8003668:	20003d68 	.word	0x20003d68
 800366c:	20003c48 	.word	0x20003c48
 8003670:	20003cf4 	.word	0x20003cf4
 8003674:	20003c4c 	.word	0x20003c4c
 8003678:	20003d20 	.word	0x20003d20
 800367c:	20003d40 	.word	0x20003d40
 8003680:	20003c50 	.word	0x20003c50

08003684 <xTaskCreateStatic>:
	{
 8003684:	b570      	push	{r4, r5, r6, lr}
 8003686:	b086      	sub	sp, #24
 8003688:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800368a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
 800368c:	b175      	cbz	r5, 80036ac <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800368e:	b1b4      	cbz	r4, 80036be <xTaskCreateStatic+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 8003690:	2654      	movs	r6, #84	; 0x54
 8003692:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003694:	9e04      	ldr	r6, [sp, #16]
 8003696:	2e54      	cmp	r6, #84	; 0x54
 8003698:	d01a      	beq.n	80036d0 <xTaskCreateStatic+0x4c>
 800369a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800369e:	f383 8811 	msr	BASEPRI, r3
 80036a2:	f3bf 8f6f 	isb	sy
 80036a6:	f3bf 8f4f 	dsb	sy
 80036aa:	e7fe      	b.n	80036aa <xTaskCreateStatic+0x26>
 80036ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036b0:	f383 8811 	msr	BASEPRI, r3
 80036b4:	f3bf 8f6f 	isb	sy
 80036b8:	f3bf 8f4f 	dsb	sy
 80036bc:	e7fe      	b.n	80036bc <xTaskCreateStatic+0x38>
 80036be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036c2:	f383 8811 	msr	BASEPRI, r3
 80036c6:	f3bf 8f6f 	isb	sy
 80036ca:	f3bf 8f4f 	dsb	sy
 80036ce:	e7fe      	b.n	80036ce <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80036d0:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80036d2:	2502      	movs	r5, #2
 80036d4:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80036d8:	2500      	movs	r5, #0
 80036da:	9503      	str	r5, [sp, #12]
 80036dc:	9402      	str	r4, [sp, #8]
 80036de:	ad05      	add	r5, sp, #20
 80036e0:	9501      	str	r5, [sp, #4]
 80036e2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80036e4:	9500      	str	r5, [sp, #0]
 80036e6:	f7ff fe61 	bl	80033ac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80036ea:	4620      	mov	r0, r4
 80036ec:	f7ff fed2 	bl	8003494 <prvAddNewTaskToReadyList>
	}
 80036f0:	9805      	ldr	r0, [sp, #20]
 80036f2:	b006      	add	sp, #24
 80036f4:	bd70      	pop	{r4, r5, r6, pc}

080036f6 <xTaskCreate>:
	{
 80036f6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80036fa:	b085      	sub	sp, #20
 80036fc:	4606      	mov	r6, r0
 80036fe:	460f      	mov	r7, r1
 8003700:	4615      	mov	r5, r2
 8003702:	4698      	mov	r8, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003704:	0090      	lsls	r0, r2, #2
 8003706:	f7ff fcb5 	bl	8003074 <pvPortMalloc>
			if( pxStack != NULL )
 800370a:	b310      	cbz	r0, 8003752 <xTaskCreate+0x5c>
 800370c:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800370e:	2054      	movs	r0, #84	; 0x54
 8003710:	f7ff fcb0 	bl	8003074 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8003714:	4604      	mov	r4, r0
 8003716:	b1c0      	cbz	r0, 800374a <xTaskCreate+0x54>
					pxNewTCB->pxStack = pxStack;
 8003718:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
 800371c:	b1dc      	cbz	r4, 8003756 <xTaskCreate+0x60>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800371e:	2300      	movs	r3, #0
 8003720:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003724:	9303      	str	r3, [sp, #12]
 8003726:	9402      	str	r4, [sp, #8]
 8003728:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800372a:	9301      	str	r3, [sp, #4]
 800372c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800372e:	9300      	str	r3, [sp, #0]
 8003730:	4643      	mov	r3, r8
 8003732:	462a      	mov	r2, r5
 8003734:	4639      	mov	r1, r7
 8003736:	4630      	mov	r0, r6
 8003738:	f7ff fe38 	bl	80033ac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800373c:	4620      	mov	r0, r4
 800373e:	f7ff fea9 	bl	8003494 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003742:	2001      	movs	r0, #1
	}
 8003744:	b005      	add	sp, #20
 8003746:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 800374a:	4648      	mov	r0, r9
 800374c:	f7ff fd16 	bl	800317c <vPortFree>
 8003750:	e7e4      	b.n	800371c <xTaskCreate+0x26>
				pxNewTCB = NULL;
 8003752:	2400      	movs	r4, #0
 8003754:	e7e2      	b.n	800371c <xTaskCreate+0x26>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003756:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return xReturn;
 800375a:	e7f3      	b.n	8003744 <xTaskCreate+0x4e>

0800375c <vTaskStartScheduler>:
{
 800375c:	b510      	push	{r4, lr}
 800375e:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003760:	2400      	movs	r4, #0
 8003762:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003764:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003766:	aa07      	add	r2, sp, #28
 8003768:	a906      	add	r1, sp, #24
 800376a:	a805      	add	r0, sp, #20
 800376c:	f000 fc92 	bl	8004094 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003770:	9b05      	ldr	r3, [sp, #20]
 8003772:	9302      	str	r3, [sp, #8]
 8003774:	9b06      	ldr	r3, [sp, #24]
 8003776:	9301      	str	r3, [sp, #4]
 8003778:	9400      	str	r4, [sp, #0]
 800377a:	4623      	mov	r3, r4
 800377c:	9a07      	ldr	r2, [sp, #28]
 800377e:	4910      	ldr	r1, [pc, #64]	; (80037c0 <vTaskStartScheduler+0x64>)
 8003780:	4810      	ldr	r0, [pc, #64]	; (80037c4 <vTaskStartScheduler+0x68>)
 8003782:	f7ff ff7f 	bl	8003684 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8003786:	b118      	cbz	r0, 8003790 <vTaskStartScheduler+0x34>
			xReturn = pdPASS;
 8003788:	2301      	movs	r3, #1
	if( xReturn == pdPASS )
 800378a:	b91b      	cbnz	r3, 8003794 <vTaskStartScheduler+0x38>
}
 800378c:	b008      	add	sp, #32
 800378e:	bd10      	pop	{r4, pc}
			xReturn = pdFAIL;
 8003790:	2300      	movs	r3, #0
 8003792:	e7fa      	b.n	800378a <vTaskStartScheduler+0x2e>
 8003794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003798:	f383 8811 	msr	BASEPRI, r3
 800379c:	f3bf 8f6f 	isb	sy
 80037a0:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 80037a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80037a8:	4b07      	ldr	r3, [pc, #28]	; (80037c8 <vTaskStartScheduler+0x6c>)
 80037aa:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80037ac:	2201      	movs	r2, #1
 80037ae:	4b07      	ldr	r3, [pc, #28]	; (80037cc <vTaskStartScheduler+0x70>)
 80037b0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80037b2:	2200      	movs	r2, #0
 80037b4:	4b06      	ldr	r3, [pc, #24]	; (80037d0 <vTaskStartScheduler+0x74>)
 80037b6:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 80037b8:	f7ff fb76 	bl	8002ea8 <xPortStartScheduler>
 80037bc:	e7e6      	b.n	800378c <vTaskStartScheduler+0x30>
 80037be:	bf00      	nop
 80037c0:	08004b78 	.word	0x08004b78
 80037c4:	080035c5 	.word	0x080035c5
 80037c8:	20003d20 	.word	0x20003d20
 80037cc:	20003d3c 	.word	0x20003d3c
 80037d0:	20003d68 	.word	0x20003d68

080037d4 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 80037d4:	4a02      	ldr	r2, [pc, #8]	; (80037e0 <vTaskSuspendAll+0xc>)
 80037d6:	6813      	ldr	r3, [r2, #0]
 80037d8:	3301      	adds	r3, #1
 80037da:	6013      	str	r3, [r2, #0]
 80037dc:	4770      	bx	lr
 80037de:	bf00      	nop
 80037e0:	20003cec 	.word	0x20003cec

080037e4 <xTaskIncrementTick>:
{
 80037e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80037e6:	4b3c      	ldr	r3, [pc, #240]	; (80038d8 <xTaskIncrementTick+0xf4>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d168      	bne.n	80038c0 <xTaskIncrementTick+0xdc>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80037ee:	4b3b      	ldr	r3, [pc, #236]	; (80038dc <xTaskIncrementTick+0xf8>)
 80037f0:	681d      	ldr	r5, [r3, #0]
 80037f2:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 80037f4:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80037f6:	b9c5      	cbnz	r5, 800382a <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 80037f8:	4b39      	ldr	r3, [pc, #228]	; (80038e0 <xTaskIncrementTick+0xfc>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	b143      	cbz	r3, 8003812 <xTaskIncrementTick+0x2e>
 8003800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003804:	f383 8811 	msr	BASEPRI, r3
 8003808:	f3bf 8f6f 	isb	sy
 800380c:	f3bf 8f4f 	dsb	sy
 8003810:	e7fe      	b.n	8003810 <xTaskIncrementTick+0x2c>
 8003812:	4a33      	ldr	r2, [pc, #204]	; (80038e0 <xTaskIncrementTick+0xfc>)
 8003814:	6811      	ldr	r1, [r2, #0]
 8003816:	4b33      	ldr	r3, [pc, #204]	; (80038e4 <xTaskIncrementTick+0x100>)
 8003818:	6818      	ldr	r0, [r3, #0]
 800381a:	6010      	str	r0, [r2, #0]
 800381c:	6019      	str	r1, [r3, #0]
 800381e:	4a32      	ldr	r2, [pc, #200]	; (80038e8 <xTaskIncrementTick+0x104>)
 8003820:	6813      	ldr	r3, [r2, #0]
 8003822:	3301      	adds	r3, #1
 8003824:	6013      	str	r3, [r2, #0]
 8003826:	f7ff fda7 	bl	8003378 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800382a:	4b30      	ldr	r3, [pc, #192]	; (80038ec <xTaskIncrementTick+0x108>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	429d      	cmp	r5, r3
 8003830:	d23a      	bcs.n	80038a8 <xTaskIncrementTick+0xc4>
BaseType_t xSwitchRequired = pdFALSE;
 8003832:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003834:	4b2e      	ldr	r3, [pc, #184]	; (80038f0 <xTaskIncrementTick+0x10c>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800383a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800383e:	009a      	lsls	r2, r3, #2
 8003840:	4b2c      	ldr	r3, [pc, #176]	; (80038f4 <xTaskIncrementTick+0x110>)
 8003842:	589b      	ldr	r3, [r3, r2]
 8003844:	2b01      	cmp	r3, #1
 8003846:	d940      	bls.n	80038ca <xTaskIncrementTick+0xe6>
				xSwitchRequired = pdTRUE;
 8003848:	2401      	movs	r4, #1
 800384a:	e03e      	b.n	80038ca <xTaskIncrementTick+0xe6>
							xSwitchRequired = pdTRUE;
 800384c:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800384e:	4b24      	ldr	r3, [pc, #144]	; (80038e0 <xTaskIncrementTick+0xfc>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	b353      	cbz	r3, 80038ac <xTaskIncrementTick+0xc8>
 8003856:	2300      	movs	r3, #0
 8003858:	bb53      	cbnz	r3, 80038b0 <xTaskIncrementTick+0xcc>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800385a:	4b21      	ldr	r3, [pc, #132]	; (80038e0 <xTaskIncrementTick+0xfc>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	68db      	ldr	r3, [r3, #12]
 8003860:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003862:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
 8003864:	429d      	cmp	r5, r3
 8003866:	d328      	bcc.n	80038ba <xTaskIncrementTick+0xd6>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003868:	1d37      	adds	r7, r6, #4
 800386a:	4638      	mov	r0, r7
 800386c:	f7ff f9ff 	bl	8002c6e <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003870:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8003872:	b11b      	cbz	r3, 800387c <xTaskIncrementTick+0x98>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003874:	f106 0018 	add.w	r0, r6, #24
 8003878:	f7ff f9f9 	bl	8002c6e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800387c:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800387e:	2201      	movs	r2, #1
 8003880:	409a      	lsls	r2, r3
 8003882:	491d      	ldr	r1, [pc, #116]	; (80038f8 <xTaskIncrementTick+0x114>)
 8003884:	6808      	ldr	r0, [r1, #0]
 8003886:	4302      	orrs	r2, r0
 8003888:	600a      	str	r2, [r1, #0]
 800388a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800388e:	009a      	lsls	r2, r3, #2
 8003890:	4639      	mov	r1, r7
 8003892:	4818      	ldr	r0, [pc, #96]	; (80038f4 <xTaskIncrementTick+0x110>)
 8003894:	4410      	add	r0, r2
 8003896:	f7ff f9c4 	bl	8002c22 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800389a:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 800389c:	4b14      	ldr	r3, [pc, #80]	; (80038f0 <xTaskIncrementTick+0x10c>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a2:	429a      	cmp	r2, r3
 80038a4:	d2d2      	bcs.n	800384c <xTaskIncrementTick+0x68>
 80038a6:	e7d2      	b.n	800384e <xTaskIncrementTick+0x6a>
 80038a8:	2400      	movs	r4, #0
 80038aa:	e7d0      	b.n	800384e <xTaskIncrementTick+0x6a>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80038ac:	2301      	movs	r3, #1
 80038ae:	e7d3      	b.n	8003858 <xTaskIncrementTick+0x74>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80038b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80038b4:	4b0d      	ldr	r3, [pc, #52]	; (80038ec <xTaskIncrementTick+0x108>)
 80038b6:	601a      	str	r2, [r3, #0]
					break;
 80038b8:	e7bc      	b.n	8003834 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 80038ba:	4a0c      	ldr	r2, [pc, #48]	; (80038ec <xTaskIncrementTick+0x108>)
 80038bc:	6013      	str	r3, [r2, #0]
						break;
 80038be:	e7b9      	b.n	8003834 <xTaskIncrementTick+0x50>
		++uxPendedTicks;
 80038c0:	4a0e      	ldr	r2, [pc, #56]	; (80038fc <xTaskIncrementTick+0x118>)
 80038c2:	6813      	ldr	r3, [r2, #0]
 80038c4:	3301      	adds	r3, #1
 80038c6:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 80038c8:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
 80038ca:	4b0d      	ldr	r3, [pc, #52]	; (8003900 <xTaskIncrementTick+0x11c>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	b103      	cbz	r3, 80038d2 <xTaskIncrementTick+0xee>
			xSwitchRequired = pdTRUE;
 80038d0:	2401      	movs	r4, #1
}
 80038d2:	4620      	mov	r0, r4
 80038d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80038d6:	bf00      	nop
 80038d8:	20003cec 	.word	0x20003cec
 80038dc:	20003d68 	.word	0x20003d68
 80038e0:	20003c4c 	.word	0x20003c4c
 80038e4:	20003c50 	.word	0x20003c50
 80038e8:	20003d24 	.word	0x20003d24
 80038ec:	20003d20 	.word	0x20003d20
 80038f0:	20003c48 	.word	0x20003c48
 80038f4:	20003c54 	.word	0x20003c54
 80038f8:	20003cf4 	.word	0x20003cf4
 80038fc:	20003ce8 	.word	0x20003ce8
 8003900:	20003d6c 	.word	0x20003d6c

08003904 <xTaskResumeAll>:
{
 8003904:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 8003906:	4b35      	ldr	r3, [pc, #212]	; (80039dc <xTaskResumeAll+0xd8>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	b943      	cbnz	r3, 800391e <xTaskResumeAll+0x1a>
 800390c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003910:	f383 8811 	msr	BASEPRI, r3
 8003914:	f3bf 8f6f 	isb	sy
 8003918:	f3bf 8f4f 	dsb	sy
 800391c:	e7fe      	b.n	800391c <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 800391e:	f7ff fa21 	bl	8002d64 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8003922:	4b2e      	ldr	r3, [pc, #184]	; (80039dc <xTaskResumeAll+0xd8>)
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	3a01      	subs	r2, #1
 8003928:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d150      	bne.n	80039d2 <xTaskResumeAll+0xce>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003930:	4b2b      	ldr	r3, [pc, #172]	; (80039e0 <xTaskResumeAll+0xdc>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	b923      	cbnz	r3, 8003940 <xTaskResumeAll+0x3c>
BaseType_t xAlreadyYielded = pdFALSE;
 8003936:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8003938:	f7ff fa36 	bl	8002da8 <vPortExitCritical>
}
 800393c:	4620      	mov	r0, r4
 800393e:	bd38      	pop	{r3, r4, r5, pc}
 8003940:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003942:	4b28      	ldr	r3, [pc, #160]	; (80039e4 <xTaskResumeAll+0xe0>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	b31b      	cbz	r3, 8003990 <xTaskResumeAll+0x8c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003948:	4b26      	ldr	r3, [pc, #152]	; (80039e4 <xTaskResumeAll+0xe0>)
 800394a:	68db      	ldr	r3, [r3, #12]
 800394c:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800394e:	f104 0018 	add.w	r0, r4, #24
 8003952:	f7ff f98c 	bl	8002c6e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003956:	1d25      	adds	r5, r4, #4
 8003958:	4628      	mov	r0, r5
 800395a:	f7ff f988 	bl	8002c6e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800395e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003960:	2201      	movs	r2, #1
 8003962:	409a      	lsls	r2, r3
 8003964:	4920      	ldr	r1, [pc, #128]	; (80039e8 <xTaskResumeAll+0xe4>)
 8003966:	6808      	ldr	r0, [r1, #0]
 8003968:	4302      	orrs	r2, r0
 800396a:	600a      	str	r2, [r1, #0]
 800396c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003970:	009a      	lsls	r2, r3, #2
 8003972:	4629      	mov	r1, r5
 8003974:	481d      	ldr	r0, [pc, #116]	; (80039ec <xTaskResumeAll+0xe8>)
 8003976:	4410      	add	r0, r2
 8003978:	f7ff f953 	bl	8002c22 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800397c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800397e:	4b1c      	ldr	r3, [pc, #112]	; (80039f0 <xTaskResumeAll+0xec>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003984:	429a      	cmp	r2, r3
 8003986:	d3dc      	bcc.n	8003942 <xTaskResumeAll+0x3e>
						xYieldPending = pdTRUE;
 8003988:	2201      	movs	r2, #1
 800398a:	4b1a      	ldr	r3, [pc, #104]	; (80039f4 <xTaskResumeAll+0xf0>)
 800398c:	601a      	str	r2, [r3, #0]
 800398e:	e7d8      	b.n	8003942 <xTaskResumeAll+0x3e>
				if( pxTCB != NULL )
 8003990:	b10c      	cbz	r4, 8003996 <xTaskResumeAll+0x92>
					prvResetNextTaskUnblockTime();
 8003992:	f7ff fcf1 	bl	8003378 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003996:	4b18      	ldr	r3, [pc, #96]	; (80039f8 <xTaskResumeAll+0xf4>)
 8003998:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800399a:	b974      	cbnz	r4, 80039ba <xTaskResumeAll+0xb6>
				if( xYieldPending != pdFALSE )
 800399c:	4b15      	ldr	r3, [pc, #84]	; (80039f4 <xTaskResumeAll+0xf0>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	b1cb      	cbz	r3, 80039d6 <xTaskResumeAll+0xd2>
					taskYIELD_IF_USING_PREEMPTION();
 80039a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039a6:	4b15      	ldr	r3, [pc, #84]	; (80039fc <xTaskResumeAll+0xf8>)
 80039a8:	601a      	str	r2, [r3, #0]
 80039aa:	f3bf 8f4f 	dsb	sy
 80039ae:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 80039b2:	2401      	movs	r4, #1
 80039b4:	e7c0      	b.n	8003938 <xTaskResumeAll+0x34>
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80039b6:	3c01      	subs	r4, #1
 80039b8:	d007      	beq.n	80039ca <xTaskResumeAll+0xc6>
							if( xTaskIncrementTick() != pdFALSE )
 80039ba:	f7ff ff13 	bl	80037e4 <xTaskIncrementTick>
 80039be:	2800      	cmp	r0, #0
 80039c0:	d0f9      	beq.n	80039b6 <xTaskResumeAll+0xb2>
								xYieldPending = pdTRUE;
 80039c2:	2201      	movs	r2, #1
 80039c4:	4b0b      	ldr	r3, [pc, #44]	; (80039f4 <xTaskResumeAll+0xf0>)
 80039c6:	601a      	str	r2, [r3, #0]
 80039c8:	e7f5      	b.n	80039b6 <xTaskResumeAll+0xb2>
						uxPendedTicks = 0;
 80039ca:	2200      	movs	r2, #0
 80039cc:	4b0a      	ldr	r3, [pc, #40]	; (80039f8 <xTaskResumeAll+0xf4>)
 80039ce:	601a      	str	r2, [r3, #0]
 80039d0:	e7e4      	b.n	800399c <xTaskResumeAll+0x98>
BaseType_t xAlreadyYielded = pdFALSE;
 80039d2:	2400      	movs	r4, #0
 80039d4:	e7b0      	b.n	8003938 <xTaskResumeAll+0x34>
 80039d6:	2400      	movs	r4, #0
 80039d8:	e7ae      	b.n	8003938 <xTaskResumeAll+0x34>
 80039da:	bf00      	nop
 80039dc:	20003cec 	.word	0x20003cec
 80039e0:	20003ce0 	.word	0x20003ce0
 80039e4:	20003d28 	.word	0x20003d28
 80039e8:	20003cf4 	.word	0x20003cf4
 80039ec:	20003c54 	.word	0x20003c54
 80039f0:	20003c48 	.word	0x20003c48
 80039f4:	20003d6c 	.word	0x20003d6c
 80039f8:	20003ce8 	.word	0x20003ce8
 80039fc:	e000ed04 	.word	0xe000ed04

08003a00 <vTaskDelay>:
	{
 8003a00:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003a02:	b1a8      	cbz	r0, 8003a30 <vTaskDelay+0x30>
 8003a04:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 8003a06:	4b10      	ldr	r3, [pc, #64]	; (8003a48 <vTaskDelay+0x48>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	b143      	cbz	r3, 8003a1e <vTaskDelay+0x1e>
 8003a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a10:	f383 8811 	msr	BASEPRI, r3
 8003a14:	f3bf 8f6f 	isb	sy
 8003a18:	f3bf 8f4f 	dsb	sy
 8003a1c:	e7fe      	b.n	8003a1c <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8003a1e:	f7ff fed9 	bl	80037d4 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003a22:	2100      	movs	r1, #0
 8003a24:	4620      	mov	r0, r4
 8003a26:	f7ff fde1 	bl	80035ec <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8003a2a:	f7ff ff6b 	bl	8003904 <xTaskResumeAll>
 8003a2e:	e000      	b.n	8003a32 <vTaskDelay+0x32>
	BaseType_t xAlreadyYielded = pdFALSE;
 8003a30:	2000      	movs	r0, #0
		if( xAlreadyYielded == pdFALSE )
 8003a32:	b938      	cbnz	r0, 8003a44 <vTaskDelay+0x44>
			portYIELD_WITHIN_API();
 8003a34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a38:	4b04      	ldr	r3, [pc, #16]	; (8003a4c <vTaskDelay+0x4c>)
 8003a3a:	601a      	str	r2, [r3, #0]
 8003a3c:	f3bf 8f4f 	dsb	sy
 8003a40:	f3bf 8f6f 	isb	sy
 8003a44:	bd10      	pop	{r4, pc}
 8003a46:	bf00      	nop
 8003a48:	20003cec 	.word	0x20003cec
 8003a4c:	e000ed04 	.word	0xe000ed04

08003a50 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003a50:	4b21      	ldr	r3, [pc, #132]	; (8003ad8 <vTaskSwitchContext+0x88>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	b9c3      	cbnz	r3, 8003a88 <vTaskSwitchContext+0x38>
		xYieldPending = pdFALSE;
 8003a56:	2200      	movs	r2, #0
 8003a58:	4b20      	ldr	r3, [pc, #128]	; (8003adc <vTaskSwitchContext+0x8c>)
 8003a5a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003a5c:	4b20      	ldr	r3, [pc, #128]	; (8003ae0 <vTaskSwitchContext+0x90>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003a60:	fab3 f383 	clz	r3, r3
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	f1c3 031f 	rsb	r3, r3, #31
 8003a6a:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8003a6e:	008a      	lsls	r2, r1, #2
 8003a70:	491c      	ldr	r1, [pc, #112]	; (8003ae4 <vTaskSwitchContext+0x94>)
 8003a72:	588a      	ldr	r2, [r1, r2]
 8003a74:	b962      	cbnz	r2, 8003a90 <vTaskSwitchContext+0x40>
	__asm volatile
 8003a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a7a:	f383 8811 	msr	BASEPRI, r3
 8003a7e:	f3bf 8f6f 	isb	sy
 8003a82:	f3bf 8f4f 	dsb	sy
 8003a86:	e7fe      	b.n	8003a86 <vTaskSwitchContext+0x36>
		xYieldPending = pdTRUE;
 8003a88:	2201      	movs	r2, #1
 8003a8a:	4b14      	ldr	r3, [pc, #80]	; (8003adc <vTaskSwitchContext+0x8c>)
 8003a8c:	601a      	str	r2, [r3, #0]
 8003a8e:	4770      	bx	lr
{
 8003a90:	b410      	push	{r4}
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003a92:	4814      	ldr	r0, [pc, #80]	; (8003ae4 <vTaskSwitchContext+0x94>)
 8003a94:	009a      	lsls	r2, r3, #2
 8003a96:	18d4      	adds	r4, r2, r3
 8003a98:	00a1      	lsls	r1, r4, #2
 8003a9a:	4401      	add	r1, r0
 8003a9c:	684c      	ldr	r4, [r1, #4]
 8003a9e:	6864      	ldr	r4, [r4, #4]
 8003aa0:	604c      	str	r4, [r1, #4]
 8003aa2:	441a      	add	r2, r3
 8003aa4:	0091      	lsls	r1, r2, #2
 8003aa6:	3108      	adds	r1, #8
 8003aa8:	4408      	add	r0, r1
 8003aaa:	4284      	cmp	r4, r0
 8003aac:	d00b      	beq.n	8003ac6 <vTaskSwitchContext+0x76>
 8003aae:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003ab2:	009a      	lsls	r2, r3, #2
 8003ab4:	4b0b      	ldr	r3, [pc, #44]	; (8003ae4 <vTaskSwitchContext+0x94>)
 8003ab6:	4413      	add	r3, r2
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	68da      	ldr	r2, [r3, #12]
 8003abc:	4b0a      	ldr	r3, [pc, #40]	; (8003ae8 <vTaskSwitchContext+0x98>)
 8003abe:	601a      	str	r2, [r3, #0]
}
 8003ac0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003ac4:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003ac6:	6860      	ldr	r0, [r4, #4]
 8003ac8:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8003acc:	0091      	lsls	r1, r2, #2
 8003ace:	4a05      	ldr	r2, [pc, #20]	; (8003ae4 <vTaskSwitchContext+0x94>)
 8003ad0:	440a      	add	r2, r1
 8003ad2:	6050      	str	r0, [r2, #4]
 8003ad4:	e7eb      	b.n	8003aae <vTaskSwitchContext+0x5e>
 8003ad6:	bf00      	nop
 8003ad8:	20003cec 	.word	0x20003cec
 8003adc:	20003d6c 	.word	0x20003d6c
 8003ae0:	20003cf4 	.word	0x20003cf4
 8003ae4:	20003c54 	.word	0x20003c54
 8003ae8:	20003c48 	.word	0x20003c48

08003aec <xTaskRemoveFromEventList>:
{
 8003aec:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003aee:	68c3      	ldr	r3, [r0, #12]
 8003af0:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8003af2:	b324      	cbz	r4, 8003b3e <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003af4:	f104 0518 	add.w	r5, r4, #24
 8003af8:	4628      	mov	r0, r5
 8003afa:	f7ff f8b8 	bl	8002c6e <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003afe:	4b18      	ldr	r3, [pc, #96]	; (8003b60 <xTaskRemoveFromEventList+0x74>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	bb2b      	cbnz	r3, 8003b50 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003b04:	1d25      	adds	r5, r4, #4
 8003b06:	4628      	mov	r0, r5
 8003b08:	f7ff f8b1 	bl	8002c6e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003b0c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003b0e:	2201      	movs	r2, #1
 8003b10:	409a      	lsls	r2, r3
 8003b12:	4914      	ldr	r1, [pc, #80]	; (8003b64 <xTaskRemoveFromEventList+0x78>)
 8003b14:	6808      	ldr	r0, [r1, #0]
 8003b16:	4302      	orrs	r2, r0
 8003b18:	600a      	str	r2, [r1, #0]
 8003b1a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003b1e:	009a      	lsls	r2, r3, #2
 8003b20:	4629      	mov	r1, r5
 8003b22:	4811      	ldr	r0, [pc, #68]	; (8003b68 <xTaskRemoveFromEventList+0x7c>)
 8003b24:	4410      	add	r0, r2
 8003b26:	f7ff f87c 	bl	8002c22 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003b2a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003b2c:	4b0f      	ldr	r3, [pc, #60]	; (8003b6c <xTaskRemoveFromEventList+0x80>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d911      	bls.n	8003b5a <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
 8003b36:	2001      	movs	r0, #1
 8003b38:	4b0d      	ldr	r3, [pc, #52]	; (8003b70 <xTaskRemoveFromEventList+0x84>)
 8003b3a:	6018      	str	r0, [r3, #0]
 8003b3c:	bd38      	pop	{r3, r4, r5, pc}
 8003b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b42:	f383 8811 	msr	BASEPRI, r3
 8003b46:	f3bf 8f6f 	isb	sy
 8003b4a:	f3bf 8f4f 	dsb	sy
 8003b4e:	e7fe      	b.n	8003b4e <xTaskRemoveFromEventList+0x62>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003b50:	4629      	mov	r1, r5
 8003b52:	4808      	ldr	r0, [pc, #32]	; (8003b74 <xTaskRemoveFromEventList+0x88>)
 8003b54:	f7ff f865 	bl	8002c22 <vListInsertEnd>
 8003b58:	e7e7      	b.n	8003b2a <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
 8003b5a:	2000      	movs	r0, #0
}
 8003b5c:	bd38      	pop	{r3, r4, r5, pc}
 8003b5e:	bf00      	nop
 8003b60:	20003cec 	.word	0x20003cec
 8003b64:	20003cf4 	.word	0x20003cf4
 8003b68:	20003c54 	.word	0x20003c54
 8003b6c:	20003c48 	.word	0x20003c48
 8003b70:	20003d6c 	.word	0x20003d6c
 8003b74:	20003d28 	.word	0x20003d28

08003b78 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8003b78:	b500      	push	{lr}
 8003b7a:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	9300      	str	r3, [sp, #0]
 8003b80:	9301      	str	r3, [sp, #4]
 8003b82:	9302      	str	r3, [sp, #8]
 8003b84:	9303      	str	r3, [sp, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8003b86:	4815      	ldr	r0, [pc, #84]	; (8003bdc <MX_ADC1_Init+0x64>)
 8003b88:	4a15      	ldr	r2, [pc, #84]	; (8003be0 <MX_ADC1_Init+0x68>)
 8003b8a:	6002      	str	r2, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003b8c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003b90:	6042      	str	r2, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003b92:	6083      	str	r3, [r0, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8003b94:	6103      	str	r3, [r0, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8003b96:	2201      	movs	r2, #1
 8003b98:	7602      	strb	r2, [r0, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003b9a:	f880 3020 	strb.w	r3, [r0, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003b9e:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003ba0:	4910      	ldr	r1, [pc, #64]	; (8003be4 <MX_ADC1_Init+0x6c>)
 8003ba2:	6281      	str	r1, [r0, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003ba4:	60c3      	str	r3, [r0, #12]
  hadc1.Init.NbrOfConversion = 1;
 8003ba6:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003ba8:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003bac:	6142      	str	r2, [r0, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003bae:	f7fc fd89 	bl	80006c4 <HAL_ADC_Init>
 8003bb2:	b968      	cbnz	r0, 8003bd0 <MX_ADC1_Init+0x58>
  {
    Error_Handler();
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8003bb4:	2303      	movs	r3, #3
 8003bb6:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 1;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	9301      	str	r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003bc0:	4669      	mov	r1, sp
 8003bc2:	4806      	ldr	r0, [pc, #24]	; (8003bdc <MX_ADC1_Init+0x64>)
 8003bc4:	f7fc fdaa 	bl	800071c <HAL_ADC_ConfigChannel>
 8003bc8:	b928      	cbnz	r0, 8003bd6 <MX_ADC1_Init+0x5e>
  {
    Error_Handler();
  }

}
 8003bca:	b005      	add	sp, #20
 8003bcc:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8003bd0:	f000 fc98 	bl	8004504 <Error_Handler>
 8003bd4:	e7ee      	b.n	8003bb4 <MX_ADC1_Init+0x3c>
    Error_Handler();
 8003bd6:	f000 fc95 	bl	8004504 <Error_Handler>
}
 8003bda:	e7f6      	b.n	8003bca <MX_ADC1_Init+0x52>
 8003bdc:	20003fd0 	.word	0x20003fd0
 8003be0:	40012000 	.word	0x40012000
 8003be4:	0f000001 	.word	0x0f000001

08003be8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8003be8:	b500      	push	{lr}
 8003bea:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bec:	2300      	movs	r3, #0
 8003bee:	9303      	str	r3, [sp, #12]
 8003bf0:	9304      	str	r3, [sp, #16]
 8003bf2:	9305      	str	r3, [sp, #20]
 8003bf4:	9306      	str	r3, [sp, #24]
 8003bf6:	9307      	str	r3, [sp, #28]
  if(adcHandle->Instance==ADC1)
 8003bf8:	6802      	ldr	r2, [r0, #0]
 8003bfa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003bfe:	f503 3390 	add.w	r3, r3, #73728	; 0x12000
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d002      	beq.n	8003c0c <HAL_ADC_MspInit+0x24>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8003c06:	b009      	add	sp, #36	; 0x24
 8003c08:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003c0c:	2100      	movs	r1, #0
 8003c0e:	9101      	str	r1, [sp, #4]
 8003c10:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8003c14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c16:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c1a:	645a      	str	r2, [r3, #68]	; 0x44
 8003c1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c1e:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8003c22:	9201      	str	r2, [sp, #4]
 8003c24:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c26:	9102      	str	r1, [sp, #8]
 8003c28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c2a:	f042 0201 	orr.w	r2, r2, #1
 8003c2e:	631a      	str	r2, [r3, #48]	; 0x30
 8003c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c32:	f003 0301 	and.w	r3, r3, #1
 8003c36:	9302      	str	r3, [sp, #8]
 8003c38:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003c3a:	2308      	movs	r3, #8
 8003c3c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003c3e:	2303      	movs	r3, #3
 8003c40:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c42:	a903      	add	r1, sp, #12
 8003c44:	4801      	ldr	r0, [pc, #4]	; (8003c4c <HAL_ADC_MspInit+0x64>)
 8003c46:	f7fd f8d3 	bl	8000df0 <HAL_GPIO_Init>
}
 8003c4a:	e7dc      	b.n	8003c06 <HAL_ADC_MspInit+0x1e>
 8003c4c:	40020000 	.word	0x40020000

08003c50 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8003c50:	b500      	push	{lr}
 8003c52:	b083      	sub	sp, #12
   uint8_t MACAddr[6] ;

  heth.Instance = ETH;
 8003c54:	4812      	ldr	r0, [pc, #72]	; (8003ca0 <MX_ETH_Init+0x50>)
 8003c56:	4b13      	ldr	r3, [pc, #76]	; (8003ca4 <MX_ETH_Init+0x54>)
 8003c58:	6003      	str	r3, [r0, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	6043      	str	r3, [r0, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	8203      	strh	r3, [r0, #16]
  MACAddr[0] = 0x00;
 8003c62:	f88d 3000 	strb.w	r3, [sp]
  MACAddr[1] = 0x80;
 8003c66:	2280      	movs	r2, #128	; 0x80
 8003c68:	f88d 2001 	strb.w	r2, [sp, #1]
  MACAddr[2] = 0xE1;
 8003c6c:	22e1      	movs	r2, #225	; 0xe1
 8003c6e:	f88d 2002 	strb.w	r2, [sp, #2]
  MACAddr[3] = 0x00;
 8003c72:	f88d 3003 	strb.w	r3, [sp, #3]
  MACAddr[4] = 0x00;
 8003c76:	f88d 3004 	strb.w	r3, [sp, #4]
  MACAddr[5] = 0x00;
 8003c7a:	f88d 3005 	strb.w	r3, [sp, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8003c7e:	f8c0 d014 	str.w	sp, [r0, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8003c82:	6183      	str	r3, [r0, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8003c84:	61c3      	str	r3, [r0, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8003c86:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8003c8a:	6203      	str	r3, [r0, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8003c8c:	f7fc ff84 	bl	8000b98 <HAL_ETH_Init>
 8003c90:	b910      	cbnz	r0, 8003c98 <MX_ETH_Init+0x48>
  {
    Error_Handler();
  }

}
 8003c92:	b003      	add	sp, #12
 8003c94:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8003c98:	f000 fc34 	bl	8004504 <Error_Handler>
}
 8003c9c:	e7f9      	b.n	8003c92 <MX_ETH_Init+0x42>
 8003c9e:	bf00      	nop
 8003ca0:	20004028 	.word	0x20004028
 8003ca4:	40028000 	.word	0x40028000

08003ca8 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8003ca8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003caa:	b08d      	sub	sp, #52	; 0x34

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cac:	2300      	movs	r3, #0
 8003cae:	9307      	str	r3, [sp, #28]
 8003cb0:	9308      	str	r3, [sp, #32]
 8003cb2:	9309      	str	r3, [sp, #36]	; 0x24
 8003cb4:	930a      	str	r3, [sp, #40]	; 0x28
 8003cb6:	930b      	str	r3, [sp, #44]	; 0x2c
  if(ethHandle->Instance==ETH)
 8003cb8:	6802      	ldr	r2, [r0, #0]
 8003cba:	4b3d      	ldr	r3, [pc, #244]	; (8003db0 <HAL_ETH_MspInit+0x108>)
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	d001      	beq.n	8003cc4 <HAL_ETH_MspInit+0x1c>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8003cc0:	b00d      	add	sp, #52	; 0x34
 8003cc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ETH_CLK_ENABLE();
 8003cc4:	2400      	movs	r4, #0
 8003cc6:	9400      	str	r4, [sp, #0]
 8003cc8:	f5a3 4390 	sub.w	r3, r3, #18432	; 0x4800
 8003ccc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003cce:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8003cd2:	631a      	str	r2, [r3, #48]	; 0x30
 8003cd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003cd6:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8003cda:	9200      	str	r2, [sp, #0]
 8003cdc:	9a00      	ldr	r2, [sp, #0]
 8003cde:	9401      	str	r4, [sp, #4]
 8003ce0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ce2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003ce6:	631a      	str	r2, [r3, #48]	; 0x30
 8003ce8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003cea:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 8003cee:	9201      	str	r2, [sp, #4]
 8003cf0:	9a01      	ldr	r2, [sp, #4]
 8003cf2:	9402      	str	r4, [sp, #8]
 8003cf4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003cf6:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8003cfa:	631a      	str	r2, [r3, #48]	; 0x30
 8003cfc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003cfe:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8003d02:	9202      	str	r2, [sp, #8]
 8003d04:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d06:	9403      	str	r4, [sp, #12]
 8003d08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d0a:	f042 0204 	orr.w	r2, r2, #4
 8003d0e:	631a      	str	r2, [r3, #48]	; 0x30
 8003d10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d12:	f002 0204 	and.w	r2, r2, #4
 8003d16:	9203      	str	r2, [sp, #12]
 8003d18:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d1a:	9404      	str	r4, [sp, #16]
 8003d1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d1e:	f042 0201 	orr.w	r2, r2, #1
 8003d22:	631a      	str	r2, [r3, #48]	; 0x30
 8003d24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d26:	f002 0201 	and.w	r2, r2, #1
 8003d2a:	9204      	str	r2, [sp, #16]
 8003d2c:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d2e:	9405      	str	r4, [sp, #20]
 8003d30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d32:	f042 0202 	orr.w	r2, r2, #2
 8003d36:	631a      	str	r2, [r3, #48]	; 0x30
 8003d38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d3a:	f002 0202 	and.w	r2, r2, #2
 8003d3e:	9205      	str	r2, [sp, #20]
 8003d40:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003d42:	9406      	str	r4, [sp, #24]
 8003d44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d46:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d4a:	631a      	str	r2, [r3, #48]	; 0x30
 8003d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d52:	9306      	str	r3, [sp, #24]
 8003d54:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8003d56:	2332      	movs	r3, #50	; 0x32
 8003d58:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d5a:	2702      	movs	r7, #2
 8003d5c:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d5e:	2603      	movs	r6, #3
 8003d60:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003d62:	250b      	movs	r5, #11
 8003d64:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d66:	a907      	add	r1, sp, #28
 8003d68:	4812      	ldr	r0, [pc, #72]	; (8003db4 <HAL_ETH_MspInit+0x10c>)
 8003d6a:	f7fd f841 	bl	8000df0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8003d6e:	2386      	movs	r3, #134	; 0x86
 8003d70:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d72:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d74:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d76:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003d78:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d7a:	a907      	add	r1, sp, #28
 8003d7c:	480e      	ldr	r0, [pc, #56]	; (8003db8 <HAL_ETH_MspInit+0x110>)
 8003d7e:	f7fd f837 	bl	8000df0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8003d82:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003d86:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d88:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d8a:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d8c:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003d8e:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8003d90:	a907      	add	r1, sp, #28
 8003d92:	480a      	ldr	r0, [pc, #40]	; (8003dbc <HAL_ETH_MspInit+0x114>)
 8003d94:	f7fd f82c 	bl	8000df0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8003d98:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8003d9c:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d9e:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003da0:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003da2:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003da4:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003da6:	a907      	add	r1, sp, #28
 8003da8:	4805      	ldr	r0, [pc, #20]	; (8003dc0 <HAL_ETH_MspInit+0x118>)
 8003daa:	f7fd f821 	bl	8000df0 <HAL_GPIO_Init>
}
 8003dae:	e787      	b.n	8003cc0 <HAL_ETH_MspInit+0x18>
 8003db0:	40028000 	.word	0x40028000
 8003db4:	40020800 	.word	0x40020800
 8003db8:	40020000 	.word	0x40020000
 8003dbc:	40020400 	.word	0x40020400
 8003dc0:	40021800 	.word	0x40021800

08003dc4 <StartDefaultTask>:
  * @retval None
  */

/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8003dc4:	b508      	push	{r3, lr}
//	  adcResult = HAL_ADC_GetValue(&hadc1);
//	  gresu_a_afficher = adcResult;
//	  printf("luminosité : %d --->  start tick : %d\n", gresu_a_afficher, start_tick);
//
//	  osDelayUntil(&xLastWakeTime, pdMS_TO_TICKS(PERIODE_MS));
	  osDelay(1);
 8003dc6:	2001      	movs	r0, #1
 8003dc8:	f7fe ff00 	bl	8002bcc <osDelay>
 8003dcc:	e7fb      	b.n	8003dc6 <StartDefaultTask+0x2>

08003dce <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8003dce:	b508      	push	{r3, lr}
//	  if (gresu_a_afficher <= 3900)
//	  {
//		  HAL_GPIO_WritePin(GPIOB, LD3_Pin, 0);
//	  }
//	  osDelay(led_eteinte);
	  osDelay(1);
 8003dd0:	2001      	movs	r0, #1
 8003dd2:	f7fe fefb 	bl	8002bcc <osDelay>
 8003dd6:	e7fb      	b.n	8003dd0 <StartTask02+0x2>

08003dd8 <InitAndAffich>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_InitAndAffich */
void InitAndAffich(void const * argument)
{
 8003dd8:	b570      	push	{r4, r5, r6, lr}
 8003dda:	b0a2      	sub	sp, #136	; 0x88
  /* USER CODE BEGIN InitAndAffich */
	uint8_t transmit_data_buffer[64];
	uint8_t receive_data_buffer[64];
	int octet_a_lire = 3;
	adresse_rtc = 0b1101000 << 1;
 8003ddc:	22d0      	movs	r2, #208	; 0xd0
 8003dde:	4b27      	ldr	r3, [pc, #156]	; (8003e7c <InitAndAffich+0xa4>)
 8003de0:	601a      	str	r2, [r3, #0]

//	int date;
//	int mois;
//	int annee;

	transmit_data_buffer[0] = 0b00000000;	//pointeur
 8003de2:	2300      	movs	r3, #0
 8003de4:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	transmit_data_buffer[1] = 0b00000000;	//sec
 8003de8:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
	transmit_data_buffer[2] = 0b00010011;	//min
 8003dec:	2313      	movs	r3, #19
 8003dee:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
	transmit_data_buffer[3] = 0b00001000;	//heure
 8003df2:	2308      	movs	r3, #8
 8003df4:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
 8003df8:	e003      	b.n	8003e02 <InitAndAffich+0x2a>
//		  annee += receive_data_buffer[6] & MASQUE_UNITE;

		  printf("- %dh - %dmin - %dsec -\n", heures, minutes, secondes);
//		  printf("- Date:%d/Month:%d/Year:20%d -\n\n", date, mois, annee);
	  }
	  osDelay(1000);
 8003dfa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003dfe:	f7fe fee5 	bl	8002bcc <osDelay>
	  if(mode_reglage == 0)
 8003e02:	4b1f      	ldr	r3, [pc, #124]	; (8003e80 <InitAndAffich+0xa8>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d1f7      	bne.n	8003dfa <InitAndAffich+0x22>
		  printf("mode normal\n");
 8003e0a:	481e      	ldr	r0, [pc, #120]	; (8003e84 <InitAndAffich+0xac>)
 8003e0c:	f000 fd42 	bl	8004894 <puts>
		  HAL_I2C_Master_Transmit(&hi2c1, adresse_rtc, transmit_data_buffer, 1, 100);
 8003e10:	4e1a      	ldr	r6, [pc, #104]	; (8003e7c <InitAndAffich+0xa4>)
 8003e12:	8831      	ldrh	r1, [r6, #0]
 8003e14:	4c1c      	ldr	r4, [pc, #112]	; (8003e88 <InitAndAffich+0xb0>)
 8003e16:	2564      	movs	r5, #100	; 0x64
 8003e18:	9500      	str	r5, [sp, #0]
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	aa12      	add	r2, sp, #72	; 0x48
 8003e1e:	4620      	mov	r0, r4
 8003e20:	f7fd fbbe 	bl	80015a0 <HAL_I2C_Master_Transmit>
		  HAL_I2C_Master_Receive(&hi2c1, adresse_rtc, (uint8_t *)receive_data_buffer, octet_a_lire, 100);
 8003e24:	8831      	ldrh	r1, [r6, #0]
 8003e26:	9500      	str	r5, [sp, #0]
 8003e28:	2303      	movs	r3, #3
 8003e2a:	aa02      	add	r2, sp, #8
 8003e2c:	4620      	mov	r0, r4
 8003e2e:	f7fd fc71 	bl	8001714 <HAL_I2C_Master_Receive>
		  secondes = (receive_data_buffer[0] >> 4) * 10;
 8003e32:	f89d 1008 	ldrb.w	r1, [sp, #8]
 8003e36:	090a      	lsrs	r2, r1, #4
 8003e38:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003e3c:	0053      	lsls	r3, r2, #1
		  secondes += receive_data_buffer[0] & MASQUE_UNITE;
 8003e3e:	f001 010f 	and.w	r1, r1, #15
 8003e42:	440b      	add	r3, r1
 8003e44:	4a11      	ldr	r2, [pc, #68]	; (8003e8c <InitAndAffich+0xb4>)
 8003e46:	6013      	str	r3, [r2, #0]
		  minutes = (receive_data_buffer[1] >> 4) * 10;
 8003e48:	f89d 0009 	ldrb.w	r0, [sp, #9]
 8003e4c:	0901      	lsrs	r1, r0, #4
 8003e4e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8003e52:	004a      	lsls	r2, r1, #1
		  minutes += receive_data_buffer[1] & MASQUE_UNITE;
 8003e54:	f000 000f 	and.w	r0, r0, #15
 8003e58:	4402      	add	r2, r0
 8003e5a:	490d      	ldr	r1, [pc, #52]	; (8003e90 <InitAndAffich+0xb8>)
 8003e5c:	600a      	str	r2, [r1, #0]
		  heures = (receive_data_buffer[2] >> 4) * 10;
 8003e5e:	f89d 400a 	ldrb.w	r4, [sp, #10]
 8003e62:	0920      	lsrs	r0, r4, #4
 8003e64:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003e68:	0041      	lsls	r1, r0, #1
		  heures += receive_data_buffer[2] & MASQUE_UNITE;
 8003e6a:	f004 040f 	and.w	r4, r4, #15
 8003e6e:	4421      	add	r1, r4
 8003e70:	4808      	ldr	r0, [pc, #32]	; (8003e94 <InitAndAffich+0xbc>)
 8003e72:	6001      	str	r1, [r0, #0]
		  printf("- %dh - %dmin - %dsec -\n", heures, minutes, secondes);
 8003e74:	4808      	ldr	r0, [pc, #32]	; (8003e98 <InitAndAffich+0xc0>)
 8003e76:	f000 fcce 	bl	8004816 <iprintf>
 8003e7a:	e7be      	b.n	8003dfa <InitAndAffich+0x22>
 8003e7c:	20004018 	.word	0x20004018
 8003e80:	20004020 	.word	0x20004020
 8003e84:	08004b80 	.word	0x08004b80
 8003e88:	20004084 	.word	0x20004084
 8003e8c:	20003fcc 	.word	0x20003fcc
 8003e90:	20004024 	.word	0x20004024
 8003e94:	20003fc8 	.word	0x20003fc8
 8003e98:	08004b8c 	.word	0x08004b8c

08003e9c <ModeReglage>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ModeReglage */
void ModeReglage(void const * argument)
{
 8003e9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e9e:	b093      	sub	sp, #76	; 0x4c
  /* USER CODE BEGIN ModeReglage */
	int temp;
	int temp2;
	int sens = 1;
	int champ = 1;
 8003ea0:	2501      	movs	r5, #1
	int sens = 1;
 8003ea2:	462e      	mov	r6, r5
 8003ea4:	e06e      	b.n	8003f84 <ModeReglage+0xe8>
		  printf("mode reglage\n");
		  switch(g_appui_touche)
		  {
		  	  case TOUCHE_GAUCHE:
		  	  {
		  		  printf("changement sens\n");
 8003ea6:	486d      	ldr	r0, [pc, #436]	; (800405c <ModeReglage+0x1c0>)
 8003ea8:	f000 fcf4 	bl	8004894 <puts>
		  		  g_appui_touche = 0;
 8003eac:	2200      	movs	r2, #0
 8003eae:	4b6c      	ldr	r3, [pc, #432]	; (8004060 <ModeReglage+0x1c4>)
 8003eb0:	601a      	str	r2, [r3, #0]
		  		  if(sens == 1){
 8003eb2:	2e01      	cmp	r6, #1
 8003eb4:	d001      	beq.n	8003eba <ModeReglage+0x1e>
		  			  sens = -1;
		  		  }
		  		  else{
		  			  sens = 1;
 8003eb6:	463e      	mov	r6, r7
 8003eb8:	e057      	b.n	8003f6a <ModeReglage+0xce>
		  			  sens = -1;
 8003eba:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8003ebe:	e054      	b.n	8003f6a <ModeReglage+0xce>
		  		  }
		  		  break;
		  	  }
		  	  case TOUCHE_MI_GAUCHE:
			  {
				  printf("champ suivant\n");
 8003ec0:	4868      	ldr	r0, [pc, #416]	; (8004064 <ModeReglage+0x1c8>)
 8003ec2:	f000 fce7 	bl	8004894 <puts>
				  g_appui_touche = 0;
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	4b65      	ldr	r3, [pc, #404]	; (8004060 <ModeReglage+0x1c4>)
 8003eca:	601a      	str	r2, [r3, #0]
				  champ ++;
 8003ecc:	3501      	adds	r5, #1
				  if (champ > 3)
 8003ece:	2d03      	cmp	r5, #3
 8003ed0:	dd4b      	ble.n	8003f6a <ModeReglage+0xce>
				  {
					  champ = 1;
 8003ed2:	4625      	mov	r5, r4
 8003ed4:	e049      	b.n	8003f6a <ModeReglage+0xce>
				  }
				  break;
			  }
		  	  case TOUCHE_MI_DROITE:
			  {
				  printf("changement enregistré\n");
 8003ed6:	4864      	ldr	r0, [pc, #400]	; (8004068 <ModeReglage+0x1cc>)
 8003ed8:	f000 fcdc 	bl	8004894 <puts>
				  g_appui_touche = 0;
 8003edc:	2400      	movs	r4, #0
 8003ede:	4b60      	ldr	r3, [pc, #384]	; (8004060 <ModeReglage+0x1c4>)
 8003ee0:	601c      	str	r4, [r3, #0]
				  //pointeur
				  transmit_data_buffer_reglage[0] = 0b00000000;
 8003ee2:	f88d 4008 	strb.w	r4, [sp, #8]
				  //sec
				  temp = secondes % 10;
 8003ee6:	4b61      	ldr	r3, [pc, #388]	; (800406c <ModeReglage+0x1d0>)
 8003ee8:	6818      	ldr	r0, [r3, #0]
 8003eea:	4b61      	ldr	r3, [pc, #388]	; (8004070 <ModeReglage+0x1d4>)
 8003eec:	fb83 2100 	smull	r2, r1, r3, r0
 8003ef0:	17c2      	asrs	r2, r0, #31
 8003ef2:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
 8003ef6:	4611      	mov	r1, r2
 8003ef8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003efc:	0057      	lsls	r7, r2, #1
 8003efe:	1bc2      	subs	r2, r0, r7
				  transmit_data_buffer_reglage[1] = temp;
				  temp2 = secondes / 10;
				  transmit_data_buffer_reglage[1] += (temp2 << 4);
 8003f00:	0109      	lsls	r1, r1, #4
 8003f02:	b2c9      	uxtb	r1, r1
 8003f04:	fa51 f282 	uxtab	r2, r1, r2
 8003f08:	f88d 2009 	strb.w	r2, [sp, #9]
				  //min
				  temp = minutes % 10;
 8003f0c:	4a59      	ldr	r2, [pc, #356]	; (8004074 <ModeReglage+0x1d8>)
 8003f0e:	6810      	ldr	r0, [r2, #0]
 8003f10:	fb83 2100 	smull	r2, r1, r3, r0
 8003f14:	17c2      	asrs	r2, r0, #31
 8003f16:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
 8003f1a:	4611      	mov	r1, r2
 8003f1c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003f20:	0057      	lsls	r7, r2, #1
 8003f22:	1bc2      	subs	r2, r0, r7
				  transmit_data_buffer_reglage[2] = temp;
				  temp2 = minutes / 10;
				  transmit_data_buffer_reglage[2] += (temp2 << 4);
 8003f24:	0109      	lsls	r1, r1, #4
 8003f26:	b2c9      	uxtb	r1, r1
 8003f28:	fa51 f282 	uxtab	r2, r1, r2
 8003f2c:	f88d 200a 	strb.w	r2, [sp, #10]
				  //heure
				  temp = heures % 10;
 8003f30:	4a51      	ldr	r2, [pc, #324]	; (8004078 <ModeReglage+0x1dc>)
 8003f32:	6811      	ldr	r1, [r2, #0]
 8003f34:	fb83 3201 	smull	r3, r2, r3, r1
 8003f38:	17cb      	asrs	r3, r1, #31
 8003f3a:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
 8003f3e:	461a      	mov	r2, r3
 8003f40:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003f44:	0058      	lsls	r0, r3, #1
 8003f46:	1a0b      	subs	r3, r1, r0
				  transmit_data_buffer_reglage[3] = temp;
				  temp2 = heures / 10;
				  transmit_data_buffer_reglage[3] += (temp2 << 4);
 8003f48:	0112      	lsls	r2, r2, #4
 8003f4a:	b2d2      	uxtb	r2, r2
 8003f4c:	fa52 f383 	uxtab	r3, r2, r3
 8003f50:	f88d 300b 	strb.w	r3, [sp, #11]
				  //envoi
				  HAL_I2C_Master_Transmit(&hi2c1, adresse_rtc, (uint8_t *)transmit_data_buffer_reglage, 4, 100);
 8003f54:	4b49      	ldr	r3, [pc, #292]	; (800407c <ModeReglage+0x1e0>)
 8003f56:	8819      	ldrh	r1, [r3, #0]
 8003f58:	2364      	movs	r3, #100	; 0x64
 8003f5a:	9300      	str	r3, [sp, #0]
 8003f5c:	2304      	movs	r3, #4
 8003f5e:	aa02      	add	r2, sp, #8
 8003f60:	4847      	ldr	r0, [pc, #284]	; (8004080 <ModeReglage+0x1e4>)
 8003f62:	f7fd fb1d 	bl	80015a0 <HAL_I2C_Master_Transmit>
				  mode_reglage = 0;
 8003f66:	4b47      	ldr	r3, [pc, #284]	; (8004084 <ModeReglage+0x1e8>)
 8003f68:	601c      	str	r4, [r3, #0]
		  	  default:
			  {
			      break;
			  }
		  }
		  printf("- %dh - %dmin - %dsec -\n", heures, minutes, secondes);
 8003f6a:	4b40      	ldr	r3, [pc, #256]	; (800406c <ModeReglage+0x1d0>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a41      	ldr	r2, [pc, #260]	; (8004074 <ModeReglage+0x1d8>)
 8003f70:	6812      	ldr	r2, [r2, #0]
 8003f72:	4941      	ldr	r1, [pc, #260]	; (8004078 <ModeReglage+0x1dc>)
 8003f74:	6809      	ldr	r1, [r1, #0]
 8003f76:	4844      	ldr	r0, [pc, #272]	; (8004088 <ModeReglage+0x1ec>)
 8003f78:	f000 fc4d 	bl	8004816 <iprintf>

	  }
	  osDelay(1000);
 8003f7c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003f80:	f7fe fe24 	bl	8002bcc <osDelay>
	  if(mode_reglage == 1)
 8003f84:	4b3f      	ldr	r3, [pc, #252]	; (8004084 <ModeReglage+0x1e8>)
 8003f86:	681c      	ldr	r4, [r3, #0]
 8003f88:	2c01      	cmp	r4, #1
 8003f8a:	d1f7      	bne.n	8003f7c <ModeReglage+0xe0>
		  printf("mode reglage\n");
 8003f8c:	483f      	ldr	r0, [pc, #252]	; (800408c <ModeReglage+0x1f0>)
 8003f8e:	f000 fc81 	bl	8004894 <puts>
		  switch(g_appui_touche)
 8003f92:	4b33      	ldr	r3, [pc, #204]	; (8004060 <ModeReglage+0x1c4>)
 8003f94:	681f      	ldr	r7, [r3, #0]
 8003f96:	1e7b      	subs	r3, r7, #1
 8003f98:	2b04      	cmp	r3, #4
 8003f9a:	d8e6      	bhi.n	8003f6a <ModeReglage+0xce>
 8003f9c:	a201      	add	r2, pc, #4	; (adr r2, 8003fa4 <ModeReglage+0x108>)
 8003f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fa2:	bf00      	nop
 8003fa4:	08003ea7 	.word	0x08003ea7
 8003fa8:	08003ec1 	.word	0x08003ec1
 8003fac:	08003ed7 	.word	0x08003ed7
 8003fb0:	08003f6b 	.word	0x08003f6b
 8003fb4:	08003fb9 	.word	0x08003fb9
				  printf("valeur ++\n");
 8003fb8:	4835      	ldr	r0, [pc, #212]	; (8004090 <ModeReglage+0x1f4>)
 8003fba:	f000 fc6b 	bl	8004894 <puts>
				  g_appui_touche = 0;
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	4b27      	ldr	r3, [pc, #156]	; (8004060 <ModeReglage+0x1c4>)
 8003fc2:	601a      	str	r2, [r3, #0]
				  switch (champ)
 8003fc4:	2d02      	cmp	r5, #2
 8003fc6:	d01a      	beq.n	8003ffe <ModeReglage+0x162>
 8003fc8:	2d03      	cmp	r5, #3
 8003fca:	d02f      	beq.n	800402c <ModeReglage+0x190>
 8003fcc:	2d01      	cmp	r5, #1
 8003fce:	d1cc      	bne.n	8003f6a <ModeReglage+0xce>
						  heures += sens;
 8003fd0:	4a29      	ldr	r2, [pc, #164]	; (8004078 <ModeReglage+0x1dc>)
 8003fd2:	6813      	ldr	r3, [r2, #0]
 8003fd4:	4433      	add	r3, r6
 8003fd6:	6013      	str	r3, [r2, #0]
                          if((heures > 23)&&(sens == 1)){
 8003fd8:	2b17      	cmp	r3, #23
 8003fda:	dd01      	ble.n	8003fe0 <ModeReglage+0x144>
 8003fdc:	2e01      	cmp	r6, #1
 8003fde:	d00a      	beq.n	8003ff6 <ModeReglage+0x15a>
                          if((heures == 255)&&(sens == -1)){
 8003fe0:	4b25      	ldr	r3, [pc, #148]	; (8004078 <ModeReglage+0x1dc>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	2bff      	cmp	r3, #255	; 0xff
 8003fe6:	d1c0      	bne.n	8003f6a <ModeReglage+0xce>
 8003fe8:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
 8003fec:	d1bd      	bne.n	8003f6a <ModeReglage+0xce>
                              heures = 23;
 8003fee:	2217      	movs	r2, #23
 8003ff0:	4b21      	ldr	r3, [pc, #132]	; (8004078 <ModeReglage+0x1dc>)
 8003ff2:	601a      	str	r2, [r3, #0]
 8003ff4:	e7b9      	b.n	8003f6a <ModeReglage+0xce>
                              heures = 0;
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	4b1f      	ldr	r3, [pc, #124]	; (8004078 <ModeReglage+0x1dc>)
 8003ffa:	601a      	str	r2, [r3, #0]
 8003ffc:	e7f0      	b.n	8003fe0 <ModeReglage+0x144>
						  minutes += sens;
 8003ffe:	4a1d      	ldr	r2, [pc, #116]	; (8004074 <ModeReglage+0x1d8>)
 8004000:	6813      	ldr	r3, [r2, #0]
 8004002:	4433      	add	r3, r6
 8004004:	6013      	str	r3, [r2, #0]
                          if((minutes > 59)&&(sens == 1)){
 8004006:	2b3b      	cmp	r3, #59	; 0x3b
 8004008:	dd01      	ble.n	800400e <ModeReglage+0x172>
 800400a:	2e01      	cmp	r6, #1
 800400c:	d00a      	beq.n	8004024 <ModeReglage+0x188>
                          if((minutes == 255)&&(sens == -1)){
 800400e:	4b19      	ldr	r3, [pc, #100]	; (8004074 <ModeReglage+0x1d8>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	2bff      	cmp	r3, #255	; 0xff
 8004014:	d1a9      	bne.n	8003f6a <ModeReglage+0xce>
 8004016:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
 800401a:	d1a6      	bne.n	8003f6a <ModeReglage+0xce>
                              minutes = 59;
 800401c:	223b      	movs	r2, #59	; 0x3b
 800401e:	4b15      	ldr	r3, [pc, #84]	; (8004074 <ModeReglage+0x1d8>)
 8004020:	601a      	str	r2, [r3, #0]
 8004022:	e7a2      	b.n	8003f6a <ModeReglage+0xce>
                              minutes = 0;
 8004024:	2200      	movs	r2, #0
 8004026:	4b13      	ldr	r3, [pc, #76]	; (8004074 <ModeReglage+0x1d8>)
 8004028:	601a      	str	r2, [r3, #0]
 800402a:	e7f0      	b.n	800400e <ModeReglage+0x172>
						  secondes += sens;
 800402c:	4a0f      	ldr	r2, [pc, #60]	; (800406c <ModeReglage+0x1d0>)
 800402e:	6813      	ldr	r3, [r2, #0]
 8004030:	4433      	add	r3, r6
 8004032:	6013      	str	r3, [r2, #0]
                          if((secondes > 59)&&(sens == 1)){
 8004034:	2b3b      	cmp	r3, #59	; 0x3b
 8004036:	dd01      	ble.n	800403c <ModeReglage+0x1a0>
 8004038:	2e01      	cmp	r6, #1
 800403a:	d00a      	beq.n	8004052 <ModeReglage+0x1b6>
                          if((secondes == 255)&&(sens == -1)){
 800403c:	4b0b      	ldr	r3, [pc, #44]	; (800406c <ModeReglage+0x1d0>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	2bff      	cmp	r3, #255	; 0xff
 8004042:	d192      	bne.n	8003f6a <ModeReglage+0xce>
 8004044:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
 8004048:	d18f      	bne.n	8003f6a <ModeReglage+0xce>
                              secondes = 59;
 800404a:	223b      	movs	r2, #59	; 0x3b
 800404c:	4b07      	ldr	r3, [pc, #28]	; (800406c <ModeReglage+0x1d0>)
 800404e:	601a      	str	r2, [r3, #0]
 8004050:	e78b      	b.n	8003f6a <ModeReglage+0xce>
                              secondes = 0;
 8004052:	2200      	movs	r2, #0
 8004054:	4b05      	ldr	r3, [pc, #20]	; (800406c <ModeReglage+0x1d0>)
 8004056:	601a      	str	r2, [r3, #0]
 8004058:	e7f0      	b.n	800403c <ModeReglage+0x1a0>
 800405a:	bf00      	nop
 800405c:	08004bb8 	.word	0x08004bb8
 8004060:	2000401c 	.word	0x2000401c
 8004064:	08004bc8 	.word	0x08004bc8
 8004068:	08004bd8 	.word	0x08004bd8
 800406c:	20003fcc 	.word	0x20003fcc
 8004070:	66666667 	.word	0x66666667
 8004074:	20004024 	.word	0x20004024
 8004078:	20003fc8 	.word	0x20003fc8
 800407c:	20004018 	.word	0x20004018
 8004080:	20004084 	.word	0x20004084
 8004084:	20004020 	.word	0x20004020
 8004088:	08004b8c 	.word	0x08004b8c
 800408c:	08004ba8 	.word	0x08004ba8
 8004090:	08004bf0 	.word	0x08004bf0

08004094 <vApplicationGetIdleTaskMemory>:
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8004094:	4b03      	ldr	r3, [pc, #12]	; (80040a4 <vApplicationGetIdleTaskMemory+0x10>)
 8004096:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8004098:	4b03      	ldr	r3, [pc, #12]	; (80040a8 <vApplicationGetIdleTaskMemory+0x14>)
 800409a:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800409c:	2380      	movs	r3, #128	; 0x80
 800409e:	6013      	str	r3, [r2, #0]
 80040a0:	4770      	bx	lr
 80040a2:	bf00      	nop
 80040a4:	20003f70 	.word	0x20003f70
 80040a8:	20003d70 	.word	0x20003d70

080040ac <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 80040ac:	b570      	push	{r4, r5, r6, lr}
 80040ae:	b0a0      	sub	sp, #128	; 0x80
  osMessageQDef(exchange, 6, uint16_t);
 80040b0:	4c24      	ldr	r4, [pc, #144]	; (8004144 <MX_FREERTOS_Init+0x98>)
 80040b2:	ad1c      	add	r5, sp, #112	; 0x70
 80040b4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80040b8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  exchangeHandle = osMessageCreate(osMessageQ(exchange), NULL);
 80040bc:	2100      	movs	r1, #0
 80040be:	4628      	mov	r0, r5
 80040c0:	f7fe fd8d 	bl	8002bde <osMessageCreate>
 80040c4:	4b20      	ldr	r3, [pc, #128]	; (8004148 <MX_FREERTOS_Init+0x9c>)
 80040c6:	6018      	str	r0, [r3, #0]
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80040c8:	ad15      	add	r5, sp, #84	; 0x54
 80040ca:	f104 0610 	add.w	r6, r4, #16
 80040ce:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80040d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80040d2:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80040d6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80040da:	2100      	movs	r1, #0
 80040dc:	a815      	add	r0, sp, #84	; 0x54
 80040de:	f7fe fd40 	bl	8002b62 <osThreadCreate>
 80040e2:	4b1a      	ldr	r3, [pc, #104]	; (800414c <MX_FREERTOS_Init+0xa0>)
 80040e4:	6018      	str	r0, [r3, #0]
  osThreadDef(myTask02, StartTask02, osPriorityIdle, 0, 128);
 80040e6:	ad0e      	add	r5, sp, #56	; 0x38
 80040e8:	f104 062c 	add.w	r6, r4, #44	; 0x2c
 80040ec:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80040ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80040f0:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80040f4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 80040f8:	2100      	movs	r1, #0
 80040fa:	a80e      	add	r0, sp, #56	; 0x38
 80040fc:	f7fe fd31 	bl	8002b62 <osThreadCreate>
 8004100:	4b13      	ldr	r3, [pc, #76]	; (8004150 <MX_FREERTOS_Init+0xa4>)
 8004102:	6018      	str	r0, [r3, #0]
  osThreadDef(TaskInitAndAffi, InitAndAffich, osPriorityIdle, 0, 128);
 8004104:	ad07      	add	r5, sp, #28
 8004106:	f104 0648 	add.w	r6, r4, #72	; 0x48
 800410a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800410c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800410e:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8004112:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  TaskInitAndAffiHandle = osThreadCreate(osThread(TaskInitAndAffi), NULL);
 8004116:	2100      	movs	r1, #0
 8004118:	a807      	add	r0, sp, #28
 800411a:	f7fe fd22 	bl	8002b62 <osThreadCreate>
 800411e:	4b0d      	ldr	r3, [pc, #52]	; (8004154 <MX_FREERTOS_Init+0xa8>)
 8004120:	6018      	str	r0, [r3, #0]
  osThreadDef(TaskModeRegl, ModeReglage, osPriorityIdle, 0, 128);
 8004122:	466d      	mov	r5, sp
 8004124:	3464      	adds	r4, #100	; 0x64
 8004126:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004128:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800412a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800412e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  TaskModeReglHandle = osThreadCreate(osThread(TaskModeRegl), NULL);
 8004132:	2100      	movs	r1, #0
 8004134:	4668      	mov	r0, sp
 8004136:	f7fe fd14 	bl	8002b62 <osThreadCreate>
 800413a:	4b07      	ldr	r3, [pc, #28]	; (8004158 <MX_FREERTOS_Init+0xac>)
 800413c:	6018      	str	r0, [r3, #0]
}
 800413e:	b020      	add	sp, #128	; 0x80
 8004140:	bd70      	pop	{r4, r5, r6, pc}
 8004142:	bf00      	nop
 8004144:	08004af8 	.word	0x08004af8
 8004148:	2000407c 	.word	0x2000407c
 800414c:	20004070 	.word	0x20004070
 8004150:	20004074 	.word	0x20004074
 8004154:	20004080 	.word	0x20004080
 8004158:	20004078 	.word	0x20004078

0800415c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800415c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004160:	b08c      	sub	sp, #48	; 0x30

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004162:	2400      	movs	r4, #0
 8004164:	9407      	str	r4, [sp, #28]
 8004166:	9408      	str	r4, [sp, #32]
 8004168:	9409      	str	r4, [sp, #36]	; 0x24
 800416a:	940a      	str	r4, [sp, #40]	; 0x28
 800416c:	940b      	str	r4, [sp, #44]	; 0x2c

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800416e:	9401      	str	r4, [sp, #4]
 8004170:	4b49      	ldr	r3, [pc, #292]	; (8004298 <MX_GPIO_Init+0x13c>)
 8004172:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004174:	f042 0204 	orr.w	r2, r2, #4
 8004178:	631a      	str	r2, [r3, #48]	; 0x30
 800417a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800417c:	f002 0204 	and.w	r2, r2, #4
 8004180:	9201      	str	r2, [sp, #4]
 8004182:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004184:	9402      	str	r4, [sp, #8]
 8004186:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004188:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800418c:	631a      	str	r2, [r3, #48]	; 0x30
 800418e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004190:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8004194:	9202      	str	r2, [sp, #8]
 8004196:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004198:	9403      	str	r4, [sp, #12]
 800419a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800419c:	f042 0201 	orr.w	r2, r2, #1
 80041a0:	631a      	str	r2, [r3, #48]	; 0x30
 80041a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041a4:	f002 0201 	and.w	r2, r2, #1
 80041a8:	9203      	str	r2, [sp, #12]
 80041aa:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80041ac:	9404      	str	r4, [sp, #16]
 80041ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041b0:	f042 0202 	orr.w	r2, r2, #2
 80041b4:	631a      	str	r2, [r3, #48]	; 0x30
 80041b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041b8:	f002 0202 	and.w	r2, r2, #2
 80041bc:	9204      	str	r2, [sp, #16]
 80041be:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80041c0:	9405      	str	r4, [sp, #20]
 80041c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041c4:	f042 0208 	orr.w	r2, r2, #8
 80041c8:	631a      	str	r2, [r3, #48]	; 0x30
 80041ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041cc:	f002 0208 	and.w	r2, r2, #8
 80041d0:	9205      	str	r2, [sp, #20]
 80041d2:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80041d4:	9406      	str	r4, [sp, #24]
 80041d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041dc:	631a      	str	r2, [r3, #48]	; 0x30
 80041de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041e4:	9306      	str	r3, [sp, #24]
 80041e6:	9b06      	ldr	r3, [sp, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80041e8:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 80042ac <MX_GPIO_Init+0x150>
 80041ec:	4622      	mov	r2, r4
 80041ee:	f244 0181 	movw	r1, #16513	; 0x4081
 80041f2:	4640      	mov	r0, r8
 80041f4:	f7fc feee 	bl	8000fd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80041f8:	4d28      	ldr	r5, [pc, #160]	; (800429c <MX_GPIO_Init+0x140>)
 80041fa:	4622      	mov	r2, r4
 80041fc:	2140      	movs	r1, #64	; 0x40
 80041fe:	4628      	mov	r0, r5
 8004200:	f7fc fee8 	bl	8000fd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Bouton_utilisateur_Pin;
 8004204:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004208:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800420a:	4e25      	ldr	r6, [pc, #148]	; (80042a0 <MX_GPIO_Init+0x144>)
 800420c:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800420e:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(Bouton_utilisateur_GPIO_Port, &GPIO_InitStruct);
 8004210:	a907      	add	r1, sp, #28
 8004212:	4824      	ldr	r0, [pc, #144]	; (80042a4 <MX_GPIO_Init+0x148>)
 8004214:	f7fc fdec 	bl	8000df0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8004218:	f244 0381 	movw	r3, #16513	; 0x4081
 800421c:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800421e:	2701      	movs	r7, #1
 8004220:	9708      	str	r7, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004222:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004224:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004226:	a907      	add	r1, sp, #28
 8004228:	4640      	mov	r0, r8
 800422a:	f7fc fde1 	bl	8000df0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800422e:	2340      	movs	r3, #64	; 0x40
 8004230:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004232:	9708      	str	r7, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004234:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004236:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8004238:	a907      	add	r1, sp, #28
 800423a:	4628      	mov	r0, r5
 800423c:	f7fc fdd8 	bl	8000df0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8004240:	2380      	movs	r3, #128	; 0x80
 8004242:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004244:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004246:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8004248:	a907      	add	r1, sp, #28
 800424a:	4628      	mov	r0, r5
 800424c:	f7fc fdd0 	bl	8000df0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = Tactile_Gauche_Pin|Tactile_Mi_Gauche_Pin|Tactile_Mi_Droite_Pin|Tactile_Droite_Pin;
 8004250:	23f0      	movs	r3, #240	; 0xf0
 8004252:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004254:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004256:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004258:	a907      	add	r1, sp, #28
 800425a:	4813      	ldr	r0, [pc, #76]	; (80042a8 <MX_GPIO_Init+0x14c>)
 800425c:	f7fc fdc8 	bl	8000df0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8004260:	4622      	mov	r2, r4
 8004262:	2105      	movs	r1, #5
 8004264:	200a      	movs	r0, #10
 8004266:	f7fc fb3d 	bl	80008e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800426a:	200a      	movs	r0, #10
 800426c:	f7fc fb6c 	bl	8000948 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8004270:	4622      	mov	r2, r4
 8004272:	2105      	movs	r1, #5
 8004274:	2017      	movs	r0, #23
 8004276:	f7fc fb35 	bl	80008e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800427a:	2017      	movs	r0, #23
 800427c:	f7fc fb64 	bl	8000948 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8004280:	4622      	mov	r2, r4
 8004282:	2105      	movs	r1, #5
 8004284:	2028      	movs	r0, #40	; 0x28
 8004286:	f7fc fb2d 	bl	80008e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800428a:	2028      	movs	r0, #40	; 0x28
 800428c:	f7fc fb5c 	bl	8000948 <HAL_NVIC_EnableIRQ>

}
 8004290:	b00c      	add	sp, #48	; 0x30
 8004292:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004296:	bf00      	nop
 8004298:	40023800 	.word	0x40023800
 800429c:	40021800 	.word	0x40021800
 80042a0:	10110000 	.word	0x10110000
 80042a4:	40020800 	.word	0x40020800
 80042a8:	40020c00 	.word	0x40020c00
 80042ac:	40020400 	.word	0x40020400

080042b0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80042b0:	b508      	push	{r3, lr}

  hi2c1.Instance = I2C1;
 80042b2:	4813      	ldr	r0, [pc, #76]	; (8004300 <MX_I2C1_Init+0x50>)
 80042b4:	4b13      	ldr	r3, [pc, #76]	; (8004304 <MX_I2C1_Init+0x54>)
 80042b6:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80042b8:	4b13      	ldr	r3, [pc, #76]	; (8004308 <MX_I2C1_Init+0x58>)
 80042ba:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80042bc:	2300      	movs	r3, #0
 80042be:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80042c0:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80042c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80042c6:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80042c8:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80042ca:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80042cc:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80042ce:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80042d0:	f7fd f896 	bl	8001400 <HAL_I2C_Init>
 80042d4:	b950      	cbnz	r0, 80042ec <MX_I2C1_Init+0x3c>
  {
    Error_Handler();
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80042d6:	2100      	movs	r1, #0
 80042d8:	4809      	ldr	r0, [pc, #36]	; (8004300 <MX_I2C1_Init+0x50>)
 80042da:	f7fd fb89 	bl	80019f0 <HAL_I2CEx_ConfigAnalogFilter>
 80042de:	b940      	cbnz	r0, 80042f2 <MX_I2C1_Init+0x42>
  {
    Error_Handler();
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80042e0:	2100      	movs	r1, #0
 80042e2:	4807      	ldr	r0, [pc, #28]	; (8004300 <MX_I2C1_Init+0x50>)
 80042e4:	f7fd fba6 	bl	8001a34 <HAL_I2CEx_ConfigDigitalFilter>
 80042e8:	b930      	cbnz	r0, 80042f8 <MX_I2C1_Init+0x48>
 80042ea:	bd08      	pop	{r3, pc}
    Error_Handler();
 80042ec:	f000 f90a 	bl	8004504 <Error_Handler>
 80042f0:	e7f1      	b.n	80042d6 <MX_I2C1_Init+0x26>
    Error_Handler();
 80042f2:	f000 f907 	bl	8004504 <Error_Handler>
 80042f6:	e7f3      	b.n	80042e0 <MX_I2C1_Init+0x30>
  {
    Error_Handler();
 80042f8:	f000 f904 	bl	8004504 <Error_Handler>
  }

}
 80042fc:	e7f5      	b.n	80042ea <MX_I2C1_Init+0x3a>
 80042fe:	bf00      	nop
 8004300:	20004084 	.word	0x20004084
 8004304:	40005400 	.word	0x40005400
 8004308:	000186a0 	.word	0x000186a0

0800430c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800430c:	b530      	push	{r4, r5, lr}
 800430e:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004310:	2300      	movs	r3, #0
 8004312:	9303      	str	r3, [sp, #12]
 8004314:	9304      	str	r3, [sp, #16]
 8004316:	9305      	str	r3, [sp, #20]
 8004318:	9306      	str	r3, [sp, #24]
 800431a:	9307      	str	r3, [sp, #28]
  if(i2cHandle->Instance==I2C1)
 800431c:	6802      	ldr	r2, [r0, #0]
 800431e:	4b15      	ldr	r3, [pc, #84]	; (8004374 <HAL_I2C_MspInit+0x68>)
 8004320:	429a      	cmp	r2, r3
 8004322:	d001      	beq.n	8004328 <HAL_I2C_MspInit+0x1c>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8004324:	b009      	add	sp, #36	; 0x24
 8004326:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004328:	2500      	movs	r5, #0
 800432a:	9501      	str	r5, [sp, #4]
 800432c:	4c12      	ldr	r4, [pc, #72]	; (8004378 <HAL_I2C_MspInit+0x6c>)
 800432e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004330:	f043 0302 	orr.w	r3, r3, #2
 8004334:	6323      	str	r3, [r4, #48]	; 0x30
 8004336:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004338:	f003 0302 	and.w	r3, r3, #2
 800433c:	9301      	str	r3, [sp, #4]
 800433e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004340:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004344:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004346:	2312      	movs	r3, #18
 8004348:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800434a:	2301      	movs	r3, #1
 800434c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800434e:	2303      	movs	r3, #3
 8004350:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004352:	2304      	movs	r3, #4
 8004354:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004356:	a903      	add	r1, sp, #12
 8004358:	4808      	ldr	r0, [pc, #32]	; (800437c <HAL_I2C_MspInit+0x70>)
 800435a:	f7fc fd49 	bl	8000df0 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 800435e:	9502      	str	r5, [sp, #8]
 8004360:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004362:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004366:	6423      	str	r3, [r4, #64]	; 0x40
 8004368:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800436a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800436e:	9302      	str	r3, [sp, #8]
 8004370:	9b02      	ldr	r3, [sp, #8]
}
 8004372:	e7d7      	b.n	8004324 <HAL_I2C_MspInit+0x18>
 8004374:	40005400 	.word	0x40005400
 8004378:	40023800 	.word	0x40023800
 800437c:	40020400 	.word	0x40020400

08004380 <HAL_GPIO_EXTI_Callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t clavier)
{
  /* Prevent unused argument(s) compilation warning */
	if (clavier == Tactile_Droite_Pin)
 8004380:	2880      	cmp	r0, #128	; 0x80
 8004382:	d00e      	beq.n	80043a2 <HAL_GPIO_EXTI_Callback+0x22>
			mode_reglage = 1;
		}
		else
			mode_reglage = 0;
	}
	if (mode_reglage)
 8004384:	4b14      	ldr	r3, [pc, #80]	; (80043d8 <HAL_GPIO_EXTI_Callback+0x58>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	b153      	cbz	r3, 80043a0 <HAL_GPIO_EXTI_Callback+0x20>
	{
		switch(clavier)
 800438a:	2820      	cmp	r0, #32
 800438c:	d01c      	beq.n	80043c8 <HAL_GPIO_EXTI_Callback+0x48>
 800438e:	d913      	bls.n	80043b8 <HAL_GPIO_EXTI_Callback+0x38>
 8004390:	2840      	cmp	r0, #64	; 0x40
 8004392:	d01d      	beq.n	80043d0 <HAL_GPIO_EXTI_Callback+0x50>
 8004394:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8004398:	d115      	bne.n	80043c6 <HAL_GPIO_EXTI_Callback+0x46>
				g_appui_touche = TOUCHE_MI_DROITE;
				break;
			}
			case Bouton_utilisateur_Pin:
			{
				g_appui_touche = APPUI_BOUTON;
 800439a:	2205      	movs	r2, #5
 800439c:	4b0f      	ldr	r3, [pc, #60]	; (80043dc <HAL_GPIO_EXTI_Callback+0x5c>)
 800439e:	601a      	str	r2, [r3, #0]
 80043a0:	4770      	bx	lr
		if (mode_reglage == 0)
 80043a2:	4b0d      	ldr	r3, [pc, #52]	; (80043d8 <HAL_GPIO_EXTI_Callback+0x58>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	b91b      	cbnz	r3, 80043b0 <HAL_GPIO_EXTI_Callback+0x30>
			mode_reglage = 1;
 80043a8:	2201      	movs	r2, #1
 80043aa:	4b0b      	ldr	r3, [pc, #44]	; (80043d8 <HAL_GPIO_EXTI_Callback+0x58>)
 80043ac:	601a      	str	r2, [r3, #0]
 80043ae:	e7e9      	b.n	8004384 <HAL_GPIO_EXTI_Callback+0x4>
			mode_reglage = 0;
 80043b0:	2200      	movs	r2, #0
 80043b2:	4b09      	ldr	r3, [pc, #36]	; (80043d8 <HAL_GPIO_EXTI_Callback+0x58>)
 80043b4:	601a      	str	r2, [r3, #0]
 80043b6:	e7e5      	b.n	8004384 <HAL_GPIO_EXTI_Callback+0x4>
		switch(clavier)
 80043b8:	2810      	cmp	r0, #16
 80043ba:	d103      	bne.n	80043c4 <HAL_GPIO_EXTI_Callback+0x44>
				g_appui_touche = TOUCHE_GAUCHE;
 80043bc:	2201      	movs	r2, #1
 80043be:	4b07      	ldr	r3, [pc, #28]	; (80043dc <HAL_GPIO_EXTI_Callback+0x5c>)
 80043c0:	601a      	str	r2, [r3, #0]
				break;
 80043c2:	4770      	bx	lr
 80043c4:	4770      	bx	lr
 80043c6:	4770      	bx	lr
				g_appui_touche = TOUCHE_MI_GAUCHE;
 80043c8:	2202      	movs	r2, #2
 80043ca:	4b04      	ldr	r3, [pc, #16]	; (80043dc <HAL_GPIO_EXTI_Callback+0x5c>)
 80043cc:	601a      	str	r2, [r3, #0]
				break;
 80043ce:	4770      	bx	lr
				g_appui_touche = TOUCHE_MI_DROITE;
 80043d0:	2203      	movs	r2, #3
 80043d2:	4b02      	ldr	r3, [pc, #8]	; (80043dc <HAL_GPIO_EXTI_Callback+0x5c>)
 80043d4:	601a      	str	r2, [r3, #0]
				break;
 80043d6:	4770      	bx	lr
 80043d8:	20004020 	.word	0x20004020
 80043dc:	2000401c 	.word	0x2000401c

080043e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80043e0:	b530      	push	{r4, r5, lr}
 80043e2:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80043e4:	2230      	movs	r2, #48	; 0x30
 80043e6:	2100      	movs	r1, #0
 80043e8:	a808      	add	r0, sp, #32
 80043ea:	f000 fb71 	bl	8004ad0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80043ee:	2400      	movs	r4, #0
 80043f0:	9403      	str	r4, [sp, #12]
 80043f2:	9404      	str	r4, [sp, #16]
 80043f4:	9405      	str	r4, [sp, #20]
 80043f6:	9406      	str	r4, [sp, #24]
 80043f8:	9407      	str	r4, [sp, #28]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80043fa:	9401      	str	r4, [sp, #4]
 80043fc:	4b1c      	ldr	r3, [pc, #112]	; (8004470 <SystemClock_Config+0x90>)
 80043fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004400:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004404:	641a      	str	r2, [r3, #64]	; 0x40
 8004406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004408:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800440c:	9301      	str	r3, [sp, #4]
 800440e:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004410:	9402      	str	r4, [sp, #8]
 8004412:	4b18      	ldr	r3, [pc, #96]	; (8004474 <SystemClock_Config+0x94>)
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800441a:	601a      	str	r2, [r3, #0]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004422:	9302      	str	r3, [sp, #8]
 8004424:	9b02      	ldr	r3, [sp, #8]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004426:	2301      	movs	r3, #1
 8004428:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800442a:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800442e:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004430:	2502      	movs	r5, #2
 8004432:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004434:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004438:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800443a:	2304      	movs	r3, #4
 800443c:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800443e:	23a8      	movs	r3, #168	; 0xa8
 8004440:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004442:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8004444:	2307      	movs	r3, #7
 8004446:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004448:	a808      	add	r0, sp, #32
 800444a:	f7fd fba5 	bl	8001b98 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800444e:	230f      	movs	r3, #15
 8004450:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004452:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004454:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004456:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800445a:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800445c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004460:	9307      	str	r3, [sp, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004462:	2105      	movs	r1, #5
 8004464:	a803      	add	r0, sp, #12
 8004466:	f7fd fdcd 	bl	8002004 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 800446a:	b015      	add	sp, #84	; 0x54
 800446c:	bd30      	pop	{r4, r5, pc}
 800446e:	bf00      	nop
 8004470:	40023800 	.word	0x40023800
 8004474:	40007000 	.word	0x40007000

08004478 <main>:
 {
 8004478:	b508      	push	{r3, lr}
  HAL_Init();
 800447a:	f7fc f849 	bl	8000510 <HAL_Init>
  SystemClock_Config();
 800447e:	f7ff ffaf 	bl	80043e0 <SystemClock_Config>
  MX_GPIO_Init();
 8004482:	f7ff fe6b 	bl	800415c <MX_GPIO_Init>
  MX_ETH_Init();
 8004486:	f7ff fbe3 	bl	8003c50 <MX_ETH_Init>
  MX_USART3_UART_Init();
 800448a:	f000 fa1f 	bl	80048cc <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800448e:	f000 fa71 	bl	8004974 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 8004492:	f7ff fb71 	bl	8003b78 <MX_ADC1_Init>
  MX_I2C1_Init();
 8004496:	f7ff ff0b 	bl	80042b0 <MX_I2C1_Init>
  MX_FREERTOS_Init();
 800449a:	f7ff fe07 	bl	80040ac <MX_FREERTOS_Init>
  osKernelStart();
 800449e:	f7fe fb5b 	bl	8002b58 <osKernelStart>
 80044a2:	e7fe      	b.n	80044a2 <main+0x2a>

080044a4 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len) // the new function for SWV output
{
 80044a4:	b430      	push	{r4, r5}
	int i=0;
	for(i=0 ; i<len ; i++)
 80044a6:	2400      	movs	r4, #0
 80044a8:	e00a      	b.n	80044c0 <_write+0x1c>
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
  {
    while (ITM->PORT[0U].u32 == 0UL)
    {
      __NOP();
 80044aa:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80044ac:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d0f9      	beq.n	80044aa <_write+0x6>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80044b6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80044ba:	7019      	strb	r1, [r3, #0]
 80044bc:	3401      	adds	r4, #1
		ITM_SendChar((*ptr++)); // out char to serial
 80044be:	4629      	mov	r1, r5
	for(i=0 ; i<len ; i++)
 80044c0:	4294      	cmp	r4, r2
 80044c2:	da10      	bge.n	80044e6 <_write+0x42>
		ITM_SendChar((*ptr++)); // out char to serial
 80044c4:	1c4d      	adds	r5, r1, #1
 80044c6:	7809      	ldrb	r1, [r1, #0]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80044c8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80044cc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80044d0:	f013 0f01 	tst.w	r3, #1
 80044d4:	d0f2      	beq.n	80044bc <_write+0x18>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80044d6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80044da:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80044de:	f013 0f01 	tst.w	r3, #1
 80044e2:	d1e3      	bne.n	80044ac <_write+0x8>
 80044e4:	e7ea      	b.n	80044bc <_write+0x18>
	return len;
}
 80044e6:	4610      	mov	r0, r2
 80044e8:	bc30      	pop	{r4, r5}
 80044ea:	4770      	bx	lr

080044ec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80044ec:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM8) {
 80044ee:	6802      	ldr	r2, [r0, #0]
 80044f0:	4b03      	ldr	r3, [pc, #12]	; (8004500 <HAL_TIM_PeriodElapsedCallback+0x14>)
 80044f2:	429a      	cmp	r2, r3
 80044f4:	d000      	beq.n	80044f8 <HAL_TIM_PeriodElapsedCallback+0xc>
 80044f6:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 80044f8:	f7fc f824 	bl	8000544 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80044fc:	e7fb      	b.n	80044f6 <HAL_TIM_PeriodElapsedCallback+0xa>
 80044fe:	bf00      	nop
 8004500:	40010400 	.word	0x40010400

08004504 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004504:	4770      	bx	lr

08004506 <malloc>:
/* From :
 https://www.freertos.org/FreeRTOS_Support_Forum_Archive/Octobe
 r_2009/freertos_malloc_function_in_FreeRTOS_3444349.html */
/* Defining malloc/free should overwrite the standard versions
 provided by the compiler. */
void *malloc(size_t size) {
 8004506:	b508      	push	{r3, lr}
	/* Call the FreeRTOS version of malloc. */
	return pvPortMalloc(size);
 8004508:	f7fe fdb4 	bl	8003074 <pvPortMalloc>
}
 800450c:	bd08      	pop	{r3, pc}

0800450e <free>:
void *calloc(size_t nmemb, size_t size) {
	/* Call the FreeRTOS version of calloc. */
	void * p = pvPortMalloc(size);
	return memset(p, 0, size);
}
void free(void *ptr) { /* Call the FreeRTOS version of free.*/
 800450e:	b508      	push	{r3, lr}
	vPortFree(ptr);
 8004510:	f7fe fe34 	bl	800317c <vPortFree>
 8004514:	bd08      	pop	{r3, pc}
	...

08004518 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004518:	b500      	push	{lr}
 800451a:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800451c:	2200      	movs	r2, #0
 800451e:	9200      	str	r2, [sp, #0]
 8004520:	4b0d      	ldr	r3, [pc, #52]	; (8004558 <HAL_MspInit+0x40>)
 8004522:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8004524:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8004528:	6459      	str	r1, [r3, #68]	; 0x44
 800452a:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800452c:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 8004530:	9100      	str	r1, [sp, #0]
 8004532:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004534:	9201      	str	r2, [sp, #4]
 8004536:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004538:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800453c:	6419      	str	r1, [r3, #64]	; 0x40
 800453e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004540:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004544:	9301      	str	r3, [sp, #4]
 8004546:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004548:	210f      	movs	r1, #15
 800454a:	f06f 0001 	mvn.w	r0, #1
 800454e:	f7fc f9c9 	bl	80008e4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004552:	b003      	add	sp, #12
 8004554:	f85d fb04 	ldr.w	pc, [sp], #4
 8004558:	40023800 	.word	0x40023800

0800455c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800455c:	b510      	push	{r4, lr}
 800455e:	b088      	sub	sp, #32
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM8 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, TickPriority ,0); 
 8004560:	2200      	movs	r2, #0
 8004562:	4601      	mov	r1, r0
 8004564:	202c      	movs	r0, #44	; 0x2c
 8004566:	f7fc f9bd 	bl	80008e4 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM8 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn); 
 800456a:	202c      	movs	r0, #44	; 0x2c
 800456c:	f7fc f9ec 	bl	8000948 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM8 clock */
  __HAL_RCC_TIM8_CLK_ENABLE();
 8004570:	2400      	movs	r4, #0
 8004572:	9401      	str	r4, [sp, #4]
 8004574:	4b14      	ldr	r3, [pc, #80]	; (80045c8 <HAL_InitTick+0x6c>)
 8004576:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004578:	f042 0202 	orr.w	r2, r2, #2
 800457c:	645a      	str	r2, [r3, #68]	; 0x44
 800457e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004580:	f003 0302 	and.w	r3, r3, #2
 8004584:	9301      	str	r3, [sp, #4]
 8004586:	9b01      	ldr	r3, [sp, #4]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004588:	a902      	add	r1, sp, #8
 800458a:	a803      	add	r0, sp, #12
 800458c:	f7fd fe0c 	bl	80021a8 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM8 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8004590:	f7fd fdfa 	bl	8002188 <HAL_RCC_GetPCLK2Freq>
 8004594:	0043      	lsls	r3, r0, #1
   
  /* Compute the prescaler value to have TIM8 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8004596:	480d      	ldr	r0, [pc, #52]	; (80045cc <HAL_InitTick+0x70>)
 8004598:	fba0 2303 	umull	r2, r3, r0, r3
 800459c:	0c9b      	lsrs	r3, r3, #18
 800459e:	3b01      	subs	r3, #1
  
  /* Initialize TIM8 */
  htim8.Instance = TIM8;
 80045a0:	480b      	ldr	r0, [pc, #44]	; (80045d0 <HAL_InitTick+0x74>)
 80045a2:	4a0c      	ldr	r2, [pc, #48]	; (80045d4 <HAL_InitTick+0x78>)
 80045a4:	6002      	str	r2, [r0, #0]
  + Period = [(TIM8CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim8.Init.Period = (1000000 / 1000) - 1;
 80045a6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80045aa:	60c2      	str	r2, [r0, #12]
  htim8.Init.Prescaler = uwPrescalerValue;
 80045ac:	6043      	str	r3, [r0, #4]
  htim8.Init.ClockDivision = 0;
 80045ae:	6104      	str	r4, [r0, #16]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80045b0:	6084      	str	r4, [r0, #8]
  if(HAL_TIM_Base_Init(&htim8) == HAL_OK)
 80045b2:	f7fd ff51 	bl	8002458 <HAL_TIM_Base_Init>
 80045b6:	b110      	cbz	r0, 80045be <HAL_InitTick+0x62>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim8);
  }
  
  /* Return function status */
  return HAL_ERROR;
 80045b8:	2001      	movs	r0, #1
}
 80045ba:	b008      	add	sp, #32
 80045bc:	bd10      	pop	{r4, pc}
    return HAL_TIM_Base_Start_IT(&htim8);
 80045be:	4804      	ldr	r0, [pc, #16]	; (80045d0 <HAL_InitTick+0x74>)
 80045c0:	f7fd fe11 	bl	80021e6 <HAL_TIM_Base_Start_IT>
 80045c4:	e7f9      	b.n	80045ba <HAL_InitTick+0x5e>
 80045c6:	bf00      	nop
 80045c8:	40023800 	.word	0x40023800
 80045cc:	431bde83 	.word	0x431bde83
 80045d0:	200040d8 	.word	0x200040d8
 80045d4:	40010400 	.word	0x40010400

080045d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80045d8:	4770      	bx	lr

080045da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80045da:	e7fe      	b.n	80045da <HardFault_Handler>

080045dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80045dc:	e7fe      	b.n	80045dc <MemManage_Handler>

080045de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80045de:	e7fe      	b.n	80045de <BusFault_Handler>

080045e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80045e0:	e7fe      	b.n	80045e0 <UsageFault_Handler>

080045e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80045e2:	4770      	bx	lr

080045e4 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80045e4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80045e6:	2010      	movs	r0, #16
 80045e8:	f7fc fcfa 	bl	8000fe0 <HAL_GPIO_EXTI_IRQHandler>
 80045ec:	bd08      	pop	{r3, pc}

080045ee <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80045ee:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80045f0:	2020      	movs	r0, #32
 80045f2:	f7fc fcf5 	bl	8000fe0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80045f6:	2040      	movs	r0, #64	; 0x40
 80045f8:	f7fc fcf2 	bl	8000fe0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80045fc:	2080      	movs	r0, #128	; 0x80
 80045fe:	f7fc fcef 	bl	8000fe0 <HAL_GPIO_EXTI_IRQHandler>
 8004602:	bd08      	pop	{r3, pc}

08004604 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004604:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8004606:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800460a:	f7fc fce9 	bl	8000fe0 <HAL_GPIO_EXTI_IRQHandler>
 800460e:	bd08      	pop	{r3, pc}

08004610 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8004610:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8004612:	4802      	ldr	r0, [pc, #8]	; (800461c <TIM8_UP_TIM13_IRQHandler+0xc>)
 8004614:	f7fd fdfc 	bl	8002210 <HAL_TIM_IRQHandler>
 8004618:	bd08      	pop	{r3, pc}
 800461a:	bf00      	nop
 800461c:	200040d8 	.word	0x200040d8

08004620 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004620:	490f      	ldr	r1, [pc, #60]	; (8004660 <SystemInit+0x40>)
 8004622:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8004626:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800462a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800462e:	4b0d      	ldr	r3, [pc, #52]	; (8004664 <SystemInit+0x44>)
 8004630:	681a      	ldr	r2, [r3, #0]
 8004632:	f042 0201 	orr.w	r2, r2, #1
 8004636:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004638:	2000      	movs	r0, #0
 800463a:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8004642:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004646:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8004648:	4a07      	ldr	r2, [pc, #28]	; (8004668 <SystemInit+0x48>)
 800464a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004652:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8004654:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004656:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800465a:	608b      	str	r3, [r1, #8]
 800465c:	4770      	bx	lr
 800465e:	bf00      	nop
 8004660:	e000ed00 	.word	0xe000ed00
 8004664:	40023800 	.word	0x40023800
 8004668:	24003010 	.word	0x24003010

0800466c <ts_itoa>:
 **---------------------------------------------------------------------------
 **  Abstract: Convert integer to ascii
 **  Returns:  void
 **---------------------------------------------------------------------------
 */
void ts_itoa(char **buf, unsigned int d, int base) {
 800466c:	b470      	push	{r4, r5, r6}
	int div = 1;
 800466e:	2301      	movs	r3, #1
	while (d / div >= base)
 8004670:	e001      	b.n	8004676 <ts_itoa+0xa>
		div *= base;
 8004672:	fb02 f303 	mul.w	r3, r2, r3
	while (d / div >= base)
 8004676:	fbb1 f4f3 	udiv	r4, r1, r3
 800467a:	4294      	cmp	r4, r2
 800467c:	d2f9      	bcs.n	8004672 <ts_itoa+0x6>
 800467e:	e004      	b.n	800468a <ts_itoa+0x1e>
		d = d % div;
		div /= base;
		if (num > 9)
			*((*buf)++) = (num - 10) + 'A';
		else
			*((*buf)++) = num + '0';
 8004680:	6805      	ldr	r5, [r0, #0]
 8004682:	1c6e      	adds	r6, r5, #1
 8004684:	6006      	str	r6, [r0, #0]
 8004686:	3430      	adds	r4, #48	; 0x30
 8004688:	702c      	strb	r4, [r5, #0]
	while (div != 0) {
 800468a:	b16b      	cbz	r3, 80046a8 <ts_itoa+0x3c>
		int num = d / div;
 800468c:	fbb1 f4f3 	udiv	r4, r1, r3
		d = d % div;
 8004690:	fb03 1114 	mls	r1, r3, r4, r1
		div /= base;
 8004694:	fb93 f3f2 	sdiv	r3, r3, r2
		if (num > 9)
 8004698:	2c09      	cmp	r4, #9
 800469a:	ddf1      	ble.n	8004680 <ts_itoa+0x14>
			*((*buf)++) = (num - 10) + 'A';
 800469c:	6805      	ldr	r5, [r0, #0]
 800469e:	1c6e      	adds	r6, r5, #1
 80046a0:	6006      	str	r6, [r0, #0]
 80046a2:	3437      	adds	r4, #55	; 0x37
 80046a4:	702c      	strb	r4, [r5, #0]
 80046a6:	e7f0      	b.n	800468a <ts_itoa+0x1e>
	}
}
 80046a8:	bc70      	pop	{r4, r5, r6}
 80046aa:	4770      	bx	lr

080046ac <ts_formatstring>:
 **---------------------------------------------------------------------------
 **  Abstract: Writes arguments va to buffer buf according to format fmt
 **  Returns:  Length of string
 **---------------------------------------------------------------------------
 */
int ts_formatstring(char *buf, const char *fmt, va_list va) {
 80046ac:	b530      	push	{r4, r5, lr}
 80046ae:	b083      	sub	sp, #12
 80046b0:	9001      	str	r0, [sp, #4]
 80046b2:	460c      	mov	r4, r1
 80046b4:	9200      	str	r2, [sp, #0]
	char *start_buf = buf;
 80046b6:	4605      	mov	r5, r0
	while (*fmt) {
 80046b8:	e03e      	b.n	8004738 <ts_formatstring+0x8c>
		/* Character needs formating? */
		if (*fmt == '%') {
			switch (*(++fmt)) {
 80046ba:	7863      	ldrb	r3, [r4, #1]
 80046bc:	2b64      	cmp	r3, #100	; 0x64
 80046be:	d01c      	beq.n	80046fa <ts_formatstring+0x4e>
 80046c0:	d90d      	bls.n	80046de <ts_formatstring+0x32>
 80046c2:	2b73      	cmp	r3, #115	; 0x73
 80046c4:	d04a      	beq.n	800475c <ts_formatstring+0xb0>
 80046c6:	d916      	bls.n	80046f6 <ts_formatstring+0x4a>
 80046c8:	2b75      	cmp	r3, #117	; 0x75
 80046ca:	d121      	bne.n	8004710 <ts_formatstring+0x64>
					*buf++ = *arg++;
				}
			}
				break;
			case 'u':
				ts_itoa(&buf, va_arg(va, unsigned int), 10);
 80046cc:	9b00      	ldr	r3, [sp, #0]
 80046ce:	1d1a      	adds	r2, r3, #4
 80046d0:	9200      	str	r2, [sp, #0]
 80046d2:	220a      	movs	r2, #10
 80046d4:	6819      	ldr	r1, [r3, #0]
 80046d6:	a801      	add	r0, sp, #4
 80046d8:	f7ff ffc8 	bl	800466c <ts_itoa>
				break;
 80046dc:	e02b      	b.n	8004736 <ts_formatstring+0x8a>
			switch (*(++fmt)) {
 80046de:	2b58      	cmp	r3, #88	; 0x58
 80046e0:	d018      	beq.n	8004714 <ts_formatstring+0x68>
 80046e2:	2b63      	cmp	r3, #99	; 0x63
 80046e4:	d01f      	beq.n	8004726 <ts_formatstring+0x7a>
 80046e6:	2b25      	cmp	r3, #37	; 0x25
 80046e8:	d125      	bne.n	8004736 <ts_formatstring+0x8a>
			case 'x':
			case 'X':
				ts_itoa(&buf, va_arg(va, int), 16);
				break;
			case '%':
				*buf++ = '%';
 80046ea:	9b01      	ldr	r3, [sp, #4]
 80046ec:	1c5a      	adds	r2, r3, #1
 80046ee:	9201      	str	r2, [sp, #4]
 80046f0:	2225      	movs	r2, #37	; 0x25
 80046f2:	701a      	strb	r2, [r3, #0]
				break;
 80046f4:	e01f      	b.n	8004736 <ts_formatstring+0x8a>
			switch (*(++fmt)) {
 80046f6:	2b69      	cmp	r3, #105	; 0x69
 80046f8:	d11d      	bne.n	8004736 <ts_formatstring+0x8a>
				signed int val = va_arg(va, signed int);
 80046fa:	9b00      	ldr	r3, [sp, #0]
 80046fc:	1d1a      	adds	r2, r3, #4
 80046fe:	9200      	str	r2, [sp, #0]
 8004700:	6819      	ldr	r1, [r3, #0]
				if (val < 0) {
 8004702:	2900      	cmp	r1, #0
 8004704:	db23      	blt.n	800474e <ts_formatstring+0xa2>
				ts_itoa(&buf, val, 10);
 8004706:	220a      	movs	r2, #10
 8004708:	a801      	add	r0, sp, #4
 800470a:	f7ff ffaf 	bl	800466c <ts_itoa>
				break;
 800470e:	e012      	b.n	8004736 <ts_formatstring+0x8a>
			switch (*(++fmt)) {
 8004710:	2b78      	cmp	r3, #120	; 0x78
 8004712:	d110      	bne.n	8004736 <ts_formatstring+0x8a>
				ts_itoa(&buf, va_arg(va, int), 16);
 8004714:	9b00      	ldr	r3, [sp, #0]
 8004716:	1d1a      	adds	r2, r3, #4
 8004718:	9200      	str	r2, [sp, #0]
 800471a:	2210      	movs	r2, #16
 800471c:	6819      	ldr	r1, [r3, #0]
 800471e:	a801      	add	r0, sp, #4
 8004720:	f7ff ffa4 	bl	800466c <ts_itoa>
				break;
 8004724:	e007      	b.n	8004736 <ts_formatstring+0x8a>
				*buf++ = va_arg(va, int);
 8004726:	9b01      	ldr	r3, [sp, #4]
 8004728:	1c5a      	adds	r2, r3, #1
 800472a:	9201      	str	r2, [sp, #4]
 800472c:	9a00      	ldr	r2, [sp, #0]
 800472e:	1d11      	adds	r1, r2, #4
 8004730:	9100      	str	r1, [sp, #0]
 8004732:	6812      	ldr	r2, [r2, #0]
 8004734:	701a      	strb	r2, [r3, #0]
			}
			fmt++;
 8004736:	3402      	adds	r4, #2
	while (*fmt) {
 8004738:	7823      	ldrb	r3, [r4, #0]
 800473a:	b1f3      	cbz	r3, 800477a <ts_formatstring+0xce>
		if (*fmt == '%') {
 800473c:	2b25      	cmp	r3, #37	; 0x25
 800473e:	d0bc      	beq.n	80046ba <ts_formatstring+0xe>
		}
		/* Else just copy */
		else {
			*buf++ = *fmt++;
 8004740:	9b01      	ldr	r3, [sp, #4]
 8004742:	1c5a      	adds	r2, r3, #1
 8004744:	9201      	str	r2, [sp, #4]
 8004746:	7822      	ldrb	r2, [r4, #0]
 8004748:	701a      	strb	r2, [r3, #0]
 800474a:	3401      	adds	r4, #1
 800474c:	e7f4      	b.n	8004738 <ts_formatstring+0x8c>
					val *= -1;
 800474e:	4249      	negs	r1, r1
					*buf++ = '-';
 8004750:	9b01      	ldr	r3, [sp, #4]
 8004752:	1c5a      	adds	r2, r3, #1
 8004754:	9201      	str	r2, [sp, #4]
 8004756:	222d      	movs	r2, #45	; 0x2d
 8004758:	701a      	strb	r2, [r3, #0]
 800475a:	e7d4      	b.n	8004706 <ts_formatstring+0x5a>
				char * arg = va_arg(va, char *);
 800475c:	9b00      	ldr	r3, [sp, #0]
 800475e:	1d1a      	adds	r2, r3, #4
 8004760:	9200      	str	r2, [sp, #0]
 8004762:	681b      	ldr	r3, [r3, #0]
				while (*arg) {
 8004764:	e005      	b.n	8004772 <ts_formatstring+0xc6>
					*buf++ = *arg++;
 8004766:	9a01      	ldr	r2, [sp, #4]
 8004768:	1c51      	adds	r1, r2, #1
 800476a:	9101      	str	r1, [sp, #4]
 800476c:	7819      	ldrb	r1, [r3, #0]
 800476e:	7011      	strb	r1, [r2, #0]
 8004770:	3301      	adds	r3, #1
				while (*arg) {
 8004772:	781a      	ldrb	r2, [r3, #0]
 8004774:	2a00      	cmp	r2, #0
 8004776:	d1f6      	bne.n	8004766 <ts_formatstring+0xba>
 8004778:	e7dd      	b.n	8004736 <ts_formatstring+0x8a>
		}
	}
	*buf = 0;
 800477a:	2200      	movs	r2, #0
 800477c:	9b01      	ldr	r3, [sp, #4]
 800477e:	701a      	strb	r2, [r3, #0]

	return (int) (buf - start_buf);
}
 8004780:	9801      	ldr	r0, [sp, #4]
 8004782:	1b40      	subs	r0, r0, r5
 8004784:	b003      	add	sp, #12
 8004786:	bd30      	pop	{r4, r5, pc}

08004788 <ts_formatlength>:
 **  Abstract: Calculate maximum length of the resulting string from the
 **            format string and va_list va
 **  Returns:  Maximum length
 **---------------------------------------------------------------------------
 */
int ts_formatlength(const char *fmt, va_list va) {
 8004788:	b082      	sub	sp, #8
 800478a:	4603      	mov	r3, r0
 800478c:	9101      	str	r1, [sp, #4]
	int length = 0;
 800478e:	2000      	movs	r0, #0
	while (*fmt) {
 8004790:	e01d      	b.n	80047ce <ts_formatlength+0x46>
		if (*fmt == '%') {
			++fmt;
 8004792:	1c59      	adds	r1, r3, #1
			switch (*fmt) {
 8004794:	785b      	ldrb	r3, [r3, #1]
 8004796:	3b58      	subs	r3, #88	; 0x58
 8004798:	2b20      	cmp	r3, #32
 800479a:	d837      	bhi.n	800480c <ts_formatlength+0x84>
 800479c:	e8df f003 	tbb	[pc, r3]
 80047a0:	36363630 	.word	0x36363630
 80047a4:	36363636 	.word	0x36363636
 80047a8:	11363636 	.word	0x11363636
 80047ac:	3636361d 	.word	0x3636361d
 80047b0:	36361d36 	.word	0x36361d36
 80047b4:	36363636 	.word	0x36363636
 80047b8:	23363636 	.word	0x23363636
 80047bc:	36361d36 	.word	0x36361d36
 80047c0:	30          	.byte	0x30
 80047c1:	00          	.byte	0x00
			case 'c':
				va_arg(va, int);
 80047c2:	9b01      	ldr	r3, [sp, #4]
 80047c4:	3304      	adds	r3, #4
 80047c6:	9301      	str	r3, [sp, #4]
				++length;
 80047c8:	3001      	adds	r0, #1
			++fmt;
 80047ca:	460b      	mov	r3, r1
				break;
			}
		} else {
			++length;
		}
		++fmt;
 80047cc:	3301      	adds	r3, #1
	while (*fmt) {
 80047ce:	781a      	ldrb	r2, [r3, #0]
 80047d0:	b1fa      	cbz	r2, 8004812 <ts_formatlength+0x8a>
		if (*fmt == '%') {
 80047d2:	2a25      	cmp	r2, #37	; 0x25
 80047d4:	d0dd      	beq.n	8004792 <ts_formatlength+0xa>
			++length;
 80047d6:	3001      	adds	r0, #1
 80047d8:	e7f8      	b.n	80047cc <ts_formatlength+0x44>
				length += 11;
 80047da:	300b      	adds	r0, #11
				va_arg(va, int);
 80047dc:	9b01      	ldr	r3, [sp, #4]
 80047de:	3304      	adds	r3, #4
 80047e0:	9301      	str	r3, [sp, #4]
			++fmt;
 80047e2:	460b      	mov	r3, r1
 80047e4:	e7f2      	b.n	80047cc <ts_formatlength+0x44>
				char * str = va_arg(va, char *);
 80047e6:	9b01      	ldr	r3, [sp, #4]
 80047e8:	1d1a      	adds	r2, r3, #4
 80047ea:	9201      	str	r2, [sp, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
				while (*str++)
 80047ee:	e001      	b.n	80047f4 <ts_formatlength+0x6c>
					++length;
 80047f0:	3001      	adds	r0, #1
				while (*str++)
 80047f2:	4613      	mov	r3, r2
 80047f4:	1c5a      	adds	r2, r3, #1
 80047f6:	781b      	ldrb	r3, [r3, #0]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d1f9      	bne.n	80047f0 <ts_formatlength+0x68>
			++fmt;
 80047fc:	460b      	mov	r3, r1
 80047fe:	e7e5      	b.n	80047cc <ts_formatlength+0x44>
				length += 8;
 8004800:	3008      	adds	r0, #8
				va_arg(va, unsigned int);
 8004802:	9b01      	ldr	r3, [sp, #4]
 8004804:	3304      	adds	r3, #4
 8004806:	9301      	str	r3, [sp, #4]
			++fmt;
 8004808:	460b      	mov	r3, r1
 800480a:	e7df      	b.n	80047cc <ts_formatlength+0x44>
				++length;
 800480c:	3001      	adds	r0, #1
			++fmt;
 800480e:	460b      	mov	r3, r1
				break;
 8004810:	e7dc      	b.n	80047cc <ts_formatlength+0x44>
	}
	return length;
}
 8004812:	b002      	add	sp, #8
 8004814:	4770      	bx	lr

08004816 <iprintf>:
 **            standard output according to the format parameter.
 **  Returns:  Number of bytes written
 **
 **===========================================================================
 */
int iprintf(const char *fmt, ...) {
 8004816:	b40f      	push	{r0, r1, r2, r3}
 8004818:	b5f0      	push	{r4, r5, r6, r7, lr}
 800481a:	b083      	sub	sp, #12
 800481c:	af00      	add	r7, sp, #0
 800481e:	f107 0120 	add.w	r1, r7, #32
 8004822:	f851 5b04 	ldr.w	r5, [r1], #4
	int length = 0;
	va_list va;
	va_start(va, fmt);
 8004826:	6079      	str	r1, [r7, #4]
	length = ts_formatlength(fmt, va);
 8004828:	4628      	mov	r0, r5
 800482a:	f7ff ffad 	bl	8004788 <ts_formatlength>
 800482e:	4604      	mov	r4, r0
	va_end(va);
	if (length < 50) { // ok only for small default configMINIMAL_STACK_SIZE(128)
 8004830:	2831      	cmp	r0, #49	; 0x31
 8004832:	dd19      	ble.n	8004868 <iprintf+0x52>
		va_start(va, fmt);
		length = ts_formatstring(buf, fmt, va);
		length = _write(1, buf, length);
		va_end(va);
	} else {
		char * buf = malloc(length * sizeof(char));
 8004834:	f7ff fe67 	bl	8004506 <malloc>
		if (buf) {
 8004838:	4606      	mov	r6, r0
 800483a:	b170      	cbz	r0, 800485a <iprintf+0x44>
			va_start(va, fmt);
 800483c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8004840:	607a      	str	r2, [r7, #4]
			length = ts_formatstring(buf, fmt, va);
 8004842:	4629      	mov	r1, r5
 8004844:	f7ff ff32 	bl	80046ac <ts_formatstring>
			length = _write(1, buf, length);
 8004848:	4602      	mov	r2, r0
 800484a:	4631      	mov	r1, r6
 800484c:	2001      	movs	r0, #1
 800484e:	f7ff fe29 	bl	80044a4 <_write>
 8004852:	4604      	mov	r4, r0
			va_end(va);
			free(buf);
 8004854:	4630      	mov	r0, r6
 8004856:	f7ff fe5a 	bl	800450e <free>
		}
	}
	return length;
}
 800485a:	4620      	mov	r0, r4
 800485c:	370c      	adds	r7, #12
 800485e:	46bd      	mov	sp, r7
 8004860:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8004864:	b004      	add	sp, #16
 8004866:	4770      	bx	lr
	if (length < 50) { // ok only for small default configMINIMAL_STACK_SIZE(128)
 8004868:	466e      	mov	r6, sp
		char buf[length];
 800486a:	3407      	adds	r4, #7
 800486c:	f024 0407 	bic.w	r4, r4, #7
 8004870:	ebad 0d04 	sub.w	sp, sp, r4
		va_start(va, fmt);
 8004874:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8004878:	607a      	str	r2, [r7, #4]
		length = ts_formatstring(buf, fmt, va);
 800487a:	4629      	mov	r1, r5
 800487c:	4668      	mov	r0, sp
 800487e:	f7ff ff15 	bl	80046ac <ts_formatstring>
		length = _write(1, buf, length);
 8004882:	4602      	mov	r2, r0
 8004884:	4669      	mov	r1, sp
 8004886:	2001      	movs	r0, #1
 8004888:	f7ff fe0c 	bl	80044a4 <_write>
 800488c:	4604      	mov	r4, r0
 800488e:	46b5      	mov	sp, r6
 8004890:	e7e3      	b.n	800485a <iprintf+0x44>
	...

08004894 <puts>:
 **  Returns:  If successful, the result is a nonnegative integer; otherwise,
 **  the result is EOF.
 **
 **===========================================================================
 */
int puts(const char *s) {
 8004894:	b538      	push	{r3, r4, r5, lr}
 8004896:	4605      	mov	r5, r0
	int length = strlen(s);
 8004898:	f7fb fcaa 	bl	80001f0 <strlen>
 800489c:	4604      	mov	r4, r0
	int numbytes = 0;
	int res;

	numbytes = _write(1, (char*) s, length);
 800489e:	4602      	mov	r2, r0
 80048a0:	4629      	mov	r1, r5
 80048a2:	2001      	movs	r0, #1
 80048a4:	f7ff fdfe 	bl	80044a4 <_write>
 80048a8:	4605      	mov	r5, r0
	numbytes += _write(1, "\n", 1);
 80048aa:	2201      	movs	r2, #1
 80048ac:	4906      	ldr	r1, [pc, #24]	; (80048c8 <puts+0x34>)
 80048ae:	4610      	mov	r0, r2
 80048b0:	f7ff fdf8 	bl	80044a4 <_write>
 80048b4:	4428      	add	r0, r5

	if (numbytes == (length + 1)) {
 80048b6:	3401      	adds	r4, #1
 80048b8:	42a0      	cmp	r0, r4
 80048ba:	d101      	bne.n	80048c0 <puts+0x2c>
		res = 0;
 80048bc:	2000      	movs	r0, #0
 80048be:	bd38      	pop	{r3, r4, r5, pc}
	} else {
		res = EOF;
 80048c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}

	return res;
}
 80048c4:	bd38      	pop	{r3, r4, r5, pc}
 80048c6:	bf00      	nop
 80048c8:	08004c4c 	.word	0x08004c4c

080048cc <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80048cc:	b508      	push	{r3, lr}

  huart3.Instance = USART3;
 80048ce:	480a      	ldr	r0, [pc, #40]	; (80048f8 <MX_USART3_UART_Init+0x2c>)
 80048d0:	4b0a      	ldr	r3, [pc, #40]	; (80048fc <MX_USART3_UART_Init+0x30>)
 80048d2:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = 115200;
 80048d4:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80048d8:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80048da:	2300      	movs	r3, #0
 80048dc:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80048de:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80048e0:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80048e2:	220c      	movs	r2, #12
 80048e4:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80048e6:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80048e8:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80048ea:	f7fd ff73 	bl	80027d4 <HAL_UART_Init>
 80048ee:	b900      	cbnz	r0, 80048f2 <MX_USART3_UART_Init+0x26>
 80048f0:	bd08      	pop	{r3, pc}
  {
    Error_Handler();
 80048f2:	f7ff fe07 	bl	8004504 <Error_Handler>
  }

}
 80048f6:	e7fb      	b.n	80048f0 <MX_USART3_UART_Init+0x24>
 80048f8:	20004118 	.word	0x20004118
 80048fc:	40004800 	.word	0x40004800

08004900 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004900:	b500      	push	{lr}
 8004902:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004904:	2300      	movs	r3, #0
 8004906:	9303      	str	r3, [sp, #12]
 8004908:	9304      	str	r3, [sp, #16]
 800490a:	9305      	str	r3, [sp, #20]
 800490c:	9306      	str	r3, [sp, #24]
 800490e:	9307      	str	r3, [sp, #28]
  if(uartHandle->Instance==USART3)
 8004910:	6802      	ldr	r2, [r0, #0]
 8004912:	4b16      	ldr	r3, [pc, #88]	; (800496c <HAL_UART_MspInit+0x6c>)
 8004914:	429a      	cmp	r2, r3
 8004916:	d002      	beq.n	800491e <HAL_UART_MspInit+0x1e>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8004918:	b009      	add	sp, #36	; 0x24
 800491a:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART3_CLK_ENABLE();
 800491e:	2100      	movs	r1, #0
 8004920:	9101      	str	r1, [sp, #4]
 8004922:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
 8004926:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004928:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800492c:	641a      	str	r2, [r3, #64]	; 0x40
 800492e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004930:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8004934:	9201      	str	r2, [sp, #4]
 8004936:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004938:	9102      	str	r1, [sp, #8]
 800493a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800493c:	f042 0208 	orr.w	r2, r2, #8
 8004940:	631a      	str	r2, [r3, #48]	; 0x30
 8004942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004944:	f003 0308 	and.w	r3, r3, #8
 8004948:	9302      	str	r3, [sp, #8]
 800494a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800494c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004950:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004952:	2302      	movs	r3, #2
 8004954:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004956:	2301      	movs	r3, #1
 8004958:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800495a:	2303      	movs	r3, #3
 800495c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800495e:	2307      	movs	r3, #7
 8004960:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004962:	a903      	add	r1, sp, #12
 8004964:	4802      	ldr	r0, [pc, #8]	; (8004970 <HAL_UART_MspInit+0x70>)
 8004966:	f7fc fa43 	bl	8000df0 <HAL_GPIO_Init>
}
 800496a:	e7d5      	b.n	8004918 <HAL_UART_MspInit+0x18>
 800496c:	40004800 	.word	0x40004800
 8004970:	40020c00 	.word	0x40020c00

08004974 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8004974:	b508      	push	{r3, lr}

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8004976:	480c      	ldr	r0, [pc, #48]	; (80049a8 <MX_USB_OTG_FS_PCD_Init+0x34>)
 8004978:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800497c:	6003      	str	r3, [r0, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800497e:	2304      	movs	r3, #4
 8004980:	6043      	str	r3, [r0, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8004982:	2202      	movs	r2, #2
 8004984:	60c2      	str	r2, [r0, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8004986:	2300      	movs	r3, #0
 8004988:	6103      	str	r3, [r0, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800498a:	6182      	str	r2, [r0, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800498c:	2201      	movs	r2, #1
 800498e:	61c2      	str	r2, [r0, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8004990:	6203      	str	r3, [r0, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8004992:	6243      	str	r3, [r0, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8004994:	62c2      	str	r2, [r0, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8004996:	6303      	str	r3, [r0, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8004998:	f7fd f86d 	bl	8001a76 <HAL_PCD_Init>
 800499c:	b900      	cbnz	r0, 80049a0 <MX_USB_OTG_FS_PCD_Init+0x2c>
 800499e:	bd08      	pop	{r3, pc}
  {
    Error_Handler();
 80049a0:	f7ff fdb0 	bl	8004504 <Error_Handler>
  }

}
 80049a4:	e7fb      	b.n	800499e <MX_USB_OTG_FS_PCD_Init+0x2a>
 80049a6:	bf00      	nop
 80049a8:	20004158 	.word	0x20004158

080049ac <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80049ac:	b570      	push	{r4, r5, r6, lr}
 80049ae:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049b0:	2300      	movs	r3, #0
 80049b2:	9303      	str	r3, [sp, #12]
 80049b4:	9304      	str	r3, [sp, #16]
 80049b6:	9305      	str	r3, [sp, #20]
 80049b8:	9306      	str	r3, [sp, #24]
 80049ba:	9307      	str	r3, [sp, #28]
  if(pcdHandle->Instance==USB_OTG_FS)
 80049bc:	6803      	ldr	r3, [r0, #0]
 80049be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80049c2:	d001      	beq.n	80049c8 <HAL_PCD_MspInit+0x1c>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80049c4:	b008      	add	sp, #32
 80049c6:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80049c8:	2500      	movs	r5, #0
 80049ca:	9501      	str	r5, [sp, #4]
 80049cc:	4c17      	ldr	r4, [pc, #92]	; (8004a2c <HAL_PCD_MspInit+0x80>)
 80049ce:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80049d0:	f043 0301 	orr.w	r3, r3, #1
 80049d4:	6323      	str	r3, [r4, #48]	; 0x30
 80049d6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80049d8:	f003 0301 	and.w	r3, r3, #1
 80049dc:	9301      	str	r3, [sp, #4]
 80049de:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80049e0:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80049e4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049e6:	2302      	movs	r3, #2
 80049e8:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049ea:	2303      	movs	r3, #3
 80049ec:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80049ee:	230a      	movs	r3, #10
 80049f0:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049f2:	4e0f      	ldr	r6, [pc, #60]	; (8004a30 <HAL_PCD_MspInit+0x84>)
 80049f4:	a903      	add	r1, sp, #12
 80049f6:	4630      	mov	r0, r6
 80049f8:	f7fc f9fa 	bl	8000df0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80049fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a00:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004a02:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a04:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8004a06:	a903      	add	r1, sp, #12
 8004a08:	4630      	mov	r0, r6
 8004a0a:	f7fc f9f1 	bl	8000df0 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8004a0e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004a10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a14:	6363      	str	r3, [r4, #52]	; 0x34
 8004a16:	9502      	str	r5, [sp, #8]
 8004a18:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004a1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004a1e:	6463      	str	r3, [r4, #68]	; 0x44
 8004a20:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004a22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a26:	9302      	str	r3, [sp, #8]
 8004a28:	9b02      	ldr	r3, [sp, #8]
}
 8004a2a:	e7cb      	b.n	80049c4 <HAL_PCD_MspInit+0x18>
 8004a2c:	40023800 	.word	0x40023800
 8004a30:	40020000 	.word	0x40020000

08004a34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8004a34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004a6c <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004a38:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004a3a:	e003      	b.n	8004a44 <LoopCopyDataInit>

08004a3c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004a3c:	4b0c      	ldr	r3, [pc, #48]	; (8004a70 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004a3e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004a40:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004a42:	3104      	adds	r1, #4

08004a44 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004a44:	480b      	ldr	r0, [pc, #44]	; (8004a74 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004a46:	4b0c      	ldr	r3, [pc, #48]	; (8004a78 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004a48:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004a4a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004a4c:	d3f6      	bcc.n	8004a3c <CopyDataInit>
  ldr  r2, =_sbss
 8004a4e:	4a0b      	ldr	r2, [pc, #44]	; (8004a7c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004a50:	e002      	b.n	8004a58 <LoopFillZerobss>

08004a52 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004a52:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004a54:	f842 3b04 	str.w	r3, [r2], #4

08004a58 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004a58:	4b09      	ldr	r3, [pc, #36]	; (8004a80 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004a5a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004a5c:	d3f9      	bcc.n	8004a52 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004a5e:	f7ff fddf 	bl	8004620 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004a62:	f000 f811 	bl	8004a88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004a66:	f7ff fd07 	bl	8004478 <main>
  bx  lr    
 8004a6a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8004a6c:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8004a70:	08004c60 	.word	0x08004c60
  ldr  r0, =_sdata
 8004a74:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004a78:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8004a7c:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8004a80:	20004560 	.word	0x20004560

08004a84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004a84:	e7fe      	b.n	8004a84 <ADC_IRQHandler>
	...

08004a88 <__libc_init_array>:
 8004a88:	b570      	push	{r4, r5, r6, lr}
 8004a8a:	4e0d      	ldr	r6, [pc, #52]	; (8004ac0 <__libc_init_array+0x38>)
 8004a8c:	4c0d      	ldr	r4, [pc, #52]	; (8004ac4 <__libc_init_array+0x3c>)
 8004a8e:	1ba4      	subs	r4, r4, r6
 8004a90:	10a4      	asrs	r4, r4, #2
 8004a92:	2500      	movs	r5, #0
 8004a94:	42a5      	cmp	r5, r4
 8004a96:	d109      	bne.n	8004aac <__libc_init_array+0x24>
 8004a98:	4e0b      	ldr	r6, [pc, #44]	; (8004ac8 <__libc_init_array+0x40>)
 8004a9a:	4c0c      	ldr	r4, [pc, #48]	; (8004acc <__libc_init_array+0x44>)
 8004a9c:	f000 f820 	bl	8004ae0 <_init>
 8004aa0:	1ba4      	subs	r4, r4, r6
 8004aa2:	10a4      	asrs	r4, r4, #2
 8004aa4:	2500      	movs	r5, #0
 8004aa6:	42a5      	cmp	r5, r4
 8004aa8:	d105      	bne.n	8004ab6 <__libc_init_array+0x2e>
 8004aaa:	bd70      	pop	{r4, r5, r6, pc}
 8004aac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004ab0:	4798      	blx	r3
 8004ab2:	3501      	adds	r5, #1
 8004ab4:	e7ee      	b.n	8004a94 <__libc_init_array+0xc>
 8004ab6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004aba:	4798      	blx	r3
 8004abc:	3501      	adds	r5, #1
 8004abe:	e7f2      	b.n	8004aa6 <__libc_init_array+0x1e>
 8004ac0:	08004c58 	.word	0x08004c58
 8004ac4:	08004c58 	.word	0x08004c58
 8004ac8:	08004c58 	.word	0x08004c58
 8004acc:	08004c5c 	.word	0x08004c5c

08004ad0 <memset>:
 8004ad0:	4402      	add	r2, r0
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d100      	bne.n	8004ada <memset+0xa>
 8004ad8:	4770      	bx	lr
 8004ada:	f803 1b01 	strb.w	r1, [r3], #1
 8004ade:	e7f9      	b.n	8004ad4 <memset+0x4>

08004ae0 <_init>:
 8004ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ae2:	bf00      	nop
 8004ae4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ae6:	bc08      	pop	{r3}
 8004ae8:	469e      	mov	lr, r3
 8004aea:	4770      	bx	lr

08004aec <_fini>:
 8004aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aee:	bf00      	nop
 8004af0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004af2:	bc08      	pop	{r3}
 8004af4:	469e      	mov	lr, r3
 8004af6:	4770      	bx	lr
