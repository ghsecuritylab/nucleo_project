
FreeRTOS_base.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003454  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08003604  08003604  00013604  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080036e4  080036e4  000136e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080036ec  080036ec  000136ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080036f0  080036f0  000136f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  080036f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
  8 .bss          000044a0  2000000c  2000000c  0002000c  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  200044ac  200044ac  0002000c  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001eb8c  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00003e3d  00000000  00000000  0003ebc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000f0f5  00000000  00000000  00042a05  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001550  00000000  00000000  00051b00  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000015f8  00000000  00000000  00053050  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00009930  00000000  00000000  00054648  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000075e8  00000000  00000000  0005df78  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  00065560  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00003a34  00000000  00000000  000655dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000000c 	.word	0x2000000c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080035ec 	.word	0x080035ec

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000010 	.word	0x20000010
 80001ec:	080035ec 	.word	0x080035ec

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <__aeabi_uldivmod>:
 8000200:	b953      	cbnz	r3, 8000218 <__aeabi_uldivmod+0x18>
 8000202:	b94a      	cbnz	r2, 8000218 <__aeabi_uldivmod+0x18>
 8000204:	2900      	cmp	r1, #0
 8000206:	bf08      	it	eq
 8000208:	2800      	cmpeq	r0, #0
 800020a:	bf1c      	itt	ne
 800020c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000210:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000214:	f000 b97a 	b.w	800050c <__aeabi_idiv0>
 8000218:	f1ad 0c08 	sub.w	ip, sp, #8
 800021c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000220:	f000 f806 	bl	8000230 <__udivmoddi4>
 8000224:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000228:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800022c:	b004      	add	sp, #16
 800022e:	4770      	bx	lr

08000230 <__udivmoddi4>:
 8000230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000234:	468c      	mov	ip, r1
 8000236:	460d      	mov	r5, r1
 8000238:	4604      	mov	r4, r0
 800023a:	9e08      	ldr	r6, [sp, #32]
 800023c:	2b00      	cmp	r3, #0
 800023e:	d151      	bne.n	80002e4 <__udivmoddi4+0xb4>
 8000240:	428a      	cmp	r2, r1
 8000242:	4617      	mov	r7, r2
 8000244:	d96d      	bls.n	8000322 <__udivmoddi4+0xf2>
 8000246:	fab2 fe82 	clz	lr, r2
 800024a:	f1be 0f00 	cmp.w	lr, #0
 800024e:	d00b      	beq.n	8000268 <__udivmoddi4+0x38>
 8000250:	f1ce 0c20 	rsb	ip, lr, #32
 8000254:	fa01 f50e 	lsl.w	r5, r1, lr
 8000258:	fa20 fc0c 	lsr.w	ip, r0, ip
 800025c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000260:	ea4c 0c05 	orr.w	ip, ip, r5
 8000264:	fa00 f40e 	lsl.w	r4, r0, lr
 8000268:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800026c:	0c25      	lsrs	r5, r4, #16
 800026e:	fbbc f8fa 	udiv	r8, ip, sl
 8000272:	fa1f f987 	uxth.w	r9, r7
 8000276:	fb0a cc18 	mls	ip, sl, r8, ip
 800027a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800027e:	fb08 f309 	mul.w	r3, r8, r9
 8000282:	42ab      	cmp	r3, r5
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x6c>
 8000286:	19ed      	adds	r5, r5, r7
 8000288:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 800028c:	f080 8123 	bcs.w	80004d6 <__udivmoddi4+0x2a6>
 8000290:	42ab      	cmp	r3, r5
 8000292:	f240 8120 	bls.w	80004d6 <__udivmoddi4+0x2a6>
 8000296:	f1a8 0802 	sub.w	r8, r8, #2
 800029a:	443d      	add	r5, r7
 800029c:	1aed      	subs	r5, r5, r3
 800029e:	b2a4      	uxth	r4, r4
 80002a0:	fbb5 f0fa 	udiv	r0, r5, sl
 80002a4:	fb0a 5510 	mls	r5, sl, r0, r5
 80002a8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002ac:	fb00 f909 	mul.w	r9, r0, r9
 80002b0:	45a1      	cmp	r9, r4
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x98>
 80002b4:	19e4      	adds	r4, r4, r7
 80002b6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002ba:	f080 810a 	bcs.w	80004d2 <__udivmoddi4+0x2a2>
 80002be:	45a1      	cmp	r9, r4
 80002c0:	f240 8107 	bls.w	80004d2 <__udivmoddi4+0x2a2>
 80002c4:	3802      	subs	r0, #2
 80002c6:	443c      	add	r4, r7
 80002c8:	eba4 0409 	sub.w	r4, r4, r9
 80002cc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002d0:	2100      	movs	r1, #0
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d061      	beq.n	800039a <__udivmoddi4+0x16a>
 80002d6:	fa24 f40e 	lsr.w	r4, r4, lr
 80002da:	2300      	movs	r3, #0
 80002dc:	6034      	str	r4, [r6, #0]
 80002de:	6073      	str	r3, [r6, #4]
 80002e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d907      	bls.n	80002f8 <__udivmoddi4+0xc8>
 80002e8:	2e00      	cmp	r6, #0
 80002ea:	d054      	beq.n	8000396 <__udivmoddi4+0x166>
 80002ec:	2100      	movs	r1, #0
 80002ee:	e886 0021 	stmia.w	r6, {r0, r5}
 80002f2:	4608      	mov	r0, r1
 80002f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f8:	fab3 f183 	clz	r1, r3
 80002fc:	2900      	cmp	r1, #0
 80002fe:	f040 808e 	bne.w	800041e <__udivmoddi4+0x1ee>
 8000302:	42ab      	cmp	r3, r5
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xdc>
 8000306:	4282      	cmp	r2, r0
 8000308:	f200 80fa 	bhi.w	8000500 <__udivmoddi4+0x2d0>
 800030c:	1a84      	subs	r4, r0, r2
 800030e:	eb65 0503 	sbc.w	r5, r5, r3
 8000312:	2001      	movs	r0, #1
 8000314:	46ac      	mov	ip, r5
 8000316:	2e00      	cmp	r6, #0
 8000318:	d03f      	beq.n	800039a <__udivmoddi4+0x16a>
 800031a:	e886 1010 	stmia.w	r6, {r4, ip}
 800031e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000322:	b912      	cbnz	r2, 800032a <__udivmoddi4+0xfa>
 8000324:	2701      	movs	r7, #1
 8000326:	fbb7 f7f2 	udiv	r7, r7, r2
 800032a:	fab7 fe87 	clz	lr, r7
 800032e:	f1be 0f00 	cmp.w	lr, #0
 8000332:	d134      	bne.n	800039e <__udivmoddi4+0x16e>
 8000334:	1beb      	subs	r3, r5, r7
 8000336:	0c3a      	lsrs	r2, r7, #16
 8000338:	fa1f fc87 	uxth.w	ip, r7
 800033c:	2101      	movs	r1, #1
 800033e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000342:	0c25      	lsrs	r5, r4, #16
 8000344:	fb02 3318 	mls	r3, r2, r8, r3
 8000348:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800034c:	fb0c f308 	mul.w	r3, ip, r8
 8000350:	42ab      	cmp	r3, r5
 8000352:	d907      	bls.n	8000364 <__udivmoddi4+0x134>
 8000354:	19ed      	adds	r5, r5, r7
 8000356:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x132>
 800035c:	42ab      	cmp	r3, r5
 800035e:	f200 80d1 	bhi.w	8000504 <__udivmoddi4+0x2d4>
 8000362:	4680      	mov	r8, r0
 8000364:	1aed      	subs	r5, r5, r3
 8000366:	b2a3      	uxth	r3, r4
 8000368:	fbb5 f0f2 	udiv	r0, r5, r2
 800036c:	fb02 5510 	mls	r5, r2, r0, r5
 8000370:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000374:	fb0c fc00 	mul.w	ip, ip, r0
 8000378:	45a4      	cmp	ip, r4
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x15c>
 800037c:	19e4      	adds	r4, r4, r7
 800037e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x15a>
 8000384:	45a4      	cmp	ip, r4
 8000386:	f200 80b8 	bhi.w	80004fa <__udivmoddi4+0x2ca>
 800038a:	4618      	mov	r0, r3
 800038c:	eba4 040c 	sub.w	r4, r4, ip
 8000390:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000394:	e79d      	b.n	80002d2 <__udivmoddi4+0xa2>
 8000396:	4631      	mov	r1, r6
 8000398:	4630      	mov	r0, r6
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	f1ce 0420 	rsb	r4, lr, #32
 80003a2:	fa05 f30e 	lsl.w	r3, r5, lr
 80003a6:	fa07 f70e 	lsl.w	r7, r7, lr
 80003aa:	fa20 f804 	lsr.w	r8, r0, r4
 80003ae:	0c3a      	lsrs	r2, r7, #16
 80003b0:	fa25 f404 	lsr.w	r4, r5, r4
 80003b4:	ea48 0803 	orr.w	r8, r8, r3
 80003b8:	fbb4 f1f2 	udiv	r1, r4, r2
 80003bc:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003c0:	fb02 4411 	mls	r4, r2, r1, r4
 80003c4:	fa1f fc87 	uxth.w	ip, r7
 80003c8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003cc:	fb01 f30c 	mul.w	r3, r1, ip
 80003d0:	42ab      	cmp	r3, r5
 80003d2:	fa00 f40e 	lsl.w	r4, r0, lr
 80003d6:	d909      	bls.n	80003ec <__udivmoddi4+0x1bc>
 80003d8:	19ed      	adds	r5, r5, r7
 80003da:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 80003de:	f080 808a 	bcs.w	80004f6 <__udivmoddi4+0x2c6>
 80003e2:	42ab      	cmp	r3, r5
 80003e4:	f240 8087 	bls.w	80004f6 <__udivmoddi4+0x2c6>
 80003e8:	3902      	subs	r1, #2
 80003ea:	443d      	add	r5, r7
 80003ec:	1aeb      	subs	r3, r5, r3
 80003ee:	fa1f f588 	uxth.w	r5, r8
 80003f2:	fbb3 f0f2 	udiv	r0, r3, r2
 80003f6:	fb02 3310 	mls	r3, r2, r0, r3
 80003fa:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003fe:	fb00 f30c 	mul.w	r3, r0, ip
 8000402:	42ab      	cmp	r3, r5
 8000404:	d907      	bls.n	8000416 <__udivmoddi4+0x1e6>
 8000406:	19ed      	adds	r5, r5, r7
 8000408:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800040c:	d26f      	bcs.n	80004ee <__udivmoddi4+0x2be>
 800040e:	42ab      	cmp	r3, r5
 8000410:	d96d      	bls.n	80004ee <__udivmoddi4+0x2be>
 8000412:	3802      	subs	r0, #2
 8000414:	443d      	add	r5, r7
 8000416:	1aeb      	subs	r3, r5, r3
 8000418:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041c:	e78f      	b.n	800033e <__udivmoddi4+0x10e>
 800041e:	f1c1 0720 	rsb	r7, r1, #32
 8000422:	fa22 f807 	lsr.w	r8, r2, r7
 8000426:	408b      	lsls	r3, r1
 8000428:	fa05 f401 	lsl.w	r4, r5, r1
 800042c:	ea48 0303 	orr.w	r3, r8, r3
 8000430:	fa20 fe07 	lsr.w	lr, r0, r7
 8000434:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000438:	40fd      	lsrs	r5, r7
 800043a:	ea4e 0e04 	orr.w	lr, lr, r4
 800043e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000442:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000446:	fb0c 5519 	mls	r5, ip, r9, r5
 800044a:	fa1f f883 	uxth.w	r8, r3
 800044e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000452:	fb09 f408 	mul.w	r4, r9, r8
 8000456:	42ac      	cmp	r4, r5
 8000458:	fa02 f201 	lsl.w	r2, r2, r1
 800045c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000460:	d908      	bls.n	8000474 <__udivmoddi4+0x244>
 8000462:	18ed      	adds	r5, r5, r3
 8000464:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000468:	d243      	bcs.n	80004f2 <__udivmoddi4+0x2c2>
 800046a:	42ac      	cmp	r4, r5
 800046c:	d941      	bls.n	80004f2 <__udivmoddi4+0x2c2>
 800046e:	f1a9 0902 	sub.w	r9, r9, #2
 8000472:	441d      	add	r5, r3
 8000474:	1b2d      	subs	r5, r5, r4
 8000476:	fa1f fe8e 	uxth.w	lr, lr
 800047a:	fbb5 f0fc 	udiv	r0, r5, ip
 800047e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000482:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000486:	fb00 f808 	mul.w	r8, r0, r8
 800048a:	45a0      	cmp	r8, r4
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x26e>
 800048e:	18e4      	adds	r4, r4, r3
 8000490:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000494:	d229      	bcs.n	80004ea <__udivmoddi4+0x2ba>
 8000496:	45a0      	cmp	r8, r4
 8000498:	d927      	bls.n	80004ea <__udivmoddi4+0x2ba>
 800049a:	3802      	subs	r0, #2
 800049c:	441c      	add	r4, r3
 800049e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004a2:	eba4 0408 	sub.w	r4, r4, r8
 80004a6:	fba0 8902 	umull	r8, r9, r0, r2
 80004aa:	454c      	cmp	r4, r9
 80004ac:	46c6      	mov	lr, r8
 80004ae:	464d      	mov	r5, r9
 80004b0:	d315      	bcc.n	80004de <__udivmoddi4+0x2ae>
 80004b2:	d012      	beq.n	80004da <__udivmoddi4+0x2aa>
 80004b4:	b156      	cbz	r6, 80004cc <__udivmoddi4+0x29c>
 80004b6:	ebba 030e 	subs.w	r3, sl, lr
 80004ba:	eb64 0405 	sbc.w	r4, r4, r5
 80004be:	fa04 f707 	lsl.w	r7, r4, r7
 80004c2:	40cb      	lsrs	r3, r1
 80004c4:	431f      	orrs	r7, r3
 80004c6:	40cc      	lsrs	r4, r1
 80004c8:	6037      	str	r7, [r6, #0]
 80004ca:	6074      	str	r4, [r6, #4]
 80004cc:	2100      	movs	r1, #0
 80004ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d2:	4618      	mov	r0, r3
 80004d4:	e6f8      	b.n	80002c8 <__udivmoddi4+0x98>
 80004d6:	4690      	mov	r8, r2
 80004d8:	e6e0      	b.n	800029c <__udivmoddi4+0x6c>
 80004da:	45c2      	cmp	sl, r8
 80004dc:	d2ea      	bcs.n	80004b4 <__udivmoddi4+0x284>
 80004de:	ebb8 0e02 	subs.w	lr, r8, r2
 80004e2:	eb69 0503 	sbc.w	r5, r9, r3
 80004e6:	3801      	subs	r0, #1
 80004e8:	e7e4      	b.n	80004b4 <__udivmoddi4+0x284>
 80004ea:	4628      	mov	r0, r5
 80004ec:	e7d7      	b.n	800049e <__udivmoddi4+0x26e>
 80004ee:	4640      	mov	r0, r8
 80004f0:	e791      	b.n	8000416 <__udivmoddi4+0x1e6>
 80004f2:	4681      	mov	r9, r0
 80004f4:	e7be      	b.n	8000474 <__udivmoddi4+0x244>
 80004f6:	4601      	mov	r1, r0
 80004f8:	e778      	b.n	80003ec <__udivmoddi4+0x1bc>
 80004fa:	3802      	subs	r0, #2
 80004fc:	443c      	add	r4, r7
 80004fe:	e745      	b.n	800038c <__udivmoddi4+0x15c>
 8000500:	4608      	mov	r0, r1
 8000502:	e708      	b.n	8000316 <__udivmoddi4+0xe6>
 8000504:	f1a8 0802 	sub.w	r8, r8, #2
 8000508:	443d      	add	r5, r7
 800050a:	e72b      	b.n	8000364 <__udivmoddi4+0x134>

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000510:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000512:	4b0b      	ldr	r3, [pc, #44]	; (8000540 <HAL_Init+0x30>)
 8000514:	681a      	ldr	r2, [r3, #0]
 8000516:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800051a:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800051c:	681a      	ldr	r2, [r3, #0]
 800051e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000522:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000524:	681a      	ldr	r2, [r3, #0]
 8000526:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800052a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800052c:	2003      	movs	r0, #3
 800052e:	f000 f82f 	bl	8000590 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000532:	2000      	movs	r0, #0
 8000534:	f002 fec2 	bl	80032bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000538:	f002 fe9e 	bl	8003278 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 800053c:	2000      	movs	r0, #0
 800053e:	bd08      	pop	{r3, pc}
 8000540:	40023c00 	.word	0x40023c00

08000544 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000544:	4a03      	ldr	r2, [pc, #12]	; (8000554 <HAL_IncTick+0x10>)
 8000546:	6811      	ldr	r1, [r2, #0]
 8000548:	4b03      	ldr	r3, [pc, #12]	; (8000558 <HAL_IncTick+0x14>)
 800054a:	781b      	ldrb	r3, [r3, #0]
 800054c:	440b      	add	r3, r1
 800054e:	6013      	str	r3, [r2, #0]
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop
 8000554:	20003fc4 	.word	0x20003fc4
 8000558:	20000000 	.word	0x20000000

0800055c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800055c:	4b01      	ldr	r3, [pc, #4]	; (8000564 <HAL_GetTick+0x8>)
 800055e:	6818      	ldr	r0, [r3, #0]
}
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop
 8000564:	20003fc4 	.word	0x20003fc4

08000568 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000568:	b538      	push	{r3, r4, r5, lr}
 800056a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800056c:	f7ff fff6 	bl	800055c <HAL_GetTick>
 8000570:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000572:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8000576:	d002      	beq.n	800057e <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8000578:	4b04      	ldr	r3, [pc, #16]	; (800058c <HAL_Delay+0x24>)
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800057e:	f7ff ffed 	bl	800055c <HAL_GetTick>
 8000582:	1b40      	subs	r0, r0, r5
 8000584:	4284      	cmp	r4, r0
 8000586:	d8fa      	bhi.n	800057e <HAL_Delay+0x16>
  {
  }
}
 8000588:	bd38      	pop	{r3, r4, r5, pc}
 800058a:	bf00      	nop
 800058c:	20000000 	.word	0x20000000

08000590 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000590:	4a07      	ldr	r2, [pc, #28]	; (80005b0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000592:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000594:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000598:	041b      	lsls	r3, r3, #16
 800059a:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800059c:	0200      	lsls	r0, r0, #8
 800059e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005a2:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 80005a4:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 80005a8:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80005ac:	60d0      	str	r0, [r2, #12]
 80005ae:	4770      	bx	lr
 80005b0:	e000ed00 	.word	0xe000ed00

080005b4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80005b4:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005b6:	4b16      	ldr	r3, [pc, #88]	; (8000610 <HAL_NVIC_SetPriority+0x5c>)
 80005b8:	68db      	ldr	r3, [r3, #12]
 80005ba:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005be:	f1c3 0407 	rsb	r4, r3, #7
 80005c2:	2c04      	cmp	r4, #4
 80005c4:	bf28      	it	cs
 80005c6:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005c8:	1d1d      	adds	r5, r3, #4
 80005ca:	2d06      	cmp	r5, #6
 80005cc:	d917      	bls.n	80005fe <HAL_NVIC_SetPriority+0x4a>
 80005ce:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005d0:	2501      	movs	r5, #1
 80005d2:	fa05 f404 	lsl.w	r4, r5, r4
 80005d6:	3c01      	subs	r4, #1
 80005d8:	4021      	ands	r1, r4
 80005da:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005dc:	fa05 f303 	lsl.w	r3, r5, r3
 80005e0:	3b01      	subs	r3, #1
 80005e2:	4013      	ands	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005e4:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80005e6:	2800      	cmp	r0, #0
 80005e8:	db0b      	blt.n	8000602 <HAL_NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005ea:	0109      	lsls	r1, r1, #4
 80005ec:	b2c9      	uxtb	r1, r1
 80005ee:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80005f2:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80005f6:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80005fa:	bc30      	pop	{r4, r5}
 80005fc:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005fe:	2300      	movs	r3, #0
 8000600:	e7e6      	b.n	80005d0 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000602:	f000 000f 	and.w	r0, r0, #15
 8000606:	0109      	lsls	r1, r1, #4
 8000608:	b2c9      	uxtb	r1, r1
 800060a:	4b02      	ldr	r3, [pc, #8]	; (8000614 <HAL_NVIC_SetPriority+0x60>)
 800060c:	5419      	strb	r1, [r3, r0]
 800060e:	e7f4      	b.n	80005fa <HAL_NVIC_SetPriority+0x46>
 8000610:	e000ed00 	.word	0xe000ed00
 8000614:	e000ed14 	.word	0xe000ed14

08000618 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000618:	2800      	cmp	r0, #0
 800061a:	db08      	blt.n	800062e <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800061c:	0942      	lsrs	r2, r0, #5
 800061e:	f000 001f 	and.w	r0, r0, #31
 8000622:	2301      	movs	r3, #1
 8000624:	fa03 f000 	lsl.w	r0, r3, r0
 8000628:	4b01      	ldr	r3, [pc, #4]	; (8000630 <HAL_NVIC_EnableIRQ+0x18>)
 800062a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800062e:	4770      	bx	lr
 8000630:	e000e100 	.word	0xe000e100

08000634 <ETH_MACAddressConfig>:

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8000634:	7950      	ldrb	r0, [r2, #5]
 8000636:	7913      	ldrb	r3, [r2, #4]
 8000638:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800063c:	4807      	ldr	r0, [pc, #28]	; (800065c <ETH_MACAddressConfig+0x28>)
 800063e:	500b      	str	r3, [r1, r0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8000640:	78d0      	ldrb	r0, [r2, #3]
 8000642:	7893      	ldrb	r3, [r2, #2]
 8000644:	041b      	lsls	r3, r3, #16
 8000646:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800064a:	7850      	ldrb	r0, [r2, #1]
 800064c:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8000650:	7812      	ldrb	r2, [r2, #0]
 8000652:	4313      	orrs	r3, r2
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8000654:	4a02      	ldr	r2, [pc, #8]	; (8000660 <ETH_MACAddressConfig+0x2c>)
 8000656:	508b      	str	r3, [r1, r2]
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop
 800065c:	40028040 	.word	0x40028040
 8000660:	40028044 	.word	0x40028044

08000664 <ETH_MACDMAConfig>:
{
 8000664:	b570      	push	{r4, r5, r6, lr}
 8000666:	b09e      	sub	sp, #120	; 0x78
 8000668:	4604      	mov	r4, r0
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 800066a:	b129      	cbz	r1, 8000678 <ETH_MACDMAConfig+0x14>
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 800066c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000670:	60c3      	str	r3, [r0, #12]
    (heth->Init).Speed = ETH_SPEED_100M;
 8000672:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000676:	6083      	str	r3, [r0, #8]
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8000678:	69e3      	ldr	r3, [r4, #28]
 800067a:	2b00      	cmp	r3, #0
 800067c:	d16a      	bne.n	8000754 <ETH_MACDMAConfig+0xf0>
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 800067e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000682:	9307      	str	r3, [sp, #28]
  tmpreg1 = (heth->Instance)->MACCR;
 8000684:	6821      	ldr	r1, [r4, #0]
 8000686:	680b      	ldr	r3, [r1, #0]
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8000688:	4a39      	ldr	r2, [pc, #228]	; (8000770 <ETH_MACDMAConfig+0x10c>)
 800068a:	401a      	ands	r2, r3
                       (heth->Init).Speed | 
 800068c:	68a3      	ldr	r3, [r4, #8]
                       (heth->Init).DuplexMode | 
 800068e:	68e0      	ldr	r0, [r4, #12]
                       macinit.LoopbackMode |
 8000690:	4303      	orrs	r3, r0
                       macinit.ChecksumOffload |    
 8000692:	9807      	ldr	r0, [sp, #28]
                       (heth->Init).DuplexMode | 
 8000694:	4303      	orrs	r3, r0
                       macinit.ChecksumOffload |    
 8000696:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 800069a:	4313      	orrs	r3, r2
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800069c:	600b      	str	r3, [r1, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 800069e:	6823      	ldr	r3, [r4, #0]
 80006a0:	681d      	ldr	r5, [r3, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80006a2:	2001      	movs	r0, #1
 80006a4:	f7ff ff60 	bl	8000568 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 80006a8:	6823      	ldr	r3, [r4, #0]
 80006aa:	601d      	str	r5, [r3, #0]
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80006ac:	6823      	ldr	r3, [r4, #0]
 80006ae:	2240      	movs	r2, #64	; 0x40
 80006b0:	605a      	str	r2, [r3, #4]
   tmpreg1 = (heth->Instance)->MACFFR;
 80006b2:	6823      	ldr	r3, [r4, #0]
 80006b4:	685d      	ldr	r5, [r3, #4]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80006b6:	2001      	movs	r0, #1
 80006b8:	f7ff ff56 	bl	8000568 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 80006bc:	6823      	ldr	r3, [r4, #0]
 80006be:	605d      	str	r5, [r3, #4]
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80006c0:	6823      	ldr	r3, [r4, #0]
 80006c2:	2500      	movs	r5, #0
 80006c4:	609d      	str	r5, [r3, #8]
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 80006c6:	6823      	ldr	r3, [r4, #0]
 80006c8:	60dd      	str	r5, [r3, #12]
   tmpreg1 = (heth->Instance)->MACFCR;
 80006ca:	6822      	ldr	r2, [r4, #0]
 80006cc:	6993      	ldr	r3, [r2, #24]
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80006ce:	f023 03be 	bic.w	r3, r3, #190	; 0xbe
 80006d2:	041b      	lsls	r3, r3, #16
 80006d4:	0c1b      	lsrs	r3, r3, #16
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80006d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80006da:	6193      	str	r3, [r2, #24]
   tmpreg1 = (heth->Instance)->MACFCR;
 80006dc:	6823      	ldr	r3, [r4, #0]
 80006de:	699e      	ldr	r6, [r3, #24]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80006e0:	2001      	movs	r0, #1
 80006e2:	f7ff ff41 	bl	8000568 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 80006e6:	6823      	ldr	r3, [r4, #0]
 80006e8:	619e      	str	r6, [r3, #24]
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80006ea:	6823      	ldr	r3, [r4, #0]
 80006ec:	61dd      	str	r5, [r3, #28]
    tmpreg1 = (heth->Instance)->MACVLANTR;
 80006ee:	6823      	ldr	r3, [r4, #0]
 80006f0:	69dd      	ldr	r5, [r3, #28]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80006f2:	2001      	movs	r0, #1
 80006f4:	f7ff ff38 	bl	8000568 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 80006f8:	6823      	ldr	r3, [r4, #0]
 80006fa:	61dd      	str	r5, [r3, #28]
    tmpreg1 = (heth->Instance)->DMAOMR;
 80006fc:	6822      	ldr	r2, [r4, #0]
 80006fe:	f241 0518 	movw	r5, #4120	; 0x1018
 8000702:	5951      	ldr	r1, [r2, r5]
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8000704:	4b1b      	ldr	r3, [pc, #108]	; (8000774 <ETH_MACDMAConfig+0x110>)
 8000706:	400b      	ands	r3, r1
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8000708:	f043 7308 	orr.w	r3, r3, #35651584	; 0x2200000
 800070c:	f043 0304 	orr.w	r3, r3, #4
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8000710:	5153      	str	r3, [r2, r5]
    tmpreg1 = (heth->Instance)->DMAOMR;
 8000712:	6823      	ldr	r3, [r4, #0]
 8000714:	595e      	ldr	r6, [r3, r5]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8000716:	2001      	movs	r0, #1
 8000718:	f7ff ff26 	bl	8000568 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 800071c:	6823      	ldr	r3, [r4, #0]
 800071e:	515e      	str	r6, [r3, r5]
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8000720:	6823      	ldr	r3, [r4, #0]
 8000722:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000726:	4a14      	ldr	r2, [pc, #80]	; (8000778 <ETH_MACDMAConfig+0x114>)
 8000728:	601a      	str	r2, [r3, #0]
     tmpreg1 = (heth->Instance)->DMABMR;
 800072a:	6823      	ldr	r3, [r4, #0]
 800072c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000730:	681d      	ldr	r5, [r3, #0]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8000732:	2001      	movs	r0, #1
 8000734:	f7ff ff18 	bl	8000568 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8000738:	6823      	ldr	r3, [r4, #0]
 800073a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800073e:	601d      	str	r5, [r3, #0]
     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8000740:	69a3      	ldr	r3, [r4, #24]
 8000742:	2b01      	cmp	r3, #1
 8000744:	d009      	beq.n	800075a <ETH_MACDMAConfig+0xf6>
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8000746:	6962      	ldr	r2, [r4, #20]
 8000748:	2100      	movs	r1, #0
 800074a:	4620      	mov	r0, r4
 800074c:	f7ff ff72 	bl	8000634 <ETH_MACAddressConfig>
}
 8000750:	b01e      	add	sp, #120	; 0x78
 8000752:	bd70      	pop	{r4, r5, r6, pc}
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8000754:	2300      	movs	r3, #0
 8000756:	9307      	str	r3, [sp, #28]
 8000758:	e794      	b.n	8000684 <ETH_MACDMAConfig+0x20>
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 800075a:	6821      	ldr	r1, [r4, #0]
 800075c:	f241 021c 	movw	r2, #4124	; 0x101c
 8000760:	588b      	ldr	r3, [r1, r2]
 8000762:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000766:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800076a:	508b      	str	r3, [r1, r2]
 800076c:	e7eb      	b.n	8000746 <ETH_MACDMAConfig+0xe2>
 800076e:	bf00      	nop
 8000770:	ff20810f 	.word	0xff20810f
 8000774:	f8de3f23 	.word	0xf8de3f23
 8000778:	02c12080 	.word	0x02c12080

0800077c <HAL_ETH_ReadPHYRegister>:
{
 800077c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 800077e:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8000782:	b2db      	uxtb	r3, r3
 8000784:	2b82      	cmp	r3, #130	; 0x82
 8000786:	d101      	bne.n	800078c <HAL_ETH_ReadPHYRegister+0x10>
    return HAL_BUSY;
 8000788:	2002      	movs	r0, #2
}
 800078a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800078c:	4616      	mov	r6, r2
 800078e:	4605      	mov	r5, r0
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8000790:	2382      	movs	r3, #130	; 0x82
 8000792:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg1 = heth->Instance->MACMIIAR;
 8000796:	6802      	ldr	r2, [r0, #0]
 8000798:	6914      	ldr	r4, [r2, #16]
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800079a:	f004 041c 	and.w	r4, r4, #28
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800079e:	8a03      	ldrh	r3, [r0, #16]
 80007a0:	02db      	lsls	r3, r3, #11
 80007a2:	b29b      	uxth	r3, r3
 80007a4:	431c      	orrs	r4, r3
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80007a6:	0189      	lsls	r1, r1, #6
 80007a8:	f401 61f8 	and.w	r1, r1, #1984	; 0x7c0
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 80007ac:	430c      	orrs	r4, r1
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 80007ae:	f044 0401 	orr.w	r4, r4, #1
  heth->Instance->MACMIIAR = tmpreg1;
 80007b2:	6114      	str	r4, [r2, #16]
  tickstart = HAL_GetTick();
 80007b4:	f7ff fed2 	bl	800055c <HAL_GetTick>
 80007b8:	4607      	mov	r7, r0
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80007ba:	f014 0f01 	tst.w	r4, #1
 80007be:	d010      	beq.n	80007e2 <HAL_ETH_ReadPHYRegister+0x66>
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 80007c0:	f7ff fecc 	bl	800055c <HAL_GetTick>
 80007c4:	1bc0      	subs	r0, r0, r7
 80007c6:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 80007ca:	d202      	bcs.n	80007d2 <HAL_ETH_ReadPHYRegister+0x56>
    tmpreg1 = heth->Instance->MACMIIAR;
 80007cc:	682b      	ldr	r3, [r5, #0]
 80007ce:	691c      	ldr	r4, [r3, #16]
 80007d0:	e7f3      	b.n	80007ba <HAL_ETH_ReadPHYRegister+0x3e>
      heth->State= HAL_ETH_STATE_READY;
 80007d2:	2301      	movs	r3, #1
 80007d4:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 80007d8:	2300      	movs	r3, #0
 80007da:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
      return HAL_TIMEOUT;
 80007de:	2003      	movs	r0, #3
 80007e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80007e2:	682b      	ldr	r3, [r5, #0]
 80007e4:	695b      	ldr	r3, [r3, #20]
 80007e6:	b29b      	uxth	r3, r3
 80007e8:	6033      	str	r3, [r6, #0]
  heth->State = HAL_ETH_STATE_READY;
 80007ea:	2301      	movs	r3, #1
 80007ec:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
  return HAL_OK;
 80007f0:	2000      	movs	r0, #0
 80007f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080007f4 <HAL_ETH_WritePHYRegister>:
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 80007f4:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 80007f8:	b2db      	uxtb	r3, r3
 80007fa:	2b42      	cmp	r3, #66	; 0x42
 80007fc:	d101      	bne.n	8000802 <HAL_ETH_WritePHYRegister+0xe>
    return HAL_BUSY;
 80007fe:	2002      	movs	r0, #2
 8000800:	4770      	bx	lr
{
 8000802:	b570      	push	{r4, r5, r6, lr}
 8000804:	4605      	mov	r5, r0
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8000806:	2342      	movs	r3, #66	; 0x42
 8000808:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg1 = heth->Instance->MACMIIAR;
 800080c:	6800      	ldr	r0, [r0, #0]
 800080e:	6904      	ldr	r4, [r0, #16]
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8000810:	f004 041c 	and.w	r4, r4, #28
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8000814:	8a2b      	ldrh	r3, [r5, #16]
 8000816:	02db      	lsls	r3, r3, #11
 8000818:	b29b      	uxth	r3, r3
 800081a:	431c      	orrs	r4, r3
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 800081c:	0189      	lsls	r1, r1, #6
 800081e:	f401 61f8 	and.w	r1, r1, #1984	; 0x7c0
 8000822:	430c      	orrs	r4, r1
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8000824:	f044 0403 	orr.w	r4, r4, #3
 8000828:	b292      	uxth	r2, r2
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800082a:	6142      	str	r2, [r0, #20]
  heth->Instance->MACMIIAR = tmpreg1;
 800082c:	682b      	ldr	r3, [r5, #0]
 800082e:	611c      	str	r4, [r3, #16]
  tickstart = HAL_GetTick();
 8000830:	f7ff fe94 	bl	800055c <HAL_GetTick>
 8000834:	4606      	mov	r6, r0
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8000836:	f014 0f01 	tst.w	r4, #1
 800083a:	d010      	beq.n	800085e <HAL_ETH_WritePHYRegister+0x6a>
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 800083c:	f7ff fe8e 	bl	800055c <HAL_GetTick>
 8000840:	1b80      	subs	r0, r0, r6
 8000842:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8000846:	d202      	bcs.n	800084e <HAL_ETH_WritePHYRegister+0x5a>
    tmpreg1 = heth->Instance->MACMIIAR;
 8000848:	682b      	ldr	r3, [r5, #0]
 800084a:	691c      	ldr	r4, [r3, #16]
 800084c:	e7f3      	b.n	8000836 <HAL_ETH_WritePHYRegister+0x42>
      heth->State= HAL_ETH_STATE_READY;
 800084e:	2301      	movs	r3, #1
 8000850:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8000854:	2300      	movs	r3, #0
 8000856:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
      return HAL_TIMEOUT;
 800085a:	2003      	movs	r0, #3
 800085c:	bd70      	pop	{r4, r5, r6, pc}
  heth->State = HAL_ETH_STATE_READY;
 800085e:	2301      	movs	r3, #1
 8000860:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
  return HAL_OK; 
 8000864:	2000      	movs	r0, #0
 8000866:	bd70      	pop	{r4, r5, r6, pc}

08000868 <HAL_ETH_Init>:
{
 8000868:	b570      	push	{r4, r5, r6, lr}
 800086a:	b082      	sub	sp, #8
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 800086c:	2300      	movs	r3, #0
 800086e:	9301      	str	r3, [sp, #4]
  if(heth == NULL)
 8000870:	2800      	cmp	r0, #0
 8000872:	f000 810e 	beq.w	8000a92 <HAL_ETH_Init+0x22a>
 8000876:	4604      	mov	r4, r0
  if(heth->State == HAL_ETH_STATE_RESET)
 8000878:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 800087c:	2b00      	cmp	r3, #0
 800087e:	d034      	beq.n	80008ea <HAL_ETH_Init+0x82>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000880:	2300      	movs	r3, #0
 8000882:	9300      	str	r3, [sp, #0]
 8000884:	4b84      	ldr	r3, [pc, #528]	; (8000a98 <HAL_ETH_Init+0x230>)
 8000886:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000888:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800088c:	645a      	str	r2, [r3, #68]	; 0x44
 800088e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000890:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000894:	9300      	str	r3, [sp, #0]
 8000896:	9b00      	ldr	r3, [sp, #0]
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8000898:	4b80      	ldr	r3, [pc, #512]	; (8000a9c <HAL_ETH_Init+0x234>)
 800089a:	685a      	ldr	r2, [r3, #4]
 800089c:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80008a0:	605a      	str	r2, [r3, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80008a2:	685a      	ldr	r2, [r3, #4]
 80008a4:	6a21      	ldr	r1, [r4, #32]
 80008a6:	430a      	orrs	r2, r1
 80008a8:	605a      	str	r2, [r3, #4]
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 80008aa:	6823      	ldr	r3, [r4, #0]
 80008ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008b0:	681a      	ldr	r2, [r3, #0]
 80008b2:	f042 0201 	orr.w	r2, r2, #1
 80008b6:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 80008b8:	f7ff fe50 	bl	800055c <HAL_GetTick>
 80008bc:	4605      	mov	r5, r0
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80008be:	6823      	ldr	r3, [r4, #0]
 80008c0:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 80008c4:	6812      	ldr	r2, [r2, #0]
 80008c6:	f012 0f01 	tst.w	r2, #1
 80008ca:	d013      	beq.n	80008f4 <HAL_ETH_Init+0x8c>
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 80008cc:	f7ff fe46 	bl	800055c <HAL_GetTick>
 80008d0:	1b40      	subs	r0, r0, r5
 80008d2:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 80008d6:	d9f2      	bls.n	80008be <HAL_ETH_Init+0x56>
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80008d8:	2503      	movs	r5, #3
 80008da:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 80008de:	2300      	movs	r3, #0
 80008e0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 80008e4:	4628      	mov	r0, r5
 80008e6:	b002      	add	sp, #8
 80008e8:	bd70      	pop	{r4, r5, r6, pc}
    heth->Lock = HAL_UNLOCKED;
 80008ea:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
    HAL_ETH_MspInit(heth);
 80008ee:	f002 fa8f 	bl	8002e10 <HAL_ETH_MspInit>
 80008f2:	e7c5      	b.n	8000880 <HAL_ETH_Init+0x18>
  tmpreg1 = (heth->Instance)->MACMIIAR;
 80008f4:	691d      	ldr	r5, [r3, #16]
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 80008f6:	f025 051c 	bic.w	r5, r5, #28
  hclk = HAL_RCC_GetHCLKFreq();
 80008fa:	f000 fd4d 	bl	8001398 <HAL_RCC_GetHCLKFreq>
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80008fe:	4b68      	ldr	r3, [pc, #416]	; (8000aa0 <HAL_ETH_Init+0x238>)
 8000900:	4403      	add	r3, r0
 8000902:	4a68      	ldr	r2, [pc, #416]	; (8000aa4 <HAL_ETH_Init+0x23c>)
 8000904:	4293      	cmp	r3, r2
 8000906:	d855      	bhi.n	80009b4 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8000908:	f045 0508 	orr.w	r5, r5, #8
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 800090c:	6823      	ldr	r3, [r4, #0]
 800090e:	611d      	str	r5, [r3, #16]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8000910:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000914:	2100      	movs	r1, #0
 8000916:	4620      	mov	r0, r4
 8000918:	f7ff ff6c 	bl	80007f4 <HAL_ETH_WritePHYRegister>
 800091c:	4605      	mov	r5, r0
 800091e:	2800      	cmp	r0, #0
 8000920:	d160      	bne.n	80009e4 <HAL_ETH_Init+0x17c>
  HAL_Delay(PHY_RESET_DELAY);
 8000922:	20ff      	movs	r0, #255	; 0xff
 8000924:	f7ff fe20 	bl	8000568 <HAL_Delay>
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8000928:	6863      	ldr	r3, [r4, #4]
 800092a:	2b00      	cmp	r3, #0
 800092c:	f000 8091 	beq.w	8000a52 <HAL_ETH_Init+0x1ea>
    tickstart = HAL_GetTick();
 8000930:	f7ff fe14 	bl	800055c <HAL_GetTick>
 8000934:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000936:	aa01      	add	r2, sp, #4
 8000938:	2101      	movs	r1, #1
 800093a:	4620      	mov	r0, r4
 800093c:	f7ff ff1e 	bl	800077c <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8000940:	f7ff fe0c 	bl	800055c <HAL_GetTick>
 8000944:	1b80      	subs	r0, r0, r6
 8000946:	f241 3388 	movw	r3, #5000	; 0x1388
 800094a:	4298      	cmp	r0, r3
 800094c:	d852      	bhi.n	80009f4 <HAL_ETH_Init+0x18c>
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 800094e:	9b01      	ldr	r3, [sp, #4]
 8000950:	f013 0f04 	tst.w	r3, #4
 8000954:	d0ef      	beq.n	8000936 <HAL_ETH_Init+0xce>
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8000956:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800095a:	2100      	movs	r1, #0
 800095c:	4620      	mov	r0, r4
 800095e:	f7ff ff49 	bl	80007f4 <HAL_ETH_WritePHYRegister>
 8000962:	2800      	cmp	r0, #0
 8000964:	d152      	bne.n	8000a0c <HAL_ETH_Init+0x1a4>
    tickstart = HAL_GetTick();
 8000966:	f7ff fdf9 	bl	800055c <HAL_GetTick>
 800096a:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800096c:	aa01      	add	r2, sp, #4
 800096e:	2101      	movs	r1, #1
 8000970:	4620      	mov	r0, r4
 8000972:	f7ff ff03 	bl	800077c <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8000976:	f7ff fdf1 	bl	800055c <HAL_GetTick>
 800097a:	1b80      	subs	r0, r0, r6
 800097c:	f241 3388 	movw	r3, #5000	; 0x1388
 8000980:	4298      	cmp	r0, r3
 8000982:	d84b      	bhi.n	8000a1c <HAL_ETH_Init+0x1b4>
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8000984:	9b01      	ldr	r3, [sp, #4]
 8000986:	f013 0f20 	tst.w	r3, #32
 800098a:	d0ef      	beq.n	800096c <HAL_ETH_Init+0x104>
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 800098c:	aa01      	add	r2, sp, #4
 800098e:	211f      	movs	r1, #31
 8000990:	4620      	mov	r0, r4
 8000992:	f7ff fef3 	bl	800077c <HAL_ETH_ReadPHYRegister>
 8000996:	2800      	cmp	r0, #0
 8000998:	d14c      	bne.n	8000a34 <HAL_ETH_Init+0x1cc>
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800099a:	9b01      	ldr	r3, [sp, #4]
 800099c:	f013 0f10 	tst.w	r3, #16
 80009a0:	d050      	beq.n	8000a44 <HAL_ETH_Init+0x1dc>
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 80009a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80009a6:	60e2      	str	r2, [r4, #12]
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 80009a8:	f013 0f04 	tst.w	r3, #4
 80009ac:	d04d      	beq.n	8000a4a <HAL_ETH_Init+0x1e2>
      (heth->Init).Speed = ETH_SPEED_10M; 
 80009ae:	2300      	movs	r3, #0
 80009b0:	60a3      	str	r3, [r4, #8]
 80009b2:	e05e      	b.n	8000a72 <HAL_ETH_Init+0x20a>
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80009b4:	4b3c      	ldr	r3, [pc, #240]	; (8000aa8 <HAL_ETH_Init+0x240>)
 80009b6:	4403      	add	r3, r0
 80009b8:	4a3c      	ldr	r2, [pc, #240]	; (8000aac <HAL_ETH_Init+0x244>)
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d802      	bhi.n	80009c4 <HAL_ETH_Init+0x15c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80009be:	f045 050c 	orr.w	r5, r5, #12
 80009c2:	e7a3      	b.n	800090c <HAL_ETH_Init+0xa4>
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80009c4:	4b3a      	ldr	r3, [pc, #232]	; (8000ab0 <HAL_ETH_Init+0x248>)
 80009c6:	4403      	add	r3, r0
 80009c8:	4a3a      	ldr	r2, [pc, #232]	; (8000ab4 <HAL_ETH_Init+0x24c>)
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d99e      	bls.n	800090c <HAL_ETH_Init+0xa4>
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80009ce:	4b3a      	ldr	r3, [pc, #232]	; (8000ab8 <HAL_ETH_Init+0x250>)
 80009d0:	4403      	add	r3, r0
 80009d2:	4a3a      	ldr	r2, [pc, #232]	; (8000abc <HAL_ETH_Init+0x254>)
 80009d4:	4293      	cmp	r3, r2
 80009d6:	d802      	bhi.n	80009de <HAL_ETH_Init+0x176>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80009d8:	f045 0504 	orr.w	r5, r5, #4
 80009dc:	e796      	b.n	800090c <HAL_ETH_Init+0xa4>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 80009de:	f045 0510 	orr.w	r5, r5, #16
 80009e2:	e793      	b.n	800090c <HAL_ETH_Init+0xa4>
    ETH_MACDMAConfig(heth, err);
 80009e4:	2101      	movs	r1, #1
 80009e6:	4620      	mov	r0, r4
 80009e8:	f7ff fe3c 	bl	8000664 <ETH_MACDMAConfig>
    heth->State = HAL_ETH_STATE_READY;
 80009ec:	2501      	movs	r5, #1
 80009ee:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
    return HAL_ERROR;
 80009f2:	e777      	b.n	80008e4 <HAL_ETH_Init+0x7c>
        ETH_MACDMAConfig(heth, err);
 80009f4:	2101      	movs	r1, #1
 80009f6:	4620      	mov	r0, r4
 80009f8:	f7ff fe34 	bl	8000664 <ETH_MACDMAConfig>
        heth->State= HAL_ETH_STATE_READY;
 80009fc:	2301      	movs	r3, #1
 80009fe:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(heth);
 8000a02:	2300      	movs	r3, #0
 8000a04:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
        return HAL_TIMEOUT;
 8000a08:	2503      	movs	r5, #3
 8000a0a:	e76b      	b.n	80008e4 <HAL_ETH_Init+0x7c>
      ETH_MACDMAConfig(heth, err);
 8000a0c:	2101      	movs	r1, #1
 8000a0e:	4620      	mov	r0, r4
 8000a10:	f7ff fe28 	bl	8000664 <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 8000a14:	2501      	movs	r5, #1
 8000a16:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      return HAL_ERROR;   
 8000a1a:	e763      	b.n	80008e4 <HAL_ETH_Init+0x7c>
        ETH_MACDMAConfig(heth, err);
 8000a1c:	2101      	movs	r1, #1
 8000a1e:	4620      	mov	r0, r4
 8000a20:	f7ff fe20 	bl	8000664 <ETH_MACDMAConfig>
        heth->State= HAL_ETH_STATE_READY;
 8000a24:	2301      	movs	r3, #1
 8000a26:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(heth);
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
        return HAL_TIMEOUT;
 8000a30:	2503      	movs	r5, #3
 8000a32:	e757      	b.n	80008e4 <HAL_ETH_Init+0x7c>
      ETH_MACDMAConfig(heth, err);
 8000a34:	2101      	movs	r1, #1
 8000a36:	4620      	mov	r0, r4
 8000a38:	f7ff fe14 	bl	8000664 <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 8000a3c:	2501      	movs	r5, #1
 8000a3e:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      return HAL_ERROR;   
 8000a42:	e74f      	b.n	80008e4 <HAL_ETH_Init+0x7c>
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8000a44:	2200      	movs	r2, #0
 8000a46:	60e2      	str	r2, [r4, #12]
 8000a48:	e7ae      	b.n	80009a8 <HAL_ETH_Init+0x140>
      (heth->Init).Speed = ETH_SPEED_100M;
 8000a4a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000a4e:	60a3      	str	r3, [r4, #8]
 8000a50:	e00f      	b.n	8000a72 <HAL_ETH_Init+0x20a>
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8000a52:	68e3      	ldr	r3, [r4, #12]
 8000a54:	f3c3 02cf 	ubfx	r2, r3, #3, #16
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8000a58:	68a3      	ldr	r3, [r4, #8]
 8000a5a:	f3c3 034f 	ubfx	r3, r3, #1, #16
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8000a5e:	431a      	orrs	r2, r3
 8000a60:	2100      	movs	r1, #0
 8000a62:	4620      	mov	r0, r4
 8000a64:	f7ff fec6 	bl	80007f4 <HAL_ETH_WritePHYRegister>
 8000a68:	b958      	cbnz	r0, 8000a82 <HAL_ETH_Init+0x21a>
    HAL_Delay(PHY_CONFIG_DELAY);
 8000a6a:	f640 70ff 	movw	r0, #4095	; 0xfff
 8000a6e:	f7ff fd7b 	bl	8000568 <HAL_Delay>
  ETH_MACDMAConfig(heth, err);
 8000a72:	2100      	movs	r1, #0
 8000a74:	4620      	mov	r0, r4
 8000a76:	f7ff fdf5 	bl	8000664 <ETH_MACDMAConfig>
  heth->State= HAL_ETH_STATE_READY;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  return HAL_OK;
 8000a80:	e730      	b.n	80008e4 <HAL_ETH_Init+0x7c>
      ETH_MACDMAConfig(heth, err);
 8000a82:	2101      	movs	r1, #1
 8000a84:	4620      	mov	r0, r4
 8000a86:	f7ff fded 	bl	8000664 <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 8000a8a:	2501      	movs	r5, #1
 8000a8c:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      return HAL_ERROR;
 8000a90:	e728      	b.n	80008e4 <HAL_ETH_Init+0x7c>
    return HAL_ERROR;
 8000a92:	2501      	movs	r5, #1
 8000a94:	e726      	b.n	80008e4 <HAL_ETH_Init+0x7c>
 8000a96:	bf00      	nop
 8000a98:	40023800 	.word	0x40023800
 8000a9c:	40013800 	.word	0x40013800
 8000aa0:	feced300 	.word	0xfeced300
 8000aa4:	00e4e1bf 	.word	0x00e4e1bf
 8000aa8:	fde9f140 	.word	0xfde9f140
 8000aac:	017d783f 	.word	0x017d783f
 8000ab0:	fc6c7900 	.word	0xfc6c7900
 8000ab4:	026259ff 	.word	0x026259ff
 8000ab8:	fa0a1f00 	.word	0xfa0a1f00
 8000abc:	02faf07f 	.word	0x02faf07f

08000ac0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ac0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ac2:	b083      	sub	sp, #12
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ac4:	2400      	movs	r4, #0
 8000ac6:	e04b      	b.n	8000b60 <HAL_GPIO_Init+0xa0>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ac8:	ea4f 0ed4 	mov.w	lr, r4, lsr #3
 8000acc:	f10e 0e08 	add.w	lr, lr, #8
 8000ad0:	f850 202e 	ldr.w	r2, [r0, lr, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ad4:	f004 0607 	and.w	r6, r4, #7
 8000ad8:	00b6      	lsls	r6, r6, #2
 8000ada:	270f      	movs	r7, #15
 8000adc:	40b7      	lsls	r7, r6
 8000ade:	ea22 0207 	bic.w	r2, r2, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ae2:	690f      	ldr	r7, [r1, #16]
 8000ae4:	fa07 f606 	lsl.w	r6, r7, r6
 8000ae8:	4332      	orrs	r2, r6
        GPIOx->AFR[position >> 3U] = temp;
 8000aea:	f840 202e 	str.w	r2, [r0, lr, lsl #2]
 8000aee:	e046      	b.n	8000b7e <HAL_GPIO_Init+0xbe>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000af0:	2609      	movs	r6, #9
 8000af2:	e000      	b.n	8000af6 <HAL_GPIO_Init+0x36>
 8000af4:	2600      	movs	r6, #0
 8000af6:	fa06 f60e 	lsl.w	r6, r6, lr
 8000afa:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000afc:	3302      	adds	r3, #2
 8000afe:	4e64      	ldr	r6, [pc, #400]	; (8000c90 <HAL_GPIO_Init+0x1d0>)
 8000b00:	f846 2023 	str.w	r2, [r6, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b04:	4b63      	ldr	r3, [pc, #396]	; (8000c94 <HAL_GPIO_Init+0x1d4>)
 8000b06:	681a      	ldr	r2, [r3, #0]
        temp &= ~((uint32_t)iocurrent);
 8000b08:	43eb      	mvns	r3, r5
 8000b0a:	ea02 0603 	and.w	r6, r2, r3
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b0e:	684f      	ldr	r7, [r1, #4]
 8000b10:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8000b14:	d001      	beq.n	8000b1a <HAL_GPIO_Init+0x5a>
        {
          temp |= iocurrent;
 8000b16:	ea45 0602 	orr.w	r6, r5, r2
        }
        EXTI->IMR = temp;
 8000b1a:	4a5e      	ldr	r2, [pc, #376]	; (8000c94 <HAL_GPIO_Init+0x1d4>)
 8000b1c:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 8000b1e:	6852      	ldr	r2, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8000b20:	ea03 0602 	and.w	r6, r3, r2
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b24:	684f      	ldr	r7, [r1, #4]
 8000b26:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8000b2a:	d001      	beq.n	8000b30 <HAL_GPIO_Init+0x70>
        {
          temp |= iocurrent;
 8000b2c:	ea45 0602 	orr.w	r6, r5, r2
        }
        EXTI->EMR = temp;
 8000b30:	4a58      	ldr	r2, [pc, #352]	; (8000c94 <HAL_GPIO_Init+0x1d4>)
 8000b32:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b34:	6892      	ldr	r2, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8000b36:	ea03 0602 	and.w	r6, r3, r2
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b3a:	684f      	ldr	r7, [r1, #4]
 8000b3c:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8000b40:	d001      	beq.n	8000b46 <HAL_GPIO_Init+0x86>
        {
          temp |= iocurrent;
 8000b42:	ea45 0602 	orr.w	r6, r5, r2
        }
        EXTI->RTSR = temp;
 8000b46:	4a53      	ldr	r2, [pc, #332]	; (8000c94 <HAL_GPIO_Init+0x1d4>)
 8000b48:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 8000b4a:	68d2      	ldr	r2, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 8000b4c:	4013      	ands	r3, r2
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b4e:	684e      	ldr	r6, [r1, #4]
 8000b50:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8000b54:	d001      	beq.n	8000b5a <HAL_GPIO_Init+0x9a>
        {
          temp |= iocurrent;
 8000b56:	ea45 0302 	orr.w	r3, r5, r2
        }
        EXTI->FTSR = temp;
 8000b5a:	4a4e      	ldr	r2, [pc, #312]	; (8000c94 <HAL_GPIO_Init+0x1d4>)
 8000b5c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b5e:	3401      	adds	r4, #1
 8000b60:	2c0f      	cmp	r4, #15
 8000b62:	f200 8092 	bhi.w	8000c8a <HAL_GPIO_Init+0x1ca>
    ioposition = 0x01U << position;
 8000b66:	2301      	movs	r3, #1
 8000b68:	40a3      	lsls	r3, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b6a:	680a      	ldr	r2, [r1, #0]
 8000b6c:	ea03 0502 	and.w	r5, r3, r2
    if(iocurrent == ioposition)
 8000b70:	42ab      	cmp	r3, r5
 8000b72:	d1f4      	bne.n	8000b5e <HAL_GPIO_Init+0x9e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b74:	684a      	ldr	r2, [r1, #4]
 8000b76:	2a02      	cmp	r2, #2
 8000b78:	d0a6      	beq.n	8000ac8 <HAL_GPIO_Init+0x8>
 8000b7a:	2a12      	cmp	r2, #18
 8000b7c:	d0a4      	beq.n	8000ac8 <HAL_GPIO_Init+0x8>
      temp = GPIOx->MODER;
 8000b7e:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000b80:	ea4f 0e44 	mov.w	lr, r4, lsl #1
 8000b84:	2203      	movs	r2, #3
 8000b86:	fa02 f20e 	lsl.w	r2, r2, lr
 8000b8a:	43d2      	mvns	r2, r2
 8000b8c:	4016      	ands	r6, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000b8e:	684f      	ldr	r7, [r1, #4]
 8000b90:	f007 0703 	and.w	r7, r7, #3
 8000b94:	fa07 f70e 	lsl.w	r7, r7, lr
 8000b98:	433e      	orrs	r6, r7
      GPIOx->MODER = temp;
 8000b9a:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b9c:	684e      	ldr	r6, [r1, #4]
 8000b9e:	1e77      	subs	r7, r6, #1
 8000ba0:	2f01      	cmp	r7, #1
 8000ba2:	d903      	bls.n	8000bac <HAL_GPIO_Init+0xec>
 8000ba4:	2e11      	cmp	r6, #17
 8000ba6:	d001      	beq.n	8000bac <HAL_GPIO_Init+0xec>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ba8:	2e12      	cmp	r6, #18
 8000baa:	d10f      	bne.n	8000bcc <HAL_GPIO_Init+0x10c>
        temp = GPIOx->OSPEEDR; 
 8000bac:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000bae:	4016      	ands	r6, r2
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000bb0:	68cf      	ldr	r7, [r1, #12]
 8000bb2:	fa07 f70e 	lsl.w	r7, r7, lr
 8000bb6:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 8000bb8:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8000bba:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000bbc:	ea26 0303 	bic.w	r3, r6, r3
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000bc0:	684e      	ldr	r6, [r1, #4]
 8000bc2:	f3c6 1600 	ubfx	r6, r6, #4, #1
 8000bc6:	40a6      	lsls	r6, r4
 8000bc8:	4333      	orrs	r3, r6
        GPIOx->OTYPER = temp;
 8000bca:	6043      	str	r3, [r0, #4]
      temp = GPIOx->PUPDR;
 8000bcc:	68c3      	ldr	r3, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000bce:	401a      	ands	r2, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000bd0:	688b      	ldr	r3, [r1, #8]
 8000bd2:	fa03 f30e 	lsl.w	r3, r3, lr
 8000bd6:	431a      	orrs	r2, r3
      GPIOx->PUPDR = temp;
 8000bd8:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000bda:	684b      	ldr	r3, [r1, #4]
 8000bdc:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8000be0:	d0bd      	beq.n	8000b5e <HAL_GPIO_Init+0x9e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000be2:	2300      	movs	r3, #0
 8000be4:	9301      	str	r3, [sp, #4]
 8000be6:	4b2c      	ldr	r3, [pc, #176]	; (8000c98 <HAL_GPIO_Init+0x1d8>)
 8000be8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000bea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000bee:	645a      	str	r2, [r3, #68]	; 0x44
 8000bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bf2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bf6:	9301      	str	r3, [sp, #4]
 8000bf8:	9b01      	ldr	r3, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8000bfa:	08a3      	lsrs	r3, r4, #2
 8000bfc:	1c9e      	adds	r6, r3, #2
 8000bfe:	4a24      	ldr	r2, [pc, #144]	; (8000c90 <HAL_GPIO_Init+0x1d0>)
 8000c00:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000c04:	f004 0603 	and.w	r6, r4, #3
 8000c08:	ea4f 0e86 	mov.w	lr, r6, lsl #2
 8000c0c:	260f      	movs	r6, #15
 8000c0e:	fa06 f60e 	lsl.w	r6, r6, lr
 8000c12:	ea22 0206 	bic.w	r2, r2, r6
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000c16:	4f21      	ldr	r7, [pc, #132]	; (8000c9c <HAL_GPIO_Init+0x1dc>)
 8000c18:	42b8      	cmp	r0, r7
 8000c1a:	f43f af6b 	beq.w	8000af4 <HAL_GPIO_Init+0x34>
 8000c1e:	4e20      	ldr	r6, [pc, #128]	; (8000ca0 <HAL_GPIO_Init+0x1e0>)
 8000c20:	42b0      	cmp	r0, r6
 8000c22:	d022      	beq.n	8000c6a <HAL_GPIO_Init+0x1aa>
 8000c24:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000c28:	42b0      	cmp	r0, r6
 8000c2a:	d020      	beq.n	8000c6e <HAL_GPIO_Init+0x1ae>
 8000c2c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000c30:	42b0      	cmp	r0, r6
 8000c32:	d01e      	beq.n	8000c72 <HAL_GPIO_Init+0x1b2>
 8000c34:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000c38:	42b0      	cmp	r0, r6
 8000c3a:	d01c      	beq.n	8000c76 <HAL_GPIO_Init+0x1b6>
 8000c3c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000c40:	42b0      	cmp	r0, r6
 8000c42:	d01a      	beq.n	8000c7a <HAL_GPIO_Init+0x1ba>
 8000c44:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000c48:	42b0      	cmp	r0, r6
 8000c4a:	d018      	beq.n	8000c7e <HAL_GPIO_Init+0x1be>
 8000c4c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000c50:	42b0      	cmp	r0, r6
 8000c52:	d016      	beq.n	8000c82 <HAL_GPIO_Init+0x1c2>
 8000c54:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000c58:	42b0      	cmp	r0, r6
 8000c5a:	d014      	beq.n	8000c86 <HAL_GPIO_Init+0x1c6>
 8000c5c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000c60:	42b0      	cmp	r0, r6
 8000c62:	f43f af45 	beq.w	8000af0 <HAL_GPIO_Init+0x30>
 8000c66:	260a      	movs	r6, #10
 8000c68:	e745      	b.n	8000af6 <HAL_GPIO_Init+0x36>
 8000c6a:	2601      	movs	r6, #1
 8000c6c:	e743      	b.n	8000af6 <HAL_GPIO_Init+0x36>
 8000c6e:	2602      	movs	r6, #2
 8000c70:	e741      	b.n	8000af6 <HAL_GPIO_Init+0x36>
 8000c72:	2603      	movs	r6, #3
 8000c74:	e73f      	b.n	8000af6 <HAL_GPIO_Init+0x36>
 8000c76:	2604      	movs	r6, #4
 8000c78:	e73d      	b.n	8000af6 <HAL_GPIO_Init+0x36>
 8000c7a:	2605      	movs	r6, #5
 8000c7c:	e73b      	b.n	8000af6 <HAL_GPIO_Init+0x36>
 8000c7e:	2606      	movs	r6, #6
 8000c80:	e739      	b.n	8000af6 <HAL_GPIO_Init+0x36>
 8000c82:	2607      	movs	r6, #7
 8000c84:	e737      	b.n	8000af6 <HAL_GPIO_Init+0x36>
 8000c86:	2608      	movs	r6, #8
 8000c88:	e735      	b.n	8000af6 <HAL_GPIO_Init+0x36>
      }
    }
  }
}
 8000c8a:	b003      	add	sp, #12
 8000c8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	40013800 	.word	0x40013800
 8000c94:	40013c00 	.word	0x40013c00
 8000c98:	40023800 	.word	0x40023800
 8000c9c:	40020000 	.word	0x40020000
 8000ca0:	40020400 	.word	0x40020400

08000ca4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ca4:	b912      	cbnz	r2, 8000cac <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000ca6:	0409      	lsls	r1, r1, #16
 8000ca8:	6181      	str	r1, [r0, #24]
 8000caa:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 8000cac:	6181      	str	r1, [r0, #24]
 8000cae:	4770      	bx	lr

08000cb0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cb2:	b08b      	sub	sp, #44	; 0x2c
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000cb4:	2800      	cmp	r0, #0
 8000cb6:	f000 808a 	beq.w	8000dce <HAL_PCD_Init+0x11e>
 8000cba:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8000cbc:	6805      	ldr	r5, [r0, #0]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000cbe:	f890 33bd 	ldrb.w	r3, [r0, #957]	; 0x3bd
 8000cc2:	b323      	cbz	r3, 8000d0e <HAL_PCD_Init+0x5e>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000cc4:	2303      	movs	r3, #3
 8000cc6:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000cca:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8000ccc:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000cd0:	d101      	bne.n	8000cd6 <HAL_PCD_Init+0x26>
  {
    hpcd->Init.dma_enable = 0U;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	6123      	str	r3, [r4, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000cd6:	6820      	ldr	r0, [r4, #0]
 8000cd8:	f000 ff2d 	bl	8001b36 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000cdc:	4625      	mov	r5, r4
 8000cde:	f855 7b10 	ldr.w	r7, [r5], #16
 8000ce2:	466e      	mov	r6, sp
 8000ce4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ce6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000ce8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cea:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000cec:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000cf0:	e886 0003 	stmia.w	r6, {r0, r1}
 8000cf4:	1d23      	adds	r3, r4, #4
 8000cf6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000cf8:	4638      	mov	r0, r7
 8000cfa:	f000 fed7 	bl	8001aac <USB_CoreInit>
 8000cfe:	b158      	cbz	r0, 8000d18 <HAL_PCD_Init+0x68>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000d00:	2302      	movs	r3, #2
 8000d02:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
    return HAL_ERROR;
 8000d06:	2501      	movs	r5, #1
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 8000d08:	4628      	mov	r0, r5
 8000d0a:	b00b      	add	sp, #44	; 0x2c
 8000d0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hpcd->Lock = HAL_UNLOCKED;
 8000d0e:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
    HAL_PCD_MspInit(hpcd);
 8000d12:	f002 fbd1 	bl	80034b8 <HAL_PCD_MspInit>
 8000d16:	e7d5      	b.n	8000cc4 <HAL_PCD_Init+0x14>
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000d18:	2100      	movs	r1, #0
 8000d1a:	6820      	ldr	r0, [r4, #0]
 8000d1c:	f000 ff11 	bl	8001b42 <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d20:	2300      	movs	r3, #0
 8000d22:	e015      	b.n	8000d50 <HAL_PCD_Init+0xa0>
    hpcd->IN_ep[i].is_in = 1U;
 8000d24:	00d9      	lsls	r1, r3, #3
 8000d26:	1ac8      	subs	r0, r1, r3
 8000d28:	0082      	lsls	r2, r0, #2
 8000d2a:	4422      	add	r2, r4
 8000d2c:	2001      	movs	r0, #1
 8000d2e:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
    hpcd->IN_ep[i].num = i;
 8000d32:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000d36:	f8a2 3042 	strh.w	r3, [r2, #66]	; 0x42
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000d3a:	2000      	movs	r0, #0
 8000d3c:	f882 003f 	strb.w	r0, [r2, #63]	; 0x3f
    hpcd->IN_ep[i].maxpacket = 0U;
 8000d40:	6450      	str	r0, [r2, #68]	; 0x44
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000d42:	6490      	str	r0, [r2, #72]	; 0x48
    hpcd->IN_ep[i].xfer_len = 0U;
 8000d44:	1aca      	subs	r2, r1, r3
 8000d46:	0091      	lsls	r1, r2, #2
 8000d48:	4421      	add	r1, r4
 8000d4a:	6508      	str	r0, [r1, #80]	; 0x50
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d4c:	3301      	adds	r3, #1
 8000d4e:	b2db      	uxtb	r3, r3
 8000d50:	6865      	ldr	r5, [r4, #4]
 8000d52:	42ab      	cmp	r3, r5
 8000d54:	d3e6      	bcc.n	8000d24 <HAL_PCD_Init+0x74>
 8000d56:	2300      	movs	r3, #0
 8000d58:	e015      	b.n	8000d86 <HAL_PCD_Init+0xd6>
    hpcd->OUT_ep[i].is_in = 0U;
 8000d5a:	00d8      	lsls	r0, r3, #3
 8000d5c:	1ac1      	subs	r1, r0, r3
 8000d5e:	008a      	lsls	r2, r1, #2
 8000d60:	4422      	add	r2, r4
 8000d62:	2100      	movs	r1, #0
 8000d64:	f882 11fd 	strb.w	r1, [r2, #509]	; 0x1fd
    hpcd->OUT_ep[i].num = i;
 8000d68:	f882 31fc 	strb.w	r3, [r2, #508]	; 0x1fc
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000d6c:	f882 11ff 	strb.w	r1, [r2, #511]	; 0x1ff
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000d70:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000d74:	f8c2 1208 	str.w	r1, [r2, #520]	; 0x208
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000d78:	1ac2      	subs	r2, r0, r3
 8000d7a:	0090      	lsls	r0, r2, #2
 8000d7c:	4420      	add	r0, r4
 8000d7e:	f8c0 1210 	str.w	r1, [r0, #528]	; 0x210
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d82:	3301      	adds	r3, #1
 8000d84:	b2db      	uxtb	r3, r3
 8000d86:	429d      	cmp	r5, r3
 8000d88:	d8e7      	bhi.n	8000d5a <HAL_PCD_Init+0xaa>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000d8a:	4625      	mov	r5, r4
 8000d8c:	f855 7b10 	ldr.w	r7, [r5], #16
 8000d90:	466e      	mov	r6, sp
 8000d92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d94:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000d96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d98:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000d9a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000d9e:	e886 0003 	stmia.w	r6, {r0, r1}
 8000da2:	1d23      	adds	r3, r4, #4
 8000da4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000da6:	4638      	mov	r0, r7
 8000da8:	f000 ff12 	bl	8001bd0 <USB_DevInit>
 8000dac:	4605      	mov	r5, r0
 8000dae:	b120      	cbz	r0, 8000dba <HAL_PCD_Init+0x10a>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000db0:	2302      	movs	r3, #2
 8000db2:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
    return HAL_ERROR;
 8000db6:	2501      	movs	r5, #1
 8000db8:	e7a6      	b.n	8000d08 <HAL_PCD_Init+0x58>
  hpcd->USB_Address = 0U;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  (void)USB_DevDisconnect(hpcd->Instance);
 8000dc6:	6820      	ldr	r0, [r4, #0]
 8000dc8:	f000 ffd2 	bl	8001d70 <USB_DevDisconnect>
  return HAL_OK;
 8000dcc:	e79c      	b.n	8000d08 <HAL_PCD_Init+0x58>
    return HAL_ERROR;
 8000dce:	2501      	movs	r5, #1
 8000dd0:	e79a      	b.n	8000d08 <HAL_PCD_Init+0x58>
	...

08000dd4 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000dd4:	2800      	cmp	r0, #0
 8000dd6:	f000 81bb 	beq.w	8001150 <HAL_RCC_OscConfig+0x37c>
{
 8000dda:	b570      	push	{r4, r5, r6, lr}
 8000ddc:	b082      	sub	sp, #8
 8000dde:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000de0:	6803      	ldr	r3, [r0, #0]
 8000de2:	f013 0f01 	tst.w	r3, #1
 8000de6:	d03b      	beq.n	8000e60 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000de8:	4ba7      	ldr	r3, [pc, #668]	; (8001088 <HAL_RCC_OscConfig+0x2b4>)
 8000dea:	689b      	ldr	r3, [r3, #8]
 8000dec:	f003 030c 	and.w	r3, r3, #12
 8000df0:	2b04      	cmp	r3, #4
 8000df2:	d02c      	beq.n	8000e4e <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000df4:	4ba4      	ldr	r3, [pc, #656]	; (8001088 <HAL_RCC_OscConfig+0x2b4>)
 8000df6:	689b      	ldr	r3, [r3, #8]
 8000df8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000dfc:	2b08      	cmp	r3, #8
 8000dfe:	d021      	beq.n	8000e44 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e00:	6863      	ldr	r3, [r4, #4]
 8000e02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e06:	d04f      	beq.n	8000ea8 <HAL_RCC_OscConfig+0xd4>
 8000e08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e0c:	d052      	beq.n	8000eb4 <HAL_RCC_OscConfig+0xe0>
 8000e0e:	4b9e      	ldr	r3, [pc, #632]	; (8001088 <HAL_RCC_OscConfig+0x2b4>)
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000e16:	601a      	str	r2, [r3, #0]
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000e1e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000e20:	6863      	ldr	r3, [r4, #4]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d050      	beq.n	8000ec8 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e26:	f7ff fb99 	bl	800055c <HAL_GetTick>
 8000e2a:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e2c:	4b96      	ldr	r3, [pc, #600]	; (8001088 <HAL_RCC_OscConfig+0x2b4>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000e34:	d114      	bne.n	8000e60 <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e36:	f7ff fb91 	bl	800055c <HAL_GetTick>
 8000e3a:	1b40      	subs	r0, r0, r5
 8000e3c:	2864      	cmp	r0, #100	; 0x64
 8000e3e:	d9f5      	bls.n	8000e2c <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8000e40:	2003      	movs	r0, #3
 8000e42:	e18a      	b.n	800115a <HAL_RCC_OscConfig+0x386>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000e44:	4b90      	ldr	r3, [pc, #576]	; (8001088 <HAL_RCC_OscConfig+0x2b4>)
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8000e4c:	d0d8      	beq.n	8000e00 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e4e:	4b8e      	ldr	r3, [pc, #568]	; (8001088 <HAL_RCC_OscConfig+0x2b4>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000e56:	d003      	beq.n	8000e60 <HAL_RCC_OscConfig+0x8c>
 8000e58:	6863      	ldr	r3, [r4, #4]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	f000 817a 	beq.w	8001154 <HAL_RCC_OscConfig+0x380>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e60:	6823      	ldr	r3, [r4, #0]
 8000e62:	f013 0f02 	tst.w	r3, #2
 8000e66:	d055      	beq.n	8000f14 <HAL_RCC_OscConfig+0x140>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000e68:	4b87      	ldr	r3, [pc, #540]	; (8001088 <HAL_RCC_OscConfig+0x2b4>)
 8000e6a:	689b      	ldr	r3, [r3, #8]
 8000e6c:	f013 0f0c 	tst.w	r3, #12
 8000e70:	d03e      	beq.n	8000ef0 <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000e72:	4b85      	ldr	r3, [pc, #532]	; (8001088 <HAL_RCC_OscConfig+0x2b4>)
 8000e74:	689b      	ldr	r3, [r3, #8]
 8000e76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000e7a:	2b08      	cmp	r3, #8
 8000e7c:	d033      	beq.n	8000ee6 <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000e7e:	68e3      	ldr	r3, [r4, #12]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d068      	beq.n	8000f56 <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e84:	2201      	movs	r2, #1
 8000e86:	4b81      	ldr	r3, [pc, #516]	; (800108c <HAL_RCC_OscConfig+0x2b8>)
 8000e88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e8a:	f7ff fb67 	bl	800055c <HAL_GetTick>
 8000e8e:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e90:	4b7d      	ldr	r3, [pc, #500]	; (8001088 <HAL_RCC_OscConfig+0x2b4>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f013 0f02 	tst.w	r3, #2
 8000e98:	d154      	bne.n	8000f44 <HAL_RCC_OscConfig+0x170>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e9a:	f7ff fb5f 	bl	800055c <HAL_GetTick>
 8000e9e:	1b40      	subs	r0, r0, r5
 8000ea0:	2802      	cmp	r0, #2
 8000ea2:	d9f5      	bls.n	8000e90 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8000ea4:	2003      	movs	r0, #3
 8000ea6:	e158      	b.n	800115a <HAL_RCC_OscConfig+0x386>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ea8:	4a77      	ldr	r2, [pc, #476]	; (8001088 <HAL_RCC_OscConfig+0x2b4>)
 8000eaa:	6813      	ldr	r3, [r2, #0]
 8000eac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000eb0:	6013      	str	r3, [r2, #0]
 8000eb2:	e7b5      	b.n	8000e20 <HAL_RCC_OscConfig+0x4c>
 8000eb4:	4b74      	ldr	r3, [pc, #464]	; (8001088 <HAL_RCC_OscConfig+0x2b4>)
 8000eb6:	681a      	ldr	r2, [r3, #0]
 8000eb8:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000ebc:	601a      	str	r2, [r3, #0]
 8000ebe:	681a      	ldr	r2, [r3, #0]
 8000ec0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000ec4:	601a      	str	r2, [r3, #0]
 8000ec6:	e7ab      	b.n	8000e20 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8000ec8:	f7ff fb48 	bl	800055c <HAL_GetTick>
 8000ecc:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ece:	4b6e      	ldr	r3, [pc, #440]	; (8001088 <HAL_RCC_OscConfig+0x2b4>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000ed6:	d0c3      	beq.n	8000e60 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ed8:	f7ff fb40 	bl	800055c <HAL_GetTick>
 8000edc:	1b40      	subs	r0, r0, r5
 8000ede:	2864      	cmp	r0, #100	; 0x64
 8000ee0:	d9f5      	bls.n	8000ece <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 8000ee2:	2003      	movs	r0, #3
 8000ee4:	e139      	b.n	800115a <HAL_RCC_OscConfig+0x386>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000ee6:	4b68      	ldr	r3, [pc, #416]	; (8001088 <HAL_RCC_OscConfig+0x2b4>)
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8000eee:	d1c6      	bne.n	8000e7e <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ef0:	4b65      	ldr	r3, [pc, #404]	; (8001088 <HAL_RCC_OscConfig+0x2b4>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f013 0f02 	tst.w	r3, #2
 8000ef8:	d004      	beq.n	8000f04 <HAL_RCC_OscConfig+0x130>
 8000efa:	68e3      	ldr	r3, [r4, #12]
 8000efc:	2b01      	cmp	r3, #1
 8000efe:	d001      	beq.n	8000f04 <HAL_RCC_OscConfig+0x130>
        return HAL_ERROR;
 8000f00:	2001      	movs	r0, #1
 8000f02:	e12a      	b.n	800115a <HAL_RCC_OscConfig+0x386>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f04:	4a60      	ldr	r2, [pc, #384]	; (8001088 <HAL_RCC_OscConfig+0x2b4>)
 8000f06:	6813      	ldr	r3, [r2, #0]
 8000f08:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000f0c:	6921      	ldr	r1, [r4, #16]
 8000f0e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000f12:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f14:	6823      	ldr	r3, [r4, #0]
 8000f16:	f013 0f08 	tst.w	r3, #8
 8000f1a:	d040      	beq.n	8000f9e <HAL_RCC_OscConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000f1c:	6963      	ldr	r3, [r4, #20]
 8000f1e:	b363      	cbz	r3, 8000f7a <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f20:	2201      	movs	r2, #1
 8000f22:	4b5b      	ldr	r3, [pc, #364]	; (8001090 <HAL_RCC_OscConfig+0x2bc>)
 8000f24:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f26:	f7ff fb19 	bl	800055c <HAL_GetTick>
 8000f2a:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f2c:	4b56      	ldr	r3, [pc, #344]	; (8001088 <HAL_RCC_OscConfig+0x2b4>)
 8000f2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000f30:	f013 0f02 	tst.w	r3, #2
 8000f34:	d133      	bne.n	8000f9e <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f36:	f7ff fb11 	bl	800055c <HAL_GetTick>
 8000f3a:	1b40      	subs	r0, r0, r5
 8000f3c:	2802      	cmp	r0, #2
 8000f3e:	d9f5      	bls.n	8000f2c <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 8000f40:	2003      	movs	r0, #3
 8000f42:	e10a      	b.n	800115a <HAL_RCC_OscConfig+0x386>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f44:	4a50      	ldr	r2, [pc, #320]	; (8001088 <HAL_RCC_OscConfig+0x2b4>)
 8000f46:	6813      	ldr	r3, [r2, #0]
 8000f48:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000f4c:	6921      	ldr	r1, [r4, #16]
 8000f4e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000f52:	6013      	str	r3, [r2, #0]
 8000f54:	e7de      	b.n	8000f14 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 8000f56:	2200      	movs	r2, #0
 8000f58:	4b4c      	ldr	r3, [pc, #304]	; (800108c <HAL_RCC_OscConfig+0x2b8>)
 8000f5a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000f5c:	f7ff fafe 	bl	800055c <HAL_GetTick>
 8000f60:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f62:	4b49      	ldr	r3, [pc, #292]	; (8001088 <HAL_RCC_OscConfig+0x2b4>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f013 0f02 	tst.w	r3, #2
 8000f6a:	d0d3      	beq.n	8000f14 <HAL_RCC_OscConfig+0x140>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f6c:	f7ff faf6 	bl	800055c <HAL_GetTick>
 8000f70:	1b40      	subs	r0, r0, r5
 8000f72:	2802      	cmp	r0, #2
 8000f74:	d9f5      	bls.n	8000f62 <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 8000f76:	2003      	movs	r0, #3
 8000f78:	e0ef      	b.n	800115a <HAL_RCC_OscConfig+0x386>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	4b44      	ldr	r3, [pc, #272]	; (8001090 <HAL_RCC_OscConfig+0x2bc>)
 8000f7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f80:	f7ff faec 	bl	800055c <HAL_GetTick>
 8000f84:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f86:	4b40      	ldr	r3, [pc, #256]	; (8001088 <HAL_RCC_OscConfig+0x2b4>)
 8000f88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000f8a:	f013 0f02 	tst.w	r3, #2
 8000f8e:	d006      	beq.n	8000f9e <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f90:	f7ff fae4 	bl	800055c <HAL_GetTick>
 8000f94:	1b40      	subs	r0, r0, r5
 8000f96:	2802      	cmp	r0, #2
 8000f98:	d9f5      	bls.n	8000f86 <HAL_RCC_OscConfig+0x1b2>
        {
          return HAL_TIMEOUT;
 8000f9a:	2003      	movs	r0, #3
 8000f9c:	e0dd      	b.n	800115a <HAL_RCC_OscConfig+0x386>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f9e:	6823      	ldr	r3, [r4, #0]
 8000fa0:	f013 0f04 	tst.w	r3, #4
 8000fa4:	d079      	beq.n	800109a <HAL_RCC_OscConfig+0x2c6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000fa6:	4b38      	ldr	r3, [pc, #224]	; (8001088 <HAL_RCC_OscConfig+0x2b4>)
 8000fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000faa:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8000fae:	d133      	bne.n	8001018 <HAL_RCC_OscConfig+0x244>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	9301      	str	r3, [sp, #4]
 8000fb4:	4b34      	ldr	r3, [pc, #208]	; (8001088 <HAL_RCC_OscConfig+0x2b4>)
 8000fb6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fb8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000fbc:	641a      	str	r2, [r3, #64]	; 0x40
 8000fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fc4:	9301      	str	r3, [sp, #4]
 8000fc6:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000fc8:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fca:	4b32      	ldr	r3, [pc, #200]	; (8001094 <HAL_RCC_OscConfig+0x2c0>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000fd2:	d023      	beq.n	800101c <HAL_RCC_OscConfig+0x248>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fd4:	68a3      	ldr	r3, [r4, #8]
 8000fd6:	2b01      	cmp	r3, #1
 8000fd8:	d034      	beq.n	8001044 <HAL_RCC_OscConfig+0x270>
 8000fda:	2b05      	cmp	r3, #5
 8000fdc:	d038      	beq.n	8001050 <HAL_RCC_OscConfig+0x27c>
 8000fde:	4b2a      	ldr	r3, [pc, #168]	; (8001088 <HAL_RCC_OscConfig+0x2b4>)
 8000fe0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000fe2:	f022 0201 	bic.w	r2, r2, #1
 8000fe6:	671a      	str	r2, [r3, #112]	; 0x70
 8000fe8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000fea:	f022 0204 	bic.w	r2, r2, #4
 8000fee:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000ff0:	68a3      	ldr	r3, [r4, #8]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d036      	beq.n	8001064 <HAL_RCC_OscConfig+0x290>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000ff6:	f7ff fab1 	bl	800055c <HAL_GetTick>
 8000ffa:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ffc:	4b22      	ldr	r3, [pc, #136]	; (8001088 <HAL_RCC_OscConfig+0x2b4>)
 8000ffe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001000:	f013 0f02 	tst.w	r3, #2
 8001004:	d148      	bne.n	8001098 <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001006:	f7ff faa9 	bl	800055c <HAL_GetTick>
 800100a:	1b80      	subs	r0, r0, r6
 800100c:	f241 3388 	movw	r3, #5000	; 0x1388
 8001010:	4298      	cmp	r0, r3
 8001012:	d9f3      	bls.n	8000ffc <HAL_RCC_OscConfig+0x228>
        {
          return HAL_TIMEOUT;
 8001014:	2003      	movs	r0, #3
 8001016:	e0a0      	b.n	800115a <HAL_RCC_OscConfig+0x386>
    FlagStatus       pwrclkchanged = RESET;
 8001018:	2500      	movs	r5, #0
 800101a:	e7d6      	b.n	8000fca <HAL_RCC_OscConfig+0x1f6>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800101c:	4a1d      	ldr	r2, [pc, #116]	; (8001094 <HAL_RCC_OscConfig+0x2c0>)
 800101e:	6813      	ldr	r3, [r2, #0]
 8001020:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001024:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001026:	f7ff fa99 	bl	800055c <HAL_GetTick>
 800102a:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800102c:	4b19      	ldr	r3, [pc, #100]	; (8001094 <HAL_RCC_OscConfig+0x2c0>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001034:	d1ce      	bne.n	8000fd4 <HAL_RCC_OscConfig+0x200>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001036:	f7ff fa91 	bl	800055c <HAL_GetTick>
 800103a:	1b80      	subs	r0, r0, r6
 800103c:	2802      	cmp	r0, #2
 800103e:	d9f5      	bls.n	800102c <HAL_RCC_OscConfig+0x258>
          return HAL_TIMEOUT;
 8001040:	2003      	movs	r0, #3
 8001042:	e08a      	b.n	800115a <HAL_RCC_OscConfig+0x386>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001044:	4a10      	ldr	r2, [pc, #64]	; (8001088 <HAL_RCC_OscConfig+0x2b4>)
 8001046:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8001048:	f043 0301 	orr.w	r3, r3, #1
 800104c:	6713      	str	r3, [r2, #112]	; 0x70
 800104e:	e7cf      	b.n	8000ff0 <HAL_RCC_OscConfig+0x21c>
 8001050:	4b0d      	ldr	r3, [pc, #52]	; (8001088 <HAL_RCC_OscConfig+0x2b4>)
 8001052:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001054:	f042 0204 	orr.w	r2, r2, #4
 8001058:	671a      	str	r2, [r3, #112]	; 0x70
 800105a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800105c:	f042 0201 	orr.w	r2, r2, #1
 8001060:	671a      	str	r2, [r3, #112]	; 0x70
 8001062:	e7c5      	b.n	8000ff0 <HAL_RCC_OscConfig+0x21c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001064:	f7ff fa7a 	bl	800055c <HAL_GetTick>
 8001068:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800106a:	4b07      	ldr	r3, [pc, #28]	; (8001088 <HAL_RCC_OscConfig+0x2b4>)
 800106c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800106e:	f013 0f02 	tst.w	r3, #2
 8001072:	d011      	beq.n	8001098 <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001074:	f7ff fa72 	bl	800055c <HAL_GetTick>
 8001078:	1b80      	subs	r0, r0, r6
 800107a:	f241 3388 	movw	r3, #5000	; 0x1388
 800107e:	4298      	cmp	r0, r3
 8001080:	d9f3      	bls.n	800106a <HAL_RCC_OscConfig+0x296>
        {
          return HAL_TIMEOUT;
 8001082:	2003      	movs	r0, #3
 8001084:	e069      	b.n	800115a <HAL_RCC_OscConfig+0x386>
 8001086:	bf00      	nop
 8001088:	40023800 	.word	0x40023800
 800108c:	42470000 	.word	0x42470000
 8001090:	42470e80 	.word	0x42470e80
 8001094:	40007000 	.word	0x40007000
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001098:	b9e5      	cbnz	r5, 80010d4 <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800109a:	69a3      	ldr	r3, [r4, #24]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d05b      	beq.n	8001158 <HAL_RCC_OscConfig+0x384>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80010a0:	4a30      	ldr	r2, [pc, #192]	; (8001164 <HAL_RCC_OscConfig+0x390>)
 80010a2:	6892      	ldr	r2, [r2, #8]
 80010a4:	f002 020c 	and.w	r2, r2, #12
 80010a8:	2a08      	cmp	r2, #8
 80010aa:	d058      	beq.n	800115e <HAL_RCC_OscConfig+0x38a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80010ac:	2b02      	cmp	r3, #2
 80010ae:	d017      	beq.n	80010e0 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010b0:	2200      	movs	r2, #0
 80010b2:	4b2d      	ldr	r3, [pc, #180]	; (8001168 <HAL_RCC_OscConfig+0x394>)
 80010b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010b6:	f7ff fa51 	bl	800055c <HAL_GetTick>
 80010ba:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80010bc:	4b29      	ldr	r3, [pc, #164]	; (8001164 <HAL_RCC_OscConfig+0x390>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80010c4:	d042      	beq.n	800114c <HAL_RCC_OscConfig+0x378>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010c6:	f7ff fa49 	bl	800055c <HAL_GetTick>
 80010ca:	1b00      	subs	r0, r0, r4
 80010cc:	2802      	cmp	r0, #2
 80010ce:	d9f5      	bls.n	80010bc <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80010d0:	2003      	movs	r0, #3
 80010d2:	e042      	b.n	800115a <HAL_RCC_OscConfig+0x386>
      __HAL_RCC_PWR_CLK_DISABLE();
 80010d4:	4a23      	ldr	r2, [pc, #140]	; (8001164 <HAL_RCC_OscConfig+0x390>)
 80010d6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80010d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80010dc:	6413      	str	r3, [r2, #64]	; 0x40
 80010de:	e7dc      	b.n	800109a <HAL_RCC_OscConfig+0x2c6>
        __HAL_RCC_PLL_DISABLE();
 80010e0:	2200      	movs	r2, #0
 80010e2:	4b21      	ldr	r3, [pc, #132]	; (8001168 <HAL_RCC_OscConfig+0x394>)
 80010e4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80010e6:	f7ff fa39 	bl	800055c <HAL_GetTick>
 80010ea:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80010ec:	4b1d      	ldr	r3, [pc, #116]	; (8001164 <HAL_RCC_OscConfig+0x390>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80010f4:	d006      	beq.n	8001104 <HAL_RCC_OscConfig+0x330>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010f6:	f7ff fa31 	bl	800055c <HAL_GetTick>
 80010fa:	1b40      	subs	r0, r0, r5
 80010fc:	2802      	cmp	r0, #2
 80010fe:	d9f5      	bls.n	80010ec <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 8001100:	2003      	movs	r0, #3
 8001102:	e02a      	b.n	800115a <HAL_RCC_OscConfig+0x386>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001104:	69e3      	ldr	r3, [r4, #28]
 8001106:	6a22      	ldr	r2, [r4, #32]
 8001108:	4313      	orrs	r3, r2
 800110a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800110c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001110:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001112:	0852      	lsrs	r2, r2, #1
 8001114:	3a01      	subs	r2, #1
 8001116:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800111a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800111c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001120:	4a10      	ldr	r2, [pc, #64]	; (8001164 <HAL_RCC_OscConfig+0x390>)
 8001122:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8001124:	2201      	movs	r2, #1
 8001126:	4b10      	ldr	r3, [pc, #64]	; (8001168 <HAL_RCC_OscConfig+0x394>)
 8001128:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800112a:	f7ff fa17 	bl	800055c <HAL_GetTick>
 800112e:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001130:	4b0c      	ldr	r3, [pc, #48]	; (8001164 <HAL_RCC_OscConfig+0x390>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001138:	d106      	bne.n	8001148 <HAL_RCC_OscConfig+0x374>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800113a:	f7ff fa0f 	bl	800055c <HAL_GetTick>
 800113e:	1b00      	subs	r0, r0, r4
 8001140:	2802      	cmp	r0, #2
 8001142:	d9f5      	bls.n	8001130 <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 8001144:	2003      	movs	r0, #3
 8001146:	e008      	b.n	800115a <HAL_RCC_OscConfig+0x386>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8001148:	2000      	movs	r0, #0
 800114a:	e006      	b.n	800115a <HAL_RCC_OscConfig+0x386>
 800114c:	2000      	movs	r0, #0
 800114e:	e004      	b.n	800115a <HAL_RCC_OscConfig+0x386>
    return HAL_ERROR;
 8001150:	2001      	movs	r0, #1
 8001152:	4770      	bx	lr
        return HAL_ERROR;
 8001154:	2001      	movs	r0, #1
 8001156:	e000      	b.n	800115a <HAL_RCC_OscConfig+0x386>
  return HAL_OK;
 8001158:	2000      	movs	r0, #0
}
 800115a:	b002      	add	sp, #8
 800115c:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800115e:	2001      	movs	r0, #1
 8001160:	e7fb      	b.n	800115a <HAL_RCC_OscConfig+0x386>
 8001162:	bf00      	nop
 8001164:	40023800 	.word	0x40023800
 8001168:	42470060 	.word	0x42470060

0800116c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800116c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800116e:	4b31      	ldr	r3, [pc, #196]	; (8001234 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001170:	689b      	ldr	r3, [r3, #8]
 8001172:	f003 030c 	and.w	r3, r3, #12
 8001176:	2b04      	cmp	r3, #4
 8001178:	d059      	beq.n	800122e <HAL_RCC_GetSysClockFreq+0xc2>
 800117a:	2b08      	cmp	r3, #8
 800117c:	d001      	beq.n	8001182 <HAL_RCC_GetSysClockFreq+0x16>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800117e:	482e      	ldr	r0, [pc, #184]	; (8001238 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001180:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001182:	4b2c      	ldr	r3, [pc, #176]	; (8001234 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001184:	685a      	ldr	r2, [r3, #4]
 8001186:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001190:	d02a      	beq.n	80011e8 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001192:	4b28      	ldr	r3, [pc, #160]	; (8001234 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	f3c3 1388 	ubfx	r3, r3, #6, #9
 800119a:	461e      	mov	r6, r3
 800119c:	2700      	movs	r7, #0
 800119e:	015c      	lsls	r4, r3, #5
 80011a0:	2500      	movs	r5, #0
 80011a2:	1ae4      	subs	r4, r4, r3
 80011a4:	eb65 0507 	sbc.w	r5, r5, r7
 80011a8:	01a9      	lsls	r1, r5, #6
 80011aa:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 80011ae:	01a0      	lsls	r0, r4, #6
 80011b0:	1b00      	subs	r0, r0, r4
 80011b2:	eb61 0105 	sbc.w	r1, r1, r5
 80011b6:	00cb      	lsls	r3, r1, #3
 80011b8:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80011bc:	00c4      	lsls	r4, r0, #3
 80011be:	19a0      	adds	r0, r4, r6
 80011c0:	eb43 0107 	adc.w	r1, r3, r7
 80011c4:	024b      	lsls	r3, r1, #9
 80011c6:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 80011ca:	0244      	lsls	r4, r0, #9
 80011cc:	4620      	mov	r0, r4
 80011ce:	4619      	mov	r1, r3
 80011d0:	2300      	movs	r3, #0
 80011d2:	f7ff f815 	bl	8000200 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80011d6:	4b17      	ldr	r3, [pc, #92]	; (8001234 <HAL_RCC_GetSysClockFreq+0xc8>)
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80011de:	3301      	adds	r3, #1
 80011e0:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 80011e2:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 80011e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80011e8:	4b12      	ldr	r3, [pc, #72]	; (8001234 <HAL_RCC_GetSysClockFreq+0xc8>)
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f3c3 1388 	ubfx	r3, r3, #6, #9
 80011f0:	461e      	mov	r6, r3
 80011f2:	2700      	movs	r7, #0
 80011f4:	015c      	lsls	r4, r3, #5
 80011f6:	2500      	movs	r5, #0
 80011f8:	1ae4      	subs	r4, r4, r3
 80011fa:	eb65 0507 	sbc.w	r5, r5, r7
 80011fe:	01a9      	lsls	r1, r5, #6
 8001200:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8001204:	01a0      	lsls	r0, r4, #6
 8001206:	1b00      	subs	r0, r0, r4
 8001208:	eb61 0105 	sbc.w	r1, r1, r5
 800120c:	00cb      	lsls	r3, r1, #3
 800120e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001212:	00c4      	lsls	r4, r0, #3
 8001214:	19a0      	adds	r0, r4, r6
 8001216:	eb43 0107 	adc.w	r1, r3, r7
 800121a:	028b      	lsls	r3, r1, #10
 800121c:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8001220:	0284      	lsls	r4, r0, #10
 8001222:	4620      	mov	r0, r4
 8001224:	4619      	mov	r1, r3
 8001226:	2300      	movs	r3, #0
 8001228:	f7fe ffea 	bl	8000200 <__aeabi_uldivmod>
 800122c:	e7d3      	b.n	80011d6 <HAL_RCC_GetSysClockFreq+0x6a>
      sysclockfreq = HSE_VALUE;
 800122e:	4803      	ldr	r0, [pc, #12]	; (800123c <HAL_RCC_GetSysClockFreq+0xd0>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001230:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001232:	bf00      	nop
 8001234:	40023800 	.word	0x40023800
 8001238:	00f42400 	.word	0x00f42400
 800123c:	007a1200 	.word	0x007a1200

08001240 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8001240:	2800      	cmp	r0, #0
 8001242:	f000 809d 	beq.w	8001380 <HAL_RCC_ClockConfig+0x140>
{
 8001246:	b570      	push	{r4, r5, r6, lr}
 8001248:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800124a:	4b4f      	ldr	r3, [pc, #316]	; (8001388 <HAL_RCC_ClockConfig+0x148>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f003 030f 	and.w	r3, r3, #15
 8001252:	428b      	cmp	r3, r1
 8001254:	d209      	bcs.n	800126a <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001256:	b2cb      	uxtb	r3, r1
 8001258:	4a4b      	ldr	r2, [pc, #300]	; (8001388 <HAL_RCC_ClockConfig+0x148>)
 800125a:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800125c:	6813      	ldr	r3, [r2, #0]
 800125e:	f003 030f 	and.w	r3, r3, #15
 8001262:	4299      	cmp	r1, r3
 8001264:	d001      	beq.n	800126a <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
 8001266:	2001      	movs	r0, #1
 8001268:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800126a:	6823      	ldr	r3, [r4, #0]
 800126c:	f013 0f02 	tst.w	r3, #2
 8001270:	d017      	beq.n	80012a2 <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001272:	f013 0f04 	tst.w	r3, #4
 8001276:	d004      	beq.n	8001282 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001278:	4a44      	ldr	r2, [pc, #272]	; (800138c <HAL_RCC_ClockConfig+0x14c>)
 800127a:	6893      	ldr	r3, [r2, #8]
 800127c:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001280:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001282:	6823      	ldr	r3, [r4, #0]
 8001284:	f013 0f08 	tst.w	r3, #8
 8001288:	d004      	beq.n	8001294 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800128a:	4a40      	ldr	r2, [pc, #256]	; (800138c <HAL_RCC_ClockConfig+0x14c>)
 800128c:	6893      	ldr	r3, [r2, #8]
 800128e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001292:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001294:	4a3d      	ldr	r2, [pc, #244]	; (800138c <HAL_RCC_ClockConfig+0x14c>)
 8001296:	6893      	ldr	r3, [r2, #8]
 8001298:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800129c:	68a0      	ldr	r0, [r4, #8]
 800129e:	4303      	orrs	r3, r0
 80012a0:	6093      	str	r3, [r2, #8]
 80012a2:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012a4:	6823      	ldr	r3, [r4, #0]
 80012a6:	f013 0f01 	tst.w	r3, #1
 80012aa:	d032      	beq.n	8001312 <HAL_RCC_ClockConfig+0xd2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012ac:	6863      	ldr	r3, [r4, #4]
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d021      	beq.n	80012f6 <HAL_RCC_ClockConfig+0xb6>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80012b2:	1e9a      	subs	r2, r3, #2
 80012b4:	2a01      	cmp	r2, #1
 80012b6:	d925      	bls.n	8001304 <HAL_RCC_ClockConfig+0xc4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012b8:	4a34      	ldr	r2, [pc, #208]	; (800138c <HAL_RCC_ClockConfig+0x14c>)
 80012ba:	6812      	ldr	r2, [r2, #0]
 80012bc:	f012 0f02 	tst.w	r2, #2
 80012c0:	d060      	beq.n	8001384 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012c2:	4932      	ldr	r1, [pc, #200]	; (800138c <HAL_RCC_ClockConfig+0x14c>)
 80012c4:	688a      	ldr	r2, [r1, #8]
 80012c6:	f022 0203 	bic.w	r2, r2, #3
 80012ca:	4313      	orrs	r3, r2
 80012cc:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80012ce:	f7ff f945 	bl	800055c <HAL_GetTick>
 80012d2:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012d4:	4b2d      	ldr	r3, [pc, #180]	; (800138c <HAL_RCC_ClockConfig+0x14c>)
 80012d6:	689b      	ldr	r3, [r3, #8]
 80012d8:	f003 030c 	and.w	r3, r3, #12
 80012dc:	6862      	ldr	r2, [r4, #4]
 80012de:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80012e2:	d016      	beq.n	8001312 <HAL_RCC_ClockConfig+0xd2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012e4:	f7ff f93a 	bl	800055c <HAL_GetTick>
 80012e8:	1b80      	subs	r0, r0, r6
 80012ea:	f241 3388 	movw	r3, #5000	; 0x1388
 80012ee:	4298      	cmp	r0, r3
 80012f0:	d9f0      	bls.n	80012d4 <HAL_RCC_ClockConfig+0x94>
        return HAL_TIMEOUT;
 80012f2:	2003      	movs	r0, #3
 80012f4:	bd70      	pop	{r4, r5, r6, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012f6:	4a25      	ldr	r2, [pc, #148]	; (800138c <HAL_RCC_ClockConfig+0x14c>)
 80012f8:	6812      	ldr	r2, [r2, #0]
 80012fa:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80012fe:	d1e0      	bne.n	80012c2 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8001300:	2001      	movs	r0, #1
 8001302:	bd70      	pop	{r4, r5, r6, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001304:	4a21      	ldr	r2, [pc, #132]	; (800138c <HAL_RCC_ClockConfig+0x14c>)
 8001306:	6812      	ldr	r2, [r2, #0]
 8001308:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800130c:	d1d9      	bne.n	80012c2 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 800130e:	2001      	movs	r0, #1
 8001310:	bd70      	pop	{r4, r5, r6, pc}
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001312:	4b1d      	ldr	r3, [pc, #116]	; (8001388 <HAL_RCC_ClockConfig+0x148>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f003 030f 	and.w	r3, r3, #15
 800131a:	429d      	cmp	r5, r3
 800131c:	d209      	bcs.n	8001332 <HAL_RCC_ClockConfig+0xf2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800131e:	b2ea      	uxtb	r2, r5
 8001320:	4b19      	ldr	r3, [pc, #100]	; (8001388 <HAL_RCC_ClockConfig+0x148>)
 8001322:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f003 030f 	and.w	r3, r3, #15
 800132a:	429d      	cmp	r5, r3
 800132c:	d001      	beq.n	8001332 <HAL_RCC_ClockConfig+0xf2>
      return HAL_ERROR;
 800132e:	2001      	movs	r0, #1
}
 8001330:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001332:	6823      	ldr	r3, [r4, #0]
 8001334:	f013 0f04 	tst.w	r3, #4
 8001338:	d006      	beq.n	8001348 <HAL_RCC_ClockConfig+0x108>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800133a:	4a14      	ldr	r2, [pc, #80]	; (800138c <HAL_RCC_ClockConfig+0x14c>)
 800133c:	6893      	ldr	r3, [r2, #8]
 800133e:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001342:	68e1      	ldr	r1, [r4, #12]
 8001344:	430b      	orrs	r3, r1
 8001346:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001348:	6823      	ldr	r3, [r4, #0]
 800134a:	f013 0f08 	tst.w	r3, #8
 800134e:	d007      	beq.n	8001360 <HAL_RCC_ClockConfig+0x120>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001350:	4a0e      	ldr	r2, [pc, #56]	; (800138c <HAL_RCC_ClockConfig+0x14c>)
 8001352:	6893      	ldr	r3, [r2, #8]
 8001354:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001358:	6921      	ldr	r1, [r4, #16]
 800135a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800135e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001360:	f7ff ff04 	bl	800116c <HAL_RCC_GetSysClockFreq>
 8001364:	4b09      	ldr	r3, [pc, #36]	; (800138c <HAL_RCC_ClockConfig+0x14c>)
 8001366:	689b      	ldr	r3, [r3, #8]
 8001368:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800136c:	4a08      	ldr	r2, [pc, #32]	; (8001390 <HAL_RCC_ClockConfig+0x150>)
 800136e:	5cd3      	ldrb	r3, [r2, r3]
 8001370:	40d8      	lsrs	r0, r3
 8001372:	4b08      	ldr	r3, [pc, #32]	; (8001394 <HAL_RCC_ClockConfig+0x154>)
 8001374:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001376:	2000      	movs	r0, #0
 8001378:	f001 ffa0 	bl	80032bc <HAL_InitTick>
  return HAL_OK;
 800137c:	2000      	movs	r0, #0
 800137e:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8001380:	2001      	movs	r0, #1
 8001382:	4770      	bx	lr
        return HAL_ERROR;
 8001384:	2001      	movs	r0, #1
 8001386:	bd70      	pop	{r4, r5, r6, pc}
 8001388:	40023c00 	.word	0x40023c00
 800138c:	40023800 	.word	0x40023800
 8001390:	080036c8 	.word	0x080036c8
 8001394:	20000008 	.word	0x20000008

08001398 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001398:	4b01      	ldr	r3, [pc, #4]	; (80013a0 <HAL_RCC_GetHCLKFreq+0x8>)
 800139a:	6818      	ldr	r0, [r3, #0]
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	20000008 	.word	0x20000008

080013a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80013a4:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80013a6:	f7ff fff7 	bl	8001398 <HAL_RCC_GetHCLKFreq>
 80013aa:	4b04      	ldr	r3, [pc, #16]	; (80013bc <HAL_RCC_GetPCLK1Freq+0x18>)
 80013ac:	689b      	ldr	r3, [r3, #8]
 80013ae:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80013b2:	4a03      	ldr	r2, [pc, #12]	; (80013c0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80013b4:	5cd3      	ldrb	r3, [r2, r3]
}
 80013b6:	40d8      	lsrs	r0, r3
 80013b8:	bd08      	pop	{r3, pc}
 80013ba:	bf00      	nop
 80013bc:	40023800 	.word	0x40023800
 80013c0:	080036d8 	.word	0x080036d8

080013c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80013c4:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80013c6:	f7ff ffe7 	bl	8001398 <HAL_RCC_GetHCLKFreq>
 80013ca:	4b04      	ldr	r3, [pc, #16]	; (80013dc <HAL_RCC_GetPCLK2Freq+0x18>)
 80013cc:	689b      	ldr	r3, [r3, #8]
 80013ce:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80013d2:	4a03      	ldr	r2, [pc, #12]	; (80013e0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80013d4:	5cd3      	ldrb	r3, [r2, r3]
}
 80013d6:	40d8      	lsrs	r0, r3
 80013d8:	bd08      	pop	{r3, pc}
 80013da:	bf00      	nop
 80013dc:	40023800 	.word	0x40023800
 80013e0:	080036d8 	.word	0x080036d8

080013e4 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80013e4:	230f      	movs	r3, #15
 80013e6:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80013e8:	4b0b      	ldr	r3, [pc, #44]	; (8001418 <HAL_RCC_GetClockConfig+0x34>)
 80013ea:	689a      	ldr	r2, [r3, #8]
 80013ec:	f002 0203 	and.w	r2, r2, #3
 80013f0:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80013f2:	689a      	ldr	r2, [r3, #8]
 80013f4:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80013f8:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80013fa:	689a      	ldr	r2, [r3, #8]
 80013fc:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8001400:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001402:	689b      	ldr	r3, [r3, #8]
 8001404:	08db      	lsrs	r3, r3, #3
 8001406:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800140a:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800140c:	4b03      	ldr	r3, [pc, #12]	; (800141c <HAL_RCC_GetClockConfig+0x38>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f003 030f 	and.w	r3, r3, #15
 8001414:	600b      	str	r3, [r1, #0]
 8001416:	4770      	bx	lr
 8001418:	40023800 	.word	0x40023800
 800141c:	40023c00 	.word	0x40023c00

08001420 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001420:	4770      	bx	lr

08001422 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001422:	6802      	ldr	r2, [r0, #0]
 8001424:	68d3      	ldr	r3, [r2, #12]
 8001426:	f043 0301 	orr.w	r3, r3, #1
 800142a:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800142c:	6802      	ldr	r2, [r0, #0]
 800142e:	6893      	ldr	r3, [r2, #8]
 8001430:	f003 0307 	and.w	r3, r3, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001434:	2b06      	cmp	r3, #6
 8001436:	d003      	beq.n	8001440 <HAL_TIM_Base_Start_IT+0x1e>
  {
    __HAL_TIM_ENABLE(htim);
 8001438:	6813      	ldr	r3, [r2, #0]
 800143a:	f043 0301 	orr.w	r3, r3, #1
 800143e:	6013      	str	r3, [r2, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 8001440:	2000      	movs	r0, #0
 8001442:	4770      	bx	lr

08001444 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001444:	4770      	bx	lr

08001446 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001446:	4770      	bx	lr

08001448 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001448:	4770      	bx	lr

0800144a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800144a:	4770      	bx	lr

0800144c <HAL_TIM_IRQHandler>:
{
 800144c:	b510      	push	{r4, lr}
 800144e:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001450:	6803      	ldr	r3, [r0, #0]
 8001452:	691a      	ldr	r2, [r3, #16]
 8001454:	f012 0f02 	tst.w	r2, #2
 8001458:	d011      	beq.n	800147e <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800145a:	68da      	ldr	r2, [r3, #12]
 800145c:	f012 0f02 	tst.w	r2, #2
 8001460:	d00d      	beq.n	800147e <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001462:	f06f 0202 	mvn.w	r2, #2
 8001466:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001468:	2301      	movs	r3, #1
 800146a:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800146c:	6803      	ldr	r3, [r0, #0]
 800146e:	699b      	ldr	r3, [r3, #24]
 8001470:	f013 0f03 	tst.w	r3, #3
 8001474:	d070      	beq.n	8001558 <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 8001476:	f7ff ffe6 	bl	8001446 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800147a:	2300      	movs	r3, #0
 800147c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800147e:	6823      	ldr	r3, [r4, #0]
 8001480:	691a      	ldr	r2, [r3, #16]
 8001482:	f012 0f04 	tst.w	r2, #4
 8001486:	d012      	beq.n	80014ae <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001488:	68da      	ldr	r2, [r3, #12]
 800148a:	f012 0f04 	tst.w	r2, #4
 800148e:	d00e      	beq.n	80014ae <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001490:	f06f 0204 	mvn.w	r2, #4
 8001494:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001496:	2302      	movs	r3, #2
 8001498:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800149a:	6823      	ldr	r3, [r4, #0]
 800149c:	699b      	ldr	r3, [r3, #24]
 800149e:	f413 7f40 	tst.w	r3, #768	; 0x300
 80014a2:	d05f      	beq.n	8001564 <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 80014a4:	4620      	mov	r0, r4
 80014a6:	f7ff ffce 	bl	8001446 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80014aa:	2300      	movs	r3, #0
 80014ac:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80014ae:	6823      	ldr	r3, [r4, #0]
 80014b0:	691a      	ldr	r2, [r3, #16]
 80014b2:	f012 0f08 	tst.w	r2, #8
 80014b6:	d012      	beq.n	80014de <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80014b8:	68da      	ldr	r2, [r3, #12]
 80014ba:	f012 0f08 	tst.w	r2, #8
 80014be:	d00e      	beq.n	80014de <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80014c0:	f06f 0208 	mvn.w	r2, #8
 80014c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80014c6:	2304      	movs	r3, #4
 80014c8:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80014ca:	6823      	ldr	r3, [r4, #0]
 80014cc:	69db      	ldr	r3, [r3, #28]
 80014ce:	f013 0f03 	tst.w	r3, #3
 80014d2:	d04e      	beq.n	8001572 <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 80014d4:	4620      	mov	r0, r4
 80014d6:	f7ff ffb6 	bl	8001446 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80014da:	2300      	movs	r3, #0
 80014dc:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80014de:	6823      	ldr	r3, [r4, #0]
 80014e0:	691a      	ldr	r2, [r3, #16]
 80014e2:	f012 0f10 	tst.w	r2, #16
 80014e6:	d012      	beq.n	800150e <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80014e8:	68da      	ldr	r2, [r3, #12]
 80014ea:	f012 0f10 	tst.w	r2, #16
 80014ee:	d00e      	beq.n	800150e <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80014f0:	f06f 0210 	mvn.w	r2, #16
 80014f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80014f6:	2308      	movs	r3, #8
 80014f8:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80014fa:	6823      	ldr	r3, [r4, #0]
 80014fc:	69db      	ldr	r3, [r3, #28]
 80014fe:	f413 7f40 	tst.w	r3, #768	; 0x300
 8001502:	d03d      	beq.n	8001580 <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 8001504:	4620      	mov	r0, r4
 8001506:	f7ff ff9e 	bl	8001446 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800150a:	2300      	movs	r3, #0
 800150c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800150e:	6823      	ldr	r3, [r4, #0]
 8001510:	691a      	ldr	r2, [r3, #16]
 8001512:	f012 0f01 	tst.w	r2, #1
 8001516:	d003      	beq.n	8001520 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001518:	68da      	ldr	r2, [r3, #12]
 800151a:	f012 0f01 	tst.w	r2, #1
 800151e:	d136      	bne.n	800158e <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001520:	6823      	ldr	r3, [r4, #0]
 8001522:	691a      	ldr	r2, [r3, #16]
 8001524:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001528:	d003      	beq.n	8001532 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800152a:	68da      	ldr	r2, [r3, #12]
 800152c:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001530:	d134      	bne.n	800159c <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001532:	6823      	ldr	r3, [r4, #0]
 8001534:	691a      	ldr	r2, [r3, #16]
 8001536:	f012 0f40 	tst.w	r2, #64	; 0x40
 800153a:	d003      	beq.n	8001544 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800153c:	68da      	ldr	r2, [r3, #12]
 800153e:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001542:	d132      	bne.n	80015aa <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001544:	6823      	ldr	r3, [r4, #0]
 8001546:	691a      	ldr	r2, [r3, #16]
 8001548:	f012 0f20 	tst.w	r2, #32
 800154c:	d003      	beq.n	8001556 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800154e:	68da      	ldr	r2, [r3, #12]
 8001550:	f012 0f20 	tst.w	r2, #32
 8001554:	d130      	bne.n	80015b8 <HAL_TIM_IRQHandler+0x16c>
 8001556:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001558:	f7ff ff74 	bl	8001444 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800155c:	4620      	mov	r0, r4
 800155e:	f7ff ff73 	bl	8001448 <HAL_TIM_PWM_PulseFinishedCallback>
 8001562:	e78a      	b.n	800147a <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001564:	4620      	mov	r0, r4
 8001566:	f7ff ff6d 	bl	8001444 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800156a:	4620      	mov	r0, r4
 800156c:	f7ff ff6c 	bl	8001448 <HAL_TIM_PWM_PulseFinishedCallback>
 8001570:	e79b      	b.n	80014aa <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001572:	4620      	mov	r0, r4
 8001574:	f7ff ff66 	bl	8001444 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001578:	4620      	mov	r0, r4
 800157a:	f7ff ff65 	bl	8001448 <HAL_TIM_PWM_PulseFinishedCallback>
 800157e:	e7ac      	b.n	80014da <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001580:	4620      	mov	r0, r4
 8001582:	f7ff ff5f 	bl	8001444 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001586:	4620      	mov	r0, r4
 8001588:	f7ff ff5e 	bl	8001448 <HAL_TIM_PWM_PulseFinishedCallback>
 800158c:	e7bd      	b.n	800150a <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800158e:	f06f 0201 	mvn.w	r2, #1
 8001592:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001594:	4620      	mov	r0, r4
 8001596:	f001 fe61 	bl	800325c <HAL_TIM_PeriodElapsedCallback>
 800159a:	e7c1      	b.n	8001520 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800159c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80015a0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80015a2:	4620      	mov	r0, r4
 80015a4:	f000 f890 	bl	80016c8 <HAL_TIMEx_BreakCallback>
 80015a8:	e7c3      	b.n	8001532 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80015aa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80015ae:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80015b0:	4620      	mov	r0, r4
 80015b2:	f7ff ff4a 	bl	800144a <HAL_TIM_TriggerCallback>
 80015b6:	e7c5      	b.n	8001544 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80015b8:	f06f 0220 	mvn.w	r2, #32
 80015bc:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80015be:	4620      	mov	r0, r4
 80015c0:	f000 f881 	bl	80016c6 <HAL_TIMEx_CommutCallback>
}
 80015c4:	e7c7      	b.n	8001556 <HAL_TIM_IRQHandler+0x10a>
	...

080015c8 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80015c8:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80015ca:	4a31      	ldr	r2, [pc, #196]	; (8001690 <TIM_Base_SetConfig+0xc8>)
 80015cc:	4290      	cmp	r0, r2
 80015ce:	d012      	beq.n	80015f6 <TIM_Base_SetConfig+0x2e>
 80015d0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80015d4:	d00f      	beq.n	80015f6 <TIM_Base_SetConfig+0x2e>
 80015d6:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80015da:	4290      	cmp	r0, r2
 80015dc:	d00b      	beq.n	80015f6 <TIM_Base_SetConfig+0x2e>
 80015de:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80015e2:	4290      	cmp	r0, r2
 80015e4:	d007      	beq.n	80015f6 <TIM_Base_SetConfig+0x2e>
 80015e6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80015ea:	4290      	cmp	r0, r2
 80015ec:	d003      	beq.n	80015f6 <TIM_Base_SetConfig+0x2e>
 80015ee:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80015f2:	4290      	cmp	r0, r2
 80015f4:	d103      	bne.n	80015fe <TIM_Base_SetConfig+0x36>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80015f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80015fa:	684a      	ldr	r2, [r1, #4]
 80015fc:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80015fe:	4a24      	ldr	r2, [pc, #144]	; (8001690 <TIM_Base_SetConfig+0xc8>)
 8001600:	4290      	cmp	r0, r2
 8001602:	d02a      	beq.n	800165a <TIM_Base_SetConfig+0x92>
 8001604:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001608:	d027      	beq.n	800165a <TIM_Base_SetConfig+0x92>
 800160a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800160e:	4290      	cmp	r0, r2
 8001610:	d023      	beq.n	800165a <TIM_Base_SetConfig+0x92>
 8001612:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001616:	4290      	cmp	r0, r2
 8001618:	d01f      	beq.n	800165a <TIM_Base_SetConfig+0x92>
 800161a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800161e:	4290      	cmp	r0, r2
 8001620:	d01b      	beq.n	800165a <TIM_Base_SetConfig+0x92>
 8001622:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001626:	4290      	cmp	r0, r2
 8001628:	d017      	beq.n	800165a <TIM_Base_SetConfig+0x92>
 800162a:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800162e:	4290      	cmp	r0, r2
 8001630:	d013      	beq.n	800165a <TIM_Base_SetConfig+0x92>
 8001632:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001636:	4290      	cmp	r0, r2
 8001638:	d00f      	beq.n	800165a <TIM_Base_SetConfig+0x92>
 800163a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800163e:	4290      	cmp	r0, r2
 8001640:	d00b      	beq.n	800165a <TIM_Base_SetConfig+0x92>
 8001642:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8001646:	4290      	cmp	r0, r2
 8001648:	d007      	beq.n	800165a <TIM_Base_SetConfig+0x92>
 800164a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800164e:	4290      	cmp	r0, r2
 8001650:	d003      	beq.n	800165a <TIM_Base_SetConfig+0x92>
 8001652:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001656:	4290      	cmp	r0, r2
 8001658:	d103      	bne.n	8001662 <TIM_Base_SetConfig+0x9a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800165a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800165e:	68ca      	ldr	r2, [r1, #12]
 8001660:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001662:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001666:	694a      	ldr	r2, [r1, #20]
 8001668:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800166a:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800166c:	688b      	ldr	r3, [r1, #8]
 800166e:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001670:	680b      	ldr	r3, [r1, #0]
 8001672:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001674:	4b06      	ldr	r3, [pc, #24]	; (8001690 <TIM_Base_SetConfig+0xc8>)
 8001676:	4298      	cmp	r0, r3
 8001678:	d006      	beq.n	8001688 <TIM_Base_SetConfig+0xc0>
 800167a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800167e:	4298      	cmp	r0, r3
 8001680:	d002      	beq.n	8001688 <TIM_Base_SetConfig+0xc0>
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001682:	2301      	movs	r3, #1
 8001684:	6143      	str	r3, [r0, #20]
 8001686:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8001688:	690b      	ldr	r3, [r1, #16]
 800168a:	6303      	str	r3, [r0, #48]	; 0x30
 800168c:	e7f9      	b.n	8001682 <TIM_Base_SetConfig+0xba>
 800168e:	bf00      	nop
 8001690:	40010000 	.word	0x40010000

08001694 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8001694:	b1a8      	cbz	r0, 80016c2 <HAL_TIM_Base_Init+0x2e>
{
 8001696:	b510      	push	{r4, lr}
 8001698:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800169a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800169e:	b15b      	cbz	r3, 80016b8 <HAL_TIM_Base_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 80016a0:	2302      	movs	r3, #2
 80016a2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80016a6:	1d21      	adds	r1, r4, #4
 80016a8:	6820      	ldr	r0, [r4, #0]
 80016aa:	f7ff ff8d 	bl	80015c8 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80016ae:	2301      	movs	r3, #1
 80016b0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80016b4:	2000      	movs	r0, #0
 80016b6:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80016b8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80016bc:	f7ff feb0 	bl	8001420 <HAL_TIM_Base_MspInit>
 80016c0:	e7ee      	b.n	80016a0 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 80016c2:	2001      	movs	r0, #1
 80016c4:	4770      	bx	lr

080016c6 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80016c6:	4770      	bx	lr

080016c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80016c8:	4770      	bx	lr
	...

080016cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80016cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80016d0:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80016d2:	6802      	ldr	r2, [r0, #0]
 80016d4:	6913      	ldr	r3, [r2, #16]
 80016d6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80016da:	68c1      	ldr	r1, [r0, #12]
 80016dc:	430b      	orrs	r3, r1
 80016de:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80016e0:	6883      	ldr	r3, [r0, #8]
 80016e2:	6902      	ldr	r2, [r0, #16]
 80016e4:	4313      	orrs	r3, r2
 80016e6:	6942      	ldr	r2, [r0, #20]
 80016e8:	4313      	orrs	r3, r2
 80016ea:	69c2      	ldr	r2, [r0, #28]
 80016ec:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1,
 80016ee:	6801      	ldr	r1, [r0, #0]
 80016f0:	68ca      	ldr	r2, [r1, #12]
 80016f2:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
 80016f6:	f022 020c 	bic.w	r2, r2, #12
 80016fa:	4313      	orrs	r3, r2
 80016fc:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80016fe:	6802      	ldr	r2, [r0, #0]
 8001700:	6953      	ldr	r3, [r2, #20]
 8001702:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001706:	6981      	ldr	r1, [r0, #24]
 8001708:	430b      	orrs	r3, r1
 800170a:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800170c:	69c3      	ldr	r3, [r0, #28]
 800170e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001712:	d062      	beq.n	80017da <UART_SetConfig+0x10e>
  }
  else
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001714:	f8d0 8000 	ldr.w	r8, [r0]
 8001718:	4bbb      	ldr	r3, [pc, #748]	; (8001a08 <UART_SetConfig+0x33c>)
 800171a:	4598      	cmp	r8, r3
 800171c:	f000 811b 	beq.w	8001956 <UART_SetConfig+0x28a>
 8001720:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001724:	4598      	cmp	r8, r3
 8001726:	f000 8116 	beq.w	8001956 <UART_SetConfig+0x28a>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800172a:	f7ff fe3b 	bl	80013a4 <HAL_RCC_GetPCLK1Freq>
 800172e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001732:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001736:	6865      	ldr	r5, [r4, #4]
 8001738:	00ad      	lsls	r5, r5, #2
 800173a:	fbb0 f5f5 	udiv	r5, r0, r5
 800173e:	4fb3      	ldr	r7, [pc, #716]	; (8001a0c <UART_SetConfig+0x340>)
 8001740:	fba7 3505 	umull	r3, r5, r7, r5
 8001744:	096d      	lsrs	r5, r5, #5
 8001746:	012e      	lsls	r6, r5, #4
 8001748:	f7ff fe2c 	bl	80013a4 <HAL_RCC_GetPCLK1Freq>
 800174c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001750:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001754:	6865      	ldr	r5, [r4, #4]
 8001756:	00ad      	lsls	r5, r5, #2
 8001758:	fbb0 faf5 	udiv	sl, r0, r5
 800175c:	f7ff fe22 	bl	80013a4 <HAL_RCC_GetPCLK1Freq>
 8001760:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001764:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001768:	6865      	ldr	r5, [r4, #4]
 800176a:	00ad      	lsls	r5, r5, #2
 800176c:	fbb0 f5f5 	udiv	r5, r0, r5
 8001770:	fba7 3505 	umull	r3, r5, r7, r5
 8001774:	096d      	lsrs	r5, r5, #5
 8001776:	f04f 0964 	mov.w	r9, #100	; 0x64
 800177a:	fb09 a515 	mls	r5, r9, r5, sl
 800177e:	012d      	lsls	r5, r5, #4
 8001780:	3532      	adds	r5, #50	; 0x32
 8001782:	fba7 3505 	umull	r3, r5, r7, r5
 8001786:	096d      	lsrs	r5, r5, #5
 8001788:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 800178c:	4435      	add	r5, r6
 800178e:	f7ff fe09 	bl	80013a4 <HAL_RCC_GetPCLK1Freq>
 8001792:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001796:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800179a:	6866      	ldr	r6, [r4, #4]
 800179c:	00b6      	lsls	r6, r6, #2
 800179e:	fbb0 f6f6 	udiv	r6, r0, r6
 80017a2:	f7ff fdff 	bl	80013a4 <HAL_RCC_GetPCLK1Freq>
 80017a6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80017aa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80017ae:	6863      	ldr	r3, [r4, #4]
 80017b0:	009b      	lsls	r3, r3, #2
 80017b2:	fbb0 f0f3 	udiv	r0, r0, r3
 80017b6:	fba7 3000 	umull	r3, r0, r7, r0
 80017ba:	0940      	lsrs	r0, r0, #5
 80017bc:	fb09 6910 	mls	r9, r9, r0, r6
 80017c0:	ea4f 1909 	mov.w	r9, r9, lsl #4
 80017c4:	f109 0932 	add.w	r9, r9, #50	; 0x32
 80017c8:	fba7 3709 	umull	r3, r7, r7, r9
 80017cc:	f3c7 1743 	ubfx	r7, r7, #5, #4
 80017d0:	442f      	add	r7, r5
 80017d2:	f8c8 7008 	str.w	r7, [r8, #8]
 80017d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80017da:	f8d0 8000 	ldr.w	r8, [r0]
 80017de:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80017e2:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
 80017e6:	4598      	cmp	r8, r3
 80017e8:	d05c      	beq.n	80018a4 <UART_SetConfig+0x1d8>
 80017ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80017ee:	4598      	cmp	r8, r3
 80017f0:	d058      	beq.n	80018a4 <UART_SetConfig+0x1d8>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80017f2:	f7ff fdd7 	bl	80013a4 <HAL_RCC_GetPCLK1Freq>
 80017f6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80017fa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80017fe:	6865      	ldr	r5, [r4, #4]
 8001800:	006d      	lsls	r5, r5, #1
 8001802:	fbb0 f5f5 	udiv	r5, r0, r5
 8001806:	4f81      	ldr	r7, [pc, #516]	; (8001a0c <UART_SetConfig+0x340>)
 8001808:	fba7 3505 	umull	r3, r5, r7, r5
 800180c:	096d      	lsrs	r5, r5, #5
 800180e:	012e      	lsls	r6, r5, #4
 8001810:	f7ff fdc8 	bl	80013a4 <HAL_RCC_GetPCLK1Freq>
 8001814:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001818:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800181c:	6865      	ldr	r5, [r4, #4]
 800181e:	006d      	lsls	r5, r5, #1
 8001820:	fbb0 faf5 	udiv	sl, r0, r5
 8001824:	f7ff fdbe 	bl	80013a4 <HAL_RCC_GetPCLK1Freq>
 8001828:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800182c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001830:	6865      	ldr	r5, [r4, #4]
 8001832:	006d      	lsls	r5, r5, #1
 8001834:	fbb0 f5f5 	udiv	r5, r0, r5
 8001838:	fba7 3505 	umull	r3, r5, r7, r5
 800183c:	096d      	lsrs	r5, r5, #5
 800183e:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001842:	fb09 a515 	mls	r5, r9, r5, sl
 8001846:	00ed      	lsls	r5, r5, #3
 8001848:	3532      	adds	r5, #50	; 0x32
 800184a:	fba7 3505 	umull	r3, r5, r7, r5
 800184e:	096d      	lsrs	r5, r5, #5
 8001850:	006d      	lsls	r5, r5, #1
 8001852:	f405 75f8 	and.w	r5, r5, #496	; 0x1f0
 8001856:	4435      	add	r5, r6
 8001858:	f7ff fda4 	bl	80013a4 <HAL_RCC_GetPCLK1Freq>
 800185c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001860:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001864:	6866      	ldr	r6, [r4, #4]
 8001866:	0076      	lsls	r6, r6, #1
 8001868:	fbb0 f6f6 	udiv	r6, r0, r6
 800186c:	f7ff fd9a 	bl	80013a4 <HAL_RCC_GetPCLK1Freq>
 8001870:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001874:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001878:	6863      	ldr	r3, [r4, #4]
 800187a:	005b      	lsls	r3, r3, #1
 800187c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001880:	fba7 2303 	umull	r2, r3, r7, r3
 8001884:	095b      	lsrs	r3, r3, #5
 8001886:	fb09 6913 	mls	r9, r9, r3, r6
 800188a:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 800188e:	f109 0932 	add.w	r9, r9, #50	; 0x32
 8001892:	fba7 3709 	umull	r3, r7, r7, r9
 8001896:	f3c7 1742 	ubfx	r7, r7, #5, #3
 800189a:	442f      	add	r7, r5
 800189c:	f8c8 7008 	str.w	r7, [r8, #8]
 80018a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80018a4:	f7ff fd8e 	bl	80013c4 <HAL_RCC_GetPCLK2Freq>
 80018a8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80018ac:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80018b0:	6865      	ldr	r5, [r4, #4]
 80018b2:	006d      	lsls	r5, r5, #1
 80018b4:	fbb0 f5f5 	udiv	r5, r0, r5
 80018b8:	4f54      	ldr	r7, [pc, #336]	; (8001a0c <UART_SetConfig+0x340>)
 80018ba:	fba7 3505 	umull	r3, r5, r7, r5
 80018be:	096d      	lsrs	r5, r5, #5
 80018c0:	012e      	lsls	r6, r5, #4
 80018c2:	f7ff fd7f 	bl	80013c4 <HAL_RCC_GetPCLK2Freq>
 80018c6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80018ca:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80018ce:	6865      	ldr	r5, [r4, #4]
 80018d0:	006d      	lsls	r5, r5, #1
 80018d2:	fbb0 faf5 	udiv	sl, r0, r5
 80018d6:	f7ff fd75 	bl	80013c4 <HAL_RCC_GetPCLK2Freq>
 80018da:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80018de:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80018e2:	6865      	ldr	r5, [r4, #4]
 80018e4:	006d      	lsls	r5, r5, #1
 80018e6:	fbb0 f5f5 	udiv	r5, r0, r5
 80018ea:	fba7 3505 	umull	r3, r5, r7, r5
 80018ee:	096d      	lsrs	r5, r5, #5
 80018f0:	f04f 0964 	mov.w	r9, #100	; 0x64
 80018f4:	fb09 a515 	mls	r5, r9, r5, sl
 80018f8:	00ed      	lsls	r5, r5, #3
 80018fa:	3532      	adds	r5, #50	; 0x32
 80018fc:	fba7 3505 	umull	r3, r5, r7, r5
 8001900:	096d      	lsrs	r5, r5, #5
 8001902:	006d      	lsls	r5, r5, #1
 8001904:	f405 75f8 	and.w	r5, r5, #496	; 0x1f0
 8001908:	4435      	add	r5, r6
 800190a:	f7ff fd5b 	bl	80013c4 <HAL_RCC_GetPCLK2Freq>
 800190e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001912:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001916:	6866      	ldr	r6, [r4, #4]
 8001918:	0076      	lsls	r6, r6, #1
 800191a:	fbb0 f6f6 	udiv	r6, r0, r6
 800191e:	f7ff fd51 	bl	80013c4 <HAL_RCC_GetPCLK2Freq>
 8001922:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001926:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800192a:	6863      	ldr	r3, [r4, #4]
 800192c:	005b      	lsls	r3, r3, #1
 800192e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001932:	fba7 2303 	umull	r2, r3, r7, r3
 8001936:	095b      	lsrs	r3, r3, #5
 8001938:	fb09 6913 	mls	r9, r9, r3, r6
 800193c:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 8001940:	f109 0932 	add.w	r9, r9, #50	; 0x32
 8001944:	fba7 3709 	umull	r3, r7, r7, r9
 8001948:	f3c7 1742 	ubfx	r7, r7, #5, #3
 800194c:	442f      	add	r7, r5
 800194e:	f8c8 7008 	str.w	r7, [r8, #8]
 8001952:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001956:	f7ff fd35 	bl	80013c4 <HAL_RCC_GetPCLK2Freq>
 800195a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800195e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001962:	6865      	ldr	r5, [r4, #4]
 8001964:	00ad      	lsls	r5, r5, #2
 8001966:	fbb0 f5f5 	udiv	r5, r0, r5
 800196a:	4f28      	ldr	r7, [pc, #160]	; (8001a0c <UART_SetConfig+0x340>)
 800196c:	fba7 3505 	umull	r3, r5, r7, r5
 8001970:	096d      	lsrs	r5, r5, #5
 8001972:	012e      	lsls	r6, r5, #4
 8001974:	f7ff fd26 	bl	80013c4 <HAL_RCC_GetPCLK2Freq>
 8001978:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800197c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001980:	6865      	ldr	r5, [r4, #4]
 8001982:	00ad      	lsls	r5, r5, #2
 8001984:	fbb0 faf5 	udiv	sl, r0, r5
 8001988:	f7ff fd1c 	bl	80013c4 <HAL_RCC_GetPCLK2Freq>
 800198c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001990:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001994:	6865      	ldr	r5, [r4, #4]
 8001996:	00ad      	lsls	r5, r5, #2
 8001998:	fbb0 f5f5 	udiv	r5, r0, r5
 800199c:	fba7 3505 	umull	r3, r5, r7, r5
 80019a0:	096d      	lsrs	r5, r5, #5
 80019a2:	f04f 0964 	mov.w	r9, #100	; 0x64
 80019a6:	fb09 a515 	mls	r5, r9, r5, sl
 80019aa:	012d      	lsls	r5, r5, #4
 80019ac:	3532      	adds	r5, #50	; 0x32
 80019ae:	fba7 3505 	umull	r3, r5, r7, r5
 80019b2:	096d      	lsrs	r5, r5, #5
 80019b4:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 80019b8:	4435      	add	r5, r6
 80019ba:	f7ff fd03 	bl	80013c4 <HAL_RCC_GetPCLK2Freq>
 80019be:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80019c2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80019c6:	6866      	ldr	r6, [r4, #4]
 80019c8:	00b6      	lsls	r6, r6, #2
 80019ca:	fbb0 f6f6 	udiv	r6, r0, r6
 80019ce:	f7ff fcf9 	bl	80013c4 <HAL_RCC_GetPCLK2Freq>
 80019d2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80019d6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80019da:	6863      	ldr	r3, [r4, #4]
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	fbb0 f3f3 	udiv	r3, r0, r3
 80019e2:	fba7 2303 	umull	r2, r3, r7, r3
 80019e6:	095b      	lsrs	r3, r3, #5
 80019e8:	fb09 6913 	mls	r9, r9, r3, r6
 80019ec:	ea4f 1909 	mov.w	r9, r9, lsl #4
 80019f0:	f109 0932 	add.w	r9, r9, #50	; 0x32
 80019f4:	fba7 3709 	umull	r3, r7, r7, r9
 80019f8:	f3c7 1743 	ubfx	r7, r7, #5, #4
 80019fc:	442f      	add	r7, r5
 80019fe:	f8c8 7008 	str.w	r7, [r8, #8]
 8001a02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001a06:	bf00      	nop
 8001a08:	40011000 	.word	0x40011000
 8001a0c:	51eb851f 	.word	0x51eb851f

08001a10 <HAL_UART_Init>:
  if (huart == NULL)
 8001a10:	b358      	cbz	r0, 8001a6a <HAL_UART_Init+0x5a>
{
 8001a12:	b510      	push	{r4, lr}
 8001a14:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8001a16:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001a1a:	b30b      	cbz	r3, 8001a60 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8001a1c:	2324      	movs	r3, #36	; 0x24
 8001a1e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001a22:	6822      	ldr	r2, [r4, #0]
 8001a24:	68d3      	ldr	r3, [r2, #12]
 8001a26:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001a2a:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001a2c:	4620      	mov	r0, r4
 8001a2e:	f7ff fe4d 	bl	80016cc <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001a32:	6822      	ldr	r2, [r4, #0]
 8001a34:	6913      	ldr	r3, [r2, #16]
 8001a36:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001a3a:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001a3c:	6822      	ldr	r2, [r4, #0]
 8001a3e:	6953      	ldr	r3, [r2, #20]
 8001a40:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8001a44:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8001a46:	6822      	ldr	r2, [r4, #0]
 8001a48:	68d3      	ldr	r3, [r2, #12]
 8001a4a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001a4e:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a50:	2000      	movs	r0, #0
 8001a52:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001a54:	2320      	movs	r3, #32
 8001a56:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001a5a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8001a5e:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8001a60:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001a64:	f001 fcd2 	bl	800340c <HAL_UART_MspInit>
 8001a68:	e7d8      	b.n	8001a1c <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8001a6a:	2001      	movs	r0, #1
 8001a6c:	4770      	bx	lr
	...

08001a70 <USB_CoreReset>:
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t count = 0U;
 8001a70:	2300      	movs	r3, #0

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8001a72:	3301      	adds	r3, #1
 8001a74:	4a0c      	ldr	r2, [pc, #48]	; (8001aa8 <USB_CoreReset+0x38>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d811      	bhi.n	8001a9e <USB_CoreReset+0x2e>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8001a7a:	6902      	ldr	r2, [r0, #16]
 8001a7c:	2a00      	cmp	r2, #0
 8001a7e:	daf8      	bge.n	8001a72 <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8001a80:	6903      	ldr	r3, [r0, #16]
 8001a82:	f043 0301 	orr.w	r3, r3, #1
 8001a86:	6103      	str	r3, [r0, #16]
  count = 0U;
 8001a88:	2300      	movs	r3, #0

  do
  {
    if (++count > 200000U)
 8001a8a:	3301      	adds	r3, #1
 8001a8c:	4a06      	ldr	r2, [pc, #24]	; (8001aa8 <USB_CoreReset+0x38>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d807      	bhi.n	8001aa2 <USB_CoreReset+0x32>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8001a92:	6902      	ldr	r2, [r0, #16]
 8001a94:	f012 0f01 	tst.w	r2, #1
 8001a98:	d1f7      	bne.n	8001a8a <USB_CoreReset+0x1a>

  return HAL_OK;
 8001a9a:	2000      	movs	r0, #0
 8001a9c:	4770      	bx	lr
      return HAL_TIMEOUT;
 8001a9e:	2003      	movs	r0, #3
 8001aa0:	4770      	bx	lr
      return HAL_TIMEOUT;
 8001aa2:	2003      	movs	r0, #3
}
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	00030d40 	.word	0x00030d40

08001aac <USB_CoreInit>:
{
 8001aac:	b084      	sub	sp, #16
 8001aae:	b510      	push	{r4, lr}
 8001ab0:	4604      	mov	r4, r0
 8001ab2:	a803      	add	r0, sp, #12
 8001ab4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8001ab8:	9b08      	ldr	r3, [sp, #32]
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d00d      	beq.n	8001ada <USB_CoreInit+0x2e>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8001abe:	68e3      	ldr	r3, [r4, #12]
 8001ac0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ac4:	60e3      	str	r3, [r4, #12]
    ret = USB_CoreReset(USBx);
 8001ac6:	4620      	mov	r0, r4
 8001ac8:	f7ff ffd2 	bl	8001a70 <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 8001acc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001ace:	bb23      	cbnz	r3, 8001b1a <USB_CoreInit+0x6e>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001ad0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001ad2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ad6:	63a3      	str	r3, [r4, #56]	; 0x38
 8001ad8:	e013      	b.n	8001b02 <USB_CoreInit+0x56>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8001ada:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001adc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ae0:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8001ae2:	68e3      	ldr	r3, [r4, #12]
 8001ae4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8001ae8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001aec:	60e3      	str	r3, [r4, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8001aee:	68e3      	ldr	r3, [r4, #12]
 8001af0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8001af4:	60e3      	str	r3, [r4, #12]
    if (cfg.use_external_vbus == 1U)
 8001af6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	d009      	beq.n	8001b10 <USB_CoreInit+0x64>
    ret = USB_CoreReset(USBx);
 8001afc:	4620      	mov	r0, r4
 8001afe:	f7ff ffb7 	bl	8001a70 <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 8001b02:	9b06      	ldr	r3, [sp, #24]
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d00d      	beq.n	8001b24 <USB_CoreInit+0x78>
}
 8001b08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001b0c:	b004      	add	sp, #16
 8001b0e:	4770      	bx	lr
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8001b10:	68e3      	ldr	r3, [r4, #12]
 8001b12:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001b16:	60e3      	str	r3, [r4, #12]
 8001b18:	e7f0      	b.n	8001afc <USB_CoreInit+0x50>
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8001b1a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001b1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b20:	63a3      	str	r3, [r4, #56]	; 0x38
 8001b22:	e7ee      	b.n	8001b02 <USB_CoreInit+0x56>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8001b24:	68a3      	ldr	r3, [r4, #8]
 8001b26:	f043 0306 	orr.w	r3, r3, #6
 8001b2a:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8001b2c:	68a3      	ldr	r3, [r4, #8]
 8001b2e:	f043 0320 	orr.w	r3, r3, #32
 8001b32:	60a3      	str	r3, [r4, #8]
 8001b34:	e7e8      	b.n	8001b08 <USB_CoreInit+0x5c>

08001b36 <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8001b36:	6883      	ldr	r3, [r0, #8]
 8001b38:	f023 0301 	bic.w	r3, r3, #1
 8001b3c:	6083      	str	r3, [r0, #8]
}
 8001b3e:	2000      	movs	r0, #0
 8001b40:	4770      	bx	lr

08001b42 <USB_SetCurrentMode>:
{
 8001b42:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8001b44:	68c3      	ldr	r3, [r0, #12]
 8001b46:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8001b4a:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8001b4c:	2901      	cmp	r1, #1
 8001b4e:	d009      	beq.n	8001b64 <USB_SetCurrentMode+0x22>
  else if (mode == USB_DEVICE_MODE)
 8001b50:	b969      	cbnz	r1, 8001b6e <USB_SetCurrentMode+0x2c>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8001b52:	68c3      	ldr	r3, [r0, #12]
 8001b54:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001b58:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 8001b5a:	2032      	movs	r0, #50	; 0x32
 8001b5c:	f7fe fd04 	bl	8000568 <HAL_Delay>
  return HAL_OK;
 8001b60:	2000      	movs	r0, #0
 8001b62:	bd08      	pop	{r3, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8001b64:	68c3      	ldr	r3, [r0, #12]
 8001b66:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001b6a:	60c3      	str	r3, [r0, #12]
 8001b6c:	e7f5      	b.n	8001b5a <USB_SetCurrentMode+0x18>
    return HAL_ERROR;
 8001b6e:	2001      	movs	r0, #1
}
 8001b70:	bd08      	pop	{r3, pc}
	...

08001b74 <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8001b74:	0189      	lsls	r1, r1, #6
 8001b76:	f041 0120 	orr.w	r1, r1, #32
 8001b7a:	6101      	str	r1, [r0, #16]
  uint32_t count = 0U;
 8001b7c:	2300      	movs	r3, #0
    if (++count > 200000U)
 8001b7e:	3301      	adds	r3, #1
 8001b80:	4a05      	ldr	r2, [pc, #20]	; (8001b98 <USB_FlushTxFifo+0x24>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d805      	bhi.n	8001b92 <USB_FlushTxFifo+0x1e>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8001b86:	6902      	ldr	r2, [r0, #16]
 8001b88:	f012 0f20 	tst.w	r2, #32
 8001b8c:	d1f7      	bne.n	8001b7e <USB_FlushTxFifo+0xa>
  return HAL_OK;
 8001b8e:	2000      	movs	r0, #0
 8001b90:	4770      	bx	lr
      return HAL_TIMEOUT;
 8001b92:	2003      	movs	r0, #3
}
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	00030d40 	.word	0x00030d40

08001b9c <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8001b9c:	2310      	movs	r3, #16
 8001b9e:	6103      	str	r3, [r0, #16]
  uint32_t count = 0;
 8001ba0:	2300      	movs	r3, #0
    if (++count > 200000U)
 8001ba2:	3301      	adds	r3, #1
 8001ba4:	4a05      	ldr	r2, [pc, #20]	; (8001bbc <USB_FlushRxFifo+0x20>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d805      	bhi.n	8001bb6 <USB_FlushRxFifo+0x1a>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8001baa:	6902      	ldr	r2, [r0, #16]
 8001bac:	f012 0f10 	tst.w	r2, #16
 8001bb0:	d1f7      	bne.n	8001ba2 <USB_FlushRxFifo+0x6>
  return HAL_OK;
 8001bb2:	2000      	movs	r0, #0
 8001bb4:	4770      	bx	lr
      return HAL_TIMEOUT;
 8001bb6:	2003      	movs	r0, #3
}
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	00030d40 	.word	0x00030d40

08001bc0 <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 8001bc0:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8001bc4:	4319      	orrs	r1, r3
 8001bc6:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 8001bca:	2000      	movs	r0, #0
 8001bcc:	4770      	bx	lr
	...

08001bd0 <USB_DevInit>:
{
 8001bd0:	b084      	sub	sp, #16
 8001bd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001bd6:	4604      	mov	r4, r0
 8001bd8:	a807      	add	r0, sp, #28
 8001bda:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001bde:	4625      	mov	r5, r4
  for (i = 0U; i < 15U; i++)
 8001be0:	2300      	movs	r3, #0
 8001be2:	e006      	b.n	8001bf2 <USB_DevInit+0x22>
    USBx->DIEPTXF[i] = 0U;
 8001be4:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8001be8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8001bec:	2100      	movs	r1, #0
 8001bee:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 8001bf0:	3301      	adds	r3, #1
 8001bf2:	2b0e      	cmp	r3, #14
 8001bf4:	d9f6      	bls.n	8001be4 <USB_DevInit+0x14>
  if (cfg.vbus_sensing_enable == 0U)
 8001bf6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8001bf8:	bb73      	cbnz	r3, 8001c58 <USB_DevInit+0x88>
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8001bfa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001bfc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c00:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8001c02:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001c04:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8001c08:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8001c0a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001c0c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c10:	63a3      	str	r3, [r4, #56]	; 0x38
  USBx_PCGCCTL = 0U;
 8001c12:	2300      	movs	r3, #0
 8001c14:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8001c18:	f504 6600 	add.w	r6, r4, #2048	; 0x800
 8001c1c:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 8001c20:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8001c24:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	d01f      	beq.n	8001c6a <USB_DevInit+0x9a>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8001c2a:	2103      	movs	r1, #3
 8001c2c:	4620      	mov	r0, r4
 8001c2e:	f7ff ffc7 	bl	8001bc0 <USB_SetDevSpeed>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8001c32:	2110      	movs	r1, #16
 8001c34:	4620      	mov	r0, r4
 8001c36:	f7ff ff9d 	bl	8001b74 <USB_FlushTxFifo>
 8001c3a:	4680      	mov	r8, r0
 8001c3c:	b108      	cbz	r0, 8001c42 <USB_DevInit+0x72>
    ret = HAL_ERROR;
 8001c3e:	f04f 0801 	mov.w	r8, #1
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8001c42:	4620      	mov	r0, r4
 8001c44:	f7ff ffaa 	bl	8001b9c <USB_FlushRxFifo>
 8001c48:	b108      	cbz	r0, 8001c4e <USB_DevInit+0x7e>
    ret = HAL_ERROR;
 8001c4a:	f04f 0801 	mov.w	r8, #1
  USBx_DEVICE->DIEPMSK = 0U;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	6133      	str	r3, [r6, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8001c52:	6173      	str	r3, [r6, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8001c54:	61f3      	str	r3, [r6, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8001c56:	e01f      	b.n	8001c98 <USB_DevInit+0xc8>
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8001c58:	6823      	ldr	r3, [r4, #0]
 8001c5a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001c5e:	6023      	str	r3, [r4, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8001c60:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001c62:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001c66:	63a3      	str	r3, [r4, #56]	; 0x38
 8001c68:	e7d3      	b.n	8001c12 <USB_DevInit+0x42>
    if (cfg.speed == USBD_HS_SPEED)
 8001c6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001c6c:	b923      	cbnz	r3, 8001c78 <USB_DevInit+0xa8>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8001c6e:	2100      	movs	r1, #0
 8001c70:	4620      	mov	r0, r4
 8001c72:	f7ff ffa5 	bl	8001bc0 <USB_SetDevSpeed>
 8001c76:	e7dc      	b.n	8001c32 <USB_DevInit+0x62>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8001c78:	2101      	movs	r1, #1
 8001c7a:	4620      	mov	r0, r4
 8001c7c:	f7ff ffa0 	bl	8001bc0 <USB_SetDevSpeed>
 8001c80:	e7d7      	b.n	8001c32 <USB_DevInit+0x62>
      if (i == 0U)
 8001c82:	b9c3      	cbnz	r3, 8001cb6 <USB_DevInit+0xe6>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8001c84:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8001c88:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	610a      	str	r2, [r1, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8001c90:	f64f 327f 	movw	r2, #64383	; 0xfb7f
 8001c94:	608a      	str	r2, [r1, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8001c96:	3301      	adds	r3, #1
 8001c98:	9907      	ldr	r1, [sp, #28]
 8001c9a:	428b      	cmp	r3, r1
 8001c9c:	d210      	bcs.n	8001cc0 <USB_DevInit+0xf0>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8001c9e:	eb05 1243 	add.w	r2, r5, r3, lsl #5
 8001ca2:	f502 6110 	add.w	r1, r2, #2304	; 0x900
 8001ca6:	f8d2 0900 	ldr.w	r0, [r2, #2304]	; 0x900
 8001caa:	2800      	cmp	r0, #0
 8001cac:	dbe9      	blt.n	8001c82 <USB_DevInit+0xb2>
      USBx_INEP(i)->DIEPCTL = 0U;
 8001cae:	2000      	movs	r0, #0
 8001cb0:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
 8001cb4:	e7ea      	b.n	8001c8c <USB_DevInit+0xbc>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8001cb6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cba:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
 8001cbe:	e7e5      	b.n	8001c8c <USB_DevInit+0xbc>
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	e00a      	b.n	8001cda <USB_DevInit+0x10a>
      if (i == 0U)
 8001cc4:	b1bb      	cbz	r3, 8001cf6 <USB_DevInit+0x126>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8001cc6:	f04f 4790 	mov.w	r7, #1207959552	; 0x48000000
 8001cca:	f8c2 7b00 	str.w	r7, [r2, #2816]	; 0xb00
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8001cce:	2200      	movs	r2, #0
 8001cd0:	6102      	str	r2, [r0, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8001cd2:	f64f 327f 	movw	r2, #64383	; 0xfb7f
 8001cd6:	6082      	str	r2, [r0, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8001cd8:	3301      	adds	r3, #1
 8001cda:	428b      	cmp	r3, r1
 8001cdc:	d210      	bcs.n	8001d00 <USB_DevInit+0x130>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8001cde:	eb05 1243 	add.w	r2, r5, r3, lsl #5
 8001ce2:	f502 6030 	add.w	r0, r2, #2816	; 0xb00
 8001ce6:	f8d2 7b00 	ldr.w	r7, [r2, #2816]	; 0xb00
 8001cea:	2f00      	cmp	r7, #0
 8001cec:	dbea      	blt.n	8001cc4 <USB_DevInit+0xf4>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8001cee:	2700      	movs	r7, #0
 8001cf0:	f8c2 7b00 	str.w	r7, [r2, #2816]	; 0xb00
 8001cf4:	e7eb      	b.n	8001cce <USB_DevInit+0xfe>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8001cf6:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
 8001cfa:	f8c2 7b00 	str.w	r7, [r2, #2816]	; 0xb00
 8001cfe:	e7e6      	b.n	8001cce <USB_DevInit+0xfe>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8001d00:	6933      	ldr	r3, [r6, #16]
 8001d02:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d06:	6133      	str	r3, [r6, #16]
  if (cfg.dma_enable == 1U)
 8001d08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d01b      	beq.n	8001d46 <USB_DevInit+0x176>
  USBx->GINTMSK = 0U;
 8001d0e:	2200      	movs	r2, #0
 8001d10:	61a2      	str	r2, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 8001d12:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8001d16:	6162      	str	r2, [r4, #20]
  if (cfg.dma_enable == 0U)
 8001d18:	b91b      	cbnz	r3, 8001d22 <USB_DevInit+0x152>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8001d1a:	69a3      	ldr	r3, [r4, #24]
 8001d1c:	f043 0310 	orr.w	r3, r3, #16
 8001d20:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8001d22:	69a2      	ldr	r2, [r4, #24]
 8001d24:	4b10      	ldr	r3, [pc, #64]	; (8001d68 <USB_DevInit+0x198>)
 8001d26:	4313      	orrs	r3, r2
 8001d28:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 8001d2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001d2c:	b11b      	cbz	r3, 8001d36 <USB_DevInit+0x166>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8001d2e:	69a3      	ldr	r3, [r4, #24]
 8001d30:	f043 0308 	orr.w	r3, r3, #8
 8001d34:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 8001d36:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d00d      	beq.n	8001d58 <USB_DevInit+0x188>
}
 8001d3c:	4640      	mov	r0, r8
 8001d3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001d42:	b004      	add	sp, #16
 8001d44:	4770      	bx	lr
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 8001d46:	4a09      	ldr	r2, [pc, #36]	; (8001d6c <USB_DevInit+0x19c>)
 8001d48:	6332      	str	r2, [r6, #48]	; 0x30
    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 8001d4a:	6b32      	ldr	r2, [r6, #48]	; 0x30
 8001d4c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001d50:	f042 0203 	orr.w	r2, r2, #3
 8001d54:	6332      	str	r2, [r6, #48]	; 0x30
 8001d56:	e7da      	b.n	8001d0e <USB_DevInit+0x13e>
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8001d58:	69a3      	ldr	r3, [r4, #24]
 8001d5a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001d5e:	f043 0304 	orr.w	r3, r3, #4
 8001d62:	61a3      	str	r3, [r4, #24]
 8001d64:	e7ea      	b.n	8001d3c <USB_DevInit+0x16c>
 8001d66:	bf00      	nop
 8001d68:	803c3800 	.word	0x803c3800
 8001d6c:	00800100 	.word	0x00800100

08001d70 <USB_DevDisconnect>:
{
 8001d70:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8001d72:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8001d76:	f043 0302 	orr.w	r3, r3, #2
 8001d7a:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 8001d7e:	2003      	movs	r0, #3
 8001d80:	f7fe fbf2 	bl	8000568 <HAL_Delay>
}
 8001d84:	2000      	movs	r0, #0
 8001d86:	bd08      	pop	{r3, pc}

08001d88 <makeFreeRtosPriority>:
/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
  
  if (priority != osPriorityError) {
 8001d88:	2884      	cmp	r0, #132	; 0x84
 8001d8a:	d001      	beq.n	8001d90 <makeFreeRtosPriority+0x8>
    fpriority += (priority - osPriorityIdle);
 8001d8c:	3003      	adds	r0, #3
 8001d8e:	4770      	bx	lr
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001d90:	2000      	movs	r0, #0
  }
  
  return fpriority;
}
 8001d92:	4770      	bx	lr

08001d94 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001d94:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8001d96:	f000 fe01 	bl	800299c <vTaskStartScheduler>
  
  return osOK;
}
 8001d9a:	2000      	movs	r0, #0
 8001d9c:	bd08      	pop	{r3, pc}

08001d9e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001d9e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001da2:	b087      	sub	sp, #28
 8001da4:	4604      	mov	r4, r0
 8001da6:	460f      	mov	r7, r1
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8001da8:	6945      	ldr	r5, [r0, #20]
 8001daa:	b1bd      	cbz	r5, 8001ddc <osThreadCreate+0x3e>
 8001dac:	6986      	ldr	r6, [r0, #24]
 8001dae:	b1ae      	cbz	r6, 8001ddc <osThreadCreate+0x3e>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001db0:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8001db4:	f8d0 9000 	ldr.w	r9, [r0]
 8001db8:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 8001dbc:	f7ff ffe4 	bl	8001d88 <makeFreeRtosPriority>
 8001dc0:	6922      	ldr	r2, [r4, #16]
 8001dc2:	9602      	str	r6, [sp, #8]
 8001dc4:	9501      	str	r5, [sp, #4]
 8001dc6:	9000      	str	r0, [sp, #0]
 8001dc8:	463b      	mov	r3, r7
 8001dca:	4649      	mov	r1, r9
 8001dcc:	4640      	mov	r0, r8
 8001dce:	f000 fd79 	bl	80028c4 <xTaskCreateStatic>
 8001dd2:	9005      	str	r0, [sp, #20]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8001dd4:	9805      	ldr	r0, [sp, #20]
}
 8001dd6:	b007      	add	sp, #28
 8001dd8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001ddc:	6865      	ldr	r5, [r4, #4]
 8001dde:	6826      	ldr	r6, [r4, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001de0:	f8d4 8010 	ldr.w	r8, [r4, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001de4:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
 8001de8:	f7ff ffce 	bl	8001d88 <makeFreeRtosPriority>
 8001dec:	ab05      	add	r3, sp, #20
 8001dee:	9301      	str	r3, [sp, #4]
 8001df0:	9000      	str	r0, [sp, #0]
 8001df2:	463b      	mov	r3, r7
 8001df4:	fa1f f288 	uxth.w	r2, r8
 8001df8:	4631      	mov	r1, r6
 8001dfa:	4628      	mov	r0, r5
 8001dfc:	f000 fd9b 	bl	8002936 <xTaskCreate>
 8001e00:	2801      	cmp	r0, #1
 8001e02:	d0e7      	beq.n	8001dd4 <osThreadCreate+0x36>
      return NULL;
 8001e04:	2000      	movs	r0, #0
 8001e06:	e7e6      	b.n	8001dd6 <osThreadCreate+0x38>

08001e08 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001e08:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	b900      	cbnz	r0, 8001e10 <osDelay+0x8>
 8001e0e:	2301      	movs	r3, #1
 8001e10:	4618      	mov	r0, r3
 8001e12:	f000 ff15 	bl	8002c40 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001e16:	2000      	movs	r0, #0
 8001e18:	bd08      	pop	{r3, pc}

08001e1a <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8001e1a:	b510      	push	{r4, lr}
 8001e1c:	b082      	sub	sp, #8
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8001e1e:	6882      	ldr	r2, [r0, #8]
 8001e20:	b14a      	cbz	r2, 8001e36 <osMessageCreate+0x1c>
 8001e22:	68c3      	ldr	r3, [r0, #12]
 8001e24:	b13b      	cbz	r3, 8001e36 <osMessageCreate+0x1c>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8001e26:	6841      	ldr	r1, [r0, #4]
 8001e28:	6800      	ldr	r0, [r0, #0]
 8001e2a:	2400      	movs	r4, #0
 8001e2c:	9400      	str	r4, [sp, #0]
 8001e2e:	f000 fb4b 	bl	80024c8 <xQueueGenericCreateStatic>
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8001e32:	b002      	add	sp, #8
 8001e34:	bd10      	pop	{r4, pc}
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8001e36:	2200      	movs	r2, #0
 8001e38:	6841      	ldr	r1, [r0, #4]
 8001e3a:	6800      	ldr	r0, [r0, #0]
 8001e3c:	f000 fb94 	bl	8002568 <xQueueGenericCreate>
 8001e40:	e7f7      	b.n	8001e32 <osMessageCreate+0x18>

08001e42 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001e42:	f100 0308 	add.w	r3, r0, #8
 8001e46:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001e48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001e4c:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001e4e:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001e50:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001e52:	2300      	movs	r3, #0
 8001e54:	6003      	str	r3, [r0, #0]
 8001e56:	4770      	bx	lr

08001e58 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	6103      	str	r3, [r0, #16]
 8001e5c:	4770      	bx	lr

08001e5e <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8001e5e:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001e60:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001e62:	689a      	ldr	r2, [r3, #8]
 8001e64:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001e66:	689a      	ldr	r2, [r3, #8]
 8001e68:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001e6a:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001e6c:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8001e6e:	6803      	ldr	r3, [r0, #0]
 8001e70:	3301      	adds	r3, #1
 8001e72:	6003      	str	r3, [r0, #0]
 8001e74:	4770      	bx	lr

08001e76 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001e76:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001e78:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001e7a:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8001e7e:	d002      	beq.n	8001e86 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001e80:	f100 0208 	add.w	r2, r0, #8
 8001e84:	e002      	b.n	8001e8c <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
 8001e86:	6902      	ldr	r2, [r0, #16]
 8001e88:	e004      	b.n	8001e94 <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	6853      	ldr	r3, [r2, #4]
 8001e8e:	681c      	ldr	r4, [r3, #0]
 8001e90:	42a5      	cmp	r5, r4
 8001e92:	d2fa      	bcs.n	8001e8a <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001e94:	6853      	ldr	r3, [r2, #4]
 8001e96:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001e98:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001e9a:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8001e9c:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001e9e:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8001ea0:	6803      	ldr	r3, [r0, #0]
 8001ea2:	3301      	adds	r3, #1
 8001ea4:	6003      	str	r3, [r0, #0]
}
 8001ea6:	bc30      	pop	{r4, r5}
 8001ea8:	4770      	bx	lr

08001eaa <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001eaa:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001eac:	6842      	ldr	r2, [r0, #4]
 8001eae:	6881      	ldr	r1, [r0, #8]
 8001eb0:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001eb2:	6882      	ldr	r2, [r0, #8]
 8001eb4:	6841      	ldr	r1, [r0, #4]
 8001eb6:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001eb8:	685a      	ldr	r2, [r3, #4]
 8001eba:	4290      	cmp	r0, r2
 8001ebc:	d006      	beq.n	8001ecc <uxListRemove+0x22>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	3a01      	subs	r2, #1
 8001ec6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001ec8:	6818      	ldr	r0, [r3, #0]
}
 8001eca:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001ecc:	6882      	ldr	r2, [r0, #8]
 8001ece:	605a      	str	r2, [r3, #4]
 8001ed0:	e7f5      	b.n	8001ebe <uxListRemove+0x14>
	...

08001ed4 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8001ed4:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8001eda:	4b0d      	ldr	r3, [pc, #52]	; (8001f10 <prvTaskExitError+0x3c>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ee2:	d008      	beq.n	8001ef6 <prvTaskExitError+0x22>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ee8:	f383 8811 	msr	BASEPRI, r3
 8001eec:	f3bf 8f6f 	isb	sy
 8001ef0:	f3bf 8f4f 	dsb	sy
 8001ef4:	e7fe      	b.n	8001ef4 <prvTaskExitError+0x20>
 8001ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001efa:	f383 8811 	msr	BASEPRI, r3
 8001efe:	f3bf 8f6f 	isb	sy
 8001f02:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8001f06:	9b01      	ldr	r3, [sp, #4]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d0fc      	beq.n	8001f06 <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8001f0c:	b002      	add	sp, #8
 8001f0e:	4770      	bx	lr
 8001f10:	20000004 	.word	0x20000004

08001f14 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8001f14:	4808      	ldr	r0, [pc, #32]	; (8001f38 <prvPortStartFirstTask+0x24>)
 8001f16:	6800      	ldr	r0, [r0, #0]
 8001f18:	6800      	ldr	r0, [r0, #0]
 8001f1a:	f380 8808 	msr	MSP, r0
 8001f1e:	f04f 0000 	mov.w	r0, #0
 8001f22:	f380 8814 	msr	CONTROL, r0
 8001f26:	b662      	cpsie	i
 8001f28:	b661      	cpsie	f
 8001f2a:	f3bf 8f4f 	dsb	sy
 8001f2e:	f3bf 8f6f 	isb	sy
 8001f32:	df00      	svc	0
 8001f34:	bf00      	nop
 8001f36:	0000      	.short	0x0000
 8001f38:	e000ed08 	.word	0xe000ed08

08001f3c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8001f3c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8001f4c <vPortEnableVFP+0x10>
 8001f40:	6801      	ldr	r1, [r0, #0]
 8001f42:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8001f46:	6001      	str	r1, [r0, #0]
 8001f48:	4770      	bx	lr
 8001f4a:	0000      	.short	0x0000
 8001f4c:	e000ed88 	.word	0xe000ed88

08001f50 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8001f50:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f54:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8001f58:	f021 0101 	bic.w	r1, r1, #1
 8001f5c:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8001f60:	4b05      	ldr	r3, [pc, #20]	; (8001f78 <pxPortInitialiseStack+0x28>)
 8001f62:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8001f66:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8001f6a:	f06f 0302 	mvn.w	r3, #2
 8001f6e:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8001f72:	3844      	subs	r0, #68	; 0x44
 8001f74:	4770      	bx	lr
 8001f76:	bf00      	nop
 8001f78:	08001ed5 	.word	0x08001ed5
 8001f7c:	00000000 	.word	0x00000000

08001f80 <SVC_Handler>:
	__asm volatile (
 8001f80:	4b07      	ldr	r3, [pc, #28]	; (8001fa0 <pxCurrentTCBConst2>)
 8001f82:	6819      	ldr	r1, [r3, #0]
 8001f84:	6808      	ldr	r0, [r1, #0]
 8001f86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f8a:	f380 8809 	msr	PSP, r0
 8001f8e:	f3bf 8f6f 	isb	sy
 8001f92:	f04f 0000 	mov.w	r0, #0
 8001f96:	f380 8811 	msr	BASEPRI, r0
 8001f9a:	4770      	bx	lr
 8001f9c:	f3af 8000 	nop.w

08001fa0 <pxCurrentTCBConst2>:
 8001fa0:	20003c48 	.word	0x20003c48

08001fa4 <vPortEnterCritical>:
 8001fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fa8:	f383 8811 	msr	BASEPRI, r3
 8001fac:	f3bf 8f6f 	isb	sy
 8001fb0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8001fb4:	4a0a      	ldr	r2, [pc, #40]	; (8001fe0 <vPortEnterCritical+0x3c>)
 8001fb6:	6813      	ldr	r3, [r2, #0]
 8001fb8:	3301      	adds	r3, #1
 8001fba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d10d      	bne.n	8001fdc <vPortEnterCritical+0x38>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8001fc0:	4b08      	ldr	r3, [pc, #32]	; (8001fe4 <vPortEnterCritical+0x40>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f013 0fff 	tst.w	r3, #255	; 0xff
 8001fc8:	d008      	beq.n	8001fdc <vPortEnterCritical+0x38>
 8001fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fce:	f383 8811 	msr	BASEPRI, r3
 8001fd2:	f3bf 8f6f 	isb	sy
 8001fd6:	f3bf 8f4f 	dsb	sy
 8001fda:	e7fe      	b.n	8001fda <vPortEnterCritical+0x36>
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop
 8001fe0:	20000004 	.word	0x20000004
 8001fe4:	e000ed04 	.word	0xe000ed04

08001fe8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8001fe8:	4b09      	ldr	r3, [pc, #36]	; (8002010 <vPortExitCritical+0x28>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	b943      	cbnz	r3, 8002000 <vPortExitCritical+0x18>
 8001fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ff2:	f383 8811 	msr	BASEPRI, r3
 8001ff6:	f3bf 8f6f 	isb	sy
 8001ffa:	f3bf 8f4f 	dsb	sy
 8001ffe:	e7fe      	b.n	8001ffe <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8002000:	3b01      	subs	r3, #1
 8002002:	4a03      	ldr	r2, [pc, #12]	; (8002010 <vPortExitCritical+0x28>)
 8002004:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002006:	b90b      	cbnz	r3, 800200c <vPortExitCritical+0x24>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002008:	f383 8811 	msr	BASEPRI, r3
 800200c:	4770      	bx	lr
 800200e:	bf00      	nop
 8002010:	20000004 	.word	0x20000004
	...

08002020 <PendSV_Handler>:
	__asm volatile
 8002020:	f3ef 8009 	mrs	r0, PSP
 8002024:	f3bf 8f6f 	isb	sy
 8002028:	4b15      	ldr	r3, [pc, #84]	; (8002080 <pxCurrentTCBConst>)
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	f01e 0f10 	tst.w	lr, #16
 8002030:	bf08      	it	eq
 8002032:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002036:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800203a:	6010      	str	r0, [r2, #0]
 800203c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002040:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002044:	f380 8811 	msr	BASEPRI, r0
 8002048:	f3bf 8f4f 	dsb	sy
 800204c:	f3bf 8f6f 	isb	sy
 8002050:	f000 fe1e 	bl	8002c90 <vTaskSwitchContext>
 8002054:	f04f 0000 	mov.w	r0, #0
 8002058:	f380 8811 	msr	BASEPRI, r0
 800205c:	bc09      	pop	{r0, r3}
 800205e:	6819      	ldr	r1, [r3, #0]
 8002060:	6808      	ldr	r0, [r1, #0]
 8002062:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002066:	f01e 0f10 	tst.w	lr, #16
 800206a:	bf08      	it	eq
 800206c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002070:	f380 8809 	msr	PSP, r0
 8002074:	f3bf 8f6f 	isb	sy
 8002078:	4770      	bx	lr
 800207a:	bf00      	nop
 800207c:	f3af 8000 	nop.w

08002080 <pxCurrentTCBConst>:
 8002080:	20003c48 	.word	0x20003c48

08002084 <SysTick_Handler>:
{
 8002084:	b508      	push	{r3, lr}
	__asm volatile
 8002086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800208a:	f383 8811 	msr	BASEPRI, r3
 800208e:	f3bf 8f6f 	isb	sy
 8002092:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8002096:	f000 fcc5 	bl	8002a24 <xTaskIncrementTick>
 800209a:	b118      	cbz	r0, 80020a4 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800209c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80020a0:	4b02      	ldr	r3, [pc, #8]	; (80020ac <SysTick_Handler+0x28>)
 80020a2:	601a      	str	r2, [r3, #0]
	__asm volatile
 80020a4:	2300      	movs	r3, #0
 80020a6:	f383 8811 	msr	BASEPRI, r3
 80020aa:	bd08      	pop	{r3, pc}
 80020ac:	e000ed04 	.word	0xe000ed04

080020b0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80020b0:	4a08      	ldr	r2, [pc, #32]	; (80020d4 <vPortSetupTimerInterrupt+0x24>)
 80020b2:	2300      	movs	r3, #0
 80020b4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80020b6:	4908      	ldr	r1, [pc, #32]	; (80020d8 <vPortSetupTimerInterrupt+0x28>)
 80020b8:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80020ba:	4b08      	ldr	r3, [pc, #32]	; (80020dc <vPortSetupTimerInterrupt+0x2c>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4908      	ldr	r1, [pc, #32]	; (80020e0 <vPortSetupTimerInterrupt+0x30>)
 80020c0:	fba1 1303 	umull	r1, r3, r1, r3
 80020c4:	099b      	lsrs	r3, r3, #6
 80020c6:	3b01      	subs	r3, #1
 80020c8:	4906      	ldr	r1, [pc, #24]	; (80020e4 <vPortSetupTimerInterrupt+0x34>)
 80020ca:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80020cc:	2307      	movs	r3, #7
 80020ce:	6013      	str	r3, [r2, #0]
 80020d0:	4770      	bx	lr
 80020d2:	bf00      	nop
 80020d4:	e000e010 	.word	0xe000e010
 80020d8:	e000e018 	.word	0xe000e018
 80020dc:	20000008 	.word	0x20000008
 80020e0:	10624dd3 	.word	0x10624dd3
 80020e4:	e000e014 	.word	0xe000e014

080020e8 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80020e8:	4b3a      	ldr	r3, [pc, #232]	; (80021d4 <xPortStartScheduler+0xec>)
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	4b3a      	ldr	r3, [pc, #232]	; (80021d8 <xPortStartScheduler+0xf0>)
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d108      	bne.n	8002104 <xPortStartScheduler+0x1c>
	__asm volatile
 80020f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020f6:	f383 8811 	msr	BASEPRI, r3
 80020fa:	f3bf 8f6f 	isb	sy
 80020fe:	f3bf 8f4f 	dsb	sy
 8002102:	e7fe      	b.n	8002102 <xPortStartScheduler+0x1a>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002104:	4b33      	ldr	r3, [pc, #204]	; (80021d4 <xPortStartScheduler+0xec>)
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	4b34      	ldr	r3, [pc, #208]	; (80021dc <xPortStartScheduler+0xf4>)
 800210a:	429a      	cmp	r2, r3
 800210c:	d108      	bne.n	8002120 <xPortStartScheduler+0x38>
 800210e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002112:	f383 8811 	msr	BASEPRI, r3
 8002116:	f3bf 8f6f 	isb	sy
 800211a:	f3bf 8f4f 	dsb	sy
 800211e:	e7fe      	b.n	800211e <xPortStartScheduler+0x36>
{
 8002120:	b510      	push	{r4, lr}
 8002122:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002124:	4b2e      	ldr	r3, [pc, #184]	; (80021e0 <xPortStartScheduler+0xf8>)
 8002126:	781a      	ldrb	r2, [r3, #0]
 8002128:	b2d2      	uxtb	r2, r2
 800212a:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800212c:	22ff      	movs	r2, #255	; 0xff
 800212e:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	b2db      	uxtb	r3, r3
 8002134:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002138:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800213c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002140:	4a28      	ldr	r2, [pc, #160]	; (80021e4 <xPortStartScheduler+0xfc>)
 8002142:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002144:	2207      	movs	r2, #7
 8002146:	4b28      	ldr	r3, [pc, #160]	; (80021e8 <xPortStartScheduler+0x100>)
 8002148:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800214a:	e009      	b.n	8002160 <xPortStartScheduler+0x78>
			ulMaxPRIGROUPValue--;
 800214c:	4a26      	ldr	r2, [pc, #152]	; (80021e8 <xPortStartScheduler+0x100>)
 800214e:	6813      	ldr	r3, [r2, #0]
 8002150:	3b01      	subs	r3, #1
 8002152:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002154:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8002158:	005b      	lsls	r3, r3, #1
 800215a:	b2db      	uxtb	r3, r3
 800215c:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002160:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8002164:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002168:	d1f0      	bne.n	800214c <xPortStartScheduler+0x64>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800216a:	4b1f      	ldr	r3, [pc, #124]	; (80021e8 <xPortStartScheduler+0x100>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	2b03      	cmp	r3, #3
 8002170:	d008      	beq.n	8002184 <xPortStartScheduler+0x9c>
 8002172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002176:	f383 8811 	msr	BASEPRI, r3
 800217a:	f3bf 8f6f 	isb	sy
 800217e:	f3bf 8f4f 	dsb	sy
 8002182:	e7fe      	b.n	8002182 <xPortStartScheduler+0x9a>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002184:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002186:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800218a:	4a17      	ldr	r2, [pc, #92]	; (80021e8 <xPortStartScheduler+0x100>)
 800218c:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800218e:	9b01      	ldr	r3, [sp, #4]
 8002190:	b2db      	uxtb	r3, r3
 8002192:	4a13      	ldr	r2, [pc, #76]	; (80021e0 <xPortStartScheduler+0xf8>)
 8002194:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002196:	4b15      	ldr	r3, [pc, #84]	; (80021ec <xPortStartScheduler+0x104>)
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800219e:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 80021a6:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 80021a8:	f7ff ff82 	bl	80020b0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80021ac:	2400      	movs	r4, #0
 80021ae:	4b10      	ldr	r3, [pc, #64]	; (80021f0 <xPortStartScheduler+0x108>)
 80021b0:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 80021b2:	f7ff fec3 	bl	8001f3c <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80021b6:	4a0f      	ldr	r2, [pc, #60]	; (80021f4 <xPortStartScheduler+0x10c>)
 80021b8:	6813      	ldr	r3, [r2, #0]
 80021ba:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80021be:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 80021c0:	f7ff fea8 	bl	8001f14 <prvPortStartFirstTask>
	vTaskSwitchContext();
 80021c4:	f000 fd64 	bl	8002c90 <vTaskSwitchContext>
	prvTaskExitError();
 80021c8:	f7ff fe84 	bl	8001ed4 <prvTaskExitError>
}
 80021cc:	4620      	mov	r0, r4
 80021ce:	b002      	add	sp, #8
 80021d0:	bd10      	pop	{r4, pc}
 80021d2:	bf00      	nop
 80021d4:	e000ed00 	.word	0xe000ed00
 80021d8:	410fc271 	.word	0x410fc271
 80021dc:	410fc270 	.word	0x410fc270
 80021e0:	e000e400 	.word	0xe000e400
 80021e4:	20000028 	.word	0x20000028
 80021e8:	2000002c 	.word	0x2000002c
 80021ec:	e000ed20 	.word	0xe000ed20
 80021f0:	20000004 	.word	0x20000004
 80021f4:	e000ef34 	.word	0xe000ef34

080021f8 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80021f8:	4a12      	ldr	r2, [pc, #72]	; (8002244 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80021fa:	f012 0f07 	tst.w	r2, #7
 80021fe:	d01e      	beq.n	800223e <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002200:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002202:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002206:	f5c1 5370 	rsb	r3, r1, #15360	; 0x3c00
 800220a:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800220c:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800220e:	480e      	ldr	r0, [pc, #56]	; (8002248 <prvHeapInit+0x50>)
 8002210:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8002212:	2100      	movs	r1, #0
 8002214:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002216:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8002218:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800221a:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 800221e:	480b      	ldr	r0, [pc, #44]	; (800224c <prvHeapInit+0x54>)
 8002220:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 8002222:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8002224:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002226:	1a99      	subs	r1, r3, r2
 8002228:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800222a:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800222c:	4b08      	ldr	r3, [pc, #32]	; (8002250 <prvHeapInit+0x58>)
 800222e:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002230:	4b08      	ldr	r3, [pc, #32]	; (8002254 <prvHeapInit+0x5c>)
 8002232:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002234:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002238:	4b07      	ldr	r3, [pc, #28]	; (8002258 <prvHeapInit+0x60>)
 800223a:	601a      	str	r2, [r3, #0]
 800223c:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800223e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8002242:	e7e4      	b.n	800220e <prvHeapInit+0x16>
 8002244:	20000034 	.word	0x20000034
 8002248:	20003c40 	.word	0x20003c40
 800224c:	20000030 	.word	0x20000030
 8002250:	20003c3c 	.word	0x20003c3c
 8002254:	20003c38 	.word	0x20003c38
 8002258:	20003c34 	.word	0x20003c34

0800225c <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800225c:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800225e:	4b13      	ldr	r3, [pc, #76]	; (80022ac <prvInsertBlockIntoFreeList+0x50>)
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	4282      	cmp	r2, r0
 8002264:	d31b      	bcc.n	800229e <prvInsertBlockIntoFreeList+0x42>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002266:	6859      	ldr	r1, [r3, #4]
 8002268:	185c      	adds	r4, r3, r1
 800226a:	42a0      	cmp	r0, r4
 800226c:	d103      	bne.n	8002276 <prvInsertBlockIntoFreeList+0x1a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800226e:	6840      	ldr	r0, [r0, #4]
 8002270:	4401      	add	r1, r0
 8002272:	6059      	str	r1, [r3, #4]
		pxBlockToInsert = pxIterator;
 8002274:	4618      	mov	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002276:	6841      	ldr	r1, [r0, #4]
 8002278:	1844      	adds	r4, r0, r1
 800227a:	42a2      	cmp	r2, r4
 800227c:	d113      	bne.n	80022a6 <prvInsertBlockIntoFreeList+0x4a>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800227e:	4c0c      	ldr	r4, [pc, #48]	; (80022b0 <prvInsertBlockIntoFreeList+0x54>)
 8002280:	6824      	ldr	r4, [r4, #0]
 8002282:	42a2      	cmp	r2, r4
 8002284:	d00d      	beq.n	80022a2 <prvInsertBlockIntoFreeList+0x46>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002286:	6852      	ldr	r2, [r2, #4]
 8002288:	4411      	add	r1, r2
 800228a:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	6812      	ldr	r2, [r2, #0]
 8002290:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002292:	4298      	cmp	r0, r3
 8002294:	d000      	beq.n	8002298 <prvInsertBlockIntoFreeList+0x3c>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002296:	6018      	str	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002298:	f85d 4b04 	ldr.w	r4, [sp], #4
 800229c:	4770      	bx	lr
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800229e:	4613      	mov	r3, r2
 80022a0:	e7de      	b.n	8002260 <prvInsertBlockIntoFreeList+0x4>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80022a2:	6004      	str	r4, [r0, #0]
 80022a4:	e7f5      	b.n	8002292 <prvInsertBlockIntoFreeList+0x36>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80022a6:	6002      	str	r2, [r0, #0]
 80022a8:	e7f3      	b.n	8002292 <prvInsertBlockIntoFreeList+0x36>
 80022aa:	bf00      	nop
 80022ac:	20003c40 	.word	0x20003c40
 80022b0:	20000030 	.word	0x20000030

080022b4 <pvPortMalloc>:
{
 80022b4:	b570      	push	{r4, r5, r6, lr}
 80022b6:	4604      	mov	r4, r0
	vTaskSuspendAll();
 80022b8:	f000 fbac 	bl	8002a14 <vTaskSuspendAll>
		if( pxEnd == NULL )
 80022bc:	4b3a      	ldr	r3, [pc, #232]	; (80023a8 <pvPortMalloc+0xf4>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	b1bb      	cbz	r3, 80022f2 <pvPortMalloc+0x3e>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80022c2:	4b3a      	ldr	r3, [pc, #232]	; (80023ac <pvPortMalloc+0xf8>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	421c      	tst	r4, r3
 80022c8:	d163      	bne.n	8002392 <pvPortMalloc+0xde>
			if( xWantedSize > 0 )
 80022ca:	b1ac      	cbz	r4, 80022f8 <pvPortMalloc+0x44>
				xWantedSize += xHeapStructSize;
 80022cc:	3408      	adds	r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80022ce:	f014 0f07 	tst.w	r4, #7
 80022d2:	d011      	beq.n	80022f8 <pvPortMalloc+0x44>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80022d4:	f024 0407 	bic.w	r4, r4, #7
 80022d8:	3408      	adds	r4, #8
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80022da:	f004 0307 	and.w	r3, r4, #7
 80022de:	b15b      	cbz	r3, 80022f8 <pvPortMalloc+0x44>
 80022e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022e4:	f383 8811 	msr	BASEPRI, r3
 80022e8:	f3bf 8f6f 	isb	sy
 80022ec:	f3bf 8f4f 	dsb	sy
 80022f0:	e7fe      	b.n	80022f0 <pvPortMalloc+0x3c>
			prvHeapInit();
 80022f2:	f7ff ff81 	bl	80021f8 <prvHeapInit>
 80022f6:	e7e4      	b.n	80022c2 <pvPortMalloc+0xe>
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80022f8:	2c00      	cmp	r4, #0
 80022fa:	d04c      	beq.n	8002396 <pvPortMalloc+0xe2>
 80022fc:	4b2c      	ldr	r3, [pc, #176]	; (80023b0 <pvPortMalloc+0xfc>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	429c      	cmp	r4, r3
 8002302:	d84a      	bhi.n	800239a <pvPortMalloc+0xe6>
				pxBlock = xStart.pxNextFreeBlock;
 8002304:	4b2b      	ldr	r3, [pc, #172]	; (80023b4 <pvPortMalloc+0x100>)
 8002306:	681d      	ldr	r5, [r3, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002308:	e001      	b.n	800230e <pvPortMalloc+0x5a>
					pxPreviousBlock = pxBlock;
 800230a:	462b      	mov	r3, r5
					pxBlock = pxBlock->pxNextFreeBlock;
 800230c:	4615      	mov	r5, r2
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800230e:	686a      	ldr	r2, [r5, #4]
 8002310:	4294      	cmp	r4, r2
 8002312:	d902      	bls.n	800231a <pvPortMalloc+0x66>
 8002314:	682a      	ldr	r2, [r5, #0]
 8002316:	2a00      	cmp	r2, #0
 8002318:	d1f7      	bne.n	800230a <pvPortMalloc+0x56>
				if( pxBlock != pxEnd )
 800231a:	4a23      	ldr	r2, [pc, #140]	; (80023a8 <pvPortMalloc+0xf4>)
 800231c:	6812      	ldr	r2, [r2, #0]
 800231e:	4295      	cmp	r5, r2
 8002320:	d03d      	beq.n	800239e <pvPortMalloc+0xea>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002322:	681e      	ldr	r6, [r3, #0]
 8002324:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002326:	682a      	ldr	r2, [r5, #0]
 8002328:	601a      	str	r2, [r3, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800232a:	686b      	ldr	r3, [r5, #4]
 800232c:	1b1b      	subs	r3, r3, r4
 800232e:	2b10      	cmp	r3, #16
 8002330:	d910      	bls.n	8002354 <pvPortMalloc+0xa0>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002332:	1928      	adds	r0, r5, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002334:	f010 0f07 	tst.w	r0, #7
 8002338:	d008      	beq.n	800234c <pvPortMalloc+0x98>
 800233a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800233e:	f383 8811 	msr	BASEPRI, r3
 8002342:	f3bf 8f6f 	isb	sy
 8002346:	f3bf 8f4f 	dsb	sy
 800234a:	e7fe      	b.n	800234a <pvPortMalloc+0x96>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800234c:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800234e:	606c      	str	r4, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002350:	f7ff ff84 	bl	800225c <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002354:	686a      	ldr	r2, [r5, #4]
 8002356:	4916      	ldr	r1, [pc, #88]	; (80023b0 <pvPortMalloc+0xfc>)
 8002358:	680b      	ldr	r3, [r1, #0]
 800235a:	1a9b      	subs	r3, r3, r2
 800235c:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800235e:	4916      	ldr	r1, [pc, #88]	; (80023b8 <pvPortMalloc+0x104>)
 8002360:	6809      	ldr	r1, [r1, #0]
 8002362:	428b      	cmp	r3, r1
 8002364:	d201      	bcs.n	800236a <pvPortMalloc+0xb6>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002366:	4914      	ldr	r1, [pc, #80]	; (80023b8 <pvPortMalloc+0x104>)
 8002368:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800236a:	4b10      	ldr	r3, [pc, #64]	; (80023ac <pvPortMalloc+0xf8>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4313      	orrs	r3, r2
 8002370:	606b      	str	r3, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002372:	2300      	movs	r3, #0
 8002374:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8002376:	f000 fbe5 	bl	8002b44 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800237a:	f016 0f07 	tst.w	r6, #7
 800237e:	d010      	beq.n	80023a2 <pvPortMalloc+0xee>
 8002380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002384:	f383 8811 	msr	BASEPRI, r3
 8002388:	f3bf 8f6f 	isb	sy
 800238c:	f3bf 8f4f 	dsb	sy
 8002390:	e7fe      	b.n	8002390 <pvPortMalloc+0xdc>
void *pvReturn = NULL;
 8002392:	2600      	movs	r6, #0
 8002394:	e7ef      	b.n	8002376 <pvPortMalloc+0xc2>
 8002396:	2600      	movs	r6, #0
 8002398:	e7ed      	b.n	8002376 <pvPortMalloc+0xc2>
 800239a:	2600      	movs	r6, #0
 800239c:	e7eb      	b.n	8002376 <pvPortMalloc+0xc2>
 800239e:	2600      	movs	r6, #0
 80023a0:	e7e9      	b.n	8002376 <pvPortMalloc+0xc2>
}
 80023a2:	4630      	mov	r0, r6
 80023a4:	bd70      	pop	{r4, r5, r6, pc}
 80023a6:	bf00      	nop
 80023a8:	20000030 	.word	0x20000030
 80023ac:	20003c34 	.word	0x20003c34
 80023b0:	20003c38 	.word	0x20003c38
 80023b4:	20003c40 	.word	0x20003c40
 80023b8:	20003c3c 	.word	0x20003c3c

080023bc <vPortFree>:
	if( pv != NULL )
 80023bc:	b380      	cbz	r0, 8002420 <vPortFree+0x64>
{
 80023be:	b538      	push	{r3, r4, r5, lr}
 80023c0:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 80023c2:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80023c6:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80023ca:	4916      	ldr	r1, [pc, #88]	; (8002424 <vPortFree+0x68>)
 80023cc:	6809      	ldr	r1, [r1, #0]
 80023ce:	420a      	tst	r2, r1
 80023d0:	d108      	bne.n	80023e4 <vPortFree+0x28>
 80023d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023d6:	f383 8811 	msr	BASEPRI, r3
 80023da:	f3bf 8f6f 	isb	sy
 80023de:	f3bf 8f4f 	dsb	sy
 80023e2:	e7fe      	b.n	80023e2 <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80023e4:	f850 0c08 	ldr.w	r0, [r0, #-8]
 80023e8:	b140      	cbz	r0, 80023fc <vPortFree+0x40>
 80023ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023ee:	f383 8811 	msr	BASEPRI, r3
 80023f2:	f3bf 8f6f 	isb	sy
 80023f6:	f3bf 8f4f 	dsb	sy
 80023fa:	e7fe      	b.n	80023fa <vPortFree+0x3e>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80023fc:	ea22 0201 	bic.w	r2, r2, r1
 8002400:	f844 2c04 	str.w	r2, [r4, #-4]
				vTaskSuspendAll();
 8002404:	f000 fb06 	bl	8002a14 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002408:	f854 1c04 	ldr.w	r1, [r4, #-4]
 800240c:	4a06      	ldr	r2, [pc, #24]	; (8002428 <vPortFree+0x6c>)
 800240e:	6813      	ldr	r3, [r2, #0]
 8002410:	440b      	add	r3, r1
 8002412:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002414:	4628      	mov	r0, r5
 8002416:	f7ff ff21 	bl	800225c <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 800241a:	f000 fb93 	bl	8002b44 <xTaskResumeAll>
 800241e:	bd38      	pop	{r3, r4, r5, pc}
 8002420:	4770      	bx	lr
 8002422:	bf00      	nop
 8002424:	20003c34 	.word	0x20003c34
 8002428:	20003c38 	.word	0x20003c38

0800242c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800242c:	b538      	push	{r3, r4, r5, lr}
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 800242e:	b330      	cbz	r0, 800247e <xQueueGenericReset+0x52>
 8002430:	4604      	mov	r4, r0
 8002432:	460d      	mov	r5, r1

	taskENTER_CRITICAL();
 8002434:	f7ff fdb6 	bl	8001fa4 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002438:	6821      	ldr	r1, [r4, #0]
 800243a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800243c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800243e:	fb03 1002 	mla	r0, r3, r2, r1
 8002442:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002444:	2000      	movs	r0, #0
 8002446:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002448:	60a1      	str	r1, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800244a:	3a01      	subs	r2, #1
 800244c:	fb02 1303 	mla	r3, r2, r3, r1
 8002450:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002452:	23ff      	movs	r3, #255	; 0xff
 8002454:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002458:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800245c:	b9c5      	cbnz	r5, 8002490 <xQueueGenericReset+0x64>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800245e:	6923      	ldr	r3, [r4, #16]
 8002460:	b1f3      	cbz	r3, 80024a0 <xQueueGenericReset+0x74>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002462:	f104 0010 	add.w	r0, r4, #16
 8002466:	f000 fc61 	bl	8002d2c <xTaskRemoveFromEventList>
 800246a:	b1c8      	cbz	r0, 80024a0 <xQueueGenericReset+0x74>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800246c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002470:	4b0d      	ldr	r3, [pc, #52]	; (80024a8 <xQueueGenericReset+0x7c>)
 8002472:	601a      	str	r2, [r3, #0]
 8002474:	f3bf 8f4f 	dsb	sy
 8002478:	f3bf 8f6f 	isb	sy
 800247c:	e010      	b.n	80024a0 <xQueueGenericReset+0x74>
 800247e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002482:	f383 8811 	msr	BASEPRI, r3
 8002486:	f3bf 8f6f 	isb	sy
 800248a:	f3bf 8f4f 	dsb	sy
 800248e:	e7fe      	b.n	800248e <xQueueGenericReset+0x62>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002490:	f104 0010 	add.w	r0, r4, #16
 8002494:	f7ff fcd5 	bl	8001e42 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002498:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800249c:	f7ff fcd1 	bl	8001e42 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80024a0:	f7ff fda2 	bl	8001fe8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
 80024a4:	2001      	movs	r0, #1
 80024a6:	bd38      	pop	{r3, r4, r5, pc}
 80024a8:	e000ed04 	.word	0xe000ed04

080024ac <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80024ac:	b510      	push	{r4, lr}
 80024ae:	9b02      	ldr	r3, [sp, #8]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80024b0:	460c      	mov	r4, r1
 80024b2:	b139      	cbz	r1, 80024c4 <prvInitialiseNewQueue+0x18>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80024b4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80024b6:	63d8      	str	r0, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80024b8:	641c      	str	r4, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80024ba:	2101      	movs	r1, #1
 80024bc:	4618      	mov	r0, r3
 80024be:	f7ff ffb5 	bl	800242c <xQueueGenericReset>
 80024c2:	bd10      	pop	{r4, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80024c4:	601b      	str	r3, [r3, #0]
 80024c6:	e7f6      	b.n	80024b6 <prvInitialiseNewQueue+0xa>

080024c8 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80024c8:	b940      	cbnz	r0, 80024dc <xQueueGenericCreateStatic+0x14>
 80024ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024ce:	f383 8811 	msr	BASEPRI, r3
 80024d2:	f3bf 8f6f 	isb	sy
 80024d6:	f3bf 8f4f 	dsb	sy
 80024da:	e7fe      	b.n	80024da <xQueueGenericCreateStatic+0x12>
	{
 80024dc:	b510      	push	{r4, lr}
 80024de:	b084      	sub	sp, #16
 80024e0:	4604      	mov	r4, r0
		configASSERT( pxStaticQueue != NULL );
 80024e2:	b163      	cbz	r3, 80024fe <xQueueGenericCreateStatic+0x36>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80024e4:	b1a2      	cbz	r2, 8002510 <xQueueGenericCreateStatic+0x48>
 80024e6:	b1a9      	cbz	r1, 8002514 <xQueueGenericCreateStatic+0x4c>
 80024e8:	2001      	movs	r0, #1
 80024ea:	b9a8      	cbnz	r0, 8002518 <xQueueGenericCreateStatic+0x50>
 80024ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024f0:	f383 8811 	msr	BASEPRI, r3
 80024f4:	f3bf 8f6f 	isb	sy
 80024f8:	f3bf 8f4f 	dsb	sy
 80024fc:	e7fe      	b.n	80024fc <xQueueGenericCreateStatic+0x34>
 80024fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002502:	f383 8811 	msr	BASEPRI, r3
 8002506:	f3bf 8f6f 	isb	sy
 800250a:	f3bf 8f4f 	dsb	sy
 800250e:	e7fe      	b.n	800250e <xQueueGenericCreateStatic+0x46>
 8002510:	2001      	movs	r0, #1
 8002512:	e7ea      	b.n	80024ea <xQueueGenericCreateStatic+0x22>
 8002514:	2000      	movs	r0, #0
 8002516:	e7e8      	b.n	80024ea <xQueueGenericCreateStatic+0x22>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002518:	b90a      	cbnz	r2, 800251e <xQueueGenericCreateStatic+0x56>
 800251a:	b101      	cbz	r1, 800251e <xQueueGenericCreateStatic+0x56>
 800251c:	2000      	movs	r0, #0
 800251e:	b940      	cbnz	r0, 8002532 <xQueueGenericCreateStatic+0x6a>
 8002520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002524:	f383 8811 	msr	BASEPRI, r3
 8002528:	f3bf 8f6f 	isb	sy
 800252c:	f3bf 8f4f 	dsb	sy
 8002530:	e7fe      	b.n	8002530 <xQueueGenericCreateStatic+0x68>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002532:	2048      	movs	r0, #72	; 0x48
 8002534:	9003      	str	r0, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002536:	9803      	ldr	r0, [sp, #12]
 8002538:	2848      	cmp	r0, #72	; 0x48
 800253a:	d008      	beq.n	800254e <xQueueGenericCreateStatic+0x86>
 800253c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002540:	f383 8811 	msr	BASEPRI, r3
 8002544:	f3bf 8f6f 	isb	sy
 8002548:	f3bf 8f4f 	dsb	sy
 800254c:	e7fe      	b.n	800254c <xQueueGenericCreateStatic+0x84>
 800254e:	4620      	mov	r0, r4
 8002550:	461c      	mov	r4, r3
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002552:	2301      	movs	r3, #1
 8002554:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002558:	9400      	str	r4, [sp, #0]
 800255a:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800255e:	f7ff ffa5 	bl	80024ac <prvInitialiseNewQueue>
	}
 8002562:	4620      	mov	r0, r4
 8002564:	b004      	add	sp, #16
 8002566:	bd10      	pop	{r4, pc}

08002568 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002568:	b940      	cbnz	r0, 800257c <xQueueGenericCreate+0x14>
 800256a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800256e:	f383 8811 	msr	BASEPRI, r3
 8002572:	f3bf 8f6f 	isb	sy
 8002576:	f3bf 8f4f 	dsb	sy
 800257a:	e7fe      	b.n	800257a <xQueueGenericCreate+0x12>
	{
 800257c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800257e:	b083      	sub	sp, #12
 8002580:	4606      	mov	r6, r0
		if( uxItemSize == ( UBaseType_t ) 0 )
 8002582:	b111      	cbz	r1, 800258a <xQueueGenericCreate+0x22>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002584:	fb01 f000 	mul.w	r0, r1, r0
 8002588:	e000      	b.n	800258c <xQueueGenericCreate+0x24>
			xQueueSizeInBytes = ( size_t ) 0;
 800258a:	2000      	movs	r0, #0
 800258c:	4617      	mov	r7, r2
 800258e:	460c      	mov	r4, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8002590:	3048      	adds	r0, #72	; 0x48
 8002592:	f7ff fe8f 	bl	80022b4 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8002596:	4605      	mov	r5, r0
 8002598:	b150      	cbz	r0, 80025b0 <xQueueGenericCreate+0x48>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800259a:	2300      	movs	r3, #0
 800259c:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80025a0:	9000      	str	r0, [sp, #0]
 80025a2:	463b      	mov	r3, r7
 80025a4:	f100 0248 	add.w	r2, r0, #72	; 0x48
 80025a8:	4621      	mov	r1, r4
 80025aa:	4630      	mov	r0, r6
 80025ac:	f7ff ff7e 	bl	80024ac <prvInitialiseNewQueue>
	}
 80025b0:	4628      	mov	r0, r5
 80025b2:	b003      	add	sp, #12
 80025b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080025b8 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80025b8:	4b0a      	ldr	r3, [pc, #40]	; (80025e4 <prvResetNextTaskUnblockTime+0x2c>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	b94b      	cbnz	r3, 80025d4 <prvResetNextTaskUnblockTime+0x1c>
 80025c0:	2301      	movs	r3, #1
 80025c2:	b94b      	cbnz	r3, 80025d8 <prvResetNextTaskUnblockTime+0x20>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80025c4:	4b07      	ldr	r3, [pc, #28]	; (80025e4 <prvResetNextTaskUnblockTime+0x2c>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	68db      	ldr	r3, [r3, #12]
 80025ca:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80025cc:	685a      	ldr	r2, [r3, #4]
 80025ce:	4b06      	ldr	r3, [pc, #24]	; (80025e8 <prvResetNextTaskUnblockTime+0x30>)
 80025d0:	601a      	str	r2, [r3, #0]
 80025d2:	4770      	bx	lr
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80025d4:	2300      	movs	r3, #0
 80025d6:	e7f4      	b.n	80025c2 <prvResetNextTaskUnblockTime+0xa>
		xNextTaskUnblockTime = portMAX_DELAY;
 80025d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80025dc:	4b02      	ldr	r3, [pc, #8]	; (80025e8 <prvResetNextTaskUnblockTime+0x30>)
 80025de:	601a      	str	r2, [r3, #0]
 80025e0:	4770      	bx	lr
 80025e2:	bf00      	nop
 80025e4:	20003c4c 	.word	0x20003c4c
 80025e8:	20003d20 	.word	0x20003d20

080025ec <prvInitialiseNewTask>:
{
 80025ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80025f0:	4680      	mov	r8, r0
 80025f2:	4699      	mov	r9, r3
 80025f4:	9d08      	ldr	r5, [sp, #32]
 80025f6:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80025f8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80025fa:	6b26      	ldr	r6, [r4, #48]	; 0x30
 80025fc:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8002600:	3a01      	subs	r2, #1
 8002602:	eb06 0682 	add.w	r6, r6, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002606:	f026 0607 	bic.w	r6, r6, #7
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800260a:	2300      	movs	r3, #0
 800260c:	2b0f      	cmp	r3, #15
 800260e:	d807      	bhi.n	8002620 <prvInitialiseNewTask+0x34>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002610:	5cc8      	ldrb	r0, [r1, r3]
 8002612:	18e2      	adds	r2, r4, r3
 8002614:	f882 0034 	strb.w	r0, [r2, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
 8002618:	5cca      	ldrb	r2, [r1, r3]
 800261a:	b10a      	cbz	r2, 8002620 <prvInitialiseNewTask+0x34>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800261c:	3301      	adds	r3, #1
 800261e:	e7f5      	b.n	800260c <prvInitialiseNewTask+0x20>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002620:	2300      	movs	r3, #0
 8002622:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002626:	2d06      	cmp	r5, #6
 8002628:	d900      	bls.n	800262c <prvInitialiseNewTask+0x40>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800262a:	2506      	movs	r5, #6
	pxNewTCB->uxPriority = uxPriority;
 800262c:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800262e:	6465      	str	r5, [r4, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002630:	f04f 0a00 	mov.w	sl, #0
 8002634:	f8c4 a048 	str.w	sl, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002638:	1d20      	adds	r0, r4, #4
 800263a:	f7ff fc0d 	bl	8001e58 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800263e:	f104 0018 	add.w	r0, r4, #24
 8002642:	f7ff fc09 	bl	8001e58 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002646:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002648:	f1c5 0507 	rsb	r5, r5, #7
 800264c:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800264e:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
 8002650:	f8c4 a04c 	str.w	sl, [r4, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002654:	f884 a050 	strb.w	sl, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002658:	464a      	mov	r2, r9
 800265a:	4641      	mov	r1, r8
 800265c:	4630      	mov	r0, r6
 800265e:	f7ff fc77 	bl	8001f50 <pxPortInitialiseStack>
 8002662:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8002664:	b107      	cbz	r7, 8002668 <prvInitialiseNewTask+0x7c>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002666:	603c      	str	r4, [r7, #0]
 8002668:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800266c <prvInitialiseTaskLists>:
{
 800266c:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800266e:	2400      	movs	r4, #0
 8002670:	e007      	b.n	8002682 <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002672:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8002676:	0093      	lsls	r3, r2, #2
 8002678:	480e      	ldr	r0, [pc, #56]	; (80026b4 <prvInitialiseTaskLists+0x48>)
 800267a:	4418      	add	r0, r3
 800267c:	f7ff fbe1 	bl	8001e42 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002680:	3401      	adds	r4, #1
 8002682:	2c06      	cmp	r4, #6
 8002684:	d9f5      	bls.n	8002672 <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 8002686:	4d0c      	ldr	r5, [pc, #48]	; (80026b8 <prvInitialiseTaskLists+0x4c>)
 8002688:	4628      	mov	r0, r5
 800268a:	f7ff fbda 	bl	8001e42 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800268e:	4c0b      	ldr	r4, [pc, #44]	; (80026bc <prvInitialiseTaskLists+0x50>)
 8002690:	4620      	mov	r0, r4
 8002692:	f7ff fbd6 	bl	8001e42 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002696:	480a      	ldr	r0, [pc, #40]	; (80026c0 <prvInitialiseTaskLists+0x54>)
 8002698:	f7ff fbd3 	bl	8001e42 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 800269c:	4809      	ldr	r0, [pc, #36]	; (80026c4 <prvInitialiseTaskLists+0x58>)
 800269e:	f7ff fbd0 	bl	8001e42 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 80026a2:	4809      	ldr	r0, [pc, #36]	; (80026c8 <prvInitialiseTaskLists+0x5c>)
 80026a4:	f7ff fbcd 	bl	8001e42 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 80026a8:	4b08      	ldr	r3, [pc, #32]	; (80026cc <prvInitialiseTaskLists+0x60>)
 80026aa:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80026ac:	4b08      	ldr	r3, [pc, #32]	; (80026d0 <prvInitialiseTaskLists+0x64>)
 80026ae:	601c      	str	r4, [r3, #0]
 80026b0:	bd38      	pop	{r3, r4, r5, pc}
 80026b2:	bf00      	nop
 80026b4:	20003c54 	.word	0x20003c54
 80026b8:	20003cf8 	.word	0x20003cf8
 80026bc:	20003d0c 	.word	0x20003d0c
 80026c0:	20003d28 	.word	0x20003d28
 80026c4:	20003d54 	.word	0x20003d54
 80026c8:	20003d40 	.word	0x20003d40
 80026cc:	20003c4c 	.word	0x20003c4c
 80026d0:	20003c50 	.word	0x20003c50

080026d4 <prvAddNewTaskToReadyList>:
{
 80026d4:	b510      	push	{r4, lr}
 80026d6:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80026d8:	f7ff fc64 	bl	8001fa4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 80026dc:	4a20      	ldr	r2, [pc, #128]	; (8002760 <prvAddNewTaskToReadyList+0x8c>)
 80026de:	6813      	ldr	r3, [r2, #0]
 80026e0:	3301      	adds	r3, #1
 80026e2:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80026e4:	4b1f      	ldr	r3, [pc, #124]	; (8002764 <prvAddNewTaskToReadyList+0x90>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d031      	beq.n	8002750 <prvAddNewTaskToReadyList+0x7c>
			if( xSchedulerRunning == pdFALSE )
 80026ec:	4b1e      	ldr	r3, [pc, #120]	; (8002768 <prvAddNewTaskToReadyList+0x94>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	b93b      	cbnz	r3, 8002702 <prvAddNewTaskToReadyList+0x2e>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80026f2:	4b1c      	ldr	r3, [pc, #112]	; (8002764 <prvAddNewTaskToReadyList+0x90>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026f8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d801      	bhi.n	8002702 <prvAddNewTaskToReadyList+0x2e>
					pxCurrentTCB = pxNewTCB;
 80026fe:	4b19      	ldr	r3, [pc, #100]	; (8002764 <prvAddNewTaskToReadyList+0x90>)
 8002700:	601c      	str	r4, [r3, #0]
		uxTaskNumber++;
 8002702:	4a1a      	ldr	r2, [pc, #104]	; (800276c <prvAddNewTaskToReadyList+0x98>)
 8002704:	6813      	ldr	r3, [r2, #0]
 8002706:	3301      	adds	r3, #1
 8002708:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800270a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800270c:	2201      	movs	r2, #1
 800270e:	409a      	lsls	r2, r3
 8002710:	4917      	ldr	r1, [pc, #92]	; (8002770 <prvAddNewTaskToReadyList+0x9c>)
 8002712:	6808      	ldr	r0, [r1, #0]
 8002714:	4302      	orrs	r2, r0
 8002716:	600a      	str	r2, [r1, #0]
 8002718:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800271c:	009a      	lsls	r2, r3, #2
 800271e:	1d21      	adds	r1, r4, #4
 8002720:	4814      	ldr	r0, [pc, #80]	; (8002774 <prvAddNewTaskToReadyList+0xa0>)
 8002722:	4410      	add	r0, r2
 8002724:	f7ff fb9b 	bl	8001e5e <vListInsertEnd>
	taskEXIT_CRITICAL();
 8002728:	f7ff fc5e 	bl	8001fe8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800272c:	4b0e      	ldr	r3, [pc, #56]	; (8002768 <prvAddNewTaskToReadyList+0x94>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	b16b      	cbz	r3, 800274e <prvAddNewTaskToReadyList+0x7a>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002732:	4b0c      	ldr	r3, [pc, #48]	; (8002764 <prvAddNewTaskToReadyList+0x90>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002738:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800273a:	429a      	cmp	r2, r3
 800273c:	d207      	bcs.n	800274e <prvAddNewTaskToReadyList+0x7a>
			taskYIELD_IF_USING_PREEMPTION();
 800273e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002742:	4b0d      	ldr	r3, [pc, #52]	; (8002778 <prvAddNewTaskToReadyList+0xa4>)
 8002744:	601a      	str	r2, [r3, #0]
 8002746:	f3bf 8f4f 	dsb	sy
 800274a:	f3bf 8f6f 	isb	sy
 800274e:	bd10      	pop	{r4, pc}
			pxCurrentTCB = pxNewTCB;
 8002750:	4b04      	ldr	r3, [pc, #16]	; (8002764 <prvAddNewTaskToReadyList+0x90>)
 8002752:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002754:	6813      	ldr	r3, [r2, #0]
 8002756:	2b01      	cmp	r3, #1
 8002758:	d1d3      	bne.n	8002702 <prvAddNewTaskToReadyList+0x2e>
				prvInitialiseTaskLists();
 800275a:	f7ff ff87 	bl	800266c <prvInitialiseTaskLists>
 800275e:	e7d0      	b.n	8002702 <prvAddNewTaskToReadyList+0x2e>
 8002760:	20003ce0 	.word	0x20003ce0
 8002764:	20003c48 	.word	0x20003c48
 8002768:	20003d3c 	.word	0x20003d3c
 800276c:	20003cf0 	.word	0x20003cf0
 8002770:	20003cf4 	.word	0x20003cf4
 8002774:	20003c54 	.word	0x20003c54
 8002778:	e000ed04 	.word	0xe000ed04

0800277c <prvDeleteTCB>:
	{
 800277c:	b510      	push	{r4, lr}
 800277e:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002780:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8002784:	b163      	cbz	r3, 80027a0 <prvDeleteTCB+0x24>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002786:	2b01      	cmp	r3, #1
 8002788:	d011      	beq.n	80027ae <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800278a:	2b02      	cmp	r3, #2
 800278c:	d012      	beq.n	80027b4 <prvDeleteTCB+0x38>
 800278e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002792:	f383 8811 	msr	BASEPRI, r3
 8002796:	f3bf 8f6f 	isb	sy
 800279a:	f3bf 8f4f 	dsb	sy
 800279e:	e7fe      	b.n	800279e <prvDeleteTCB+0x22>
				vPortFree( pxTCB->pxStack );
 80027a0:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80027a2:	f7ff fe0b 	bl	80023bc <vPortFree>
				vPortFree( pxTCB );
 80027a6:	4620      	mov	r0, r4
 80027a8:	f7ff fe08 	bl	80023bc <vPortFree>
 80027ac:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 80027ae:	f7ff fe05 	bl	80023bc <vPortFree>
 80027b2:	bd10      	pop	{r4, pc}
 80027b4:	bd10      	pop	{r4, pc}
	...

080027b8 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80027b8:	4b0f      	ldr	r3, [pc, #60]	; (80027f8 <prvCheckTasksWaitingTermination+0x40>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	b1d3      	cbz	r3, 80027f4 <prvCheckTasksWaitingTermination+0x3c>
{
 80027be:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 80027c0:	f7ff fbf0 	bl	8001fa4 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80027c4:	4b0d      	ldr	r3, [pc, #52]	; (80027fc <prvCheckTasksWaitingTermination+0x44>)
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80027ca:	1d20      	adds	r0, r4, #4
 80027cc:	f7ff fb6d 	bl	8001eaa <uxListRemove>
				--uxCurrentNumberOfTasks;
 80027d0:	4a0b      	ldr	r2, [pc, #44]	; (8002800 <prvCheckTasksWaitingTermination+0x48>)
 80027d2:	6813      	ldr	r3, [r2, #0]
 80027d4:	3b01      	subs	r3, #1
 80027d6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80027d8:	4a07      	ldr	r2, [pc, #28]	; (80027f8 <prvCheckTasksWaitingTermination+0x40>)
 80027da:	6813      	ldr	r3, [r2, #0]
 80027dc:	3b01      	subs	r3, #1
 80027de:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 80027e0:	f7ff fc02 	bl	8001fe8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 80027e4:	4620      	mov	r0, r4
 80027e6:	f7ff ffc9 	bl	800277c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80027ea:	4b03      	ldr	r3, [pc, #12]	; (80027f8 <prvCheckTasksWaitingTermination+0x40>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d1e6      	bne.n	80027c0 <prvCheckTasksWaitingTermination+0x8>
}
 80027f2:	bd10      	pop	{r4, pc}
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop
 80027f8:	20003ce4 	.word	0x20003ce4
 80027fc:	20003d54 	.word	0x20003d54
 8002800:	20003ce0 	.word	0x20003ce0

08002804 <prvIdleTask>:
{
 8002804:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 8002806:	f7ff ffd7 	bl	80027b8 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800280a:	4b06      	ldr	r3, [pc, #24]	; (8002824 <prvIdleTask+0x20>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	2b01      	cmp	r3, #1
 8002810:	d9f9      	bls.n	8002806 <prvIdleTask+0x2>
				taskYIELD();
 8002812:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002816:	4b04      	ldr	r3, [pc, #16]	; (8002828 <prvIdleTask+0x24>)
 8002818:	601a      	str	r2, [r3, #0]
 800281a:	f3bf 8f4f 	dsb	sy
 800281e:	f3bf 8f6f 	isb	sy
 8002822:	e7f0      	b.n	8002806 <prvIdleTask+0x2>
 8002824:	20003c54 	.word	0x20003c54
 8002828:	e000ed04 	.word	0xe000ed04

0800282c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800282c:	b570      	push	{r4, r5, r6, lr}
 800282e:	4604      	mov	r4, r0
 8002830:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002832:	4b1d      	ldr	r3, [pc, #116]	; (80028a8 <prvAddCurrentTaskToDelayedList+0x7c>)
 8002834:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002836:	4b1d      	ldr	r3, [pc, #116]	; (80028ac <prvAddCurrentTaskToDelayedList+0x80>)
 8002838:	6818      	ldr	r0, [r3, #0]
 800283a:	3004      	adds	r0, #4
 800283c:	f7ff fb35 	bl	8001eaa <uxListRemove>
 8002840:	b950      	cbnz	r0, 8002858 <prvAddCurrentTaskToDelayedList+0x2c>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8002842:	4b1a      	ldr	r3, [pc, #104]	; (80028ac <prvAddCurrentTaskToDelayedList+0x80>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002848:	2301      	movs	r3, #1
 800284a:	fa03 f202 	lsl.w	r2, r3, r2
 800284e:	4918      	ldr	r1, [pc, #96]	; (80028b0 <prvAddCurrentTaskToDelayedList+0x84>)
 8002850:	680b      	ldr	r3, [r1, #0]
 8002852:	ea23 0302 	bic.w	r3, r3, r2
 8002856:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002858:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 800285c:	d013      	beq.n	8002886 <prvAddCurrentTaskToDelayedList+0x5a>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 800285e:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002860:	4b12      	ldr	r3, [pc, #72]	; (80028ac <prvAddCurrentTaskToDelayedList+0x80>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8002866:	42a5      	cmp	r5, r4
 8002868:	d816      	bhi.n	8002898 <prvAddCurrentTaskToDelayedList+0x6c>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800286a:	4b12      	ldr	r3, [pc, #72]	; (80028b4 <prvAddCurrentTaskToDelayedList+0x88>)
 800286c:	6818      	ldr	r0, [r3, #0]
 800286e:	4b0f      	ldr	r3, [pc, #60]	; (80028ac <prvAddCurrentTaskToDelayedList+0x80>)
 8002870:	6819      	ldr	r1, [r3, #0]
 8002872:	3104      	adds	r1, #4
 8002874:	f7ff faff 	bl	8001e76 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 8002878:	4b0f      	ldr	r3, [pc, #60]	; (80028b8 <prvAddCurrentTaskToDelayedList+0x8c>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	429c      	cmp	r4, r3
 800287e:	d201      	bcs.n	8002884 <prvAddCurrentTaskToDelayedList+0x58>
				{
					xNextTaskUnblockTime = xTimeToWake;
 8002880:	4b0d      	ldr	r3, [pc, #52]	; (80028b8 <prvAddCurrentTaskToDelayedList+0x8c>)
 8002882:	601c      	str	r4, [r3, #0]
 8002884:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002886:	2e00      	cmp	r6, #0
 8002888:	d0e9      	beq.n	800285e <prvAddCurrentTaskToDelayedList+0x32>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800288a:	4b08      	ldr	r3, [pc, #32]	; (80028ac <prvAddCurrentTaskToDelayedList+0x80>)
 800288c:	6819      	ldr	r1, [r3, #0]
 800288e:	3104      	adds	r1, #4
 8002890:	480a      	ldr	r0, [pc, #40]	; (80028bc <prvAddCurrentTaskToDelayedList+0x90>)
 8002892:	f7ff fae4 	bl	8001e5e <vListInsertEnd>
 8002896:	bd70      	pop	{r4, r5, r6, pc}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002898:	4b09      	ldr	r3, [pc, #36]	; (80028c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800289a:	6818      	ldr	r0, [r3, #0]
 800289c:	4b03      	ldr	r3, [pc, #12]	; (80028ac <prvAddCurrentTaskToDelayedList+0x80>)
 800289e:	6819      	ldr	r1, [r3, #0]
 80028a0:	3104      	adds	r1, #4
 80028a2:	f7ff fae8 	bl	8001e76 <vListInsert>
 80028a6:	bd70      	pop	{r4, r5, r6, pc}
 80028a8:	20003d68 	.word	0x20003d68
 80028ac:	20003c48 	.word	0x20003c48
 80028b0:	20003cf4 	.word	0x20003cf4
 80028b4:	20003c4c 	.word	0x20003c4c
 80028b8:	20003d20 	.word	0x20003d20
 80028bc:	20003d40 	.word	0x20003d40
 80028c0:	20003c50 	.word	0x20003c50

080028c4 <xTaskCreateStatic>:
	{
 80028c4:	b570      	push	{r4, r5, r6, lr}
 80028c6:	b086      	sub	sp, #24
 80028c8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80028ca:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
 80028cc:	b175      	cbz	r5, 80028ec <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80028ce:	b1b4      	cbz	r4, 80028fe <xTaskCreateStatic+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 80028d0:	2654      	movs	r6, #84	; 0x54
 80028d2:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80028d4:	9e04      	ldr	r6, [sp, #16]
 80028d6:	2e54      	cmp	r6, #84	; 0x54
 80028d8:	d01a      	beq.n	8002910 <xTaskCreateStatic+0x4c>
 80028da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028de:	f383 8811 	msr	BASEPRI, r3
 80028e2:	f3bf 8f6f 	isb	sy
 80028e6:	f3bf 8f4f 	dsb	sy
 80028ea:	e7fe      	b.n	80028ea <xTaskCreateStatic+0x26>
 80028ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028f0:	f383 8811 	msr	BASEPRI, r3
 80028f4:	f3bf 8f6f 	isb	sy
 80028f8:	f3bf 8f4f 	dsb	sy
 80028fc:	e7fe      	b.n	80028fc <xTaskCreateStatic+0x38>
 80028fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002902:	f383 8811 	msr	BASEPRI, r3
 8002906:	f3bf 8f6f 	isb	sy
 800290a:	f3bf 8f4f 	dsb	sy
 800290e:	e7fe      	b.n	800290e <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002910:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002912:	2502      	movs	r5, #2
 8002914:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002918:	2500      	movs	r5, #0
 800291a:	9503      	str	r5, [sp, #12]
 800291c:	9402      	str	r4, [sp, #8]
 800291e:	ad05      	add	r5, sp, #20
 8002920:	9501      	str	r5, [sp, #4]
 8002922:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8002924:	9500      	str	r5, [sp, #0]
 8002926:	f7ff fe61 	bl	80025ec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800292a:	4620      	mov	r0, r4
 800292c:	f7ff fed2 	bl	80026d4 <prvAddNewTaskToReadyList>
	}
 8002930:	9805      	ldr	r0, [sp, #20]
 8002932:	b006      	add	sp, #24
 8002934:	bd70      	pop	{r4, r5, r6, pc}

08002936 <xTaskCreate>:
	{
 8002936:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800293a:	b085      	sub	sp, #20
 800293c:	4606      	mov	r6, r0
 800293e:	460f      	mov	r7, r1
 8002940:	4615      	mov	r5, r2
 8002942:	4698      	mov	r8, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002944:	0090      	lsls	r0, r2, #2
 8002946:	f7ff fcb5 	bl	80022b4 <pvPortMalloc>
			if( pxStack != NULL )
 800294a:	b310      	cbz	r0, 8002992 <xTaskCreate+0x5c>
 800294c:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800294e:	2054      	movs	r0, #84	; 0x54
 8002950:	f7ff fcb0 	bl	80022b4 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8002954:	4604      	mov	r4, r0
 8002956:	b1c0      	cbz	r0, 800298a <xTaskCreate+0x54>
					pxNewTCB->pxStack = pxStack;
 8002958:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
 800295c:	b1dc      	cbz	r4, 8002996 <xTaskCreate+0x60>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800295e:	2300      	movs	r3, #0
 8002960:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002964:	9303      	str	r3, [sp, #12]
 8002966:	9402      	str	r4, [sp, #8]
 8002968:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800296a:	9301      	str	r3, [sp, #4]
 800296c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800296e:	9300      	str	r3, [sp, #0]
 8002970:	4643      	mov	r3, r8
 8002972:	462a      	mov	r2, r5
 8002974:	4639      	mov	r1, r7
 8002976:	4630      	mov	r0, r6
 8002978:	f7ff fe38 	bl	80025ec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800297c:	4620      	mov	r0, r4
 800297e:	f7ff fea9 	bl	80026d4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002982:	2001      	movs	r0, #1
	}
 8002984:	b005      	add	sp, #20
 8002986:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 800298a:	4648      	mov	r0, r9
 800298c:	f7ff fd16 	bl	80023bc <vPortFree>
 8002990:	e7e4      	b.n	800295c <xTaskCreate+0x26>
				pxNewTCB = NULL;
 8002992:	2400      	movs	r4, #0
 8002994:	e7e2      	b.n	800295c <xTaskCreate+0x26>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002996:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return xReturn;
 800299a:	e7f3      	b.n	8002984 <xTaskCreate+0x4e>

0800299c <vTaskStartScheduler>:
{
 800299c:	b510      	push	{r4, lr}
 800299e:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80029a0:	2400      	movs	r4, #0
 80029a2:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80029a4:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80029a6:	aa07      	add	r2, sp, #28
 80029a8:	a906      	add	r1, sp, #24
 80029aa:	a805      	add	r0, sp, #20
 80029ac:	f000 faec 	bl	8002f88 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80029b0:	9b05      	ldr	r3, [sp, #20]
 80029b2:	9302      	str	r3, [sp, #8]
 80029b4:	9b06      	ldr	r3, [sp, #24]
 80029b6:	9301      	str	r3, [sp, #4]
 80029b8:	9400      	str	r4, [sp, #0]
 80029ba:	4623      	mov	r3, r4
 80029bc:	9a07      	ldr	r2, [sp, #28]
 80029be:	4910      	ldr	r1, [pc, #64]	; (8002a00 <vTaskStartScheduler+0x64>)
 80029c0:	4810      	ldr	r0, [pc, #64]	; (8002a04 <vTaskStartScheduler+0x68>)
 80029c2:	f7ff ff7f 	bl	80028c4 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 80029c6:	b118      	cbz	r0, 80029d0 <vTaskStartScheduler+0x34>
			xReturn = pdPASS;
 80029c8:	2301      	movs	r3, #1
	if( xReturn == pdPASS )
 80029ca:	b91b      	cbnz	r3, 80029d4 <vTaskStartScheduler+0x38>
}
 80029cc:	b008      	add	sp, #32
 80029ce:	bd10      	pop	{r4, pc}
			xReturn = pdFAIL;
 80029d0:	2300      	movs	r3, #0
 80029d2:	e7fa      	b.n	80029ca <vTaskStartScheduler+0x2e>
 80029d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029d8:	f383 8811 	msr	BASEPRI, r3
 80029dc:	f3bf 8f6f 	isb	sy
 80029e0:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 80029e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80029e8:	4b07      	ldr	r3, [pc, #28]	; (8002a08 <vTaskStartScheduler+0x6c>)
 80029ea:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80029ec:	2201      	movs	r2, #1
 80029ee:	4b07      	ldr	r3, [pc, #28]	; (8002a0c <vTaskStartScheduler+0x70>)
 80029f0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80029f2:	2200      	movs	r2, #0
 80029f4:	4b06      	ldr	r3, [pc, #24]	; (8002a10 <vTaskStartScheduler+0x74>)
 80029f6:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 80029f8:	f7ff fb76 	bl	80020e8 <xPortStartScheduler>
 80029fc:	e7e6      	b.n	80029cc <vTaskStartScheduler+0x30>
 80029fe:	bf00      	nop
 8002a00:	08003684 	.word	0x08003684
 8002a04:	08002805 	.word	0x08002805
 8002a08:	20003d20 	.word	0x20003d20
 8002a0c:	20003d3c 	.word	0x20003d3c
 8002a10:	20003d68 	.word	0x20003d68

08002a14 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8002a14:	4a02      	ldr	r2, [pc, #8]	; (8002a20 <vTaskSuspendAll+0xc>)
 8002a16:	6813      	ldr	r3, [r2, #0]
 8002a18:	3301      	adds	r3, #1
 8002a1a:	6013      	str	r3, [r2, #0]
 8002a1c:	4770      	bx	lr
 8002a1e:	bf00      	nop
 8002a20:	20003cec 	.word	0x20003cec

08002a24 <xTaskIncrementTick>:
{
 8002a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002a26:	4b3c      	ldr	r3, [pc, #240]	; (8002b18 <xTaskIncrementTick+0xf4>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d168      	bne.n	8002b00 <xTaskIncrementTick+0xdc>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002a2e:	4b3b      	ldr	r3, [pc, #236]	; (8002b1c <xTaskIncrementTick+0xf8>)
 8002a30:	681d      	ldr	r5, [r3, #0]
 8002a32:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8002a34:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002a36:	b9c5      	cbnz	r5, 8002a6a <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8002a38:	4b39      	ldr	r3, [pc, #228]	; (8002b20 <xTaskIncrementTick+0xfc>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	b143      	cbz	r3, 8002a52 <xTaskIncrementTick+0x2e>
 8002a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a44:	f383 8811 	msr	BASEPRI, r3
 8002a48:	f3bf 8f6f 	isb	sy
 8002a4c:	f3bf 8f4f 	dsb	sy
 8002a50:	e7fe      	b.n	8002a50 <xTaskIncrementTick+0x2c>
 8002a52:	4a33      	ldr	r2, [pc, #204]	; (8002b20 <xTaskIncrementTick+0xfc>)
 8002a54:	6811      	ldr	r1, [r2, #0]
 8002a56:	4b33      	ldr	r3, [pc, #204]	; (8002b24 <xTaskIncrementTick+0x100>)
 8002a58:	6818      	ldr	r0, [r3, #0]
 8002a5a:	6010      	str	r0, [r2, #0]
 8002a5c:	6019      	str	r1, [r3, #0]
 8002a5e:	4a32      	ldr	r2, [pc, #200]	; (8002b28 <xTaskIncrementTick+0x104>)
 8002a60:	6813      	ldr	r3, [r2, #0]
 8002a62:	3301      	adds	r3, #1
 8002a64:	6013      	str	r3, [r2, #0]
 8002a66:	f7ff fda7 	bl	80025b8 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002a6a:	4b30      	ldr	r3, [pc, #192]	; (8002b2c <xTaskIncrementTick+0x108>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	429d      	cmp	r5, r3
 8002a70:	d23a      	bcs.n	8002ae8 <xTaskIncrementTick+0xc4>
BaseType_t xSwitchRequired = pdFALSE;
 8002a72:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002a74:	4b2e      	ldr	r3, [pc, #184]	; (8002b30 <xTaskIncrementTick+0x10c>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a7a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002a7e:	009a      	lsls	r2, r3, #2
 8002a80:	4b2c      	ldr	r3, [pc, #176]	; (8002b34 <xTaskIncrementTick+0x110>)
 8002a82:	589b      	ldr	r3, [r3, r2]
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d940      	bls.n	8002b0a <xTaskIncrementTick+0xe6>
				xSwitchRequired = pdTRUE;
 8002a88:	2401      	movs	r4, #1
 8002a8a:	e03e      	b.n	8002b0a <xTaskIncrementTick+0xe6>
							xSwitchRequired = pdTRUE;
 8002a8c:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002a8e:	4b24      	ldr	r3, [pc, #144]	; (8002b20 <xTaskIncrementTick+0xfc>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	b353      	cbz	r3, 8002aec <xTaskIncrementTick+0xc8>
 8002a96:	2300      	movs	r3, #0
 8002a98:	bb53      	cbnz	r3, 8002af0 <xTaskIncrementTick+0xcc>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002a9a:	4b21      	ldr	r3, [pc, #132]	; (8002b20 <xTaskIncrementTick+0xfc>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002aa2:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
 8002aa4:	429d      	cmp	r5, r3
 8002aa6:	d328      	bcc.n	8002afa <xTaskIncrementTick+0xd6>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002aa8:	1d37      	adds	r7, r6, #4
 8002aaa:	4638      	mov	r0, r7
 8002aac:	f7ff f9fd 	bl	8001eaa <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002ab0:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8002ab2:	b11b      	cbz	r3, 8002abc <xTaskIncrementTick+0x98>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002ab4:	f106 0018 	add.w	r0, r6, #24
 8002ab8:	f7ff f9f7 	bl	8001eaa <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002abc:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8002abe:	2201      	movs	r2, #1
 8002ac0:	409a      	lsls	r2, r3
 8002ac2:	491d      	ldr	r1, [pc, #116]	; (8002b38 <xTaskIncrementTick+0x114>)
 8002ac4:	6808      	ldr	r0, [r1, #0]
 8002ac6:	4302      	orrs	r2, r0
 8002ac8:	600a      	str	r2, [r1, #0]
 8002aca:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002ace:	009a      	lsls	r2, r3, #2
 8002ad0:	4639      	mov	r1, r7
 8002ad2:	4818      	ldr	r0, [pc, #96]	; (8002b34 <xTaskIncrementTick+0x110>)
 8002ad4:	4410      	add	r0, r2
 8002ad6:	f7ff f9c2 	bl	8001e5e <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002ada:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8002adc:	4b14      	ldr	r3, [pc, #80]	; (8002b30 <xTaskIncrementTick+0x10c>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d2d2      	bcs.n	8002a8c <xTaskIncrementTick+0x68>
 8002ae6:	e7d2      	b.n	8002a8e <xTaskIncrementTick+0x6a>
 8002ae8:	2400      	movs	r4, #0
 8002aea:	e7d0      	b.n	8002a8e <xTaskIncrementTick+0x6a>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002aec:	2301      	movs	r3, #1
 8002aee:	e7d3      	b.n	8002a98 <xTaskIncrementTick+0x74>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002af0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002af4:	4b0d      	ldr	r3, [pc, #52]	; (8002b2c <xTaskIncrementTick+0x108>)
 8002af6:	601a      	str	r2, [r3, #0]
					break;
 8002af8:	e7bc      	b.n	8002a74 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 8002afa:	4a0c      	ldr	r2, [pc, #48]	; (8002b2c <xTaskIncrementTick+0x108>)
 8002afc:	6013      	str	r3, [r2, #0]
						break;
 8002afe:	e7b9      	b.n	8002a74 <xTaskIncrementTick+0x50>
		++uxPendedTicks;
 8002b00:	4a0e      	ldr	r2, [pc, #56]	; (8002b3c <xTaskIncrementTick+0x118>)
 8002b02:	6813      	ldr	r3, [r2, #0]
 8002b04:	3301      	adds	r3, #1
 8002b06:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8002b08:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
 8002b0a:	4b0d      	ldr	r3, [pc, #52]	; (8002b40 <xTaskIncrementTick+0x11c>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	b103      	cbz	r3, 8002b12 <xTaskIncrementTick+0xee>
			xSwitchRequired = pdTRUE;
 8002b10:	2401      	movs	r4, #1
}
 8002b12:	4620      	mov	r0, r4
 8002b14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002b16:	bf00      	nop
 8002b18:	20003cec 	.word	0x20003cec
 8002b1c:	20003d68 	.word	0x20003d68
 8002b20:	20003c4c 	.word	0x20003c4c
 8002b24:	20003c50 	.word	0x20003c50
 8002b28:	20003d24 	.word	0x20003d24
 8002b2c:	20003d20 	.word	0x20003d20
 8002b30:	20003c48 	.word	0x20003c48
 8002b34:	20003c54 	.word	0x20003c54
 8002b38:	20003cf4 	.word	0x20003cf4
 8002b3c:	20003ce8 	.word	0x20003ce8
 8002b40:	20003d6c 	.word	0x20003d6c

08002b44 <xTaskResumeAll>:
{
 8002b44:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 8002b46:	4b35      	ldr	r3, [pc, #212]	; (8002c1c <xTaskResumeAll+0xd8>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	b943      	cbnz	r3, 8002b5e <xTaskResumeAll+0x1a>
 8002b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b50:	f383 8811 	msr	BASEPRI, r3
 8002b54:	f3bf 8f6f 	isb	sy
 8002b58:	f3bf 8f4f 	dsb	sy
 8002b5c:	e7fe      	b.n	8002b5c <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 8002b5e:	f7ff fa21 	bl	8001fa4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8002b62:	4b2e      	ldr	r3, [pc, #184]	; (8002c1c <xTaskResumeAll+0xd8>)
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	3a01      	subs	r2, #1
 8002b68:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d150      	bne.n	8002c12 <xTaskResumeAll+0xce>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002b70:	4b2b      	ldr	r3, [pc, #172]	; (8002c20 <xTaskResumeAll+0xdc>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	b923      	cbnz	r3, 8002b80 <xTaskResumeAll+0x3c>
BaseType_t xAlreadyYielded = pdFALSE;
 8002b76:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8002b78:	f7ff fa36 	bl	8001fe8 <vPortExitCritical>
}
 8002b7c:	4620      	mov	r0, r4
 8002b7e:	bd38      	pop	{r3, r4, r5, pc}
 8002b80:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002b82:	4b28      	ldr	r3, [pc, #160]	; (8002c24 <xTaskResumeAll+0xe0>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	b31b      	cbz	r3, 8002bd0 <xTaskResumeAll+0x8c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002b88:	4b26      	ldr	r3, [pc, #152]	; (8002c24 <xTaskResumeAll+0xe0>)
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002b8e:	f104 0018 	add.w	r0, r4, #24
 8002b92:	f7ff f98a 	bl	8001eaa <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002b96:	1d25      	adds	r5, r4, #4
 8002b98:	4628      	mov	r0, r5
 8002b9a:	f7ff f986 	bl	8001eaa <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002b9e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	409a      	lsls	r2, r3
 8002ba4:	4920      	ldr	r1, [pc, #128]	; (8002c28 <xTaskResumeAll+0xe4>)
 8002ba6:	6808      	ldr	r0, [r1, #0]
 8002ba8:	4302      	orrs	r2, r0
 8002baa:	600a      	str	r2, [r1, #0]
 8002bac:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002bb0:	009a      	lsls	r2, r3, #2
 8002bb2:	4629      	mov	r1, r5
 8002bb4:	481d      	ldr	r0, [pc, #116]	; (8002c2c <xTaskResumeAll+0xe8>)
 8002bb6:	4410      	add	r0, r2
 8002bb8:	f7ff f951 	bl	8001e5e <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002bbc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002bbe:	4b1c      	ldr	r3, [pc, #112]	; (8002c30 <xTaskResumeAll+0xec>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d3dc      	bcc.n	8002b82 <xTaskResumeAll+0x3e>
						xYieldPending = pdTRUE;
 8002bc8:	2201      	movs	r2, #1
 8002bca:	4b1a      	ldr	r3, [pc, #104]	; (8002c34 <xTaskResumeAll+0xf0>)
 8002bcc:	601a      	str	r2, [r3, #0]
 8002bce:	e7d8      	b.n	8002b82 <xTaskResumeAll+0x3e>
				if( pxTCB != NULL )
 8002bd0:	b10c      	cbz	r4, 8002bd6 <xTaskResumeAll+0x92>
					prvResetNextTaskUnblockTime();
 8002bd2:	f7ff fcf1 	bl	80025b8 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002bd6:	4b18      	ldr	r3, [pc, #96]	; (8002c38 <xTaskResumeAll+0xf4>)
 8002bd8:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002bda:	b974      	cbnz	r4, 8002bfa <xTaskResumeAll+0xb6>
				if( xYieldPending != pdFALSE )
 8002bdc:	4b15      	ldr	r3, [pc, #84]	; (8002c34 <xTaskResumeAll+0xf0>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	b1cb      	cbz	r3, 8002c16 <xTaskResumeAll+0xd2>
					taskYIELD_IF_USING_PREEMPTION();
 8002be2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002be6:	4b15      	ldr	r3, [pc, #84]	; (8002c3c <xTaskResumeAll+0xf8>)
 8002be8:	601a      	str	r2, [r3, #0]
 8002bea:	f3bf 8f4f 	dsb	sy
 8002bee:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8002bf2:	2401      	movs	r4, #1
 8002bf4:	e7c0      	b.n	8002b78 <xTaskResumeAll+0x34>
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002bf6:	3c01      	subs	r4, #1
 8002bf8:	d007      	beq.n	8002c0a <xTaskResumeAll+0xc6>
							if( xTaskIncrementTick() != pdFALSE )
 8002bfa:	f7ff ff13 	bl	8002a24 <xTaskIncrementTick>
 8002bfe:	2800      	cmp	r0, #0
 8002c00:	d0f9      	beq.n	8002bf6 <xTaskResumeAll+0xb2>
								xYieldPending = pdTRUE;
 8002c02:	2201      	movs	r2, #1
 8002c04:	4b0b      	ldr	r3, [pc, #44]	; (8002c34 <xTaskResumeAll+0xf0>)
 8002c06:	601a      	str	r2, [r3, #0]
 8002c08:	e7f5      	b.n	8002bf6 <xTaskResumeAll+0xb2>
						uxPendedTicks = 0;
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	4b0a      	ldr	r3, [pc, #40]	; (8002c38 <xTaskResumeAll+0xf4>)
 8002c0e:	601a      	str	r2, [r3, #0]
 8002c10:	e7e4      	b.n	8002bdc <xTaskResumeAll+0x98>
BaseType_t xAlreadyYielded = pdFALSE;
 8002c12:	2400      	movs	r4, #0
 8002c14:	e7b0      	b.n	8002b78 <xTaskResumeAll+0x34>
 8002c16:	2400      	movs	r4, #0
 8002c18:	e7ae      	b.n	8002b78 <xTaskResumeAll+0x34>
 8002c1a:	bf00      	nop
 8002c1c:	20003cec 	.word	0x20003cec
 8002c20:	20003ce0 	.word	0x20003ce0
 8002c24:	20003d28 	.word	0x20003d28
 8002c28:	20003cf4 	.word	0x20003cf4
 8002c2c:	20003c54 	.word	0x20003c54
 8002c30:	20003c48 	.word	0x20003c48
 8002c34:	20003d6c 	.word	0x20003d6c
 8002c38:	20003ce8 	.word	0x20003ce8
 8002c3c:	e000ed04 	.word	0xe000ed04

08002c40 <vTaskDelay>:
	{
 8002c40:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002c42:	b1a8      	cbz	r0, 8002c70 <vTaskDelay+0x30>
 8002c44:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 8002c46:	4b10      	ldr	r3, [pc, #64]	; (8002c88 <vTaskDelay+0x48>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	b143      	cbz	r3, 8002c5e <vTaskDelay+0x1e>
 8002c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c50:	f383 8811 	msr	BASEPRI, r3
 8002c54:	f3bf 8f6f 	isb	sy
 8002c58:	f3bf 8f4f 	dsb	sy
 8002c5c:	e7fe      	b.n	8002c5c <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8002c5e:	f7ff fed9 	bl	8002a14 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002c62:	2100      	movs	r1, #0
 8002c64:	4620      	mov	r0, r4
 8002c66:	f7ff fde1 	bl	800282c <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8002c6a:	f7ff ff6b 	bl	8002b44 <xTaskResumeAll>
 8002c6e:	e000      	b.n	8002c72 <vTaskDelay+0x32>
	BaseType_t xAlreadyYielded = pdFALSE;
 8002c70:	2000      	movs	r0, #0
		if( xAlreadyYielded == pdFALSE )
 8002c72:	b938      	cbnz	r0, 8002c84 <vTaskDelay+0x44>
			portYIELD_WITHIN_API();
 8002c74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c78:	4b04      	ldr	r3, [pc, #16]	; (8002c8c <vTaskDelay+0x4c>)
 8002c7a:	601a      	str	r2, [r3, #0]
 8002c7c:	f3bf 8f4f 	dsb	sy
 8002c80:	f3bf 8f6f 	isb	sy
 8002c84:	bd10      	pop	{r4, pc}
 8002c86:	bf00      	nop
 8002c88:	20003cec 	.word	0x20003cec
 8002c8c:	e000ed04 	.word	0xe000ed04

08002c90 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002c90:	4b21      	ldr	r3, [pc, #132]	; (8002d18 <vTaskSwitchContext+0x88>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	b9c3      	cbnz	r3, 8002cc8 <vTaskSwitchContext+0x38>
		xYieldPending = pdFALSE;
 8002c96:	2200      	movs	r2, #0
 8002c98:	4b20      	ldr	r3, [pc, #128]	; (8002d1c <vTaskSwitchContext+0x8c>)
 8002c9a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002c9c:	4b20      	ldr	r3, [pc, #128]	; (8002d20 <vTaskSwitchContext+0x90>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002ca0:	fab3 f383 	clz	r3, r3
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	f1c3 031f 	rsb	r3, r3, #31
 8002caa:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8002cae:	008a      	lsls	r2, r1, #2
 8002cb0:	491c      	ldr	r1, [pc, #112]	; (8002d24 <vTaskSwitchContext+0x94>)
 8002cb2:	588a      	ldr	r2, [r1, r2]
 8002cb4:	b962      	cbnz	r2, 8002cd0 <vTaskSwitchContext+0x40>
	__asm volatile
 8002cb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cba:	f383 8811 	msr	BASEPRI, r3
 8002cbe:	f3bf 8f6f 	isb	sy
 8002cc2:	f3bf 8f4f 	dsb	sy
 8002cc6:	e7fe      	b.n	8002cc6 <vTaskSwitchContext+0x36>
		xYieldPending = pdTRUE;
 8002cc8:	2201      	movs	r2, #1
 8002cca:	4b14      	ldr	r3, [pc, #80]	; (8002d1c <vTaskSwitchContext+0x8c>)
 8002ccc:	601a      	str	r2, [r3, #0]
 8002cce:	4770      	bx	lr
{
 8002cd0:	b410      	push	{r4}
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002cd2:	4814      	ldr	r0, [pc, #80]	; (8002d24 <vTaskSwitchContext+0x94>)
 8002cd4:	009a      	lsls	r2, r3, #2
 8002cd6:	18d4      	adds	r4, r2, r3
 8002cd8:	00a1      	lsls	r1, r4, #2
 8002cda:	4401      	add	r1, r0
 8002cdc:	684c      	ldr	r4, [r1, #4]
 8002cde:	6864      	ldr	r4, [r4, #4]
 8002ce0:	604c      	str	r4, [r1, #4]
 8002ce2:	441a      	add	r2, r3
 8002ce4:	0091      	lsls	r1, r2, #2
 8002ce6:	3108      	adds	r1, #8
 8002ce8:	4408      	add	r0, r1
 8002cea:	4284      	cmp	r4, r0
 8002cec:	d00b      	beq.n	8002d06 <vTaskSwitchContext+0x76>
 8002cee:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002cf2:	009a      	lsls	r2, r3, #2
 8002cf4:	4b0b      	ldr	r3, [pc, #44]	; (8002d24 <vTaskSwitchContext+0x94>)
 8002cf6:	4413      	add	r3, r2
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	68da      	ldr	r2, [r3, #12]
 8002cfc:	4b0a      	ldr	r3, [pc, #40]	; (8002d28 <vTaskSwitchContext+0x98>)
 8002cfe:	601a      	str	r2, [r3, #0]
}
 8002d00:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002d04:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002d06:	6860      	ldr	r0, [r4, #4]
 8002d08:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8002d0c:	0091      	lsls	r1, r2, #2
 8002d0e:	4a05      	ldr	r2, [pc, #20]	; (8002d24 <vTaskSwitchContext+0x94>)
 8002d10:	440a      	add	r2, r1
 8002d12:	6050      	str	r0, [r2, #4]
 8002d14:	e7eb      	b.n	8002cee <vTaskSwitchContext+0x5e>
 8002d16:	bf00      	nop
 8002d18:	20003cec 	.word	0x20003cec
 8002d1c:	20003d6c 	.word	0x20003d6c
 8002d20:	20003cf4 	.word	0x20003cf4
 8002d24:	20003c54 	.word	0x20003c54
 8002d28:	20003c48 	.word	0x20003c48

08002d2c <xTaskRemoveFromEventList>:
{
 8002d2c:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8002d2e:	68c3      	ldr	r3, [r0, #12]
 8002d30:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8002d32:	b324      	cbz	r4, 8002d7e <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002d34:	f104 0518 	add.w	r5, r4, #24
 8002d38:	4628      	mov	r0, r5
 8002d3a:	f7ff f8b6 	bl	8001eaa <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002d3e:	4b18      	ldr	r3, [pc, #96]	; (8002da0 <xTaskRemoveFromEventList+0x74>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	bb2b      	cbnz	r3, 8002d90 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002d44:	1d25      	adds	r5, r4, #4
 8002d46:	4628      	mov	r0, r5
 8002d48:	f7ff f8af 	bl	8001eaa <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8002d4c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002d4e:	2201      	movs	r2, #1
 8002d50:	409a      	lsls	r2, r3
 8002d52:	4914      	ldr	r1, [pc, #80]	; (8002da4 <xTaskRemoveFromEventList+0x78>)
 8002d54:	6808      	ldr	r0, [r1, #0]
 8002d56:	4302      	orrs	r2, r0
 8002d58:	600a      	str	r2, [r1, #0]
 8002d5a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002d5e:	009a      	lsls	r2, r3, #2
 8002d60:	4629      	mov	r1, r5
 8002d62:	4811      	ldr	r0, [pc, #68]	; (8002da8 <xTaskRemoveFromEventList+0x7c>)
 8002d64:	4410      	add	r0, r2
 8002d66:	f7ff f87a 	bl	8001e5e <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002d6a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002d6c:	4b0f      	ldr	r3, [pc, #60]	; (8002dac <xTaskRemoveFromEventList+0x80>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d72:	429a      	cmp	r2, r3
 8002d74:	d911      	bls.n	8002d9a <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
 8002d76:	2001      	movs	r0, #1
 8002d78:	4b0d      	ldr	r3, [pc, #52]	; (8002db0 <xTaskRemoveFromEventList+0x84>)
 8002d7a:	6018      	str	r0, [r3, #0]
 8002d7c:	bd38      	pop	{r3, r4, r5, pc}
 8002d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d82:	f383 8811 	msr	BASEPRI, r3
 8002d86:	f3bf 8f6f 	isb	sy
 8002d8a:	f3bf 8f4f 	dsb	sy
 8002d8e:	e7fe      	b.n	8002d8e <xTaskRemoveFromEventList+0x62>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002d90:	4629      	mov	r1, r5
 8002d92:	4808      	ldr	r0, [pc, #32]	; (8002db4 <xTaskRemoveFromEventList+0x88>)
 8002d94:	f7ff f863 	bl	8001e5e <vListInsertEnd>
 8002d98:	e7e7      	b.n	8002d6a <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
 8002d9a:	2000      	movs	r0, #0
}
 8002d9c:	bd38      	pop	{r3, r4, r5, pc}
 8002d9e:	bf00      	nop
 8002da0:	20003cec 	.word	0x20003cec
 8002da4:	20003cf4 	.word	0x20003cf4
 8002da8:	20003c54 	.word	0x20003c54
 8002dac:	20003c48 	.word	0x20003c48
 8002db0:	20003d6c 	.word	0x20003d6c
 8002db4:	20003d28 	.word	0x20003d28

08002db8 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8002db8:	b500      	push	{lr}
 8002dba:	b083      	sub	sp, #12
   uint8_t MACAddr[6] ;

  heth.Instance = ETH;
 8002dbc:	4812      	ldr	r0, [pc, #72]	; (8002e08 <MX_ETH_Init+0x50>)
 8002dbe:	4b13      	ldr	r3, [pc, #76]	; (8002e0c <MX_ETH_Init+0x54>)
 8002dc0:	6003      	str	r3, [r0, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	6043      	str	r3, [r0, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	8203      	strh	r3, [r0, #16]
  MACAddr[0] = 0x00;
 8002dca:	f88d 3000 	strb.w	r3, [sp]
  MACAddr[1] = 0x80;
 8002dce:	2280      	movs	r2, #128	; 0x80
 8002dd0:	f88d 2001 	strb.w	r2, [sp, #1]
  MACAddr[2] = 0xE1;
 8002dd4:	22e1      	movs	r2, #225	; 0xe1
 8002dd6:	f88d 2002 	strb.w	r2, [sp, #2]
  MACAddr[3] = 0x00;
 8002dda:	f88d 3003 	strb.w	r3, [sp, #3]
  MACAddr[4] = 0x00;
 8002dde:	f88d 3004 	strb.w	r3, [sp, #4]
  MACAddr[5] = 0x00;
 8002de2:	f88d 3005 	strb.w	r3, [sp, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8002de6:	f8c0 d014 	str.w	sp, [r0, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8002dea:	6183      	str	r3, [r0, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8002dec:	61c3      	str	r3, [r0, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8002dee:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8002df2:	6203      	str	r3, [r0, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8002df4:	f7fd fd38 	bl	8000868 <HAL_ETH_Init>
 8002df8:	b910      	cbnz	r0, 8002e00 <MX_ETH_Init+0x48>
  {
    Error_Handler();
  }

}
 8002dfa:	b003      	add	sp, #12
 8002dfc:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8002e00:	f000 fa38 	bl	8003274 <Error_Handler>
}
 8002e04:	e7f9      	b.n	8002dfa <MX_ETH_Init+0x42>
 8002e06:	bf00      	nop
 8002e08:	20003fc8 	.word	0x20003fc8
 8002e0c:	40028000 	.word	0x40028000

08002e10 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8002e10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e12:	b08d      	sub	sp, #52	; 0x34

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e14:	2300      	movs	r3, #0
 8002e16:	9307      	str	r3, [sp, #28]
 8002e18:	9308      	str	r3, [sp, #32]
 8002e1a:	9309      	str	r3, [sp, #36]	; 0x24
 8002e1c:	930a      	str	r3, [sp, #40]	; 0x28
 8002e1e:	930b      	str	r3, [sp, #44]	; 0x2c
  if(ethHandle->Instance==ETH)
 8002e20:	6802      	ldr	r2, [r0, #0]
 8002e22:	4b3d      	ldr	r3, [pc, #244]	; (8002f18 <HAL_ETH_MspInit+0x108>)
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d001      	beq.n	8002e2c <HAL_ETH_MspInit+0x1c>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8002e28:	b00d      	add	sp, #52	; 0x34
 8002e2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ETH_CLK_ENABLE();
 8002e2c:	2400      	movs	r4, #0
 8002e2e:	9400      	str	r4, [sp, #0]
 8002e30:	f5a3 4390 	sub.w	r3, r3, #18432	; 0x4800
 8002e34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e36:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8002e3a:	631a      	str	r2, [r3, #48]	; 0x30
 8002e3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e3e:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8002e42:	9200      	str	r2, [sp, #0]
 8002e44:	9a00      	ldr	r2, [sp, #0]
 8002e46:	9401      	str	r4, [sp, #4]
 8002e48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e4a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002e4e:	631a      	str	r2, [r3, #48]	; 0x30
 8002e50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e52:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 8002e56:	9201      	str	r2, [sp, #4]
 8002e58:	9a01      	ldr	r2, [sp, #4]
 8002e5a:	9402      	str	r4, [sp, #8]
 8002e5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e5e:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8002e62:	631a      	str	r2, [r3, #48]	; 0x30
 8002e64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e66:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8002e6a:	9202      	str	r2, [sp, #8]
 8002e6c:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e6e:	9403      	str	r4, [sp, #12]
 8002e70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e72:	f042 0204 	orr.w	r2, r2, #4
 8002e76:	631a      	str	r2, [r3, #48]	; 0x30
 8002e78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e7a:	f002 0204 	and.w	r2, r2, #4
 8002e7e:	9203      	str	r2, [sp, #12]
 8002e80:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e82:	9404      	str	r4, [sp, #16]
 8002e84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e86:	f042 0201 	orr.w	r2, r2, #1
 8002e8a:	631a      	str	r2, [r3, #48]	; 0x30
 8002e8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e8e:	f002 0201 	and.w	r2, r2, #1
 8002e92:	9204      	str	r2, [sp, #16]
 8002e94:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e96:	9405      	str	r4, [sp, #20]
 8002e98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e9a:	f042 0202 	orr.w	r2, r2, #2
 8002e9e:	631a      	str	r2, [r3, #48]	; 0x30
 8002ea0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ea2:	f002 0202 	and.w	r2, r2, #2
 8002ea6:	9205      	str	r2, [sp, #20]
 8002ea8:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002eaa:	9406      	str	r4, [sp, #24]
 8002eac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002eae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002eb2:	631a      	str	r2, [r3, #48]	; 0x30
 8002eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eba:	9306      	str	r3, [sp, #24]
 8002ebc:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002ebe:	2332      	movs	r3, #50	; 0x32
 8002ec0:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ec2:	2702      	movs	r7, #2
 8002ec4:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ec6:	2603      	movs	r6, #3
 8002ec8:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002eca:	250b      	movs	r5, #11
 8002ecc:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ece:	a907      	add	r1, sp, #28
 8002ed0:	4812      	ldr	r0, [pc, #72]	; (8002f1c <HAL_ETH_MspInit+0x10c>)
 8002ed2:	f7fd fdf5 	bl	8000ac0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002ed6:	2386      	movs	r3, #134	; 0x86
 8002ed8:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eda:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002edc:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ede:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002ee0:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ee2:	a907      	add	r1, sp, #28
 8002ee4:	480e      	ldr	r0, [pc, #56]	; (8002f20 <HAL_ETH_MspInit+0x110>)
 8002ee6:	f7fd fdeb 	bl	8000ac0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8002eea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002eee:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ef0:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ef2:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ef4:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002ef6:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8002ef8:	a907      	add	r1, sp, #28
 8002efa:	480a      	ldr	r0, [pc, #40]	; (8002f24 <HAL_ETH_MspInit+0x114>)
 8002efc:	f7fd fde0 	bl	8000ac0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8002f00:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8002f04:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f06:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f08:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f0a:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002f0c:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002f0e:	a907      	add	r1, sp, #28
 8002f10:	4805      	ldr	r0, [pc, #20]	; (8002f28 <HAL_ETH_MspInit+0x118>)
 8002f12:	f7fd fdd5 	bl	8000ac0 <HAL_GPIO_Init>
}
 8002f16:	e787      	b.n	8002e28 <HAL_ETH_MspInit+0x18>
 8002f18:	40028000 	.word	0x40028000
 8002f1c:	40020800 	.word	0x40020800
 8002f20:	40020000 	.word	0x40020000
 8002f24:	40020400 	.word	0x40020400
 8002f28:	40021800 	.word	0x40021800

08002f2c <StartDefaultTask>:
  * @retval None
  */

/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002f2c:	b508      	push	{r3, lr}

  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
	  printf("Coucou !\n");
 8002f2e:	480c      	ldr	r0, [pc, #48]	; (8002f60 <StartDefaultTask+0x34>)
 8002f30:	f000 fa36 	bl	80033a0 <puts>
	  HAL_GPIO_WritePin(GPIOB, LD2_Pin, 1);
 8002f34:	4c0b      	ldr	r4, [pc, #44]	; (8002f64 <StartDefaultTask+0x38>)
 8002f36:	2201      	movs	r2, #1
 8002f38:	2180      	movs	r1, #128	; 0x80
 8002f3a:	4620      	mov	r0, r4
 8002f3c:	f7fd feb2 	bl	8000ca4 <HAL_GPIO_WritePin>
	  osDelay(250);
 8002f40:	20fa      	movs	r0, #250	; 0xfa
 8002f42:	f7fe ff61 	bl	8001e08 <osDelay>
	  HAL_GPIO_WritePin(GPIOB, LD2_Pin, 0);
 8002f46:	2200      	movs	r2, #0
 8002f48:	2180      	movs	r1, #128	; 0x80
 8002f4a:	4620      	mov	r0, r4
 8002f4c:	f7fd feaa 	bl	8000ca4 <HAL_GPIO_WritePin>
	  osDelay(250);
 8002f50:	20fa      	movs	r0, #250	; 0xfa
 8002f52:	f7fe ff59 	bl	8001e08 <osDelay>
	  osDelay(1);
 8002f56:	2001      	movs	r0, #1
 8002f58:	f7fe ff56 	bl	8001e08 <osDelay>
 8002f5c:	e7e7      	b.n	8002f2e <StartDefaultTask+0x2>
 8002f5e:	bf00      	nop
 8002f60:	0800368c 	.word	0x0800368c
 8002f64:	40020400 	.word	0x40020400

08002f68 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8002f68:	b508      	push	{r3, lr}
  /* USER CODE BEGIN StartTask02 */

  /* Infinite loop */
  for(;;)
  {
	  osDelay(1);
 8002f6a:	2001      	movs	r0, #1
 8002f6c:	f7fe ff4c 	bl	8001e08 <osDelay>
 8002f70:	e7fb      	b.n	8002f6a <StartTask02+0x2>

08002f72 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 8002f72:	b508      	push	{r3, lr}
  /* USER CODE BEGIN StartTask03 */

  /* Infinite loop */
  for(;;)
  {
	  osDelay(1);
 8002f74:	2001      	movs	r0, #1
 8002f76:	f7fe ff47 	bl	8001e08 <osDelay>
 8002f7a:	e7fb      	b.n	8002f74 <StartTask03+0x2>

08002f7c <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void const * argument)
{
 8002f7c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN StartTask04 */

  /* Infinite loop */
  for(;;)
  {
	  osDelay(1);
 8002f7e:	2001      	movs	r0, #1
 8002f80:	f7fe ff42 	bl	8001e08 <osDelay>
 8002f84:	e7fb      	b.n	8002f7e <StartTask04+0x2>
	...

08002f88 <vApplicationGetIdleTaskMemory>:
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002f88:	4b03      	ldr	r3, [pc, #12]	; (8002f98 <vApplicationGetIdleTaskMemory+0x10>)
 8002f8a:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8002f8c:	4b03      	ldr	r3, [pc, #12]	; (8002f9c <vApplicationGetIdleTaskMemory+0x14>)
 8002f8e:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002f90:	2380      	movs	r3, #128	; 0x80
 8002f92:	6013      	str	r3, [r2, #0]
 8002f94:	4770      	bx	lr
 8002f96:	bf00      	nop
 8002f98:	20003f70 	.word	0x20003f70
 8002f9c:	20003d70 	.word	0x20003d70

08002fa0 <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 8002fa0:	b570      	push	{r4, r5, r6, lr}
 8002fa2:	b0a0      	sub	sp, #128	; 0x80
  osMessageQDef(exchange, 6, uint16_t);
 8002fa4:	4c24      	ldr	r4, [pc, #144]	; (8003038 <MX_FREERTOS_Init+0x98>)
 8002fa6:	ad1c      	add	r5, sp, #112	; 0x70
 8002fa8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002fac:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  exchangeHandle = osMessageCreate(osMessageQ(exchange), NULL);
 8002fb0:	2100      	movs	r1, #0
 8002fb2:	4628      	mov	r0, r5
 8002fb4:	f7fe ff31 	bl	8001e1a <osMessageCreate>
 8002fb8:	4b20      	ldr	r3, [pc, #128]	; (800303c <MX_FREERTOS_Init+0x9c>)
 8002fba:	6018      	str	r0, [r3, #0]
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8002fbc:	ad15      	add	r5, sp, #84	; 0x54
 8002fbe:	f104 0610 	add.w	r6, r4, #16
 8002fc2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002fc4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fc6:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8002fca:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8002fce:	2100      	movs	r1, #0
 8002fd0:	a815      	add	r0, sp, #84	; 0x54
 8002fd2:	f7fe fee4 	bl	8001d9e <osThreadCreate>
 8002fd6:	4b1a      	ldr	r3, [pc, #104]	; (8003040 <MX_FREERTOS_Init+0xa0>)
 8002fd8:	6018      	str	r0, [r3, #0]
  osThreadDef(myTask02, StartTask02, osPriorityIdle, 0, 128);
 8002fda:	ad0e      	add	r5, sp, #56	; 0x38
 8002fdc:	f104 062c 	add.w	r6, r4, #44	; 0x2c
 8002fe0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002fe2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fe4:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8002fe8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 8002fec:	2100      	movs	r1, #0
 8002fee:	a80e      	add	r0, sp, #56	; 0x38
 8002ff0:	f7fe fed5 	bl	8001d9e <osThreadCreate>
 8002ff4:	4b13      	ldr	r3, [pc, #76]	; (8003044 <MX_FREERTOS_Init+0xa4>)
 8002ff6:	6018      	str	r0, [r3, #0]
  osThreadDef(myTask03, StartTask03, osPriorityIdle, 0, 128);
 8002ff8:	ad07      	add	r5, sp, #28
 8002ffa:	f104 0648 	add.w	r6, r4, #72	; 0x48
 8002ffe:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003000:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003002:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8003006:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  myTask03Handle = osThreadCreate(osThread(myTask03), NULL);
 800300a:	2100      	movs	r1, #0
 800300c:	a807      	add	r0, sp, #28
 800300e:	f7fe fec6 	bl	8001d9e <osThreadCreate>
 8003012:	4b0d      	ldr	r3, [pc, #52]	; (8003048 <MX_FREERTOS_Init+0xa8>)
 8003014:	6018      	str	r0, [r3, #0]
  osThreadDef(myTask04, StartTask04, osPriorityIdle, 0, 128);
 8003016:	466d      	mov	r5, sp
 8003018:	3464      	adds	r4, #100	; 0x64
 800301a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800301c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800301e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8003022:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  myTask04Handle = osThreadCreate(osThread(myTask04), NULL);
 8003026:	2100      	movs	r1, #0
 8003028:	4668      	mov	r0, sp
 800302a:	f7fe feb8 	bl	8001d9e <osThreadCreate>
 800302e:	4b07      	ldr	r3, [pc, #28]	; (800304c <MX_FREERTOS_Init+0xac>)
 8003030:	6018      	str	r0, [r3, #0]
}
 8003032:	b020      	add	sp, #128	; 0x80
 8003034:	bd70      	pop	{r4, r5, r6, pc}
 8003036:	bf00      	nop
 8003038:	08003604 	.word	0x08003604
 800303c:	2000401c 	.word	0x2000401c
 8003040:	20004010 	.word	0x20004010
 8003044:	20004018 	.word	0x20004018
 8003048:	20004020 	.word	0x20004020
 800304c:	20004014 	.word	0x20004014

08003050 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003050:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003052:	b08d      	sub	sp, #52	; 0x34

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003054:	2400      	movs	r4, #0
 8003056:	9407      	str	r4, [sp, #28]
 8003058:	9408      	str	r4, [sp, #32]
 800305a:	9409      	str	r4, [sp, #36]	; 0x24
 800305c:	940a      	str	r4, [sp, #40]	; 0x28
 800305e:	940b      	str	r4, [sp, #44]	; 0x2c

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003060:	9401      	str	r4, [sp, #4]
 8003062:	4b38      	ldr	r3, [pc, #224]	; (8003144 <MX_GPIO_Init+0xf4>)
 8003064:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003066:	f042 0204 	orr.w	r2, r2, #4
 800306a:	631a      	str	r2, [r3, #48]	; 0x30
 800306c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800306e:	f002 0204 	and.w	r2, r2, #4
 8003072:	9201      	str	r2, [sp, #4]
 8003074:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003076:	9402      	str	r4, [sp, #8]
 8003078:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800307a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800307e:	631a      	str	r2, [r3, #48]	; 0x30
 8003080:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003082:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8003086:	9202      	str	r2, [sp, #8]
 8003088:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800308a:	9403      	str	r4, [sp, #12]
 800308c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800308e:	f042 0201 	orr.w	r2, r2, #1
 8003092:	631a      	str	r2, [r3, #48]	; 0x30
 8003094:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003096:	f002 0201 	and.w	r2, r2, #1
 800309a:	9203      	str	r2, [sp, #12]
 800309c:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800309e:	9404      	str	r4, [sp, #16]
 80030a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030a2:	f042 0202 	orr.w	r2, r2, #2
 80030a6:	631a      	str	r2, [r3, #48]	; 0x30
 80030a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030aa:	f002 0202 	and.w	r2, r2, #2
 80030ae:	9204      	str	r2, [sp, #16]
 80030b0:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80030b2:	9405      	str	r4, [sp, #20]
 80030b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030b6:	f042 0208 	orr.w	r2, r2, #8
 80030ba:	631a      	str	r2, [r3, #48]	; 0x30
 80030bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030be:	f002 0208 	and.w	r2, r2, #8
 80030c2:	9205      	str	r2, [sp, #20]
 80030c4:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80030c6:	9406      	str	r4, [sp, #24]
 80030c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030ce:	631a      	str	r2, [r3, #48]	; 0x30
 80030d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030d6:	9306      	str	r3, [sp, #24]
 80030d8:	9b06      	ldr	r3, [sp, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80030da:	4f1b      	ldr	r7, [pc, #108]	; (8003148 <MX_GPIO_Init+0xf8>)
 80030dc:	4622      	mov	r2, r4
 80030de:	f244 0181 	movw	r1, #16513	; 0x4081
 80030e2:	4638      	mov	r0, r7
 80030e4:	f7fd fdde 	bl	8000ca4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80030e8:	4d18      	ldr	r5, [pc, #96]	; (800314c <MX_GPIO_Init+0xfc>)
 80030ea:	4622      	mov	r2, r4
 80030ec:	2140      	movs	r1, #64	; 0x40
 80030ee:	4628      	mov	r0, r5
 80030f0:	f7fd fdd8 	bl	8000ca4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80030f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80030f8:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80030fa:	4b15      	ldr	r3, [pc, #84]	; (8003150 <MX_GPIO_Init+0x100>)
 80030fc:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030fe:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8003100:	a907      	add	r1, sp, #28
 8003102:	4814      	ldr	r0, [pc, #80]	; (8003154 <MX_GPIO_Init+0x104>)
 8003104:	f7fd fcdc 	bl	8000ac0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8003108:	f244 0381 	movw	r3, #16513	; 0x4081
 800310c:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800310e:	2601      	movs	r6, #1
 8003110:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003112:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003114:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003116:	a907      	add	r1, sp, #28
 8003118:	4638      	mov	r0, r7
 800311a:	f7fd fcd1 	bl	8000ac0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800311e:	2340      	movs	r3, #64	; 0x40
 8003120:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003122:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003124:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003126:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8003128:	a907      	add	r1, sp, #28
 800312a:	4628      	mov	r0, r5
 800312c:	f7fd fcc8 	bl	8000ac0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8003130:	2380      	movs	r3, #128	; 0x80
 8003132:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003134:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003136:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8003138:	a907      	add	r1, sp, #28
 800313a:	4628      	mov	r0, r5
 800313c:	f7fd fcc0 	bl	8000ac0 <HAL_GPIO_Init>

}
 8003140:	b00d      	add	sp, #52	; 0x34
 8003142:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003144:	40023800 	.word	0x40023800
 8003148:	40020400 	.word	0x40020400
 800314c:	40021800 	.word	0x40021800
 8003150:	10110000 	.word	0x10110000
 8003154:	40020800 	.word	0x40020800

08003158 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003158:	b530      	push	{r4, r5, lr}
 800315a:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800315c:	2230      	movs	r2, #48	; 0x30
 800315e:	2100      	movs	r1, #0
 8003160:	a808      	add	r0, sp, #32
 8003162:	f000 fa3b 	bl	80035dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003166:	2400      	movs	r4, #0
 8003168:	9403      	str	r4, [sp, #12]
 800316a:	9404      	str	r4, [sp, #16]
 800316c:	9405      	str	r4, [sp, #20]
 800316e:	9406      	str	r4, [sp, #24]
 8003170:	9407      	str	r4, [sp, #28]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003172:	9401      	str	r4, [sp, #4]
 8003174:	4b1c      	ldr	r3, [pc, #112]	; (80031e8 <SystemClock_Config+0x90>)
 8003176:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003178:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800317c:	641a      	str	r2, [r3, #64]	; 0x40
 800317e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003180:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003184:	9301      	str	r3, [sp, #4]
 8003186:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003188:	9402      	str	r4, [sp, #8]
 800318a:	4b18      	ldr	r3, [pc, #96]	; (80031ec <SystemClock_Config+0x94>)
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8003192:	601a      	str	r2, [r3, #0]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800319a:	9302      	str	r3, [sp, #8]
 800319c:	9b02      	ldr	r3, [sp, #8]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800319e:	2301      	movs	r3, #1
 80031a0:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80031a2:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80031a6:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80031a8:	2502      	movs	r5, #2
 80031aa:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80031ac:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80031b0:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80031b2:	2304      	movs	r3, #4
 80031b4:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80031b6:	23a8      	movs	r3, #168	; 0xa8
 80031b8:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80031ba:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80031bc:	2307      	movs	r3, #7
 80031be:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80031c0:	a808      	add	r0, sp, #32
 80031c2:	f7fd fe07 	bl	8000dd4 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80031c6:	230f      	movs	r3, #15
 80031c8:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80031ca:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80031cc:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80031ce:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80031d2:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80031d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80031d8:	9307      	str	r3, [sp, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80031da:	2105      	movs	r1, #5
 80031dc:	a803      	add	r0, sp, #12
 80031de:	f7fe f82f 	bl	8001240 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 80031e2:	b015      	add	sp, #84	; 0x54
 80031e4:	bd30      	pop	{r4, r5, pc}
 80031e6:	bf00      	nop
 80031e8:	40023800 	.word	0x40023800
 80031ec:	40007000 	.word	0x40007000

080031f0 <main>:
{
 80031f0:	b508      	push	{r3, lr}
  HAL_Init();
 80031f2:	f7fd f98d 	bl	8000510 <HAL_Init>
  SystemClock_Config();
 80031f6:	f7ff ffaf 	bl	8003158 <SystemClock_Config>
  MX_GPIO_Init();
 80031fa:	f7ff ff29 	bl	8003050 <MX_GPIO_Init>
  MX_ETH_Init();
 80031fe:	f7ff fddb 	bl	8002db8 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8003202:	f000 f8e9 	bl	80033d8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8003206:	f000 f93b 	bl	8003480 <MX_USB_OTG_FS_PCD_Init>
  MX_FREERTOS_Init();
 800320a:	f7ff fec9 	bl	8002fa0 <MX_FREERTOS_Init>
  osKernelStart();
 800320e:	f7fe fdc1 	bl	8001d94 <osKernelStart>
 8003212:	e7fe      	b.n	8003212 <main+0x22>

08003214 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len) // the new function for SWV output
{
 8003214:	b430      	push	{r4, r5}
	int i=0;
	for(i=0 ; i<len ; i++)
 8003216:	2400      	movs	r4, #0
 8003218:	e00a      	b.n	8003230 <_write+0x1c>
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
  {
    while (ITM->PORT[0U].u32 == 0UL)
    {
      __NOP();
 800321a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800321c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d0f9      	beq.n	800321a <_write+0x6>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8003226:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800322a:	7019      	strb	r1, [r3, #0]
 800322c:	3401      	adds	r4, #1
		ITM_SendChar((*ptr++)); // out char to serial
 800322e:	4629      	mov	r1, r5
	for(i=0 ; i<len ; i++)
 8003230:	4294      	cmp	r4, r2
 8003232:	da10      	bge.n	8003256 <_write+0x42>
		ITM_SendChar((*ptr++)); // out char to serial
 8003234:	1c4d      	adds	r5, r1, #1
 8003236:	7809      	ldrb	r1, [r1, #0]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8003238:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800323c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8003240:	f013 0f01 	tst.w	r3, #1
 8003244:	d0f2      	beq.n	800322c <_write+0x18>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8003246:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800324a:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800324e:	f013 0f01 	tst.w	r3, #1
 8003252:	d1e3      	bne.n	800321c <_write+0x8>
 8003254:	e7ea      	b.n	800322c <_write+0x18>
	return len;
}
 8003256:	4610      	mov	r0, r2
 8003258:	bc30      	pop	{r4, r5}
 800325a:	4770      	bx	lr

0800325c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800325c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM8) {
 800325e:	6802      	ldr	r2, [r0, #0]
 8003260:	4b03      	ldr	r3, [pc, #12]	; (8003270 <HAL_TIM_PeriodElapsedCallback+0x14>)
 8003262:	429a      	cmp	r2, r3
 8003264:	d000      	beq.n	8003268 <HAL_TIM_PeriodElapsedCallback+0xc>
 8003266:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 8003268:	f7fd f96c 	bl	8000544 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800326c:	e7fb      	b.n	8003266 <HAL_TIM_PeriodElapsedCallback+0xa>
 800326e:	bf00      	nop
 8003270:	40010400 	.word	0x40010400

08003274 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003274:	4770      	bx	lr
	...

08003278 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003278:	b500      	push	{lr}
 800327a:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800327c:	2200      	movs	r2, #0
 800327e:	9200      	str	r2, [sp, #0]
 8003280:	4b0d      	ldr	r3, [pc, #52]	; (80032b8 <HAL_MspInit+0x40>)
 8003282:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8003284:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8003288:	6459      	str	r1, [r3, #68]	; 0x44
 800328a:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800328c:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 8003290:	9100      	str	r1, [sp, #0]
 8003292:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003294:	9201      	str	r2, [sp, #4]
 8003296:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003298:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800329c:	6419      	str	r1, [r3, #64]	; 0x40
 800329e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032a4:	9301      	str	r3, [sp, #4]
 80032a6:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80032a8:	210f      	movs	r1, #15
 80032aa:	f06f 0001 	mvn.w	r0, #1
 80032ae:	f7fd f981 	bl	80005b4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80032b2:	b003      	add	sp, #12
 80032b4:	f85d fb04 	ldr.w	pc, [sp], #4
 80032b8:	40023800 	.word	0x40023800

080032bc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032bc:	b510      	push	{r4, lr}
 80032be:	b088      	sub	sp, #32
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM8 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, TickPriority ,0); 
 80032c0:	2200      	movs	r2, #0
 80032c2:	4601      	mov	r1, r0
 80032c4:	202c      	movs	r0, #44	; 0x2c
 80032c6:	f7fd f975 	bl	80005b4 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM8 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn); 
 80032ca:	202c      	movs	r0, #44	; 0x2c
 80032cc:	f7fd f9a4 	bl	8000618 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM8 clock */
  __HAL_RCC_TIM8_CLK_ENABLE();
 80032d0:	2400      	movs	r4, #0
 80032d2:	9401      	str	r4, [sp, #4]
 80032d4:	4b14      	ldr	r3, [pc, #80]	; (8003328 <HAL_InitTick+0x6c>)
 80032d6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032d8:	f042 0202 	orr.w	r2, r2, #2
 80032dc:	645a      	str	r2, [r3, #68]	; 0x44
 80032de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032e0:	f003 0302 	and.w	r3, r3, #2
 80032e4:	9301      	str	r3, [sp, #4]
 80032e6:	9b01      	ldr	r3, [sp, #4]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80032e8:	a902      	add	r1, sp, #8
 80032ea:	a803      	add	r0, sp, #12
 80032ec:	f7fe f87a 	bl	80013e4 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM8 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80032f0:	f7fe f868 	bl	80013c4 <HAL_RCC_GetPCLK2Freq>
 80032f4:	0043      	lsls	r3, r0, #1
   
  /* Compute the prescaler value to have TIM8 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80032f6:	480d      	ldr	r0, [pc, #52]	; (800332c <HAL_InitTick+0x70>)
 80032f8:	fba0 2303 	umull	r2, r3, r0, r3
 80032fc:	0c9b      	lsrs	r3, r3, #18
 80032fe:	3b01      	subs	r3, #1
  
  /* Initialize TIM8 */
  htim8.Instance = TIM8;
 8003300:	480b      	ldr	r0, [pc, #44]	; (8003330 <HAL_InitTick+0x74>)
 8003302:	4a0c      	ldr	r2, [pc, #48]	; (8003334 <HAL_InitTick+0x78>)
 8003304:	6002      	str	r2, [r0, #0]
  + Period = [(TIM8CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim8.Init.Period = (1000000 / 1000) - 1;
 8003306:	f240 32e7 	movw	r2, #999	; 0x3e7
 800330a:	60c2      	str	r2, [r0, #12]
  htim8.Init.Prescaler = uwPrescalerValue;
 800330c:	6043      	str	r3, [r0, #4]
  htim8.Init.ClockDivision = 0;
 800330e:	6104      	str	r4, [r0, #16]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003310:	6084      	str	r4, [r0, #8]
  if(HAL_TIM_Base_Init(&htim8) == HAL_OK)
 8003312:	f7fe f9bf 	bl	8001694 <HAL_TIM_Base_Init>
 8003316:	b110      	cbz	r0, 800331e <HAL_InitTick+0x62>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim8);
  }
  
  /* Return function status */
  return HAL_ERROR;
 8003318:	2001      	movs	r0, #1
}
 800331a:	b008      	add	sp, #32
 800331c:	bd10      	pop	{r4, pc}
    return HAL_TIM_Base_Start_IT(&htim8);
 800331e:	4804      	ldr	r0, [pc, #16]	; (8003330 <HAL_InitTick+0x74>)
 8003320:	f7fe f87f 	bl	8001422 <HAL_TIM_Base_Start_IT>
 8003324:	e7f9      	b.n	800331a <HAL_InitTick+0x5e>
 8003326:	bf00      	nop
 8003328:	40023800 	.word	0x40023800
 800332c:	431bde83 	.word	0x431bde83
 8003330:	20004024 	.word	0x20004024
 8003334:	40010400 	.word	0x40010400

08003338 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003338:	4770      	bx	lr

0800333a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800333a:	e7fe      	b.n	800333a <HardFault_Handler>

0800333c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800333c:	e7fe      	b.n	800333c <MemManage_Handler>

0800333e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800333e:	e7fe      	b.n	800333e <BusFault_Handler>

08003340 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003340:	e7fe      	b.n	8003340 <UsageFault_Handler>

08003342 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003342:	4770      	bx	lr

08003344 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8003344:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8003346:	4802      	ldr	r0, [pc, #8]	; (8003350 <TIM8_UP_TIM13_IRQHandler+0xc>)
 8003348:	f7fe f880 	bl	800144c <HAL_TIM_IRQHandler>
 800334c:	bd08      	pop	{r3, pc}
 800334e:	bf00      	nop
 8003350:	20004024 	.word	0x20004024

08003354 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003354:	490f      	ldr	r1, [pc, #60]	; (8003394 <SystemInit+0x40>)
 8003356:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800335a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800335e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003362:	4b0d      	ldr	r3, [pc, #52]	; (8003398 <SystemInit+0x44>)
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	f042 0201 	orr.w	r2, r2, #1
 800336a:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800336c:	2000      	movs	r0, #0
 800336e:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8003376:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800337a:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800337c:	4a07      	ldr	r2, [pc, #28]	; (800339c <SystemInit+0x48>)
 800337e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003386:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003388:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800338a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800338e:	608b      	str	r3, [r1, #8]
 8003390:	4770      	bx	lr
 8003392:	bf00      	nop
 8003394:	e000ed00 	.word	0xe000ed00
 8003398:	40023800 	.word	0x40023800
 800339c:	24003010 	.word	0x24003010

080033a0 <puts>:
 **  Returns:  If successful, the result is a nonnegative integer; otherwise,
 **  the result is EOF.
 **
 **===========================================================================
 */
int puts(const char *s) {
 80033a0:	b538      	push	{r3, r4, r5, lr}
 80033a2:	4605      	mov	r5, r0
	int length = strlen(s);
 80033a4:	f7fc ff24 	bl	80001f0 <strlen>
 80033a8:	4604      	mov	r4, r0
	int numbytes = 0;
	int res;

	numbytes = _write(1, (char*) s, length);
 80033aa:	4602      	mov	r2, r0
 80033ac:	4629      	mov	r1, r5
 80033ae:	2001      	movs	r0, #1
 80033b0:	f7ff ff30 	bl	8003214 <_write>
 80033b4:	4605      	mov	r5, r0
	numbytes += _write(1, "\n", 1);
 80033b6:	2201      	movs	r2, #1
 80033b8:	4906      	ldr	r1, [pc, #24]	; (80033d4 <puts+0x34>)
 80033ba:	4610      	mov	r0, r2
 80033bc:	f7ff ff2a 	bl	8003214 <_write>
 80033c0:	4428      	add	r0, r5

	if (numbytes == (length + 1)) {
 80033c2:	3401      	adds	r4, #1
 80033c4:	42a0      	cmp	r0, r4
 80033c6:	d101      	bne.n	80033cc <puts+0x2c>
		res = 0;
 80033c8:	2000      	movs	r0, #0
 80033ca:	bd38      	pop	{r3, r4, r5, pc}
	} else {
		res = EOF;
 80033cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}

	return res;
}
 80033d0:	bd38      	pop	{r3, r4, r5, pc}
 80033d2:	bf00      	nop
 80033d4:	080036e0 	.word	0x080036e0

080033d8 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80033d8:	b508      	push	{r3, lr}

  huart3.Instance = USART3;
 80033da:	480a      	ldr	r0, [pc, #40]	; (8003404 <MX_USART3_UART_Init+0x2c>)
 80033dc:	4b0a      	ldr	r3, [pc, #40]	; (8003408 <MX_USART3_UART_Init+0x30>)
 80033de:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = 115200;
 80033e0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80033e4:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80033e6:	2300      	movs	r3, #0
 80033e8:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80033ea:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80033ec:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80033ee:	220c      	movs	r2, #12
 80033f0:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80033f2:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80033f4:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80033f6:	f7fe fb0b 	bl	8001a10 <HAL_UART_Init>
 80033fa:	b900      	cbnz	r0, 80033fe <MX_USART3_UART_Init+0x26>
 80033fc:	bd08      	pop	{r3, pc}
  {
    Error_Handler();
 80033fe:	f7ff ff39 	bl	8003274 <Error_Handler>
  }

}
 8003402:	e7fb      	b.n	80033fc <MX_USART3_UART_Init+0x24>
 8003404:	20004064 	.word	0x20004064
 8003408:	40004800 	.word	0x40004800

0800340c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800340c:	b500      	push	{lr}
 800340e:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003410:	2300      	movs	r3, #0
 8003412:	9303      	str	r3, [sp, #12]
 8003414:	9304      	str	r3, [sp, #16]
 8003416:	9305      	str	r3, [sp, #20]
 8003418:	9306      	str	r3, [sp, #24]
 800341a:	9307      	str	r3, [sp, #28]
  if(uartHandle->Instance==USART3)
 800341c:	6802      	ldr	r2, [r0, #0]
 800341e:	4b16      	ldr	r3, [pc, #88]	; (8003478 <HAL_UART_MspInit+0x6c>)
 8003420:	429a      	cmp	r2, r3
 8003422:	d002      	beq.n	800342a <HAL_UART_MspInit+0x1e>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8003424:	b009      	add	sp, #36	; 0x24
 8003426:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART3_CLK_ENABLE();
 800342a:	2100      	movs	r1, #0
 800342c:	9101      	str	r1, [sp, #4]
 800342e:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
 8003432:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003434:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003438:	641a      	str	r2, [r3, #64]	; 0x40
 800343a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800343c:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8003440:	9201      	str	r2, [sp, #4]
 8003442:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003444:	9102      	str	r1, [sp, #8]
 8003446:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003448:	f042 0208 	orr.w	r2, r2, #8
 800344c:	631a      	str	r2, [r3, #48]	; 0x30
 800344e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003450:	f003 0308 	and.w	r3, r3, #8
 8003454:	9302      	str	r3, [sp, #8]
 8003456:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8003458:	f44f 7340 	mov.w	r3, #768	; 0x300
 800345c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800345e:	2302      	movs	r3, #2
 8003460:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003462:	2301      	movs	r3, #1
 8003464:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003466:	2303      	movs	r3, #3
 8003468:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800346a:	2307      	movs	r3, #7
 800346c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800346e:	a903      	add	r1, sp, #12
 8003470:	4802      	ldr	r0, [pc, #8]	; (800347c <HAL_UART_MspInit+0x70>)
 8003472:	f7fd fb25 	bl	8000ac0 <HAL_GPIO_Init>
}
 8003476:	e7d5      	b.n	8003424 <HAL_UART_MspInit+0x18>
 8003478:	40004800 	.word	0x40004800
 800347c:	40020c00 	.word	0x40020c00

08003480 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8003480:	b508      	push	{r3, lr}

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8003482:	480c      	ldr	r0, [pc, #48]	; (80034b4 <MX_USB_OTG_FS_PCD_Init+0x34>)
 8003484:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003488:	6003      	str	r3, [r0, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800348a:	2304      	movs	r3, #4
 800348c:	6043      	str	r3, [r0, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800348e:	2202      	movs	r2, #2
 8003490:	60c2      	str	r2, [r0, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8003492:	2300      	movs	r3, #0
 8003494:	6103      	str	r3, [r0, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8003496:	6182      	str	r2, [r0, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8003498:	2201      	movs	r2, #1
 800349a:	61c2      	str	r2, [r0, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800349c:	6203      	str	r3, [r0, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800349e:	6243      	str	r3, [r0, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80034a0:	62c2      	str	r2, [r0, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80034a2:	6303      	str	r3, [r0, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80034a4:	f7fd fc04 	bl	8000cb0 <HAL_PCD_Init>
 80034a8:	b900      	cbnz	r0, 80034ac <MX_USB_OTG_FS_PCD_Init+0x2c>
 80034aa:	bd08      	pop	{r3, pc}
  {
    Error_Handler();
 80034ac:	f7ff fee2 	bl	8003274 <Error_Handler>
  }

}
 80034b0:	e7fb      	b.n	80034aa <MX_USB_OTG_FS_PCD_Init+0x2a>
 80034b2:	bf00      	nop
 80034b4:	200040a4 	.word	0x200040a4

080034b8 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80034b8:	b570      	push	{r4, r5, r6, lr}
 80034ba:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034bc:	2300      	movs	r3, #0
 80034be:	9303      	str	r3, [sp, #12]
 80034c0:	9304      	str	r3, [sp, #16]
 80034c2:	9305      	str	r3, [sp, #20]
 80034c4:	9306      	str	r3, [sp, #24]
 80034c6:	9307      	str	r3, [sp, #28]
  if(pcdHandle->Instance==USB_OTG_FS)
 80034c8:	6803      	ldr	r3, [r0, #0]
 80034ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80034ce:	d001      	beq.n	80034d4 <HAL_PCD_MspInit+0x1c>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80034d0:	b008      	add	sp, #32
 80034d2:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034d4:	2500      	movs	r5, #0
 80034d6:	9501      	str	r5, [sp, #4]
 80034d8:	4c17      	ldr	r4, [pc, #92]	; (8003538 <HAL_PCD_MspInit+0x80>)
 80034da:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80034dc:	f043 0301 	orr.w	r3, r3, #1
 80034e0:	6323      	str	r3, [r4, #48]	; 0x30
 80034e2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80034e4:	f003 0301 	and.w	r3, r3, #1
 80034e8:	9301      	str	r3, [sp, #4]
 80034ea:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80034ec:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80034f0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034f2:	2302      	movs	r3, #2
 80034f4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034f6:	2303      	movs	r3, #3
 80034f8:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80034fa:	230a      	movs	r3, #10
 80034fc:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034fe:	4e0f      	ldr	r6, [pc, #60]	; (800353c <HAL_PCD_MspInit+0x84>)
 8003500:	a903      	add	r1, sp, #12
 8003502:	4630      	mov	r0, r6
 8003504:	f7fd fadc 	bl	8000ac0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8003508:	f44f 7300 	mov.w	r3, #512	; 0x200
 800350c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800350e:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003510:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8003512:	a903      	add	r1, sp, #12
 8003514:	4630      	mov	r0, r6
 8003516:	f7fd fad3 	bl	8000ac0 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800351a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800351c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003520:	6363      	str	r3, [r4, #52]	; 0x34
 8003522:	9502      	str	r5, [sp, #8]
 8003524:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003526:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800352a:	6463      	str	r3, [r4, #68]	; 0x44
 800352c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800352e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003532:	9302      	str	r3, [sp, #8]
 8003534:	9b02      	ldr	r3, [sp, #8]
}
 8003536:	e7cb      	b.n	80034d0 <HAL_PCD_MspInit+0x18>
 8003538:	40023800 	.word	0x40023800
 800353c:	40020000 	.word	0x40020000

08003540 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8003540:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003578 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003544:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003546:	e003      	b.n	8003550 <LoopCopyDataInit>

08003548 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003548:	4b0c      	ldr	r3, [pc, #48]	; (800357c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800354a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800354c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800354e:	3104      	adds	r1, #4

08003550 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003550:	480b      	ldr	r0, [pc, #44]	; (8003580 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003552:	4b0c      	ldr	r3, [pc, #48]	; (8003584 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003554:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003556:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003558:	d3f6      	bcc.n	8003548 <CopyDataInit>
  ldr  r2, =_sbss
 800355a:	4a0b      	ldr	r2, [pc, #44]	; (8003588 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800355c:	e002      	b.n	8003564 <LoopFillZerobss>

0800355e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800355e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003560:	f842 3b04 	str.w	r3, [r2], #4

08003564 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003564:	4b09      	ldr	r3, [pc, #36]	; (800358c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003566:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003568:	d3f9      	bcc.n	800355e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800356a:	f7ff fef3 	bl	8003354 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800356e:	f000 f811 	bl	8003594 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003572:	f7ff fe3d 	bl	80031f0 <main>
  bx  lr    
 8003576:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8003578:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 800357c:	080036f4 	.word	0x080036f4
  ldr  r0, =_sdata
 8003580:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003584:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8003588:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 800358c:	200044ac 	.word	0x200044ac

08003590 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003590:	e7fe      	b.n	8003590 <ADC_IRQHandler>
	...

08003594 <__libc_init_array>:
 8003594:	b570      	push	{r4, r5, r6, lr}
 8003596:	4e0d      	ldr	r6, [pc, #52]	; (80035cc <__libc_init_array+0x38>)
 8003598:	4c0d      	ldr	r4, [pc, #52]	; (80035d0 <__libc_init_array+0x3c>)
 800359a:	1ba4      	subs	r4, r4, r6
 800359c:	10a4      	asrs	r4, r4, #2
 800359e:	2500      	movs	r5, #0
 80035a0:	42a5      	cmp	r5, r4
 80035a2:	d109      	bne.n	80035b8 <__libc_init_array+0x24>
 80035a4:	4e0b      	ldr	r6, [pc, #44]	; (80035d4 <__libc_init_array+0x40>)
 80035a6:	4c0c      	ldr	r4, [pc, #48]	; (80035d8 <__libc_init_array+0x44>)
 80035a8:	f000 f820 	bl	80035ec <_init>
 80035ac:	1ba4      	subs	r4, r4, r6
 80035ae:	10a4      	asrs	r4, r4, #2
 80035b0:	2500      	movs	r5, #0
 80035b2:	42a5      	cmp	r5, r4
 80035b4:	d105      	bne.n	80035c2 <__libc_init_array+0x2e>
 80035b6:	bd70      	pop	{r4, r5, r6, pc}
 80035b8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80035bc:	4798      	blx	r3
 80035be:	3501      	adds	r5, #1
 80035c0:	e7ee      	b.n	80035a0 <__libc_init_array+0xc>
 80035c2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80035c6:	4798      	blx	r3
 80035c8:	3501      	adds	r5, #1
 80035ca:	e7f2      	b.n	80035b2 <__libc_init_array+0x1e>
 80035cc:	080036ec 	.word	0x080036ec
 80035d0:	080036ec 	.word	0x080036ec
 80035d4:	080036ec 	.word	0x080036ec
 80035d8:	080036f0 	.word	0x080036f0

080035dc <memset>:
 80035dc:	4402      	add	r2, r0
 80035de:	4603      	mov	r3, r0
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d100      	bne.n	80035e6 <memset+0xa>
 80035e4:	4770      	bx	lr
 80035e6:	f803 1b01 	strb.w	r1, [r3], #1
 80035ea:	e7f9      	b.n	80035e0 <memset+0x4>

080035ec <_init>:
 80035ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035ee:	bf00      	nop
 80035f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035f2:	bc08      	pop	{r3}
 80035f4:	469e      	mov	lr, r3
 80035f6:	4770      	bx	lr

080035f8 <_fini>:
 80035f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035fa:	bf00      	nop
 80035fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035fe:	bc08      	pop	{r3}
 8003600:	469e      	mov	lr, r3
 8003602:	4770      	bx	lr
