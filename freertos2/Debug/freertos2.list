
freertos2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000030fc  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  080032ac  080032ac  000132ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800334c  0800334c  0001334c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08003354  08003354  00013354  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08003358  08003358  00013358  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  0800335c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
  8 .bss          000044ac  2000000c  2000000c  0002000c  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  200044b8  200044b8  0002000c  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001b586  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00003e88  00000000  00000000  0003b5c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000bb61  00000000  00000000  0003f44a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000010c8  00000000  00000000  0004afb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001360  00000000  00000000  0004c078  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00008752  00000000  00000000  0004d3d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    0000714c  00000000  00000000  00055b2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  0005cc76  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000030f4  00000000  00000000  0005ccf4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000000c 	.word	0x2000000c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08003294 	.word	0x08003294

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000010 	.word	0x20000010
 80001ec:	08003294 	.word	0x08003294

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000200:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000204:	f000 b97a 	b.w	80004fc <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	468c      	mov	ip, r1
 8000226:	460d      	mov	r5, r1
 8000228:	4604      	mov	r4, r0
 800022a:	9e08      	ldr	r6, [sp, #32]
 800022c:	2b00      	cmp	r3, #0
 800022e:	d151      	bne.n	80002d4 <__udivmoddi4+0xb4>
 8000230:	428a      	cmp	r2, r1
 8000232:	4617      	mov	r7, r2
 8000234:	d96d      	bls.n	8000312 <__udivmoddi4+0xf2>
 8000236:	fab2 fe82 	clz	lr, r2
 800023a:	f1be 0f00 	cmp.w	lr, #0
 800023e:	d00b      	beq.n	8000258 <__udivmoddi4+0x38>
 8000240:	f1ce 0c20 	rsb	ip, lr, #32
 8000244:	fa01 f50e 	lsl.w	r5, r1, lr
 8000248:	fa20 fc0c 	lsr.w	ip, r0, ip
 800024c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000250:	ea4c 0c05 	orr.w	ip, ip, r5
 8000254:	fa00 f40e 	lsl.w	r4, r0, lr
 8000258:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800025c:	0c25      	lsrs	r5, r4, #16
 800025e:	fbbc f8fa 	udiv	r8, ip, sl
 8000262:	fa1f f987 	uxth.w	r9, r7
 8000266:	fb0a cc18 	mls	ip, sl, r8, ip
 800026a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800026e:	fb08 f309 	mul.w	r3, r8, r9
 8000272:	42ab      	cmp	r3, r5
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x6c>
 8000276:	19ed      	adds	r5, r5, r7
 8000278:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 800027c:	f080 8123 	bcs.w	80004c6 <__udivmoddi4+0x2a6>
 8000280:	42ab      	cmp	r3, r5
 8000282:	f240 8120 	bls.w	80004c6 <__udivmoddi4+0x2a6>
 8000286:	f1a8 0802 	sub.w	r8, r8, #2
 800028a:	443d      	add	r5, r7
 800028c:	1aed      	subs	r5, r5, r3
 800028e:	b2a4      	uxth	r4, r4
 8000290:	fbb5 f0fa 	udiv	r0, r5, sl
 8000294:	fb0a 5510 	mls	r5, sl, r0, r5
 8000298:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800029c:	fb00 f909 	mul.w	r9, r0, r9
 80002a0:	45a1      	cmp	r9, r4
 80002a2:	d909      	bls.n	80002b8 <__udivmoddi4+0x98>
 80002a4:	19e4      	adds	r4, r4, r7
 80002a6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002aa:	f080 810a 	bcs.w	80004c2 <__udivmoddi4+0x2a2>
 80002ae:	45a1      	cmp	r9, r4
 80002b0:	f240 8107 	bls.w	80004c2 <__udivmoddi4+0x2a2>
 80002b4:	3802      	subs	r0, #2
 80002b6:	443c      	add	r4, r7
 80002b8:	eba4 0409 	sub.w	r4, r4, r9
 80002bc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002c0:	2100      	movs	r1, #0
 80002c2:	2e00      	cmp	r6, #0
 80002c4:	d061      	beq.n	800038a <__udivmoddi4+0x16a>
 80002c6:	fa24 f40e 	lsr.w	r4, r4, lr
 80002ca:	2300      	movs	r3, #0
 80002cc:	6034      	str	r4, [r6, #0]
 80002ce:	6073      	str	r3, [r6, #4]
 80002d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d907      	bls.n	80002e8 <__udivmoddi4+0xc8>
 80002d8:	2e00      	cmp	r6, #0
 80002da:	d054      	beq.n	8000386 <__udivmoddi4+0x166>
 80002dc:	2100      	movs	r1, #0
 80002de:	e886 0021 	stmia.w	r6, {r0, r5}
 80002e2:	4608      	mov	r0, r1
 80002e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e8:	fab3 f183 	clz	r1, r3
 80002ec:	2900      	cmp	r1, #0
 80002ee:	f040 808e 	bne.w	800040e <__udivmoddi4+0x1ee>
 80002f2:	42ab      	cmp	r3, r5
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0xdc>
 80002f6:	4282      	cmp	r2, r0
 80002f8:	f200 80fa 	bhi.w	80004f0 <__udivmoddi4+0x2d0>
 80002fc:	1a84      	subs	r4, r0, r2
 80002fe:	eb65 0503 	sbc.w	r5, r5, r3
 8000302:	2001      	movs	r0, #1
 8000304:	46ac      	mov	ip, r5
 8000306:	2e00      	cmp	r6, #0
 8000308:	d03f      	beq.n	800038a <__udivmoddi4+0x16a>
 800030a:	e886 1010 	stmia.w	r6, {r4, ip}
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	b912      	cbnz	r2, 800031a <__udivmoddi4+0xfa>
 8000314:	2701      	movs	r7, #1
 8000316:	fbb7 f7f2 	udiv	r7, r7, r2
 800031a:	fab7 fe87 	clz	lr, r7
 800031e:	f1be 0f00 	cmp.w	lr, #0
 8000322:	d134      	bne.n	800038e <__udivmoddi4+0x16e>
 8000324:	1beb      	subs	r3, r5, r7
 8000326:	0c3a      	lsrs	r2, r7, #16
 8000328:	fa1f fc87 	uxth.w	ip, r7
 800032c:	2101      	movs	r1, #1
 800032e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000332:	0c25      	lsrs	r5, r4, #16
 8000334:	fb02 3318 	mls	r3, r2, r8, r3
 8000338:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800033c:	fb0c f308 	mul.w	r3, ip, r8
 8000340:	42ab      	cmp	r3, r5
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x134>
 8000344:	19ed      	adds	r5, r5, r7
 8000346:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x132>
 800034c:	42ab      	cmp	r3, r5
 800034e:	f200 80d1 	bhi.w	80004f4 <__udivmoddi4+0x2d4>
 8000352:	4680      	mov	r8, r0
 8000354:	1aed      	subs	r5, r5, r3
 8000356:	b2a3      	uxth	r3, r4
 8000358:	fbb5 f0f2 	udiv	r0, r5, r2
 800035c:	fb02 5510 	mls	r5, r2, r0, r5
 8000360:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000364:	fb0c fc00 	mul.w	ip, ip, r0
 8000368:	45a4      	cmp	ip, r4
 800036a:	d907      	bls.n	800037c <__udivmoddi4+0x15c>
 800036c:	19e4      	adds	r4, r4, r7
 800036e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x15a>
 8000374:	45a4      	cmp	ip, r4
 8000376:	f200 80b8 	bhi.w	80004ea <__udivmoddi4+0x2ca>
 800037a:	4618      	mov	r0, r3
 800037c:	eba4 040c 	sub.w	r4, r4, ip
 8000380:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000384:	e79d      	b.n	80002c2 <__udivmoddi4+0xa2>
 8000386:	4631      	mov	r1, r6
 8000388:	4630      	mov	r0, r6
 800038a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038e:	f1ce 0420 	rsb	r4, lr, #32
 8000392:	fa05 f30e 	lsl.w	r3, r5, lr
 8000396:	fa07 f70e 	lsl.w	r7, r7, lr
 800039a:	fa20 f804 	lsr.w	r8, r0, r4
 800039e:	0c3a      	lsrs	r2, r7, #16
 80003a0:	fa25 f404 	lsr.w	r4, r5, r4
 80003a4:	ea48 0803 	orr.w	r8, r8, r3
 80003a8:	fbb4 f1f2 	udiv	r1, r4, r2
 80003ac:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003b0:	fb02 4411 	mls	r4, r2, r1, r4
 80003b4:	fa1f fc87 	uxth.w	ip, r7
 80003b8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003bc:	fb01 f30c 	mul.w	r3, r1, ip
 80003c0:	42ab      	cmp	r3, r5
 80003c2:	fa00 f40e 	lsl.w	r4, r0, lr
 80003c6:	d909      	bls.n	80003dc <__udivmoddi4+0x1bc>
 80003c8:	19ed      	adds	r5, r5, r7
 80003ca:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 80003ce:	f080 808a 	bcs.w	80004e6 <__udivmoddi4+0x2c6>
 80003d2:	42ab      	cmp	r3, r5
 80003d4:	f240 8087 	bls.w	80004e6 <__udivmoddi4+0x2c6>
 80003d8:	3902      	subs	r1, #2
 80003da:	443d      	add	r5, r7
 80003dc:	1aeb      	subs	r3, r5, r3
 80003de:	fa1f f588 	uxth.w	r5, r8
 80003e2:	fbb3 f0f2 	udiv	r0, r3, r2
 80003e6:	fb02 3310 	mls	r3, r2, r0, r3
 80003ea:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003ee:	fb00 f30c 	mul.w	r3, r0, ip
 80003f2:	42ab      	cmp	r3, r5
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1e6>
 80003f6:	19ed      	adds	r5, r5, r7
 80003f8:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80003fc:	d26f      	bcs.n	80004de <__udivmoddi4+0x2be>
 80003fe:	42ab      	cmp	r3, r5
 8000400:	d96d      	bls.n	80004de <__udivmoddi4+0x2be>
 8000402:	3802      	subs	r0, #2
 8000404:	443d      	add	r5, r7
 8000406:	1aeb      	subs	r3, r5, r3
 8000408:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800040c:	e78f      	b.n	800032e <__udivmoddi4+0x10e>
 800040e:	f1c1 0720 	rsb	r7, r1, #32
 8000412:	fa22 f807 	lsr.w	r8, r2, r7
 8000416:	408b      	lsls	r3, r1
 8000418:	fa05 f401 	lsl.w	r4, r5, r1
 800041c:	ea48 0303 	orr.w	r3, r8, r3
 8000420:	fa20 fe07 	lsr.w	lr, r0, r7
 8000424:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000428:	40fd      	lsrs	r5, r7
 800042a:	ea4e 0e04 	orr.w	lr, lr, r4
 800042e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000432:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000436:	fb0c 5519 	mls	r5, ip, r9, r5
 800043a:	fa1f f883 	uxth.w	r8, r3
 800043e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000442:	fb09 f408 	mul.w	r4, r9, r8
 8000446:	42ac      	cmp	r4, r5
 8000448:	fa02 f201 	lsl.w	r2, r2, r1
 800044c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x244>
 8000452:	18ed      	adds	r5, r5, r3
 8000454:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000458:	d243      	bcs.n	80004e2 <__udivmoddi4+0x2c2>
 800045a:	42ac      	cmp	r4, r5
 800045c:	d941      	bls.n	80004e2 <__udivmoddi4+0x2c2>
 800045e:	f1a9 0902 	sub.w	r9, r9, #2
 8000462:	441d      	add	r5, r3
 8000464:	1b2d      	subs	r5, r5, r4
 8000466:	fa1f fe8e 	uxth.w	lr, lr
 800046a:	fbb5 f0fc 	udiv	r0, r5, ip
 800046e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000472:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000476:	fb00 f808 	mul.w	r8, r0, r8
 800047a:	45a0      	cmp	r8, r4
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x26e>
 800047e:	18e4      	adds	r4, r4, r3
 8000480:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000484:	d229      	bcs.n	80004da <__udivmoddi4+0x2ba>
 8000486:	45a0      	cmp	r8, r4
 8000488:	d927      	bls.n	80004da <__udivmoddi4+0x2ba>
 800048a:	3802      	subs	r0, #2
 800048c:	441c      	add	r4, r3
 800048e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000492:	eba4 0408 	sub.w	r4, r4, r8
 8000496:	fba0 8902 	umull	r8, r9, r0, r2
 800049a:	454c      	cmp	r4, r9
 800049c:	46c6      	mov	lr, r8
 800049e:	464d      	mov	r5, r9
 80004a0:	d315      	bcc.n	80004ce <__udivmoddi4+0x2ae>
 80004a2:	d012      	beq.n	80004ca <__udivmoddi4+0x2aa>
 80004a4:	b156      	cbz	r6, 80004bc <__udivmoddi4+0x29c>
 80004a6:	ebba 030e 	subs.w	r3, sl, lr
 80004aa:	eb64 0405 	sbc.w	r4, r4, r5
 80004ae:	fa04 f707 	lsl.w	r7, r4, r7
 80004b2:	40cb      	lsrs	r3, r1
 80004b4:	431f      	orrs	r7, r3
 80004b6:	40cc      	lsrs	r4, r1
 80004b8:	6037      	str	r7, [r6, #0]
 80004ba:	6074      	str	r4, [r6, #4]
 80004bc:	2100      	movs	r1, #0
 80004be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c2:	4618      	mov	r0, r3
 80004c4:	e6f8      	b.n	80002b8 <__udivmoddi4+0x98>
 80004c6:	4690      	mov	r8, r2
 80004c8:	e6e0      	b.n	800028c <__udivmoddi4+0x6c>
 80004ca:	45c2      	cmp	sl, r8
 80004cc:	d2ea      	bcs.n	80004a4 <__udivmoddi4+0x284>
 80004ce:	ebb8 0e02 	subs.w	lr, r8, r2
 80004d2:	eb69 0503 	sbc.w	r5, r9, r3
 80004d6:	3801      	subs	r0, #1
 80004d8:	e7e4      	b.n	80004a4 <__udivmoddi4+0x284>
 80004da:	4628      	mov	r0, r5
 80004dc:	e7d7      	b.n	800048e <__udivmoddi4+0x26e>
 80004de:	4640      	mov	r0, r8
 80004e0:	e791      	b.n	8000406 <__udivmoddi4+0x1e6>
 80004e2:	4681      	mov	r9, r0
 80004e4:	e7be      	b.n	8000464 <__udivmoddi4+0x244>
 80004e6:	4601      	mov	r1, r0
 80004e8:	e778      	b.n	80003dc <__udivmoddi4+0x1bc>
 80004ea:	3802      	subs	r0, #2
 80004ec:	443c      	add	r4, r7
 80004ee:	e745      	b.n	800037c <__udivmoddi4+0x15c>
 80004f0:	4608      	mov	r0, r1
 80004f2:	e708      	b.n	8000306 <__udivmoddi4+0xe6>
 80004f4:	f1a8 0802 	sub.w	r8, r8, #2
 80004f8:	443d      	add	r5, r7
 80004fa:	e72b      	b.n	8000354 <__udivmoddi4+0x134>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000500:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000502:	4b0b      	ldr	r3, [pc, #44]	; (8000530 <HAL_Init+0x30>)
 8000504:	681a      	ldr	r2, [r3, #0]
 8000506:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800050a:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800050c:	681a      	ldr	r2, [r3, #0]
 800050e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000512:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000514:	681a      	ldr	r2, [r3, #0]
 8000516:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800051a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800051c:	2003      	movs	r0, #3
 800051e:	f000 f82f 	bl	8000580 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000522:	2000      	movs	r0, #0
 8000524:	f002 fd2a 	bl	8002f7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000528:	f002 fd06 	bl	8002f38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 800052c:	2000      	movs	r0, #0
 800052e:	bd08      	pop	{r3, pc}
 8000530:	40023c00 	.word	0x40023c00

08000534 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000534:	4a03      	ldr	r2, [pc, #12]	; (8000544 <HAL_IncTick+0x10>)
 8000536:	4b04      	ldr	r3, [pc, #16]	; (8000548 <HAL_IncTick+0x14>)
 8000538:	6811      	ldr	r1, [r2, #0]
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	440b      	add	r3, r1
 800053e:	6013      	str	r3, [r2, #0]
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop
 8000544:	20003fc4 	.word	0x20003fc4
 8000548:	20000000 	.word	0x20000000

0800054c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800054c:	4b01      	ldr	r3, [pc, #4]	; (8000554 <HAL_GetTick+0x8>)
 800054e:	6818      	ldr	r0, [r3, #0]
}
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop
 8000554:	20003fc4 	.word	0x20003fc4

08000558 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000558:	b538      	push	{r3, r4, r5, lr}
 800055a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800055c:	f7ff fff6 	bl	800054c <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000560:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000562:	bf1c      	itt	ne
 8000564:	4b05      	ldrne	r3, [pc, #20]	; (800057c <HAL_Delay+0x24>)
 8000566:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000568:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 800056a:	bf18      	it	ne
 800056c:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800056e:	f7ff ffed 	bl	800054c <HAL_GetTick>
 8000572:	1b40      	subs	r0, r0, r5
 8000574:	4284      	cmp	r4, r0
 8000576:	d8fa      	bhi.n	800056e <HAL_Delay+0x16>
  {
  }
}
 8000578:	bd38      	pop	{r3, r4, r5, pc}
 800057a:	bf00      	nop
 800057c:	20000000 	.word	0x20000000

08000580 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000580:	4a07      	ldr	r2, [pc, #28]	; (80005a0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000582:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000584:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000588:	041b      	lsls	r3, r3, #16
 800058a:	0c1b      	lsrs	r3, r3, #16
 800058c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000590:	0200      	lsls	r0, r0, #8
 8000592:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000596:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800059a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800059c:	60d3      	str	r3, [r2, #12]
 800059e:	4770      	bx	lr
 80005a0:	e000ed00 	.word	0xe000ed00

080005a4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005a4:	4b17      	ldr	r3, [pc, #92]	; (8000604 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80005a6:	b530      	push	{r4, r5, lr}
 80005a8:	68dc      	ldr	r4, [r3, #12]
 80005aa:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005ae:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005b2:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005b4:	2b04      	cmp	r3, #4
 80005b6:	bf28      	it	cs
 80005b8:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005ba:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005bc:	f04f 0501 	mov.w	r5, #1
 80005c0:	fa05 f303 	lsl.w	r3, r5, r3
 80005c4:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005c8:	bf8c      	ite	hi
 80005ca:	3c03      	subhi	r4, #3
 80005cc:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005ce:	4019      	ands	r1, r3
 80005d0:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005d2:	fa05 f404 	lsl.w	r4, r5, r4
 80005d6:	3c01      	subs	r4, #1
 80005d8:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 80005da:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005dc:	ea42 0201 	orr.w	r2, r2, r1
 80005e0:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005e4:	bfad      	iteet	ge
 80005e6:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005ea:	f000 000f 	andlt.w	r0, r0, #15
 80005ee:	4b06      	ldrlt	r3, [pc, #24]	; (8000608 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005f0:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005f4:	bfb5      	itete	lt
 80005f6:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005f8:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005fa:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005fc:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	bf00      	nop
 8000604:	e000ed00 	.word	0xe000ed00
 8000608:	e000ed14 	.word	0xe000ed14

0800060c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800060c:	2800      	cmp	r0, #0
 800060e:	db08      	blt.n	8000622 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000610:	0942      	lsrs	r2, r0, #5
 8000612:	2301      	movs	r3, #1
 8000614:	f000 001f 	and.w	r0, r0, #31
 8000618:	fa03 f000 	lsl.w	r0, r3, r0
 800061c:	4b01      	ldr	r3, [pc, #4]	; (8000624 <HAL_NVIC_EnableIRQ+0x18>)
 800061e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000622:	4770      	bx	lr
 8000624:	e000e100 	.word	0xe000e100

08000628 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	4604      	mov	r4, r0
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 800062c:	b129      	cbz	r1, 800063a <ETH_MACDMAConfig+0x12>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 800062e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000632:	60c3      	str	r3, [r0, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8000634:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000638:	6083      	str	r3, [r0, #8]
  macinit.Jabber = ETH_JABBER_ENABLE;
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800063a:	69e3      	ldr	r3, [r4, #28]
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
  macinit.VLANTagIdentifier = 0x0U;
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800063c:	6822      	ldr	r2, [r4, #0]
                       macinit.Jabber | 
                       macinit.InterFrameGap |
                       macinit.CarrierSense |
                       (heth->Init).Speed | 
                       macinit.ReceiveOwn |
                       macinit.LoopbackMode |
 800063e:	68e0      	ldr	r0, [r4, #12]
  tmpreg1 = (heth->Instance)->MACCR;
 8000640:	6815      	ldr	r5, [r2, #0]
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8000642:	2b00      	cmp	r3, #0
                       macinit.LoopbackMode |
 8000644:	68a3      	ldr	r3, [r4, #8]
 8000646:	ea43 0300 	orr.w	r3, r3, r0
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800064a:	4830      	ldr	r0, [pc, #192]	; (800070c <ETH_MACDMAConfig+0xe4>)
 800064c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000650:	ea00 0005 	and.w	r0, r0, r5
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8000654:	bf0c      	ite	eq
 8000656:	f44f 6180 	moveq.w	r1, #1024	; 0x400
 800065a:	2100      	movne	r1, #0
 800065c:	4303      	orrs	r3, r0
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 800065e:	430b      	orrs	r3, r1
                       macinit.AutomaticPadCRCStrip | 
                       macinit.BackOffLimit | 
                       macinit.DeferralCheck);
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8000660:	6013      	str	r3, [r2, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8000662:	2001      	movs	r0, #1
  tmpreg1 = (heth->Instance)->MACCR;
 8000664:	6815      	ldr	r5, [r2, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8000666:	f7ff ff77 	bl	8000558 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 800066a:	6823      	ldr	r3, [r4, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800066c:	2240      	movs	r2, #64	; 0x40
  (heth->Instance)->MACCR = tmpreg1; 
 800066e:	601d      	str	r5, [r3, #0]
                                        macinit.UnicastFramesFilter);
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8000670:	2001      	movs	r0, #1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8000672:	605a      	str	r2, [r3, #4]
   tmpreg1 = (heth->Instance)->MACFFR;
 8000674:	685d      	ldr	r5, [r3, #4]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8000676:	f7ff ff6f 	bl	8000558 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 800067a:	6823      	ldr	r3, [r4, #0]
 800067c:	605d      	str	r5, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 800067e:	2500      	movs	r5, #0
 8000680:	609d      	str	r5, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8000682:	60dd      	str	r5, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8000684:	699a      	ldr	r2, [r3, #24]
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8000686:	f022 02be 	bic.w	r2, r2, #190	; 0xbe
 800068a:	0412      	lsls	r2, r2, #16
 800068c:	0c12      	lsrs	r2, r2, #16
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 800068e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
                        macinit.UnicastPauseFrameDetect | 
                        macinit.ReceiveFlowControl |
                        macinit.TransmitFlowControl); 
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8000692:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8000694:	2001      	movs	r0, #1
   tmpreg1 = (heth->Instance)->MACFCR;
 8000696:	699e      	ldr	r6, [r3, #24]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8000698:	f7ff ff5e 	bl	8000558 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 800069c:	6823      	ldr	r3, [r4, #0]
                                            macinit.VLANTagIdentifier);
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800069e:	2001      	movs	r0, #1
   (heth->Instance)->MACFCR = tmpreg1;
 80006a0:	619e      	str	r6, [r3, #24]
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80006a2:	61dd      	str	r5, [r3, #28]
    tmpreg1 = (heth->Instance)->MACVLANTR;
 80006a4:	69dd      	ldr	r5, [r3, #28]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80006a6:	f7ff ff57 	bl	8000558 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 80006aa:	6822      	ldr	r2, [r4, #0]
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80006ac:	4b18      	ldr	r3, [pc, #96]	; (8000710 <ETH_MACDMAConfig+0xe8>)
    (heth->Instance)->MACVLANTR = tmpreg1;
 80006ae:	61d5      	str	r5, [r2, #28]
    tmpreg1 = (heth->Instance)->DMAOMR;
 80006b0:	f241 0518 	movw	r5, #4120	; 0x1018
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80006b4:	2001      	movs	r0, #1
    tmpreg1 = (heth->Instance)->DMAOMR;
 80006b6:	5951      	ldr	r1, [r2, r5]
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80006b8:	400b      	ands	r3, r1
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80006ba:	f043 7308 	orr.w	r3, r3, #35651584	; 0x2200000
 80006be:	f043 0304 	orr.w	r3, r3, #4
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80006c2:	5153      	str	r3, [r2, r5]
    tmpreg1 = (heth->Instance)->DMAOMR;
 80006c4:	5956      	ldr	r6, [r2, r5]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80006c6:	f7ff ff47 	bl	8000558 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 80006ca:	6823      	ldr	r3, [r4, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80006cc:	4a11      	ldr	r2, [pc, #68]	; (8000714 <ETH_MACDMAConfig+0xec>)
    (heth->Instance)->DMAOMR = tmpreg1;
 80006ce:	515e      	str	r6, [r3, r5]
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80006d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80006d4:	2001      	movs	r0, #1
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80006d6:	601a      	str	r2, [r3, #0]
     tmpreg1 = (heth->Instance)->DMABMR;
 80006d8:	681d      	ldr	r5, [r3, #0]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80006da:	f7ff ff3d 	bl	8000558 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 80006de:	6822      	ldr	r2, [r4, #0]
 80006e0:	f502 5380 	add.w	r3, r2, #4096	; 0x1000
 80006e4:	601d      	str	r5, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80006e6:	69a3      	ldr	r3, [r4, #24]
 80006e8:	2b01      	cmp	r3, #1
 80006ea:	d107      	bne.n	80006fc <ETH_MACDMAConfig+0xd4>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80006ec:	f241 011c 	movw	r1, #4124	; 0x101c
 80006f0:	5853      	ldr	r3, [r2, r1]
 80006f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80006f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006fa:	5053      	str	r3, [r2, r1]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80006fc:	6963      	ldr	r3, [r4, #20]
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80006fe:	4a06      	ldr	r2, [pc, #24]	; (8000718 <ETH_MACDMAConfig+0xf0>)
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8000700:	8899      	ldrh	r1, [r3, #4]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8000702:	6011      	str	r1, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8000704:	681a      	ldr	r2, [r3, #0]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8000706:	4b05      	ldr	r3, [pc, #20]	; (800071c <ETH_MACDMAConfig+0xf4>)
 8000708:	601a      	str	r2, [r3, #0]
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	ff20810f 	.word	0xff20810f
 8000710:	f8de3f23 	.word	0xf8de3f23
 8000714:	02c12080 	.word	0x02c12080
 8000718:	40028040 	.word	0x40028040
 800071c:	40028044 	.word	0x40028044

08000720 <HAL_ETH_ReadPHYRegister>:
{
 8000720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8000722:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8000726:	2b82      	cmp	r3, #130	; 0x82
{
 8000728:	4605      	mov	r5, r0
 800072a:	4616      	mov	r6, r2
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 800072c:	d030      	beq.n	8000790 <HAL_ETH_ReadPHYRegister+0x70>
  tmpreg1 = heth->Instance->MACMIIAR;
 800072e:	6802      	ldr	r2, [r0, #0]
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8000730:	2382      	movs	r3, #130	; 0x82
 8000732:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg1 = heth->Instance->MACMIIAR;
 8000736:	6913      	ldr	r3, [r2, #16]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8000738:	0189      	lsls	r1, r1, #6
 800073a:	f401 64f8 	and.w	r4, r1, #1984	; 0x7c0
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800073e:	f003 011c 	and.w	r1, r3, #28
 8000742:	4321      	orrs	r1, r4
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8000744:	8a04      	ldrh	r4, [r0, #16]
 8000746:	02e4      	lsls	r4, r4, #11
 8000748:	b2a4      	uxth	r4, r4
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 800074a:	430c      	orrs	r4, r1
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 800074c:	f044 0401 	orr.w	r4, r4, #1
  heth->Instance->MACMIIAR = tmpreg1;
 8000750:	6114      	str	r4, [r2, #16]
  tickstart = HAL_GetTick();
 8000752:	f7ff fefb 	bl	800054c <HAL_GetTick>
 8000756:	4607      	mov	r7, r0
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8000758:	f014 0001 	ands.w	r0, r4, #1
 800075c:	d107      	bne.n	800076e <HAL_ETH_ReadPHYRegister+0x4e>
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800075e:	682b      	ldr	r3, [r5, #0]
 8000760:	695b      	ldr	r3, [r3, #20]
 8000762:	b29b      	uxth	r3, r3
 8000764:	6033      	str	r3, [r6, #0]
  heth->State = HAL_ETH_STATE_READY;
 8000766:	2301      	movs	r3, #1
 8000768:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
 800076c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 800076e:	f7ff feed 	bl	800054c <HAL_GetTick>
 8000772:	1bc0      	subs	r0, r0, r7
 8000774:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8000778:	d307      	bcc.n	800078a <HAL_ETH_ReadPHYRegister+0x6a>
      heth->State= HAL_ETH_STATE_READY;
 800077a:	2301      	movs	r3, #1
 800077c:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8000780:	2300      	movs	r3, #0
 8000782:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
      return HAL_TIMEOUT;
 8000786:	2003      	movs	r0, #3
 8000788:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpreg1 = heth->Instance->MACMIIAR;
 800078a:	682b      	ldr	r3, [r5, #0]
 800078c:	691c      	ldr	r4, [r3, #16]
 800078e:	e7e3      	b.n	8000758 <HAL_ETH_ReadPHYRegister+0x38>
    return HAL_BUSY;
 8000790:	2002      	movs	r0, #2
}
 8000792:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000794 <HAL_ETH_WritePHYRegister>:
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8000794:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8000798:	2b42      	cmp	r3, #66	; 0x42
{
 800079a:	b570      	push	{r4, r5, r6, lr}
 800079c:	4605      	mov	r5, r0
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 800079e:	d02e      	beq.n	80007fe <HAL_ETH_WritePHYRegister+0x6a>
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80007a0:	2342      	movs	r3, #66	; 0x42
 80007a2:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg1 = heth->Instance->MACMIIAR;
 80007a6:	6803      	ldr	r3, [r0, #0]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80007a8:	018c      	lsls	r4, r1, #6
  tmpreg1 = heth->Instance->MACMIIAR;
 80007aa:	6918      	ldr	r0, [r3, #16]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80007ac:	f404 64f8 	and.w	r4, r4, #1984	; 0x7c0
 80007b0:	f044 0403 	orr.w	r4, r4, #3
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80007b4:	f000 001c 	and.w	r0, r0, #28
 80007b8:	4320      	orrs	r0, r4
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80007ba:	8a2c      	ldrh	r4, [r5, #16]
 80007bc:	02e4      	lsls	r4, r4, #11
 80007be:	b2a4      	uxth	r4, r4
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80007c0:	4304      	orrs	r4, r0
 80007c2:	b292      	uxth	r2, r2
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80007c4:	615a      	str	r2, [r3, #20]
  heth->Instance->MACMIIAR = tmpreg1;
 80007c6:	611c      	str	r4, [r3, #16]
  tickstart = HAL_GetTick();
 80007c8:	f7ff fec0 	bl	800054c <HAL_GetTick>
 80007cc:	4606      	mov	r6, r0
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80007ce:	f014 0001 	ands.w	r0, r4, #1
 80007d2:	d103      	bne.n	80007dc <HAL_ETH_WritePHYRegister+0x48>
  heth->State = HAL_ETH_STATE_READY;
 80007d4:	2301      	movs	r3, #1
 80007d6:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
 80007da:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 80007dc:	f7ff feb6 	bl	800054c <HAL_GetTick>
 80007e0:	1b80      	subs	r0, r0, r6
 80007e2:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 80007e6:	d307      	bcc.n	80007f8 <HAL_ETH_WritePHYRegister+0x64>
      heth->State= HAL_ETH_STATE_READY;
 80007e8:	2301      	movs	r3, #1
 80007ea:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 80007ee:	2300      	movs	r3, #0
 80007f0:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
      return HAL_TIMEOUT;
 80007f4:	2003      	movs	r0, #3
 80007f6:	bd70      	pop	{r4, r5, r6, pc}
    tmpreg1 = heth->Instance->MACMIIAR;
 80007f8:	682b      	ldr	r3, [r5, #0]
 80007fa:	691c      	ldr	r4, [r3, #16]
 80007fc:	e7e7      	b.n	80007ce <HAL_ETH_WritePHYRegister+0x3a>
    return HAL_BUSY;
 80007fe:	2002      	movs	r0, #2
}
 8000800:	bd70      	pop	{r4, r5, r6, pc}
	...

08000804 <HAL_ETH_Init>:
{
 8000804:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8000806:	2300      	movs	r3, #0
 8000808:	9300      	str	r3, [sp, #0]
  if(heth == NULL)
 800080a:	4604      	mov	r4, r0
 800080c:	2800      	cmp	r0, #0
 800080e:	f000 80de 	beq.w	80009ce <HAL_ETH_Init+0x1ca>
  if(heth->State == HAL_ETH_STATE_RESET)
 8000812:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8000816:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800081a:	b91b      	cbnz	r3, 8000824 <HAL_ETH_Init+0x20>
    heth->Lock = HAL_UNLOCKED;
 800081c:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
    HAL_ETH_MspInit(heth);
 8000820:	f002 f8d6 	bl	80029d0 <HAL_ETH_MspInit>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000824:	2300      	movs	r3, #0
 8000826:	9301      	str	r3, [sp, #4]
 8000828:	4b6a      	ldr	r3, [pc, #424]	; (80009d4 <HAL_ETH_Init+0x1d0>)
 800082a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800082c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000830:	645a      	str	r2, [r3, #68]	; 0x44
 8000832:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000834:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000838:	9301      	str	r3, [sp, #4]
 800083a:	9b01      	ldr	r3, [sp, #4]
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800083c:	4b66      	ldr	r3, [pc, #408]	; (80009d8 <HAL_ETH_Init+0x1d4>)
 800083e:	685a      	ldr	r2, [r3, #4]
 8000840:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8000844:	605a      	str	r2, [r3, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8000846:	685a      	ldr	r2, [r3, #4]
 8000848:	6a21      	ldr	r1, [r4, #32]
 800084a:	430a      	orrs	r2, r1
 800084c:	605a      	str	r2, [r3, #4]
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800084e:	6823      	ldr	r3, [r4, #0]
 8000850:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000854:	681a      	ldr	r2, [r3, #0]
 8000856:	f042 0201 	orr.w	r2, r2, #1
 800085a:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 800085c:	f7ff fe76 	bl	800054c <HAL_GetTick>
 8000860:	4605      	mov	r5, r0
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8000862:	6823      	ldr	r3, [r4, #0]
 8000864:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8000868:	6812      	ldr	r2, [r2, #0]
 800086a:	07d0      	lsls	r0, r2, #31
 800086c:	d41d      	bmi.n	80008aa <HAL_ETH_Init+0xa6>
  tmpreg1 = (heth->Instance)->MACMIIAR;
 800086e:	691d      	ldr	r5, [r3, #16]
  hclk = HAL_RCC_GetHCLKFreq();
 8000870:	f000 fc94 	bl	800119c <HAL_RCC_GetHCLKFreq>
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8000874:	4b59      	ldr	r3, [pc, #356]	; (80009dc <HAL_ETH_Init+0x1d8>)
 8000876:	4a5a      	ldr	r2, [pc, #360]	; (80009e0 <HAL_ETH_Init+0x1dc>)
 8000878:	4403      	add	r3, r0
 800087a:	4293      	cmp	r3, r2
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 800087c:	f025 051c 	bic.w	r5, r5, #28
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8000880:	d822      	bhi.n	80008c8 <HAL_ETH_Init+0xc4>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8000882:	f045 0508 	orr.w	r5, r5, #8
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8000886:	6823      	ldr	r3, [r4, #0]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8000888:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 800088c:	611d      	str	r5, [r3, #16]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 800088e:	2100      	movs	r1, #0
 8000890:	4620      	mov	r0, r4
 8000892:	f7ff ff7f 	bl	8000794 <HAL_ETH_WritePHYRegister>
 8000896:	4605      	mov	r5, r0
 8000898:	b368      	cbz	r0, 80008f6 <HAL_ETH_Init+0xf2>
      ETH_MACDMAConfig(heth, err);
 800089a:	2101      	movs	r1, #1
 800089c:	4620      	mov	r0, r4
      heth->State = HAL_ETH_STATE_READY;
 800089e:	2501      	movs	r5, #1
      ETH_MACDMAConfig(heth, err);
 80008a0:	f7ff fec2 	bl	8000628 <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 80008a4:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      return HAL_ERROR;
 80008a8:	e00b      	b.n	80008c2 <HAL_ETH_Init+0xbe>
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 80008aa:	f7ff fe4f 	bl	800054c <HAL_GetTick>
 80008ae:	1b40      	subs	r0, r0, r5
 80008b0:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 80008b4:	d9d5      	bls.n	8000862 <HAL_ETH_Init+0x5e>
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80008b6:	2503      	movs	r5, #3
      __HAL_UNLOCK(heth);
 80008b8:	2300      	movs	r3, #0
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80008ba:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 80008be:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 80008c2:	4628      	mov	r0, r5
 80008c4:	b003      	add	sp, #12
 80008c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80008c8:	4b46      	ldr	r3, [pc, #280]	; (80009e4 <HAL_ETH_Init+0x1e0>)
 80008ca:	4a47      	ldr	r2, [pc, #284]	; (80009e8 <HAL_ETH_Init+0x1e4>)
 80008cc:	4403      	add	r3, r0
 80008ce:	4293      	cmp	r3, r2
 80008d0:	d802      	bhi.n	80008d8 <HAL_ETH_Init+0xd4>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80008d2:	f045 050c 	orr.w	r5, r5, #12
 80008d6:	e7d6      	b.n	8000886 <HAL_ETH_Init+0x82>
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80008d8:	4b44      	ldr	r3, [pc, #272]	; (80009ec <HAL_ETH_Init+0x1e8>)
 80008da:	4a45      	ldr	r2, [pc, #276]	; (80009f0 <HAL_ETH_Init+0x1ec>)
 80008dc:	4403      	add	r3, r0
 80008de:	4293      	cmp	r3, r2
 80008e0:	d9d1      	bls.n	8000886 <HAL_ETH_Init+0x82>
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80008e2:	4b44      	ldr	r3, [pc, #272]	; (80009f4 <HAL_ETH_Init+0x1f0>)
 80008e4:	4a44      	ldr	r2, [pc, #272]	; (80009f8 <HAL_ETH_Init+0x1f4>)
 80008e6:	4403      	add	r3, r0
 80008e8:	4293      	cmp	r3, r2
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80008ea:	bf94      	ite	ls
 80008ec:	f045 0504 	orrls.w	r5, r5, #4
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 80008f0:	f045 0510 	orrhi.w	r5, r5, #16
 80008f4:	e7c7      	b.n	8000886 <HAL_ETH_Init+0x82>
  HAL_Delay(PHY_RESET_DELAY);
 80008f6:	20ff      	movs	r0, #255	; 0xff
 80008f8:	f7ff fe2e 	bl	8000558 <HAL_Delay>
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80008fc:	6863      	ldr	r3, [r4, #4]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d053      	beq.n	80009aa <HAL_ETH_Init+0x1a6>
    tickstart = HAL_GetTick();
 8000902:	f7ff fe23 	bl	800054c <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8000906:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800090a:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800090c:	466a      	mov	r2, sp
 800090e:	2101      	movs	r1, #1
 8000910:	4620      	mov	r0, r4
 8000912:	f7ff ff05 	bl	8000720 <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8000916:	f7ff fe19 	bl	800054c <HAL_GetTick>
 800091a:	1b80      	subs	r0, r0, r6
 800091c:	42b8      	cmp	r0, r7
 800091e:	d90b      	bls.n	8000938 <HAL_ETH_Init+0x134>
        ETH_MACDMAConfig(heth, err);
 8000920:	2101      	movs	r1, #1
 8000922:	4620      	mov	r0, r4
 8000924:	f7ff fe80 	bl	8000628 <ETH_MACDMAConfig>
        heth->State= HAL_ETH_STATE_READY;
 8000928:	2301      	movs	r3, #1
 800092a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(heth);
 800092e:	2300      	movs	r3, #0
 8000930:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
        return HAL_TIMEOUT;
 8000934:	2503      	movs	r5, #3
 8000936:	e7c4      	b.n	80008c2 <HAL_ETH_Init+0xbe>
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8000938:	9b00      	ldr	r3, [sp, #0]
 800093a:	0759      	lsls	r1, r3, #29
 800093c:	d5e6      	bpl.n	800090c <HAL_ETH_Init+0x108>
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 800093e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000942:	2100      	movs	r1, #0
 8000944:	4620      	mov	r0, r4
 8000946:	f7ff ff25 	bl	8000794 <HAL_ETH_WritePHYRegister>
 800094a:	2800      	cmp	r0, #0
 800094c:	d1a5      	bne.n	800089a <HAL_ETH_Init+0x96>
    tickstart = HAL_GetTick();
 800094e:	f7ff fdfd 	bl	800054c <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8000952:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000956:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000958:	466a      	mov	r2, sp
 800095a:	2101      	movs	r1, #1
 800095c:	4620      	mov	r0, r4
 800095e:	f7ff fedf 	bl	8000720 <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8000962:	f7ff fdf3 	bl	800054c <HAL_GetTick>
 8000966:	1b80      	subs	r0, r0, r6
 8000968:	42b8      	cmp	r0, r7
 800096a:	d8d9      	bhi.n	8000920 <HAL_ETH_Init+0x11c>
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800096c:	9b00      	ldr	r3, [sp, #0]
 800096e:	069a      	lsls	r2, r3, #26
 8000970:	d5f2      	bpl.n	8000958 <HAL_ETH_Init+0x154>
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8000972:	466a      	mov	r2, sp
 8000974:	211f      	movs	r1, #31
 8000976:	4620      	mov	r0, r4
 8000978:	f7ff fed2 	bl	8000720 <HAL_ETH_ReadPHYRegister>
 800097c:	2800      	cmp	r0, #0
 800097e:	d18c      	bne.n	800089a <HAL_ETH_Init+0x96>
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8000980:	9b00      	ldr	r3, [sp, #0]
 8000982:	f013 0210 	ands.w	r2, r3, #16
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8000986:	bf18      	it	ne
 8000988:	f44f 6200 	movne.w	r2, #2048	; 0x800
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 800098c:	075b      	lsls	r3, r3, #29
      (heth->Init).Speed = ETH_SPEED_10M; 
 800098e:	bf4c      	ite	mi
 8000990:	2300      	movmi	r3, #0
      (heth->Init).Speed = ETH_SPEED_100M;
 8000992:	f44f 4380 	movpl.w	r3, #16384	; 0x4000
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8000996:	60e2      	str	r2, [r4, #12]
      (heth->Init).Speed = ETH_SPEED_100M;
 8000998:	60a3      	str	r3, [r4, #8]
  ETH_MACDMAConfig(heth, err);
 800099a:	2100      	movs	r1, #0
 800099c:	4620      	mov	r0, r4
 800099e:	f7ff fe43 	bl	8000628 <ETH_MACDMAConfig>
  heth->State= HAL_ETH_STATE_READY;
 80009a2:	2301      	movs	r3, #1
 80009a4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  return HAL_OK;
 80009a8:	e78b      	b.n	80008c2 <HAL_ETH_Init+0xbe>
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 80009aa:	68a3      	ldr	r3, [r4, #8]
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 80009ac:	68e2      	ldr	r2, [r4, #12]
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 80009ae:	085b      	lsrs	r3, r3, #1
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 80009b0:	ea43 02d2 	orr.w	r2, r3, r2, lsr #3
 80009b4:	b292      	uxth	r2, r2
 80009b6:	4629      	mov	r1, r5
 80009b8:	4620      	mov	r0, r4
 80009ba:	f7ff feeb 	bl	8000794 <HAL_ETH_WritePHYRegister>
 80009be:	2800      	cmp	r0, #0
 80009c0:	f47f af6b 	bne.w	800089a <HAL_ETH_Init+0x96>
    HAL_Delay(PHY_CONFIG_DELAY);
 80009c4:	f640 70ff 	movw	r0, #4095	; 0xfff
 80009c8:	f7ff fdc6 	bl	8000558 <HAL_Delay>
 80009cc:	e7e5      	b.n	800099a <HAL_ETH_Init+0x196>
    return HAL_ERROR;
 80009ce:	2501      	movs	r5, #1
 80009d0:	e777      	b.n	80008c2 <HAL_ETH_Init+0xbe>
 80009d2:	bf00      	nop
 80009d4:	40023800 	.word	0x40023800
 80009d8:	40013800 	.word	0x40013800
 80009dc:	feced300 	.word	0xfeced300
 80009e0:	00e4e1bf 	.word	0x00e4e1bf
 80009e4:	fde9f140 	.word	0xfde9f140
 80009e8:	017d783f 	.word	0x017d783f
 80009ec:	fc6c7900 	.word	0xfc6c7900
 80009f0:	026259ff 	.word	0x026259ff
 80009f4:	fa0a1f00 	.word	0xfa0a1f00
 80009f8:	02faf07f 	.word	0x02faf07f

080009fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a00:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a02:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a04:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 8000bcc <HAL_GPIO_Init+0x1d0>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a08:	4a6e      	ldr	r2, [pc, #440]	; (8000bc4 <HAL_GPIO_Init+0x1c8>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000a0a:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 8000bd0 <HAL_GPIO_Init+0x1d4>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a0e:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000a10:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8000a12:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a16:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8000a18:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a1c:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8000a20:	45b6      	cmp	lr, r6
 8000a22:	f040 80b6 	bne.w	8000b92 <HAL_GPIO_Init+0x196>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a26:	684c      	ldr	r4, [r1, #4]
 8000a28:	f024 0710 	bic.w	r7, r4, #16
 8000a2c:	2f02      	cmp	r7, #2
 8000a2e:	d116      	bne.n	8000a5e <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8000a30:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000a34:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000a38:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000a3c:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000a40:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000a44:	f04f 0c0f 	mov.w	ip, #15
 8000a48:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000a4c:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000a50:	690d      	ldr	r5, [r1, #16]
 8000a52:	fa05 f50b 	lsl.w	r5, r5, fp
 8000a56:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 8000a5a:	f8ca 5020 	str.w	r5, [sl, #32]
 8000a5e:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000a62:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000a64:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000a68:	fa05 f50a 	lsl.w	r5, r5, sl
 8000a6c:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000a6e:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000a72:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000a76:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a7a:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000a7c:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a80:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8000a82:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a86:	d811      	bhi.n	8000aac <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8000a88:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000a8a:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000a8e:	68cf      	ldr	r7, [r1, #12]
 8000a90:	fa07 fc0a 	lsl.w	ip, r7, sl
 8000a94:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8000a98:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000a9a:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a9c:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000aa0:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000aa4:	409f      	lsls	r7, r3
 8000aa6:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000aaa:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000aac:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000aae:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ab0:	688f      	ldr	r7, [r1, #8]
 8000ab2:	fa07 f70a 	lsl.w	r7, r7, sl
 8000ab6:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000ab8:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000aba:	00e5      	lsls	r5, r4, #3
 8000abc:	d569      	bpl.n	8000b92 <HAL_GPIO_Init+0x196>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000abe:	f04f 0b00 	mov.w	fp, #0
 8000ac2:	f8cd b00c 	str.w	fp, [sp, #12]
 8000ac6:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000aca:	4d3f      	ldr	r5, [pc, #252]	; (8000bc8 <HAL_GPIO_Init+0x1cc>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000acc:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000ad0:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000ad4:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000ad8:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8000adc:	9703      	str	r7, [sp, #12]
 8000ade:	9f03      	ldr	r7, [sp, #12]
 8000ae0:	f023 0703 	bic.w	r7, r3, #3
 8000ae4:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000ae8:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000aec:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000af0:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000af4:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000af8:	f04f 0e0f 	mov.w	lr, #15
 8000afc:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000b00:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000b02:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000b06:	d04b      	beq.n	8000ba0 <HAL_GPIO_Init+0x1a4>
 8000b08:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000b0c:	42a8      	cmp	r0, r5
 8000b0e:	d049      	beq.n	8000ba4 <HAL_GPIO_Init+0x1a8>
 8000b10:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000b14:	42a8      	cmp	r0, r5
 8000b16:	d047      	beq.n	8000ba8 <HAL_GPIO_Init+0x1ac>
 8000b18:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000b1c:	42a8      	cmp	r0, r5
 8000b1e:	d045      	beq.n	8000bac <HAL_GPIO_Init+0x1b0>
 8000b20:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000b24:	42a8      	cmp	r0, r5
 8000b26:	d043      	beq.n	8000bb0 <HAL_GPIO_Init+0x1b4>
 8000b28:	4548      	cmp	r0, r9
 8000b2a:	d043      	beq.n	8000bb4 <HAL_GPIO_Init+0x1b8>
 8000b2c:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8000b30:	42a8      	cmp	r0, r5
 8000b32:	d041      	beq.n	8000bb8 <HAL_GPIO_Init+0x1bc>
 8000b34:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000b38:	42a8      	cmp	r0, r5
 8000b3a:	d03f      	beq.n	8000bbc <HAL_GPIO_Init+0x1c0>
 8000b3c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000b40:	42a8      	cmp	r0, r5
 8000b42:	d03d      	beq.n	8000bc0 <HAL_GPIO_Init+0x1c4>
 8000b44:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000b48:	42a8      	cmp	r0, r5
 8000b4a:	bf14      	ite	ne
 8000b4c:	250a      	movne	r5, #10
 8000b4e:	2509      	moveq	r5, #9
 8000b50:	fa05 f50c 	lsl.w	r5, r5, ip
 8000b54:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000b58:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8000b5a:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000b5c:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b5e:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000b62:	bf0c      	ite	eq
 8000b64:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000b66:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8000b68:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 8000b6a:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b6c:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000b70:	bf0c      	ite	eq
 8000b72:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000b74:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8000b76:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b78:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b7a:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000b7e:	bf0c      	ite	eq
 8000b80:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000b82:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8000b84:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8000b86:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b88:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000b8a:	bf54      	ite	pl
 8000b8c:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8000b8e:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8000b90:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b92:	3301      	adds	r3, #1
 8000b94:	2b10      	cmp	r3, #16
 8000b96:	f47f af3c 	bne.w	8000a12 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000b9a:	b005      	add	sp, #20
 8000b9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ba0:	465d      	mov	r5, fp
 8000ba2:	e7d5      	b.n	8000b50 <HAL_GPIO_Init+0x154>
 8000ba4:	2501      	movs	r5, #1
 8000ba6:	e7d3      	b.n	8000b50 <HAL_GPIO_Init+0x154>
 8000ba8:	2502      	movs	r5, #2
 8000baa:	e7d1      	b.n	8000b50 <HAL_GPIO_Init+0x154>
 8000bac:	2503      	movs	r5, #3
 8000bae:	e7cf      	b.n	8000b50 <HAL_GPIO_Init+0x154>
 8000bb0:	2504      	movs	r5, #4
 8000bb2:	e7cd      	b.n	8000b50 <HAL_GPIO_Init+0x154>
 8000bb4:	2505      	movs	r5, #5
 8000bb6:	e7cb      	b.n	8000b50 <HAL_GPIO_Init+0x154>
 8000bb8:	2506      	movs	r5, #6
 8000bba:	e7c9      	b.n	8000b50 <HAL_GPIO_Init+0x154>
 8000bbc:	2507      	movs	r5, #7
 8000bbe:	e7c7      	b.n	8000b50 <HAL_GPIO_Init+0x154>
 8000bc0:	2508      	movs	r5, #8
 8000bc2:	e7c5      	b.n	8000b50 <HAL_GPIO_Init+0x154>
 8000bc4:	40013c00 	.word	0x40013c00
 8000bc8:	40020000 	.word	0x40020000
 8000bcc:	40023800 	.word	0x40023800
 8000bd0:	40021400 	.word	0x40021400

08000bd4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000bd4:	b10a      	cbz	r2, 8000bda <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000bd6:	6181      	str	r1, [r0, #24]
 8000bd8:	4770      	bx	lr
 8000bda:	0409      	lsls	r1, r1, #16
 8000bdc:	e7fb      	b.n	8000bd6 <HAL_GPIO_WritePin+0x2>
	...

08000be0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000be0:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000be2:	4b04      	ldr	r3, [pc, #16]	; (8000bf4 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8000be4:	6959      	ldr	r1, [r3, #20]
 8000be6:	4201      	tst	r1, r0
 8000be8:	d002      	beq.n	8000bf0 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000bea:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000bec:	f002 f908 	bl	8002e00 <HAL_GPIO_EXTI_Callback>
 8000bf0:	bd08      	pop	{r3, pc}
 8000bf2:	bf00      	nop
 8000bf4:	40013c00 	.word	0x40013c00

08000bf8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000bf8:	b5f0      	push	{r4, r5, r6, r7, lr}
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000bfa:	4604      	mov	r4, r0
{
 8000bfc:	b08b      	sub	sp, #44	; 0x2c
  if (hpcd == NULL)
 8000bfe:	b360      	cbz	r0, 8000c5a <HAL_PCD_Init+0x62>
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000c00:	f890 33bd 	ldrb.w	r3, [r0, #957]	; 0x3bd
  USBx = hpcd->Instance;
 8000c04:	6805      	ldr	r5, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000c06:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000c0a:	b91b      	cbnz	r3, 8000c14 <HAL_PCD_Init+0x1c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000c0c:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000c10:	f002 faa8 	bl	8003164 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000c14:	2303      	movs	r3, #3
 8000c16:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000c1a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  {
    hpcd->Init.dma_enable = 0U;
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000c1c:	4625      	mov	r5, r4
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000c1e:	f413 7380 	ands.w	r3, r3, #256	; 0x100
  __HAL_PCD_DISABLE(hpcd);
 8000c22:	f855 0b10 	ldr.w	r0, [r5], #16
    hpcd->Init.dma_enable = 0U;
 8000c26:	bf08      	it	eq
 8000c28:	6123      	streq	r3, [r4, #16]
  __HAL_PCD_DISABLE(hpcd);
 8000c2a:	f000 fdd5 	bl	80017d8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000c2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c30:	466e      	mov	r6, sp
 8000c32:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000c34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c36:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000c38:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000c3c:	e886 0003 	stmia.w	r6, {r0, r1}
 8000c40:	4625      	mov	r5, r4
 8000c42:	1d27      	adds	r7, r4, #4
 8000c44:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8000c48:	f855 0b10 	ldr.w	r0, [r5], #16
 8000c4c:	f000 fd84 	bl	8001758 <USB_CoreInit>
 8000c50:	4606      	mov	r6, r0
 8000c52:	b120      	cbz	r0, 8000c5e <HAL_PCD_Init+0x66>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000c54:	2302      	movs	r3, #2
 8000c56:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
    return HAL_ERROR;
 8000c5a:	2501      	movs	r5, #1
 8000c5c:	e050      	b.n	8000d00 <HAL_PCD_Init+0x108>
    return HAL_ERROR;
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000c5e:	4601      	mov	r1, r0
 8000c60:	6820      	ldr	r0, [r4, #0]
 8000c62:	f000 fdbf 	bl	80017e4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c66:	4630      	mov	r0, r6
 8000c68:	f8d4 e004 	ldr.w	lr, [r4, #4]
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000c6c:	261c      	movs	r6, #28
 8000c6e:	f04f 0c01 	mov.w	ip, #1
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000c72:	4601      	mov	r1, r0
 8000c74:	b2c2      	uxtb	r2, r0
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c76:	4596      	cmp	lr, r2
 8000c78:	f100 0001 	add.w	r0, r0, #1
 8000c7c:	d81c      	bhi.n	8000cb8 <HAL_PCD_Init+0xc0>
 8000c7e:	2300      	movs	r3, #0
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000c80:	261c      	movs	r6, #28
 8000c82:	4619      	mov	r1, r3
 8000c84:	b2d8      	uxtb	r0, r3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c86:	4586      	cmp	lr, r0
 8000c88:	f103 0301 	add.w	r3, r3, #1
 8000c8c:	d822      	bhi.n	8000cd4 <HAL_PCD_Init+0xdc>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000c8e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c90:	466e      	mov	r6, sp
 8000c92:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000c94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c96:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000c98:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000c9c:	e886 0003 	stmia.w	r6, {r0, r1}
 8000ca0:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8000ca4:	6820      	ldr	r0, [r4, #0]
 8000ca6:	f000 fddf 	bl	8001868 <USB_DevInit>
 8000caa:	2301      	movs	r3, #1
 8000cac:	4605      	mov	r5, r0
 8000cae:	b300      	cbz	r0, 8000cf2 <HAL_PCD_Init+0xfa>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000cb0:	2202      	movs	r2, #2
 8000cb2:	f884 23bd 	strb.w	r2, [r4, #957]	; 0x3bd
 8000cb6:	e7d0      	b.n	8000c5a <HAL_PCD_Init+0x62>
    hpcd->IN_ep[i].is_in = 1U;
 8000cb8:	fb06 4302 	mla	r3, r6, r2, r4
 8000cbc:	f883 c03d 	strb.w	ip, [r3, #61]	; 0x3d
    hpcd->IN_ep[i].num = i;
 8000cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000cc4:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000cc8:	f883 103f 	strb.w	r1, [r3, #63]	; 0x3f
    hpcd->IN_ep[i].maxpacket = 0U;
 8000ccc:	6459      	str	r1, [r3, #68]	; 0x44
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000cce:	6499      	str	r1, [r3, #72]	; 0x48
    hpcd->IN_ep[i].xfer_len = 0U;
 8000cd0:	6519      	str	r1, [r3, #80]	; 0x50
 8000cd2:	e7cf      	b.n	8000c74 <HAL_PCD_Init+0x7c>
    hpcd->OUT_ep[i].is_in = 0U;
 8000cd4:	fb06 4200 	mla	r2, r6, r0, r4
 8000cd8:	f882 11fd 	strb.w	r1, [r2, #509]	; 0x1fd
    hpcd->OUT_ep[i].num = i;
 8000cdc:	f882 01fc 	strb.w	r0, [r2, #508]	; 0x1fc
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000ce0:	f882 11ff 	strb.w	r1, [r2, #511]	; 0x1ff
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000ce4:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000ce8:	f8c2 1208 	str.w	r1, [r2, #520]	; 0x208
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000cec:	f8c2 1210 	str.w	r1, [r2, #528]	; 0x210
 8000cf0:	e7c8      	b.n	8000c84 <HAL_PCD_Init+0x8c>
    return HAL_ERROR;
  }

  hpcd->USB_Address = 0U;
 8000cf2:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8000cf6:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8000cfa:	6820      	ldr	r0, [r4, #0]
 8000cfc:	f000 fe78 	bl	80019f0 <USB_DevDisconnect>

  return HAL_OK;
}
 8000d00:	4628      	mov	r0, r5
 8000d02:	b00b      	add	sp, #44	; 0x2c
 8000d04:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08000d08 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d08:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d0c:	4604      	mov	r4, r0
 8000d0e:	b918      	cbnz	r0, 8000d18 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8000d10:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8000d12:	b002      	add	sp, #8
 8000d14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d18:	6803      	ldr	r3, [r0, #0]
 8000d1a:	07dd      	lsls	r5, r3, #31
 8000d1c:	d410      	bmi.n	8000d40 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d1e:	6823      	ldr	r3, [r4, #0]
 8000d20:	0798      	lsls	r0, r3, #30
 8000d22:	d458      	bmi.n	8000dd6 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d24:	6823      	ldr	r3, [r4, #0]
 8000d26:	071a      	lsls	r2, r3, #28
 8000d28:	f100 809a 	bmi.w	8000e60 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d2c:	6823      	ldr	r3, [r4, #0]
 8000d2e:	075b      	lsls	r3, r3, #29
 8000d30:	f100 80b8 	bmi.w	8000ea4 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000d34:	69a2      	ldr	r2, [r4, #24]
 8000d36:	2a00      	cmp	r2, #0
 8000d38:	f040 8119 	bne.w	8000f6e <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 8000d3c:	2000      	movs	r0, #0
 8000d3e:	e7e8      	b.n	8000d12 <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000d40:	4ba6      	ldr	r3, [pc, #664]	; (8000fdc <HAL_RCC_OscConfig+0x2d4>)
 8000d42:	689a      	ldr	r2, [r3, #8]
 8000d44:	f002 020c 	and.w	r2, r2, #12
 8000d48:	2a04      	cmp	r2, #4
 8000d4a:	d007      	beq.n	8000d5c <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000d4c:	689a      	ldr	r2, [r3, #8]
 8000d4e:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000d52:	2a08      	cmp	r2, #8
 8000d54:	d10a      	bne.n	8000d6c <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	0259      	lsls	r1, r3, #9
 8000d5a:	d507      	bpl.n	8000d6c <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d5c:	4b9f      	ldr	r3, [pc, #636]	; (8000fdc <HAL_RCC_OscConfig+0x2d4>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	039a      	lsls	r2, r3, #14
 8000d62:	d5dc      	bpl.n	8000d1e <HAL_RCC_OscConfig+0x16>
 8000d64:	6863      	ldr	r3, [r4, #4]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d1d9      	bne.n	8000d1e <HAL_RCC_OscConfig+0x16>
 8000d6a:	e7d1      	b.n	8000d10 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d6c:	6863      	ldr	r3, [r4, #4]
 8000d6e:	4d9b      	ldr	r5, [pc, #620]	; (8000fdc <HAL_RCC_OscConfig+0x2d4>)
 8000d70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d74:	d111      	bne.n	8000d9a <HAL_RCC_OscConfig+0x92>
 8000d76:	682b      	ldr	r3, [r5, #0]
 8000d78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d7c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000d7e:	f7ff fbe5 	bl	800054c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d82:	4d96      	ldr	r5, [pc, #600]	; (8000fdc <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8000d84:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d86:	682b      	ldr	r3, [r5, #0]
 8000d88:	039b      	lsls	r3, r3, #14
 8000d8a:	d4c8      	bmi.n	8000d1e <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d8c:	f7ff fbde 	bl	800054c <HAL_GetTick>
 8000d90:	1b80      	subs	r0, r0, r6
 8000d92:	2864      	cmp	r0, #100	; 0x64
 8000d94:	d9f7      	bls.n	8000d86 <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 8000d96:	2003      	movs	r0, #3
 8000d98:	e7bb      	b.n	8000d12 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d9a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d9e:	d104      	bne.n	8000daa <HAL_RCC_OscConfig+0xa2>
 8000da0:	682b      	ldr	r3, [r5, #0]
 8000da2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000da6:	602b      	str	r3, [r5, #0]
 8000da8:	e7e5      	b.n	8000d76 <HAL_RCC_OscConfig+0x6e>
 8000daa:	682a      	ldr	r2, [r5, #0]
 8000dac:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000db0:	602a      	str	r2, [r5, #0]
 8000db2:	682a      	ldr	r2, [r5, #0]
 8000db4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000db8:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d1df      	bne.n	8000d7e <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 8000dbe:	f7ff fbc5 	bl	800054c <HAL_GetTick>
 8000dc2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dc4:	682b      	ldr	r3, [r5, #0]
 8000dc6:	039f      	lsls	r7, r3, #14
 8000dc8:	d5a9      	bpl.n	8000d1e <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000dca:	f7ff fbbf 	bl	800054c <HAL_GetTick>
 8000dce:	1b80      	subs	r0, r0, r6
 8000dd0:	2864      	cmp	r0, #100	; 0x64
 8000dd2:	d9f7      	bls.n	8000dc4 <HAL_RCC_OscConfig+0xbc>
 8000dd4:	e7df      	b.n	8000d96 <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000dd6:	4b81      	ldr	r3, [pc, #516]	; (8000fdc <HAL_RCC_OscConfig+0x2d4>)
 8000dd8:	689a      	ldr	r2, [r3, #8]
 8000dda:	f012 0f0c 	tst.w	r2, #12
 8000dde:	d007      	beq.n	8000df0 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000de0:	689a      	ldr	r2, [r3, #8]
 8000de2:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000de6:	2a08      	cmp	r2, #8
 8000de8:	d111      	bne.n	8000e0e <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	025e      	lsls	r6, r3, #9
 8000dee:	d40e      	bmi.n	8000e0e <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000df0:	4b7a      	ldr	r3, [pc, #488]	; (8000fdc <HAL_RCC_OscConfig+0x2d4>)
 8000df2:	681a      	ldr	r2, [r3, #0]
 8000df4:	0795      	lsls	r5, r2, #30
 8000df6:	d502      	bpl.n	8000dfe <HAL_RCC_OscConfig+0xf6>
 8000df8:	68e2      	ldr	r2, [r4, #12]
 8000dfa:	2a01      	cmp	r2, #1
 8000dfc:	d188      	bne.n	8000d10 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dfe:	681a      	ldr	r2, [r3, #0]
 8000e00:	6921      	ldr	r1, [r4, #16]
 8000e02:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000e06:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8000e0a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e0c:	e78a      	b.n	8000d24 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000e0e:	68e2      	ldr	r2, [r4, #12]
 8000e10:	4b73      	ldr	r3, [pc, #460]	; (8000fe0 <HAL_RCC_OscConfig+0x2d8>)
 8000e12:	b1b2      	cbz	r2, 8000e42 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8000e14:	2201      	movs	r2, #1
 8000e16:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000e18:	f7ff fb98 	bl	800054c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e1c:	4d6f      	ldr	r5, [pc, #444]	; (8000fdc <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8000e1e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e20:	682b      	ldr	r3, [r5, #0]
 8000e22:	0798      	lsls	r0, r3, #30
 8000e24:	d507      	bpl.n	8000e36 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e26:	682b      	ldr	r3, [r5, #0]
 8000e28:	6922      	ldr	r2, [r4, #16]
 8000e2a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000e2e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000e32:	602b      	str	r3, [r5, #0]
 8000e34:	e776      	b.n	8000d24 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e36:	f7ff fb89 	bl	800054c <HAL_GetTick>
 8000e3a:	1b80      	subs	r0, r0, r6
 8000e3c:	2802      	cmp	r0, #2
 8000e3e:	d9ef      	bls.n	8000e20 <HAL_RCC_OscConfig+0x118>
 8000e40:	e7a9      	b.n	8000d96 <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 8000e42:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000e44:	f7ff fb82 	bl	800054c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e48:	4d64      	ldr	r5, [pc, #400]	; (8000fdc <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8000e4a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e4c:	682b      	ldr	r3, [r5, #0]
 8000e4e:	0799      	lsls	r1, r3, #30
 8000e50:	f57f af68 	bpl.w	8000d24 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e54:	f7ff fb7a 	bl	800054c <HAL_GetTick>
 8000e58:	1b80      	subs	r0, r0, r6
 8000e5a:	2802      	cmp	r0, #2
 8000e5c:	d9f6      	bls.n	8000e4c <HAL_RCC_OscConfig+0x144>
 8000e5e:	e79a      	b.n	8000d96 <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000e60:	6962      	ldr	r2, [r4, #20]
 8000e62:	4b60      	ldr	r3, [pc, #384]	; (8000fe4 <HAL_RCC_OscConfig+0x2dc>)
 8000e64:	b17a      	cbz	r2, 8000e86 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8000e66:	2201      	movs	r2, #1
 8000e68:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000e6a:	f7ff fb6f 	bl	800054c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e6e:	4d5b      	ldr	r5, [pc, #364]	; (8000fdc <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8000e70:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e72:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000e74:	079f      	lsls	r7, r3, #30
 8000e76:	f53f af59 	bmi.w	8000d2c <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e7a:	f7ff fb67 	bl	800054c <HAL_GetTick>
 8000e7e:	1b80      	subs	r0, r0, r6
 8000e80:	2802      	cmp	r0, #2
 8000e82:	d9f6      	bls.n	8000e72 <HAL_RCC_OscConfig+0x16a>
 8000e84:	e787      	b.n	8000d96 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 8000e86:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000e88:	f7ff fb60 	bl	800054c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e8c:	4d53      	ldr	r5, [pc, #332]	; (8000fdc <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8000e8e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e90:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000e92:	0798      	lsls	r0, r3, #30
 8000e94:	f57f af4a 	bpl.w	8000d2c <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e98:	f7ff fb58 	bl	800054c <HAL_GetTick>
 8000e9c:	1b80      	subs	r0, r0, r6
 8000e9e:	2802      	cmp	r0, #2
 8000ea0:	d9f6      	bls.n	8000e90 <HAL_RCC_OscConfig+0x188>
 8000ea2:	e778      	b.n	8000d96 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ea4:	4b4d      	ldr	r3, [pc, #308]	; (8000fdc <HAL_RCC_OscConfig+0x2d4>)
 8000ea6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ea8:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8000eac:	d128      	bne.n	8000f00 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000eae:	9201      	str	r2, [sp, #4]
 8000eb0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000eb2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000eb6:	641a      	str	r2, [r3, #64]	; 0x40
 8000eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ebe:	9301      	str	r3, [sp, #4]
 8000ec0:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000ec2:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ec4:	4d48      	ldr	r5, [pc, #288]	; (8000fe8 <HAL_RCC_OscConfig+0x2e0>)
 8000ec6:	682b      	ldr	r3, [r5, #0]
 8000ec8:	05d9      	lsls	r1, r3, #23
 8000eca:	d51b      	bpl.n	8000f04 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ecc:	68a3      	ldr	r3, [r4, #8]
 8000ece:	4d43      	ldr	r5, [pc, #268]	; (8000fdc <HAL_RCC_OscConfig+0x2d4>)
 8000ed0:	2b01      	cmp	r3, #1
 8000ed2:	d127      	bne.n	8000f24 <HAL_RCC_OscConfig+0x21c>
 8000ed4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000ed6:	f043 0301 	orr.w	r3, r3, #1
 8000eda:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000edc:	f7ff fb36 	bl	800054c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ee0:	4d3e      	ldr	r5, [pc, #248]	; (8000fdc <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8000ee2:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ee4:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ee8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000eea:	079b      	lsls	r3, r3, #30
 8000eec:	d539      	bpl.n	8000f62 <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8000eee:	2e00      	cmp	r6, #0
 8000ef0:	f43f af20 	beq.w	8000d34 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ef4:	4a39      	ldr	r2, [pc, #228]	; (8000fdc <HAL_RCC_OscConfig+0x2d4>)
 8000ef6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000ef8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000efc:	6413      	str	r3, [r2, #64]	; 0x40
 8000efe:	e719      	b.n	8000d34 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 8000f00:	2600      	movs	r6, #0
 8000f02:	e7df      	b.n	8000ec4 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f04:	682b      	ldr	r3, [r5, #0]
 8000f06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f0a:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000f0c:	f7ff fb1e 	bl	800054c <HAL_GetTick>
 8000f10:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f12:	682b      	ldr	r3, [r5, #0]
 8000f14:	05da      	lsls	r2, r3, #23
 8000f16:	d4d9      	bmi.n	8000ecc <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f18:	f7ff fb18 	bl	800054c <HAL_GetTick>
 8000f1c:	1bc0      	subs	r0, r0, r7
 8000f1e:	2802      	cmp	r0, #2
 8000f20:	d9f7      	bls.n	8000f12 <HAL_RCC_OscConfig+0x20a>
 8000f22:	e738      	b.n	8000d96 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f24:	2b05      	cmp	r3, #5
 8000f26:	d104      	bne.n	8000f32 <HAL_RCC_OscConfig+0x22a>
 8000f28:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000f2a:	f043 0304 	orr.w	r3, r3, #4
 8000f2e:	672b      	str	r3, [r5, #112]	; 0x70
 8000f30:	e7d0      	b.n	8000ed4 <HAL_RCC_OscConfig+0x1cc>
 8000f32:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000f34:	f022 0201 	bic.w	r2, r2, #1
 8000f38:	672a      	str	r2, [r5, #112]	; 0x70
 8000f3a:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000f3c:	f022 0204 	bic.w	r2, r2, #4
 8000f40:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d1ca      	bne.n	8000edc <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8000f46:	f7ff fb01 	bl	800054c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f4a:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000f4e:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f50:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000f52:	0798      	lsls	r0, r3, #30
 8000f54:	d5cb      	bpl.n	8000eee <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f56:	f7ff faf9 	bl	800054c <HAL_GetTick>
 8000f5a:	1bc0      	subs	r0, r0, r7
 8000f5c:	4540      	cmp	r0, r8
 8000f5e:	d9f7      	bls.n	8000f50 <HAL_RCC_OscConfig+0x248>
 8000f60:	e719      	b.n	8000d96 <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f62:	f7ff faf3 	bl	800054c <HAL_GetTick>
 8000f66:	1bc0      	subs	r0, r0, r7
 8000f68:	4540      	cmp	r0, r8
 8000f6a:	d9bd      	bls.n	8000ee8 <HAL_RCC_OscConfig+0x1e0>
 8000f6c:	e713      	b.n	8000d96 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000f6e:	4d1b      	ldr	r5, [pc, #108]	; (8000fdc <HAL_RCC_OscConfig+0x2d4>)
 8000f70:	68ab      	ldr	r3, [r5, #8]
 8000f72:	f003 030c 	and.w	r3, r3, #12
 8000f76:	2b08      	cmp	r3, #8
 8000f78:	f43f aeca 	beq.w	8000d10 <HAL_RCC_OscConfig+0x8>
 8000f7c:	4e1b      	ldr	r6, [pc, #108]	; (8000fec <HAL_RCC_OscConfig+0x2e4>)
 8000f7e:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f80:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000f82:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f84:	d134      	bne.n	8000ff0 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8000f86:	f7ff fae1 	bl	800054c <HAL_GetTick>
 8000f8a:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f8c:	682b      	ldr	r3, [r5, #0]
 8000f8e:	0199      	lsls	r1, r3, #6
 8000f90:	d41e      	bmi.n	8000fd0 <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000f92:	6a22      	ldr	r2, [r4, #32]
 8000f94:	69e3      	ldr	r3, [r4, #28]
 8000f96:	4313      	orrs	r3, r2
 8000f98:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000f9a:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000f9e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000fa0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000fa4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000fa6:	4c0d      	ldr	r4, [pc, #52]	; (8000fdc <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000fa8:	0852      	lsrs	r2, r2, #1
 8000faa:	3a01      	subs	r2, #1
 8000fac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000fb0:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000fb6:	f7ff fac9 	bl	800054c <HAL_GetTick>
 8000fba:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000fbc:	6823      	ldr	r3, [r4, #0]
 8000fbe:	019a      	lsls	r2, r3, #6
 8000fc0:	f53f aebc 	bmi.w	8000d3c <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fc4:	f7ff fac2 	bl	800054c <HAL_GetTick>
 8000fc8:	1b40      	subs	r0, r0, r5
 8000fca:	2802      	cmp	r0, #2
 8000fcc:	d9f6      	bls.n	8000fbc <HAL_RCC_OscConfig+0x2b4>
 8000fce:	e6e2      	b.n	8000d96 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fd0:	f7ff fabc 	bl	800054c <HAL_GetTick>
 8000fd4:	1bc0      	subs	r0, r0, r7
 8000fd6:	2802      	cmp	r0, #2
 8000fd8:	d9d8      	bls.n	8000f8c <HAL_RCC_OscConfig+0x284>
 8000fda:	e6dc      	b.n	8000d96 <HAL_RCC_OscConfig+0x8e>
 8000fdc:	40023800 	.word	0x40023800
 8000fe0:	42470000 	.word	0x42470000
 8000fe4:	42470e80 	.word	0x42470e80
 8000fe8:	40007000 	.word	0x40007000
 8000fec:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 8000ff0:	f7ff faac 	bl	800054c <HAL_GetTick>
 8000ff4:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000ff6:	682b      	ldr	r3, [r5, #0]
 8000ff8:	019b      	lsls	r3, r3, #6
 8000ffa:	f57f ae9f 	bpl.w	8000d3c <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ffe:	f7ff faa5 	bl	800054c <HAL_GetTick>
 8001002:	1b00      	subs	r0, r0, r4
 8001004:	2802      	cmp	r0, #2
 8001006:	d9f6      	bls.n	8000ff6 <HAL_RCC_OscConfig+0x2ee>
 8001008:	e6c5      	b.n	8000d96 <HAL_RCC_OscConfig+0x8e>
 800100a:	bf00      	nop

0800100c <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800100c:	4913      	ldr	r1, [pc, #76]	; (800105c <HAL_RCC_GetSysClockFreq+0x50>)
{
 800100e:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001010:	688b      	ldr	r3, [r1, #8]
 8001012:	f003 030c 	and.w	r3, r3, #12
 8001016:	2b04      	cmp	r3, #4
 8001018:	d003      	beq.n	8001022 <HAL_RCC_GetSysClockFreq+0x16>
 800101a:	2b08      	cmp	r3, #8
 800101c:	d003      	beq.n	8001026 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800101e:	4810      	ldr	r0, [pc, #64]	; (8001060 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001020:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8001022:	4810      	ldr	r0, [pc, #64]	; (8001064 <HAL_RCC_GetSysClockFreq+0x58>)
 8001024:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001026:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001028:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800102a:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800102c:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001030:	bf14      	ite	ne
 8001032:	480c      	ldrne	r0, [pc, #48]	; (8001064 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001034:	480a      	ldreq	r0, [pc, #40]	; (8001060 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001036:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800103a:	bf18      	it	ne
 800103c:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800103e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001042:	fba1 0100 	umull	r0, r1, r1, r0
 8001046:	f7ff f8d3 	bl	80001f0 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800104a:	4b04      	ldr	r3, [pc, #16]	; (800105c <HAL_RCC_GetSysClockFreq+0x50>)
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001052:	3301      	adds	r3, #1
 8001054:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8001056:	fbb0 f0f3 	udiv	r0, r0, r3
 800105a:	bd08      	pop	{r3, pc}
 800105c:	40023800 	.word	0x40023800
 8001060:	00f42400 	.word	0x00f42400
 8001064:	007a1200 	.word	0x007a1200

08001068 <HAL_RCC_ClockConfig>:
{
 8001068:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800106c:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 800106e:	4604      	mov	r4, r0
 8001070:	b910      	cbnz	r0, 8001078 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001072:	2001      	movs	r0, #1
 8001074:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001078:	4b44      	ldr	r3, [pc, #272]	; (800118c <HAL_RCC_ClockConfig+0x124>)
 800107a:	681a      	ldr	r2, [r3, #0]
 800107c:	f002 020f 	and.w	r2, r2, #15
 8001080:	428a      	cmp	r2, r1
 8001082:	d328      	bcc.n	80010d6 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001084:	6821      	ldr	r1, [r4, #0]
 8001086:	078f      	lsls	r7, r1, #30
 8001088:	d42d      	bmi.n	80010e6 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800108a:	07c8      	lsls	r0, r1, #31
 800108c:	d440      	bmi.n	8001110 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800108e:	4b3f      	ldr	r3, [pc, #252]	; (800118c <HAL_RCC_ClockConfig+0x124>)
 8001090:	681a      	ldr	r2, [r3, #0]
 8001092:	f002 020f 	and.w	r2, r2, #15
 8001096:	4295      	cmp	r5, r2
 8001098:	d366      	bcc.n	8001168 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800109a:	6822      	ldr	r2, [r4, #0]
 800109c:	0751      	lsls	r1, r2, #29
 800109e:	d46c      	bmi.n	800117a <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010a0:	0713      	lsls	r3, r2, #28
 80010a2:	d507      	bpl.n	80010b4 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80010a4:	4a3a      	ldr	r2, [pc, #232]	; (8001190 <HAL_RCC_ClockConfig+0x128>)
 80010a6:	6921      	ldr	r1, [r4, #16]
 80010a8:	6893      	ldr	r3, [r2, #8]
 80010aa:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80010ae:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80010b2:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80010b4:	f7ff ffaa 	bl	800100c <HAL_RCC_GetSysClockFreq>
 80010b8:	4b35      	ldr	r3, [pc, #212]	; (8001190 <HAL_RCC_ClockConfig+0x128>)
 80010ba:	4a36      	ldr	r2, [pc, #216]	; (8001194 <HAL_RCC_ClockConfig+0x12c>)
 80010bc:	689b      	ldr	r3, [r3, #8]
 80010be:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80010c2:	5cd3      	ldrb	r3, [r2, r3]
 80010c4:	40d8      	lsrs	r0, r3
 80010c6:	4b34      	ldr	r3, [pc, #208]	; (8001198 <HAL_RCC_ClockConfig+0x130>)
 80010c8:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80010ca:	2000      	movs	r0, #0
 80010cc:	f001 ff56 	bl	8002f7c <HAL_InitTick>
  return HAL_OK;
 80010d0:	2000      	movs	r0, #0
 80010d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010d6:	b2ca      	uxtb	r2, r1
 80010d8:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f003 030f 	and.w	r3, r3, #15
 80010e0:	4299      	cmp	r1, r3
 80010e2:	d1c6      	bne.n	8001072 <HAL_RCC_ClockConfig+0xa>
 80010e4:	e7ce      	b.n	8001084 <HAL_RCC_ClockConfig+0x1c>
 80010e6:	4b2a      	ldr	r3, [pc, #168]	; (8001190 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010e8:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80010ec:	bf1e      	ittt	ne
 80010ee:	689a      	ldrne	r2, [r3, #8]
 80010f0:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 80010f4:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010f6:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80010f8:	bf42      	ittt	mi
 80010fa:	689a      	ldrmi	r2, [r3, #8]
 80010fc:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8001100:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001102:	689a      	ldr	r2, [r3, #8]
 8001104:	68a0      	ldr	r0, [r4, #8]
 8001106:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800110a:	4302      	orrs	r2, r0
 800110c:	609a      	str	r2, [r3, #8]
 800110e:	e7bc      	b.n	800108a <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001110:	6862      	ldr	r2, [r4, #4]
 8001112:	4b1f      	ldr	r3, [pc, #124]	; (8001190 <HAL_RCC_ClockConfig+0x128>)
 8001114:	2a01      	cmp	r2, #1
 8001116:	d11d      	bne.n	8001154 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800111e:	d0a8      	beq.n	8001072 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001120:	4e1b      	ldr	r6, [pc, #108]	; (8001190 <HAL_RCC_ClockConfig+0x128>)
 8001122:	68b3      	ldr	r3, [r6, #8]
 8001124:	f023 0303 	bic.w	r3, r3, #3
 8001128:	4313      	orrs	r3, r2
 800112a:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800112c:	f7ff fa0e 	bl	800054c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001130:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001134:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001136:	68b3      	ldr	r3, [r6, #8]
 8001138:	6862      	ldr	r2, [r4, #4]
 800113a:	f003 030c 	and.w	r3, r3, #12
 800113e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001142:	d0a4      	beq.n	800108e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001144:	f7ff fa02 	bl	800054c <HAL_GetTick>
 8001148:	1bc0      	subs	r0, r0, r7
 800114a:	4540      	cmp	r0, r8
 800114c:	d9f3      	bls.n	8001136 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 800114e:	2003      	movs	r0, #3
}
 8001150:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001154:	1e91      	subs	r1, r2, #2
 8001156:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001158:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800115a:	d802      	bhi.n	8001162 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800115c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001160:	e7dd      	b.n	800111e <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001162:	f013 0f02 	tst.w	r3, #2
 8001166:	e7da      	b.n	800111e <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001168:	b2ea      	uxtb	r2, r5
 800116a:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f003 030f 	and.w	r3, r3, #15
 8001172:	429d      	cmp	r5, r3
 8001174:	f47f af7d 	bne.w	8001072 <HAL_RCC_ClockConfig+0xa>
 8001178:	e78f      	b.n	800109a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800117a:	4905      	ldr	r1, [pc, #20]	; (8001190 <HAL_RCC_ClockConfig+0x128>)
 800117c:	68e0      	ldr	r0, [r4, #12]
 800117e:	688b      	ldr	r3, [r1, #8]
 8001180:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001184:	4303      	orrs	r3, r0
 8001186:	608b      	str	r3, [r1, #8]
 8001188:	e78a      	b.n	80010a0 <HAL_RCC_ClockConfig+0x38>
 800118a:	bf00      	nop
 800118c:	40023c00 	.word	0x40023c00
 8001190:	40023800 	.word	0x40023800
 8001194:	08003334 	.word	0x08003334
 8001198:	20000008 	.word	0x20000008

0800119c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 800119c:	4b01      	ldr	r3, [pc, #4]	; (80011a4 <HAL_RCC_GetHCLKFreq+0x8>)
 800119e:	6818      	ldr	r0, [r3, #0]
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	20000008 	.word	0x20000008

080011a8 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80011a8:	4b04      	ldr	r3, [pc, #16]	; (80011bc <HAL_RCC_GetPCLK1Freq+0x14>)
 80011aa:	4a05      	ldr	r2, [pc, #20]	; (80011c0 <HAL_RCC_GetPCLK1Freq+0x18>)
 80011ac:	689b      	ldr	r3, [r3, #8]
 80011ae:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80011b2:	5cd3      	ldrb	r3, [r2, r3]
 80011b4:	4a03      	ldr	r2, [pc, #12]	; (80011c4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80011b6:	6810      	ldr	r0, [r2, #0]
}
 80011b8:	40d8      	lsrs	r0, r3
 80011ba:	4770      	bx	lr
 80011bc:	40023800 	.word	0x40023800
 80011c0:	08003344 	.word	0x08003344
 80011c4:	20000008 	.word	0x20000008

080011c8 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80011c8:	4b04      	ldr	r3, [pc, #16]	; (80011dc <HAL_RCC_GetPCLK2Freq+0x14>)
 80011ca:	4a05      	ldr	r2, [pc, #20]	; (80011e0 <HAL_RCC_GetPCLK2Freq+0x18>)
 80011cc:	689b      	ldr	r3, [r3, #8]
 80011ce:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80011d2:	5cd3      	ldrb	r3, [r2, r3]
 80011d4:	4a03      	ldr	r2, [pc, #12]	; (80011e4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80011d6:	6810      	ldr	r0, [r2, #0]
}
 80011d8:	40d8      	lsrs	r0, r3
 80011da:	4770      	bx	lr
 80011dc:	40023800 	.word	0x40023800
 80011e0:	08003344 	.word	0x08003344
 80011e4:	20000008 	.word	0x20000008

080011e8 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80011e8:	230f      	movs	r3, #15
 80011ea:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80011ec:	4b0b      	ldr	r3, [pc, #44]	; (800121c <HAL_RCC_GetClockConfig+0x34>)
 80011ee:	689a      	ldr	r2, [r3, #8]
 80011f0:	f002 0203 	and.w	r2, r2, #3
 80011f4:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80011f6:	689a      	ldr	r2, [r3, #8]
 80011f8:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80011fc:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80011fe:	689a      	ldr	r2, [r3, #8]
 8001200:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8001204:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001206:	689b      	ldr	r3, [r3, #8]
 8001208:	08db      	lsrs	r3, r3, #3
 800120a:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800120e:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001210:	4b03      	ldr	r3, [pc, #12]	; (8001220 <HAL_RCC_GetClockConfig+0x38>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f003 030f 	and.w	r3, r3, #15
 8001218:	600b      	str	r3, [r1, #0]
 800121a:	4770      	bx	lr
 800121c:	40023800 	.word	0x40023800
 8001220:	40023c00 	.word	0x40023c00

08001224 <HAL_TIM_Base_MspInit>:
 8001224:	4770      	bx	lr

08001226 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001226:	6803      	ldr	r3, [r0, #0]
 8001228:	68da      	ldr	r2, [r3, #12]
 800122a:	f042 0201 	orr.w	r2, r2, #1
 800122e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001230:	689a      	ldr	r2, [r3, #8]
 8001232:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001236:	2a06      	cmp	r2, #6
  {
    __HAL_TIM_ENABLE(htim);
 8001238:	bf1e      	ittt	ne
 800123a:	681a      	ldrne	r2, [r3, #0]
 800123c:	f042 0201 	orrne.w	r2, r2, #1
 8001240:	601a      	strne	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 8001242:	2000      	movs	r0, #0
 8001244:	4770      	bx	lr

08001246 <HAL_TIM_OC_DelayElapsedCallback>:
 8001246:	4770      	bx	lr

08001248 <HAL_TIM_IC_CaptureCallback>:
 8001248:	4770      	bx	lr

0800124a <HAL_TIM_PWM_PulseFinishedCallback>:
 800124a:	4770      	bx	lr

0800124c <HAL_TIM_TriggerCallback>:
 800124c:	4770      	bx	lr

0800124e <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800124e:	6803      	ldr	r3, [r0, #0]
 8001250:	691a      	ldr	r2, [r3, #16]
 8001252:	0791      	lsls	r1, r2, #30
{
 8001254:	b510      	push	{r4, lr}
 8001256:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001258:	d50e      	bpl.n	8001278 <HAL_TIM_IRQHandler+0x2a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800125a:	68da      	ldr	r2, [r3, #12]
 800125c:	0792      	lsls	r2, r2, #30
 800125e:	d50b      	bpl.n	8001278 <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001260:	f06f 0202 	mvn.w	r2, #2
 8001264:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001266:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001268:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800126a:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800126c:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800126e:	d077      	beq.n	8001360 <HAL_TIM_IRQHandler+0x112>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001270:	f7ff ffea 	bl	8001248 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001274:	2300      	movs	r3, #0
 8001276:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001278:	6823      	ldr	r3, [r4, #0]
 800127a:	691a      	ldr	r2, [r3, #16]
 800127c:	0750      	lsls	r0, r2, #29
 800127e:	d510      	bpl.n	80012a2 <HAL_TIM_IRQHandler+0x54>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001280:	68da      	ldr	r2, [r3, #12]
 8001282:	0751      	lsls	r1, r2, #29
 8001284:	d50d      	bpl.n	80012a2 <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001286:	f06f 0204 	mvn.w	r2, #4
 800128a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800128c:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800128e:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001290:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001294:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001296:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001298:	d068      	beq.n	800136c <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 800129a:	f7ff ffd5 	bl	8001248 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800129e:	2300      	movs	r3, #0
 80012a0:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80012a2:	6823      	ldr	r3, [r4, #0]
 80012a4:	691a      	ldr	r2, [r3, #16]
 80012a6:	0712      	lsls	r2, r2, #28
 80012a8:	d50f      	bpl.n	80012ca <HAL_TIM_IRQHandler+0x7c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80012aa:	68da      	ldr	r2, [r3, #12]
 80012ac:	0710      	lsls	r0, r2, #28
 80012ae:	d50c      	bpl.n	80012ca <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80012b0:	f06f 0208 	mvn.w	r2, #8
 80012b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80012b6:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80012b8:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80012ba:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80012bc:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80012be:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80012c0:	d05a      	beq.n	8001378 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 80012c2:	f7ff ffc1 	bl	8001248 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80012c6:	2300      	movs	r3, #0
 80012c8:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80012ca:	6823      	ldr	r3, [r4, #0]
 80012cc:	691a      	ldr	r2, [r3, #16]
 80012ce:	06d2      	lsls	r2, r2, #27
 80012d0:	d510      	bpl.n	80012f4 <HAL_TIM_IRQHandler+0xa6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80012d2:	68da      	ldr	r2, [r3, #12]
 80012d4:	06d0      	lsls	r0, r2, #27
 80012d6:	d50d      	bpl.n	80012f4 <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80012d8:	f06f 0210 	mvn.w	r2, #16
 80012dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80012de:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80012e0:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80012e2:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80012e6:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80012e8:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80012ea:	d04b      	beq.n	8001384 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 80012ec:	f7ff ffac 	bl	8001248 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80012f0:	2300      	movs	r3, #0
 80012f2:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80012f4:	6823      	ldr	r3, [r4, #0]
 80012f6:	691a      	ldr	r2, [r3, #16]
 80012f8:	07d1      	lsls	r1, r2, #31
 80012fa:	d508      	bpl.n	800130e <HAL_TIM_IRQHandler+0xc0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80012fc:	68da      	ldr	r2, [r3, #12]
 80012fe:	07d2      	lsls	r2, r2, #31
 8001300:	d505      	bpl.n	800130e <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001302:	f06f 0201 	mvn.w	r2, #1
 8001306:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001308:	4620      	mov	r0, r4
 800130a:	f001 fe09 	bl	8002f20 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800130e:	6823      	ldr	r3, [r4, #0]
 8001310:	691a      	ldr	r2, [r3, #16]
 8001312:	0610      	lsls	r0, r2, #24
 8001314:	d508      	bpl.n	8001328 <HAL_TIM_IRQHandler+0xda>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001316:	68da      	ldr	r2, [r3, #12]
 8001318:	0611      	lsls	r1, r2, #24
 800131a:	d505      	bpl.n	8001328 <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800131c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001320:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001322:	4620      	mov	r0, r4
 8001324:	f000 f8b7 	bl	8001496 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001328:	6823      	ldr	r3, [r4, #0]
 800132a:	691a      	ldr	r2, [r3, #16]
 800132c:	0652      	lsls	r2, r2, #25
 800132e:	d508      	bpl.n	8001342 <HAL_TIM_IRQHandler+0xf4>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001330:	68da      	ldr	r2, [r3, #12]
 8001332:	0650      	lsls	r0, r2, #25
 8001334:	d505      	bpl.n	8001342 <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001336:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800133a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800133c:	4620      	mov	r0, r4
 800133e:	f7ff ff85 	bl	800124c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001342:	6823      	ldr	r3, [r4, #0]
 8001344:	691a      	ldr	r2, [r3, #16]
 8001346:	0691      	lsls	r1, r2, #26
 8001348:	d522      	bpl.n	8001390 <HAL_TIM_IRQHandler+0x142>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800134a:	68da      	ldr	r2, [r3, #12]
 800134c:	0692      	lsls	r2, r2, #26
 800134e:	d51f      	bpl.n	8001390 <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001350:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001354:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001356:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001358:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 800135c:	f000 b89a 	b.w	8001494 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001360:	f7ff ff71 	bl	8001246 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001364:	4620      	mov	r0, r4
 8001366:	f7ff ff70 	bl	800124a <HAL_TIM_PWM_PulseFinishedCallback>
 800136a:	e783      	b.n	8001274 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800136c:	f7ff ff6b 	bl	8001246 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001370:	4620      	mov	r0, r4
 8001372:	f7ff ff6a 	bl	800124a <HAL_TIM_PWM_PulseFinishedCallback>
 8001376:	e792      	b.n	800129e <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001378:	f7ff ff65 	bl	8001246 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800137c:	4620      	mov	r0, r4
 800137e:	f7ff ff64 	bl	800124a <HAL_TIM_PWM_PulseFinishedCallback>
 8001382:	e7a0      	b.n	80012c6 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001384:	f7ff ff5f 	bl	8001246 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001388:	4620      	mov	r0, r4
 800138a:	f7ff ff5e 	bl	800124a <HAL_TIM_PWM_PulseFinishedCallback>
 800138e:	e7af      	b.n	80012f0 <HAL_TIM_IRQHandler+0xa2>
 8001390:	bd10      	pop	{r4, pc}
	...

08001394 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001394:	4a30      	ldr	r2, [pc, #192]	; (8001458 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8001396:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001398:	4290      	cmp	r0, r2
 800139a:	d012      	beq.n	80013c2 <TIM_Base_SetConfig+0x2e>
 800139c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80013a0:	d00f      	beq.n	80013c2 <TIM_Base_SetConfig+0x2e>
 80013a2:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80013a6:	4290      	cmp	r0, r2
 80013a8:	d00b      	beq.n	80013c2 <TIM_Base_SetConfig+0x2e>
 80013aa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80013ae:	4290      	cmp	r0, r2
 80013b0:	d007      	beq.n	80013c2 <TIM_Base_SetConfig+0x2e>
 80013b2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80013b6:	4290      	cmp	r0, r2
 80013b8:	d003      	beq.n	80013c2 <TIM_Base_SetConfig+0x2e>
 80013ba:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80013be:	4290      	cmp	r0, r2
 80013c0:	d119      	bne.n	80013f6 <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 80013c2:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80013c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80013c8:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80013ca:	4a23      	ldr	r2, [pc, #140]	; (8001458 <TIM_Base_SetConfig+0xc4>)
 80013cc:	4290      	cmp	r0, r2
 80013ce:	d029      	beq.n	8001424 <TIM_Base_SetConfig+0x90>
 80013d0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80013d4:	d026      	beq.n	8001424 <TIM_Base_SetConfig+0x90>
 80013d6:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80013da:	4290      	cmp	r0, r2
 80013dc:	d022      	beq.n	8001424 <TIM_Base_SetConfig+0x90>
 80013de:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80013e2:	4290      	cmp	r0, r2
 80013e4:	d01e      	beq.n	8001424 <TIM_Base_SetConfig+0x90>
 80013e6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80013ea:	4290      	cmp	r0, r2
 80013ec:	d01a      	beq.n	8001424 <TIM_Base_SetConfig+0x90>
 80013ee:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80013f2:	4290      	cmp	r0, r2
 80013f4:	d016      	beq.n	8001424 <TIM_Base_SetConfig+0x90>
 80013f6:	4a19      	ldr	r2, [pc, #100]	; (800145c <TIM_Base_SetConfig+0xc8>)
 80013f8:	4290      	cmp	r0, r2
 80013fa:	d013      	beq.n	8001424 <TIM_Base_SetConfig+0x90>
 80013fc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001400:	4290      	cmp	r0, r2
 8001402:	d00f      	beq.n	8001424 <TIM_Base_SetConfig+0x90>
 8001404:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001408:	4290      	cmp	r0, r2
 800140a:	d00b      	beq.n	8001424 <TIM_Base_SetConfig+0x90>
 800140c:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8001410:	4290      	cmp	r0, r2
 8001412:	d007      	beq.n	8001424 <TIM_Base_SetConfig+0x90>
 8001414:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001418:	4290      	cmp	r0, r2
 800141a:	d003      	beq.n	8001424 <TIM_Base_SetConfig+0x90>
 800141c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001420:	4290      	cmp	r0, r2
 8001422:	d103      	bne.n	800142c <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001424:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001426:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800142a:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800142c:	694a      	ldr	r2, [r1, #20]
 800142e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001432:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8001434:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001436:	688b      	ldr	r3, [r1, #8]
 8001438:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800143a:	680b      	ldr	r3, [r1, #0]
 800143c:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800143e:	4b06      	ldr	r3, [pc, #24]	; (8001458 <TIM_Base_SetConfig+0xc4>)
 8001440:	4298      	cmp	r0, r3
 8001442:	d003      	beq.n	800144c <TIM_Base_SetConfig+0xb8>
 8001444:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001448:	4298      	cmp	r0, r3
 800144a:	d101      	bne.n	8001450 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800144c:	690b      	ldr	r3, [r1, #16]
 800144e:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001450:	2301      	movs	r3, #1
 8001452:	6143      	str	r3, [r0, #20]
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	40010000 	.word	0x40010000
 800145c:	40014000 	.word	0x40014000

08001460 <HAL_TIM_Base_Init>:
{
 8001460:	b510      	push	{r4, lr}
  if (htim == NULL)
 8001462:	4604      	mov	r4, r0
 8001464:	b1a0      	cbz	r0, 8001490 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8001466:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800146a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800146e:	b91b      	cbnz	r3, 8001478 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001470:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001474:	f7ff fed6 	bl	8001224 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8001478:	2302      	movs	r3, #2
 800147a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800147e:	6820      	ldr	r0, [r4, #0]
 8001480:	1d21      	adds	r1, r4, #4
 8001482:	f7ff ff87 	bl	8001394 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8001486:	2301      	movs	r3, #1
 8001488:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800148c:	2000      	movs	r0, #0
 800148e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001490:	2001      	movs	r0, #1
}
 8001492:	bd10      	pop	{r4, pc}

08001494 <HAL_TIMEx_CommutCallback>:
 8001494:	4770      	bx	lr

08001496 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001496:	4770      	bx	lr

08001498 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001498:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800149c:	6806      	ldr	r6, [r0, #0]
 800149e:	68c2      	ldr	r2, [r0, #12]
 80014a0:	6933      	ldr	r3, [r6, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80014a2:	69c1      	ldr	r1, [r0, #28]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80014a4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80014a8:	4313      	orrs	r3, r2
 80014aa:	6133      	str	r3, [r6, #16]
{
 80014ac:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80014ae:	6883      	ldr	r3, [r0, #8]
 80014b0:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 80014b2:	68f2      	ldr	r2, [r6, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80014b4:	4303      	orrs	r3, r0
 80014b6:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 80014b8:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80014bc:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 80014be:	f022 020c 	bic.w	r2, r2, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80014c2:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1,
 80014c4:	4313      	orrs	r3, r2
 80014c6:	60f3      	str	r3, [r6, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80014c8:	6973      	ldr	r3, [r6, #20]
 80014ca:	69a2      	ldr	r2, [r4, #24]
 80014cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80014d0:	4313      	orrs	r3, r2

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80014d2:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80014d6:	6173      	str	r3, [r6, #20]
 80014d8:	4b7a      	ldr	r3, [pc, #488]	; (80016c4 <UART_SetConfig+0x22c>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80014da:	d17c      	bne.n	80015d6 <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80014dc:	429e      	cmp	r6, r3
 80014de:	d003      	beq.n	80014e8 <UART_SetConfig+0x50>
 80014e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80014e4:	429e      	cmp	r6, r3
 80014e6:	d144      	bne.n	8001572 <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80014e8:	f7ff fe6e 	bl	80011c8 <HAL_RCC_GetPCLK2Freq>
 80014ec:	2519      	movs	r5, #25
 80014ee:	fb05 f300 	mul.w	r3, r5, r0
 80014f2:	6860      	ldr	r0, [r4, #4]
 80014f4:	f04f 0964 	mov.w	r9, #100	; 0x64
 80014f8:	0040      	lsls	r0, r0, #1
 80014fa:	fbb3 f3f0 	udiv	r3, r3, r0
 80014fe:	fbb3 f3f9 	udiv	r3, r3, r9
 8001502:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001506:	f7ff fe5f 	bl	80011c8 <HAL_RCC_GetPCLK2Freq>
 800150a:	6863      	ldr	r3, [r4, #4]
 800150c:	4368      	muls	r0, r5
 800150e:	005b      	lsls	r3, r3, #1
 8001510:	fbb0 f7f3 	udiv	r7, r0, r3
 8001514:	f7ff fe58 	bl	80011c8 <HAL_RCC_GetPCLK2Freq>
 8001518:	6863      	ldr	r3, [r4, #4]
 800151a:	4368      	muls	r0, r5
 800151c:	005b      	lsls	r3, r3, #1
 800151e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001522:	fbb3 f3f9 	udiv	r3, r3, r9
 8001526:	fb09 7313 	mls	r3, r9, r3, r7
 800152a:	00db      	lsls	r3, r3, #3
 800152c:	3332      	adds	r3, #50	; 0x32
 800152e:	fbb3 f3f9 	udiv	r3, r3, r9
 8001532:	005b      	lsls	r3, r3, #1
 8001534:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8001538:	f7ff fe46 	bl	80011c8 <HAL_RCC_GetPCLK2Freq>
 800153c:	6862      	ldr	r2, [r4, #4]
 800153e:	4368      	muls	r0, r5
 8001540:	0052      	lsls	r2, r2, #1
 8001542:	fbb0 faf2 	udiv	sl, r0, r2
 8001546:	f7ff fe3f 	bl	80011c8 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800154a:	6863      	ldr	r3, [r4, #4]
 800154c:	4368      	muls	r0, r5
 800154e:	005b      	lsls	r3, r3, #1
 8001550:	fbb0 f3f3 	udiv	r3, r0, r3
 8001554:	fbb3 f3f9 	udiv	r3, r3, r9
 8001558:	fb09 a313 	mls	r3, r9, r3, sl
 800155c:	00db      	lsls	r3, r3, #3
 800155e:	3332      	adds	r3, #50	; 0x32
 8001560:	fbb3 f3f9 	udiv	r3, r3, r9
 8001564:	f003 0307 	and.w	r3, r3, #7
 8001568:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800156a:	443b      	add	r3, r7
 800156c:	60b3      	str	r3, [r6, #8]
 800156e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001572:	f7ff fe19 	bl	80011a8 <HAL_RCC_GetPCLK1Freq>
 8001576:	2519      	movs	r5, #25
 8001578:	fb05 f300 	mul.w	r3, r5, r0
 800157c:	6860      	ldr	r0, [r4, #4]
 800157e:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001582:	0040      	lsls	r0, r0, #1
 8001584:	fbb3 f3f0 	udiv	r3, r3, r0
 8001588:	fbb3 f3f9 	udiv	r3, r3, r9
 800158c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001590:	f7ff fe0a 	bl	80011a8 <HAL_RCC_GetPCLK1Freq>
 8001594:	6863      	ldr	r3, [r4, #4]
 8001596:	4368      	muls	r0, r5
 8001598:	005b      	lsls	r3, r3, #1
 800159a:	fbb0 f7f3 	udiv	r7, r0, r3
 800159e:	f7ff fe03 	bl	80011a8 <HAL_RCC_GetPCLK1Freq>
 80015a2:	6863      	ldr	r3, [r4, #4]
 80015a4:	4368      	muls	r0, r5
 80015a6:	005b      	lsls	r3, r3, #1
 80015a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80015ac:	fbb3 f3f9 	udiv	r3, r3, r9
 80015b0:	fb09 7313 	mls	r3, r9, r3, r7
 80015b4:	00db      	lsls	r3, r3, #3
 80015b6:	3332      	adds	r3, #50	; 0x32
 80015b8:	fbb3 f3f9 	udiv	r3, r3, r9
 80015bc:	005b      	lsls	r3, r3, #1
 80015be:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 80015c2:	f7ff fdf1 	bl	80011a8 <HAL_RCC_GetPCLK1Freq>
 80015c6:	6862      	ldr	r2, [r4, #4]
 80015c8:	4368      	muls	r0, r5
 80015ca:	0052      	lsls	r2, r2, #1
 80015cc:	fbb0 faf2 	udiv	sl, r0, r2
 80015d0:	f7ff fdea 	bl	80011a8 <HAL_RCC_GetPCLK1Freq>
 80015d4:	e7b9      	b.n	800154a <UART_SetConfig+0xb2>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80015d6:	429e      	cmp	r6, r3
 80015d8:	d002      	beq.n	80015e0 <UART_SetConfig+0x148>
 80015da:	4b3b      	ldr	r3, [pc, #236]	; (80016c8 <UART_SetConfig+0x230>)
 80015dc:	429e      	cmp	r6, r3
 80015de:	d140      	bne.n	8001662 <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80015e0:	f7ff fdf2 	bl	80011c8 <HAL_RCC_GetPCLK2Freq>
 80015e4:	6867      	ldr	r7, [r4, #4]
 80015e6:	2519      	movs	r5, #25
 80015e8:	f04f 0964 	mov.w	r9, #100	; 0x64
 80015ec:	fb05 f300 	mul.w	r3, r5, r0
 80015f0:	00bf      	lsls	r7, r7, #2
 80015f2:	fbb3 f3f7 	udiv	r3, r3, r7
 80015f6:	fbb3 f3f9 	udiv	r3, r3, r9
 80015fa:	011f      	lsls	r7, r3, #4
 80015fc:	f7ff fde4 	bl	80011c8 <HAL_RCC_GetPCLK2Freq>
 8001600:	6863      	ldr	r3, [r4, #4]
 8001602:	4368      	muls	r0, r5
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	fbb0 f8f3 	udiv	r8, r0, r3
 800160a:	f7ff fddd 	bl	80011c8 <HAL_RCC_GetPCLK2Freq>
 800160e:	6863      	ldr	r3, [r4, #4]
 8001610:	4368      	muls	r0, r5
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	fbb0 f3f3 	udiv	r3, r0, r3
 8001618:	fbb3 f3f9 	udiv	r3, r3, r9
 800161c:	fb09 8313 	mls	r3, r9, r3, r8
 8001620:	011b      	lsls	r3, r3, #4
 8001622:	3332      	adds	r3, #50	; 0x32
 8001624:	fbb3 f3f9 	udiv	r3, r3, r9
 8001628:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 800162c:	f7ff fdcc 	bl	80011c8 <HAL_RCC_GetPCLK2Freq>
 8001630:	6862      	ldr	r2, [r4, #4]
 8001632:	4368      	muls	r0, r5
 8001634:	0092      	lsls	r2, r2, #2
 8001636:	fbb0 faf2 	udiv	sl, r0, r2
 800163a:	f7ff fdc5 	bl	80011c8 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800163e:	6863      	ldr	r3, [r4, #4]
 8001640:	4368      	muls	r0, r5
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	fbb0 f3f3 	udiv	r3, r0, r3
 8001648:	fbb3 f3f9 	udiv	r3, r3, r9
 800164c:	fb09 a313 	mls	r3, r9, r3, sl
 8001650:	011b      	lsls	r3, r3, #4
 8001652:	3332      	adds	r3, #50	; 0x32
 8001654:	fbb3 f3f9 	udiv	r3, r3, r9
 8001658:	f003 030f 	and.w	r3, r3, #15
 800165c:	ea43 0308 	orr.w	r3, r3, r8
 8001660:	e783      	b.n	800156a <UART_SetConfig+0xd2>
 8001662:	f7ff fda1 	bl	80011a8 <HAL_RCC_GetPCLK1Freq>
 8001666:	6867      	ldr	r7, [r4, #4]
 8001668:	2519      	movs	r5, #25
 800166a:	f04f 0964 	mov.w	r9, #100	; 0x64
 800166e:	fb05 f300 	mul.w	r3, r5, r0
 8001672:	00bf      	lsls	r7, r7, #2
 8001674:	fbb3 f3f7 	udiv	r3, r3, r7
 8001678:	fbb3 f3f9 	udiv	r3, r3, r9
 800167c:	011f      	lsls	r7, r3, #4
 800167e:	f7ff fd93 	bl	80011a8 <HAL_RCC_GetPCLK1Freq>
 8001682:	6863      	ldr	r3, [r4, #4]
 8001684:	4368      	muls	r0, r5
 8001686:	009b      	lsls	r3, r3, #2
 8001688:	fbb0 f8f3 	udiv	r8, r0, r3
 800168c:	f7ff fd8c 	bl	80011a8 <HAL_RCC_GetPCLK1Freq>
 8001690:	6863      	ldr	r3, [r4, #4]
 8001692:	4368      	muls	r0, r5
 8001694:	009b      	lsls	r3, r3, #2
 8001696:	fbb0 f3f3 	udiv	r3, r0, r3
 800169a:	fbb3 f3f9 	udiv	r3, r3, r9
 800169e:	fb09 8313 	mls	r3, r9, r3, r8
 80016a2:	011b      	lsls	r3, r3, #4
 80016a4:	3332      	adds	r3, #50	; 0x32
 80016a6:	fbb3 f3f9 	udiv	r3, r3, r9
 80016aa:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 80016ae:	f7ff fd7b 	bl	80011a8 <HAL_RCC_GetPCLK1Freq>
 80016b2:	6862      	ldr	r2, [r4, #4]
 80016b4:	4368      	muls	r0, r5
 80016b6:	0092      	lsls	r2, r2, #2
 80016b8:	fbb0 faf2 	udiv	sl, r0, r2
 80016bc:	f7ff fd74 	bl	80011a8 <HAL_RCC_GetPCLK1Freq>
 80016c0:	e7bd      	b.n	800163e <UART_SetConfig+0x1a6>
 80016c2:	bf00      	nop
 80016c4:	40011000 	.word	0x40011000
 80016c8:	40011400 	.word	0x40011400

080016cc <HAL_UART_Init>:
{
 80016cc:	b510      	push	{r4, lr}
  if (huart == NULL)
 80016ce:	4604      	mov	r4, r0
 80016d0:	b340      	cbz	r0, 8001724 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 80016d2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80016d6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80016da:	b91b      	cbnz	r3, 80016e4 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80016dc:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80016e0:	f001 fcec 	bl	80030bc <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80016e4:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80016e6:	2324      	movs	r3, #36	; 0x24
 80016e8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80016ec:	68d3      	ldr	r3, [r2, #12]
 80016ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80016f2:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80016f4:	4620      	mov	r0, r4
 80016f6:	f7ff fecf 	bl	8001498 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80016fa:	6823      	ldr	r3, [r4, #0]
 80016fc:	691a      	ldr	r2, [r3, #16]
 80016fe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001702:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001704:	695a      	ldr	r2, [r3, #20]
 8001706:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800170a:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 800170c:	68da      	ldr	r2, [r3, #12]
 800170e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001712:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001714:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8001716:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001718:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800171a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800171e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8001722:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001724:	2001      	movs	r0, #1
}
 8001726:	bd10      	pop	{r4, pc}

08001728 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8001728:	4b0a      	ldr	r3, [pc, #40]	; (8001754 <USB_CoreReset+0x2c>)
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800172a:	3b01      	subs	r3, #1
 800172c:	d101      	bne.n	8001732 <USB_CoreReset+0xa>
    {
      return HAL_TIMEOUT;
 800172e:	2003      	movs	r0, #3
 8001730:	4770      	bx	lr
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8001732:	6902      	ldr	r2, [r0, #16]
 8001734:	2a00      	cmp	r2, #0
 8001736:	daf8      	bge.n	800172a <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8001738:	6903      	ldr	r3, [r0, #16]
 800173a:	4a06      	ldr	r2, [pc, #24]	; (8001754 <USB_CoreReset+0x2c>)
 800173c:	f043 0301 	orr.w	r3, r3, #1
 8001740:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 8001742:	3a01      	subs	r2, #1
 8001744:	d0f3      	beq.n	800172e <USB_CoreReset+0x6>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8001746:	6903      	ldr	r3, [r0, #16]
 8001748:	f013 0301 	ands.w	r3, r3, #1
 800174c:	d1f9      	bne.n	8001742 <USB_CoreReset+0x1a>

  return HAL_OK;
 800174e:	4618      	mov	r0, r3
}
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	00030d41 	.word	0x00030d41

08001758 <USB_CoreInit>:
{
 8001758:	b084      	sub	sp, #16
 800175a:	b538      	push	{r3, r4, r5, lr}
 800175c:	ad05      	add	r5, sp, #20
 800175e:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8001762:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001764:	2b01      	cmp	r3, #1
{
 8001766:	4604      	mov	r4, r0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8001768:	d125      	bne.n	80017b6 <USB_CoreInit+0x5e>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800176a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800176c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001770:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8001772:	68c3      	ldr	r3, [r0, #12]
 8001774:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8001778:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800177c:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800177e:	68c3      	ldr	r3, [r0, #12]
 8001780:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8001784:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 8001786:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8001788:	2b01      	cmp	r3, #1
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800178a:	bf02      	ittt	eq
 800178c:	68c3      	ldreq	r3, [r0, #12]
 800178e:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
 8001792:	60c3      	streq	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 8001794:	f7ff ffc8 	bl	8001728 <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 8001798:	9b08      	ldr	r3, [sp, #32]
 800179a:	2b01      	cmp	r3, #1
 800179c:	d107      	bne.n	80017ae <USB_CoreInit+0x56>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800179e:	68a3      	ldr	r3, [r4, #8]
 80017a0:	f043 0306 	orr.w	r3, r3, #6
 80017a4:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80017a6:	68a3      	ldr	r3, [r4, #8]
 80017a8:	f043 0320 	orr.w	r3, r3, #32
 80017ac:	60a3      	str	r3, [r4, #8]
}
 80017ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80017b2:	b004      	add	sp, #16
 80017b4:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80017b6:	68c3      	ldr	r3, [r0, #12]
 80017b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017bc:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 80017be:	f7ff ffb3 	bl	8001728 <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 80017c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80017c4:	b923      	cbnz	r3, 80017d0 <USB_CoreInit+0x78>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80017c6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80017c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80017cc:	63a3      	str	r3, [r4, #56]	; 0x38
 80017ce:	e7e3      	b.n	8001798 <USB_CoreInit+0x40>
 80017d0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80017d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017d6:	e7f9      	b.n	80017cc <USB_CoreInit+0x74>

080017d8 <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80017d8:	6883      	ldr	r3, [r0, #8]
 80017da:	f023 0301 	bic.w	r3, r3, #1
 80017de:	6083      	str	r3, [r0, #8]
}
 80017e0:	2000      	movs	r0, #0
 80017e2:	4770      	bx	lr

080017e4 <USB_SetCurrentMode>:
{
 80017e4:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80017e6:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 80017e8:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80017ea:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80017ee:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 80017f0:	d108      	bne.n	8001804 <USB_SetCurrentMode+0x20>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80017f2:	68c3      	ldr	r3, [r0, #12]
 80017f4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80017f8:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 80017fa:	2032      	movs	r0, #50	; 0x32
 80017fc:	f7fe feac 	bl	8000558 <HAL_Delay>
  return HAL_OK;
 8001800:	2000      	movs	r0, #0
 8001802:	bd08      	pop	{r3, pc}
  else if (mode == USB_DEVICE_MODE)
 8001804:	b919      	cbnz	r1, 800180e <USB_SetCurrentMode+0x2a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8001806:	68c3      	ldr	r3, [r0, #12]
 8001808:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800180c:	e7f4      	b.n	80017f8 <USB_SetCurrentMode+0x14>
    return HAL_ERROR;
 800180e:	2001      	movs	r0, #1
}
 8001810:	bd08      	pop	{r3, pc}
	...

08001814 <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8001814:	0189      	lsls	r1, r1, #6
 8001816:	f041 0120 	orr.w	r1, r1, #32
 800181a:	4a06      	ldr	r2, [pc, #24]	; (8001834 <USB_FlushTxFifo+0x20>)
 800181c:	6101      	str	r1, [r0, #16]
    if (++count > 200000U)
 800181e:	3a01      	subs	r2, #1
 8001820:	d005      	beq.n	800182e <USB_FlushTxFifo+0x1a>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8001822:	6903      	ldr	r3, [r0, #16]
 8001824:	f013 0320 	ands.w	r3, r3, #32
 8001828:	d1f9      	bne.n	800181e <USB_FlushTxFifo+0xa>
  return HAL_OK;
 800182a:	4618      	mov	r0, r3
 800182c:	4770      	bx	lr
      return HAL_TIMEOUT;
 800182e:	2003      	movs	r0, #3
}
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	00030d41 	.word	0x00030d41

08001838 <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8001838:	2310      	movs	r3, #16
 800183a:	4a06      	ldr	r2, [pc, #24]	; (8001854 <USB_FlushRxFifo+0x1c>)
 800183c:	6103      	str	r3, [r0, #16]
    if (++count > 200000U)
 800183e:	3a01      	subs	r2, #1
 8001840:	d005      	beq.n	800184e <USB_FlushRxFifo+0x16>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8001842:	6903      	ldr	r3, [r0, #16]
 8001844:	f013 0310 	ands.w	r3, r3, #16
 8001848:	d1f9      	bne.n	800183e <USB_FlushRxFifo+0x6>
  return HAL_OK;
 800184a:	4618      	mov	r0, r3
 800184c:	4770      	bx	lr
      return HAL_TIMEOUT;
 800184e:	2003      	movs	r0, #3
}
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	00030d41 	.word	0x00030d41

08001858 <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 8001858:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 800185c:	4319      	orrs	r1, r3
 800185e:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 8001862:	2000      	movs	r0, #0
 8001864:	4770      	bx	lr
	...

08001868 <USB_DevInit>:
{
 8001868:	b084      	sub	sp, #16
 800186a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800186e:	4604      	mov	r4, r0
 8001870:	a809      	add	r0, sp, #36	; 0x24
 8001872:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  for (i = 0U; i < 15U; i++)
 8001876:	2300      	movs	r3, #0
 8001878:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800187a:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 800187c:	4688      	mov	r8, r1
    USBx->DIEPTXF[i] = 0U;
 800187e:	4619      	mov	r1, r3
 8001880:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8001884:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  for (i = 0U; i < 15U; i++)
 8001888:	3301      	adds	r3, #1
 800188a:	2b0f      	cmp	r3, #15
    USBx->DIEPTXF[i] = 0U;
 800188c:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 800188e:	d1f7      	bne.n	8001880 <USB_DevInit+0x18>
  if (cfg.vbus_sensing_enable == 0U)
 8001890:	2e00      	cmp	r6, #0
 8001892:	d173      	bne.n	800197c <USB_DevInit+0x114>
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8001894:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001896:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800189a:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800189c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800189e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80018a2:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80018a4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80018a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80018aa:	63a3      	str	r3, [r4, #56]	; 0x38
  USBx_PCGCCTL = 0U;
 80018ac:	2300      	movs	r3, #0
 80018ae:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80018b2:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 80018b6:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80018ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80018bc:	2b01      	cmp	r3, #1
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80018be:	f504 6500 	add.w	r5, r4, #2048	; 0x800
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80018c2:	d165      	bne.n	8001990 <USB_DevInit+0x128>
    if (cfg.speed == USBD_HS_SPEED)
 80018c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80018c6:	2900      	cmp	r1, #0
 80018c8:	d160      	bne.n	800198c <USB_DevInit+0x124>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80018ca:	4620      	mov	r0, r4
 80018cc:	f7ff ffc4 	bl	8001858 <USB_SetDevSpeed>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80018d0:	2110      	movs	r1, #16
 80018d2:	4620      	mov	r0, r4
 80018d4:	f7ff ff9e 	bl	8001814 <USB_FlushTxFifo>
 80018d8:	4601      	mov	r1, r0
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80018da:	4620      	mov	r0, r4
 80018dc:	f7ff ffac 	bl	8001838 <USB_FlushRxFifo>
 80018e0:	2800      	cmp	r0, #0
 80018e2:	d157      	bne.n	8001994 <USB_DevInit+0x12c>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80018e4:	1c08      	adds	r0, r1, #0
 80018e6:	bf18      	it	ne
 80018e8:	2001      	movne	r0, #1
  USBx_DEVICE->DIEPMSK = 0U;
 80018ea:	2300      	movs	r3, #0
 80018ec:	612b      	str	r3, [r5, #16]
 80018ee:	f504 6210 	add.w	r2, r4, #2304	; 0x900
  USBx_DEVICE->DOEPMSK = 0U;
 80018f2:	616b      	str	r3, [r5, #20]
      USBx_INEP(i)->DIEPCTL = 0U;
 80018f4:	4619      	mov	r1, r3
  USBx_DEVICE->DAINTMSK = 0U;
 80018f6:	61eb      	str	r3, [r5, #28]
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80018f8:	f04f 4e90 	mov.w	lr, #1207959552	; 0x48000000
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80018fc:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8001900:	f64f 397f 	movw	r9, #64383	; 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8001904:	4543      	cmp	r3, r8
 8001906:	d147      	bne.n	8001998 <USB_DevInit+0x130>
 8001908:	2100      	movs	r1, #0
 800190a:	f504 6230 	add.w	r2, r4, #2816	; 0xb00
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800190e:	468e      	mov	lr, r1
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8001910:	f04f 4c90 	mov.w	ip, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8001914:	f04f 6800 	mov.w	r8, #134217728	; 0x8000000
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8001918:	f64f 397f 	movw	r9, #64383	; 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800191c:	428b      	cmp	r3, r1
 800191e:	d14e      	bne.n	80019be <USB_DevInit+0x156>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8001920:	692b      	ldr	r3, [r5, #16]
  if (cfg.dma_enable == 1U)
 8001922:	2f01      	cmp	r7, #1
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8001924:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001928:	612b      	str	r3, [r5, #16]
  if (cfg.dma_enable == 1U)
 800192a:	d107      	bne.n	800193c <USB_DevInit+0xd4>
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 800192c:	4b2e      	ldr	r3, [pc, #184]	; (80019e8 <USB_DevInit+0x180>)
 800192e:	632b      	str	r3, [r5, #48]	; 0x30
    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 8001930:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001932:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001936:	f043 0303 	orr.w	r3, r3, #3
 800193a:	632b      	str	r3, [r5, #48]	; 0x30
  USBx->GINTMSK = 0U;
 800193c:	2300      	movs	r3, #0
 800193e:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 8001940:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 8001944:	6163      	str	r3, [r4, #20]
  if (cfg.dma_enable == 0U)
 8001946:	b91f      	cbnz	r7, 8001950 <USB_DevInit+0xe8>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8001948:	69a3      	ldr	r3, [r4, #24]
 800194a:	f043 0310 	orr.w	r3, r3, #16
 800194e:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8001950:	69a2      	ldr	r2, [r4, #24]
 8001952:	4b26      	ldr	r3, [pc, #152]	; (80019ec <USB_DevInit+0x184>)
 8001954:	4313      	orrs	r3, r2
 8001956:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 8001958:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800195a:	b11b      	cbz	r3, 8001964 <USB_DevInit+0xfc>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800195c:	69a3      	ldr	r3, [r4, #24]
 800195e:	f043 0308 	orr.w	r3, r3, #8
 8001962:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 8001964:	2e01      	cmp	r6, #1
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8001966:	bf01      	itttt	eq
 8001968:	69a3      	ldreq	r3, [r4, #24]
 800196a:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 800196e:	f043 0304 	orreq.w	r3, r3, #4
 8001972:	61a3      	streq	r3, [r4, #24]
}
 8001974:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001978:	b004      	add	sp, #16
 800197a:	4770      	bx	lr
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800197c:	6823      	ldr	r3, [r4, #0]
 800197e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001982:	6023      	str	r3, [r4, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8001984:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001986:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800198a:	e78e      	b.n	80018aa <USB_DevInit+0x42>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800198c:	4619      	mov	r1, r3
 800198e:	e79c      	b.n	80018ca <USB_DevInit+0x62>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8001990:	2103      	movs	r1, #3
 8001992:	e79a      	b.n	80018ca <USB_DevInit+0x62>
 8001994:	2001      	movs	r0, #1
 8001996:	e7a8      	b.n	80018ea <USB_DevInit+0x82>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8001998:	f8d2 a000 	ldr.w	sl, [r2]
 800199c:	f1ba 0f00 	cmp.w	sl, #0
 80019a0:	da0b      	bge.n	80019ba <USB_DevInit+0x152>
      if (i == 0U)
 80019a2:	b93b      	cbnz	r3, 80019b4 <USB_DevInit+0x14c>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80019a4:	f8c2 c000 	str.w	ip, [r2]
    USBx_INEP(i)->DIEPTSIZ = 0U;
 80019a8:	6111      	str	r1, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80019aa:	3301      	adds	r3, #1
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80019ac:	f8c2 9008 	str.w	r9, [r2, #8]
 80019b0:	3220      	adds	r2, #32
 80019b2:	e7a7      	b.n	8001904 <USB_DevInit+0x9c>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80019b4:	f8c2 e000 	str.w	lr, [r2]
 80019b8:	e7f6      	b.n	80019a8 <USB_DevInit+0x140>
      USBx_INEP(i)->DIEPCTL = 0U;
 80019ba:	6011      	str	r1, [r2, #0]
 80019bc:	e7f4      	b.n	80019a8 <USB_DevInit+0x140>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80019be:	f8d2 a000 	ldr.w	sl, [r2]
 80019c2:	f1ba 0f00 	cmp.w	sl, #0
 80019c6:	da0c      	bge.n	80019e2 <USB_DevInit+0x17a>
      if (i == 0U)
 80019c8:	b941      	cbnz	r1, 80019dc <USB_DevInit+0x174>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80019ca:	f8c2 8000 	str.w	r8, [r2]
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80019ce:	f8c2 e010 	str.w	lr, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80019d2:	3101      	adds	r1, #1
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80019d4:	f8c2 9008 	str.w	r9, [r2, #8]
 80019d8:	3220      	adds	r2, #32
 80019da:	e79f      	b.n	800191c <USB_DevInit+0xb4>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80019dc:	f8c2 c000 	str.w	ip, [r2]
 80019e0:	e7f5      	b.n	80019ce <USB_DevInit+0x166>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80019e2:	f8c2 e000 	str.w	lr, [r2]
 80019e6:	e7f2      	b.n	80019ce <USB_DevInit+0x166>
 80019e8:	00800100 	.word	0x00800100
 80019ec:	803c3800 	.word	0x803c3800

080019f0 <USB_DevDisconnect>:
{
 80019f0:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80019f2:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 80019f6:	f043 0302 	orr.w	r3, r3, #2
 80019fa:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 80019fe:	2003      	movs	r0, #3
 8001a00:	f7fe fdaa 	bl	8000558 <HAL_Delay>
}
 8001a04:	2000      	movs	r0, #0
 8001a06:	bd08      	pop	{r3, pc}

08001a08 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001a08:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8001a0a:	f000 fda5 	bl	8002558 <vTaskStartScheduler>
  
  return osOK;
}
 8001a0e:	2000      	movs	r0, #0
 8001a10:	bd08      	pop	{r3, pc}

08001a12 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001a12:	b570      	push	{r4, r5, r6, lr}
 8001a14:	4605      	mov	r5, r0
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8001a16:	6946      	ldr	r6, [r0, #20]
 8001a18:	692a      	ldr	r2, [r5, #16]
 8001a1a:	6840      	ldr	r0, [r0, #4]
 8001a1c:	f9b5 4008 	ldrsh.w	r4, [r5, #8]
{
 8001a20:	460b      	mov	r3, r1
 8001a22:	b086      	sub	sp, #24
 8001a24:	6829      	ldr	r1, [r5, #0]
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8001a26:	b176      	cbz	r6, 8001a46 <osThreadCreate+0x34>
 8001a28:	69ad      	ldr	r5, [r5, #24]
 8001a2a:	b165      	cbz	r5, 8001a46 <osThreadCreate+0x34>
  if (priority != osPriorityError) {
 8001a2c:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 8001a2e:	bf14      	ite	ne
 8001a30:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001a32:	2400      	moveq	r4, #0
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001a34:	9502      	str	r5, [sp, #8]
 8001a36:	e88d 0050 	stmia.w	sp, {r4, r6}
 8001a3a:	f000 fc97 	bl	800236c <xTaskCreateStatic>
 8001a3e:	9005      	str	r0, [sp, #20]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8001a40:	9805      	ldr	r0, [sp, #20]
}
 8001a42:	b006      	add	sp, #24
 8001a44:	bd70      	pop	{r4, r5, r6, pc}
  if (priority != osPriorityError) {
 8001a46:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 8001a48:	bf14      	ite	ne
 8001a4a:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001a4c:	2400      	moveq	r4, #0
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001a4e:	ad05      	add	r5, sp, #20
 8001a50:	b292      	uxth	r2, r2
 8001a52:	e88d 0030 	stmia.w	sp, {r4, r5}
 8001a56:	f000 fcc0 	bl	80023da <xTaskCreate>
 8001a5a:	2801      	cmp	r0, #1
 8001a5c:	d0f0      	beq.n	8001a40 <osThreadCreate+0x2e>
      return NULL;
 8001a5e:	2000      	movs	r0, #0
 8001a60:	e7ef      	b.n	8001a42 <osThreadCreate+0x30>

08001a62 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001a62:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001a64:	2800      	cmp	r0, #0
 8001a66:	bf08      	it	eq
 8001a68:	2001      	moveq	r0, #1
 8001a6a:	f000 febd 	bl	80027e8 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001a6e:	2000      	movs	r0, #0
 8001a70:	bd08      	pop	{r3, pc}

08001a72 <osThreadSuspend>:
* @brief  Suspend execution of a thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadSuspend (osThreadId thread_id)
{
 8001a72:	b508      	push	{r3, lr}
#if (INCLUDE_vTaskSuspend == 1)
    vTaskSuspend(thread_id);
 8001a74:	f000 ff16 	bl	80028a4 <vTaskSuspend>
  
  return osOK;
#else
  return osErrorResource;
#endif
}
 8001a78:	2000      	movs	r0, #0
 8001a7a:	bd08      	pop	{r3, pc}

08001a7c <osThreadResume>:
* @brief  Resume execution of a suspended thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadResume (osThreadId thread_id)
{
 8001a7c:	b508      	push	{r3, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001a7e:	f3ef 8305 	mrs	r3, IPSR
#if (INCLUDE_vTaskSuspend == 1)  
  if(inHandlerMode())
 8001a82:	b16b      	cbz	r3, 8001aa0 <osThreadResume+0x24>
  {
    if (xTaskResumeFromISR(thread_id) == pdTRUE)
 8001a84:	f000 fd18 	bl	80024b8 <xTaskResumeFromISR>
 8001a88:	2801      	cmp	r0, #1
 8001a8a:	d107      	bne.n	8001a9c <osThreadResume+0x20>
    {
      portYIELD_FROM_ISR(pdTRUE);
 8001a8c:	4b06      	ldr	r3, [pc, #24]	; (8001aa8 <osThreadResume+0x2c>)
 8001a8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001a92:	601a      	str	r2, [r3, #0]
 8001a94:	f3bf 8f4f 	dsb	sy
 8001a98:	f3bf 8f6f 	isb	sy
  }
  return osOK;
#else
  return osErrorResource;
#endif
}
 8001a9c:	2000      	movs	r0, #0
 8001a9e:	bd08      	pop	{r3, pc}
    vTaskResume(thread_id);
 8001aa0:	f000 fcc8 	bl	8002434 <vTaskResume>
 8001aa4:	e7fa      	b.n	8001a9c <osThreadResume+0x20>
 8001aa6:	bf00      	nop
 8001aa8:	e000ed04 	.word	0xe000ed04

08001aac <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001aac:	f100 0308 	add.w	r3, r0, #8
 8001ab0:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001ab2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001ab6:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001ab8:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001aba:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001abc:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001abe:	6003      	str	r3, [r0, #0]
 8001ac0:	4770      	bx	lr

08001ac2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	6103      	str	r3, [r0, #16]
 8001ac6:	4770      	bx	lr

08001ac8 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8001ac8:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001aca:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001acc:	689a      	ldr	r2, [r3, #8]
 8001ace:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001ad0:	689a      	ldr	r2, [r3, #8]
 8001ad2:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001ad4:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8001ad6:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001ad8:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8001ada:	3301      	adds	r3, #1
 8001adc:	6003      	str	r3, [r0, #0]
 8001ade:	4770      	bx	lr

08001ae0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001ae0:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001ae2:	1c53      	adds	r3, r2, #1
{
 8001ae4:	b530      	push	{r4, r5, lr}
	if( xValueOfInsertion == portMAX_DELAY )
 8001ae6:	d10a      	bne.n	8001afe <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001ae8:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001aea:	685a      	ldr	r2, [r3, #4]
 8001aec:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001aee:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001af0:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8001af2:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8001af4:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001af6:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8001af8:	3301      	adds	r3, #1
 8001afa:	6003      	str	r3, [r0, #0]
 8001afc:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001afe:	f100 0308 	add.w	r3, r0, #8
 8001b02:	685c      	ldr	r4, [r3, #4]
 8001b04:	6825      	ldr	r5, [r4, #0]
 8001b06:	42aa      	cmp	r2, r5
 8001b08:	d3ef      	bcc.n	8001aea <vListInsert+0xa>
 8001b0a:	4623      	mov	r3, r4
 8001b0c:	e7f9      	b.n	8001b02 <vListInsert+0x22>

08001b0e <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001b0e:	6841      	ldr	r1, [r0, #4]
 8001b10:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001b12:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001b14:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001b16:	6882      	ldr	r2, [r0, #8]
 8001b18:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001b1a:	6859      	ldr	r1, [r3, #4]
 8001b1c:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001b1e:	bf08      	it	eq
 8001b20:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001b22:	2200      	movs	r2, #0
 8001b24:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	3a01      	subs	r2, #1
 8001b2a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001b2c:	6818      	ldr	r0, [r3, #0]
}
 8001b2e:	4770      	bx	lr

08001b30 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8001b30:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8001b32:	2300      	movs	r3, #0
 8001b34:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8001b36:	4b0d      	ldr	r3, [pc, #52]	; (8001b6c <prvTaskExitError+0x3c>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	3301      	adds	r3, #1
 8001b3c:	d008      	beq.n	8001b50 <prvTaskExitError+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b42:	f383 8811 	msr	BASEPRI, r3
 8001b46:	f3bf 8f6f 	isb	sy
 8001b4a:	f3bf 8f4f 	dsb	sy
 8001b4e:	e7fe      	b.n	8001b4e <prvTaskExitError+0x1e>
 8001b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b54:	f383 8811 	msr	BASEPRI, r3
 8001b58:	f3bf 8f6f 	isb	sy
 8001b5c:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8001b60:	9b01      	ldr	r3, [sp, #4]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d0fc      	beq.n	8001b60 <prvTaskExitError+0x30>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8001b66:	b002      	add	sp, #8
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop
 8001b6c:	20000004 	.word	0x20000004

08001b70 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8001b70:	4808      	ldr	r0, [pc, #32]	; (8001b94 <prvPortStartFirstTask+0x24>)
 8001b72:	6800      	ldr	r0, [r0, #0]
 8001b74:	6800      	ldr	r0, [r0, #0]
 8001b76:	f380 8808 	msr	MSP, r0
 8001b7a:	f04f 0000 	mov.w	r0, #0
 8001b7e:	f380 8814 	msr	CONTROL, r0
 8001b82:	b662      	cpsie	i
 8001b84:	b661      	cpsie	f
 8001b86:	f3bf 8f4f 	dsb	sy
 8001b8a:	f3bf 8f6f 	isb	sy
 8001b8e:	df00      	svc	0
 8001b90:	bf00      	nop
 8001b92:	0000      	.short	0x0000
 8001b94:	e000ed08 	.word	0xe000ed08

08001b98 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8001b98:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8001ba8 <vPortEnableVFP+0x10>
 8001b9c:	6801      	ldr	r1, [r0, #0]
 8001b9e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8001ba2:	6001      	str	r1, [r0, #0]
 8001ba4:	4770      	bx	lr
 8001ba6:	0000      	.short	0x0000
 8001ba8:	e000ed88 	.word	0xe000ed88

08001bac <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8001bac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001bb0:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8001bb4:	4b07      	ldr	r3, [pc, #28]	; (8001bd4 <pxPortInitialiseStack+0x28>)
 8001bb6:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8001bba:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8001bbe:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8001bc2:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8001bc6:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8001bca:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8001bce:	3844      	subs	r0, #68	; 0x44
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	08001b31 	.word	0x08001b31
	...

08001be0 <SVC_Handler>:
	__asm volatile (
 8001be0:	4b07      	ldr	r3, [pc, #28]	; (8001c00 <pxCurrentTCBConst2>)
 8001be2:	6819      	ldr	r1, [r3, #0]
 8001be4:	6808      	ldr	r0, [r1, #0]
 8001be6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001bea:	f380 8809 	msr	PSP, r0
 8001bee:	f3bf 8f6f 	isb	sy
 8001bf2:	f04f 0000 	mov.w	r0, #0
 8001bf6:	f380 8811 	msr	BASEPRI, r0
 8001bfa:	4770      	bx	lr
 8001bfc:	f3af 8000 	nop.w

08001c00 <pxCurrentTCBConst2>:
 8001c00:	20003c48 	.word	0x20003c48

08001c04 <vPortEnterCritical>:
 8001c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c08:	f383 8811 	msr	BASEPRI, r3
 8001c0c:	f3bf 8f6f 	isb	sy
 8001c10:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8001c14:	4a0a      	ldr	r2, [pc, #40]	; (8001c40 <vPortEnterCritical+0x3c>)
 8001c16:	6813      	ldr	r3, [r2, #0]
 8001c18:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 8001c1a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8001c1c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8001c1e:	d10d      	bne.n	8001c3c <vPortEnterCritical+0x38>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8001c20:	4b08      	ldr	r3, [pc, #32]	; (8001c44 <vPortEnterCritical+0x40>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f013 0fff 	tst.w	r3, #255	; 0xff
 8001c28:	d008      	beq.n	8001c3c <vPortEnterCritical+0x38>
 8001c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c2e:	f383 8811 	msr	BASEPRI, r3
 8001c32:	f3bf 8f6f 	isb	sy
 8001c36:	f3bf 8f4f 	dsb	sy
 8001c3a:	e7fe      	b.n	8001c3a <vPortEnterCritical+0x36>
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	20000004 	.word	0x20000004
 8001c44:	e000ed04 	.word	0xe000ed04

08001c48 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8001c48:	4a08      	ldr	r2, [pc, #32]	; (8001c6c <vPortExitCritical+0x24>)
 8001c4a:	6813      	ldr	r3, [r2, #0]
 8001c4c:	b943      	cbnz	r3, 8001c60 <vPortExitCritical+0x18>
 8001c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c52:	f383 8811 	msr	BASEPRI, r3
 8001c56:	f3bf 8f6f 	isb	sy
 8001c5a:	f3bf 8f4f 	dsb	sy
 8001c5e:	e7fe      	b.n	8001c5e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8001c60:	3b01      	subs	r3, #1
 8001c62:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8001c64:	b90b      	cbnz	r3, 8001c6a <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001c66:	f383 8811 	msr	BASEPRI, r3
 8001c6a:	4770      	bx	lr
 8001c6c:	20000004 	.word	0x20000004

08001c70 <PendSV_Handler>:
	__asm volatile
 8001c70:	f3ef 8009 	mrs	r0, PSP
 8001c74:	f3bf 8f6f 	isb	sy
 8001c78:	4b15      	ldr	r3, [pc, #84]	; (8001cd0 <pxCurrentTCBConst>)
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	f01e 0f10 	tst.w	lr, #16
 8001c80:	bf08      	it	eq
 8001c82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8001c86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c8a:	6010      	str	r0, [r2, #0]
 8001c8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8001c90:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001c94:	f380 8811 	msr	BASEPRI, r0
 8001c98:	f3bf 8f4f 	dsb	sy
 8001c9c:	f3bf 8f6f 	isb	sy
 8001ca0:	f000 fdc6 	bl	8002830 <vTaskSwitchContext>
 8001ca4:	f04f 0000 	mov.w	r0, #0
 8001ca8:	f380 8811 	msr	BASEPRI, r0
 8001cac:	bc09      	pop	{r0, r3}
 8001cae:	6819      	ldr	r1, [r3, #0]
 8001cb0:	6808      	ldr	r0, [r1, #0]
 8001cb2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001cb6:	f01e 0f10 	tst.w	lr, #16
 8001cba:	bf08      	it	eq
 8001cbc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8001cc0:	f380 8809 	msr	PSP, r0
 8001cc4:	f3bf 8f6f 	isb	sy
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop
 8001ccc:	f3af 8000 	nop.w

08001cd0 <pxCurrentTCBConst>:
 8001cd0:	20003c48 	.word	0x20003c48

08001cd4 <SysTick_Handler>:
{
 8001cd4:	b508      	push	{r3, lr}
	__asm volatile
 8001cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cda:	f383 8811 	msr	BASEPRI, r3
 8001cde:	f3bf 8f6f 	isb	sy
 8001ce2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8001ce6:	f000 fc75 	bl	80025d4 <xTaskIncrementTick>
 8001cea:	b118      	cbz	r0, 8001cf4 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8001cec:	4b03      	ldr	r3, [pc, #12]	; (8001cfc <SysTick_Handler+0x28>)
 8001cee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001cf2:	601a      	str	r2, [r3, #0]
	__asm volatile
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	f383 8811 	msr	BASEPRI, r3
 8001cfa:	bd08      	pop	{r3, pc}
 8001cfc:	e000ed04 	.word	0xe000ed04

08001d00 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8001d00:	4a08      	ldr	r2, [pc, #32]	; (8001d24 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8001d02:	4909      	ldr	r1, [pc, #36]	; (8001d28 <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8001d04:	2300      	movs	r3, #0
 8001d06:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8001d08:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8001d0a:	4b08      	ldr	r3, [pc, #32]	; (8001d2c <vPortSetupTimerInterrupt+0x2c>)
 8001d0c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d16:	4906      	ldr	r1, [pc, #24]	; (8001d30 <vPortSetupTimerInterrupt+0x30>)
 8001d18:	3b01      	subs	r3, #1
 8001d1a:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8001d1c:	2307      	movs	r3, #7
 8001d1e:	6013      	str	r3, [r2, #0]
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	e000e010 	.word	0xe000e010
 8001d28:	e000e018 	.word	0xe000e018
 8001d2c:	20000008 	.word	0x20000008
 8001d30:	e000e014 	.word	0xe000e014

08001d34 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8001d34:	4b39      	ldr	r3, [pc, #228]	; (8001e1c <xPortStartScheduler+0xe8>)
 8001d36:	4a3a      	ldr	r2, [pc, #232]	; (8001e20 <xPortStartScheduler+0xec>)
{
 8001d38:	b513      	push	{r0, r1, r4, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8001d3a:	6819      	ldr	r1, [r3, #0]
 8001d3c:	4291      	cmp	r1, r2
 8001d3e:	d108      	bne.n	8001d52 <xPortStartScheduler+0x1e>
	__asm volatile
 8001d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d44:	f383 8811 	msr	BASEPRI, r3
 8001d48:	f3bf 8f6f 	isb	sy
 8001d4c:	f3bf 8f4f 	dsb	sy
 8001d50:	e7fe      	b.n	8001d50 <xPortStartScheduler+0x1c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	4b33      	ldr	r3, [pc, #204]	; (8001e24 <xPortStartScheduler+0xf0>)
 8001d56:	429a      	cmp	r2, r3
 8001d58:	d108      	bne.n	8001d6c <xPortStartScheduler+0x38>
 8001d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d5e:	f383 8811 	msr	BASEPRI, r3
 8001d62:	f3bf 8f6f 	isb	sy
 8001d66:	f3bf 8f4f 	dsb	sy
 8001d6a:	e7fe      	b.n	8001d6a <xPortStartScheduler+0x36>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8001d6c:	4b2e      	ldr	r3, [pc, #184]	; (8001e28 <xPortStartScheduler+0xf4>)
 8001d6e:	781a      	ldrb	r2, [r3, #0]
 8001d70:	b2d2      	uxtb	r2, r2
 8001d72:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8001d74:	22ff      	movs	r2, #255	; 0xff
 8001d76:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001d78:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001d7a:	4a2c      	ldr	r2, [pc, #176]	; (8001e2c <xPortStartScheduler+0xf8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001d82:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8001d86:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001d8a:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8001d8c:	4b28      	ldr	r3, [pc, #160]	; (8001e30 <xPortStartScheduler+0xfc>)
 8001d8e:	2207      	movs	r2, #7
 8001d90:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001d92:	2100      	movs	r1, #0
 8001d94:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8001d98:	0600      	lsls	r0, r0, #24
 8001d9a:	f102 34ff 	add.w	r4, r2, #4294967295	; 0xffffffff
 8001d9e:	d40d      	bmi.n	8001dbc <xPortStartScheduler+0x88>
 8001da0:	b101      	cbz	r1, 8001da4 <xPortStartScheduler+0x70>
 8001da2:	601a      	str	r2, [r3, #0]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	2a03      	cmp	r2, #3
 8001da8:	d011      	beq.n	8001dce <xPortStartScheduler+0x9a>
 8001daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001dae:	f383 8811 	msr	BASEPRI, r3
 8001db2:	f3bf 8f6f 	isb	sy
 8001db6:	f3bf 8f4f 	dsb	sy
 8001dba:	e7fe      	b.n	8001dba <xPortStartScheduler+0x86>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8001dbc:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8001dc0:	0052      	lsls	r2, r2, #1
 8001dc2:	b2d2      	uxtb	r2, r2
 8001dc4:	f88d 2003 	strb.w	r2, [sp, #3]
 8001dc8:	2101      	movs	r1, #1
 8001dca:	4622      	mov	r2, r4
 8001dcc:	e7e2      	b.n	8001d94 <xPortStartScheduler+0x60>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8001dce:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8001dd0:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8001dd4:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8001dd6:	9b01      	ldr	r3, [sp, #4]
 8001dd8:	4a13      	ldr	r2, [pc, #76]	; (8001e28 <xPortStartScheduler+0xf4>)
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8001dde:	4b15      	ldr	r3, [pc, #84]	; (8001e34 <xPortStartScheduler+0x100>)
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8001de6:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8001dee:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8001df0:	f7ff ff86 	bl	8001d00 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8001df4:	4b10      	ldr	r3, [pc, #64]	; (8001e38 <xPortStartScheduler+0x104>)
 8001df6:	2400      	movs	r4, #0
 8001df8:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 8001dfa:	f7ff fecd 	bl	8001b98 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8001dfe:	4a0f      	ldr	r2, [pc, #60]	; (8001e3c <xPortStartScheduler+0x108>)
 8001e00:	6813      	ldr	r3, [r2, #0]
 8001e02:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8001e06:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8001e08:	f7ff feb2 	bl	8001b70 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8001e0c:	f000 fd10 	bl	8002830 <vTaskSwitchContext>
	prvTaskExitError();
 8001e10:	f7ff fe8e 	bl	8001b30 <prvTaskExitError>
}
 8001e14:	4620      	mov	r0, r4
 8001e16:	b002      	add	sp, #8
 8001e18:	bd10      	pop	{r4, pc}
 8001e1a:	bf00      	nop
 8001e1c:	e000ed00 	.word	0xe000ed00
 8001e20:	410fc271 	.word	0x410fc271
 8001e24:	410fc270 	.word	0x410fc270
 8001e28:	e000e400 	.word	0xe000e400
 8001e2c:	20000028 	.word	0x20000028
 8001e30:	2000002c 	.word	0x2000002c
 8001e34:	e000ed20 	.word	0xe000ed20
 8001e38:	20000004 	.word	0x20000004
 8001e3c:	e000ef34 	.word	0xe000ef34

08001e40 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8001e40:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8001e44:	2b0f      	cmp	r3, #15
 8001e46:	d90e      	bls.n	8001e66 <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8001e48:	4a10      	ldr	r2, [pc, #64]	; (8001e8c <vPortValidateInterruptPriority+0x4c>)
 8001e4a:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8001e4c:	4a10      	ldr	r2, [pc, #64]	; (8001e90 <vPortValidateInterruptPriority+0x50>)
 8001e4e:	7812      	ldrb	r2, [r2, #0]
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d908      	bls.n	8001e66 <vPortValidateInterruptPriority+0x26>
 8001e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e58:	f383 8811 	msr	BASEPRI, r3
 8001e5c:	f3bf 8f6f 	isb	sy
 8001e60:	f3bf 8f4f 	dsb	sy
 8001e64:	e7fe      	b.n	8001e64 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8001e66:	4b0b      	ldr	r3, [pc, #44]	; (8001e94 <vPortValidateInterruptPriority+0x54>)
 8001e68:	4a0b      	ldr	r2, [pc, #44]	; (8001e98 <vPortValidateInterruptPriority+0x58>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	6812      	ldr	r2, [r2, #0]
 8001e6e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d908      	bls.n	8001e88 <vPortValidateInterruptPriority+0x48>
 8001e76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e7a:	f383 8811 	msr	BASEPRI, r3
 8001e7e:	f3bf 8f6f 	isb	sy
 8001e82:	f3bf 8f4f 	dsb	sy
 8001e86:	e7fe      	b.n	8001e86 <vPortValidateInterruptPriority+0x46>
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop
 8001e8c:	e000e3f0 	.word	0xe000e3f0
 8001e90:	20000028 	.word	0x20000028
 8001e94:	e000ed0c 	.word	0xe000ed0c
 8001e98:	2000002c 	.word	0x2000002c

08001e9c <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001e9c:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001e9e:	4b0f      	ldr	r3, [pc, #60]	; (8001edc <prvInsertBlockIntoFreeList+0x40>)
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	4282      	cmp	r2, r0
 8001ea4:	d318      	bcc.n	8001ed8 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001ea6:	685c      	ldr	r4, [r3, #4]
 8001ea8:	1919      	adds	r1, r3, r4
 8001eaa:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001eac:	bf01      	itttt	eq
 8001eae:	6841      	ldreq	r1, [r0, #4]
 8001eb0:	4618      	moveq	r0, r3
 8001eb2:	1909      	addeq	r1, r1, r4
 8001eb4:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001eb6:	6844      	ldr	r4, [r0, #4]
 8001eb8:	1901      	adds	r1, r0, r4
 8001eba:	428a      	cmp	r2, r1
 8001ebc:	d107      	bne.n	8001ece <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8001ebe:	4908      	ldr	r1, [pc, #32]	; (8001ee0 <prvInsertBlockIntoFreeList+0x44>)
 8001ec0:	6809      	ldr	r1, [r1, #0]
 8001ec2:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001ec4:	bf1f      	itttt	ne
 8001ec6:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001ec8:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001eca:	1909      	addne	r1, r1, r4
 8001ecc:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001ece:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001ed0:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001ed2:	bf18      	it	ne
 8001ed4:	6018      	strne	r0, [r3, #0]
 8001ed6:	bd10      	pop	{r4, pc}
 8001ed8:	4613      	mov	r3, r2
 8001eda:	e7e1      	b.n	8001ea0 <prvInsertBlockIntoFreeList+0x4>
 8001edc:	20003c40 	.word	0x20003c40
 8001ee0:	20000030 	.word	0x20000030

08001ee4 <pvPortMalloc>:
{
 8001ee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ee8:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8001eea:	f000 fb6b 	bl	80025c4 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8001eee:	493e      	ldr	r1, [pc, #248]	; (8001fe8 <pvPortMalloc+0x104>)
 8001ef0:	4d3e      	ldr	r5, [pc, #248]	; (8001fec <pvPortMalloc+0x108>)
 8001ef2:	680b      	ldr	r3, [r1, #0]
 8001ef4:	bb0b      	cbnz	r3, 8001f3a <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 8001ef6:	4a3e      	ldr	r2, [pc, #248]	; (8001ff0 <pvPortMalloc+0x10c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001ef8:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8001efa:	bf1f      	itttt	ne
 8001efc:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001efe:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001f02:	f502 5370 	addne.w	r3, r2, #15360	; 0x3c00
 8001f06:	1a1b      	subne	r3, r3, r0
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001f08:	bf14      	ite	ne
 8001f0a:	4602      	movne	r2, r0
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001f0c:	f44f 5370 	moveq.w	r3, #15360	; 0x3c00
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001f10:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8001f12:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001f14:	f023 0307 	bic.w	r3, r3, #7
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001f18:	4e36      	ldr	r6, [pc, #216]	; (8001ff4 <pvPortMalloc+0x110>)
	pxEnd = ( void * ) uxAddress;
 8001f1a:	600b      	str	r3, [r1, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8001f1c:	2000      	movs	r0, #0
 8001f1e:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001f20:	6032      	str	r2, [r6, #0]
	pxEnd->xBlockSize = 0;
 8001f22:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8001f24:	6018      	str	r0, [r3, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001f26:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001f28:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001f2a:	4b33      	ldr	r3, [pc, #204]	; (8001ff8 <pvPortMalloc+0x114>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001f2c:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001f2e:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001f30:	4b32      	ldr	r3, [pc, #200]	; (8001ffc <pvPortMalloc+0x118>)
 8001f32:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001f34:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001f38:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001f3a:	682f      	ldr	r7, [r5, #0]
 8001f3c:	4227      	tst	r7, r4
 8001f3e:	d116      	bne.n	8001f6e <pvPortMalloc+0x8a>
			if( xWantedSize > 0 )
 8001f40:	2c00      	cmp	r4, #0
 8001f42:	d041      	beq.n	8001fc8 <pvPortMalloc+0xe4>
				xWantedSize += xHeapStructSize;
 8001f44:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001f48:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001f4a:	bf1c      	itt	ne
 8001f4c:	f023 0307 	bicne.w	r3, r3, #7
 8001f50:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001f52:	b163      	cbz	r3, 8001f6e <pvPortMalloc+0x8a>
 8001f54:	4a29      	ldr	r2, [pc, #164]	; (8001ffc <pvPortMalloc+0x118>)
 8001f56:	6816      	ldr	r6, [r2, #0]
 8001f58:	42b3      	cmp	r3, r6
 8001f5a:	4690      	mov	r8, r2
 8001f5c:	d807      	bhi.n	8001f6e <pvPortMalloc+0x8a>
				pxBlock = xStart.pxNextFreeBlock;
 8001f5e:	4a25      	ldr	r2, [pc, #148]	; (8001ff4 <pvPortMalloc+0x110>)
 8001f60:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001f62:	6868      	ldr	r0, [r5, #4]
 8001f64:	4283      	cmp	r3, r0
 8001f66:	d804      	bhi.n	8001f72 <pvPortMalloc+0x8e>
				if( pxBlock != pxEnd )
 8001f68:	6809      	ldr	r1, [r1, #0]
 8001f6a:	428d      	cmp	r5, r1
 8001f6c:	d107      	bne.n	8001f7e <pvPortMalloc+0x9a>
void *pvReturn = NULL;
 8001f6e:	2400      	movs	r4, #0
 8001f70:	e02a      	b.n	8001fc8 <pvPortMalloc+0xe4>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001f72:	682c      	ldr	r4, [r5, #0]
 8001f74:	2c00      	cmp	r4, #0
 8001f76:	d0f7      	beq.n	8001f68 <pvPortMalloc+0x84>
 8001f78:	462a      	mov	r2, r5
 8001f7a:	4625      	mov	r5, r4
 8001f7c:	e7f1      	b.n	8001f62 <pvPortMalloc+0x7e>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001f7e:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001f80:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001f82:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001f84:	1ac2      	subs	r2, r0, r3
 8001f86:	2a10      	cmp	r2, #16
 8001f88:	d90f      	bls.n	8001faa <pvPortMalloc+0xc6>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001f8a:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001f8c:	0741      	lsls	r1, r0, #29
 8001f8e:	d008      	beq.n	8001fa2 <pvPortMalloc+0xbe>
 8001f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f94:	f383 8811 	msr	BASEPRI, r3
 8001f98:	f3bf 8f6f 	isb	sy
 8001f9c:	f3bf 8f4f 	dsb	sy
 8001fa0:	e7fe      	b.n	8001fa0 <pvPortMalloc+0xbc>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001fa2:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8001fa4:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8001fa6:	f7ff ff79 	bl	8001e9c <prvInsertBlockIntoFreeList>
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001faa:	4913      	ldr	r1, [pc, #76]	; (8001ff8 <pvPortMalloc+0x114>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001fac:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001fae:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001fb0:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001fb2:	431f      	orrs	r7, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001fb4:	4286      	cmp	r6, r0
					pxBlock->pxNextFreeBlock = NULL;
 8001fb6:	f04f 0300 	mov.w	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001fba:	f8c8 6000 	str.w	r6, [r8]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001fbe:	bf38      	it	cc
 8001fc0:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001fc2:	3408      	adds	r4, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001fc4:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8001fc6:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8001fc8:	f000 fb96 	bl	80026f8 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001fcc:	0763      	lsls	r3, r4, #29
 8001fce:	d008      	beq.n	8001fe2 <pvPortMalloc+0xfe>
 8001fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fd4:	f383 8811 	msr	BASEPRI, r3
 8001fd8:	f3bf 8f6f 	isb	sy
 8001fdc:	f3bf 8f4f 	dsb	sy
 8001fe0:	e7fe      	b.n	8001fe0 <pvPortMalloc+0xfc>
}
 8001fe2:	4620      	mov	r0, r4
 8001fe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001fe8:	20000030 	.word	0x20000030
 8001fec:	20003c34 	.word	0x20003c34
 8001ff0:	20000034 	.word	0x20000034
 8001ff4:	20003c40 	.word	0x20003c40
 8001ff8:	20003c3c 	.word	0x20003c3c
 8001ffc:	20003c38 	.word	0x20003c38

08002000 <vPortFree>:
{
 8002000:	b510      	push	{r4, lr}
	if( pv != NULL )
 8002002:	4604      	mov	r4, r0
 8002004:	b370      	cbz	r0, 8002064 <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002006:	4a18      	ldr	r2, [pc, #96]	; (8002068 <vPortFree+0x68>)
 8002008:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800200c:	6812      	ldr	r2, [r2, #0]
 800200e:	4213      	tst	r3, r2
 8002010:	d108      	bne.n	8002024 <vPortFree+0x24>
 8002012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002016:	f383 8811 	msr	BASEPRI, r3
 800201a:	f3bf 8f6f 	isb	sy
 800201e:	f3bf 8f4f 	dsb	sy
 8002022:	e7fe      	b.n	8002022 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002024:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8002028:	b141      	cbz	r1, 800203c <vPortFree+0x3c>
 800202a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800202e:	f383 8811 	msr	BASEPRI, r3
 8002032:	f3bf 8f6f 	isb	sy
 8002036:	f3bf 8f4f 	dsb	sy
 800203a:	e7fe      	b.n	800203a <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800203c:	ea23 0302 	bic.w	r3, r3, r2
 8002040:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8002044:	f000 fabe 	bl	80025c4 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002048:	4a08      	ldr	r2, [pc, #32]	; (800206c <vPortFree+0x6c>)
 800204a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800204e:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002050:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002054:	440b      	add	r3, r1
 8002056:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002058:	f7ff ff20 	bl	8001e9c <prvInsertBlockIntoFreeList>
}
 800205c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8002060:	f000 bb4a 	b.w	80026f8 <xTaskResumeAll>
 8002064:	bd10      	pop	{r4, pc}
 8002066:	bf00      	nop
 8002068:	20003c34 	.word	0x20003c34
 800206c:	20003c38 	.word	0x20003c38

08002070 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002074:	4606      	mov	r6, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002076:	f7ff fdc5 	bl	8001c04 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800207a:	4b2d      	ldr	r3, [pc, #180]	; (8002130 <prvAddNewTaskToReadyList+0xc0>)
		if( pxCurrentTCB == NULL )
 800207c:	4c2d      	ldr	r4, [pc, #180]	; (8002134 <prvAddNewTaskToReadyList+0xc4>)
		uxCurrentNumberOfTasks++;
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	4f2d      	ldr	r7, [pc, #180]	; (8002138 <prvAddNewTaskToReadyList+0xc8>)
 8002082:	3201      	adds	r2, #1
 8002084:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8002086:	6825      	ldr	r5, [r4, #0]
 8002088:	2d00      	cmp	r5, #0
 800208a:	d145      	bne.n	8002118 <prvAddNewTaskToReadyList+0xa8>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800208c:	6026      	str	r6, [r4, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	2b01      	cmp	r3, #1
 8002092:	d11c      	bne.n	80020ce <prvAddNewTaskToReadyList+0x5e>
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002094:	1978      	adds	r0, r7, r5
 8002096:	3514      	adds	r5, #20
 8002098:	f7ff fd08 	bl	8001aac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800209c:	2d8c      	cmp	r5, #140	; 0x8c
 800209e:	d1f9      	bne.n	8002094 <prvAddNewTaskToReadyList+0x24>
	}

	vListInitialise( &xDelayedTaskList1 );
 80020a0:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8002164 <prvAddNewTaskToReadyList+0xf4>
	vListInitialise( &xDelayedTaskList2 );
 80020a4:	4d25      	ldr	r5, [pc, #148]	; (800213c <prvAddNewTaskToReadyList+0xcc>)
	vListInitialise( &xDelayedTaskList1 );
 80020a6:	4640      	mov	r0, r8
 80020a8:	f7ff fd00 	bl	8001aac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80020ac:	4628      	mov	r0, r5
 80020ae:	f7ff fcfd 	bl	8001aac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80020b2:	4823      	ldr	r0, [pc, #140]	; (8002140 <prvAddNewTaskToReadyList+0xd0>)
 80020b4:	f7ff fcfa 	bl	8001aac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80020b8:	4822      	ldr	r0, [pc, #136]	; (8002144 <prvAddNewTaskToReadyList+0xd4>)
 80020ba:	f7ff fcf7 	bl	8001aac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80020be:	4822      	ldr	r0, [pc, #136]	; (8002148 <prvAddNewTaskToReadyList+0xd8>)
 80020c0:	f7ff fcf4 	bl	8001aac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80020c4:	4b21      	ldr	r3, [pc, #132]	; (800214c <prvAddNewTaskToReadyList+0xdc>)
 80020c6:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80020ca:	4b21      	ldr	r3, [pc, #132]	; (8002150 <prvAddNewTaskToReadyList+0xe0>)
 80020cc:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 80020ce:	4a21      	ldr	r2, [pc, #132]	; (8002154 <prvAddNewTaskToReadyList+0xe4>)
		prvAddTaskToReadyList( pxNewTCB );
 80020d0:	4921      	ldr	r1, [pc, #132]	; (8002158 <prvAddNewTaskToReadyList+0xe8>)
		uxTaskNumber++;
 80020d2:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80020d4:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 80020d6:	3301      	adds	r3, #1
 80020d8:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80020da:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 80020dc:	2301      	movs	r3, #1
 80020de:	4093      	lsls	r3, r2
 80020e0:	4303      	orrs	r3, r0
 80020e2:	2014      	movs	r0, #20
 80020e4:	600b      	str	r3, [r1, #0]
 80020e6:	fb00 7002 	mla	r0, r0, r2, r7
 80020ea:	1d31      	adds	r1, r6, #4
 80020ec:	f7ff fcec 	bl	8001ac8 <vListInsertEnd>
	taskEXIT_CRITICAL();
 80020f0:	f7ff fdaa 	bl	8001c48 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 80020f4:	4b19      	ldr	r3, [pc, #100]	; (800215c <prvAddNewTaskToReadyList+0xec>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	b163      	cbz	r3, 8002114 <prvAddNewTaskToReadyList+0xa4>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80020fa:	6823      	ldr	r3, [r4, #0]
 80020fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020fe:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8002100:	429a      	cmp	r2, r3
 8002102:	d207      	bcs.n	8002114 <prvAddNewTaskToReadyList+0xa4>
			taskYIELD_IF_USING_PREEMPTION();
 8002104:	4b16      	ldr	r3, [pc, #88]	; (8002160 <prvAddNewTaskToReadyList+0xf0>)
 8002106:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800210a:	601a      	str	r2, [r3, #0]
 800210c:	f3bf 8f4f 	dsb	sy
 8002110:	f3bf 8f6f 	isb	sy
 8002114:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 8002118:	4b10      	ldr	r3, [pc, #64]	; (800215c <prvAddNewTaskToReadyList+0xec>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d1d6      	bne.n	80020ce <prvAddNewTaskToReadyList+0x5e>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002120:	6823      	ldr	r3, [r4, #0]
 8002122:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002124:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8002126:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8002128:	bf98      	it	ls
 800212a:	6026      	strls	r6, [r4, #0]
 800212c:	e7cf      	b.n	80020ce <prvAddNewTaskToReadyList+0x5e>
 800212e:	bf00      	nop
 8002130:	20003ce0 	.word	0x20003ce0
 8002134:	20003c48 	.word	0x20003c48
 8002138:	20003c54 	.word	0x20003c54
 800213c:	20003d0c 	.word	0x20003d0c
 8002140:	20003d28 	.word	0x20003d28
 8002144:	20003d54 	.word	0x20003d54
 8002148:	20003d40 	.word	0x20003d40
 800214c:	20003c4c 	.word	0x20003c4c
 8002150:	20003c50 	.word	0x20003c50
 8002154:	20003cf0 	.word	0x20003cf0
 8002158:	20003cf4 	.word	0x20003cf4
 800215c:	20003d3c 	.word	0x20003d3c
 8002160:	e000ed04 	.word	0xe000ed04
 8002164:	20003cf8 	.word	0x20003cf8

08002168 <prvTaskIsTaskSuspended>:
		configASSERT( xTask );
 8002168:	b940      	cbnz	r0, 800217c <prvTaskIsTaskSuspended+0x14>
 800216a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800216e:	f383 8811 	msr	BASEPRI, r3
 8002172:	f3bf 8f6f 	isb	sy
 8002176:	f3bf 8f4f 	dsb	sy
 800217a:	e7fe      	b.n	800217a <prvTaskIsTaskSuspended+0x12>
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800217c:	6942      	ldr	r2, [r0, #20]
 800217e:	4b06      	ldr	r3, [pc, #24]	; (8002198 <prvTaskIsTaskSuspended+0x30>)
 8002180:	429a      	cmp	r2, r3
 8002182:	d001      	beq.n	8002188 <prvTaskIsTaskSuspended+0x20>
	BaseType_t xReturn = pdFALSE;
 8002184:	2000      	movs	r0, #0
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8002186:	4770      	bx	lr
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8002188:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800218a:	4b04      	ldr	r3, [pc, #16]	; (800219c <prvTaskIsTaskSuspended+0x34>)
 800218c:	4298      	cmp	r0, r3
 800218e:	d0f9      	beq.n	8002184 <prvTaskIsTaskSuspended+0x1c>
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8002190:	fab0 f080 	clz	r0, r0
 8002194:	0940      	lsrs	r0, r0, #5
		return xReturn;
 8002196:	4770      	bx	lr
 8002198:	20003d40 	.word	0x20003d40
 800219c:	20003d28 	.word	0x20003d28

080021a0 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80021a0:	4a06      	ldr	r2, [pc, #24]	; (80021bc <prvResetNextTaskUnblockTime+0x1c>)
 80021a2:	6813      	ldr	r3, [r2, #0]
 80021a4:	6819      	ldr	r1, [r3, #0]
 80021a6:	4b06      	ldr	r3, [pc, #24]	; (80021c0 <prvResetNextTaskUnblockTime+0x20>)
 80021a8:	b919      	cbnz	r1, 80021b2 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80021aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80021ae:	601a      	str	r2, [r3, #0]
 80021b0:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80021b2:	6812      	ldr	r2, [r2, #0]
 80021b4:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80021b6:	68d2      	ldr	r2, [r2, #12]
 80021b8:	6852      	ldr	r2, [r2, #4]
 80021ba:	e7f8      	b.n	80021ae <prvResetNextTaskUnblockTime+0xe>
 80021bc:	20003c4c 	.word	0x20003c4c
 80021c0:	20003d20 	.word	0x20003d20

080021c4 <prvInitialiseNewTask.isra.2>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80021c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80021c8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80021ca:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80021ce:	6b26      	ldr	r6, [r4, #48]	; 0x30
 80021d0:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80021d4:	3a01      	subs	r2, #1
 80021d6:	eb06 0682 	add.w	r6, r6, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80021da:	469a      	mov	sl, r3
 80021dc:	4681      	mov	r9, r0
 80021de:	1e4b      	subs	r3, r1, #1
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80021e0:	f026 0607 	bic.w	r6, r6, #7
 80021e4:	f104 0234 	add.w	r2, r4, #52	; 0x34
 80021e8:	310f      	adds	r1, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80021ea:	7858      	ldrb	r0, [r3, #1]
 80021ec:	f802 0b01 	strb.w	r0, [r2], #1
		if( pcName[ x ] == 0x00 )
 80021f0:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 80021f4:	b108      	cbz	r0, 80021fa <prvInitialiseNewTask.isra.2+0x36>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80021f6:	428b      	cmp	r3, r1
 80021f8:	d1f7      	bne.n	80021ea <prvInitialiseNewTask.isra.2+0x26>
 80021fa:	9d08      	ldr	r5, [sp, #32]
 80021fc:	2d06      	cmp	r5, #6
 80021fe:	bf28      	it	cs
 8002200:	2506      	movcs	r5, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002202:	2700      	movs	r7, #0
	pxNewTCB->uxPriority = uxPriority;
 8002204:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8002206:	6465      	str	r5, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002208:	1d20      	adds	r0, r4, #4
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800220a:	f884 7043 	strb.w	r7, [r4, #67]	; 0x43
		pxNewTCB->uxMutexesHeld = 0;
 800220e:	64a7      	str	r7, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002210:	f7ff fc57 	bl	8001ac2 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002214:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002218:	f104 0018 	add.w	r0, r4, #24
 800221c:	f7ff fc51 	bl	8001ac2 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8002220:	64e7      	str	r7, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002222:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002224:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002226:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002228:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800222c:	4652      	mov	r2, sl
 800222e:	4649      	mov	r1, r9
 8002230:	4630      	mov	r0, r6
 8002232:	f7ff fcbb 	bl	8001bac <pxPortInitialiseStack>
 8002236:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8002238:	f1b8 0f00 	cmp.w	r8, #0
 800223c:	d001      	beq.n	8002242 <prvInitialiseNewTask.isra.2+0x7e>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800223e:	f8c8 4000 	str.w	r4, [r8]
 8002242:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08002246 <prvDeleteTCB>:
	{
 8002246:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002248:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
	{
 800224c:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800224e:	b93b      	cbnz	r3, 8002260 <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 8002250:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8002252:	f7ff fed5 	bl	8002000 <vPortFree>
				vPortFree( pxTCB );
 8002256:	4620      	mov	r0, r4
	}
 8002258:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 800225c:	f7ff bed0 	b.w	8002000 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002260:	2b01      	cmp	r3, #1
 8002262:	d0f9      	beq.n	8002258 <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8002264:	2b02      	cmp	r3, #2
 8002266:	d008      	beq.n	800227a <prvDeleteTCB+0x34>
 8002268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800226c:	f383 8811 	msr	BASEPRI, r3
 8002270:	f3bf 8f6f 	isb	sy
 8002274:	f3bf 8f4f 	dsb	sy
 8002278:	e7fe      	b.n	8002278 <prvDeleteTCB+0x32>
 800227a:	bd10      	pop	{r4, pc}

0800227c <prvIdleTask>:
{
 800227c:	b580      	push	{r7, lr}
				taskYIELD();
 800227e:	f8df 805c 	ldr.w	r8, [pc, #92]	; 80022dc <prvIdleTask+0x60>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002282:	4f12      	ldr	r7, [pc, #72]	; (80022cc <prvIdleTask+0x50>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002284:	4c12      	ldr	r4, [pc, #72]	; (80022d0 <prvIdleTask+0x54>)
				--uxCurrentNumberOfTasks;
 8002286:	4d13      	ldr	r5, [pc, #76]	; (80022d4 <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002288:	6823      	ldr	r3, [r4, #0]
 800228a:	b963      	cbnz	r3, 80022a6 <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800228c:	4b12      	ldr	r3, [pc, #72]	; (80022d8 <prvIdleTask+0x5c>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	2b01      	cmp	r3, #1
 8002292:	d9f8      	bls.n	8002286 <prvIdleTask+0xa>
				taskYIELD();
 8002294:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002298:	f8c8 3000 	str.w	r3, [r8]
 800229c:	f3bf 8f4f 	dsb	sy
 80022a0:	f3bf 8f6f 	isb	sy
 80022a4:	e7ee      	b.n	8002284 <prvIdleTask+0x8>
			taskENTER_CRITICAL();
 80022a6:	f7ff fcad 	bl	8001c04 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80022ae:	1d30      	adds	r0, r6, #4
 80022b0:	f7ff fc2d 	bl	8001b0e <uxListRemove>
				--uxCurrentNumberOfTasks;
 80022b4:	682b      	ldr	r3, [r5, #0]
 80022b6:	3b01      	subs	r3, #1
 80022b8:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 80022ba:	6823      	ldr	r3, [r4, #0]
 80022bc:	3b01      	subs	r3, #1
 80022be:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 80022c0:	f7ff fcc2 	bl	8001c48 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 80022c4:	4630      	mov	r0, r6
 80022c6:	f7ff ffbe 	bl	8002246 <prvDeleteTCB>
 80022ca:	e7dd      	b.n	8002288 <prvIdleTask+0xc>
 80022cc:	20003d54 	.word	0x20003d54
 80022d0:	20003ce4 	.word	0x20003ce4
 80022d4:	20003ce0 	.word	0x20003ce0
 80022d8:	20003c54 	.word	0x20003c54
 80022dc:	e000ed04 	.word	0xe000ed04

080022e0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80022e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80022e2:	4b1b      	ldr	r3, [pc, #108]	; (8002350 <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80022e4:	4e1b      	ldr	r6, [pc, #108]	; (8002354 <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 80022e6:	681d      	ldr	r5, [r3, #0]
{
 80022e8:	4604      	mov	r4, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80022ea:	6830      	ldr	r0, [r6, #0]
 80022ec:	3004      	adds	r0, #4
{
 80022ee:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80022f0:	f7ff fc0d 	bl	8001b0e <uxListRemove>
 80022f4:	4633      	mov	r3, r6
 80022f6:	b940      	cbnz	r0, 800230a <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80022f8:	6831      	ldr	r1, [r6, #0]
 80022fa:	4e17      	ldr	r6, [pc, #92]	; (8002358 <prvAddCurrentTaskToDelayedList+0x78>)
 80022fc:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 80022fe:	6832      	ldr	r2, [r6, #0]
 8002300:	2001      	movs	r0, #1
 8002302:	4088      	lsls	r0, r1
 8002304:	ea22 0200 	bic.w	r2, r2, r0
 8002308:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800230a:	1c62      	adds	r2, r4, #1
 800230c:	d107      	bne.n	800231e <prvAddCurrentTaskToDelayedList+0x3e>
 800230e:	b137      	cbz	r7, 800231e <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002310:	6819      	ldr	r1, [r3, #0]
 8002312:	4812      	ldr	r0, [pc, #72]	; (800235c <prvAddCurrentTaskToDelayedList+0x7c>)
 8002314:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002316:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800231a:	f7ff bbd5 	b.w	8001ac8 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800231e:	442c      	add	r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002320:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 8002322:	42a5      	cmp	r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002324:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 8002326:	d907      	bls.n	8002338 <prvAddCurrentTaskToDelayedList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002328:	4a0d      	ldr	r2, [pc, #52]	; (8002360 <prvAddCurrentTaskToDelayedList+0x80>)
 800232a:	6810      	ldr	r0, [r2, #0]
 800232c:	6819      	ldr	r1, [r3, #0]
}
 800232e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002332:	3104      	adds	r1, #4
 8002334:	f7ff bbd4 	b.w	8001ae0 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002338:	4a0a      	ldr	r2, [pc, #40]	; (8002364 <prvAddCurrentTaskToDelayedList+0x84>)
 800233a:	6810      	ldr	r0, [r2, #0]
 800233c:	6819      	ldr	r1, [r3, #0]
 800233e:	3104      	adds	r1, #4
 8002340:	f7ff fbce 	bl	8001ae0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002344:	4b08      	ldr	r3, [pc, #32]	; (8002368 <prvAddCurrentTaskToDelayedList+0x88>)
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 800234a:	bf38      	it	cc
 800234c:	601c      	strcc	r4, [r3, #0]
 800234e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002350:	20003d68 	.word	0x20003d68
 8002354:	20003c48 	.word	0x20003c48
 8002358:	20003cf4 	.word	0x20003cf4
 800235c:	20003d40 	.word	0x20003d40
 8002360:	20003c50 	.word	0x20003c50
 8002364:	20003c4c 	.word	0x20003c4c
 8002368:	20003d20 	.word	0x20003d20

0800236c <xTaskCreateStatic>:
	{
 800236c:	b570      	push	{r4, r5, r6, lr}
 800236e:	b086      	sub	sp, #24
 8002370:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8002372:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
 8002374:	b945      	cbnz	r5, 8002388 <xTaskCreateStatic+0x1c>
 8002376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800237a:	f383 8811 	msr	BASEPRI, r3
 800237e:	f3bf 8f6f 	isb	sy
 8002382:	f3bf 8f4f 	dsb	sy
 8002386:	e7fe      	b.n	8002386 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 8002388:	b944      	cbnz	r4, 800239c <xTaskCreateStatic+0x30>
 800238a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800238e:	f383 8811 	msr	BASEPRI, r3
 8002392:	f3bf 8f6f 	isb	sy
 8002396:	f3bf 8f4f 	dsb	sy
 800239a:	e7fe      	b.n	800239a <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 800239c:	2654      	movs	r6, #84	; 0x54
 800239e:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80023a0:	9e04      	ldr	r6, [sp, #16]
 80023a2:	2e54      	cmp	r6, #84	; 0x54
 80023a4:	d008      	beq.n	80023b8 <xTaskCreateStatic+0x4c>
 80023a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023aa:	f383 8811 	msr	BASEPRI, r3
 80023ae:	f3bf 8f6f 	isb	sy
 80023b2:	f3bf 8f4f 	dsb	sy
 80023b6:	e7fe      	b.n	80023b6 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80023b8:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80023ba:	2502      	movs	r5, #2
 80023bc:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80023c0:	ad05      	add	r5, sp, #20
 80023c2:	9501      	str	r5, [sp, #4]
 80023c4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80023c6:	9402      	str	r4, [sp, #8]
 80023c8:	9500      	str	r5, [sp, #0]
 80023ca:	f7ff fefb 	bl	80021c4 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 80023ce:	4620      	mov	r0, r4
 80023d0:	f7ff fe4e 	bl	8002070 <prvAddNewTaskToReadyList>
	}
 80023d4:	9805      	ldr	r0, [sp, #20]
 80023d6:	b006      	add	sp, #24
 80023d8:	bd70      	pop	{r4, r5, r6, pc}

080023da <xTaskCreate>:
	{
 80023da:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80023de:	4607      	mov	r7, r0
 80023e0:	b085      	sub	sp, #20
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80023e2:	0090      	lsls	r0, r2, #2
	{
 80023e4:	4688      	mov	r8, r1
 80023e6:	4616      	mov	r6, r2
 80023e8:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80023ea:	f7ff fd7b 	bl	8001ee4 <pvPortMalloc>
			if( pxStack != NULL )
 80023ee:	4605      	mov	r5, r0
 80023f0:	b1e8      	cbz	r0, 800242e <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80023f2:	2054      	movs	r0, #84	; 0x54
 80023f4:	f7ff fd76 	bl	8001ee4 <pvPortMalloc>
				if( pxNewTCB != NULL )
 80023f8:	4604      	mov	r4, r0
 80023fa:	b1a8      	cbz	r0, 8002428 <xTaskCreate+0x4e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80023fc:	2300      	movs	r3, #0
 80023fe:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002402:	9b0d      	ldr	r3, [sp, #52]	; 0x34
					pxNewTCB->pxStack = pxStack;
 8002404:	6305      	str	r5, [r0, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002406:	9301      	str	r3, [sp, #4]
 8002408:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800240a:	9002      	str	r0, [sp, #8]
 800240c:	9300      	str	r3, [sp, #0]
 800240e:	4632      	mov	r2, r6
 8002410:	464b      	mov	r3, r9
 8002412:	4641      	mov	r1, r8
 8002414:	4638      	mov	r0, r7
 8002416:	f7ff fed5 	bl	80021c4 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 800241a:	4620      	mov	r0, r4
 800241c:	f7ff fe28 	bl	8002070 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002420:	2001      	movs	r0, #1
	}
 8002422:	b005      	add	sp, #20
 8002424:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 8002428:	4628      	mov	r0, r5
 800242a:	f7ff fde9 	bl	8002000 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800242e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return xReturn;
 8002432:	e7f6      	b.n	8002422 <xTaskCreate+0x48>

08002434 <vTaskResume>:
	{
 8002434:	b570      	push	{r4, r5, r6, lr}
		configASSERT( xTaskToResume );
 8002436:	4604      	mov	r4, r0
 8002438:	b940      	cbnz	r0, 800244c <vTaskResume+0x18>
 800243a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800243e:	f383 8811 	msr	BASEPRI, r3
 8002442:	f3bf 8f6f 	isb	sy
 8002446:	f3bf 8f4f 	dsb	sy
 800244a:	e7fe      	b.n	800244a <vTaskResume+0x16>
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 800244c:	4d16      	ldr	r5, [pc, #88]	; (80024a8 <vTaskResume+0x74>)
 800244e:	682b      	ldr	r3, [r5, #0]
 8002450:	4298      	cmp	r0, r3
 8002452:	d028      	beq.n	80024a6 <vTaskResume+0x72>
			taskENTER_CRITICAL();
 8002454:	f7ff fbd6 	bl	8001c04 <vPortEnterCritical>
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8002458:	4620      	mov	r0, r4
 800245a:	f7ff fe85 	bl	8002168 <prvTaskIsTaskSuspended>
 800245e:	b1f0      	cbz	r0, 800249e <vTaskResume+0x6a>
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8002460:	1d26      	adds	r6, r4, #4
 8002462:	4630      	mov	r0, r6
 8002464:	f7ff fb53 	bl	8001b0e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002468:	4910      	ldr	r1, [pc, #64]	; (80024ac <vTaskResume+0x78>)
 800246a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800246c:	6808      	ldr	r0, [r1, #0]
 800246e:	2301      	movs	r3, #1
 8002470:	4093      	lsls	r3, r2
 8002472:	4303      	orrs	r3, r0
 8002474:	600b      	str	r3, [r1, #0]
 8002476:	4b0e      	ldr	r3, [pc, #56]	; (80024b0 <vTaskResume+0x7c>)
 8002478:	2014      	movs	r0, #20
 800247a:	fb00 3002 	mla	r0, r0, r2, r3
 800247e:	4631      	mov	r1, r6
 8002480:	f7ff fb22 	bl	8001ac8 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002484:	682b      	ldr	r3, [r5, #0]
 8002486:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800248a:	429a      	cmp	r2, r3
 800248c:	d307      	bcc.n	800249e <vTaskResume+0x6a>
						taskYIELD_IF_USING_PREEMPTION();
 800248e:	4b09      	ldr	r3, [pc, #36]	; (80024b4 <vTaskResume+0x80>)
 8002490:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002494:	601a      	str	r2, [r3, #0]
 8002496:	f3bf 8f4f 	dsb	sy
 800249a:	f3bf 8f6f 	isb	sy
	}
 800249e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			taskEXIT_CRITICAL();
 80024a2:	f7ff bbd1 	b.w	8001c48 <vPortExitCritical>
 80024a6:	bd70      	pop	{r4, r5, r6, pc}
 80024a8:	20003c48 	.word	0x20003c48
 80024ac:	20003cf4 	.word	0x20003cf4
 80024b0:	20003c54 	.word	0x20003c54
 80024b4:	e000ed04 	.word	0xe000ed04

080024b8 <xTaskResumeFromISR>:
	{
 80024b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( xTaskToResume );
 80024ba:	4605      	mov	r5, r0
 80024bc:	b940      	cbnz	r0, 80024d0 <xTaskResumeFromISR+0x18>
 80024be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024c2:	f383 8811 	msr	BASEPRI, r3
 80024c6:	f3bf 8f6f 	isb	sy
 80024ca:	f3bf 8f4f 	dsb	sy
 80024ce:	e7fe      	b.n	80024ce <xTaskResumeFromISR+0x16>
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80024d0:	f7ff fcb6 	bl	8001e40 <vPortValidateInterruptPriority>
	__asm volatile
 80024d4:	f3ef 8611 	mrs	r6, BASEPRI
 80024d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024dc:	f383 8811 	msr	BASEPRI, r3
 80024e0:	f3bf 8f6f 	isb	sy
 80024e4:	f3bf 8f4f 	dsb	sy
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80024e8:	4628      	mov	r0, r5
 80024ea:	f7ff fe3d 	bl	8002168 <prvTaskIsTaskSuspended>
 80024ee:	b338      	cbz	r0, 8002540 <xTaskResumeFromISR+0x88>
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80024f0:	4b14      	ldr	r3, [pc, #80]	; (8002544 <xTaskResumeFromISR+0x8c>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	b9eb      	cbnz	r3, 8002532 <xTaskResumeFromISR+0x7a>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80024f6:	4b14      	ldr	r3, [pc, #80]	; (8002548 <xTaskResumeFromISR+0x90>)
 80024f8:	6aec      	ldr	r4, [r5, #44]	; 0x2c
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80024fe:	1d2f      	adds	r7, r5, #4
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002500:	4284      	cmp	r4, r0
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002502:	4638      	mov	r0, r7
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002504:	bf34      	ite	cc
 8002506:	2400      	movcc	r4, #0
 8002508:	2401      	movcs	r4, #1
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800250a:	f7ff fb00 	bl	8001b0e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800250e:	490f      	ldr	r1, [pc, #60]	; (800254c <xTaskResumeFromISR+0x94>)
 8002510:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8002512:	6808      	ldr	r0, [r1, #0]
 8002514:	2301      	movs	r3, #1
 8002516:	4093      	lsls	r3, r2
 8002518:	4303      	orrs	r3, r0
 800251a:	600b      	str	r3, [r1, #0]
 800251c:	4b0c      	ldr	r3, [pc, #48]	; (8002550 <xTaskResumeFromISR+0x98>)
 800251e:	2014      	movs	r0, #20
 8002520:	4639      	mov	r1, r7
 8002522:	fb00 3002 	mla	r0, r0, r2, r3
 8002526:	f7ff facf 	bl	8001ac8 <vListInsertEnd>
	__asm volatile
 800252a:	f386 8811 	msr	BASEPRI, r6
	}
 800252e:	4620      	mov	r0, r4
 8002530:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8002532:	f105 0118 	add.w	r1, r5, #24
 8002536:	4807      	ldr	r0, [pc, #28]	; (8002554 <xTaskResumeFromISR+0x9c>)
 8002538:	f7ff fac6 	bl	8001ac8 <vListInsertEnd>
	BaseType_t xYieldRequired = pdFALSE;
 800253c:	2400      	movs	r4, #0
 800253e:	e7f4      	b.n	800252a <xTaskResumeFromISR+0x72>
 8002540:	4604      	mov	r4, r0
 8002542:	e7f2      	b.n	800252a <xTaskResumeFromISR+0x72>
 8002544:	20003cec 	.word	0x20003cec
 8002548:	20003c48 	.word	0x20003c48
 800254c:	20003cf4 	.word	0x20003cf4
 8002550:	20003c54 	.word	0x20003c54
 8002554:	20003d28 	.word	0x20003d28

08002558 <vTaskStartScheduler>:
{
 8002558:	b510      	push	{r4, lr}
 800255a:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800255c:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800255e:	aa07      	add	r2, sp, #28
 8002560:	a906      	add	r1, sp, #24
 8002562:	a805      	add	r0, sp, #20
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002564:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002566:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002568:	f000 fb5c 	bl	8002c24 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800256c:	9b05      	ldr	r3, [sp, #20]
 800256e:	9302      	str	r3, [sp, #8]
 8002570:	9b06      	ldr	r3, [sp, #24]
 8002572:	9301      	str	r3, [sp, #4]
 8002574:	9400      	str	r4, [sp, #0]
 8002576:	4623      	mov	r3, r4
 8002578:	9a07      	ldr	r2, [sp, #28]
 800257a:	490d      	ldr	r1, [pc, #52]	; (80025b0 <vTaskStartScheduler+0x58>)
 800257c:	480d      	ldr	r0, [pc, #52]	; (80025b4 <vTaskStartScheduler+0x5c>)
 800257e:	f7ff fef5 	bl	800236c <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8002582:	b190      	cbz	r0, 80025aa <vTaskStartScheduler+0x52>
	__asm volatile
 8002584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002588:	f383 8811 	msr	BASEPRI, r3
 800258c:	f3bf 8f6f 	isb	sy
 8002590:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8002594:	4b08      	ldr	r3, [pc, #32]	; (80025b8 <vTaskStartScheduler+0x60>)
 8002596:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800259a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800259c:	4b07      	ldr	r3, [pc, #28]	; (80025bc <vTaskStartScheduler+0x64>)
 800259e:	2201      	movs	r2, #1
 80025a0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80025a2:	4b07      	ldr	r3, [pc, #28]	; (80025c0 <vTaskStartScheduler+0x68>)
 80025a4:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 80025a6:	f7ff fbc5 	bl	8001d34 <xPortStartScheduler>
}
 80025aa:	b008      	add	sp, #32
 80025ac:	bd10      	pop	{r4, pc}
 80025ae:	bf00      	nop
 80025b0:	08003300 	.word	0x08003300
 80025b4:	0800227d 	.word	0x0800227d
 80025b8:	20003d20 	.word	0x20003d20
 80025bc:	20003d3c 	.word	0x20003d3c
 80025c0:	20003d68 	.word	0x20003d68

080025c4 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 80025c4:	4a02      	ldr	r2, [pc, #8]	; (80025d0 <vTaskSuspendAll+0xc>)
 80025c6:	6813      	ldr	r3, [r2, #0]
 80025c8:	3301      	adds	r3, #1
 80025ca:	6013      	str	r3, [r2, #0]
 80025cc:	4770      	bx	lr
 80025ce:	bf00      	nop
 80025d0:	20003cec 	.word	0x20003cec

080025d4 <xTaskIncrementTick>:
{
 80025d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80025d8:	4b3c      	ldr	r3, [pc, #240]	; (80026cc <xTaskIncrementTick+0xf8>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d153      	bne.n	8002688 <xTaskIncrementTick+0xb4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80025e0:	4b3b      	ldr	r3, [pc, #236]	; (80026d0 <xTaskIncrementTick+0xfc>)
 80025e2:	681c      	ldr	r4, [r3, #0]
 80025e4:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 80025e6:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80025e8:	b9bc      	cbnz	r4, 800261a <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 80025ea:	4b3a      	ldr	r3, [pc, #232]	; (80026d4 <xTaskIncrementTick+0x100>)
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	6812      	ldr	r2, [r2, #0]
 80025f0:	b142      	cbz	r2, 8002604 <xTaskIncrementTick+0x30>
 80025f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025f6:	f383 8811 	msr	BASEPRI, r3
 80025fa:	f3bf 8f6f 	isb	sy
 80025fe:	f3bf 8f4f 	dsb	sy
 8002602:	e7fe      	b.n	8002602 <xTaskIncrementTick+0x2e>
 8002604:	4a34      	ldr	r2, [pc, #208]	; (80026d8 <xTaskIncrementTick+0x104>)
 8002606:	6819      	ldr	r1, [r3, #0]
 8002608:	6810      	ldr	r0, [r2, #0]
 800260a:	6018      	str	r0, [r3, #0]
 800260c:	6011      	str	r1, [r2, #0]
 800260e:	4a33      	ldr	r2, [pc, #204]	; (80026dc <xTaskIncrementTick+0x108>)
 8002610:	6813      	ldr	r3, [r2, #0]
 8002612:	3301      	adds	r3, #1
 8002614:	6013      	str	r3, [r2, #0]
 8002616:	f7ff fdc3 	bl	80021a0 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800261a:	4d31      	ldr	r5, [pc, #196]	; (80026e0 <xTaskIncrementTick+0x10c>)
 800261c:	4f31      	ldr	r7, [pc, #196]	; (80026e4 <xTaskIncrementTick+0x110>)
 800261e:	682b      	ldr	r3, [r5, #0]
 8002620:	429c      	cmp	r4, r3
 8002622:	f04f 0b00 	mov.w	fp, #0
 8002626:	d33e      	bcc.n	80026a6 <xTaskIncrementTick+0xd2>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002628:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 80026d4 <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 800262c:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 80026f4 <xTaskIncrementTick+0x120>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002630:	f8d8 2000 	ldr.w	r2, [r8]
 8002634:	6812      	ldr	r2, [r2, #0]
 8002636:	bb72      	cbnz	r2, 8002696 <xTaskIncrementTick+0xc2>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002638:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800263c:	602a      	str	r2, [r5, #0]
					break;
 800263e:	e032      	b.n	80026a6 <xTaskIncrementTick+0xd2>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002640:	f106 0a04 	add.w	sl, r6, #4
 8002644:	4650      	mov	r0, sl
 8002646:	f7ff fa62 	bl	8001b0e <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800264a:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 800264c:	b119      	cbz	r1, 8002656 <xTaskIncrementTick+0x82>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800264e:	f106 0018 	add.w	r0, r6, #24
 8002652:	f7ff fa5c 	bl	8001b0e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002656:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8002658:	f8d9 3000 	ldr.w	r3, [r9]
 800265c:	2201      	movs	r2, #1
 800265e:	fa02 f100 	lsl.w	r1, r2, r0
 8002662:	4319      	orrs	r1, r3
 8002664:	4b20      	ldr	r3, [pc, #128]	; (80026e8 <xTaskIncrementTick+0x114>)
 8002666:	f8c9 1000 	str.w	r1, [r9]
 800266a:	f04f 0e14 	mov.w	lr, #20
 800266e:	4651      	mov	r1, sl
 8002670:	fb0e 3000 	mla	r0, lr, r0, r3
 8002674:	f7ff fa28 	bl	8001ac8 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002678:	6838      	ldr	r0, [r7, #0]
 800267a:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 800267c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 800267e:	4291      	cmp	r1, r2
 8002680:	bf28      	it	cs
 8002682:	f04f 0b01 	movcs.w	fp, #1
 8002686:	e7d3      	b.n	8002630 <xTaskIncrementTick+0x5c>
		++uxPendedTicks;
 8002688:	4a18      	ldr	r2, [pc, #96]	; (80026ec <xTaskIncrementTick+0x118>)
 800268a:	6813      	ldr	r3, [r2, #0]
 800268c:	3301      	adds	r3, #1
 800268e:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8002690:	f04f 0b00 	mov.w	fp, #0
 8002694:	e011      	b.n	80026ba <xTaskIncrementTick+0xe6>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002696:	f8d8 2000 	ldr.w	r2, [r8]
 800269a:	68d2      	ldr	r2, [r2, #12]
 800269c:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800269e:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 80026a0:	428c      	cmp	r4, r1
 80026a2:	d2cd      	bcs.n	8002640 <xTaskIncrementTick+0x6c>
						xNextTaskUnblockTime = xItemValue;
 80026a4:	6029      	str	r1, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80026a6:	683a      	ldr	r2, [r7, #0]
 80026a8:	4b0f      	ldr	r3, [pc, #60]	; (80026e8 <xTaskIncrementTick+0x114>)
 80026aa:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80026ac:	2214      	movs	r2, #20
 80026ae:	434a      	muls	r2, r1
 80026b0:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 80026b2:	2a02      	cmp	r2, #2
 80026b4:	bf28      	it	cs
 80026b6:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 80026ba:	4a0d      	ldr	r2, [pc, #52]	; (80026f0 <xTaskIncrementTick+0x11c>)
 80026bc:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 80026be:	2a00      	cmp	r2, #0
 80026c0:	bf18      	it	ne
 80026c2:	f04f 0b01 	movne.w	fp, #1
}
 80026c6:	4658      	mov	r0, fp
 80026c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80026cc:	20003cec 	.word	0x20003cec
 80026d0:	20003d68 	.word	0x20003d68
 80026d4:	20003c4c 	.word	0x20003c4c
 80026d8:	20003c50 	.word	0x20003c50
 80026dc:	20003d24 	.word	0x20003d24
 80026e0:	20003d20 	.word	0x20003d20
 80026e4:	20003c48 	.word	0x20003c48
 80026e8:	20003c54 	.word	0x20003c54
 80026ec:	20003ce8 	.word	0x20003ce8
 80026f0:	20003d6c 	.word	0x20003d6c
 80026f4:	20003cf4 	.word	0x20003cf4

080026f8 <xTaskResumeAll>:
{
 80026f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 80026fc:	4c31      	ldr	r4, [pc, #196]	; (80027c4 <xTaskResumeAll+0xcc>)
 80026fe:	6823      	ldr	r3, [r4, #0]
 8002700:	b943      	cbnz	r3, 8002714 <xTaskResumeAll+0x1c>
 8002702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002706:	f383 8811 	msr	BASEPRI, r3
 800270a:	f3bf 8f6f 	isb	sy
 800270e:	f3bf 8f4f 	dsb	sy
 8002712:	e7fe      	b.n	8002712 <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8002714:	f7ff fa76 	bl	8001c04 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8002718:	6823      	ldr	r3, [r4, #0]
 800271a:	3b01      	subs	r3, #1
 800271c:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800271e:	6824      	ldr	r4, [r4, #0]
 8002720:	b12c      	cbz	r4, 800272e <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8002722:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8002724:	f7ff fa90 	bl	8001c48 <vPortExitCritical>
}
 8002728:	4620      	mov	r0, r4
 800272a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800272e:	4b26      	ldr	r3, [pc, #152]	; (80027c8 <xTaskResumeAll+0xd0>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d0f5      	beq.n	8002722 <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002736:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 80027e0 <xTaskResumeAll+0xe8>
					prvAddTaskToReadyList( pxTCB );
 800273a:	4f24      	ldr	r7, [pc, #144]	; (80027cc <xTaskResumeAll+0xd4>)
 800273c:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 80027e4 <xTaskResumeAll+0xec>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002740:	f8d9 3000 	ldr.w	r3, [r9]
 8002744:	b9e3      	cbnz	r3, 8002780 <xTaskResumeAll+0x88>
				if( pxTCB != NULL )
 8002746:	b10c      	cbz	r4, 800274c <xTaskResumeAll+0x54>
					prvResetNextTaskUnblockTime();
 8002748:	f7ff fd2a 	bl	80021a0 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800274c:	4d20      	ldr	r5, [pc, #128]	; (80027d0 <xTaskResumeAll+0xd8>)
 800274e:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002750:	b144      	cbz	r4, 8002764 <xTaskResumeAll+0x6c>
								xYieldPending = pdTRUE;
 8002752:	4e20      	ldr	r6, [pc, #128]	; (80027d4 <xTaskResumeAll+0xdc>)
 8002754:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8002756:	f7ff ff3d 	bl	80025d4 <xTaskIncrementTick>
 800275a:	b100      	cbz	r0, 800275e <xTaskResumeAll+0x66>
								xYieldPending = pdTRUE;
 800275c:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800275e:	3c01      	subs	r4, #1
 8002760:	d1f9      	bne.n	8002756 <xTaskResumeAll+0x5e>
						uxPendedTicks = 0;
 8002762:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8002764:	4b1b      	ldr	r3, [pc, #108]	; (80027d4 <xTaskResumeAll+0xdc>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d0da      	beq.n	8002722 <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 800276c:	4b1a      	ldr	r3, [pc, #104]	; (80027d8 <xTaskResumeAll+0xe0>)
 800276e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002772:	601a      	str	r2, [r3, #0]
 8002774:	f3bf 8f4f 	dsb	sy
 8002778:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800277c:	2401      	movs	r4, #1
 800277e:	e7d1      	b.n	8002724 <xTaskResumeAll+0x2c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002780:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8002784:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002786:	1d26      	adds	r6, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002788:	f104 0018 	add.w	r0, r4, #24
 800278c:	f7ff f9bf 	bl	8001b0e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002790:	4630      	mov	r0, r6
 8002792:	f7ff f9bc 	bl	8001b0e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002796:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002798:	6839      	ldr	r1, [r7, #0]
 800279a:	2501      	movs	r5, #1
 800279c:	fa05 f302 	lsl.w	r3, r5, r2
 80027a0:	2014      	movs	r0, #20
 80027a2:	430b      	orrs	r3, r1
 80027a4:	fb00 8002 	mla	r0, r0, r2, r8
 80027a8:	4631      	mov	r1, r6
 80027aa:	603b      	str	r3, [r7, #0]
 80027ac:	f7ff f98c 	bl	8001ac8 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80027b0:	4b0a      	ldr	r3, [pc, #40]	; (80027dc <xTaskResumeAll+0xe4>)
 80027b2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027b8:	429a      	cmp	r2, r3
						xYieldPending = pdTRUE;
 80027ba:	bf24      	itt	cs
 80027bc:	4b05      	ldrcs	r3, [pc, #20]	; (80027d4 <xTaskResumeAll+0xdc>)
 80027be:	601d      	strcs	r5, [r3, #0]
 80027c0:	e7be      	b.n	8002740 <xTaskResumeAll+0x48>
 80027c2:	bf00      	nop
 80027c4:	20003cec 	.word	0x20003cec
 80027c8:	20003ce0 	.word	0x20003ce0
 80027cc:	20003cf4 	.word	0x20003cf4
 80027d0:	20003ce8 	.word	0x20003ce8
 80027d4:	20003d6c 	.word	0x20003d6c
 80027d8:	e000ed04 	.word	0xe000ed04
 80027dc:	20003c48 	.word	0x20003c48
 80027e0:	20003d28 	.word	0x20003d28
 80027e4:	20003c54 	.word	0x20003c54

080027e8 <vTaskDelay>:
	{
 80027e8:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 80027ea:	b940      	cbnz	r0, 80027fe <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 80027ec:	4b0e      	ldr	r3, [pc, #56]	; (8002828 <vTaskDelay+0x40>)
 80027ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027f2:	601a      	str	r2, [r3, #0]
 80027f4:	f3bf 8f4f 	dsb	sy
 80027f8:	f3bf 8f6f 	isb	sy
 80027fc:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 80027fe:	4b0b      	ldr	r3, [pc, #44]	; (800282c <vTaskDelay+0x44>)
 8002800:	6819      	ldr	r1, [r3, #0]
 8002802:	b141      	cbz	r1, 8002816 <vTaskDelay+0x2e>
 8002804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002808:	f383 8811 	msr	BASEPRI, r3
 800280c:	f3bf 8f6f 	isb	sy
 8002810:	f3bf 8f4f 	dsb	sy
 8002814:	e7fe      	b.n	8002814 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8002816:	f7ff fed5 	bl	80025c4 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800281a:	f7ff fd61 	bl	80022e0 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800281e:	f7ff ff6b 	bl	80026f8 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8002822:	2800      	cmp	r0, #0
 8002824:	d0e2      	beq.n	80027ec <vTaskDelay+0x4>
 8002826:	bd08      	pop	{r3, pc}
 8002828:	e000ed04 	.word	0xe000ed04
 800282c:	20003cec 	.word	0x20003cec

08002830 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002830:	4b17      	ldr	r3, [pc, #92]	; (8002890 <vTaskSwitchContext+0x60>)
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	4b17      	ldr	r3, [pc, #92]	; (8002894 <vTaskSwitchContext+0x64>)
{
 8002836:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002838:	b112      	cbz	r2, 8002840 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 800283a:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800283c:	601a      	str	r2, [r3, #0]
 800283e:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 8002840:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002842:	4b15      	ldr	r3, [pc, #84]	; (8002898 <vTaskSwitchContext+0x68>)
 8002844:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002846:	fab3 f383 	clz	r3, r3
 800284a:	b2db      	uxtb	r3, r3
 800284c:	f1c3 031f 	rsb	r3, r3, #31
 8002850:	2214      	movs	r2, #20
 8002852:	4912      	ldr	r1, [pc, #72]	; (800289c <vTaskSwitchContext+0x6c>)
 8002854:	435a      	muls	r2, r3
 8002856:	1888      	adds	r0, r1, r2
 8002858:	588c      	ldr	r4, [r1, r2]
 800285a:	b944      	cbnz	r4, 800286e <vTaskSwitchContext+0x3e>
	__asm volatile
 800285c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002860:	f383 8811 	msr	BASEPRI, r3
 8002864:	f3bf 8f6f 	isb	sy
 8002868:	f3bf 8f4f 	dsb	sy
 800286c:	e7fe      	b.n	800286c <vTaskSwitchContext+0x3c>
 800286e:	6844      	ldr	r4, [r0, #4]
 8002870:	3208      	adds	r2, #8
 8002872:	6864      	ldr	r4, [r4, #4]
 8002874:	6044      	str	r4, [r0, #4]
 8002876:	440a      	add	r2, r1
 8002878:	4294      	cmp	r4, r2
 800287a:	bf04      	itt	eq
 800287c:	6862      	ldreq	r2, [r4, #4]
 800287e:	6042      	streq	r2, [r0, #4]
 8002880:	2214      	movs	r2, #20
 8002882:	fb02 1303 	mla	r3, r2, r3, r1
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	68da      	ldr	r2, [r3, #12]
 800288a:	4b05      	ldr	r3, [pc, #20]	; (80028a0 <vTaskSwitchContext+0x70>)
 800288c:	e7d6      	b.n	800283c <vTaskSwitchContext+0xc>
 800288e:	bf00      	nop
 8002890:	20003cec 	.word	0x20003cec
 8002894:	20003d6c 	.word	0x20003d6c
 8002898:	20003cf4 	.word	0x20003cf4
 800289c:	20003c54 	.word	0x20003c54
 80028a0:	20003c48 	.word	0x20003c48

080028a4 <vTaskSuspend>:
	{
 80028a4:	b570      	push	{r4, r5, r6, lr}
 80028a6:	4604      	mov	r4, r0
 80028a8:	4e2c      	ldr	r6, [pc, #176]	; (800295c <vTaskSuspend+0xb8>)
		taskENTER_CRITICAL();
 80028aa:	f7ff f9ab 	bl	8001c04 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80028ae:	b904      	cbnz	r4, 80028b2 <vTaskSuspend+0xe>
 80028b0:	6834      	ldr	r4, [r6, #0]
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80028b2:	1d25      	adds	r5, r4, #4
 80028b4:	4628      	mov	r0, r5
 80028b6:	f7ff f92a 	bl	8001b0e <uxListRemove>
 80028ba:	b960      	cbnz	r0, 80028d6 <vTaskSuspend+0x32>
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80028bc:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80028be:	4b28      	ldr	r3, [pc, #160]	; (8002960 <vTaskSuspend+0xbc>)
 80028c0:	2114      	movs	r1, #20
 80028c2:	4341      	muls	r1, r0
 80028c4:	585b      	ldr	r3, [r3, r1]
 80028c6:	b933      	cbnz	r3, 80028d6 <vTaskSuspend+0x32>
 80028c8:	4926      	ldr	r1, [pc, #152]	; (8002964 <vTaskSuspend+0xc0>)
 80028ca:	2201      	movs	r2, #1
 80028cc:	680b      	ldr	r3, [r1, #0]
 80028ce:	4082      	lsls	r2, r0
 80028d0:	ea23 0302 	bic.w	r3, r3, r2
 80028d4:	600b      	str	r3, [r1, #0]
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80028d6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80028d8:	b11b      	cbz	r3, 80028e2 <vTaskSuspend+0x3e>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80028da:	f104 0018 	add.w	r0, r4, #24
 80028de:	f7ff f916 	bl	8001b0e <uxListRemove>
			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80028e2:	4629      	mov	r1, r5
 80028e4:	4820      	ldr	r0, [pc, #128]	; (8002968 <vTaskSuspend+0xc4>)
		if( xSchedulerRunning != pdFALSE )
 80028e6:	4d21      	ldr	r5, [pc, #132]	; (800296c <vTaskSuspend+0xc8>)
			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80028e8:	f7ff f8ee 	bl	8001ac8 <vListInsertEnd>
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80028ec:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 80028f0:	2b01      	cmp	r3, #1
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80028f2:	bf04      	itt	eq
 80028f4:	2300      	moveq	r3, #0
 80028f6:	f884 3050 	strbeq.w	r3, [r4, #80]	; 0x50
		taskEXIT_CRITICAL();
 80028fa:	f7ff f9a5 	bl	8001c48 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 80028fe:	682a      	ldr	r2, [r5, #0]
 8002900:	b12a      	cbz	r2, 800290e <vTaskSuspend+0x6a>
			taskENTER_CRITICAL();
 8002902:	f7ff f97f 	bl	8001c04 <vPortEnterCritical>
				prvResetNextTaskUnblockTime();
 8002906:	f7ff fc4b 	bl	80021a0 <prvResetNextTaskUnblockTime>
			taskEXIT_CRITICAL();
 800290a:	f7ff f99d 	bl	8001c48 <vPortExitCritical>
		if( pxTCB == pxCurrentTCB )
 800290e:	6833      	ldr	r3, [r6, #0]
 8002910:	429c      	cmp	r4, r3
 8002912:	d122      	bne.n	800295a <vTaskSuspend+0xb6>
			if( xSchedulerRunning != pdFALSE )
 8002914:	682b      	ldr	r3, [r5, #0]
 8002916:	b1a3      	cbz	r3, 8002942 <vTaskSuspend+0x9e>
				configASSERT( uxSchedulerSuspended == 0 );
 8002918:	4b15      	ldr	r3, [pc, #84]	; (8002970 <vTaskSuspend+0xcc>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	b143      	cbz	r3, 8002930 <vTaskSuspend+0x8c>
 800291e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002922:	f383 8811 	msr	BASEPRI, r3
 8002926:	f3bf 8f6f 	isb	sy
 800292a:	f3bf 8f4f 	dsb	sy
 800292e:	e7fe      	b.n	800292e <vTaskSuspend+0x8a>
				portYIELD_WITHIN_API();
 8002930:	4b10      	ldr	r3, [pc, #64]	; (8002974 <vTaskSuspend+0xd0>)
 8002932:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002936:	601a      	str	r2, [r3, #0]
 8002938:	f3bf 8f4f 	dsb	sy
 800293c:	f3bf 8f6f 	isb	sy
 8002940:	bd70      	pop	{r4, r5, r6, pc}
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 8002942:	4a09      	ldr	r2, [pc, #36]	; (8002968 <vTaskSuspend+0xc4>)
 8002944:	6811      	ldr	r1, [r2, #0]
 8002946:	4a0c      	ldr	r2, [pc, #48]	; (8002978 <vTaskSuspend+0xd4>)
 8002948:	6812      	ldr	r2, [r2, #0]
 800294a:	4291      	cmp	r1, r2
 800294c:	d101      	bne.n	8002952 <vTaskSuspend+0xae>
					pxCurrentTCB = NULL;
 800294e:	6033      	str	r3, [r6, #0]
 8002950:	bd70      	pop	{r4, r5, r6, pc}
	}
 8002952:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
					vTaskSwitchContext();
 8002956:	f7ff bf6b 	b.w	8002830 <vTaskSwitchContext>
 800295a:	bd70      	pop	{r4, r5, r6, pc}
 800295c:	20003c48 	.word	0x20003c48
 8002960:	20003c54 	.word	0x20003c54
 8002964:	20003cf4 	.word	0x20003cf4
 8002968:	20003d40 	.word	0x20003d40
 800296c:	20003d3c 	.word	0x20003d3c
 8002970:	20003cec 	.word	0x20003cec
 8002974:	e000ed04 	.word	0xe000ed04
 8002978:	20003ce0 	.word	0x20003ce0

0800297c <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 800297c:	b507      	push	{r0, r1, r2, lr}
   uint8_t MACAddr[6] ;

  heth.Instance = ETH;
 800297e:	4812      	ldr	r0, [pc, #72]	; (80029c8 <MX_ETH_Init+0x4c>)
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8002980:	4a12      	ldr	r2, [pc, #72]	; (80029cc <MX_ETH_Init+0x50>)
  MACAddr[1] = 0x80;
  MACAddr[2] = 0xE1;
  MACAddr[3] = 0x00;
  MACAddr[4] = 0x00;
  MACAddr[5] = 0x00;
  heth.Init.MACAddr = &MACAddr[0];
 8002982:	f8c0 d014 	str.w	sp, [r0, #20]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8002986:	2301      	movs	r3, #1
 8002988:	e880 000c 	stmia.w	r0, {r2, r3}
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 800298c:	2300      	movs	r3, #0
  MACAddr[1] = 0x80;
 800298e:	2280      	movs	r2, #128	; 0x80
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8002990:	8203      	strh	r3, [r0, #16]
  MACAddr[0] = 0x00;
 8002992:	f88d 3000 	strb.w	r3, [sp]
  MACAddr[1] = 0x80;
 8002996:	f88d 2001 	strb.w	r2, [sp, #1]
  MACAddr[3] = 0x00;
 800299a:	f88d 3003 	strb.w	r3, [sp, #3]
  MACAddr[2] = 0xE1;
 800299e:	22e1      	movs	r2, #225	; 0xe1
  MACAddr[4] = 0x00;
 80029a0:	f88d 3004 	strb.w	r3, [sp, #4]
  MACAddr[5] = 0x00;
 80029a4:	f88d 3005 	strb.w	r3, [sp, #5]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 80029a8:	6183      	str	r3, [r0, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 80029aa:	61c3      	str	r3, [r0, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 80029ac:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
  MACAddr[2] = 0xE1;
 80029b0:	f88d 2002 	strb.w	r2, [sp, #2]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 80029b4:	6203      	str	r3, [r0, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80029b6:	f7fd ff25 	bl	8000804 <HAL_ETH_Init>
 80029ba:	b108      	cbz	r0, 80029c0 <MX_ETH_Init+0x44>
  {
    Error_Handler();
 80029bc:	f000 faba 	bl	8002f34 <Error_Handler>
  }

}
 80029c0:	b003      	add	sp, #12
 80029c2:	f85d fb04 	ldr.w	pc, [sp], #4
 80029c6:	bf00      	nop
 80029c8:	20003fd4 	.word	0x20003fd4
 80029cc:	40028000 	.word	0x40028000

080029d0 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80029d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029d2:	4604      	mov	r4, r0
 80029d4:	b08d      	sub	sp, #52	; 0x34

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029d6:	2214      	movs	r2, #20
 80029d8:	2100      	movs	r1, #0
 80029da:	a807      	add	r0, sp, #28
 80029dc:	f000 fc52 	bl	8003284 <memset>
  if(ethHandle->Instance==ETH)
 80029e0:	6822      	ldr	r2, [r4, #0]
 80029e2:	4b3d      	ldr	r3, [pc, #244]	; (8002ad8 <HAL_ETH_MspInit+0x108>)
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d174      	bne.n	8002ad2 <HAL_ETH_MspInit+0x102>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80029e8:	f5a3 4390 	sub.w	r3, r3, #18432	; 0x4800
 80029ec:	2400      	movs	r4, #0
 80029ee:	9400      	str	r4, [sp, #0]
 80029f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029f2:	483a      	ldr	r0, [pc, #232]	; (8002adc <HAL_ETH_MspInit+0x10c>)
    __HAL_RCC_ETH_CLK_ENABLE();
 80029f4:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80029f8:	631a      	str	r2, [r3, #48]	; 0x30
 80029fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029fc:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8002a00:	9200      	str	r2, [sp, #0]
 8002a02:	9a00      	ldr	r2, [sp, #0]
 8002a04:	9401      	str	r4, [sp, #4]
 8002a06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a08:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002a0c:	631a      	str	r2, [r3, #48]	; 0x30
 8002a0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a10:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 8002a14:	9201      	str	r2, [sp, #4]
 8002a16:	9a01      	ldr	r2, [sp, #4]
 8002a18:	9402      	str	r4, [sp, #8]
 8002a1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a1c:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8002a20:	631a      	str	r2, [r3, #48]	; 0x30
 8002a22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a24:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8002a28:	9202      	str	r2, [sp, #8]
 8002a2a:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a2c:	9403      	str	r4, [sp, #12]
 8002a2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a30:	f042 0204 	orr.w	r2, r2, #4
 8002a34:	631a      	str	r2, [r3, #48]	; 0x30
 8002a36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a38:	f002 0204 	and.w	r2, r2, #4
 8002a3c:	9203      	str	r2, [sp, #12]
 8002a3e:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a40:	9404      	str	r4, [sp, #16]
 8002a42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a44:	f042 0201 	orr.w	r2, r2, #1
 8002a48:	631a      	str	r2, [r3, #48]	; 0x30
 8002a4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a4c:	f002 0201 	and.w	r2, r2, #1
 8002a50:	9204      	str	r2, [sp, #16]
 8002a52:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a54:	9405      	str	r4, [sp, #20]
 8002a56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a58:	f042 0202 	orr.w	r2, r2, #2
 8002a5c:	631a      	str	r2, [r3, #48]	; 0x30
 8002a5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a60:	f002 0202 	and.w	r2, r2, #2
 8002a64:	9205      	str	r2, [sp, #20]
 8002a66:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002a68:	9406      	str	r4, [sp, #24]
 8002a6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a70:	631a      	str	r2, [r3, #48]	; 0x30
 8002a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a78:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a7a:	2702      	movs	r7, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a7c:	2603      	movs	r6, #3
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002a7e:	250b      	movs	r5, #11
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002a80:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a82:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002a84:	2332      	movs	r3, #50	; 0x32
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a86:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002a88:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a8a:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002a8c:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a8e:	f7fd ffb5 	bl	80009fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002a92:	2386      	movs	r3, #134	; 0x86
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a94:	a907      	add	r1, sp, #28
 8002a96:	4812      	ldr	r0, [pc, #72]	; (8002ae0 <HAL_ETH_MspInit+0x110>)
    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002a98:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a9a:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a9c:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a9e:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002aa0:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002aa2:	f7fd ffab 	bl	80009fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8002aa6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8002aaa:	a907      	add	r1, sp, #28
 8002aac:	480d      	ldr	r0, [pc, #52]	; (8002ae4 <HAL_ETH_MspInit+0x114>)
    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8002aae:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ab0:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab2:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ab4:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002ab6:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8002ab8:	f7fd ffa0 	bl	80009fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8002abc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002ac0:	a907      	add	r1, sp, #28
 8002ac2:	4809      	ldr	r0, [pc, #36]	; (8002ae8 <HAL_ETH_MspInit+0x118>)
    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8002ac4:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ac6:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac8:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002aca:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002acc:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002ace:	f7fd ff95 	bl	80009fc <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8002ad2:	b00d      	add	sp, #52	; 0x34
 8002ad4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	40028000 	.word	0x40028000
 8002adc:	40020800 	.word	0x40020800
 8002ae0:	40020000 	.word	0x40020000
 8002ae4:	40020400 	.word	0x40020400
 8002ae8:	40021800 	.word	0x40021800

08002aec <ClignotementLedTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_ClignotementLedTask */
void ClignotementLedTask(void const * argument)
{
 8002aec:	b570      	push	{r4, r5, r6, lr}

  /* USER CODE BEGIN ClignotementLedTask */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_WritePin(LD3_GPIO_Port, LD1_Pin, 1);
 8002aee:	4c21      	ldr	r4, [pc, #132]	; (8002b74 <ClignotementLedTask+0x88>)
	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD3_Pin, 1);
	  for(int i=0; i<cpt_led; i++)
 8002af0:	4e21      	ldr	r6, [pc, #132]	; (8002b78 <ClignotementLedTask+0x8c>)
	  HAL_GPIO_WritePin(LD3_GPIO_Port, LD1_Pin, 1);
 8002af2:	2201      	movs	r2, #1
 8002af4:	4611      	mov	r1, r2
 8002af6:	4620      	mov	r0, r4
 8002af8:	f7fe f86c 	bl	8000bd4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
 8002afc:	2201      	movs	r2, #1
 8002afe:	2180      	movs	r1, #128	; 0x80
 8002b00:	4620      	mov	r0, r4
 8002b02:	f7fe f867 	bl	8000bd4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD3_Pin, 1);
 8002b06:	2201      	movs	r2, #1
 8002b08:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002b0c:	4620      	mov	r0, r4
 8002b0e:	f7fe f861 	bl	8000bd4 <HAL_GPIO_WritePin>
	  for(int i=0; i<cpt_led; i++)
 8002b12:	2500      	movs	r5, #0
 8002b14:	6833      	ldr	r3, [r6, #0]
 8002b16:	429d      	cmp	r5, r3
 8002b18:	db04      	blt.n	8002b24 <ClignotementLedTask+0x38>
		  HAL_GPIO_WritePin(LD3_GPIO_Port, LD1_Pin, 0);
		  HAL_GPIO_WritePin(LD3_GPIO_Port, LD2_Pin, 0);
		  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
		  osDelay(250);
	  }
	  osDelay(1000);
 8002b1a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002b1e:	f7fe ffa0 	bl	8001a62 <osDelay>
	  HAL_GPIO_WritePin(LD3_GPIO_Port, LD1_Pin, 1);
 8002b22:	e7e6      	b.n	8002af2 <ClignotementLedTask+0x6>
		  HAL_GPIO_WritePin(LD3_GPIO_Port, LD1_Pin, 1);
 8002b24:	2201      	movs	r2, #1
 8002b26:	4611      	mov	r1, r2
 8002b28:	4620      	mov	r0, r4
 8002b2a:	f7fe f853 	bl	8000bd4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
 8002b2e:	2201      	movs	r2, #1
 8002b30:	2180      	movs	r1, #128	; 0x80
 8002b32:	4620      	mov	r0, r4
 8002b34:	f7fe f84e 	bl	8000bd4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD3_Pin, 1);
 8002b38:	2201      	movs	r2, #1
 8002b3a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002b3e:	4620      	mov	r0, r4
 8002b40:	f7fe f848 	bl	8000bd4 <HAL_GPIO_WritePin>
		  osDelay(250);
 8002b44:	20fa      	movs	r0, #250	; 0xfa
 8002b46:	f7fe ff8c 	bl	8001a62 <osDelay>
		  HAL_GPIO_WritePin(LD3_GPIO_Port, LD1_Pin, 0);
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	2101      	movs	r1, #1
 8002b4e:	4620      	mov	r0, r4
 8002b50:	f7fe f840 	bl	8000bd4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LD3_GPIO_Port, LD2_Pin, 0);
 8002b54:	2200      	movs	r2, #0
 8002b56:	2180      	movs	r1, #128	; 0x80
 8002b58:	4620      	mov	r0, r4
 8002b5a:	f7fe f83b 	bl	8000bd4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8002b5e:	2200      	movs	r2, #0
 8002b60:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002b64:	4620      	mov	r0, r4
 8002b66:	f7fe f835 	bl	8000bd4 <HAL_GPIO_WritePin>
		  osDelay(250);
 8002b6a:	20fa      	movs	r0, #250	; 0xfa
 8002b6c:	f7fe ff79 	bl	8001a62 <osDelay>
	  for(int i=0; i<cpt_led; i++)
 8002b70:	3501      	adds	r5, #1
 8002b72:	e7cf      	b.n	8002b14 <ClignotementLedTask+0x28>
 8002b74:	40020400 	.word	0x40020400
 8002b78:	2000401c 	.word	0x2000401c

08002b7c <SuspendTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_SuspendTask */
void SuspendTask(void const * argument)
{
 8002b7c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SuspendTask */
  /* Infinite loop */
  for(;;)
  {
	  if(appui_tactile == TOUCHE_MI_GAUCHE)
 8002b7e:	4d12      	ldr	r5, [pc, #72]	; (8002bc8 <SuspendTask+0x4c>)
	  {
		  osThreadSuspend(ClignotementLedHandle);
		  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, 1);
 8002b80:	4c12      	ldr	r4, [pc, #72]	; (8002bcc <SuspendTask+0x50>)
 8002b82:	462e      	mov	r6, r5
	  if(appui_tactile == TOUCHE_MI_GAUCHE)
 8002b84:	682b      	ldr	r3, [r5, #0]
 8002b86:	2b02      	cmp	r3, #2
 8002b88:	d113      	bne.n	8002bb2 <SuspendTask+0x36>
		  osThreadSuspend(ClignotementLedHandle);
 8002b8a:	4b11      	ldr	r3, [pc, #68]	; (8002bd0 <SuspendTask+0x54>)
 8002b8c:	6818      	ldr	r0, [r3, #0]
 8002b8e:	f7fe ff70 	bl	8001a72 <osThreadSuspend>
		  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, 1);
 8002b92:	2201      	movs	r2, #1
 8002b94:	4611      	mov	r1, r2
 8002b96:	4620      	mov	r0, r4
 8002b98:	f7fe f81c 	bl	8000bd4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	2180      	movs	r1, #128	; 0x80
 8002ba0:	4620      	mov	r0, r4
 8002ba2:	f7fe f817 	bl	8000bd4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002bac:	4620      	mov	r0, r4
 8002bae:	f7fe f811 	bl	8000bd4 <HAL_GPIO_WritePin>
	  }
	  if(appui_tactile == TOUCHE_MI_DROITE)
 8002bb2:	6833      	ldr	r3, [r6, #0]
 8002bb4:	2b03      	cmp	r3, #3
 8002bb6:	d103      	bne.n	8002bc0 <SuspendTask+0x44>
	  {
		  osThreadResume(ClignotementLedHandle);
 8002bb8:	4b05      	ldr	r3, [pc, #20]	; (8002bd0 <SuspendTask+0x54>)
 8002bba:	6818      	ldr	r0, [r3, #0]
 8002bbc:	f7fe ff5e 	bl	8001a7c <osThreadResume>
	  }
    osDelay(1);
 8002bc0:	2001      	movs	r0, #1
 8002bc2:	f7fe ff4e 	bl	8001a62 <osDelay>
	  if(appui_tactile == TOUCHE_MI_GAUCHE)
 8002bc6:	e7dd      	b.n	8002b84 <SuspendTask+0x8>
 8002bc8:	20003fd0 	.word	0x20003fd0
 8002bcc:	40020400 	.word	0x40020400
 8002bd0:	20004028 	.word	0x20004028

08002bd4 <CompteurLed>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_CompteurLed */
void CompteurLed(void const * argument)
{
 8002bd4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN CompteurLed */
  /* Infinite loop */
  for(;;)
  {
	  if(appui_btn_led == 1 || appui_tactile == TOUCHE_DROITE)
 8002bd6:	4d10      	ldr	r5, [pc, #64]	; (8002c18 <CompteurLed+0x44>)
 8002bd8:	4c10      	ldr	r4, [pc, #64]	; (8002c1c <CompteurLed+0x48>)
 8002bda:	462e      	mov	r6, r5
 8002bdc:	682b      	ldr	r3, [r5, #0]
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d002      	beq.n	8002be8 <CompteurLed+0x14>
 8002be2:	6823      	ldr	r3, [r4, #0]
 8002be4:	2b04      	cmp	r3, #4
 8002be6:	d109      	bne.n	8002bfc <CompteurLed+0x28>
	  {
		  cpt_led ++;
 8002be8:	4a0d      	ldr	r2, [pc, #52]	; (8002c20 <CompteurLed+0x4c>)
 8002bea:	6813      	ldr	r3, [r2, #0]
		  HAL_Delay(TEMPS_REBOND_BOUTON);
 8002bec:	200f      	movs	r0, #15
		  cpt_led ++;
 8002bee:	3301      	adds	r3, #1
 8002bf0:	6013      	str	r3, [r2, #0]
		  HAL_Delay(TEMPS_REBOND_BOUTON);
 8002bf2:	f7fd fcb1 	bl	8000558 <HAL_Delay>
		  appui_btn_led = 0;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	6033      	str	r3, [r6, #0]
		  appui_tactile = 0;
 8002bfa:	6023      	str	r3, [r4, #0]
	  }
	  if(appui_tactile == TOUCHE_GAUCHE)
 8002bfc:	6823      	ldr	r3, [r4, #0]
 8002bfe:	2b01      	cmp	r3, #1
	  {
		  cpt_led = 0;
 8002c00:	bf04      	itt	eq
 8002c02:	4a07      	ldreq	r2, [pc, #28]	; (8002c20 <CompteurLed+0x4c>)
 8002c04:	2300      	moveq	r3, #0
		  appui_tactile = 0;
	  }
      osDelay(1);
 8002c06:	f04f 0001 	mov.w	r0, #1
		  cpt_led = 0;
 8002c0a:	bf04      	itt	eq
 8002c0c:	6013      	streq	r3, [r2, #0]
		  appui_tactile = 0;
 8002c0e:	6023      	streq	r3, [r4, #0]
      osDelay(1);
 8002c10:	f7fe ff27 	bl	8001a62 <osDelay>
	  if(appui_btn_led == 1 || appui_tactile == TOUCHE_DROITE)
 8002c14:	e7e2      	b.n	8002bdc <CompteurLed+0x8>
 8002c16:	bf00      	nop
 8002c18:	20004020 	.word	0x20004020
 8002c1c:	20003fd0 	.word	0x20003fd0
 8002c20:	2000401c 	.word	0x2000401c

08002c24 <vApplicationGetIdleTaskMemory>:
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002c24:	4b03      	ldr	r3, [pc, #12]	; (8002c34 <vApplicationGetIdleTaskMemory+0x10>)
 8002c26:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8002c28:	4b03      	ldr	r3, [pc, #12]	; (8002c38 <vApplicationGetIdleTaskMemory+0x14>)
 8002c2a:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002c2c:	2380      	movs	r3, #128	; 0x80
 8002c2e:	6013      	str	r3, [r2, #0]
 8002c30:	4770      	bx	lr
 8002c32:	bf00      	nop
 8002c34:	20003f70 	.word	0x20003f70
 8002c38:	20003d70 	.word	0x20003d70

08002c3c <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 8002c3c:	b570      	push	{r4, r5, r6, lr}
  osThreadDef(ClignotementLed, ClignotementLedTask, osPriorityNormal, 0, 128);
 8002c3e:	4c17      	ldr	r4, [pc, #92]	; (8002c9c <MX_FREERTOS_Init+0x60>)
 8002c40:	4626      	mov	r6, r4
 8002c42:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
void MX_FREERTOS_Init(void) {
 8002c44:	b096      	sub	sp, #88	; 0x58
  osThreadDef(ClignotementLed, ClignotementLedTask, osPriorityNormal, 0, 128);
 8002c46:	ad01      	add	r5, sp, #4
 8002c48:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c4a:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8002c4e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  ClignotementLedHandle = osThreadCreate(osThread(ClignotementLed), NULL);
 8002c52:	2100      	movs	r1, #0
 8002c54:	a801      	add	r0, sp, #4
 8002c56:	f7fe fedc 	bl	8001a12 <osThreadCreate>
 8002c5a:	4b11      	ldr	r3, [pc, #68]	; (8002ca0 <MX_FREERTOS_Init+0x64>)
  osThreadDef(SuspendLedTask, SuspendTask, osPriorityHigh, 0, 128);
 8002c5c:	f104 061c 	add.w	r6, r4, #28
  ClignotementLedHandle = osThreadCreate(osThread(ClignotementLed), NULL);
 8002c60:	6018      	str	r0, [r3, #0]
  osThreadDef(SuspendLedTask, SuspendTask, osPriorityHigh, 0, 128);
 8002c62:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002c64:	ad08      	add	r5, sp, #32
 8002c66:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c68:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8002c6c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  SuspendLedTaskHandle = osThreadCreate(osThread(SuspendLedTask), NULL);
 8002c70:	2100      	movs	r1, #0
 8002c72:	a808      	add	r0, sp, #32
 8002c74:	f7fe fecd 	bl	8001a12 <osThreadCreate>
 8002c78:	4b0a      	ldr	r3, [pc, #40]	; (8002ca4 <MX_FREERTOS_Init+0x68>)
  osThreadDef(GestionConpteur, CompteurLed, osPriorityHigh, 0, 128);
 8002c7a:	3438      	adds	r4, #56	; 0x38
  SuspendLedTaskHandle = osThreadCreate(osThread(SuspendLedTask), NULL);
 8002c7c:	6018      	str	r0, [r3, #0]
  osThreadDef(GestionConpteur, CompteurLed, osPriorityHigh, 0, 128);
 8002c7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c80:	ad0f      	add	r5, sp, #60	; 0x3c
 8002c82:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c84:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8002c88:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  GestionConpteurHandle = osThreadCreate(osThread(GestionConpteur), NULL);
 8002c8c:	2100      	movs	r1, #0
 8002c8e:	a80f      	add	r0, sp, #60	; 0x3c
 8002c90:	f7fe febf 	bl	8001a12 <osThreadCreate>
 8002c94:	4b04      	ldr	r3, [pc, #16]	; (8002ca8 <MX_FREERTOS_Init+0x6c>)
 8002c96:	6018      	str	r0, [r3, #0]
}
 8002c98:	b016      	add	sp, #88	; 0x58
 8002c9a:	bd70      	pop	{r4, r5, r6, pc}
 8002c9c:	080032ac 	.word	0x080032ac
 8002ca0:	20004028 	.word	0x20004028
 8002ca4:	2000402c 	.word	0x2000402c
 8002ca8:	20004024 	.word	0x20004024

08002cac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002cac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002cb0:	b08c      	sub	sp, #48	; 0x30

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cb2:	2214      	movs	r2, #20
 8002cb4:	2100      	movs	r1, #0
 8002cb6:	a807      	add	r0, sp, #28
 8002cb8:	f000 fae4 	bl	8003284 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cbc:	2400      	movs	r4, #0
 8002cbe:	4b4a      	ldr	r3, [pc, #296]	; (8002de8 <MX_GPIO_Init+0x13c>)
 8002cc0:	9401      	str	r4, [sp, #4]
 8002cc2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOG_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002cc4:	f8df 8134 	ldr.w	r8, [pc, #308]	; 8002dfc <MX_GPIO_Init+0x150>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8002cc8:	4d48      	ldr	r5, [pc, #288]	; (8002dec <MX_GPIO_Init+0x140>)

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Bouton_Utilisateur_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002cca:	4e49      	ldr	r6, [pc, #292]	; (8002df0 <MX_GPIO_Init+0x144>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ccc:	f042 0204 	orr.w	r2, r2, #4
 8002cd0:	631a      	str	r2, [r3, #48]	; 0x30
 8002cd2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cd4:	f002 0204 	and.w	r2, r2, #4
 8002cd8:	9201      	str	r2, [sp, #4]
 8002cda:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002cdc:	9402      	str	r4, [sp, #8]
 8002cde:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ce0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002ce4:	631a      	str	r2, [r3, #48]	; 0x30
 8002ce6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ce8:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8002cec:	9202      	str	r2, [sp, #8]
 8002cee:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cf0:	9403      	str	r4, [sp, #12]
 8002cf2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cf4:	f042 0201 	orr.w	r2, r2, #1
 8002cf8:	631a      	str	r2, [r3, #48]	; 0x30
 8002cfa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cfc:	f002 0201 	and.w	r2, r2, #1
 8002d00:	9203      	str	r2, [sp, #12]
 8002d02:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d04:	9404      	str	r4, [sp, #16]
 8002d06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d08:	f042 0202 	orr.w	r2, r2, #2
 8002d0c:	631a      	str	r2, [r3, #48]	; 0x30
 8002d0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d10:	f002 0202 	and.w	r2, r2, #2
 8002d14:	9204      	str	r2, [sp, #16]
 8002d16:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d18:	9405      	str	r4, [sp, #20]
 8002d1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d1c:	f042 0208 	orr.w	r2, r2, #8
 8002d20:	631a      	str	r2, [r3, #48]	; 0x30
 8002d22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d24:	f002 0208 	and.w	r2, r2, #8
 8002d28:	9205      	str	r2, [sp, #20]
 8002d2a:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002d2c:	9406      	str	r4, [sp, #24]
 8002d2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d34:	631a      	str	r2, [r3, #48]	; 0x30
 8002d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d3c:	9306      	str	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002d3e:	4622      	mov	r2, r4
 8002d40:	4640      	mov	r0, r8
 8002d42:	f244 0181 	movw	r1, #16513	; 0x4081
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002d46:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002d48:	f7fd ff44 	bl	8000bd4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8002d4c:	4622      	mov	r2, r4
 8002d4e:	4628      	mov	r0, r5
 8002d50:	2140      	movs	r1, #64	; 0x40
 8002d52:	f7fd ff3f 	bl	8000bd4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = Bouton_Utilisateur_Pin;
 8002d56:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(Bouton_Utilisateur_GPIO_Port, &GPIO_InitStruct);
 8002d5a:	a907      	add	r1, sp, #28
 8002d5c:	4825      	ldr	r0, [pc, #148]	; (8002df4 <MX_GPIO_Init+0x148>)
  GPIO_InitStruct.Pin = Bouton_Utilisateur_Pin;
 8002d5e:	9307      	str	r3, [sp, #28]

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d60:	2701      	movs	r7, #1
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002d62:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d64:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(Bouton_Utilisateur_GPIO_Port, &GPIO_InitStruct);
 8002d66:	f7fd fe49 	bl	80009fc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8002d6a:	f244 0381 	movw	r3, #16513	; 0x4081
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d6e:	a907      	add	r1, sp, #28
 8002d70:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8002d72:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d74:	9708      	str	r7, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d76:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d78:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d7a:	f7fd fe3f 	bl	80009fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8002d7e:	2340      	movs	r3, #64	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002d80:	a907      	add	r1, sp, #28
 8002d82:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8002d84:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d86:	9708      	str	r7, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d88:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d8a:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002d8c:	f7fd fe36 	bl	80009fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002d90:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002d92:	a907      	add	r1, sp, #28
 8002d94:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002d96:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d98:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d9a:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002d9c:	f7fd fe2e 	bl	80009fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = Tactile_Gauche_Pin|Tactile_Mi_Gauche_Pin|Tactile_Mi_Droite_Pin|Tactile_Droite_Pin;
 8002da0:	23f0      	movs	r3, #240	; 0xf0
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002da2:	a907      	add	r1, sp, #28
 8002da4:	4814      	ldr	r0, [pc, #80]	; (8002df8 <MX_GPIO_Init+0x14c>)
  GPIO_InitStruct.Pin = Tactile_Gauche_Pin|Tactile_Mi_Gauche_Pin|Tactile_Mi_Droite_Pin|Tactile_Droite_Pin;
 8002da6:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002da8:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002daa:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002dac:	f7fd fe26 	bl	80009fc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8002db0:	4622      	mov	r2, r4
 8002db2:	2105      	movs	r1, #5
 8002db4:	200a      	movs	r0, #10
 8002db6:	f7fd fbf5 	bl	80005a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8002dba:	200a      	movs	r0, #10
 8002dbc:	f7fd fc26 	bl	800060c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8002dc0:	4622      	mov	r2, r4
 8002dc2:	2105      	movs	r1, #5
 8002dc4:	2017      	movs	r0, #23
 8002dc6:	f7fd fbed 	bl	80005a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002dca:	2017      	movs	r0, #23
 8002dcc:	f7fd fc1e 	bl	800060c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8002dd0:	4622      	mov	r2, r4
 8002dd2:	2105      	movs	r1, #5
 8002dd4:	2028      	movs	r0, #40	; 0x28
 8002dd6:	f7fd fbe5 	bl	80005a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002dda:	2028      	movs	r0, #40	; 0x28
 8002ddc:	f7fd fc16 	bl	800060c <HAL_NVIC_EnableIRQ>

}
 8002de0:	b00c      	add	sp, #48	; 0x30
 8002de2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002de6:	bf00      	nop
 8002de8:	40023800 	.word	0x40023800
 8002dec:	40021800 	.word	0x40021800
 8002df0:	10110000 	.word	0x10110000
 8002df4:	40020800 	.word	0x40020800
 8002df8:	40020c00 	.word	0x40020c00
 8002dfc:	40020400 	.word	0x40020400

08002e00 <HAL_GPIO_EXTI_Callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t clavier)
{
  /* Prevent unused argument(s) compilation warning */
	switch(clavier)
 8002e00:	2840      	cmp	r0, #64	; 0x40
 8002e02:	d011      	beq.n	8002e28 <HAL_GPIO_EXTI_Callback+0x28>
 8002e04:	d804      	bhi.n	8002e10 <HAL_GPIO_EXTI_Callback+0x10>
 8002e06:	2810      	cmp	r0, #16
 8002e08:	d008      	beq.n	8002e1c <HAL_GPIO_EXTI_Callback+0x1c>
 8002e0a:	2820      	cmp	r0, #32
 8002e0c:	d00a      	beq.n	8002e24 <HAL_GPIO_EXTI_Callback+0x24>
 8002e0e:	4770      	bx	lr
 8002e10:	2880      	cmp	r0, #128	; 0x80
 8002e12:	d00b      	beq.n	8002e2c <HAL_GPIO_EXTI_Callback+0x2c>
 8002e14:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8002e18:	d00a      	beq.n	8002e30 <HAL_GPIO_EXTI_Callback+0x30>
 8002e1a:	4770      	bx	lr
	{
		case Tactile_Gauche_Pin:
		{
			appui_tactile = TOUCHE_GAUCHE;
 8002e1c:	2201      	movs	r2, #1
			appui_tactile = TOUCHE_MI_DROITE;
			break;
		}
		case Tactile_Droite_Pin:
		{
			appui_tactile = TOUCHE_DROITE;
 8002e1e:	4b06      	ldr	r3, [pc, #24]	; (8002e38 <HAL_GPIO_EXTI_Callback+0x38>)
			break;
		}
		case Bouton_Utilisateur_Pin:
		{
			appui_btn_led = APPUI_BOUTON;
 8002e20:	601a      	str	r2, [r3, #0]
 8002e22:	4770      	bx	lr
			appui_tactile = TOUCHE_MI_GAUCHE;
 8002e24:	2202      	movs	r2, #2
 8002e26:	e7fa      	b.n	8002e1e <HAL_GPIO_EXTI_Callback+0x1e>
			appui_tactile = TOUCHE_MI_DROITE;
 8002e28:	2203      	movs	r2, #3
 8002e2a:	e7f8      	b.n	8002e1e <HAL_GPIO_EXTI_Callback+0x1e>
			appui_tactile = TOUCHE_DROITE;
 8002e2c:	2204      	movs	r2, #4
 8002e2e:	e7f6      	b.n	8002e1e <HAL_GPIO_EXTI_Callback+0x1e>
			appui_btn_led = APPUI_BOUTON;
 8002e30:	2205      	movs	r2, #5
 8002e32:	4b02      	ldr	r3, [pc, #8]	; (8002e3c <HAL_GPIO_EXTI_Callback+0x3c>)
 8002e34:	e7f4      	b.n	8002e20 <HAL_GPIO_EXTI_Callback+0x20>
 8002e36:	bf00      	nop
 8002e38:	20003fd0 	.word	0x20003fd0
 8002e3c:	20004020 	.word	0x20004020

08002e40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002e40:	b530      	push	{r4, r5, lr}
 8002e42:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002e44:	2230      	movs	r2, #48	; 0x30
 8002e46:	2100      	movs	r1, #0
 8002e48:	a808      	add	r0, sp, #32
 8002e4a:	f000 fa1b 	bl	8003284 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002e4e:	2100      	movs	r1, #0
 8002e50:	2214      	movs	r2, #20
 8002e52:	a803      	add	r0, sp, #12
 8002e54:	f000 fa16 	bl	8003284 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e58:	2400      	movs	r4, #0
 8002e5a:	4b1d      	ldr	r3, [pc, #116]	; (8002ed0 <SystemClock_Config+0x90>)
 8002e5c:	9401      	str	r4, [sp, #4]
 8002e5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e60:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002e64:	641a      	str	r2, [r3, #64]	; 0x40
 8002e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e6c:	9301      	str	r3, [sp, #4]
 8002e6e:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e70:	4b18      	ldr	r3, [pc, #96]	; (8002ed4 <SystemClock_Config+0x94>)
 8002e72:	9402      	str	r4, [sp, #8]
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002e7a:	601a      	str	r2, [r3, #0]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002e82:	9302      	str	r3, [sp, #8]
 8002e84:	9b02      	ldr	r3, [sp, #8]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002e86:	2301      	movs	r3, #1
 8002e88:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002e8a:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002e8e:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002e90:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002e94:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002e96:	2304      	movs	r3, #4
 8002e98:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002e9a:	23a8      	movs	r3, #168	; 0xa8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002e9c:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002e9e:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ea0:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002ea2:	2307      	movs	r3, #7
 8002ea4:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ea6:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002ea8:	9512      	str	r5, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002eaa:	f7fd ff2d 	bl	8000d08 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002eae:	230f      	movs	r3, #15
 8002eb0:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002eb2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002eb6:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002eb8:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002eba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002ebe:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002ec0:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ec2:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002ec4:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002ec6:	f7fe f8cf 	bl	8001068 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8002eca:	b015      	add	sp, #84	; 0x54
 8002ecc:	bd30      	pop	{r4, r5, pc}
 8002ece:	bf00      	nop
 8002ed0:	40023800 	.word	0x40023800
 8002ed4:	40007000 	.word	0x40007000

08002ed8 <main>:
	appui_btn_led = 0;
 8002ed8:	4a0d      	ldr	r2, [pc, #52]	; (8002f10 <main+0x38>)
{
 8002eda:	b508      	push	{r3, lr}
	appui_btn_led = 0;
 8002edc:	2300      	movs	r3, #0
 8002ede:	6013      	str	r3, [r2, #0]
	appui_tactile = 0;
 8002ee0:	4a0c      	ldr	r2, [pc, #48]	; (8002f14 <main+0x3c>)
 8002ee2:	6013      	str	r3, [r2, #0]
	cpt_attente = 0;
 8002ee4:	4a0c      	ldr	r2, [pc, #48]	; (8002f18 <main+0x40>)
 8002ee6:	6013      	str	r3, [r2, #0]
	suspend = 0;
 8002ee8:	4a0c      	ldr	r2, [pc, #48]	; (8002f1c <main+0x44>)
 8002eea:	6013      	str	r3, [r2, #0]
  HAL_Init();
 8002eec:	f7fd fb08 	bl	8000500 <HAL_Init>
  SystemClock_Config();
 8002ef0:	f7ff ffa6 	bl	8002e40 <SystemClock_Config>
  MX_GPIO_Init();
 8002ef4:	f7ff feda 	bl	8002cac <MX_GPIO_Init>
  MX_ETH_Init();
 8002ef8:	f7ff fd40 	bl	800297c <MX_ETH_Init>
  MX_USART3_UART_Init();
 8002efc:	f000 f8c2 	bl	8003084 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8002f00:	f000 f914 	bl	800312c <MX_USB_OTG_FS_PCD_Init>
  MX_FREERTOS_Init();
 8002f04:	f7ff fe9a 	bl	8002c3c <MX_FREERTOS_Init>
  osKernelStart();
 8002f08:	f7fe fd7e 	bl	8001a08 <osKernelStart>
 8002f0c:	e7fe      	b.n	8002f0c <main+0x34>
 8002f0e:	bf00      	nop
 8002f10:	20004020 	.word	0x20004020
 8002f14:	20003fd0 	.word	0x20003fd0
 8002f18:	20003fc8 	.word	0x20003fc8
 8002f1c:	20003fcc 	.word	0x20003fcc

08002f20 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM8) {
 8002f20:	6802      	ldr	r2, [r0, #0]
 8002f22:	4b03      	ldr	r3, [pc, #12]	; (8002f30 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d101      	bne.n	8002f2c <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8002f28:	f7fd bb04 	b.w	8000534 <HAL_IncTick>
 8002f2c:	4770      	bx	lr
 8002f2e:	bf00      	nop
 8002f30:	40010400 	.word	0x40010400

08002f34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f34:	4770      	bx	lr
	...

08002f38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f38:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f3a:	4b0f      	ldr	r3, [pc, #60]	; (8002f78 <HAL_MspInit+0x40>)
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	9200      	str	r2, [sp, #0]
 8002f40:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002f42:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8002f46:	6459      	str	r1, [r3, #68]	; 0x44
 8002f48:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002f4a:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 8002f4e:	9100      	str	r1, [sp, #0]
 8002f50:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f52:	9201      	str	r2, [sp, #4]
 8002f54:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002f56:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8002f5a:	6419      	str	r1, [r3, #64]	; 0x40
 8002f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f62:	9301      	str	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002f64:	210f      	movs	r1, #15
 8002f66:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f6a:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002f6c:	f7fd fb1a 	bl	80005a4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f70:	b003      	add	sp, #12
 8002f72:	f85d fb04 	ldr.w	pc, [sp], #4
 8002f76:	bf00      	nop
 8002f78:	40023800 	.word	0x40023800

08002f7c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f7c:	b530      	push	{r4, r5, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM8 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, TickPriority ,0); 
 8002f7e:	4601      	mov	r1, r0
{
 8002f80:	b089      	sub	sp, #36	; 0x24
  HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, TickPriority ,0); 
 8002f82:	2200      	movs	r2, #0
 8002f84:	202c      	movs	r0, #44	; 0x2c
 8002f86:	f7fd fb0d 	bl	80005a4 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM8 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn); 
 8002f8a:	202c      	movs	r0, #44	; 0x2c
 8002f8c:	f7fd fb3e 	bl	800060c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM8 clock */
  __HAL_RCC_TIM8_CLK_ENABLE();
 8002f90:	2500      	movs	r5, #0
 8002f92:	4b15      	ldr	r3, [pc, #84]	; (8002fe8 <HAL_InitTick+0x6c>)
 8002f94:	9502      	str	r5, [sp, #8]
 8002f96:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   
  /* Compute the prescaler value to have TIM8 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM8 */
  htim8.Instance = TIM8;
 8002f98:	4c14      	ldr	r4, [pc, #80]	; (8002fec <HAL_InitTick+0x70>)
  __HAL_RCC_TIM8_CLK_ENABLE();
 8002f9a:	f042 0202 	orr.w	r2, r2, #2
 8002f9e:	645a      	str	r2, [r3, #68]	; 0x44
 8002fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fa2:	f003 0302 	and.w	r3, r3, #2
 8002fa6:	9302      	str	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002fa8:	a901      	add	r1, sp, #4
 8002faa:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM8_CLK_ENABLE();
 8002fac:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002fae:	f7fe f91b 	bl	80011e8 <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8002fb2:	f7fe f909 	bl	80011c8 <HAL_RCC_GetPCLK2Freq>
  htim8.Instance = TIM8;
 8002fb6:	4b0e      	ldr	r3, [pc, #56]	; (8002ff0 <HAL_InitTick+0x74>)
 8002fb8:	6023      	str	r3, [r4, #0]
  + Period = [(TIM8CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim8.Init.Period = (1000000 / 1000) - 1;
 8002fba:	f240 33e7 	movw	r3, #999	; 0x3e7
 8002fbe:	60e3      	str	r3, [r4, #12]
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8002fc0:	0040      	lsls	r0, r0, #1
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002fc2:	4b0c      	ldr	r3, [pc, #48]	; (8002ff4 <HAL_InitTick+0x78>)
 8002fc4:	fbb0 f0f3 	udiv	r0, r0, r3
 8002fc8:	3801      	subs	r0, #1
  htim8.Init.Prescaler = uwPrescalerValue;
 8002fca:	6060      	str	r0, [r4, #4]
  htim8.Init.ClockDivision = 0;
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim8) == HAL_OK)
 8002fcc:	4620      	mov	r0, r4
  htim8.Init.ClockDivision = 0;
 8002fce:	6125      	str	r5, [r4, #16]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fd0:	60a5      	str	r5, [r4, #8]
  if(HAL_TIM_Base_Init(&htim8) == HAL_OK)
 8002fd2:	f7fe fa45 	bl	8001460 <HAL_TIM_Base_Init>
 8002fd6:	b920      	cbnz	r0, 8002fe2 <HAL_InitTick+0x66>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim8);
 8002fd8:	4620      	mov	r0, r4
 8002fda:	f7fe f924 	bl	8001226 <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 8002fde:	b009      	add	sp, #36	; 0x24
 8002fe0:	bd30      	pop	{r4, r5, pc}
  return HAL_ERROR;
 8002fe2:	2001      	movs	r0, #1
 8002fe4:	e7fb      	b.n	8002fde <HAL_InitTick+0x62>
 8002fe6:	bf00      	nop
 8002fe8:	40023800 	.word	0x40023800
 8002fec:	20004030 	.word	0x20004030
 8002ff0:	40010400 	.word	0x40010400
 8002ff4:	000f4240 	.word	0x000f4240

08002ff8 <NMI_Handler>:
 8002ff8:	4770      	bx	lr

08002ffa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ffa:	e7fe      	b.n	8002ffa <HardFault_Handler>

08002ffc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ffc:	e7fe      	b.n	8002ffc <MemManage_Handler>

08002ffe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ffe:	e7fe      	b.n	8002ffe <BusFault_Handler>

08003000 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003000:	e7fe      	b.n	8003000 <UsageFault_Handler>

08003002 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003002:	4770      	bx	lr

08003004 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8003004:	2010      	movs	r0, #16
 8003006:	f7fd bdeb 	b.w	8000be0 <HAL_GPIO_EXTI_IRQHandler>

0800300a <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800300a:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 800300c:	2020      	movs	r0, #32
 800300e:	f7fd fde7 	bl	8000be0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8003012:	2040      	movs	r0, #64	; 0x40
 8003014:	f7fd fde4 	bl	8000be0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8003018:	2080      	movs	r0, #128	; 0x80
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800301a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 800301e:	f7fd bddf 	b.w	8000be0 <HAL_GPIO_EXTI_IRQHandler>

08003022 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8003022:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003026:	f7fd bddb 	b.w	8000be0 <HAL_GPIO_EXTI_IRQHandler>
	...

0800302c <TIM8_UP_TIM13_IRQHandler>:
void TIM8_UP_TIM13_IRQHandler(void)
{
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800302c:	4801      	ldr	r0, [pc, #4]	; (8003034 <TIM8_UP_TIM13_IRQHandler+0x8>)
 800302e:	f7fe b90e 	b.w	800124e <HAL_TIM_IRQHandler>
 8003032:	bf00      	nop
 8003034:	20004030 	.word	0x20004030

08003038 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003038:	490f      	ldr	r1, [pc, #60]	; (8003078 <SystemInit+0x40>)
 800303a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800303e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003042:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003046:	4b0d      	ldr	r3, [pc, #52]	; (800307c <SystemInit+0x44>)
 8003048:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800304a:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 800304c:	f042 0201 	orr.w	r2, r2, #1
 8003050:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8003052:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800305a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800305e:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003060:	4a07      	ldr	r2, [pc, #28]	; (8003080 <SystemInit+0x48>)
 8003062:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800306a:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800306c:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800306e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003072:	608b      	str	r3, [r1, #8]
 8003074:	4770      	bx	lr
 8003076:	bf00      	nop
 8003078:	e000ed00 	.word	0xe000ed00
 800307c:	40023800 	.word	0x40023800
 8003080:	24003010 	.word	0x24003010

08003084 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003084:	b508      	push	{r3, lr}

  huart3.Instance = USART3;
 8003086:	480b      	ldr	r0, [pc, #44]	; (80030b4 <MX_USART3_UART_Init+0x30>)
  huart3.Init.BaudRate = 115200;
 8003088:	4b0b      	ldr	r3, [pc, #44]	; (80030b8 <MX_USART3_UART_Init+0x34>)
 800308a:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 800308e:	e880 4008 	stmia.w	r0, {r3, lr}
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003092:	220c      	movs	r2, #12
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003094:	2300      	movs	r3, #0
 8003096:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003098:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800309a:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800309c:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800309e:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80030a0:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80030a2:	f7fe fb13 	bl	80016cc <HAL_UART_Init>
 80030a6:	b118      	cbz	r0, 80030b0 <MX_USART3_UART_Init+0x2c>
  {
    Error_Handler();
  }

}
 80030a8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80030ac:	f7ff bf42 	b.w	8002f34 <Error_Handler>
 80030b0:	bd08      	pop	{r3, pc}
 80030b2:	bf00      	nop
 80030b4:	20004070 	.word	0x20004070
 80030b8:	40004800 	.word	0x40004800

080030bc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80030bc:	b510      	push	{r4, lr}
 80030be:	4604      	mov	r4, r0
 80030c0:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030c2:	2214      	movs	r2, #20
 80030c4:	2100      	movs	r1, #0
 80030c6:	a803      	add	r0, sp, #12
 80030c8:	f000 f8dc 	bl	8003284 <memset>
  if(uartHandle->Instance==USART3)
 80030cc:	6822      	ldr	r2, [r4, #0]
 80030ce:	4b15      	ldr	r3, [pc, #84]	; (8003124 <HAL_UART_MspInit+0x68>)
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d125      	bne.n	8003120 <HAL_UART_MspInit+0x64>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80030d4:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
 80030d8:	2100      	movs	r1, #0
 80030da:	9101      	str	r1, [sp, #4]
 80030dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80030de:	4812      	ldr	r0, [pc, #72]	; (8003128 <HAL_UART_MspInit+0x6c>)
    __HAL_RCC_USART3_CLK_ENABLE();
 80030e0:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80030e4:	641a      	str	r2, [r3, #64]	; 0x40
 80030e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030e8:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 80030ec:	9201      	str	r2, [sp, #4]
 80030ee:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80030f0:	9102      	str	r1, [sp, #8]
 80030f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030f4:	f042 0208 	orr.w	r2, r2, #8
 80030f8:	631a      	str	r2, [r3, #48]	; 0x30
 80030fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030fc:	f003 0308 	and.w	r3, r3, #8
 8003100:	9302      	str	r3, [sp, #8]
 8003102:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8003104:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003108:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800310a:	2302      	movs	r3, #2
 800310c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800310e:	2301      	movs	r3, #1
 8003110:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003112:	2303      	movs	r3, #3
 8003114:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003116:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003118:	2307      	movs	r3, #7
 800311a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800311c:	f7fd fc6e 	bl	80009fc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8003120:	b008      	add	sp, #32
 8003122:	bd10      	pop	{r4, pc}
 8003124:	40004800 	.word	0x40004800
 8003128:	40020c00 	.word	0x40020c00

0800312c <MX_USB_OTG_FS_PCD_Init>:
/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800312c:	480c      	ldr	r0, [pc, #48]	; (8003160 <MX_USB_OTG_FS_PCD_Init+0x34>)
{
 800312e:	b508      	push	{r3, lr}
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8003130:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8003134:	2304      	movs	r3, #4
 8003136:	e880 000c 	stmia.w	r0, {r2, r3}
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800313a:	2202      	movs	r2, #2
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800313c:	2300      	movs	r3, #0
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800313e:	60c2      	str	r2, [r0, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8003140:	6182      	str	r2, [r0, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8003142:	2201      	movs	r2, #1
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8003144:	6103      	str	r3, [r0, #16]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8003146:	61c2      	str	r2, [r0, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8003148:	6203      	str	r3, [r0, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800314a:	6243      	str	r3, [r0, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800314c:	62c2      	str	r2, [r0, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800314e:	6303      	str	r3, [r0, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8003150:	f7fd fd52 	bl	8000bf8 <HAL_PCD_Init>
 8003154:	b118      	cbz	r0, 800315e <MX_USB_OTG_FS_PCD_Init+0x32>
  {
    Error_Handler();
  }

}
 8003156:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800315a:	f7ff beeb 	b.w	8002f34 <Error_Handler>
 800315e:	bd08      	pop	{r3, pc}
 8003160:	200040b0 	.word	0x200040b0

08003164 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8003164:	b530      	push	{r4, r5, lr}
 8003166:	4604      	mov	r4, r0
 8003168:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800316a:	2214      	movs	r2, #20
 800316c:	2100      	movs	r1, #0
 800316e:	a803      	add	r0, sp, #12
 8003170:	f000 f888 	bl	8003284 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8003174:	6823      	ldr	r3, [r4, #0]
 8003176:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800317a:	d12f      	bne.n	80031dc <HAL_PCD_MspInit+0x78>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800317c:	4c18      	ldr	r4, [pc, #96]	; (80031e0 <HAL_PCD_MspInit+0x7c>)
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800317e:	4819      	ldr	r0, [pc, #100]	; (80031e4 <HAL_PCD_MspInit+0x80>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003180:	2500      	movs	r5, #0
 8003182:	9501      	str	r5, [sp, #4]
 8003184:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003186:	f043 0301 	orr.w	r3, r3, #1
 800318a:	6323      	str	r3, [r4, #48]	; 0x30
 800318c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800318e:	f003 0301 	and.w	r3, r3, #1
 8003192:	9301      	str	r3, [sp, #4]
 8003194:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8003196:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800319a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800319c:	2302      	movs	r3, #2
 800319e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031a0:	2303      	movs	r3, #3
 80031a2:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031a4:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80031a6:	230a      	movs	r3, #10
 80031a8:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031aa:	f7fd fc27 	bl	80009fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80031ae:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80031b2:	a903      	add	r1, sp, #12
 80031b4:	480b      	ldr	r0, [pc, #44]	; (80031e4 <HAL_PCD_MspInit+0x80>)
    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80031b6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80031b8:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ba:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80031bc:	f7fd fc1e 	bl	80009fc <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80031c0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80031c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031c6:	6363      	str	r3, [r4, #52]	; 0x34
 80031c8:	9502      	str	r5, [sp, #8]
 80031ca:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80031cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031d0:	6463      	str	r3, [r4, #68]	; 0x44
 80031d2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80031d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031d8:	9302      	str	r3, [sp, #8]
 80031da:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80031dc:	b009      	add	sp, #36	; 0x24
 80031de:	bd30      	pop	{r4, r5, pc}
 80031e0:	40023800 	.word	0x40023800
 80031e4:	40020000 	.word	0x40020000

080031e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80031e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003220 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80031ec:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80031ee:	e003      	b.n	80031f8 <LoopCopyDataInit>

080031f0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80031f0:	4b0c      	ldr	r3, [pc, #48]	; (8003224 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80031f2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80031f4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80031f6:	3104      	adds	r1, #4

080031f8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80031f8:	480b      	ldr	r0, [pc, #44]	; (8003228 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80031fa:	4b0c      	ldr	r3, [pc, #48]	; (800322c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80031fc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80031fe:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003200:	d3f6      	bcc.n	80031f0 <CopyDataInit>
  ldr  r2, =_sbss
 8003202:	4a0b      	ldr	r2, [pc, #44]	; (8003230 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003204:	e002      	b.n	800320c <LoopFillZerobss>

08003206 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003206:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003208:	f842 3b04 	str.w	r3, [r2], #4

0800320c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800320c:	4b09      	ldr	r3, [pc, #36]	; (8003234 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800320e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003210:	d3f9      	bcc.n	8003206 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003212:	f7ff ff11 	bl	8003038 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003216:	f000 f811 	bl	800323c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800321a:	f7ff fe5d 	bl	8002ed8 <main>
  bx  lr    
 800321e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8003220:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8003224:	0800335c 	.word	0x0800335c
  ldr  r0, =_sdata
 8003228:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800322c:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8003230:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8003234:	200044b8 	.word	0x200044b8

08003238 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003238:	e7fe      	b.n	8003238 <ADC_IRQHandler>
	...

0800323c <__libc_init_array>:
 800323c:	b570      	push	{r4, r5, r6, lr}
 800323e:	4e0d      	ldr	r6, [pc, #52]	; (8003274 <__libc_init_array+0x38>)
 8003240:	4c0d      	ldr	r4, [pc, #52]	; (8003278 <__libc_init_array+0x3c>)
 8003242:	1ba4      	subs	r4, r4, r6
 8003244:	10a4      	asrs	r4, r4, #2
 8003246:	2500      	movs	r5, #0
 8003248:	42a5      	cmp	r5, r4
 800324a:	d109      	bne.n	8003260 <__libc_init_array+0x24>
 800324c:	4e0b      	ldr	r6, [pc, #44]	; (800327c <__libc_init_array+0x40>)
 800324e:	4c0c      	ldr	r4, [pc, #48]	; (8003280 <__libc_init_array+0x44>)
 8003250:	f000 f820 	bl	8003294 <_init>
 8003254:	1ba4      	subs	r4, r4, r6
 8003256:	10a4      	asrs	r4, r4, #2
 8003258:	2500      	movs	r5, #0
 800325a:	42a5      	cmp	r5, r4
 800325c:	d105      	bne.n	800326a <__libc_init_array+0x2e>
 800325e:	bd70      	pop	{r4, r5, r6, pc}
 8003260:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003264:	4798      	blx	r3
 8003266:	3501      	adds	r5, #1
 8003268:	e7ee      	b.n	8003248 <__libc_init_array+0xc>
 800326a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800326e:	4798      	blx	r3
 8003270:	3501      	adds	r5, #1
 8003272:	e7f2      	b.n	800325a <__libc_init_array+0x1e>
 8003274:	08003354 	.word	0x08003354
 8003278:	08003354 	.word	0x08003354
 800327c:	08003354 	.word	0x08003354
 8003280:	08003358 	.word	0x08003358

08003284 <memset>:
 8003284:	4402      	add	r2, r0
 8003286:	4603      	mov	r3, r0
 8003288:	4293      	cmp	r3, r2
 800328a:	d100      	bne.n	800328e <memset+0xa>
 800328c:	4770      	bx	lr
 800328e:	f803 1b01 	strb.w	r1, [r3], #1
 8003292:	e7f9      	b.n	8003288 <memset+0x4>

08003294 <_init>:
 8003294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003296:	bf00      	nop
 8003298:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800329a:	bc08      	pop	{r3}
 800329c:	469e      	mov	lr, r3
 800329e:	4770      	bx	lr

080032a0 <_fini>:
 80032a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032a2:	bf00      	nop
 80032a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032a6:	bc08      	pop	{r3}
 80032a8:	469e      	mov	lr, r3
 80032aa:	4770      	bx	lr
